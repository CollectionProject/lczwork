cscope 16 F:\workspace\wifi story\JL-WIFI_STORY_MACHINE-AC521X(SDK-V1.0.0)\JL-WIFI_STORY_MACHINE-AC521X               0001972718
	@app/ap_config.c

1 
	#USE_RTL8189


	)

35 #i‡(
deföed
 
USE_RTL8189
Ë||(deföed 
USE_RTL8188
)

37 
	gho°≠d_c⁄fig_fûe
[] =

96 #ñi‡
deföed
 
USE_S9082


98 
	gho°≠d_c⁄fig_fûe
[] =

158 
	gwps_ho°≠d_c⁄fig_fûe
[] = \

189 c⁄° *
	$gë_ho°≠d_c⁄fig_fûe
(
íabÀ_wps
)

191 #i‡(
deföed
 
USE_RTL8189
Ë||(deföed 
USE_RTL8188
Ë|| (deföed 
USE_S9082
)

192 i‡(
íabÀ_wps
) {

193  
wps_ho°≠d_c⁄fig_fûe
;

195  
ho°≠d_c⁄fig_fûe
;

199 
	}
}

	@app/debug.c

1 
	~"≠p_c⁄fig.h
"

2 
	~"ty≥def.h
"

6 #i‚de‡
CONFIG_DEBUG_ENABLE


8 
	$putch¨
(
a
)

10  
a
;

11 
	}
}

13 
	$puts
(c⁄° *
out
)

16 
	}
}

18 
	$¥ötf
(c⁄° *
f‹m©
, ...)

21 
	}
}

24 
	$put_buf
(c⁄° 
u8
 *
buf
, 
Àn
)

27 
	}
}

29 
	$put_u8hex
(
u8
 
d©
)

32 
	}
}

34 
	$put_u16hex
(
u16
 
d©
)

37 
	}
}

39 
	$put_u32hex
(
u32
 
d©
)

42 
	}
}

44 
	$log_¥öt
(
Àvñ
, c⁄° *
èg
, c⁄° *
f‹m©
, ...)

47 
	}
}

	@app/flash_write_protect.c

1 
	~"sy°em/ö˛udes.h
"

3 
	#LOG_TAG
 "Êash_wp"

	)

4 
	~"gíîic/log.h
"

6 
	$ã°_wúã_¥Ÿe˘
()

8 *
dev
 = 
	`dev_›í
("•iÊash", 
NULL
);

9 i‡(!
dev
) {

13 
u8
 
buf
[512];

14 
	`mem£t
(
buf
, 0xaa, (buf));

15 
	`dev_bulk_wrôe
(
dev
, 
buf
, 0, (buf));

16 
	`mem£t
(
buf
, 0xbb, (buf));

17 
	`dev_bulk_ªad
(
dev
, 
buf
, 0, (buf));

18 
	`put_buf
(
buf
, (buf));

19 
	`dev_˛o£
(
dev
);

20 
dev
 = 
NULL
;

21 
	`˝u_ª£t
();

22 
	}
}

23 
	$•i_Êash_wrôe_¥Ÿe˘
()

25 
i
;

26 
id
;

30 i‡(!
	`fdú_exi°
("mnt/spiflash")) {

31 i‡(!
	`mou¡
("•iÊash", "m¡/•iÊash", "sdfûe", 0, 
NULL
)) {

32  -
EFAULT
;

36 
FILE
 *
fûe
 = 
	`f›í
("mnt/spiflash/res/flash_cfg.bin", "r");

37 i‡(!
fûe
) {

41 
Àn
 = 
	`Êí
(
fûe
);

42 
u32
 *
d©a
 = (u32 *)
	`mÆloc
(
Àn
);

43 i‡(!
d©a
) {

44  -
ENOMEM
;

46 i‡(
Àn
 !
	`‰ód
(
fûe
, 
d©a
,Üen)) {

47  -
EFAULT
;

49 
	`f˛o£
(
fûe
);

51 *
dev
 = 
	`dev_›í
("•iÊash", 
NULL
);

52 i‡(!
dev
) {

53  -
EFAULT
;

55 
	`dev_io˘l
(
dev
, 
IOCTL_GET_ID
, (
u32
)&
id
);

57 
i
 = 1; i < 
Àn
; i += 6) {

58 i‡(
d©a
[
i
] =
id
) {

59 
u32
 
cmd
 = 
d©a
[
i
 + 1];

60 
	`log_v
("Êash_id = %x, wrôe_¥Ÿe˘\n", 
id
);

61 
	`dev_io˘l
(
dev
, 
IOCTL_SET_WRITE_PROTECT
, 
cmd
);

62 
__exô
;

65 
	`log_w
("flash_not_write_protect\n");

67 
__exô
:

68 
	`‰ì
(
d©a
);

69 
	`dev_˛o£
(
dev
);

73 
	}
}

74 
__öôˇŒ
(
•i_Êash_wrôe_¥Ÿe˘
);

	@app/fontinit.c

1 
	~"f⁄t/f⁄t_Æl.h
"

2 
	~"f⁄t/œnguage_li°.h
"

4 
∂©f‹m_putch¨
(
f⁄t_öfo
 *
öfo
, 
u8
 *
pixñ
, 
u16
 
width
, u16 
height
, u16 
x
, u16 
y
);

6 
	#LANGUAGE
 
	`BIT
(
Chöe£_Sim∂ifõd
)|\

7 
	`BIT
(
English
)

	)

9 #i‡
LANGUAGE
&
BIT
(
Chöe£_Sim∂ifõd
)

10 
REGISTER_LANGUAGE_BEGIN
(
Chöe£_Sim∂ifõd
) = {

11 .
œnguage_id
 = 
Chöe£_Sim∂ifõd
,

12 .
	gÊags
 = 
FONT_SHOW_PIXEL
 | 
FONT_SHOW_MULTI_LINE
,

13 .
	gpixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_GB2312.PIX",

14 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_ASCII.PIX",

15 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_GB2312.TAB",

16 .
	gisgb2312
 = 
åue
,

17 .
	gbigídün
 = 
Ál£
,

18 .
	gputch¨
 = 
∂©f‹m_putch¨
,

30 #i‡
LANGUAGE
&
BIT
(
Chöe£_Tødôi⁄Æ
)

31 
REGISTER_LANGUAGE_BEGIN
(
Chöe£_Tødôi⁄Æ
) = {

32 .
œnguage_id
 = 
Chöe£_Tødôi⁄Æ
,

33 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

34 .
	gpixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_BIG5.PIX",

35 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_ASCII.PIX",

36 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_BIG5.TAB",

37 .
	gbigídün
 = 
Ál£
,

38 .
	gputch¨
 = 
∂©f‹m_putch¨
,

42 #i‡
LANGUAGE
&
BIT
(
J≠™e£
)

43 
REGISTER_LANGUAGE_BEGIN
(
J≠™e£
) = {

44 .
œnguage_id
 = 
J≠™e£
,

45 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

46 .
	gpixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_SJIS.PIX",

47 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_SJISASC.PIX",

48 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_SJIS.TAB",

49 .
	gbigídün
 = 
Ál£
,

50 .
	gputch¨
 = 
∂©f‹m_putch¨
,

54 #i‡
LANGUAGE
&
BIT
(
K‹ón
)

55 
REGISTER_LANGUAGE_BEGIN
(
K‹ón
) = {

56 .
œnguage_id
 = 
K‹ón
,

57 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

58 .
	gpixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_KSC.PIX",

59 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_ASCII.PIX",

60 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_KSC.TAB",

61 .
	gbigídün
 = 
Ál£
,

62 .
	gputch¨
 = 
∂©f‹m_putch¨
,

66 #i‡
LANGUAGE
&
BIT
(
English
)

67 
REGISTER_LANGUAGE_BEGIN
(
English
) = {

68 .
œnguage_id
 = 
English
,

69 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

70 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

71 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

72 .
	gbigídün
 = 
Ál£
,

73 .
	gputch¨
 = 
∂©f‹m_putch¨
,

77 #i‡
LANGUAGE
&
BIT
(
Fªnch
)

78 
REGISTER_LANGUAGE_BEGIN
(
Fªnch
) = {

79 .
œnguage_id
 = 
Fªnch
,

80 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

81 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

82 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

83 .
	gbigídün
 = 
Ál£
,

84 .
	gputch¨
 = 
∂©f‹m_putch¨
,

88 #i‡
LANGUAGE
&
BIT
(
Gîm™
)

89 
REGISTER_LANGUAGE_BEGIN
(
Gîm™
) = {

90 .
œnguage_id
 = 
Gîm™
,

91 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

92 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

93 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

94 .
	gbigídün
 = 
Ál£
,

95 .
	gputch¨
 = 
∂©f‹m_putch¨
,

99 #i‡
LANGUAGE
&
BIT
(
Ièlün
)

100 
REGISTER_LANGUAGE_BEGIN
(
Ièlün
) = {

101 .
œnguage_id
 = 
Ièlün
,

102 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

103 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

104 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

105 .
	gbigídün
 = 
Ál£
,

106 .
	gputch¨
 = 
∂©f‹m_putch¨
,

110 #i‡
LANGUAGE
&
BIT
(
Dutch
)

111 
REGISTER_LANGUAGE_BEGIN
(
Dutch
) = {

112 .
œnguage_id
 = 
Dutch
,

113 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

114 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

115 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

116 .
	gbigídün
 = 
Ál£
,

117 .
	gputch¨
 = 
∂©f‹m_putch¨
,

121 #i‡
LANGUAGE
&
BIT
(
P‹tugue£
)

122 
REGISTER_LANGUAGE_BEGIN
(
P‹tugue£
) = {

123 .
œnguage_id
 = 
P‹tugue£
,

124 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

125 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

126 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

127 .
	gbigídün
 = 
Ál£
,

128 .
	gputch¨
 = 
∂©f‹m_putch¨
,

132 #i‡
LANGUAGE
&
BIT
(
S∑nish
)

133 
REGISTER_LANGUAGE_BEGIN
(
S∑nish
) = {

134 .
œnguage_id
 = 
S∑nish
,

135 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

136 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

137 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

138 .
	gbigídün
 = 
Ál£
,

139 .
	gputch¨
 = 
∂©f‹m_putch¨
,

143 #i‡
LANGUAGE
&
BIT
(
Swedish
)

144 
REGISTER_LANGUAGE_BEGIN
(
Swedish
) = {

145 .
œnguage_id
 = 
Swedish
,

146 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

147 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

148 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

149 .
	gbigídün
 = 
Ál£
,

150 .
	gputch¨
 = 
∂©f‹m_putch¨
,

154 #i‡
LANGUAGE
&
BIT
(
Czech
)

155 
REGISTER_LANGUAGE_BEGIN
(
Czech
) = {

156 .
œnguage_id
 = 
Czech
,

157 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

158 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.PIX",

159 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.TAB",

160 .
	gbigídün
 = 
Ál£
,

161 .
	gputch¨
 = 
∂©f‹m_putch¨
,

165 #i‡
LANGUAGE
&
BIT
(
D™ish
)

166 
REGISTER_LANGUAGE_BEGIN
(
D™ish
) = {

167 .
œnguage_id
 = 
D™ish
,

168 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

169 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.PIX",

170 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1252.TAB",

171 .
	gbigídün
 = 
Ál£
,

172 .
	gputch¨
 = 
∂©f‹m_putch¨
,

176 #i‡
LANGUAGE
&
BIT
(
Pﬁish
)

177 
REGISTER_LANGUAGE_BEGIN
(
Pﬁish
) = {

178 .
œnguage_id
 = 
Pﬁish
,

179 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

180 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.PIX",

181 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.TAB",

182 .
	gbigídün
 = 
Ál£
,

183 .
	gputch¨
 = 
∂©f‹m_putch¨
,

187 #i‡
LANGUAGE
&
BIT
(
Russün
)

188 
REGISTER_LANGUAGE_BEGIN
(
Russün
) = {

189 .
œnguage_id
 = 
Russün
,

190 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

191 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1251.PIX",

192 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1251.TAB",

193 .
	gbigídün
 = 
Ál£
,

194 .
	gputch¨
 = 
∂©f‹m_putch¨
,

198 #i‡
LANGUAGE
&
BIT
(
Turkey
)

199 
REGISTER_LANGUAGE_BEGIN
(
Turkey
) = {

200 .
œnguage_id
 = 
Turkey
,

201 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

202 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1254.PIX",

203 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1254.TAB",

204 .
	gbigídün
 = 
Ál£
,

205 .
	gputch¨
 = 
∂©f‹m_putch¨
,

209 #i‡
LANGUAGE
&
BIT
(
Hebªw
)

210 
REGISTER_LANGUAGE_BEGIN
(
Hebªw
) = {

211 .
œnguage_id
 = 
Hebªw
,

212 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

213 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1255.PIX",

214 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1255.TAB",

215 .
	gbigídün
 = 
Ál£
,

216 .
	gputch¨
 = 
∂©f‹m_putch¨
,

220 #i‡
LANGUAGE
&
BIT
(
Thai
)

221 
REGISTER_LANGUAGE_BEGIN
(
Thai
) = {

222 .
œnguage_id
 = 
Thai
,

223 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

224 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP874.PIX",

225 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP874.TAB",

226 .
	gbigídün
 = 
Ál£
,

227 .
	gputch¨
 = 
∂©f‹m_putch¨
,

231 #i‡
LANGUAGE
&
BIT
(
Hung¨ün
)

232 
REGISTER_LANGUAGE_BEGIN
(
Hung¨ün
) = {

233 .
œnguage_id
 = 
Hung¨ün
,

234 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

235 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.PIX",

236 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.TAB",

237 .
	gbigídün
 = 
Ál£
,

238 .
	gputch¨
 = 
∂©f‹m_putch¨
,

242 #i‡
LANGUAGE
&
BIT
(
Rom™ün
)

243 
REGISTER_LANGUAGE_BEGIN
(
Rom™ün
) = {

244 .
œnguage_id
 = 
Rom™ün
,

245 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

246 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.PIX",

247 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1250.TAB",

248 .
	gbigídün
 = 
Ál£
,

249 .
	gputch¨
 = 
∂©f‹m_putch¨
,

253 #i‡
LANGUAGE
&
BIT
(
Aøbic
)

254 
REGISTER_LANGUAGE_BEGIN
(
Aøbic
) = {

255 .
œnguage_id
 = 
Aøbic
,

256 .
	gÊags
 = 
FONT_SHOW_PIXEL
,

257 .
	gas˝ixñ
.
	gfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1256.PIX",

258 .
	gèbfûe
.
	g«me
 = (*)"mnt/spiflash/res/F_CP1256.TAB",

259 .
	gbigídün
 = 
Ál£
,

260 .
	gputch¨
 = 
∂©f‹m_putch¨
,

	@app/net/ctp_cmd.c

2 
	~"video_ªc.h
"

3 
	~"ö˛ude/míu_∑rm_≠i.h
"

4 
	~"£rvî/˘p_£rvî.h
"

5 
	~"£rvî/√t_£rvî.h
"

6 
	~"js⁄_c/js⁄.h
"

7 
	~"js⁄_c/js⁄_tokíî.h
"

8 
	~"£rvî/£rvî_c‹e.h
"

9 
	~"sy°em/≠p_c‹e.h
"

10 
	~"a˘i⁄.h
"

11 
	~"°‹age_devi˚.h
"

12 
	~"≠p_c⁄fig.h
"

13 
	~"fs/fs.h
"

14 
	~"≠p_d©aba£.h
"

15 
	~"hâp/hâp_£rvî.h
"

16 
	~"£rvî/√t_£rvî.h
"

17 
	~"˘p.h
"

18 
	~"os/os_com∑t.h
"

19 
	~"ö˛ude/°yÀ.h
"

20 
	~"ui/ui.h
"

21 
	#CTP_CMD_HEADER
 "{\"î∫o\":%d,\"›\":\"%s\",\"∑øm\":{"

	)

22 
	#CTP_CMD_HEADER_WITHOUT_ERR
 "{\"›\":\"%s\",\"∑øm\":{"

	)

23 
	#CTP_CMD_END
 "}}"

	)

24 
	#CTP_ERR_MESSAGE
 "{\"î∫o\":%d}"

	)

25 
	#WIFI_RT_STREAM
 1

	)

29 
video_ªc_po°_msg
(c⁄° *
msg
, ...);

32 
	$£nd_˘p_°rög
(
cmd_ty≥
, *
buf
, c⁄° *
_ªq
, *
¥iv
)

34 
˘p_ªq
 
ªq
;

35 
£rvî
 *
˘p
 = 
NULL
;

37 
˘p
 = 
	`gë_˘p_£rvî_h™dî
();

38 i‡(
˘p
 =
NULL
) {

42 
ªq
.
∑rm
 = 
buf
;

43 
ªq
.
t›ic
 = 
_ªq
;

44 
ªq
.
˛i
 = 
¥iv
;

46 i‡(
	`£rvî_ªque°
(
˘p
, 
cmd_ty≥
, (*)&
ªq
)) {

51 
	}
}

53 
˘p_¨g
 
	göfo
;

56 
ölöe
 
	$_CTP_CMD_COMBINED
(
cmd_ty≥
, *
¥iv
, 
u32
 
îr
, c⁄° *
_ªq
, c⁄° *
mŸhod
, *
°r
)

58 *
buf
 = 
NULL
;

59 
ªt
;

60 
id
 = 0;

61 
tmp
[64];

62 
buf
 = (*)
	`mÆloc
(512);

64 i‡(
buf
 =
NULL
) {

65 
	`¥ötf
("%†%d mem i†Áû \n", 
__func__
, 
__LINE__
);

69 i‡(
îr
) {

70 
ªt
 = 
	`•rötf
(
buf
, 
CTP_CMD_HEADER
, 
îr
, 
mŸhod
);

72 
ªt
 = 
	`•rötf
(
buf
, 
CTP_CMD_HEADER_WITHOUT_ERR
, 
mŸhod
);

75 *
key
;

76 *
vÆue
;

78 i‡(!
îr
 && 
°r
 !
NULL
) {

80 
key
 = 
	`°πok
(
°r
, ":");

81 
vÆue
 = 
	`°πok
(
NULL
, ",");

83 i‡(
key
 =
NULL
) {

87 
ªt
 = 
	`•rötf
(
tmp
, "\"%s\":\"%s\",", 
key
, 
vÆue
);

88 
tmp
[
ªt
] = '\0';

89 
ªt
 = 
	`•rötf
(
buf
, "%s%s", buf, 
tmp
);

90 
°r
 = 
NULL
;

93 
buf
[
ªt
 - 1] = '\0';

94 
ªt
 = 
	`•rötf
(
buf
, "%s%s", buf, 
CTP_CMD_END
);

96 
	`•rötf
(
buf
, "{\"›\":\"NOTIFY\",\"î∫o\":%d,\"∑øm\":{%s}}", 
îr
, 
°r
);

101 *
˛i
 = 
NULL
;

102 i‡(!
	`°rcmp
(
_ªq
, 
öfo
.
t›ic
)) {

103 
˛i
 = 
öfo
.cli;

105 
˛i
 = 
¥iv
;

109 i‡(
	`£nd_˘p_°rög
(
cmd_ty≥
, 
buf
, 
_ªq
, 
˛i
) < 0) {

114 
	}
}

116 
	$CTP_CMD_COMBINED
(*
¥iv
, 
u32
 
îr
, c⁄° *
_ªq
, c⁄° *
mŸhod
, *
°r
)

118  
	`_CTP_CMD_COMBINED
(
CTP_NOTIFY_COMMAND
, 
¥iv
, 
îr
, 
_ªq
, 
mŸhod
, 
°r
);

119 
	}
}

120 
	$__Æl_gë_cmd_run
()

122 c⁄° 
˘p_m≠_íåy
 *
m≠
 = 
NULL
;

123 
	`li°_f‹_˘p_m≠pög_èb
(
m≠
) {

124 i‡(
m≠
->
gë
 !
NULL
) {

125 
m≠
->
	`gë
(
NULL
, NULL);

128 
	}
}

133 
	$˘p_cmd_™Æysis
(c⁄° *
t›ic
, *
c⁄ã¡
, *
¥iv
)

135 
˘p_m≠_íåy
 *
m≠
 = 
NULL
;

136 
≠∂iˇti⁄
 *
≠p
 = 
NULL
;

137 
buf
[128];

138 
öã¡
 
ô
;

139 
ªt
 = -1;

140 
ñemít_evít_h™dÀr
 *
h™dÀr
 = 
NULL
;

141 i‡(
	`°æí
(
t›ic
Ë<0 || såÀn(
c⁄ã¡
) <= 0) {

142 
	`¥ötf
("%† %dÉº....\n", 
__func__
, 
__LINE__
);

147 
	`°r˝y
(
öfo
.
t›ic
,Åopic);

148 
öfo
.
c⁄ã¡
 = 
NULL
;

149 
öfo
.
˛i
 = 
¥iv
;

154 
	`li°_f‹_˘p_m≠pög_èb
(
m≠
) {

155 i‡(!
	`°rcmp
(
t›ic
, 
m≠
->
˘p_comm™d
)) {

156 i‡(
	`°r°r
(
c⁄ã¡
, "PUT"Ë&& 
m≠
->
put
 !
NULL
) {

157 i‡(
m≠
->
sync
 !
åue
) {

158 
m≠
->
sync
 = 
åue
;

162 
ªt
 = 
m≠
->
	`put
(
¥iv
, 
c⁄ã¡
);

164 i‡(
m≠
->
dev_cmd
 !
NULL
) {

165 
u32
 
d©a
 = 
	`db_£À˘
(
m≠
->
dev_cmd
);

166 
	`•rötf
(
buf
, "%s:%d", 
m≠
->
dev_cmd
, 
d©a
);

167 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, 
m≠
->
˘p_comm™d
, "NOTIFY", 
buf
);

168 
	`db_Êush
();

171 
	`¥ötf
("W¨¬ög CTP<%s> i†doögÇow\n", 
m≠
->
˘p_comm™d
);

172 
ªt
 = 0;

174 } i‡(
	`°r°r
(
c⁄ã¡
, "GET"Ë&& 
m≠
->
gë
 !
NULL
) {

175 i‡(
m≠
->
sync
 !
åue
) {

176 
m≠
->
sync
 = 
åue
;

177 
ªt
 = 
m≠
->
	`gë
(
¥iv
, 
c⁄ã¡
);

179 
	`¥ötf
("W¨¬ög CTP<%s> i†doögÇow\n", 
m≠
->
˘p_comm™d
);

180 
ªt
 = 0;

183 
	`puts
("content isÉrror \n\n");

188 i‡(
ªt
 != -1) {

189  
ªt
;

193 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_TOPIC
, 
t›ic
, "NOTIFY", 
CTP_NO_TOPIC_MSG
);

194 
	`¥ötf
("%†%dÇŸ föd ià‹ cb i†NULL\n", 
__func__
, 
__LINE__
);

197 
	}
}

200 
	$√t_swôch_ui
(c⁄° *
≠p_«me
)

202 
öã¡
 
ô
;

203 
≠∂iˇti⁄
 *
≠p
 = 
NULL
;

205 
	`öô_öã¡
(&
ô
);

206 
≠p
 = 
	`gë_cuºít_≠p
();

207 i‡(!
	`°rcmp
(
≠p
->
«me
, "usb_app")) {

208 
	`puts
("IN USB MODE\n");

211 i‡(
≠p
) {

212 
	`¥ötf
("£à≠p:%† gëáµ:%s\n", 
≠p_«me
, 
≠p
->
«me
);

214 i‡(
	`°rcmp
(
≠p_«me
, 
≠p
->
«me
)) {

216 
ô
.
a˘i⁄
 = 
ACTION_BACK
;

217 
	`°¨t_≠p
(&
ô
);

218 
ô
.
«me
 = 
≠p_«me
;

220 i‡(!
	`°rcmp
("video_ªc", 
≠p_«me
)) {

221 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_MAIN
;

224 i‡(!
	`°rcmp
("video_phŸo", 
≠p_«me
)) {

225 
ô
.
a˘i⁄
 = 
ACTION_PHOTO_TAKE_MAIN
;

227 
	`sys_key_evít_èkeovî
(
Ál£
, false);

228 
	`°¨t_≠p
(&
ô
);

234 
	}
}

236 
	$cmd_put_≠p_ac˚ss
(*
¥iv
, *
c⁄ã¡
)

238 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

239 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

240 
js⁄_obje˘
 *
key
 = 
NULL
;

241 
≠∂iˇti⁄
 *
≠p
;

242 c⁄° 
ac˚ss_num
 = 0;

243 
buf
[128];

245 
	`puts
("\n\n APP_ACCESS \n");

247 
	`sys_key_evít_dißbÀ
();

248 
	`sys_touch_evít_dißbÀ
();

250 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

251 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

253 
key
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "type");

255 c⁄° *
ty≥
 = 
	`js⁄_obje˘_gë_°rög
(
key
);

256 i‡(
	`©oi
(
ty≥
)) {

257 
	`puts
("phone : iOS\n");

259 
	`puts
("phone : Andriod\n");

262 
key
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "ver");

263 c⁄° *
vî
 = 
	`js⁄_obje˘_gë_°rög
(
key
);

264 
	`¥ötf
("vîsi⁄ : %s\n", 
vî
);

265 
≠p
 = 
	`gë_cuºít_≠p
();

266 i‡(!
	`°rcmp
(
≠p
->
«me
, "usb_≠p"Ë&& 
	`dev_⁄löe
("usb0")) {

267 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_IN_USB
, "APP_ACCESS", "NOTIFY", 
CTP_IN_USB_MSG
);

268 
	`˘p_§v_disc⁄√˘_˛i
(
¥iv
);

269 
îr
;

272 i‡(
	`˘p_§v_gë_˛i_˙t
(Ë> 
ACCESS_NUM
) {

274 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_ACCESS_RFU
, "APP_ACCESS", "NOTIFY", 
CTP_ACCESS_RFU_MSG
);

275 
	`˘p_§v_disc⁄√˘_˛i
(
¥iv
);

276 
îr
;

280 
	`•rötf
(
buf
, "ty≥:%s,vî:%s", 
ty≥
, 
vî
);

281 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "APP_ACCESS", "NOTIFY", 
buf
);

283 
	`__Æl_gë_cmd_run
();

285 
îr
:

286 
	`js⁄_obje˘_put
(
√w_obj
);

288 
	}
}

289 
	$cmd_gë_sd_°©us
(*
¥iv
, *
c⁄ã¡
)

291 
buf
[16];

293 
	`•rötf
(
buf
, "⁄löe:%d", 
	`°‹age_devi˚_ªady
());

294 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "SD_STATUS", "NOTIFY", 
buf
);

298 
	}
}

299 
	$cmd_gë_kìp_Æive_öãrvÆ
(*
¥iv
, *
c⁄ã¡
)

301 
timeout
;

302 
buf
[16];

304 
timeout
 = 
	`˘p_§v_gë_kìp_Æive_timeout
();

305 
	`•rötf
(
buf
, "timeout:%d", 
timeout
);

306 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "KEEP_ALIVE_INTERVAL", "NOTIFY", 
buf
);

311 
	}
}

312 
	$cmd_gë_b©_°©us
(*
¥iv
, *
c⁄ã¡
)

314 
buf
[32];

317 
	`•rötf
(
buf
, "level:%d", 4);

318 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BAT_STATUS", "NOTIFY", 
buf
);

322 
	}
}

323 
	$cmd_gë_uuid
(*
¥iv
, *
c⁄ã¡
)

325 
buf
[128];

327 
	`•rötf
(
buf
, "uuid:%s", 
UUID
);

328 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "UUID", "NOTIFY", 
buf
);

330 
	}
}

332 
	$cmd_gë_video_∑øm
(*
¥iv
, *
c⁄ã¡
)

334 
buf
[128];

336 
u32
 
ªs
 = 
	`db_£À˘
("res");

337 
ªs
) {

338 
VIDEO_RES_1080P
:

339 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:1,Âs:%d,øã:%d", 1920, 1080, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

342 
VIDEO_RES_720P
:

343 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:1,Âs:%d,øã:%d", 1280, 720, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

346 
VIDEO_RES_VGA
:

347 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:1,Âs:%d,øã:%d", 640, 480, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

351 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:1,Âs:%d,øã:%d", 1920, 1080, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

355 
	`¥ötf
("bu‡-> %s\n", 
buf
);

356 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_PARAM", "NOTIFY", 
buf
);

359 
	}
}

361 
	$cmd_put_video_∑øm
(*
¥iv
, *
c⁄ã¡
)

363 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

364 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

365 
js⁄_obje˘
 *
h
 = 
NULL
;

366 
öã¡
 
ô
;

367 
buf
[128];

368 c⁄° *
height
, *
width
, *
f‹m©
;

370 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

371 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

373 
h
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "h");

374 
height
 = 
	`js⁄_obje˘_gë_°rög
(
h
);

376 
	`¥ötf
("heighà: %s\n", 
height
);

378 i‡(
	`°r°r
(
height
, "480")) {

379 
	`db_upd©e
("ªs", 
VIDEO_RES_VGA
);

380 } i‡(
	`°r°r
(
height
, "720")) {

381 
	`db_upd©e
("ªs", 
VIDEO_RES_720P
);

383 
	`db_upd©e
("ªs", 
VIDEO_RES_1080P
);

386 
u32
 
ªs
 = 
	`db_£À˘
("res");

387 #ifde‡
CONFIG_UI_ENABLE


388 #i‡
deföed
 
CONFIG_UI_STYLE_LY_ENABLE


389 
	`video_ªc_po°_msg
("changeRES");

392 
ªs
) {

393 
VIDEO_RES_1080P
:

394 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1920, 1080, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

397 
VIDEO_RES_720P
:

398 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1280, 720, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

401 
VIDEO_RES_VGA
:

402 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

406 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1280, 720, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

410 
	`¥ötf
("bu‡-> %s\n", 
buf
);

411 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_PARAM", "NOTIFY", 
buf
);

413 
	`js⁄_obje˘_put
(
√w_obj
);

416 
	}
}

419 
	$cmd_gë_puŒ_video_∑øm
(*
¥iv
, *
c⁄ã¡
)

421 
öã¡
 
ô
;

422 
buf
[128];

423 
u32
 
ªs
 = 
	`db_£À˘
("res2");

424 
ªs
) {

425 
VIDEO_RES_1080P
:

426 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1920, 1080, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

429 
VIDEO_RES_720P
:

430 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1280, 720, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

433 
VIDEO_RES_VGA
:

434 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

437 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

441 
	`¥ötf
("bu‡-> %s\n", 
buf
);

442 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PULL_VIDEO_PARAM", "NOTIFY", 
buf
);

445 
	}
}

447 
	$cmd_put_puŒ_video_∑øm
(*
¥iv
, *
c⁄ã¡
)

449 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

450 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

451 
js⁄_obje˘
 *
h
 = 
NULL
;

452 
öã¡
 
ô
;

453 
buf
[128];

454 c⁄° *
height
, *
width
, *
f‹m©
;

456 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

457 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

459 
h
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "h");

460 
height
 = 
	`js⁄_obje˘_gë_°rög
(
h
);

462 
	`¥ötf
("heighà: %s\n", 
height
);

463 i‡(
	`°r°r
(
height
, "480")) {

464 
	`db_upd©e
("ªs2", 
VIDEO_RES_VGA
);

465 } i‡(
	`°r°r
(
height
, "720")) {

466 
	`db_upd©e
("ªs2", 
VIDEO_RES_720P
);

468 
	`db_upd©e
("ªs2", 
VIDEO_RES_1080P
);

470 
u32
 
ªs
 = 
	`db_£À˘
("res2");

471 
	`¥ötf
("ªs->%d \n", 
ªs
);

475 
ªs
) {

476 
VIDEO_RES_1080P
:

477 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1920, 1080, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

480 
VIDEO_RES_720P
:

481 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1280, 720, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

484 
VIDEO_RES_VGA
:

485 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

488 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

492 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PULL_VIDEO_PARAM", "NOTIFY", 
buf
);

494 
	`js⁄_obje˘_put
(
√w_obj
);

497 
	}
}

502 
	$cmd_put_video_cyc_ßvefûe
(*
¥iv
, *
c⁄ã¡
)

504 
buf
[128];

505 
öã¡
 
ô
;

506 
≠∂iˇti⁄
 *
≠p
 = 
NULL
;

507 i‡(
	`°‹age_devi˚_ªady
() == 0) {

508 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SD_OFFLINE
, "VIDEO_CYC_SAVEFILE", "NOTIFY", 
CTP_SD_OFFLINE_MSG
);

510 
≠p
 = 
	`gë_cuºít_≠p
();

511 
	`öô_öã¡
(&
ô
);

512 i‡(!
	`°rcmp
(
≠p
->
«me
, "video_rec")) {

513 
ô
.
«me
 = "video_rec";

514 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_CYC_SAVEFILE
;

515 
	`°¨t_≠p
(&
ô
);

518 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "VIDEO_CYC_SAVEFILE", "NOTIFY", 
CTP_REQUEST_MSG
);

522 
	}
}

537 
	$cmd_gë_video_˘æ
(*
¥iv
, *
c⁄ã¡
)

539 
öã¡
 
ô
;

540 
buf
[128];

541 
	`öô_öã¡
(&
ô
);

542 
u32
 
°©us
;

543 c⁄° *
∑th
 = 
NULL
;

546 
	`√t_swôch_ui
("video_rec");

547 
ô
.
«me
 = "video_rec";

548 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

549 
	`°¨t_≠p
(&
ô
);

550 
video_ªc_hdl
 *
ªc_h™dÀr
 = (video_ªc_hd»*)
ô
.
d©a
;

552 
°©us
 = 
ªc_h™dÀr
->
°©e
;

554 i‡(
°©us
 =
VIDREC_STA_START
) {

555 
	`•rötf
(
buf
, "status:%d", 1);

556 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_CTRL", "NOTIFY", 
buf
);

559 
	`•rötf
(
buf
, "status:%d", 0);

560 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_CTRL", "NOTIFY", 
buf
);

565 
	}
}

566 
	$cmd_put_video_˘æ
(*
¥iv
, *
c⁄ã¡
)

568 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

569 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

570 
js⁄_obje˘
 *
°a
 = 
NULL
;

571 
öã¡
 
ô
;

572 
buf
[128];

573 c⁄° *
°©us
;

574 
u32
 
°©us1
 = 0;

575 
u32
 
°©us2
 = 0;

576 *
∑th
 = 
NULL
;

577 
	`öô_öã¡
(&
ô
);

579 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

580 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

581 
°a
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

583 
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
°a
);

584 
°©us2
 = 
	`©oi
(
°©us
);

586 
	`√t_swôch_ui
("video_rec");

588 
ô
.
«me
 = "video_rec";

589 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

590 
	`°¨t_≠p
(&
ô
);

592 
video_ªc_hdl
 *
ªc_h™dÀr
 = (video_ªc_hd»*)
ô
.
d©a
;

593 
°©us1
 = 
ªc_h™dÀr
->
°©e
;

595 i‡(
°©us1
 =
VIDREC_STA_START
 || sètus1 =
VIDREC_STA_STARTING
) {

596 i‡(
°©us2
) {

597 
	`•rötf
(
buf
, "status:%d", 1);

598 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_CTRL", "NOTIFY", 
buf
);

600 
	`¥ötf
("ctp open video \n\n");

601 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_CONCTRL
;

602 
	`°¨t_≠p
(&
ô
);

606 i‡(
°©us2
) {

607 
	`¥ötf
("ctp open video \n\n");

608 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_CONCTRL
;

609 
	`°¨t_≠p
(&
ô
);

612 
	`•rötf
(
buf
, "status:%d", 0);

613 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_CTRL", "NOTIFY", 
buf
);

619 
	`js⁄_obje˘_put
(
√w_obj
);

621 
	}
}

623 
	$cmd_gë_video_föish
(*
¥iv
, *
c⁄ã¡
)

625 
öã¡
 
ô
;

626 
buf
[128];

627 
	`öô_öã¡
(&
ô
);

629 
ô
.
«me
 = "video_rec";

630 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

631 
	`°¨t_≠p
(&
ô
);

633 
video_ªc_hdl
 *
ªc_h™dÀr
 = (video_ªc_hd»*)
ô
.
d©a
;

635 i‡(
ªc_h™dÀr
->
°©e
 =
VIDREC_STA_START
) {

636 
	`•rötf
(
buf
, "status:%d", 1);

638 
	`•rötf
(
buf
, "status:%d", 0);

641 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_FINISH", "NOTIFY", 
buf
);

643 
	}
}

646 
	$cmd_gë_phŸo_ªso
(*
¥iv
, *
c⁄ã¡
)

648 
buf
[32];

649 
öã¡
 
ô
;

650 
	`öô_öã¡
(&
ô
);

653 
u32
 
¥es
 = 
	`db_£À˘
("pres");

655 
¥es
) {

656 
PHOTO_RES_VGA
:

657 
	`•rötf
(
buf
, "res:0");

660 
PHOTO_RES_1D3M
:

661 
	`•rötf
(
buf
, "res:1");

664 
PHOTO_RES_2M
:

665 
	`•rötf
(
buf
, "res:2");

668 
PHOTO_RES_3M
:

669 
	`•rötf
(
buf
, "res:3");

672 
PHOTO_RES_5M
:

673 
	`•rötf
(
buf
, "res:4");

676 
PHOTO_RES_8M
:

677 
	`•rötf
(
buf
, "res:5");

680 
PHOTO_RES_10M
:

681 
	`•rötf
(
buf
, "res:6");

684 
PHOTO_RES_12M
:

685 
	`•rötf
(
buf
, "res:7");

692 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_RESO", "NOTIFY", 
buf
);

694 
	}
}

696 
	$cmd_put_phŸo_ªso
(*
¥iv
, *
c⁄ã¡
)

698 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

699 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

700 
js⁄_obje˘
 *
ªs
 = 
NULL
;

701 
u32
 
¥es
 = 0;

702 
buf
[128];

705 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

706 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

707 
ªs
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "res");

709 c⁄° *
phŸo_ªs_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
ªs
);

710 
	`¥ötf
("˘∞phŸÿªsÿ%†\n", 
phŸo_ªs_vÆue
);

712 
	`©oi
(
phŸo_ªs_vÆue
)) {

714 
¥es
 = 
PHOTO_RES_VGA
;

718 
¥es
 = 
PHOTO_RES_1D3M
;

722 
¥es
 = 
PHOTO_RES_2M
;

726 
¥es
 = 
PHOTO_RES_3M
;

730 
¥es
 = 
PHOTO_RES_5M
;

734 
¥es
 = 
PHOTO_RES_8M
;

738 
¥es
 = 
PHOTO_RES_10M
;

742 
¥es
 = 
PHOTO_RES_12M
;

749 
	`db_upd©e
("¥es", 
¥es
);

751 
	`•rötf
(
buf
, "ªs:%d", 
	`©oi
(
phŸo_ªs_vÆue
));

753 
	`¥ötf
("buf->%s\n", 
buf
);

754 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_RESO", "NOTIFY", 
buf
);

755 
	`js⁄_obje˘_put
(
√w_obj
);

758 
	}
}

759 
	$èke_phŸo_thªad
(*
¨g
)

761 
öã¡
 
ô
;

762 
	`öô_öã¡
(&
ô
);

763 
ô
.
«me
 = "video_photo";

764 
ô
.
a˘i⁄
 = 
ACTION_PHOTO_TAKE_CONTROL
;

765 
	`os_time_dly
(50);

766 
	`°¨t_≠p
(&
ô
);

768 
	}
}

769 
	$cmd_put_phŸo_˘æ
(*
¥iv
, *
c⁄ã¡
)

771 
buf
[128];

772 
öã¡
 
ô
;

773 
≠∂iˇti⁄
 *
≠p
 = 
NULL
;

774 i‡(
	`°‹age_devi˚_ªady
() == 0) {

776 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SD_OFFLINE
, "PHOTO_CTRL", "NOTIFY", 
CTP_SD_OFFLINE_MSG
);

779 
≠p
 = 
	`gë_cuºít_≠p
();

780 
	`öô_öã¡
(&
ô
);

781 i‡(!
	`°rcmp
(
≠p
->
«me
, "video_rec")) {

782 
ô
.
«me
 = "video_rec";

783 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

784 
	`°¨t_≠p
(&
ô
);

786 
√t_video_hdl
 *
√t_h™dÀr
 = (√t_video_hd»*)
ô
.
exd©a
;

787 
video_ªc_hdl
 *
ªc_h™dÀr
 = (video_ªc_hd»*)
ô
.
d©a
;

789 
	`¥ötf
("√t_h™dÀr->√t_video0_vπ_⁄=%dÇë_h™dÀr->√t_video1_vπ_⁄=%d\n", 
√t_h™dÀr
->
√t_video0_vπ_⁄
,Çë_h™dÀr->
√t_video1_vπ_⁄
);

790 i‡(
√t_h™dÀr
->
√t_°©e
 =
VIDREC_STA_START


791 || 
√t_h™dÀr
->
√t_°©e1
 =
VIDREC_STA_START


792 || 
ªc_h™dÀr
->
°©e
 =
VIDREC_STA_START
) {

793 
	`¥ötf
("ªc_h™dÀr->°©e:%d\n", 
ªc_h™dÀr
->
°©e
);

794 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_TAKE_PHOTO
;

795 
	`°¨t_≠p
(&
ô
);

797 
	`√t_swôch_ui
("video_photo");

799 
	`thªad_f‹k
("èke_phŸo_thªad", 10, 0x1000, 0, 0, 
èke_phŸo_thªad
, 
NULL
);

801 } i‡(!
	`°rcmp
(
≠p
->
«me
, "video_dec")) {

802 
	`√t_swôch_ui
("video_photo");

804 
	`thªad_f‹k
("èke_phŸo_thªad", 10, 0x1000, 0, 0, 
èke_phŸo_thªad
, 
NULL
);

806 
ô
.
«me
 = "video_photo";

807 
ô
.
a˘i⁄
 = 
ACTION_PHOTO_TAKE_CONTROL
;

808 
	`°¨t_≠p
(&
ô
);

814 
	}
}

815 
	$cmd_gë_£lf_timî
(*
¥iv
, *
c⁄ã¡
)

817 
buf
[32];

818 
u32
 
phm
 = 
	`db_£À˘
("phm");

819 
	`•rötf
(
buf
, "phm:%d", 
phm
);

820 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "SELF_TIMER", "NOTIFY", 
buf
);

822 
	}
}

824 
	$cmd_put_£lf_timî
(*
¥iv
, *
c⁄ã¡
)

826 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

827 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

828 
js⁄_obje˘
 *
phm
 = 
NULL
;

829 
buf
[128];

832 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

833 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

834 
phm
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "phm");

836 c⁄° *
phŸo_phm_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
phm
);

837 
	`¥ötf
("˘∞£l‡timî %†\n", 
phŸo_phm_vÆue
);

838 
	`db_upd©e
("phm", 
	`©oi
(
phŸo_phm_vÆue
));

839 
	`js⁄_obje˘_put
(
√w_obj
);

842 
	}
}

845 
	$cmd_gë_bur°_shŸ
(*
¥iv
, *
c⁄ã¡
)

847 
buf
[32];

849 
u32
 
cyt
 = 
	`db_£À˘
("cyt");

850 
	`•rötf
(
buf
, "cyt:%d", 
cyt
);

851 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BURST_SHOT", "NOTIFY", 
buf
);

853 
	}
}

855 
	$cmd_put_bur°_shŸ
(*
¥iv
, *
c⁄ã¡
)

857 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

858 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

859 
js⁄_obje˘
 *
cyt
 = 
NULL
;

860 
buf
[128];

862 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

863 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

864 
cyt
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "cyt");

866 c⁄° *
phŸo_cyt_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
cyt
);

867 
	`¥ötf
("˘∞bur°_shŸ %†\n", 
phŸo_cyt_vÆue
);

868 
	`db_upd©e
("cyt", 
	`©oi
(
phŸo_cyt_vÆue
));

869 
	`js⁄_obje˘_put
(
√w_obj
);

872 
	}
}

874 
	$cmd_gë_key_voi˚
(*
¥iv
, *
c⁄ã¡
)

876 
buf
[32];

877 
u32
 
kvo
 = 
	`db_£À˘
("kvo");

878 
	`•rötf
(
buf
, "kvo:%d", 
kvo
);

880 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "KEY_VOICE", "NOTIFY", 
buf
);

882 
	}
}

884 
	$cmd_put_key_voi˚
(*
¥iv
, *
c⁄ã¡
)

886 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

887 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

888 
js⁄_obje˘
 *
kvo
 = 
NULL
;

889 
buf
[128];

891 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

892 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

893 
kvo
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "kvo");

894 c⁄° *
phŸo_kvo_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
kvo
);

895 
	`db_upd©e
("kvo", 
	`©oi
(
phŸo_kvo_vÆue
));

896 
	`js⁄_obje˘_put
(
√w_obj
);

898 
	}
}

900 
	$cmd_gë_bﬂrd_voi˚
(*
¥iv
, *
c⁄ã¡
)

902 
buf
[32];

903 
u32
 
bvo
 = 
	`db_£À˘
("bvo");

904 
	`•rötf
(
buf
, "bvo:%d", 
bvo
);

906 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BOARD_VOICE", "NOTIFY", 
buf
);

908 
	}
}

910 
	$cmd_put_bﬂrd_voi˚
(*
¥iv
, *
c⁄ã¡
)

912 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

913 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

914 
js⁄_obje˘
 *
bvo
 = 
NULL
;

915 
buf
[128];

917 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

918 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

919 
bvo
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "bvo");

920 c⁄° *
bvo_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
bvo
);

921 
	`db_upd©e
("bvo", 
	`©oi
(
bvo_vÆue
));

922 
	`js⁄_obje˘_put
(
√w_obj
);

924 
	}
}

929 
	$cmd_gë_light_‰e
(*
¥iv
, *
c⁄ã¡
)

931 
buf
[32];

932 
u32
 
‰e
 = 
	`db_£À˘
("fre");

933 
	`•rötf
(
buf
, "‰e:%d", 
‰e
);

935 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "LIGHT_FRE", "NOTIFY", 
buf
);

937 
	}
}

939 
	$cmd_put_light_‰e
(*
¥iv
, *
c⁄ã¡
)

941 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

942 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

943 
js⁄_obje˘
 *
‰e
 = 
NULL
;

944 
buf
[128];

946 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

947 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

948 
‰e
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "fre");

950 c⁄° *
light_‰e_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
‰e
);

951 
	`db_upd©e
("‰e", 
	`©oi
(
light_‰e_vÆue
));

952 
	`js⁄_obje˘_put
(
√w_obj
);

955 
	}
}

957 
	$cmd_gë_auto_°utdown
(*
¥iv
, *
c⁄ã¡
)

959 
buf
[32];

961 
u32
 
aff
 = 
	`db_£À˘
("aff");

962 
	`•rötf
(
buf
, "aff:%d", 
aff
);

963 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "AUTO_STUTDOWN", "NOTIFY", 
buf
);

965 
	}
}

968 
	$cmd_put_auto_°utdown
(*
¥iv
, *
c⁄ã¡
)

970 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

971 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

972 
js⁄_obje˘
 *
aff
 = 
NULL
;

973 
buf
[128];

975 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

976 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

977 
aff
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "aff");

979 c⁄° *
aff_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
aff
);

980 
	`¥ötf
("˘∞af‡ %†\n", 
aff_vÆue
);

981 
	`db_upd©e
("aff", 
	`©oi
(
aff_vÆue
));

982 
	`js⁄_obje˘_put
(
√w_obj
);

985 
	}
}

987 
	$cmd_gë_s¸ìn_¥o
(*
¥iv
, *
c⁄ã¡
)

989 
buf
[32];

990 
u32
 
¥o
 = 
	`db_£À˘
("pro");

992 
	`•rötf
(
buf
, "¥o:%d", 
¥o
);

994 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "SCREEN_PRO", "NOTIFY", 
buf
);

996 
	}
}

999 
	$cmd_put_s¸ìn_¥o
(*
¥iv
, *
c⁄ã¡
)

1001 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1002 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1003 
js⁄_obje˘
 *
¥o
 = 
NULL
;

1004 
buf
[128];

1005 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1006 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1007 
¥o
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "pro");

1009 c⁄° *
¥o_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
¥o
);

1010 
	`¥ötf
("˘∞¥ÿ %†\n", 
¥o_vÆue
);

1012 
	`db_upd©e
("¥o", 
	`©oi
(
¥o_vÆue
));

1013 
	`js⁄_obje˘_put
(
√w_obj
);

1015 
	}
}

1017 
	$cmd_gë_tv_mode
(*
¥iv
, *
c⁄ã¡
)

1019 
buf
[32];

1020 
u32
 
tvm
 = 
	`db_£À˘
("tvm");

1021 
	`•rötf
(
buf
, "tvm:%d", 
tvm
);

1023 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "TV_MODE", "NOTIFY", 
buf
);

1025 
	}
}

1028 
	$cmd_put_tv_mode
(*
¥iv
, *
c⁄ã¡
)

1030 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1031 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1032 
js⁄_obje˘
 *
tvm
 = 
NULL
;

1033 
buf
[128];

1035 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1036 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1037 
tvm
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "tvm");

1039 c⁄° *
tvm_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tvm
);

1040 
	`¥ötf
("˘∞¥ÿ %†\n", 
tvm_vÆue
);

1041 
	`db_upd©e
("tvm", 
	`©oi
(
tvm_vÆue
));

1042 
	`js⁄_obje˘_put
(
√w_obj
);

1044 
	}
}

1046 
	$cmd_gë_sd_size
(*
¥iv
, *
c⁄ã¡
)

1048 
buf
[32];

1049 
u32
 
•a˚
;

1050 
vfs_∑πôi⁄
 *
∑π
;

1052 i‡(
	`°‹age_devi˚_ªady
() == 0) {

1053 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SD_OFFLINE
, "TF_CAP", "NOTIFY", 
CTP_SD_OFFLINE_MSG
);

1055 
∑π
 = 
	`fgë_∑πôi⁄
(
CONFIG_ROOT_PATH
);

1056 
	`fgë_‰ì_•a˚
(
CONFIG_ROOT_PATH
, &
•a˚
);

1057 
	`•rötf
(
buf
, "À·:%d,tŸÆ:%d", 
•a˚
 / 1024, 
∑π
->
tŸÆ_size
 / 1024);

1058 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "TF_CAP", "NOTIFY", 
buf
);

1063 
	}
}

1066 
	$cmd_put_f‹m©
(*
¥iv
, *
c⁄ã¡
)

1068 
buf
[64];

1069 
îr
;

1071 i‡(
	`°‹age_devi˚_ªady
()) {

1072 
îr
 = 
	`f_f‹m©
(
CONFIG_ROOT_PATH
, "fat", 32 * 1024);

1074 i‡(
îr
 != 0) {

1075 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SDCARD
, "FORMAT", "NOTIFY", 
CTP_SDCARD_MSG
);

1076  -
EFAULT
;

1079 
îr
 = 
	`f_f‹m©
(
CONFIG_STORAGE_PATH
, "fat", 32 * 1024);

1081 i‡(
îr
 != 0) {

1082 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SDCARD
, "FORMAT", "NOTIFY", 
CTP_SDCARD_MSG
);

1083  -
EFAULT
;

1087 
	`FILE_DELETE
(
NULL
);

1088 
	`•rötf
(
buf
, "frm:1");

1089 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORMAT", "NOTIFY", 
buf
);

1092 
	}
}

1093 
	$cmd_gë_sy°em_deÁu…
(*
¥iv
, *
c⁄ã¡
)

1095 
buf
[32];

1099 
	}
}

1103 
	$cmd_put_sy°em_deÁu…
(*
¥iv
, *
c⁄ã¡
)

1105 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1106 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1107 
js⁄_obje˘
 *
def
 = 
NULL
;

1108 
buf
[128];

1109 *
wifi_dev
 = 
NULL
;

1110 
ssid
[32];

1111 
pwd
[64];

1112 
cfg_öfo
 
öfo
;

1113 
u8
 
mac_addr
[6];

1114 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1115 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1116 
def
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "def");

1118 c⁄° *
def_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
def
);

1119 
	`¥ötf
("˘∞¥ÿ %†\n", 
def_vÆue
);

1121 i‡(
	`©oi
(
def_vÆue
)) {

1122 
	`db_ª£t
();

1123 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

1124 #i‡
	`deföed
 (
WIFI_CAM_SUFFIX
)

1126 
	`•rötf
(
ssid
, 
WIFI_CAM_PREFIX
 
WIFI_CAM_SUFFIX
);

1129 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_MAC
, (
u32
)&
mac_addr
);

1130 
	`•rötf
(
ssid
, 
WIFI_CAM_PREFIX
"%02x%02x%02x%02x%02x%02x"

1131 , 
mac_addr
[0]

1132 , 
mac_addr
[1]

1133 , 
mac_addr
[2]

1134 , 
mac_addr
[3]

1135 , 
mac_addr
[4]

1136 , 
mac_addr
[5]);

1139 
öfo
.
ssid
 = ssid;

1140 
öfo
.
pwd
 = "";

1141 
öfo
.
mode
 = 
AP_MODE
;

1142 
	`dev_io˘l
(
wifi_dev
, 
DEV_CHANGE_SAVING_MODE
, (
u32
)&
öfo
);

1144 
	`os_time_dly
(200);

1145 
	`•rötf
(
buf
, "def:1");

1146 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "SYSTEM_DEFAULT", "NOTIFY", 
buf
);

1147 
	`˝u_ª£t
();

1150 
	`js⁄_obje˘_put
(
√w_obj
);

1152 
	}
}

1153 
	$cmd_gë_œnguage
(*
¥iv
, *
c⁄ã¡
)

1155 
buf
[32];

1156 
u32
 
œg
 = 
	`db_£À˘
("lag");

1157 
	`•rötf
(
buf
, "œg:%d", 
œg
);

1159 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "LANGUAGE", "NOTIFY", 
buf
);

1161 
	}
}

1163 
œg_£t_fun˘i⁄
(
u32
 
∑rm
);

1164 
	$cmd_put_œnguage
(*
¥iv
, *
c⁄ã¡
)

1166 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1167 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1168 
js⁄_obje˘
 *
œg
 = 
NULL
;

1169 
buf
[128];

1171 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1172 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1173 
œg
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "lag");

1175 c⁄° *
œg_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
œg
);

1176 
	`¥ötf
("˘∞¥ÿ %†\n", 
œg_vÆue
);

1177 
	`db_upd©e
("œg", 
	`©oi
(
œg_vÆue
));

1178 
	`œg_£t_fun˘i⁄
(
	`©oi
(
œg_vÆue
));

1180 
	`js⁄_obje˘_put
(
√w_obj
);

1182 
	}
}

1184 
	$cmd_gë_doubÀ_video
(*
¥iv
, *
c⁄ã¡
)

1186 
buf
[32];

1187 
u32
 
two
 = 
	`db_£À˘
("two");

1188 
	`•rötf
(
buf
, "two:%d", 
two
);

1190 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "DOUBLE_VIDEO", "NOTIFY", 
buf
);

1192 
	}
}

1195 
	$cmd_put_doubÀ_video
(*
¥iv
, *
c⁄ã¡
)

1197 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1198 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1199 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1200 
buf
[128];

1202 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1203 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1204 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "two");

1206 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1207 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1208 
	`db_upd©e
("two", 
	`©oi
(
tmp_vÆue
));

1209 
	`js⁄_obje˘_put
(
√w_obj
);

1211 
	}
}

1213 
	$cmd_gë_video_lo›
(*
¥iv
, *
c⁄ã¡
)

1215 
buf
[32];

1216 
u32
 
cyc
 = 
	`db_£À˘
("cyc");

1217 
	`•rötf
(
buf
, "cyc:%d", 
cyc
);

1218 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_LOOP", "NOTIFY", 
buf
);

1220 
	}
}

1223 
	$cmd_put_video_lo›
(*
¥iv
, *
c⁄ã¡
)

1225 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1226 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1227 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1228 
buf
[128];

1229 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1230 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1231 
	`db_upd©e
("cyc", 
	`©oi
(
tmp_vÆue
));

1234 
	`js⁄_obje˘_put
(
√w_obj
);

1236 
	}
}

1237 
	$cmd_gë_video_wdr
(*
¥iv
, *
c⁄ã¡
)

1239 
buf
[32];

1240 
u32
 
wdr
 = 
	`db_£À˘
("wdr");

1241 
	`•rötf
(
buf
, "wdr:%d", 
wdr
);

1243 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_WDR", "NOTIFY", 
buf
);

1245 
	}
}

1248 
	$cmd_put_video_wdr
(*
¥iv
, *
c⁄ã¡
)

1250 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1251 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1252 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1253 
buf
[128];

1256 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1257 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1258 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "wdr");

1260 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1261 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1262 
u32
 
wdr
 = 
	`db_upd©e
("wdr", 
	`©oi
(
tmp_vÆue
));

1263 
	`js⁄_obje˘_put
(
√w_obj
);

1265 
	}
}

1269 
	$cmd_gë_video_exp
(*
¥iv
, *
c⁄ã¡
)

1271 
buf
[32];

1273 
exp
 = 
	`db_£À˘
("exp");

1274 
	`•rötf
(
buf
, "exp:%d", 
exp
);

1275 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_EXP", "NOTIFY", 
buf
);

1277 
	}
}

1280 
	$cmd_put_video_exp
(*
¥iv
, *
c⁄ã¡
)

1282 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1283 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1284 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1285 
buf
[128];

1287 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1288 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1289 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "exp");

1291 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1292 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1293 
	`db_upd©e
("exp", 
	`©oi
(
tmp_vÆue
));

1294 
	`js⁄_obje˘_put
(
√w_obj
);

1296 
	}
}

1298 
	$cmd_gë_video_move_check
(*
¥iv
, *
c⁄ã¡
)

1300 
buf
[32];

1302 
exp
 = 
	`db_£À˘
("mot");

1303 
	`•rötf
(
buf
, "mŸ:%d", 
exp
);

1304 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "MOVE_CHECK", "NOTIFY", 
buf
);

1307 
	}
}

1310 
	$cmd_put_video_move_check
(*
¥iv
, *
c⁄ã¡
)

1312 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1313 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1314 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1315 
buf
[128];

1317 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1318 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1319 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "mot");

1321 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1322 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1323 
	`db_upd©e
("mŸ", 
	`©oi
(
tmp_vÆue
));

1324 #ifde‡
CONFIG_UI_ENABLE


1325 #i‡
deföed
 
CONFIG_UI_STYLE_LY_ENABLE


1327 
	`video_ªc_po°_msg
("changeMOT");

1333 
	`js⁄_obje˘_put
(
√w_obj
);

1335 
	}
}

1337 
	$cmd_gë_video_mic
(*
¥iv
, *
c⁄ã¡
)

1339 
buf
[32];

1341 
u32
 
mic
 = 
	`db_£À˘
("mic");

1342 
	`•rötf
(
buf
, "mic:%d", 
mic
);

1344 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_MIC", "NOTIFY", 
buf
);

1346 
	}
}

1349 
	$cmd_put_video_mic
(*
¥iv
, *
c⁄ã¡
)

1351 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1352 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1353 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1354 
buf
[128];

1356 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1357 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1358 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "mic");

1360 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1361 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1362 
	`db_upd©e
("mic", 
	`©oi
(
tmp_vÆue
));

1363 
	`js⁄_obje˘_put
(
√w_obj
);

1365 
	}
}

1367 
	$cmd_gë_video_d©e
(*
¥iv
, *
c⁄ã¡
)

1369 
buf
[32];

1370 
u32
 
d©
 = 
	`db_£À˘
("dat");

1371 
	`•rötf
(
buf
, "d©:%d", 
d©
);

1372 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_DATE", "NOTIFY", 
buf
);

1374 
	}
}

1376 
	$cmd_gë_π_°ªam0_ªs
(*
¥iv
, *
c⁄ã¡
)

1378 
buf
[32];

1379 
u32
 
d©
 = 
	`db_£À˘
("rtf");

1380 
	`•rötf
(
buf
, "πf:%d", 
d©
);

1381 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "RTF_RES", "NOTIFY", 
buf
);

1384 
	}
}

1387 
	$cmd_gë_π_°ªam1_ªs
(*
¥iv
, *
c⁄ã¡
)

1389 
buf
[32];

1390 
u32
 
d©
 = 
	`db_£À˘
("rtb");

1391 
	`•rötf
(
buf
, "πb:%d", 
d©
);

1392 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "RTB_RES", "NOTIFY", 
buf
);

1395 
	}
}

1398 
œb_£t_fun˘i⁄
(
u32
 
∑rm
);

1399 
	$cmd_put_video_d©e
(*
¥iv
, *
c⁄ã¡
)

1401 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1402 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1403 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1404 
buf
[128];

1405 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1406 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1407 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "dat");

1409 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1410 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1411 
	`db_upd©e
("d©", 
	`©oi
(
tmp_vÆue
));

1413 
	`œb_£t_fun˘i⁄
(
	`©oi
(
tmp_vÆue
));

1415 
	`js⁄_obje˘_put
(
√w_obj
);

1417 
	}
}

1421 
	$cmd_gë_video_ˇr_num
(*
¥iv
, *
c⁄ã¡
)

1423 
buf
[32];

1424 
u32
 
num
 = 
	`db_£À˘
("num");

1425 
	`•rötf
(
buf
, "num:%d", 
num
);

1426 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_CAR_NUM", "NOTIFY", 
buf
);

1428 
	}
}

1431 
	$cmd_put_video_ˇr_num
(*
¥iv
, *
c⁄ã¡
)

1433 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1434 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1435 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1436 
buf
[128];

1438 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1439 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1440 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "num");

1442 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1443 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1444 
	`db_upd©e
("num", 
	`©oi
(
tmp_vÆue
));

1445 
	`js⁄_obje˘_put
(
√w_obj
);

1447 
	}
}

1449 
	$cmd_gë_gø_£n
(*
¥iv
, *
c⁄ã¡
)

1451 
buf
[32];

1452 
u32
 
gø
 = 
	`db_£À˘
("gra");

1453 
	`•rötf
(
buf
, "gø:%d", 
gø
);

1455 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "GRA_SEN", "NOTIFY", 
buf
);

1457 
	}
}

1459 
	$cmd_put_gø_£n
(*
¥iv
, *
c⁄ã¡
)

1461 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1462 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1463 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1464 
buf
[128];

1466 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1467 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1468 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "gra");

1470 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1471 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1472 
	`db_upd©e
("gø", 
	`©oi
(
tmp_vÆue
));

1473 
	`js⁄_obje˘_put
(
√w_obj
);

1475 
	}
}

1476 
	$cmd_gë_video_∑r_ˇr
(*
¥iv
, *
c⁄ã¡
)

1478 
buf
[32];

1479 
u32
 
∑r
 = 
	`db_£À˘
("par");

1480 
	`•rötf
(
buf
, "∑r:%d", 
∑r
);

1482 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_PAR_CAR", "NOTIFY", 
buf
);

1484 
	}
}

1486 
	$cmd_put_video_∑r_ˇr
(*
¥iv
, *
c⁄ã¡
)

1488 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1489 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1490 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1491 
buf
[128];

1493 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1494 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1495 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "par");

1497 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1498 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1499 
	`db_upd©e
("∑r", 
	`©oi
(
tmp_vÆue
));

1501 #ifde‡
CONFIG_UI_ENABLE


1502 #i‡
deföed
 
CONFIG_UI_STYLE_LY_ENABLE


1504 
	`video_ªc_po°_msg
("changePAR");

1508 
	`js⁄_obje˘_put
(
√w_obj
);

1510 
	}
}

1511 
	$cmd_gë_video_öv
(*
¥iv
, *
c⁄ã¡
)

1513 
buf
[32];

1514 
u32
 
g≠
 = 
	`db_£À˘
("gap");

1515 
	`•rötf
(
buf
, "g≠:%d", 
g≠
);

1517 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_INV", "NOTIFY", 
buf
);

1519 
	}
}

1521 
	$cmd_put_video_öv
(*
¥iv
, *
c⁄ã¡
)

1523 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1524 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1525 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1526 
buf
[128];

1528 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1529 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1530 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "gap");

1532 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1533 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1534 
	`db_upd©e
("g≠", 
	`©oi
(
tmp_vÆue
));

1535 
	`js⁄_obje˘_put
(
√w_obj
);

1537 
	}
}

1540 
	$cmd_gë_phŸo_quÆôy
(*
¥iv
, *
c⁄ã¡
)

1542 
buf
[32];

1543 
u32
 
qua
 = 
	`db_£À˘
("qua");

1544 
	`•rötf
(
buf
, "qua:%d", 
qua
);

1546 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_QUALITY", "NOTIFY", 
buf
);

1548 
	}
}

1550 
	$cmd_put_phŸo_quÆôy
(*
¥iv
, *
c⁄ã¡
)

1552 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1553 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1554 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1555 
buf
[128];

1557 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1558 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1559 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "qua");

1561 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1562 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1563 
	`db_upd©e
("qua", 
	`©oi
(
tmp_vÆue
));

1564 
	`js⁄_obje˘_put
(
√w_obj
);

1566 
	}
}

1567 
	$cmd_gë_phŸo_sh¨≤ess
(*
¥iv
, *
c⁄ã¡
)

1569 
buf
[32];

1570 
u32
 
acu
 = 
	`db_£À˘
("acu");

1571 
	`•rötf
(
buf
, "acu:%d", 
acu
);

1573 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_SHARPNESS", "NOTIFY", 
buf
);

1575 
	}
}

1577 
	$cmd_put_phŸo_sh¨≤ess
(*
¥iv
, *
c⁄ã¡
)

1579 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1580 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1581 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1582 
buf
[128];

1584 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1585 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1586 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "acu");

1588 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1589 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1590 
	`db_upd©e
("acu", 
	`©oi
(
tmp_vÆue
));

1591 
	`js⁄_obje˘_put
(
√w_obj
);

1593 
	}
}

1595 
	$cmd_gë_whôe_bÆ™˚
(*
¥iv
, *
c⁄ã¡
)

1597 
buf
[32];

1598 
u32
 
wbl
 = 
	`db_£À˘
("wbl");

1599 
	`•rötf
(
buf
, "wbl:%d", 
wbl
);

1601 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "WHITE_BALANCE", "NOTIFY", 
buf
);

1603 
	}
}

1605 
	$cmd_put_whôe_bÆ™˚
(*
¥iv
, *
c⁄ã¡
)

1607 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1608 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1609 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1610 
buf
[128];

1612 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1613 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1614 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "wbl");

1616 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1617 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1618 
	`db_upd©e
("wbl", 
	`©oi
(
tmp_vÆue
));

1619 
	`js⁄_obje˘_put
(
√w_obj
);

1621 
	}
}

1623 
	$cmd_gë_phŸo_iso
(*
¥iv
, *
c⁄ã¡
)

1625 
buf
[32];

1626 
u32
 
iso
 = 
	`db_£À˘
("iso");

1627 
	`•rötf
(
buf
, "iso:%d", 
iso
);

1629 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_ISO", "NOTIFY", 
buf
);

1631 
	}
}

1633 
	$cmd_put_phŸo_iso
(*
¥iv
, *
c⁄ã¡
)

1635 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1636 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1637 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1638 
buf
[128];

1640 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "iso");

1642 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1643 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1644 
	`db_upd©e
("iso", 
	`©oi
(
tmp_vÆue
));

1645 
	`js⁄_obje˘_put
(
√w_obj
);

1647 
	}
}

1650 
	$cmd_gë_phŸo_exp
(*
¥iv
, *
c⁄ã¡
)

1652 
buf
[32];

1653 
≥xp
 = 
	`db_£À˘
("pexp");

1654 
	`•rötf
(
buf
, "exp:%d", 
≥xp
);

1656 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_EXP", "NOTIFY", 
buf
);

1658 
	}
}

1661 
	$cmd_put_phŸo_exp
(*
¥iv
, *
c⁄ã¡
)

1663 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1664 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1665 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1666 
buf
[128];

1668 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1669 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1670 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "exp");

1672 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1673 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1674 
	`db_upd©e
("≥xp", 
	`©oi
(
tmp_vÆue
));

1675 
	`js⁄_obje˘_put
(
√w_obj
);

1677 
	}
}

1679 
	$cmd_gë_™ti_åem‹
(*
¥iv
, *
c⁄ã¡
)

1681 
buf
[32];

1682 
u32
 
sok
 = 
	`db_£À˘
("sok");

1683 
	`•rötf
(
buf
, "sok:%d", 
sok
);

1685 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "ANTI_TREMOR", "NOTIFY", 
buf
);

1687 
	}
}

1689 
	$cmd_put_™ti_åem‹
(*
¥iv
, *
c⁄ã¡
)

1691 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1692 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1693 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1694 
buf
[128];

1696 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1697 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1698 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "sok");

1700 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1701 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1702 
	`db_upd©e
("sok", 
	`©oi
(
tmp_vÆue
));

1703 
	`js⁄_obje˘_put
(
√w_obj
);

1705 
	}
}

1707 
	$cmd_gë_phŸo_d©e
(*
¥iv
, *
c⁄ã¡
)

1709 
buf
[32];

1711 
u32
 
d©
 = 
	`db_£À˘
("dat");

1712 
	`•rötf
(
buf
, "d©:%d", 
d©
);

1714 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_DATE", "NOTIFY", 
buf
);

1716 
	}
}

1718 
	$cmd_put_phŸo_d©e
(*
¥iv
, *
c⁄ã¡
)

1720 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1721 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1722 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1723 
buf
[128];

1725 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1726 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1727 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "dat");

1729 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1730 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1731 
	`db_upd©e
("pd©", 
	`©oi
(
tmp_vÆue
));

1732 
	`js⁄_obje˘_put
(
√w_obj
);

1734 
	}
}

1736 
	$cmd_gë_Á°_sˇ
(*
¥iv
, *
c⁄ã¡
)

1738 
buf
[32];

1739 
u32
 
sˇ
 = 
	`db_£À˘
("sca");

1740 
	`•rötf
(
buf
, "sˇ:%d", 
sˇ
);

1742 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FAST_SCA", "NOTIFY", 
buf
);

1744 
	}
}

1746 
	$cmd_put_Á°_sˇ
(*
¥iv
, *
c⁄ã¡
)

1748 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1749 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1750 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1751 
buf
[128];

1753 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1754 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1755 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "sca");

1757 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1758 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1759 
	`db_upd©e
("sˇ", 
	`©oi
(
tmp_vÆue
));

1760 
	`js⁄_obje˘_put
(
√w_obj
);

1762 
	}
}

1765 
	$cmd_gë_phŸo_cﬁ‹
(*
¥iv
, *
c⁄ã¡
)

1767 
buf
[32];

1768 
u32
 
cﬁ
 = 
	`db_£À˘
("col");

1769 
	`•rötf
(
buf
, "cﬁ:%d", 
cﬁ
);

1771 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "PHOTO_COLOR", "NOTIFY", 
buf
);

1773 
	}
}

1775 
	$cmd_put_phŸo_cﬁ‹
(*
¥iv
, *
c⁄ã¡
)

1777 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1778 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1779 
js⁄_obje˘
 *
tmp
 = 
NULL
;

1780 
buf
[128];

1782 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1783 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1784 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "col");

1786 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

1787 
	`¥ötf
("˘∞¥ÿ %†\n", 
tmp_vÆue
);

1788 
	`db_upd©e
("cﬁ", 
	`©oi
(
tmp_vÆue
));

1789 
	`js⁄_obje˘_put
(
√w_obj
);

1791 
	}
}

1793 #i‡
WIFI_RT_STREAM


1794 
	$cmd_put_›í_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

1796 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1797 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1798 
buf
[128];

1799 
u8
 
m¨k
;

1800 c⁄° *
h
, *
w
, *
f‹m©
, *
Âs
;

1803 
	`√t_swôch_ui
("video_rec");

1804 
öã¡
 
ô
;

1805 
	`öô_öã¡
(&
ô
);

1806 
ô
.
«me
 = "video_rec";

1808 
ô
.
a˘i⁄
 = 
ACTION_VIDEO0_OPEN_RT_STREAM
;

1809 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1810 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1811 
h
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "h"));

1812 
w
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "w"));

1813 
f‹m©
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "format"));

1814 
Âs
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "fps"));

1816 
m¨k
 = 2;

1817 
π_°ªam_≠p_öfo
 
öfo
;

1818 i‡(
w
 && 
h
) {

1819 
öfo
.
width
 = 
	`©oi
(
w
);

1820 
öfo
.
height
 = 
	`©oi
(
h
);

1822 
öfo
.
width
 = 1920;

1823 
öfo
.
height
 = 1080;

1825 i‡(
öfo
.
width
 == 1920) {

1826 
	`db_upd©e
("πf", 
VIDEO_RES_1080P
);

1827 } i‡(
öfo
.
width
 == 1280) {

1828 
	`db_upd©e
("πf", 
VIDEO_RES_720P
);

1829 } i‡(
öfo
.
width
 == 640) {

1830 
	`db_upd©e
("πf", 
VIDEO_RES_VGA
);

1832 
	`db_Êush
();

1835 
öfo
.
Âs
 = 
	`©oi
(fps);

1836 
öfo
.
ty≥
 = 
	`©oi
(
f‹m©
);

1837 
öfo
.
¥iv
 =Öriv;

1839 
ô
.
d©a
 = (c⁄° *)&
m¨k
;

1840 
ô
.
exd©a
 = (
u32
Ë&
öfo
;

1842 
	`°¨t_≠p
(&
ô
);

1844 
	`js⁄_obje˘_put
(
√w_obj
);

1847 
	}
}

1848 
	$cmd_put_›í_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

1850 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

1879 
	}
}

1881 
	$cmd_put_›í_puŒ_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

1883 #i‡
	`deföed
 (
CONFIG_VIDEO1_ENABLE
Ë|| deföed (
CONFIG_VIDEO3_ENABLE
)

1884 #ifde‡
CONFIG_VIDEO1_ENABLE


1885 i‡(!
	`dev_⁄löe
("video1")) {

1886 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_PULL_OFFLINE
, "OPEN_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_OFFLINE_MSG
);

1890 #ifde‡
CONFIG_VIDEO3_ENABLE


1892 i‡(!
	`dev_⁄löe
("uvc")) {

1893 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_PULL_OFFLINE
, "OPEN_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_OFFLINE_MSG
);

1900 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

1901 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

1902 
buf
[128];

1903 
u8
 
m¨k
;

1904 c⁄° *
h
, *
w
, *
f‹m©
, *
Âs
;

1905 
öã¡
 
ô
;

1906 
	`öô_öã¡
(&
ô
);

1907 
	`√t_swôch_ui
("video_rec");

1909 
ô
.
«me
 = "video_rec";

1911 
ô
.
a˘i⁄
 = 
ACTION_VIDEO1_OPEN_RT_STREAM
;

1912 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

1913 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

1914 
h
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "h"));

1915 
w
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "w"));

1916 
f‹m©
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "format"));

1917 
Âs
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "fps"));

1918 
π_°ªam_≠p_öfo
 
öfo
;

1919 
öfo
.
width
 = 
	`©oi
(
w
);

1920 
öfo
.
height
 = 
	`©oi
(
h
);

1921 
öfo
.
Âs
 = 
	`©oi
(fps);

1922 
öfo
.
ty≥
 = 
NET_VIDEO_FMT_MOV
;

1924 
öfo
.
ty≥
 = 
	`©oi
(
f‹m©
);

1925 
öfo
.
¥iv
 =Öriv;

1926 i‡(
öfo
.
width
 == 1920) {

1927 
	`db_upd©e
("πb", 
VIDEO_RES_1080P
);

1928 } i‡(
öfo
.
width
 == 1280) {

1929 
	`db_upd©e
("πb", 
VIDEO_RES_720P
);

1930 } i‡(
öfo
.
width
 == 640) {

1931 
	`db_upd©e
("πb", 
VIDEO_RES_VGA
);

1933 
	`db_Êush
();

1936 
m¨k
 = 2;

1937 
ô
.
d©a
 = (c⁄° *)&
m¨k
;

1938 
ô
.
exd©a
 = (
u32
Ë&
öfo
;

1940 
	`°¨t_≠p
(&
ô
);

1942 
	`js⁄_obje˘_put
(
√w_obj
);

1944 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_PULL_NOSUPPORT
, "OPEN_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_NOSUPPORT_MSG
);

1948 
	}
}

1949 
	$cmd_put_›í_puŒ_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

1951 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

1981 
	}
}

1982 
	$˛o£_π_°ªam
(
sockaddr_ö
 *
de°
)

1984 
öã¡
 
ô
;

1985 
u8
 
m¨k
 = 2;

1987 i‡(!
	`˘p_§v_gë_˛i_˙t
()) {

1989 
	`√t_swôch_ui
("video_rec");

1990 
ô
.
«me
 = "video_rec";

1991 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

1992 
	`°¨t_≠p
(&
ô
);

1993 
√t_video_hdl
 *
√t_ªc_h™dÀr
 = (√t_video_hd»*)
ô
.
exd©a
;

1995 i‡(
√t_ªc_h™dÀr
->
√t_video0_vπ_⁄
) {

1996 
	`puts
("allÑt0 stream close\n");

1997 
ô
.
a˘i⁄
 = 
ACTION_VIDEO0_CLOSE_RT_STREAM
;

1998 
ô
.
d©a
 = (*)&
m¨k
;

1999 
	`°¨t_≠p
(&
ô
);

2003 i‡(
√t_ªc_h™dÀr
->
√t_video1_vπ_⁄
) {

2004 
	`puts
("allÑt1 stream close\n");

2005 
ô
.
a˘i⁄
 = 
ACTION_VIDEO1_CLOSE_RT_STREAM
;

2006 
ô
.
d©a
 = (*)&
m¨k
;

2007 
	`°¨t_≠p
(&
ô
);

2012 
	}
}

2015 
	$cmd_put_˛o£_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2017 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2018 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2019 
buf
[128];

2020 
u8
 
m¨k
;

2021 c⁄° *
°©us
 = 
NULL
;

2022 
öã¡
 
ô
;

2024 
	`öô_öã¡
(&
ô
);

2025 
	`√t_swôch_ui
("video_rec");

2026 
ô
.
«me
 = "video_rec";

2028 
ô
.
a˘i⁄
 = 
ACTION_VIDEO0_CLOSE_RT_STREAM
;

2029 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2030 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2031 
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status"));

2033 i‡(
	`©oi
(
°©us
)) {

2034 
m¨k
 = 2;

2035 
ô
.
d©a
 = (c⁄° *)&
m¨k
;

2036 
	`°¨t_≠p
(&
ô
);

2040 
	`js⁄_obje˘_put
(
√w_obj
);

2042 
	}
}

2043 
	$cmd_put_˛o£_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2045 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

2048 
	}
}

2049 
	$cmd_put_˛o£_puŒ_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2051 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

2054 
	}
}

2055 
	$cmd_put_˛o£_puŒ_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2058 #i‡
	`deföed
 (
CONFIG_VIDEO1_ENABLE
Ë|| deföed (
CONFIG_VIDEO3_ENABLE
)

2060 #ifde‡
CONFIG_VIDEO1_ENABLE


2061 i‡(!
	`dev_⁄löe
("video1")) {

2062 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_PULL_OFFLINE
, "CLOSE_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_OFFLINE_MSG
);

2066 #ifde‡
CONFIG_VIDEO3_ENABLE


2068 i‡(!
	`dev_⁄löe
("uvc")) {

2069 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_PULL_OFFLINE
, "CLOSE_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_OFFLINE_MSG
);

2076 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2077 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2078 
buf
[128];

2079 
u8
 
m¨k
;

2080 c⁄° *
°©us
 = 
NULL
;

2081 
öã¡
 
ô
;

2083 
	`öô_öã¡
(&
ô
);

2084 
	`√t_swôch_ui
("video_rec");

2085 
ô
.
«me
 = "video_rec";

2087 
ô
.
«me
 = "video_rec";

2089 
ô
.
a˘i⁄
 = 
ACTION_VIDEO1_CLOSE_RT_STREAM
;

2090 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2091 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2092 
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status"));

2094 i‡(
	`©oi
(
°©us
)) {

2095 
m¨k
 = 2;

2096 
ô
.
d©a
 = (c⁄° *)&
m¨k
;

2097 
	`°¨t_≠p
(&
ô
);

2101 
	`js⁄_obje˘_put
(
√w_obj
);

2104 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_PULL_NOSUPPORT
, "CLOSE_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_NOSUPPORT_MSG
);

2108 
	}
}

2110 
	$cmd_gë_˛o£_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2112 
öã¡
 
ô
;

2113 
buf
[128];

2114 
	`öô_öã¡
(&
ô
);

2115 
ô
.
«me
 = "video_rec";

2116 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

2117 
	`°¨t_≠p
(&
ô
);

2119 
√t_video_hdl
 *
ªc_h™dÀr
 = (√t_video_hd»*)
ô
.
exd©a
;

2121 i‡(
ªc_h™dÀr
->
√t_video0_vπ_⁄
 == 1) {

2122 
	`°r˝y
(
buf
, "status:1");

2124 
	`°r˝y
(
buf
, "status:0");

2127 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "CLOSE_RT_STREAM", "NOTIFY", 
buf
);

2129 
	}
}

2130 
	$cmd_gë_˛o£_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2132 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

2151 
	}
}

2152 
	$cmd_gë_˛o£_puŒ_audio_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2154 
	`¥ötf
("nÿ£à%†fun˘i⁄\n", 
__func__
);

2173 
	}
}

2174 
	$cmd_gë_˛o£_puŒ_π_°ªam
(*
¥iv
, *
c⁄ã¡
)

2176 #i‡
	`deföed
 (
CONFIG_VIDEO1_ENABLE
Ë|| deföed (
CONFIG_VIDEO3_ENABLE
)

2177 
öã¡
 
ô
;

2178 
buf
[128];

2179 
	`öô_öã¡
(&
ô
);

2180 
ô
.
«me
 = "video_rec";

2181 
ô
.
a˘i⁄
 = 
ACTION_VIDEO_REC_GET_APP_STATUS
;

2183 
	`°¨t_≠p
(&
ô
);

2186 
√t_video_hdl
 *
ªc_h™dÀr
 = (√t_video_hd»*)
ô
.
d©a
;

2188 i‡(
ªc_h™dÀr
->
√t_video1_vπ_⁄
 == 1) {

2189 
	`°r˝y
(
buf
, "status:1");

2191 
	`°r˝y
(
buf
, "status:0");

2194 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "CLOSE_PULL_RT_STREAM", "NOTIFY", 
buf
);

2196 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_PULL_NOSUPPORT
, "CLOSE_PULL_RT_STREAM", "NOTIFY", 
CTP_PULL_NOSUPPORT_MSG
);

2199 
	}
}

2202 
	$cmd_put_make_f‹w¨d_fûes_li°
(*
¥iv
, *
c⁄ã¡
)

2205 
buf
[128];

2206 
∑th
[64];

2207 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2208 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2209 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2210 
ty≥
 = 0;

2211 
u32
 
fûe_num
 = 0;

2212 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2213 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2214 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "type");

2216 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2217 
	`¥ötf
("˘∞ty≥ %†\n", 
tmp_vÆue
);

2219 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "num");

2220 i‡(
tmp
 !
NULL
) {

2221 c⁄° *
num
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2222 i‡(
num
 !
NULL
 && 
	`©oi
(num) != 0) {

2223 
fûe_num
 = 
	`©oi
(
num
);

2226 i‡(
tmp_vÆue
 =
NULL
) {

2227 
ty≥
 = 
VID_JPG
;

2229 
ty≥
 = 
	`©oi
(
tmp_vÆue
);

2231 
ty≥
) {

2233 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SD_OFFLINE
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
CTP_SD_OFFLINE_MSG
);

2235 
NONE
:

2236 
	`•rötf
(
buf
, "ty≥:0,∑th:%s", 
CONFIG_REC_PATH_1
"vf_list.txt");

2237 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2239 
VID_JPG
:

2241 i‡(!
fûe_num
) {

2243 #i‡
deföed
 
CONFIG_ENABLE_VLIST


2244 i‡(!
	`FILE_INITIND_CHECK
()) {

2245 
	`FILE_GEN
();

2246 
	`•rötf
(
buf
, "ty≥:1,∑th:%s", 
CONFIG_REC_PATH_1
"vf_list.txt");

2248 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2252 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
CTP_REQUEST_MSG
);

2257 
	`FILE_LIST_INIT_SMALL
(
fûe_num
);

2258 
	`•rötf
(
buf
, "ty≥:1,∑th:%s", 
CONFIG_REC_PATH_1
"vf_list_small.txt");

2259 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2263 
VIDEO
:

2264 
	`vf_li°
(
ty≥
, 1, 
∑th
);

2265 
	`•rötf
(
buf
, "ty≥:2,∑th:%s", 
∑th
);

2266 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2268 
JPG
:

2269 
	`vf_li°
(
ty≥
, 1, 
∑th
);

2270 
	`•rötf
(
buf
, "ty≥:3,∑th:%s", 
∑th
);

2271 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FORWARD_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2278 
	`js⁄_obje˘_put
(
√w_obj
);

2280 
	}
}

2282 
	$cmd_put_make_behöd_fûes_li°
(*
¥iv
, *
c⁄ã¡
)

2284 
buf
[128];

2285 
∑th
[64];

2286 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2287 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2288 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2289 
ty≥
 = 0;

2290 
u32
 
fûe_num
 = 0;

2291 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2292 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2293 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "type");

2295 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2296 
	`¥ötf
("˘∞ty≥ %†\n", 
tmp_vÆue
);

2299 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "num");

2300 i‡(
tmp
 !
NULL
) {

2301 c⁄° *
num
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2302 i‡(
num
 !
NULL
 && 
	`©oi
(num) != 0) {

2303 
fûe_num
 = 
	`©oi
(
num
);

2306 i‡(
tmp_vÆue
 =
NULL
) {

2307 
ty≥
 = 
VID_JPG
;

2309 
ty≥
 = 
	`©oi
(
tmp_vÆue
);

2311 
ty≥
) {

2313 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_SD_OFFLINE
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
CTP_SD_OFFLINE_MSG
);

2315 
NONE
:

2316 
	`•rötf
(
buf
, "ty≥:0,∑th:%s", 
CONFIG_REC_PATH_2
"vf_list.txt");

2317 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2319 
VID_JPG
:

2320 i‡(!
fûe_num
) {

2322 #i‡
deföed
 
CONFIG_ENABLE_VLIST


2323 i‡(!
	`FILE_INITIND_CHECK
()) {

2324 
	`FILE_GEN
();

2325 
	`•rötf
(
buf
, "ty≥:1,∑th:%s", 
CONFIG_REC_PATH_2
"vf_list.txt");

2326 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2331 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
CTP_REQUEST_MSG
);

2336 
	`FILE_LIST_INIT_SMALL
(
fûe_num
);

2337 
	`•rötf
(
buf
, "ty≥:1,∑th:%s", 
CONFIG_REC_PATH_2
"vf_list_small.txt");

2338 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2342 
VIDEO
:

2343 
	`vf_li°
(
ty≥
, 0, 
∑th
);

2344 
	`•rötf
(
buf
, "ty≥:2,∑th:%s", 
∑th
);

2345 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2347 
JPG
:

2348 
	`vf_li°
(
ty≥
, 0, 
∑th
);

2349 
	`•rötf
(
buf
, "ty≥:3,∑th:%s", 
∑th
);

2350 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "BEHIND_MEDIA_FILES_LIST", "NOTIFY", 
buf
);

2356 
	`js⁄_obje˘_put
(
√w_obj
);

2359 
	}
}

2363 
	$cmd_gë_fúmw¨e_upgøde_ªady
(*
¥iv
, *
c⁄ã¡
)

2365 
buf
[128];

2366 
u8
 
°©us
;

2367 
°©us
 = 1;

2368 
	`•rötf
(
buf
, "°©us:%d", 
°©us
);

2369 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FIRMWARE_UPGRADE_READY", "°©us", 
buf
);

2372 
	}
}

2374 
	$cmd_put_fúmw¨e_fûe_£nd_íd
(*
¥iv
, *
c⁄ã¡
)

2376 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FIRMWARE_FILE_SEND_END", "NOTIFY", 
NULL
);

2378 
	}
}

2380 
	$cmd_gë_π_èlk_˘l
(*
¥iv
, *
c⁄ã¡
)

2382 
buf
[128];

2384 
u8
 
	`gë_π_èlk_°©us
();

2386 
	`•rötf
(
buf
, "°©us:%d", 
	`gë_π_èlk_°©us
());

2388 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "RT_TALK_CTL", "NOTIFY", 
buf
);

2391 
	}
}

2393 
	$cmd_put_π_èlk_˘l
(*
¥iv
, *
c⁄ã¡
)

2395 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2396 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2397 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2398 
buf
[128];

2399 c⁄° *
s_°r
;

2400 
u8
 
°©us
;

2403 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2404 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2405 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2406 
s_°r
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2407 
	`¥ötf
("\n------%s------\n", 
s_°r
);

2408 
°©us
 = 
	`©oi
(
s_°r
);

2409 
	`¥ötf
("\n-----°©u†i†%d-------\n", 
°©us
);

2410 
	`•rötf
(
buf
, "°©us:%d", 
°©us
);

2411 i‡(
°©us
 == 1) {

2412 
	`π_èlk_√t_öô
();

2413 
	`π_èlk_√t_öô
();

2414 } i‡(
°©us
 == 0) {

2415 
	`π_èlk_√t_unöô
();

2416 
	`π_èlk_√t_unöô
();

2418 
	`•rötf
(
buf
, "°©us:%d", 
°©us
);

2420 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "RT_TALK_CTL", "NOTIFY", 
buf
);

2423 
	}
}

2425 
	$cmd_gë_voi˚_èlk_˘l
(*
¥iv
, *
c⁄ã¡
)

2427 
buf
[256 ] = {0};

2429 
	`•rötf
(
buf
, 
CONFIG_ROOT_PATH
);

2430 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "VOICE_TALK_CTL", "NOTIFY", 
buf
);

2433 
	}
}

2435 
	$cmd_put_voi˚_èlk_˘l
(*
¥iv
, *
c⁄ã¡
)

2437 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2438 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2439 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2440 
buf
[256 ] = {0};

2441 c⁄° *
s_°r
;

2442 
u8
 
°©us
;

2444 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2445 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2446 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2447 
s_°r
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2448 
°©us
 = 
	`©oi
(
s_°r
);

2449 
	`¥ötf
("\n-----°©u†i†%d-------\n", 
°©us
);

2450 
	`•rötf
(
buf
, "°©us:%d", 
°©us
);

2451 i‡(
°©us
 == 1) {

2452 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "PATH");

2453 
s_°r
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2454 
	`¥ötf
("\¿%†\n", 
s_°r
);

2455 
	`∂ay_voi˚_fûe
(c⁄° *
fûe_«me
);

2456 
	`∂ay_voi˚_fûe
(
s_°r
);

2462 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "VOICE_TALK_CTL", "NOTIFY", 
buf
);

2465 
	}
}

2467 
	$cmd_put_fûes_dñëe
(*
¥iv
, *
c⁄ã¡
)

2469 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2470 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2471 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2472 
buf
[256 ] = {0};

2473 
u32
 
i
 = 0;

2474 
fûíame
[8];

2475 
u32
 
ªt
 = 0;

2476 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2477 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2480 
	`•rötf
(
fûíame
, "∑th_%d", 
i
);

2481 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, 
fûíame
);

2483 i‡(
tmp
 =
NULL
) {

2487 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2488 
	`¥ötf
("fûíamê%†\n", 
tmp_vÆue
);

2490 i‡(
	`fdñëe_by_«me
(
tmp_vÆue
)) {

2491 
	`¥ötf
("fdelete byÇame\n");

2492 
ªt
 = 
	`•rötf
(
buf
, "°©us:%d,∑th:%s", 0, 
tmp_vÆue
);

2493 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_OPEN_FILE
, "FILES_DELETE", "NOTIFY", 
buf
);

2496 #i‡
deföed
 
CONFIG_ENABLE_VLIST


2497 
	`FILE_DELETE
(
tmp_vÆue
);

2499 
	`•rötf
(
buf
, "°©us:%d,∑th:%s", 1, 
tmp_vÆue
);

2500 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FILES_DELETE", "NOTIFY", 
buf
);

2504 
i
++;

2507 
	`js⁄_obje˘_put
(
√w_obj
);

2510 
	}
}

2511 
	$cmd_put_mu…i_covî_figuª
(*
¥iv
, *
c⁄ã¡
)

2513 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2514 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2515 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2516 
buf
[128];

2517 
u32
 
i
 = 0;

2518 
fûíame
[8];

2519 
u32
 
ªt
 = 0;

2520 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2521 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2522 (*
fûe_«me_¨øy
)[64] = 
	`ˇŒoc
(1, 51 * 64);

2523 i‡(
fûe_«me_¨øy
 =
NULL
) {

2524 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_REQUEST_MSG
);

2529 
	`•rötf
(
fûíame
, "∑th_%d", 
i
);

2530 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, 
fûíame
);

2532 i‡(
tmp
 =
NULL
) {

2536 i‡(
i
 > 50) {

2537 
	`¥ötf
("path isÅoo many\n");

2538 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_REQUEST_MSG
);

2542 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2543 
	`°r˝y
(
fûe_«me_¨øy
[
i
], 
tmp_vÆue
);

2545 
i
++;

2548 
√t_ªq
 
ªq
;

2549 
	`mem£t
(&
ªq
, 0, (
√t_ªq
));

2550 
ªq
.
¥e
.
ty≥
 = 
PREVIEW
;

2551 
ªq
.
¥e
.
fûíame
 = 
fûe_«me_¨øy
;

2553 i‡(
	`video_¥evõw_po°_msg
(&
ªq
)) {

2554 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_REQUEST_MSG
);

2558 
	`js⁄_obje˘_put
(
√w_obj
);

2562 
	}
}

2564 
	gfûe_«me
[64];

2565 
	$cmd_put_thunbaûs
(*
¥iv
, *
c⁄ã¡
)

2567 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2568 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2569 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2570 
u32
 
i
 = 0;

2571 
buf
[128];

2572 
u32
 
ªt
 = 0;

2573 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2574 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2575 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "path");

2576 c⁄° *
∑th
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2577 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "offset");

2578 c⁄° *
off£t
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2579 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "num");

2580 c⁄° *
num
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2581 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "timeinv");

2582 c⁄° *
timeöv
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2584 
	`¥ötf
("path -> %s offset-> %sÇum->%sÅimeinv->%s\n"

2585 , 
∑th


2586 , 
off£t


2587 , 
num


2588 , 
timeöv
);

2589 
√t_ªq
 
ªq
;

2590 
	`mem£t
(&
ªq
, 0, (
√t_ªq
));

2592 
	`°r˝y
(
fûe_«me
, 
∑th
);

2593 
ªq
.
¥e
.
ty≥
 = 
THUS
;

2595 (*
fûíame
)[64];

2596 
ªq
.
¥e
.
fûíame
 = ((*)[64])
fûe_«me
;

2598 i‡(
num
 =
NULL
) {

2599 
ªq
.
¥e
.
num
 = 0;

2601 
ªq
.
¥e
.
num
 = 
	`©oi
(num);

2604 
ªq
.
¥e
.
off£t
 = 
	`©oi
(offset);

2605 
ªq
.
¥e
.
timeöv
 = 
	`©oi
(timeinv);

2606 i‡(
	`video_¥evõw_po°_msg
(&
ªq
)) {

2608 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "THUMBNAILS", "NOTIFY", 
CTP_REQUEST_MSG
);

2612 
	`js⁄_obje˘_put
(
√w_obj
);

2616 
	}
}

2617 
	$cmd_put_thunbaûs_˘æ
(*
¥iv
, *
c⁄ã¡
)

2619 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2620 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2621 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2622 
buf
[128];

2623 
u32
 
i
 = 0;

2624 
fûíame
[8];

2625 
u32
 
ªt
 = 0;

2626 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2627 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2628 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2629 c⁄° *
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2630 
	`¥ötf
("°©u†-> %s\n", 
°©us
);

2632 
	`video_˛i_¶ide
(
	`˘p_§v_gë_˛i_addr
(
¥iv
), 
	`©oi
(
°©us
));

2633 
	`•rötf
(
buf
, "°©us:%s", 
°©us
);

2634 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "THUMBNAILS_CTRL", "NOTIFY", 
buf
);

2635 
	`js⁄_obje˘_put
(
√w_obj
);

2639 
	}
}

2640 
	$cmd_put_time_axis_∂ay
(*
¥iv
, *
c⁄ã¡
)

2642 
£rvî
 *
√t
 = 
NULL
;

2643 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2644 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2645 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2646 
u32
 
i
 = 0;

2647 
fûíame
[8];

2648 
u32
 
ªt
 = 0;

2649 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2650 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2651 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "path");

2652 c⁄° *
fûe_«me
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2654 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "offset");

2655 c⁄° *
m£c
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2657 
	`¥ötf
("fûíamê:%† m£c:%s\n", 
fûe_«me
, 
m£c
);

2658 
√t_ªq
 
ªq
;

2659 
	`mem£t
(&
ªq
, 0, (
√t_ªq
));

2660 
	`°r˝y
(
ªq
.
∂ayback
.
fûe_«me
, file_name);

2661 
ªq
.
∂ayback
.
m£c
 = 
	`©oi
(msec);

2662 i‡(
	`video_∂ayback_po°_msg
(&
ªq
)) {

2663 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "TIME_AXIS_PLAY", "NOTIFY", 
CTP_REQUEST_MSG
);

2666 
	`js⁄_obje˘_put
(
√w_obj
);

2670 
	}
}

2672 
	#PLAY_VIDEO_CONTINUE
 0

	)

2673 
	#PLAY_VIDEO_PAUSE
 1

	)

2674 
	#PLAY_VIDEO_STOP
 2

	)

2675 
	$cmd_put_time_axis_∂ay_˘æ
(*
¥iv
, *
c⁄ã¡
)

2677 
buf
[128];

2678 
£rvî
 *
√t
 = 
NULL
;

2679 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2680 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2681 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2682 
u32
 
i
 = 0;

2683 
fûíame
[8];

2684 
u32
 
ªt
 = 0;

2685 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2686 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2687 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2688 c⁄° *
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2690 
sockaddr_ö
 *
d°_addr
 = 
	`˘p_§v_gë_˛i_addr
(
¥iv
);

2691 
	`¥ötf
("°©us:%s\n", 
°©us
);

2693 
	`©oi
(
°©us
)) {

2694 
PLAY_VIDEO_CONTINUE
:

2695 
ªt
 = 
	`∂ayback_˛i_c⁄töue
(
d°_addr
);

2698 
PLAY_VIDEO_PAUSE
:

2699 
ªt
 = 
	`∂ayback_˛i_∑u£
(
d°_addr
);

2702 
PLAY_VIDEO_STOP
:

2703 
ªt
 = 
	`∂ayback_disc⁄√˘_˛i
(
d°_addr
);

2707 
ªt
 = -1;

2711 i‡(!
ªt
) {

2713 
	`•rötf
(
buf
, "°©us:%s", 
°©us
);

2714 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "TIME_AXIS_PLAY_CTRL", "NOTIFY", 
buf
);

2716 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "TIME_AXIS_PLAY_CTRL", "NOTIFY", 
CTP_REQUEST_MSG
);

2719 
	`js⁄_obje˘_put
(
√w_obj
);

2723 
	}
}

2725 
	$cmd_put_time_axis_Á°_∂ay
(*
¥iv
, *
c⁄ã¡
)

2727 
buf
[128];

2728 
£rvî
 *
√t
 = 
NULL
;

2729 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2730 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2731 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2732 
u32
 
i
 = 0;

2733 
u32
 
•ìd
 = 0;

2734 
fûíame
[8];

2735 
u32
 
ªt
 = 0;

2736 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2737 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2738 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "level");

2739 c⁄° *
Àvñ
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2741 
sockaddr_ö
 *
d°_addr
 = 
	`˘p_§v_gë_˛i_addr
(
¥iv
);

2742 
	`¥ötf
("Àvñ:%s\n", 
Àvñ
);

2743 i‡(
	`©oi
(
Àvñ
)) {

2744 
•ìd
 = (1 << (
	`©oi
(
Àvñ
) - 1)) * 32;

2746 
•ìd
 = 0;

2748 
	`∂ayback_˛i_Á°_∂ay
(
d°_addr
, 
•ìd
);

2750 i‡(!
ªt
) {

2751 
	`•rötf
(
buf
, "Àvñ:%s", 
Àvñ
);

2752 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "TIME_AXIS_FAST_PLAY", "NOTIFY", 
buf
);

2754 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "TIME_AXIS_FAST_PLAY", "NOTIFY", 
CTP_REQUEST_MSG
);

2757 
	`js⁄_obje˘_put
(
√w_obj
);

2761 
	}
}

2764 
	$cmd_gë_wöd_vñocôy
(*
¥iv
, *
c⁄ã¡
)

2766 
buf
[32];

2768 
	`•rötf
(
buf
, "wind_velocity:%d", 0);

2770 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "WIND_VELOCITY", "NOTIFY", 
buf
);

2772 
	}
}

2773 
	$cmd_put_devi˚_dúe˘i⁄
(*
¥iv
, *
c⁄ã¡
)

2775 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2776 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2777 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2778 
buf
[128];

2779 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2780 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2782 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "device_direction");

2784 c⁄° *
tmp_vÆue
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2785 
	`¥ötf
(">>>devi˚_dúe˘i⁄:%s\n", 
tmp_vÆue
);

2787 
	`•rötf
(
buf
, "devi˚_dúe˘i⁄:%s", 
tmp_vÆue
);

2788 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "DEVICE_DIRECTION_CONTROL", "NOTIFY", 
buf
);

2790 
	`js⁄_obje˘_put
(
√w_obj
);

2792 
	}
}

2796 
	$cmd_gë_d©e_time
(*
¥iv
, *
c⁄ã¡
)

2798 
sys_time
 
time
;

2799 
buf
[32];

2800 *
πc_fd
 = 
NULL
;

2801 
πc_fd
 = 
	`dev_›í
("πc", 
NULL
);

2802 
	`dev_io˘l
(
πc_fd
, 
IOCTL_GET_SYS_TIME
, (
u32
)&
time
);

2803 
	`dev_˛o£
(
πc_fd
);

2805 
	`•rötf
(
buf
, "d©e:%04d%02d%02d%02d%02d%02d", 
time
.
yór
,Åime.
m⁄th
,Åime.
day
,Åime.
hour
,Åime.
mö
,Åime.
£c
);

2806 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "DATE_TIME", "NOTIFY", 
buf
);

2809 
	}
}

2810 
	$d©e_time
(c⁄° *
d©e
, 
sys_time
 *
tm
)

2812 *
f
 = 
NULL
;

2813 *
b
 = 
NULL
;

2814 
buf
[5] = {0};

2816 
	`mem˝y
(
buf
, 
d©e
, 4);

2817 
tm
->
yór
 = 
	`©oi
(
buf
);

2818 
	`mem˝y
(
buf
, 
d©e
 + 4, 2);

2819 
buf
[2] = '\0';

2820 
tm
->
m⁄th
 = 
	`©oi
(
buf
);

2821 
	`mem˝y
(
buf
, 
d©e
 + 6, 2);

2822 
buf
[2] = '\0';

2823 
tm
->
day
 = 
	`©oi
(
buf
);

2824 
	`mem˝y
(
buf
, 
d©e
 + 8, 2);

2825 
buf
[2] = '\0';

2826 
tm
->
hour
 = 
	`©oi
(
buf
);

2827 
	`mem˝y
(
buf
, 
d©e
 + 10, 2);

2828 
buf
[2] = '\0';

2829 
tm
->
mö
 = 
	`©oi
(
buf
);

2830 
	`mem˝y
(
buf
, 
d©e
 + 12, 2);

2831 
buf
[2] = '\0';

2832 
tm
->
£c
 = 
	`©oi
(
buf
);

2834 
	}
}

2835 
	$cmd_put_d©e_time
(*
¥iv
, *
c⁄ã¡
)

2837 
utime
 
t
;

2838 
buf
[128];

2839 
£rvî
 *
√t
 = 
NULL
;

2840 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2841 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2842 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2843 
sys_time
 
time
;

2844 *
πc_fd
 = 
NULL
;

2845 
πc_fd
 = 
	`dev_›í
("πc", 
NULL
);

2847 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2848 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2849 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "date");

2850 c⁄° *
d©e
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2854 
	`¥ötf
("d©e:%s\n", 
d©e
);

2855 i‡(
d©e
 !
NULL
) {

2856 
	`d©e_time
(
d©e
, &
time
);

2858 
	`¥ötf
("d©e->yór:%04d m⁄th:%02d day:%02d hour:%02d mö:%02d sec:%02d", 
time
.
yór
,Åime.
m⁄th
,Åime.
day
,Åime.
hour
,Åime.
mö
,Åime.
£c
);

2859 
	`dev_io˘l
(
πc_fd
, 
IOCTL_SET_SYS_TIME
, (
u32
)&
time
);

2860 
	`dev_˛o£
(
πc_fd
);

2861 #ifde‡
CONFIG_UI_ENABLE


2862 #i‡
deföed
 
CONFIG_UI_STYLE_LY_ENABLE


2863 
t
.
yór
 = 
time
.year;

2864 
t
.
m⁄th
 = 
time
.month;

2865 
t
.
day
 = 
time
.day;

2866 
t
.
hour
 = 
time
.hour;

2867 
t
.
mö
 = 
time
.min;

2868 
t
.
£c
 = 
time
.sec;

2869 
	`ui_time_upd©e_by_id
(
TIMER_HOUR_REC
, &
t
);

2870 
	`ui_time_upd©e_by_id
(
TIMER_YEAR_REC
, &
t
);

2873 
	`•rötf
(
buf
, "d©e:%04d%02d%02d%02d%02d%02d", 
time
.
yór
,Åime.
m⁄th
,Åime.
day
,Åime.
hour
,Åime.
mö
,Åime.
£c
);

2874 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "DATE_TIME", "NOTIFY", 
buf
);

2877 
	`js⁄_obje˘_put
(
√w_obj
);

2880 
	}
}

2883 
	$cmd_gë_≠_ssid_öfo
(*
¥iv
, *
c⁄ã¡
)

2885 
buf
[128];

2886 *
wifi_dev
 = 
NULL
;

2887 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

2888 
cfg_öfo
 
öfo
;

2890 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
öfo
);

2891 
	`¥ötf
("≠ gë ssid:%†Öwd:%† \n", 
öfo
.
ssid
, info.
pwd
);

2892 
	`•rötf
(
buf
, "ssid:%s,pwd:%s", 
öfo
.
ssid
, info.
pwd
);

2893 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "AP_SSID_INFO", "NOTIFY", 
buf
);

2894 
	`dev_˛o£
(
wifi_dev
);

2898 
	}
}

2900 
	$cmd_put_≠_ssid_öfo
(*
¥iv
, *
c⁄ã¡
)

2902 
buf
[128];

2903 
£rvî
 *
√t
 = 
NULL
;

2904 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2905 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2906 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2907 
sys_time
 
time
;

2908 *
wifi_dev
 = 
NULL
;

2909 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

2911 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2912 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2913 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "ssid");

2914 c⁄° *
ssid
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2916 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "pwd");

2918 c⁄° *
pwd
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2919 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2920 c⁄° *
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2923 
	`¥ötf
("ssid:%†Öwd:%†\n", 
ssid
, 
pwd
);

2924 i‡(
	`°æí
(
pwd
) == 0) {

2926 
	`•rötf
(
buf
, "ssid:%s,°©us:%s", 
ssid
, 
°©us
);

2928 
	`•rötf
(
buf
, "ssid:%s,pwd:%s,°©us:%s", 
ssid
, 
pwd
, 
°©us
);

2930 i‡(
ssid
 =
NULL
 || (
	`°æí
(
pwd
) > 0 && strlen(pwd) < 8)

2931 || 
	`°æí
(
ssid
) >= 32) {

2932 
	`¥ötf
("ssid isÇull orÖwd isÜessÅhan 7\n");

2933 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "AP_SSID_INFO", "NOTIFY", 
buf
);

2937 
cfg_öfo
 
öfo
;

2938 
öfo
.
ssid
 = (*)ssid;

2939 
öfo
.
pwd
 = (*)pwd;

2940 
öfo
.
mode
 = 
AP_MODE
;

2941 
öfo
.
f‹˚_deÁu…_mode
 = 1;

2944 
	`dev_io˘l
(
wifi_dev
, 
DEV_SAVE_DEFAULT_MODE
, (
u32
)&
öfo
);

2946 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "AP_SSID_INFO", "NOTIFY", 
buf
);

2949 
	`dev_˛o£
(
wifi_dev
);

2951 i‡(
	`©oi
(
°©us
)) {

2952 
	`˝u_ª£t
();

2956 
	`js⁄_obje˘_put
(
√w_obj
);

2959 
	}
}

2960 
	$cmd_gë_°a_ssid_öfo
(*
¥iv
, *
c⁄ã¡
)

2962 
buf
[128];

2963 *
wifi_dev
 = 
NULL
;

2964 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

2965 
cfg_öfo
 
öfo
;

2966 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
öfo
);

2967 
	`¥ötf
("°®gë ssid:%†Öwd:%† \n", 
öfo
.
ssid
, info.
pwd
);

2968 
	`•rötf
(
buf
, "ssid:%s,pwd:%s", 
öfo
.
ssid
, info.
pwd
);

2969 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "STA_SSID_INFO", "NOTIFY", 
buf
);

2970 
	`dev_˛o£
(
wifi_dev
);

2972 
	}
}

2976 
	$cmd_put_°a_ssid_öfo
(*
¥iv
, *
c⁄ã¡
)

2978 
buf
[128];

2979 
£rvî
 *
√t
 = 
NULL
;

2980 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

2981 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

2982 
js⁄_obje˘
 *
tmp
 = 
NULL
;

2983 
sys_time
 
time
;

2984 *
wifi_dev
 = 
NULL
;

2985 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

2987 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

2988 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

2989 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "ssid");

2990 c⁄° *
ssid
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2992 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "pwd");

2994 c⁄° *
pwd
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

2995 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

2996 c⁄° *
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

3000 
	`¥ötf
("ssid:%†Öwd:%†\n", 
ssid
, 
pwd
);

3001 i‡(
	`°æí
(
pwd
) == 0) {

3003 
	`•rötf
(
buf
, "ssid:%s,°©us:%s", 
ssid
, 
°©us
);

3005 
	`•rötf
(
buf
, "ssid:%s,pwd:%s,°©us:%s", 
ssid
, 
pwd
, 
°©us
);

3008 i‡(
ssid
 =
NULL
 || (
	`°æí
(
pwd
) > 0 && strlen(pwd) < 8)) {

3009 
	`¥ötf
("ssid isÇull orÖwd isÜessÅhan 7\n");

3010 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "STA_SSID_INFO", "NOTIFY", 
CTP_REQUEST_MSG
);

3014 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "STA_SSID_INFO", "NOTIFY", 
buf
);

3018 
	`˘p_§v_disc⁄√˘_Æl_˛i
();

3023 
cfg_öfo
 
öfo
;

3024 
öfo
.
ssid
 = (*)ssid;

3025 
öfo
.
pwd
 = (*)pwd;

3026 
öfo
.
mode
 = 
STA_MODE
;

3027 i‡(
	`©oi
(
°©us
)) {

3029 
öfo
.
f‹˚_deÁu…_mode
 = 1;

3032 
	`dev_io˘l
(
wifi_dev
, 
DEV_SAVE_DEFAULT_MODE
, (
u32
)&
öfo
);

3036 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

3038 
	`dev_˛o£
(
wifi_dev
);

3039 
	`js⁄_obje˘_put
(
√w_obj
);

3042 
	}
}

3043 
	$cmd_put_so·_ª£t
(*
¥iv
, *
c⁄ã¡
)

3046 
	`os_time_dly
(100);

3047 
	`˝u_ª£t
();

3050 
	}
}

3052 
	$cmd_put_fûe_lock
(*
¥iv
, *
c⁄ã¡
)

3054 
buf
[32];

3055 
js⁄_obje˘
 *
√w_obj
 = 
NULL
;

3056 
js⁄_obje˘
 *
∑rm
 = 
NULL
;

3057 
js⁄_obje˘
 *
tmp
 = 
NULL
;

3059 
√w_obj
 = 
	`js⁄_tokíî_∑r£
(
c⁄ã¡
);

3060 
∑rm
 = 
	`js⁄_obje˘_obje˘_gë
(
√w_obj
, "param");

3061 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "path");

3062 c⁄° *
∑th
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

3064 
tmp
 = 
	`js⁄_obje˘_obje˘_gë
(
∑rm
, "status");

3065 c⁄° *
°©us
 = 
	`js⁄_obje˘_gë_°rög
(
tmp
);

3067 
FILE
 *
fûe
 = 
	`f›í
(
∑th
, "r");

3068 i‡(
fûe
 =
NULL
) {

3070 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_OPEN_FILE
, "FILE_LOCK", "NOTIFY", 
CTP_OPEN_FILE_MSG
);

3073 
©å
;

3074 
	`fgë_©å
(
fûe
, &
©å
);

3076 i‡(
	`©oi
(
°©us
)) {

3077 
©å
 |
F_ATTR_RO
;

3079 #i‡
deföed
 
CONFIG_ENABLE_VLIST


3080 
	`FILE_CHANGE_ATTR
(
∑th
, '2');

3084 #i‡
deföed
 
CONFIG_ENABLE_VLIST


3085 
	`FILE_CHANGE_ATTR
(
∑th
, '1');

3087 
©å
 &~
F_ATTR_RO
;

3089 
	`f£t_©å
(
fûe
, 
©å
);

3090 
	`f˛o£
(
fûe
);

3091 
	`•rötf
(
buf
, "°©us:%d", 
	`©oi
(
°©us
));

3092 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "FILE_LOCK", "NOTIFY", 
buf
);

3095 
	}
}

3098 
	$cmd_put_gíîic_cmd
(*
¥iv
, *
c⁄ã¡
)

3100 
buf
[32];

3101 
	`•rötf
(
buf
, "status:%d", 1);

3103 
	`¥ötf
("GENERIC_CMD PUT\n");

3104 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "GENERIC_CMD", "NOTIFY", 
buf
);

3107 
	}
}

3109 
	$cmd_gë_gíîic_cmd
(*
¥iv
, *
c⁄ã¡
)

3111 
buf
[32];

3112 
	`•rötf
(
buf
, "status:%d", 1);

3113 
	`¥ötf
("GENERIC_CMD GET\n");

3114 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "GENERIC_CMD", "NOTIFY", 
buf
);

3118 
	}
}

3123 
	$cmd_put_˘p_˛i_c⁄√˘ed
(*
¥iv
, *
c⁄ã¡
)

3126 
	}
}

3128 
	$cmd_put_˘p_˛i_disc⁄√˘
(*
¥iv
, *
c⁄ã¡
)

3130 
buf
[32];

3131 
sockaddr_ö
 *
de°_addr
;

3132 
˘p_m≠_íåy
 *
m≠
;

3133 
de°_addr
 = 
	`˘p_§v_gë_˛i_addr
(
¥iv
);

3134 
	`˛o£_π_°ªam
(
de°_addr
);

3135 
	`¥ötf
("|CLI_DISCONNECT 0x%x, 0x%x\n", (
u32
)
¥iv
, (u32)
de°_addr
->
sö_addr
.
s_addr
);

3136 
	`video_¥evõw_™d_thus_disc⁄√˘
(
de°_addr
);

3137 
	`∂ayback_disc⁄√˘_˛i
(
de°_addr
);

3138 
	`hâp_gë_£rvî_dis˝¬e˘_˛i
(
de°_addr
);

3139 
	`π_èlk_√t_unöô
();

3140 
	`π_èlk_√t_unöô
();

3141 
	`°r˝y
(
buf
, "status:1");

3142 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "CTP_CLI_DISCONNECT", "NOTIFY", 
buf
);

3143 
	`˘p_§v_‰ì_˛i
(
¥iv
);

3149 
	`li°_f‹_˘p_m≠pög_èb
(
m≠
) {

3150 
m≠
->
sync
 = 
Ál£
;

3152 
	`sys_key_evít_íabÀ
();

3153 
	`sys_touch_evít_íabÀ
();

3155 
	`puts
("|CLI_DISCONNECT OVER...\n\n\n\n");

3158 
	}
}

3161 
√t_¸ôiˇl_video_£nd
();

3162 
	$cmd_put_video_bumpög
(*
¥iv
, *
c⁄ã¡
)

3164 #ifde‡
CRITICAL_VIDEO_EN


3165 
buf
[128];

3167 
	`•rötf
(
buf
, "w:%d,h:%d,Âs:%d,øã:%d,t:%d", 640, 480, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
(), 10);

3168 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_BUMPING", "NOTIFY", 
buf
);

3169 
	`m¶ìp
(500);

3170 
	`√t_¸ôiˇl_video_£nd
();

3172 #ifde‡
CRITICAL_VIDEO_EN_DOUBLE


3173 
buf
[128];

3175 
	`•rötf
(
buf
, "w:%d,h:%d,Âs:%d,øã:%d,t:%d", 1280, 720, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
(), 10);

3176 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_BUMPING", "NOTIFY", 
buf
);

3177 
	`m¶ìp
(500);

3178 
	`√t_¸ôiˇl_video_£nd
();

3182 #i‚de‡
CRITICAL_VIDEO_EN


3183 #i‚de‡
CRITICAL_VIDEO_EN_DOUBLE


3184 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_REQUEST
, "VIDEO_BUMPING", "NOTIFY", 
CTP_REQUEST_MSG
);

3189 
	}
}

3190 
	$cmd_gë_video_bumpög
(*
¥iv
, *
c⁄ã¡
)

3192 #ifde‡
CRITICAL_VIDEO_EN


3193 
buf
[128];

3195 
	`•rötf
(
buf
, "w:%d,h:%d,Âs:%d,øã:%d,t:%d", 640, 480, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
(), 10);

3196 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_BUMPING", "NOTIFY", 
buf
);

3198 #ifde‡
CRITICAL_VIDEO_EN_DOUBLE


3199 
buf
[128];

3201 
	`•rötf
(
buf
, "w:%d,h:%d,Âs:%d,øã:%d,t:%d", 1280, 720, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
(), 10);

3202 
	`CTP_CMD_COMBINED
(
¥iv
, 
CTP_NO_ERR
, "VIDEO_BUMPING", "NOTIFY", 
buf
);

3205 
	}
}

3207 
	$cmd_gë_gí_chk
(*
¥iv
, *
c⁄ã¡
)

3210 
	}
}

3212 
	~"video_ªc.h
"

3213 
	$cmd_gë_puŒ_video_°©us
(*
¥iv
, *
c⁄ã¡
)

3215 
buf
[128];

3217 
u32
 
ªs
 = 
	`db_£À˘
("res2");

3219 
ªs
) {

3220 
VIDEO_RES_1080P
:

3221 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1920, 1080, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3224 
VIDEO_RES_720P
:

3225 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1280, 720, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3228 
VIDEO_RES_VGA
:

3229 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 640, 480, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3233 
	`•rötf
(
buf
, "w:%d,h:%d,f‹m©:%d,Âs:%d,øã:%d", 1920, 1080, 1, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3239 #ifde‡
CONFIG_VIDEO1_ENABLE


3240 i‡(
	`dev_⁄löe
("video1")) {

3241 
ªs
) {

3242 
VIDEO_RES_1080P
:

3243 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 1080, 1920, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3246 
VIDEO_RES_720P
:

3247 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 720, 1280, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3250 
VIDEO_RES_VGA
:

3251 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 480, 640, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3255 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 1080, 1920, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3261 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "PULL_VIDEO_STATUS", "NOTIFY", 
buf
);

3264 
	`°r˝y
(
buf
, "status:0");

3265 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "PULL_VIDEO_STATUS", "NOTIFY", 
buf
);

3268 #ifde‡
CONFIG_VIDEO3_ENABLE


3270 i‡(
	`dev_⁄löe
("uvc")) {

3271 
ªs
) {

3272 
VIDEO_RES_1080P
:

3273 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 1080, 1920, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3276 
VIDEO_RES_720P
:

3277 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 720, 1280, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3280 
VIDEO_RES_VGA
:

3281 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 480, 640, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3285 
	`•rötf
(
buf
, "°©us:1,h:%d,w:%d,Âs:%d,øã:%d,f‹m©:1", 1080, 1920, 
	`gë_√t_video_Âs
(), 
	`gë_audio_øã
());

3290 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "PULL_VIDEO_STATUS", "NOTIFY", 
buf
);

3292 
	`°r˝y
(
buf
, "status:0");

3294 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "PULL_VIDEO_STATUS", "NOTIFY", 
buf
);

3302 
	}
}

3309 c⁄° 
˘p_m≠_íåy
 
	g˘p_video_cmd_èb
[] 
£c
(.
˘p_video_cmd
) = {

3310 {
NULL
, "VIDEO_PARAM", 
cmd_gë_video_∑øm
, 
cmd_put_video_∑øm
},

3311 {
NULL
, "VIDEO_CTRL", 
cmd_gë_video_˘æ
, 
cmd_put_video_˘æ
},

3312 {
NULL
, "VIDEO_FINISH", NULL, NULL},

3313 {"mic", "VIDEO_MIC", 
cmd_gë_video_mic
, 
cmd_put_video_mic
},

3314 {"mŸ", "MOVE_CHECK", 
cmd_gë_video_move_check
, 
cmd_put_video_move_check
},

3315 {"d©", "VIDEO_DATE", 
cmd_gë_video_d©e
, 
cmd_put_video_d©e
},

3316 {"πf", "RTF_RES", 
cmd_gë_π_°ªam0_ªs
, 
NULL
},

3317 {"πb", "RTB_RES", 
cmd_gë_π_°ªam1_ªs
, 
NULL
},

3319 {"two", "DOUBLE_VIDEO", 
cmd_gë_doubÀ_video
, 
cmd_put_doubÀ_video
},

3320 {"cyc", "VIDEO_LOOP", 
cmd_gë_video_lo›
, 
cmd_put_video_lo›
},

3321 {"wdr", "VIDEO_WDR", 
cmd_gë_video_wdr
, 
cmd_put_video_wdr
},

3322 {"exp", "VIDEO_EXP", 
cmd_gë_video_exp
, 
cmd_put_video_exp
},

3323 {"num", "VIDEO_CAR_NUM", 
cmd_gë_video_ˇr_num
, 
cmd_put_video_ˇr_num
},

3325 {"gø", "GRA_SEN", 
cmd_gë_gø_£n
, 
cmd_put_gø_£n
},

3326 {"∑r", "VIDEO_PAR_CAR", 
cmd_gë_video_∑r_ˇr
, 
cmd_put_video_∑r_ˇr
},

3327 {"g≠", "VIDEO_INV", 
cmd_gë_video_öv
, 
cmd_put_video_öv
},

3328 {
NULL
, "THUMBNAILS", NULL, 
cmd_put_thunbaûs
},

3329 {
NULL
, "THUMBNAILS_CTRL", NULL, 
cmd_put_thunbaûs_˘æ
},

3330 {
NULL
, "TIME_AXIS_PLAY", NULL, 
cmd_put_time_axis_∂ay
},

3331 {
NULL
, "TIME_AXIS_PLAY_CTRL", NULL, 
cmd_put_time_axis_∂ay_˘æ
},

3332 {
NULL
, "TIME_AXIS_FAST_PLAY", NULL, 
cmd_put_time_axis_Á°_∂ay
},

3334 #i‡
WIFI_RT_STREAM


3335 {
NULL
, "OPEN_RT_STREAM", NULL, 
cmd_put_›í_π_°ªam
},

3336 {
NULL
, "CLOSE_RT_STREAM", 
cmd_gë_˛o£_π_°ªam
, 
cmd_put_˛o£_π_°ªam
},

3337 {
NULL
, "OPEN_AUDIO_RT_STREAM", NULL, 
cmd_put_›í_audio_π_°ªam
},

3338 {
NULL
, "CLOSE_AUDIO_RT_STREAM", 
cmd_gë_˛o£_audio_π_°ªam
, 
cmd_put_˛o£_audio_π_°ªam
},

3340 {
NULL
, "OPEN_PULL_RT_STREAM", NULL, 
cmd_put_›í_puŒ_π_°ªam
},

3341 {
NULL
, "CLOSE_PULL_RT_STREAM", 
cmd_gë_˛o£_puŒ_π_°ªam
, 
cmd_put_˛o£_puŒ_π_°ªam
},

3342 {
NULL
, "OPEN_PULL_AUDIO_RT_STREAM", NULL, 
cmd_put_›í_puŒ_audio_π_°ªam
},

3343 {
NULL
, "CLOSE_PULL_AUDIO_RT_STREAM", 
cmd_gë_˛o£_puŒ_audio_π_°ªam
, 
cmd_put_˛o£_puŒ_audio_π_°ªam
},

3345 {
NULL
, "VIDEO_BUMPING", 
cmd_gë_video_bumpög
, 
cmd_put_video_bumpög
},

3347 {
NULL
, "PULL_VIDEO_STATUS", 
cmd_gë_puŒ_video_°©us
, NULL},

3348 {
NULL
, "PULL_VIDEO_PARAM", 
cmd_gë_puŒ_video_∑øm
, 
cmd_put_puŒ_video_∑øm
},

3349 {
NULL
, "VIDEO_CYC_SAVEFILE", NULL, 
cmd_put_video_cyc_ßvefûe
},

3354 c⁄° 
˘p_m≠_íåy
 
	g˘p_sy°em_cmd_èb
[] 
£c
(.
˘p_sy°em_cmd
) = {

3355 {"kï", "KEEP_ALIVE_INTERVAL", 
cmd_gë_kìp_Æive_öãrvÆ
, 
NULL
},

3356 {
NULL
, "APP_ACCESS", NULL, 
cmd_put_≠p_ac˚ss
},

3357 {"sd", "SD_STATUS", 
cmd_gë_sd_°©us
, 
NULL
},

3358 {"b©", "BAT_STATUS", 
cmd_gë_b©_°©us
, 
NULL
},

3359 {"uuid", "UUID", 
cmd_gë_uuid
, 
NULL
},

3360 {"Â", "TF_CAP", 
cmd_gë_sd_size
, 
NULL
},

3362 {"bvo", "BOARD_VOICE", 
cmd_gë_bﬂrd_voi˚
, 
cmd_put_bﬂrd_voi˚
},

3363 {"kvo", "KEY_VOICE", 
cmd_gë_key_voi˚
, 
cmd_put_key_voi˚
},

3364 {"‰e", "LIGHT_FRE", 
cmd_gë_light_‰e
, 
cmd_put_light_‰e
},

3365 {"aff", "AUTO_SHUTDOWN", 
cmd_gë_auto_°utdown
, 
cmd_put_auto_°utdown
},

3366 {"¥o", "SCREEN_PRO", 
cmd_gë_s¸ìn_¥o
, 
cmd_put_s¸ìn_¥o
},

3367 {"tvm", "TV_MODE", 
cmd_gë_tv_mode
, 
cmd_put_tv_mode
},

3368 {"œg", "LANGUAGE", 
cmd_gë_œnguage
, 
cmd_put_œnguage
},

3370 {
NULL
, "FORMAT", NULL, 
cmd_put_f‹m©
},

3371 {"def", "SYSTEM_DEFAULT", 
cmd_gë_sy°em_deÁu…
, 
cmd_put_sy°em_deÁu…
},

3373 #i‡
deföed
 
CONFIG_ENABLE_VLIST


3374 {
NULL
, "FORWARD_MEDIA_FILES_LIST", NULL, 
cmd_put_make_f‹w¨d_fûes_li°
},

3375 {
NULL
, "BEHIND_MEDIA_FILES_LIST", NULL, 
cmd_put_make_behöd_fûes_li°
},

3377 {
NULL
, "FILES_DELETE", NULL, 
cmd_put_fûes_dñëe
},

3378 {
NULL
, "MULTI_COVER_FIGURE", NULL, 
cmd_put_mu…i_covî_figuª
},

3379 {
NULL
, "DATE_TIME", 
cmd_gë_d©e_time
, 
cmd_put_d©e_time
},

3380 {
NULL
, "AP_SSID_INFO", 
cmd_gë_≠_ssid_öfo
, 
cmd_put_≠_ssid_öfo
},

3381 {
NULL
, "STA_SSID_INFO", 
cmd_gë_°a_ssid_öfo
, 
cmd_put_°a_ssid_öfo
},

3382 {
NULL
, "RESET", NULL, 
cmd_put_so·_ª£t
},

3383 {
NULL
, "CTP_CLI_DISCONNECT", NULL, 
cmd_put_˘p_˛i_disc⁄√˘
},

3385 {
NULL
, "CTP_CLI_CONNECTED", NULL, 
cmd_put_˘p_˛i_c⁄√˘ed
},

3386 {
NULL
, "GEN_CHK", 
cmd_gë_gí_chk
, NULL},

3388 {
NULL
, "RT_TALK_CTL", 
cmd_gë_π_èlk_˘l
, 
cmd_put_π_èlk_˘l
},

3389 {
NULL
, "VOICE_TALK_CTL", 
cmd_gë_voi˚_èlk_˘l
, 
cmd_put_voi˚_èlk_˘l
},

3392 {
NULL
, "FILE_LOCK", NULL, 
cmd_put_fûe_lock
},

3393 {
NULL
, "GENERIC_CMD", 
cmd_gë_gíîic_cmd
, 
cmd_put_gíîic_cmd
},

3398 {
NULL
, "WIND_VELOCITY", 
cmd_gë_wöd_vñocôy
, NULL},

3399 {
NULL
, "DEVICE_DIRECTION_CONTROL", NULL, 
cmd_put_devi˚_dúe˘i⁄
},

3404 c⁄° 
˘p_m≠_íåy
 
	g˘p_phŸo_cmd_èb
[] 
£c
(.
˘p_phŸo_cmd
) = {

3405 {
NULL
, "PHOTO_RESO", 
cmd_gë_phŸo_ªso
, 
cmd_put_phŸo_ªso
},

3406 {"qua", "PHOTO_QUALITY", 
cmd_gë_phŸo_quÆôy
, 
cmd_put_phŸo_quÆôy
},

3407 {
NULL
, "PHOTO_CTRL", NULL, 
cmd_put_phŸo_˘æ
},

3409 {"phm", "SELF_TIMER", 
cmd_gë_£lf_timî
, 
cmd_put_£lf_timî
},

3410 {"cyt", "BURST_SHOT", 
cmd_gë_bur°_shŸ
, 
cmd_put_bur°_shŸ
},

3411 {"acu", "PHOTO_SHARPNESS", 
cmd_gë_phŸo_sh¨≤ess
, 
cmd_put_phŸo_sh¨≤ess
},

3412 {"wbl", "WHITE_BALANCE", 
cmd_gë_whôe_bÆ™˚
, 
cmd_put_whôe_bÆ™˚
},

3413 {"iso", "PHOTO_ISO", 
cmd_gë_phŸo_iso
, 
cmd_put_phŸo_iso
},

3414 {"≥xp", "PHOTO_EXP", 
cmd_gë_phŸo_exp
, 
cmd_put_phŸo_exp
},

3415 {"sok", "ANTI_TREMOR", 
cmd_gë_™ti_åem‹
, 
cmd_put_™ti_åem‹
},

3416 {"pd©", "PHOTO_DATE", 
cmd_gë_phŸo_d©e
, 
cmd_put_phŸo_d©e
},

3417 {"sˇ", "FAST_SCA", 
cmd_gë_Á°_sˇ
, 
cmd_put_Á°_sˇ
 },

3418 {"cﬁ", "PHOTO_COLOR", 
cmd_gë_phŸo_cﬁ‹
, 
cmd_put_phŸo_cﬁ‹
},

	@app/net/include/net_config.h

1 #i‚de‡
NET_CONFIG_H


2 
	#NET_CONFIG_H


	)

8 
	#ACCESS_NUM
 1

	)

9 
	#UUID
 "f2dd3cd7-b026-40Ø-Øf4-f6ó07376490"

	)

10 
	#CONFIG_ENABLE_VLIST


	)

11 
	#WIFI_CAM_PREFIX
 "wifi_ˇmîa_ac54_"

	)

13 
	#WIFI_CAM_WIFI_PWD
 "12345678"

	)

14 
	#IPERF_ENABLE


	)

19 
	#CONFIG_RTS_H264_ENABLE


	)

20 
	#CONFIG_NET_TCP_ENABLE


	)

30 
	#APP_PROJECTION
 0

	)

35 
	#CTP_CTRL_PORT
 3333

	)

36 
	#CDP_CTRL_PORT
 2228

	)

37 
	#PROJECTION_PORT
 2230

	)

38 
	#VIDEO_PREVIEW_PORT
 2226

	)

39 
	#VIDEO_PLAYBACK_PORT
 2223

	)

40 
	#HTTP_PORT
 8080

	)

41 
	#RTSP_PORT
 554

	)

47 
	#_DUMP_PORT
 2229

	)

48 
	#_FORWARD_PORT
 2224

	)

49 
	#_BEHIND_PORT
 2225

	)

58 
	#CONFIG_P2418_ENABLE


	)

	@app/net/include/net_video_rec.h

1 #i‚de‡
_NET_VIDEO_REC_H_


2 
	#_NET_VIDEO_REC_H_


	)

4 
	#STRM_SOURCE_VIDEO0
 0x1001

	)

5 
	#STRM_SOURCE_VIDEO1
 0x1002

	)

	@app/net/include/video_bitrate_ctrl.h

1 #i‚de‡
__BITRATE_CTRL_H__


2 
	#__BITRATE_CTRL_H__


	)

4 
	s_bôøã_˘æ
 {

5 
	möô_bôøã
;

6 
	mcur_bôøã
;

7 
	m‰ame_num
;

8 
	m¥ev_‰ame_num
;

9 
	mmö_bôøã
;

10 
	mmax_bôøã
;

11 
	mhigh_th
;

12 
	mlow_th
;

13 } 
	tbôøã_˘æ_t
;

15 
bôøã_˘æ_öô
(
bôøã_˘æ_t
 *
h
,

16 
öô_bôøã
,

17 
high_th
,

18 
low_th
,

19 
mö_bôøã
,

20 
max_bôøã
);

22 
bôøã_˘æ_upd©e
(
bôøã_˘æ_t
 *
h
, 
‰ame_num
, *
bôøã
);

23 
bôøã_˘æ_deöô
(
bôøã_˘æ_t
 *
h
);

	@app/net/include/video_fps_ctrl.h

1 #i‚de‡
__FPS_CTRL_H__


2 
	#__FPS_CTRL_H__


	)

4 
	s_Âs_˘æ
 {

5 
	möô_Âs
;

6 
	mcur_Âs
;

7 
	m‰ame_num
;

8 
	m¥ev_‰ame_num
;

9 
	mmö_Âs
;

10 
	mmax_Âs
;

11 
	mhigh_th
;

12 
	mlow_th
;

13 
	mÂs_díom
;

14 
	m√xt_a˘i⁄
;

15 } 
	tÂs_˘æ_t
;

17 
Âs_˘æ_öô
(
Âs_˘æ_t
 *
h
,

18 
öô_Âs
,

19 
high_th
,

20 
low_th
,

21 
mö_Âs
,

22 
max_Âs
);

24 
Âs_˘æ_upd©e
(
Âs_˘æ_t
 *
h
, 
‰ame_num
, *
Âs
, *
Âs_díom
);

25 
Âs_˘æ_deöô
(
Âs_˘æ_t
 *
h
);

	@app/net/include/video_rec.h

1 #i‚de‡
__VIDEO_REC_H_


2 
	#__VIDEO_REC_H_


	)

4 
	~"sy°em/ö˛udes.h
"

5 
	~"£rvî/video_£rvî.h
"

6 
	~"≠p_c⁄fig.h
"

7 
	~"video_Âs_˘æ.h
"

8 
	~"video_bôøã_˘æ.h
"

10 
	eVIDEO_REC_STA
 {

11 
	mVIDREC_STA_IDLE
,

12 
	mVIDREC_STA_START
,

13 
	mVIDREC_STA_STARTING
,

14 
	mVIDREC_STA_STOP
,

15 
	mVIDREC_STA_STOPING
,

16 
	mVIDREC_STA_FORBIDDEN
,

19 
	evªc_îr_code
 {

20 
	mVREC_ERR_NONE
,

21 
	mVREC_ERR_V0_SERVER_OPEN
,

22 
	mVREC_ERR_V1_SERVER_OPEN
,

23 
	mVREC_ERR_START_FREE_SPACE
,

24 
	mVREC_ERR_SAVE_FREE_SPACE
,

26 
	mVREC_ERR_V0_REQ_START
,

27 
	mVREC_ERR_V1_REQ_START
,

28 
	mVREC_ERR_V0_REQ_STOP
,

29 
	mVREC_ERR_V1_REQ_STOP
,

30 
	mVREC_ERR_V0_REQ_SAVEFILE
,

31 
	mVREC_ERR_V1_REQ_SAVEFILE
,

33 
	mVREC_ERR_PKG
,

34 
	mVREC_ERR_MKDIR
,

38 
	eVIDEO_DISP_STA
 {

39 
	mDISP_BIG_SMALL
,

40 
	mDISP_HALF_WIN
,

41 
	mDISP_FRONT_WIN
,

42 
	mDISP_BACK_WIN
,

43 
	mDISP_PARK_WIN
,

44 
	mDISP_RESET_WIN
,

45 
	mDISP_FORBIDDEN
,

49 
	svideo_ªc_sys_öfo
 {

51 
u32
 
	m˘ime
;

52 
u32
 
	mép_time
;

53 
u8
 
	mpixñ_£l
;

54 
u8
 
	mphŸo_pixñ_£l
;

55 
u8
 
	mosd_⁄
;

56 
u8
 
	mvoi˚_⁄
;

57 
u8
 
	m˘ime_£l
;

58 
u8
 
	mmdë_⁄
;

59 
u8
 
	mép_time_£l
;

60 
u8
 
	m∑rk_guad
;

61 
s8
 
	mexposuª_vÆ
;

62 
s8
 
	mwb_vÆ
;

63 
u8
 
	mdoubÀ_ªc
;

68 
	svideo_míu_°a
 {

70 
	mvideo_ªsﬁuti⁄
;

71 
	mvideo_doubÀ_rouã
;

72 
	mvideo_mic
;

73 
	mvideo_gøvôy
;

74 
	mvideo_mŸdë
;

75 
	mvideo_∑rk_gu¨d
;

76 
	mvideo_wdr
;

77 
	mvideo_cy˛e_ªc
;

78 
	mvideo_√t
;

79 
	mvideo_ˇr_num
;

80 
	mvideo_d©_œbñ
;

81 
	mvideo_whôe_bÆ™˚
;

82 
	mvideo_exposuª
;

83 
	mvideo_g≠
;

84 
	mˇr_num_°r
[20];

87 
	svideo_ªc_hdl
 {

88 
VIDEO_REC_STA
 
	m°©e
;

89 
VIDEO_REC_STA
 
	m°©e_ch2
;

90 
VIDEO_REC_STA
 
	m°©e1_ch2
;

91 
VIDEO_DISP_STA
 
	mdi•_°©e
;

92 
£rvî
 *
	mui
;

93 
£rvî
 *
	mvideo_ªc0
;

94 
£rvî
 *
	mvideo_ªc1
;

95 
£rvî
 *
	mvideo_ªc2
;

96 
£rvî
 *
	mvideo_ªc3
;

97 
£rvî
 *
	mvideo_di•œy_0
;

98 
£rvî
 *
	mvideo_di•œy_1
;

99 
£rvî
 *
	mvideo_di•œy_2
;

100 
£rvî
 *
	mvideo_di•œy_3
;

101 
£rvî
 *
	mvideo_ígöe
;

104 
vfsˇn
 *
	mfsˇn
[4];

105 
u16
 
	mfûe_numbî
[4];

106 
u16
 
	mﬁd_fûe_numbî
[4];

108 
u32
 
	mtŸÆ_size
;

109 
u32
 
	mtŸÆ_lock_fsize
;

111 
u8
 *
	mv0_fbuf
;

112 
u8
 *
	mv1_fbuf
;

113 
u8
 *
	mv2_fbuf
;

114 
u8
 *
	mv3_fbuf
;

115 
u8
 *
	mˇp_buf
;

116 
u8
 *
	maudio_buf
;

118 
u32
 
	m°¨t_jiffõs
;

119 *
	mfûe
[4];

120 
FILE
 *
	m√w_fûe
[4];

121 
	m‚ame
[4][
MAX_FILE_NAME_LEN
];

123 
	muvc_id
;

124 
u16
 
	mwaô
;

125 
u16
 
	m∑rk_waô
;

126 
u16
 
	mavö_waô
;

127 
u16
 
	msd_waô
;

129 
u8
 
	mphŸo_ˇmîa_£l
;

130 
u8
 
	mexposuª_£t
;

131 
u8
 
	mwhôe_bÆ™˚_£t
;

132 
u8
 
	mrun_ªc_°¨t
;

134 
u8
 
	mlock_fsize_cou¡
;

135 
u8
 
	mvideo1_⁄löe
;

136 
u8
 
	mvideo2_⁄löe
;

137 
u8
 
	mvideo3_⁄löe
;

138 
u8
 
	mdi•_video_˘æ
;

139 
u8
 
	mdi•_∑rk_£l
;

140 
u8
 
	mdi•_sw_Êag
;

141 
u8
 
	mavö_˙t
;

142 
u8
 
	mmíu_öout
;

143 
u8
 
	mi•_s˚√s_°©us
;

144 
u8
 
	mg£n_lock
;

145 
u8
 
	m∑rk_wakeup
;

146 
u8
 
	mui_gë_c⁄fig
;

148 
u16
 
	mˇr_hód_y
;

149 
u16
 
	mv™ish_y
;

150 
u16
 
	mÀn_Á˘‹
;

151 
u8
 
	mœn_dë_£âög
;

152 
u8
 
	mßve_fûe
;

155 
	s_ªmŸe
 {

156 
vs_video_ªc
 
	mªc_öfo
;

157 
	mwidth
;

158 
	mheight
;

161 
	s√t_video_hdl
 {

162 
VIDEO_REC_STA
 
	m√t_°©e
;

163 
VIDEO_REC_STA
 
	m√t_°©e1
;

165 
£rvî
 *
	m√t_video_ªc
;

166 
£rvî
 *
	m√t_video_ªc2
;

167 
u8
 *
	m√t_v0_fbuf
;

168 
u8
 *
	m√t_v1_fbuf
;

169 
u8
 *
	maudio_buf
;

170 *
	m¥iv
;

171 
u8
 
	m√t_video0_vπ_⁄
;

172 
u8
 
	m√t_video0_¨t_⁄
;

173 
u8
 
	m√t_video1_vπ_⁄
;

174 
u8
 
	m√t_video1_¨t_⁄
;

175 
u8
 
	mvide‹am_m¨k
;

176 
video_ªq
 
	m√t_vide‹eq
[2];

177 
£rvî
 *
	m√t_disbuf_íc
;

178 
VIDEO_REC_STA
 
	m√t_°©e2
;

179 
u8
 *
	m√t_v2_fbuf
;

180 
u32
 
	mtŸÆ_‰ame
;

181 
	mtimî_h™dÀr
;

182 
Âs_˘æ_t
 
	mÂs_˘æ_hdl
;

183 
u32
 
	mdy_‰
;

184 
u32
 
	mdy_‰_díom
;

185 
u32
 
	mfbuf_f˙t
;

186 
u32
 
	mfbuf_ffû
;

187 
bôøã_˘æ_t
 
	mbôøã_˘æ_hdl
;

188 
u32
 
	mdy_bôøã
;

189 
u8
 
	mi•_s˚√s_°©us
;

190 
_ªmŸe
 
	mªmŸe
;

191 *
	mcmd_fd
;

198 
u16
 
AVIN_WIDTH
;

199 
u16
 
AVIN_HEIGH
;

200 
u16
 
UVC_ENC_WIDTH
;

201 
u16
 
UVC_ENC_HEIGH
;

202 
u16
 
VIR_ENC_WIDTH
;

203 
u16
 
VIR_ENC_HEIGH
;

204 
gë_√t_video_Âs
() ;

205 
gë_audio_øã
();

207 
video_ªc_c⁄fig_öô
();

208 
video_ªc_£t_whôe_bÆ™˚
();

209 
video_ªc_£t_exposuª
(
u32
 
exp
);

210 
mic_£t_toggÀ
();

212 
video_ªc_osd_buf
[64] ;

214 
gë_∑rkög_°©us
();

215 
u32
 
gë_video_di•_°©e
();

218 
ve_£rvî_ª›í
();

219 
video_ªc_fun_ª°‹e
();

	@app/net/network_mssdp.c

1 
	~"mssdp/mssdp.h
"

2 
	~"fs/fs.h
"

3 
	~"≠p_c⁄fig.h
"

5 
	~"sy°em/evít.h
"

6 #i‡
deföed
 
CONFIG_NET_SERVER
 || deföed 
CONFIG_NET_CLIENT


7 
	$√tw‹k_ssdp_cb
(
u32
 
de°_ùaddr
, 
mssdp_ªcv_msg_ty≥
 
ty≥
, *
buf
, *
¥iv
)

9 i‡(
ty≥
 =
MSSDP_SEARCH_MSG
) {

10 
	`¥ötf
("ssd∞˛õ¡[0x%x] sórch, %s\n", 
de°_ùaddr
, 
buf
);

11 } i‡(
ty≥
 =
MSSDP_NOTIFY_MSG
) {

12 
	`¥ötf
("sssss\n");

15 
sys_evít
 
e
;

16 
e
.
¨g
 = "dhcp_srv";

17 
e
.
ty≥
 = 
SYS_DEVICE_EVENT
;

18 
e
.
u
.
dev
.
evít
 = 
DEVICE_EVENT_CHANGE
;

19 
	`sys_evít_nŸify
(&
e
);

23 
	`mssdp_unöô
();

26 
	}
}

29 
	#JSON_DOC
 "Øa"

	)

31 
	gjs⁄_buf„r
[1024];

33 c⁄° *
__©åibuã__
((
wók
))
	$gë_dev_desc_doc
()

35 
ªt
;

36 
FILE
 *
fd
 = 
	`f›í
("mnt/spiflash/res/dev_desc.txt", "r");

38 i‡(
fd
 =
NULL
) {

39 
	`¥ötf
("%s~~~~~~~~%d o≥¿Áû\n", 
__func__
, 
__LINE__
);

40  
NULL
;

43 
	`mem£t
(
js⁄_buf„r
, 0, 1024);

44 
ªt
 = 
	`‰ód
(
fd
, 
js⁄_buf„r
, 1024);

45 i‡(
ªt
 <= 0) {

46 
	`¥ötf
("%s~~~~~~~~%dÑód faû\n", 
__func__
, 
__LINE__
);

47  
NULL
;

50 
	`f˛o£
(
fd
);

52  
js⁄_buf„r
;

53 
	}
}

55 
	$√tw‹k_ssdp_cb
(
u32
 
de°_ùaddr
, 
mssdp_ªcv_msg_ty≥
 
ty≥
, *
buf
, *
¥iv
)

57 i‡(
ty≥
 =
MSSDP_SEARCH_MSG
) {

58 
	`¥ötf
("ssd∞˛õ¡[0x%x] sórch, %s\n", 
de°_ùaddr
, 
buf
);

60 
	}
}

63 
	$√tw‹k_mssdp_öô
()

65 
	`puts
("mssdpÑun \n");

66 
	`mssdp_öô
("MSSDP_SEARCH ", "MSSDP_NOTIFY ", 3889, 
√tw‹k_ssdp_cb
, 
NULL
);

68 #i‡
deföed
 
CONFIG_NET_SERVER


69 
	`mssdp_£t_£¨ch_msg
("xyz", 30);

71 #i‡
deföed
 
CONFIG_NET_CLIENT


72 
	`mssdp_£t_nŸify_msg
("xy", 5);

74 #i‡(!
deföed
 
CONFIG_NET_CLIENT
Ë&& (!deföed 
CONFIG_NET_SERVER
)

75 
	`mssdp_£t_nŸify_msg
((c⁄° *)
	`gë_dev_desc_doc
(), 60);

77 
	}
}

79 
	$√tw‹k_mssdp_unöô
()

81 
	`mssdp_unöô
();

82 
	}
}

	@app/net/stream/video_rt_rtp.c

1 
	~"πp/πp_h264.h
"

2 
	~"comm⁄/comm⁄.h
"

3 
	~"sy°em/•ölock.h
"

4 
	~"os/os_≠i.h
"

5 
	~"£rvî/π_°ªam_pkg.h
"

6 
	~"≠p_c⁄fig.h
"

7 
	~"lwù.h
"

8 
	~"lwù/sockës.h
"

9 
	~"sock_≠i/sock_≠i.h
"

10 
	~"os/os_com∑t.h
"

12 
	~"£rvî/°ªam_c‹e.h
"

26 
	#UDP_SEND_BUF_SIZE
 (44*1472)

	)

30 
	#VIDEO_FRQ_60HZ
 60

	)

31 
	#VIDEO_FRQ_30HZ
 30

	)

32 
	#VIDEO_FRQ_15HZ
 15

	)

35 
	#MAX_PAYLOAD
 (1472-(
‰m_hód
))

36 
u32
 
video_time°ømp
 = 0;

	)

37 
u32
 
	gaudio_time°ømp
 = 0;

38 
u32
 
	g£q
 = 1;

39 
u32
 
	gaux_‰ame_˙t
 = 0;

41 
©oi
(c⁄° *
__≈å
);

42 
	$∑th_™Æyze
(
π_°ªam_öfo
 *
öfo
, c⁄° *
∑th
)

45 *
tmp
 = 
NULL
;

46 *
tmp2
 = 
NULL
;

47 
ù
[15] = {0};

48 
u16
 
p‹t
 = 0;

49 
tmp
 = 
	`°r°r
(
∑th
, "rtp://");

50 i‡(!
tmp
) {

54 
tmp
 +
	`°æí
("rtp://");

56 
tmp2
 = 
	`°rchr
(
tmp
, ':');

57 
	`¥ötf
("tmp=%†Üí=%d\n", 
tmp
, 
tmp2
 -Åmp);

58 
	`°∫˝y
(
ù
, 
tmp
, 
tmp2
 -Åmp);

59 
p‹t
 = 
	`©oi
(
tmp2
 + 1);

61 
	`¥ötf
("ªmŸêù:%†Ö‹t:%d\n", 
ù
, 
p‹t
);

64 
öfo
->
addr
.
sö_Ámûy
 = 
AF_INET
;

65 
öfo
->
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

66 
öfo
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

69 
	}
}

72 *
	$gë_sock_h™dÀr
()

74 *
fd
 = 
NULL
;

81 
fd
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_DGRAM
, 0, 
NULL
, NULL);

83 i‡(
fd
 =
NULL
) {

84 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__func__
, 
__LINE__
);

85  
NULL
;

88 
u32
 
mûl£c
 = 100;

89 
	`sock_£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (c⁄° *)&
mûl£c
, (millsec));

90  
fd
;

92 
	}
}

94 
π_°ªam_öfo
 *
	$√t_π_vpkg_›í
(c⁄° *
∑th
, c⁄° *
mode
)

97 
Êags
 = 0;

98 
îr
;

99 
π_°ªam_öfo
 *
öfo
 = (π_°ªam_öfÿ*)
	`ˇŒoc
(1, (rt_stream_info));

101 i‡(
öfo
 =
NULL
) {

102 
	`¥ötf
("%†%d->Eº‹ i¿mÆloc()\n", 
__func__
, 
__LINE__
);

103  
NULL
;

106 
öfo
->
udp_£nd_buf
 = (*)
	`mÆloc
(
UDP_SEND_BUF_SIZE
);

108 i‡(
öfo
->
udp_£nd_buf
 =
NULL
) {

109 
	`¥ötf
("%†%d->Eº‹ i¿mÆloc()\n", 
__func__
, 
__LINE__
);

110 
	`‰ì
(
öfo
);

111  
NULL
;

114 i‡(
	`∑th_™Æyze
(
öfo
, 
∑th
)) {

116 
	`¥ötf
("%†%d->Eº‹ i¿∑th_™Æyze\n", 
__func__
, 
__LINE__
);

117 
	`‰ì
(
öfo
);

118  
NULL
;

121 
öfo
->
fd
 = 
	`gë_sock_h™dÀr
();

122 i‡(!
öfo
->
fd
) {

123 
	`¥ötf
("%†%d->Eº‹ gë_sock_h™dÀr\n", 
__func__
, 
__LINE__
);

124 
	`‰ì
(
öfo
);

125  
NULL
;

129  
öfo
;

130 
îr1
:

131 
	`‰ì
(
öfo
->
udp_£nd_buf
);

132 
	`‰ì
(
öfo
);

133  
NULL
;

134 
	}
}

136 
	$√t_π_vpkg_˛o£
(
π_°ªam_öfo
 *
öfo
)

138 
video_time°ømp
 = 0;

139 
audio_time°ømp
 = 0;

140 
aux_‰ame_˙t
 = 0;

142 
	`sock_uƒeg
(
öfo
->
fd
);

143 
	`‰ì
(
öfo
->
udp_£nd_buf
);

144 
	`‰ì
(
öfo
);

147 
	}
}

150 
u32
 
	gﬁd_times
 = 0;

151 
u32
 
	g√w_times
 = 0;

153 
	$√t_π_£nd_‰ame
(
π_°ªam_öfo
 *
öfo
, *
buf„r
, 
size_t
 
Àn
, 
u8
 
ty≥
)

155 
π_°ªam_˛i_öfo
 *
˛i
 = 
NULL
;

156 
li°_hód
 *
pos
 = 
NULL
;

157 
ªt
;

158 
föd
 = 0;

159 *
tmp
 = 
NULL
;

160 
•s_d©a_Àn
 = 0;

161 
µs_d©a_Àn
 = 0;

163 
tmp
 = 
buf„r
 + 4;

164 i‡(*
tmp
 == 0x67) {

166 
	`mem˝y
(&
•s_d©a_Àn
, 
buf„r
, 4);

167 
•s_d©a_Àn
 = 
	`ht⁄l
(sps_data_len);

169 
	`mem˝y
(&
µs_d©a_Àn
, 
buf„r
 + 4 + 
•s_d©a_Àn
, 4);

170 
µs_d©a_Àn
 = 
	`ht⁄l
(pps_data_len);

171 
ªt
 = 
	`πp_h264_£nd_‰ame
(
öfo
, 
buf„r
 + 4, 
•s_d©a_Àn
, 30);

173 i‡(
ªt
 < 0) {

174 
	`puts
("rt_stream_sentÉrror!\n");

178 
ªt
 = 
	`πp_h264_£nd_‰ame
(
öfo
, 
buf„r
 + 
•s_d©a_Àn
 + 4 + 4, 
µs_d©a_Àn
, 30);

180 i‡(
ªt
 < 0) {

181 
	`puts
("rt_stream_sentÉrror!\n");

187 
ªt
 = 
	`πp_h264_£nd_‰ame
(
öfo
, 
buf„r
 + 
•s_d©a_Àn
 + 
µs_d©a_Àn
 + 12, 
Àn
 - sps_data_len -Öps_data_len - 12, 30);

189 i‡(
ªt
 < 0) {

190 
	`puts
("rt_stream_sentÉrror!\n");

195 
ªt
 = 
	`πp_h264_£nd_‰ame
(
öfo
, 
buf„r
 + 4, 
Àn
 - 4, 30);

197 i‡(
ªt
 < 0) {

198 
	`puts
("rt_stream_sentÉrror!\n");

204  
Àn
;

205 
	}
}

207 
REGISTER_NET_VIDEO_STREAM_SUDDEV
(
πp_video_°ªam_sub
) = {

208 .
«me
 = "rtp",

209 .
	g›í
 = 
√t_π_vpkg_›í
,

210 .
	gwrôe
 = 
√t_π_£nd_‰ame
,

211 .
	g˛o£
 = 
√t_π_vpkg_˛o£
,

	@app/net/stream/video_rt_tcp.c

1 
	~"comm⁄/comm⁄.h
"

2 
	~"£rvî/π_°ªam_pkg.h
"

3 
	~"lwù.h
"

4 
	~"£rvî/°ªam_c‹e.h
"

5 
	~"sock_≠i/sock_≠i.h
"

12 
u8
 
	göôed
 = 0;

13 
u32
 
	gaux_‰ame_˙t
 = 0;

15 
©oi
(c⁄° *
__≈å
);

16 
	s˛i_öfo
 {

17 
li°_hód
 
	míåy
;

18 *
	mfd
;

19 
sockaddr_ö
 
	maddr
;

23 
	svideo_π_t˝_£rvî_öfo
 {

24 
li°_hód
 
	m˛i_hód
;

25 
sockaddr_ö
 
	mloˇl_addr
;

26 *
	mfd
;

27 
OS_SEM
 
	m£m
;

28 
u32
 
	mÊag
;

31 
video_π_t˝_£rvî_öfo
 
	g£rvî_öfo
;

33 
˛i_öfo
 *
gë_t˝_√t_öfo
();

37 
	$∑th_™Æyze
(
π_°ªam_öfo
 *
öfo
, c⁄° *
∑th
)

40 *
tmp
 = 
NULL
;

41 *
tmp2
 = 
NULL
;

42 
ù
[15] = {0};

43 
u16
 
p‹t
 = 0;

44 
tmp
 = 
	`°r°r
(
∑th
, "tcp://");

45 i‡(!
tmp
) {

49 
tmp
 +
	`°æí
("tcp://");

51 
tmp2
 = 
	`°rchr
(
tmp
, ':');

52 
	`¥ötf
("tmp=%†Üí=%d\n", 
tmp
, 
tmp2
 -Åmp);

53 
	`°∫˝y
(
ù
, 
tmp
, 
tmp2
 -Åmp);

54 
p‹t
 = 
	`©oi
(
tmp2
 + 1);

56 
	`¥ötf
("ªmŸêù:%†Ö‹t:%d\n", 
ù
, 
p‹t
);

59 
öfo
->
addr
.
sö_Ámûy
 = 
AF_INET
;

60 
öfo
->
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

61 
öfo
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

64 
	}
}

67 *
	$video_π_t˝_öô
(c⁄° *
∑th
, c⁄° *
mode
)

69 
ªt
 = 0;

70 
	`puts
("video_rt_tcp_init\n");

71 
π_°ªam_öfo
 *
r_öfo
 = 
	`ˇŒoc
(1, (rt_stream_info));

73 i‡(
r_öfo
 =
NULL
) {

74 
	`¥ötf
("%†mÆlo¯Áû\n", 
__FILE__
);

75  
NULL
;

78 
	`∑th_™Æyze
(
r_öfo
, 
∑th
);

81 
˛i_öfo
 *
öfo
 = 
	`gë_t˝_√t_öfo
();

82 i‡(
öfo
 =
NULL
) {

83 
	`¥ötf
("%†gë_t˝_√t_öfo\n", 
__FILE__
);

84 
	`‰ì
(
r_öfo
);

85  
NULL
;

88 
	`mem˝y
((*)&
r_öfo
->
addr
, (*)&
öfo
->addr, (
sockaddr
));

89 
r_öfo
->
fd
 = 
öfo
->fd;

91  (*)
r_öfo
;

92 
	}
}

94 
u32
 
	$video_π_t˝_£nd
(*
hdr
, 
u8
 *
d©a
, 
u32
 
Àn
, u8 
ty≥
)

99 
π_°ªam_öfo
 *
r_öfo
 = (π_°ªam_öfÿ*)
hdr
;

100 
ªt
;

101 *
buf„r
 = 
NULL
;

102 
u32
 
i
 = 0;

103 
mem
[64];

104 
u32
 
tmp2
;

105 
u32
 
tmp
;

106 
u32
 
°¨t_code
 = 0x01000000;

108 
‰m_hód
 
‰ame_hód
 = {0};

110 
	`mem£t
(&
‰ame_hód
, 0, (
‰m_hód
));

112 
‰ame_hód
.
ty≥
 =Åype ;

113 
‰ame_hód
.
£q
 = (
i
++);

115 i‡(
aux_‰ame_˙t
 < 60) {

117 
‰ame_hód
.
time°amp
 += 0;

118 
aux_‰ame_˙t
++;

121 
‰ame_hód
.
time°amp
 += 3300;

125 
‰ame_hód
.
‰m_sz
 = 
Àn
;

126 
ªt
 = 
	`sock_£nd
(
r_öfo
->
fd
, (*)&
‰ame_hód
, (
‰m_hód
), 0);

127 i‡(
ªt
 <= 0) {

132 i‡(
ty≥
 =
H264_TYPE_VIDEO
) {

135 
	`mem˝y
(
mem
, 
d©a
, 64);

136 
buf„r
 = 
mem
;

138 i‡(*((*)(
buf„r
 + 4)) == 0x67) {

140 
	`mem˝y
(&
tmp
, 
buf„r
, 4);

141 
tmp
 = 
	`ht⁄l
(tmp);

142 
	`mem˝y
(
buf„r
, &
°¨t_code
, 4);

143 
	`mem˝y
(&
tmp2
, 
buf„r
 + 
tmp
 + 4, 4);

144 
tmp2
 = 
	`ht⁄l
(tmp2);

145 
	`mem˝y
(
buf„r
 + 
tmp
 + 4, &
°¨t_code
, 4);

146 
	`mem˝y
(
buf„r
 + 
tmp
 + 
tmp2
 + 8, &
°¨t_code
, 4);

151 
	`mem˝y
(
buf„r
, &
°¨t_code
, 4);

154 
ªt
 = 
	`sock_£nd
(
r_öfo
->
fd
, 
mem
, 64, 0);

155 i‡(
ªt
 <= 0) {

159 
ªt
 = 
	`sock_£nd
(
r_öfo
->
fd
, (*Ë
d©a
 + 64, 
Àn
 - 64, 0);

160 i‡(
ªt
 <= 0) {

166 
ªt
 = 
	`sock_£nd
(
r_öfo
->
fd
, (*)
d©a
, 
Àn
, 0);

167 i‡(
ªt
 <= 0) {

174  
Àn
;

176 
	}
}

178 
	$video_π_t˝_unöô
(*
hdr
)

180 
	`puts
("video_rt_tcp_uninit\n\n\n\n\n\n");

181 
aux_‰ame_˙t
 = 0;

182 
π_°ªam_öfo
 *
r_öfo
 = (π_°ªam_öfÿ*)
hdr
;

183 
	`‰ì
(
r_öfo
);

184 
	}
}

186 
REGISTER_NET_VIDEO_STREAM_SUDDEV
(
t˝_video_°ªam_sub
) = {

187 .
«me
 = "tcp",

188 .
	g›í
 = 
video_π_t˝_öô
,

189 .
	gwrôe
 = 
video_π_t˝_£nd
,

190 .
	g˛o£
 = 
video_π_t˝_unöô
,

197 
˛i_öfo
 *
	$gë_t˝_√t_öfo
()

199 
li°_hód
 *
pos
 = 
NULL
;

200 
˛i_öfo
 *
˛i
 = 
NULL
;

201 
˛i_öfo
 *
ﬁd_˛i
 = 
NULL
;

202 
cou¡
 = 0;

203 
	`os_£m_≥nd
(&
£rvî_öfo
.
£m
, 50);

205 
	`li°_f‹_óch
(
pos
, &
£rvî_öfo
.
˛i_hód
) {

206 
˛i
 = 
	`li°_íåy
(
pos
, 
˛i_öfo
, 
íåy
);

207 
	`¥ötf
("ù:%†Ö‹t:%d\n\n", 
	`öë_¡ﬂ
(
˛i
->
addr
.
sö_addr
.
s_addr
), 
	`ht⁄s
(˛i->addr.
sö_p‹t
));

208 
cou¡
++;

210 
	`¥ötf
("cou¡ = %d\n\n", 
cou¡
);

211 i‡(
cou¡
 > 1) {

212 
ﬁd_˛i
 = 
	`li°_fú°_íåy
(&
£rvî_öfo
.
˛i_hód
, 
˛i_öfo
, 
íåy
);

213 
	`li°_dñ
(&
ﬁd_˛i
->
íåy
);

214 
	`sock_£t_quô
(
ﬁd_˛i
->
fd
);

215 
	`sock_uƒeg
(
ﬁd_˛i
->
fd
);

216 
ﬁd_˛i
->
fd
 = 
NULL
;

217 
	`‰ì
(
ﬁd_˛i
);

220  
˛i
;

223 
	}
}

228 
	$__do_sock_ac˝ë
(*
¨g
)

231 
sockÀn_t
 
Àn
 = (
£rvî_öfo
.
loˇl_addr
);

234 
˛i_öfo
 *
__˛i
 = 
	`ˇŒoc
(1, ((cli_info)));

235 i‡(
__˛i
 =
NULL
) {

236 
	`¥ötf
("malloc fail\n");

241 
__˛i
->
fd
 = 
	`sock_ac˚±
(
£rvî_öfo
.fd, (
sockaddr
 *)&__˛i->
addr
, &
Àn
, 
NULL
, NULL);

242 i‡(
__˛i
->
fd
 =
NULL
) {

243 
	`¥ötf
("someÉrror in here\n\n");

246 i‡(
£rvî_öfo
.
Êag
) {

250 
	`li°_add_èû
(&
__˛i
->
íåy
, &
£rvî_öfo
.
˛i_hód
);

253 
	`os_£m_po°
(&
£rvî_öfo
.
£m
);

257 
	}
}

260 
	$video_π_t˝_£rvî_öô
(
p‹t
)

262 
ªt
 = 0;

263 
	`puts
("video_rt_tcp_server_init\n");

265 
	`mem£t
(&
£rvî_öfo
, 0x0, (server_info));

266 
	`os_£m_¸óã
(&
£rvî_öfo
.
£m
, 0);

268 
£rvî_öfo
.
loˇl_addr
.
sö_Ámûy
 = 
AF_INET
;

269 
£rvî_öfo
.
loˇl_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
) ;

270 
£rvî_öfo
.
loˇl_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

273 
£rvî_öfo
.
fd
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_STREAM
, 0, 
NULL
, NULL);

275 i‡(
£rvî_öfo
.
fd
 =
NULL
) {

279 
u32
 
›t
 = 1;

280 i‡(
	`sock_£tsock›t
(
£rvî_öfo
.
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt)) < 0) {

281 
	`¥ötf
("%†sock_böd faû\n", 
__FILE__
);

286 i‡(
	`sock_böd
(
£rvî_öfo
.
fd
, (
sockaddr
 *)&£rvî_öfo.
loˇl_addr
, (sockaddr))) {

287 
	`¥ötf
("%†sock_böd faû\n", 
__FILE__
);

290 
	`sock_li°í
(
£rvî_öfo
.
fd
, 0x5);

292 
	`INIT_LIST_HEAD
(&
£rvî_öfo
.
˛i_hód
);

293 
ªt
 = 
	`thªad_f‹k
("__do_sock_ac˝ë", 25, 0x100, 0, 0, 
__do_sock_ac˝ë
, 
NULL
);

294 i‡(
ªt
 !
OS_NO_ERR
) {

295 
	`¥ötf
("%†thªad f‹k faû\n", 
__FILE__
);

302 
	}
}

303 
	$video_π_t˝_£rvî_unöô
()

305 
	`¥ötf
("video_rt_tcp_server_uninit\n");

306 
£rvî_öfo
.
Êag
 = 1;

307 
	`sock_£t_quô
(
£rvî_öfo
.
fd
);

308 
	`sock_uƒeg
(
£rvî_öfo
.
fd
);

309 
£rvî_öfo
.
Êag
 = 0;

311 
	}
}

	@app/net/stream/video_rt_tcp2.c

1 
	~"sy°em/•ölock.h
"

2 
	~"os/os_≠i.h
"

3 
	~"£rvî/π_°ªam_pkg.h
"

4 
	~"lwù.h
"

5 
	~"£rvî/√t2video.h
"

6 
	~"os/os_com∑t.h
"

7 
	~"comm⁄/comm⁄.h
"

8 
	~"sock_≠i/sock_≠i.h
"

10 
	~"£rvî/°ªam_c‹e.h
"

13 
	#H264_CLANNEL
 10000

	)

14 
	#JPEG_CLANNEL
 10001

	)

15 
	#CMD_CLANNEL
 10002

	)

17 
©oi
(c⁄° *
__≈å
);

18 
	s˛i_öfo
 {

19 
li°_hód
 
	míåy
;

20 *
	mfd
;

21 
sockaddr_ö
 
	maddr
;

22 
	mid
;

26 
	svideo_π_t˝_£rvî_öfo
 {

27 
li°_hód
 
	m˛i_hód
;

28 
sockaddr_ö
 
	mloˇl_addr
;

29 *
	mfd
;

30 
	möôed
;

31 (*
	mˇŒback
)(
	mcmd
, *
	mbuf„r
, 
	mÀn
, *
	m¥iv
);

32 
OS_SEM
 
	m£m
;

33 
u32
 
	mÊag
;

39 
video_π_t˝_£rvî_öfo
 
	g£rvî_öfo
 = {

40 .
˛i_hód
.
√xt
 = 
NULL
,

41 .
	g˛i_hód
.
	g¥ev
 = 
NULL
,

44 
˛i_öfo
 *
gë_t˝_√t_öfo
(
u16
 
p‹t
);

46 
	$∑th_™Æyze
(
π_°ªam_öfo
 *
öfo
, c⁄° *
∑th
)

49 *
tmp
 = 
NULL
;

50 *
tmp2
 = 
NULL
;

51 
ù
[15] = {0};

52 
u16
 
p‹t
 = 0;

53 
tmp
 = 
	`°r°r
(
∑th
, "cty://");

54 i‡(!
tmp
) {

58 
tmp
 +
	`°æí
("cty://");

60 
tmp2
 = 
	`°rchr
(
tmp
, ':');

61 
	`¥ötf
("tmp=%†Üí=%d\n", 
tmp
, 
tmp2
 -Åmp);

62 
	`°∫˝y
(
ù
, 
tmp
, 
tmp2
 -Åmp);

63 
p‹t
 = 
	`©oi
(
tmp2
 + 1);

65 
	`¥ötf
("ªmŸêù:%†Ö‹t:%d\n", 
ù
, 
p‹t
);

68 
öfo
->
addr
.
sö_Ámûy
 = 
AF_INET
;

69 
öfo
->
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

70 
öfo
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

73 
	}
}

76 *
	$video_π_t˝_öô
(c⁄° *
∑th
, c⁄° *
mode
)

78 
ªt
 = 0;

79 
u16
 
p‹t
 = 0;

80 
	`log_i
("video_rt_tcp_init222\n");

81 
π_°ªam_öfo
 *
__dump
 = 
	`ˇŒoc
(1, (rt_stream_info));

83 i‡(
__dump
 =
NULL
) {

84 
	`log_e
("%†mÆlo¯Áû\n", 
__FILE__
);

85  
NULL
;

89 
	`∑th_™Æyze
(
__dump
, 
∑th
);

91 
˛i_öfo
 *
öfo
 = 
	`gë_t˝_√t_öfo
(
	`¡ohs
(
__dump
->
addr
.
sö_p‹t
));

94 i‡(
öfo
 =
NULL
) {

95 
	`log_e
("%†gë_t˝_√t_öfo\n", 
__FILE__
);

96 
	`‰ì
(
__dump
);

97  
NULL
;

100 
	`mem˝y
((*)&
__dump
->
addr
, (*)&
öfo
->addr, (
sockaddr
));

101 
__dump
->
fd
 = 
öfo
->fd;

103  (*)
__dump
;

104 
	}
}

105 
	$video_π_t˝_£nd
(*
fûe
, *
buf
, 
u32
 
Àn
, 
u8
 
ty≥
)

107 
π_°ªam_öfo
 *
__dump
 = (π_°ªam_öfÿ*)
fûe
;

108 
ªt
 = 0;

109 
u32
 
d©a_size
 = 
Àn
;

110 i‡(
ty≥
 =
H264_TYPE_VIDEO
 ||Åy≥ =
JPEG_TYPE_VIDEO
) {

111 
d©a_size
 |= (1 << 31);

112 } i‡(
ty≥
 =
PCM_TYPE_AUDIO
) {

113 
d©a_size
 &= ~(1 << 31);

116 
ªt
 = 
	`sock_£nd
(
__dump
->
fd
, (*)&
d©a_size
, 4, 0);

117 i‡(
ªt
 <= 0) {

118  
ªt
;

120 
ªt
 = 
	`sock_£nd
(
__dump
->
fd
, 
buf
, 
Àn
, 0);

122  
ªt
;

124 
	}
}

126 
	$video_π_t˝_unöô
(*
fûe
)

128 
	`log_i
("video_rt_tcp_uninit2222\n\n\n\n\n\n");

129 
ªt
 = 0;

130 
π_°ªam_öfo
 *
__dump
 = (π_°ªam_öfÿ*)
fûe
;

131 
u32
 
íd_‰ame
 = 0x12348765;

132 
ªt
 = 
	`sock_£nd
(
__dump
->
fd
, (*)&
íd_‰ame
, 4, 0);

133 i‡(
ªt
 <= 0) {

136 
	`‰ì
(
__dump
);

138 
	}
}

139 
REGISTER_NET_VIDEO_STREAM_SUDDEV
(
t˝2_video_°ªam_sub
) = {

140 .
«me
 = "cty",

141 .
	g›í
 = 
video_π_t˝_öô
,

142 .
	gwrôe
 = 
video_π_t˝_£nd
,

143 .
	g˛o£
 = 
video_π_t˝_unöô
,

148 
˛i_öfo
 *
	$gë_t˝_√t_öfo
(
u16
 
p‹t
)

150 
li°_hód
 *
pos
 = 
NULL
;

151 
˛i_öfo
 *
˛i
 = 
NULL
;

152 
cou¡
 = 0;

153 
	`li°_f‹_óch
(
pos
, &
£rvî_öfo
.
˛i_hód
) {

154 
˛i
 = 
	`li°_íåy
(
pos
, 
˛i_öfo
, 
íåy
);

155 i‡(
p‹t
 =
˛i
->
id
) {

156 
	`log_i
("gë id:%d ip:%†Ö‹t:%d\n\n", 
˛i
->
id
, 
	`öë_¡ﬂ
(˛i->
addr
.
sö_addr
.
s_addr
), 
	`ht⁄s
(˛i->addr.
sö_p‹t
));

158  
˛i
;

163 
	`log_w
("not find cli info \n");

164  
˛i
;

166 
	}
}

177 
u8
 
	gbuf„r
[1024];

178 
	$cmd_˛i_èsk
(*
¨g
)

180 
li°_hód
 *
pos
 = 
NULL
;

181 
˛i_öfo
 *
˛i
 = 
NULL
;

182 
ªt
 = 0;

183 
Àn
 = 0;

184 
cmd
 = 0;

185 
föd
 = 0;

187 
	`li°_f‹_óch
(
pos
, &
£rvî_öfo
.
˛i_hód
) {

188 
˛i
 = 
	`li°_íåy
(
pos
, 
˛i_öfo
, 
íåy
);

189 i‡(
CMD_CLANNEL
 =
˛i
->
id
) {

190 
föd
 = 1;

194 i‡(!
föd
) {

198 
	`log_d
("föd iàù:%†Ö‹t:%d\n\n", 
	`öë_¡ﬂ
(
˛i
->
addr
.
sö_addr
.
s_addr
), 
	`ht⁄s
(˛i->addr.
sö_p‹t
));

202 
ªt
 = 
	`sock_ªcv
(
˛i
->
fd
, (*)&
Àn
, 4, 0);

203 i‡(
ªt
 != 4) {

204 
	`log_e
("sock_recv fail1\n");

205 
exô_
;

207 
	`log_i
("Àn=%d\n", 
Àn
);

209 
ªt
 = 
	`sock_ªcv
(
˛i
->
fd
, (*)&
cmd
, 4, 0);

210 i‡(
ªt
 != 4) {

211 
	`log_e
("sock_recv fail2\n");

212 
exô_
;

214 
	`log_i
("cmd=%d\n", 
cmd
);

217 
	`mem£t
(
buf„r
, 0, (buffer));

218 i‡(
Àn
 - 4 != 0) {

219 
ªt
 = 
	`sock_ªcv
(
˛i
->
fd
, 
buf„r
, 
Àn
 - 4, 0);

220 i‡(
ªt
 < 0) {

221 
	`log_e
("sock_recv fail4\n");

222 
exô_
;

225 i‡(
£rvî_öfo
.
ˇŒback
) {

226 
ªt
 = 
£rvî_öfo
.
	`ˇŒback
(
cmd
, 
buf„r
, 
Àn
 - 4, 
NULL
);

228 i‡(
ªt
 !
CMD_NO_ERR
) {

229 
	`log_e
("cmdÉº=%d\n", 
ªt
);

234 
exô_
:

235 
	`log_d
("cmd_cli_taskÉxit\n");

237 
	}
}

240 
	$cmd_£nd
(
cmd_˘l
 *
cöfo
)

242 
li°_hód
 *
pos
 = 
NULL
;

243 
˛i_öfo
 *
˛i
 = 
NULL
;

244 
ªt
 = 0;

245 
Àn
 = 0;

248 
	`li°_f‹_óch
(
pos
, &
£rvî_öfo
.
˛i_hód
) {

249 
˛i
 = 
	`li°_íåy
(
pos
, 
˛i_öfo
, 
íåy
);

250 i‡(
CMD_CLANNEL
 =
˛i
->
id
) {

254 
	`log_i
("send0\n");

255 
ªt
 = 
	`sock_£nd
(
˛i
->
fd
, (*)
cöfo
, 8, 0);

256 i‡(
ªt
 != 8) {

257 
	`log_e
("sock send fail1111\n");

261 
	`log_i
("£nd1Üí=%d\n", 
cöfo
->
Àn
 - 4);

262 i‡(
cöfo
->
Àn
 - 4 != 0) {

263 
ªt
 = 
	`sock_£nd
(
˛i
->
fd
, 
cöfo
->
d©a
, cöfo->
Àn
 - 4, 0);

264 i‡(
ªt
 !
cöfo
->
Àn
 - 4) {

265 
	`log_e
("sock síd faû22222Ñë=%d\n", 
ªt
);

269 
	`log_i
("send2\n");

272 
	}
}

277 
	$__do_sock_ac˝ë
(*
¨g
)

279 
u32
 
föd
 = 0;

280 
li°_hód
 *
pos
 = 
NULL
;

281 
˛i_öfo
 *
˛i
 = 
NULL
;

282 
ªt
 = 0;

283 
u8
 
èsk_«me
[64];

284 
u32
 
cou¡
 = 0;

286 
sockÀn_t
 
Àn
 = (
£rvî_öfo
.
loˇl_addr
);

289 
˛i_öfo
 *
__˛i
 = 
	`ˇŒoc
(1, ((cli_info)));

290 i‡(
__˛i
 =
NULL
) {

291 
	`log_e
("malloc fail\n");

296 
__˛i
->
fd
 = 
	`sock_ac˚±
(
£rvî_öfo
.fd, (
sockaddr
 *)&__˛i->
addr
, &
Àn
, 
NULL
, NULL);

297 i‡(
__˛i
->
fd
 =
NULL
) {

298 
	`log_w
("someÉrror in here\n\n");

299 
	`‰ì
(
__˛i
);

302 i‡(
£rvî_öfo
.
Êag
) {

303 
	`‰ì
(
__˛i
);

307 
ªt
 = 
	`sock_ªcv
(
__˛i
->
fd
, (*)&__˛i->
id
, 4, 0);

308 i‡(
ªt
 != 4) {

309 
	`sock_uƒeg
(
__˛i
->
fd
);

310 
	`‰ì
(
__˛i
->
fd
);

313 
	`log_i
("__˛i->id = %d\n", 
__˛i
->
id
);

315 
	`li°_add_èû
(&
__˛i
->
íåy
, &
£rvî_öfo
.
˛i_hód
);

318 i‡(
__˛i
->
id
 =
CMD_CLANNEL
) {

319 
	`•rötf
(
èsk_«me
, "cmd_˛i_èsk%x", 
cou¡
++);

320 
ªt
 = 
	`thªad_f‹k
(
èsk_«me
, 28, 0x1000, 0, 0, 
cmd_˛i_èsk
, 
NULL
);

321 i‡(
ªt
 !
OS_NO_ERR
) {

322 
	`log_e
("thread_fork fail\n");

330 
	}
}

333 
video_π_t˝_£rvî_öô2
(
p‹t
, (*
ˇŒback
)(, *, , *))

335 
ªt
 = 0;

336 
	`log_i
("video_rt_tcp_server_init2\n");

338 
	`mem£t
(&
£rvî_öfo
, 0x0, (server_info));

339 
	`os_£m_¸óã
(&
£rvî_öfo
.
£m
, 0);

341 
£rvî_öfo
.
loˇl_addr
.
sö_Ámûy
 = 
AF_INET
;

342 
£rvî_öfo
.
loˇl_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
) ;

343 
£rvî_öfo
.
loˇl_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

346 
£rvî_öfo
.
fd
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_STREAM
, 0, 
NULL
, NULL);

348 i‡(
£rvî_öfo
.
fd
 =
NULL
) {

352 
u32
 
›t
 = 1;

353 i‡(
	`sock_£tsock›t
(
£rvî_öfo
.
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, (opt)) < 0) {

354 
	`log_e
("%†sock_böd faû\n", 
__FILE__
);

359 i‡(
	`sock_böd
(
£rvî_öfo
.
fd
, (
sockaddr
 *)&£rvî_öfo.
loˇl_addr
, (sockaddr))) {

360 
	`log_e
("%†sock_böd faû\n", 
__FILE__
);

363 
	`sock_li°í
(
£rvî_öfo
.
fd
, 0x5);

365 
	`INIT_LIST_HEAD
(&
£rvî_öfo
.
˛i_hód
);

366 
£rvî_öfo
.
öôed
 = 1;

367 
£rvî_öfo
.
ˇŒback
 = callback;

369 
ªt
 = 
	`thªad_f‹k
("__do_sock_ac˝ë", 28, 0x1000, 0, 0, 
__do_sock_ac˝ë
, 
NULL
);

370 i‡(
ªt
 !
OS_NO_ERR
) {

371 
	`log_e
("%†thªad f‹k faû\n", 
__FILE__
);

378 
	}
}

379 
	$video_π_t˝_£rvî_unöô2
()

381 
	`¥ötf
("video_rt_tcp_server_uninit\n");

382 
£rvî_öfo
.
Êag
 = 1;

383 
	`sock_£t_quô
(
£rvî_öfo
.
fd
);

384 
	`sock_uƒeg
(
£rvî_öfo
.
fd
);

385 
£rvî_öfo
.
Êag
 = 0;

387 
	}
}

389 
	$video_disc⁄√˘_Æl_˛i
()

391 
li°_hód
 *
pos
 = 
NULL
, *
n
 = NULL;

392 
˛i_öfo
 *
cf
 = 
NULL
;

393 i‡(!
£rvî_öfo
.
öôed
) {

396 
	`log_d
("disconnectáll client\n");

397 
	`li°_f‹_óch_ß„
(
pos
, 
n
, &
£rvî_öfo
.
˛i_hód
) {

398 
cf
 = 
	`li°_íåy
(
pos
, 
˛i_öfo
, 
íåy
);

399 
	`li°_dñ
(&
cf
->
íåy
);

400 i‡(
cf
->
fd
 !
NULL
) {

401 
	`sock_uƒeg
(
cf
->
fd
);

402 
cf
->
fd
 = 
NULL
;

404 i‡(
cf
 !
NULL
) {

405 
	`‰ì
(
cf
);

406 
cf
 = 
NULL
;

409 
	}
}

	@app/net/stream/video_rt_udp.c

1 
	~"comm⁄/comm⁄.h
"

2 
	~"sy°em/•ölock.h
"

3 
	~"os/os_≠i.h
"

4 
	~"£rvî/π_°ªam_pkg.h
"

5 
	~"≠p_c⁄fig.h
"

6 
	~"lwù.h
"

7 
	~"lwù/sockës.h
"

8 
	~"sock_≠i/sock_≠i.h
"

9 
	~"os/os_com∑t.h
"

11 
	~"£rvî/°ªam_c‹e.h
"

20 
	#UDP_SEND_BUF_SIZE
 (44*1472)

	)

22 
	#MAX_PAYLOAD
 (1472-(
‰m_hód
))

23 

	)

24 
u32
 
	gvideo_time°ømp
 = 0;

25 
u32
 
	gaudio_time°ømp
 = 0;

26 
u32
 
	g£q
 = 1;

27 
u32
 
	gaux_‰ame_˙t
 = 0;

28 
©oi
(c⁄° *
__≈å
);

29 
	$∑th_™Æyze
(
π_°ªam_öfo
 *
öfo
, c⁄° *
∑th
)

32 *
tmp
 = 
NULL
;

33 *
tmp2
 = 
NULL
;

34 
ù
[15] = {0};

35 
u16
 
p‹t
 = 0;

36 
tmp
 = 
	`°r°r
(
∑th
, "udp://");

37 i‡(!
tmp
) {

41 
tmp
 +
	`°æí
("udp://");

43 
tmp2
 = 
	`°rchr
(
tmp
, ':');

44 
	`¥ötf
("tmp=%†Üí=%d\n", 
tmp
, 
tmp2
 -Åmp);

45 
	`°∫˝y
(
ù
, 
tmp
, 
tmp2
 -Åmp);

46 
p‹t
 = 
	`©oi
(
tmp2
 + 1);

48 
	`¥ötf
("ªmŸêù:%†Ö‹t:%d\n", 
ù
, 
p‹t
);

51 
öfo
->
addr
.
sö_Ámûy
 = 
AF_INET
;

52 
öfo
->
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
ù
);

53 
öfo
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

56 
	}
}

59 *
	$gë_sock_h™dÀr
()

61 *
fd
 = 
NULL
;

68 
fd
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_DGRAM
, 0, 
NULL
, NULL);

70 i‡(
fd
 =
NULL
) {

71 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__func__
, 
__LINE__
);

72  
NULL
;

75 
u32
 
mûl£c
 = 100;

76 
	`sock_£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (c⁄° *)&
mûl£c
, (millsec));

77  
fd
;

79 
	}
}

81 
π_°ªam_öfo
 *
	$√t_π_vpkg_›í
(c⁄° *
∑th
, c⁄° *
mode
)

84 
Êags
 = 0;

85 
îr
;

86 
π_°ªam_öfo
 *
öfo
 = (π_°ªam_öfÿ*)
	`ˇŒoc
(1, (rt_stream_info));

88 i‡(
öfo
 =
NULL
) {

89 
	`¥ötf
("%†%d->Eº‹ i¿mÆloc()\n", 
__func__
, 
__LINE__
);

90  
NULL
;

93 
öfo
->
udp_£nd_buf
 = (*)
	`mÆloc
(
UDP_SEND_BUF_SIZE
);

95 i‡(
öfo
->
udp_£nd_buf
 =
NULL
) {

96 
	`¥ötf
("%†%d->Eº‹ i¿mÆloc()\n", 
__func__
, 
__LINE__
);

97 
	`‰ì
(
öfo
);

98  
NULL
;

101 i‡(
	`∑th_™Æyze
(
öfo
, 
∑th
)) {

103 
	`¥ötf
("%†%d->Eº‹ i¿∑th_™Æyze\n", 
__func__
, 
__LINE__
);

104 
	`‰ì
(
öfo
);

105  
NULL
;

108 
öfo
->
fd
 = 
	`gë_sock_h™dÀr
();

109 i‡(!
öfo
->
fd
) {

110 
	`¥ötf
("%†%d->Eº‹ gë_sock_h™dÀr\n", 
__func__
, 
__LINE__
);

111 
	`‰ì
(
öfo
);

112  
NULL
;

116  
öfo
;

117 
îr1
:

118 
	`‰ì
(
öfo
->
udp_£nd_buf
);

119 
	`‰ì
(
öfo
);

120  
NULL
;

121 
	}
}

122 
	$√t_π_vpkg_wrôe
(
π_°ªam_öfo
 *
öfo
, *
buf„r
, 
size_t
 
Àn
, 
sockaddr
 *
addr
, 
addæí
)

125  
	`sock_£ndto
(
öfo
->
fd
, 
buf„r
, 
Àn
, 0, 
addr
, 
addæí
);

126 
	}
}

128 
	$√t_π_vpkg_˛o£
(
π_°ªam_öfo
 *
öfo
)

130 
video_time°ømp
 = 0;

131 
audio_time°ømp
 = 0;

132 
aux_‰ame_˙t
 = 0;

134 
	`sock_uƒeg
(
öfo
->
fd
);

135 
	`‰ì
(
öfo
->
udp_£nd_buf
);

136 
	`‰ì
(
öfo
);

139 
	}
}

142 
u32
 
	gﬁd_times
 = 0;

143 
u32
 
	g√w_times
 = 0;

145 
	$√t_π_£nd_‰ame
(
π_°ªam_öfo
 *
öfo
, *
buf„r
, 
size_t
 
Àn
, 
u8
 
ty≥
)

149 
u16
 
∑ylﬂd_Àn
 = 0;

150 
u32
 
tŸÆ_udp_£nd
 = 0;

151 
‰m_hód
 
‰ame_hód
 = {0};

152 
u32
 
ch™ge_d©a
 = 0x01000000;

153 
u32
 
tmp
, 
tmp2
, 
tmp3
;

154 
ªt
;

156 
u32
 
ªmaö_Àn
 = 
Àn
;

160 i‡(
öfo
 =
NULL
 || info->
udp_£nd_buf
 =NULL || info->
fd
 == NULL) {

161 
	`¥ötf
("useÇet_rt_stream_open_pkg\n");

166 
‰ame_hód
.
off£t
 = 0;

167 
‰ame_hód
.
‰m_sz
 = 
Àn
;

168 
‰ame_hód
.
ty≥
 &~
LAST_FREG_MAKER
;

169 
‰ame_hód
.
ty≥
 |=Åype;

171 i‡(
‰ame_hód
.
ty≥
 =
H264_TYPE_VIDEO
 || føme_hód.ty≥ =
JPEG_TYPE_VIDEO
) {

173 
√w_times
 = 
	`timî_gë_ms
();

175 i‡(
aux_‰ame_˙t
 < 60) {

176 
video_time°ømp
 = 0;

178 
video_time°ømp
 += 0;

182 
ﬁd_times
 = 
√w_times
;

183 
‰ame_hód
.
time°amp
 = 
video_time°ømp
;

186 
audio_time°ømp
 = 501;

187 
‰ame_hód
.
time°amp
 = 
audio_time°ømp
;

190 
‰ame_hód
.
£q
 = seq++;

192 
ªmaö_Àn
) {

193 i‡(
ªmaö_Àn
 < 
MAX_PAYLOAD
) {

194 
∑ylﬂd_Àn
 = 
ªmaö_Àn
;

195 
‰ame_hód
.
ty≥
 |
LAST_FREG_MAKER
;

197 
∑ylﬂd_Àn
 = 
MAX_PAYLOAD
;

200 
‰ame_hód
.
∑ylﬂd_size
 = 
∑ylﬂd_Àn
;

201 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
, &
‰ame_hód
, (
‰m_hód
));

202 
tŸÆ_udp_£nd
 +(
‰m_hód
);

204 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
, 
buf„r
 + 
‰ame_hód
.
off£t
, 
∑ylﬂd_Àn
);

205 i‡(
‰ame_hód
.
off£t
 == 0 &&

206 
‰ame_hód
.
ty≥
 =
H264_TYPE_VIDEO
) {

207 i‡(*((*)(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
 + 4)) == 0x67) {

209 
	`mem˝y
(&
tmp
, 
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
, 4);

210 
tmp
 = 
	`ht⁄l
(tmp);

211 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
, &
ch™ge_d©a
, 4);

212 
	`mem˝y
(&
tmp2
, 
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
 + 
tmp
 + 4, 4);

213 
tmp2
 = 
	`ht⁄l
(tmp2);

214 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
 + 
tmp
 + 4, &
ch™ge_d©a
, 4);

215 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
 + 
tmp
 + 
tmp2
 + 8, &
ch™ge_d©a
, 4);

219 
	`mem˝y
(
öfo
->
udp_£nd_buf
 + 
tŸÆ_udp_£nd
, &
ch™ge_d©a
, 4);

224 
tŸÆ_udp_£nd
 +
∑ylﬂd_Àn
;

226 i‡((
tŸÆ_udp_£nd
 =
UDP_SEND_BUF_SIZE
Ë|| (
∑ylﬂd_Àn
 < 
MAX_PAYLOAD
)) {

227 i‡((
ªt
 = 
	`√t_π_vpkg_wrôe
(
öfo
, info->
udp_£nd_buf
, 
tŸÆ_udp_£nd
, (
sockaddr
 *)&öfo->
addr
, (
sockaddr_ö
))) !=Åotal_udp_send) {

230 
	`puts
("rt_stream_sentÉrror!\n");

235 
tŸÆ_udp_£nd
 = 0;

238 
ªmaö_Àn
 -
∑ylﬂd_Àn
;

239 
‰ame_hód
.
off£t
 +
∑ylﬂd_Àn
;

242  
Àn
;

243 
	}
}

246 
REGISTER_NET_VIDEO_STREAM_SUDDEV
(
udp_video_°ªam_sub
) = {

247 .
«me
 = "udp",

248 .
	g›í
 = 
√t_π_vpkg_›í
,

249 .
	gwrôe
 = 
√t_π_£nd_‰ame
,

250 .
	g˛o£
 = 
√t_π_vpkg_˛o£
,

	@app/net/top-p2p/kcp_api.c

4 
	~"k˝_≠i.h
"

5 
	~"comm⁄/comm⁄.h
"

8 
	$ik˝_£m_dñ
(*
p£m
)

10  
	`os_£m_dñ
(
p£m
, 
OS_DEL_ALWAYS
);

11 
	}
}

13 
	$ik˝_£m_po°
(*
p£m
)

15 i‡(
	`os_£m_quîy
(
p£m
) == 0) {

16 
	`os_£m_po°
(
p£m
);

20 
	}
}

21 
	$ik˝_£m_≥nd
(*
p£m
, 
timeout
)

23 
ªt
;

24 
ªt
 = 
	`os_£m_≥nd
(
p£m
, 
timeout
 / 10);

25 i‡(
ªt
) {

28 i‡(
ªt
 !
OS_TIMEOUT
) {

29  
ªt
;

32 
	}
}

34 
	$ik˝_muãx_lock
(*
muãx
)

36  
	`os_muãx_≥nd
(
muãx
, 0);

38 
	}
}

39 
	$ik˝_muãx_u∆ock
(*
muãx
)

41 
	`os_muãx_po°
(
muãx
);

42 
	}
}

44 
	$ik˝_muãx_dñ
(*
muãx
)

46 
	`os_muãx_dñ
(
muãx
, 
OS_DEL_ALWAYS
);

47 
	}
}

51 
	$k˝_öô
(
k˝_°ru˘
 *
fh
)

54 
	#UDP_MAX_MTU
 1419

55 
	#UDP_MAX_MSS
 (
UDP_MAX_MTU
-
IKCP_HEAD_SIZE
)

	)

56 
	#UDP_MAX_AGGREGATION_PKT_SIZE
 (1*
UDP_MAX_MTU
)

	)

58 
ik˝cb
 *
k˝_hdl
 = 
NULL
;

59 
k˝_hdl
 = 
	`ik˝_¸óã
(
fh
->
k˝_c⁄v
, (*)fh);

60 i‡(
k˝_hdl
 =
NULL
) {

61 
exô
;

64 
k˝_hdl
->
ouçut
 = ((*)(c⁄° *, , 
IKCPCB
 *, *))
fh
->
k˝_ouçut
;

65 
	`ik˝_wndsize
(
k˝_hdl
, 666, 512);

66 
	`ik˝_nodñay
(
k˝_hdl
, 0, 2, 2, 0);

68 
	`ik˝_£tmtu
(
k˝_hdl
, 
UDP_MAX_MTU
, 
UDP_MAX_AGGREGATION_PKT_SIZE
);

70 
	`os_muãx_¸óã
(&
fh
->
pmuãx
);

71 
	`ik˝_£t_muãx_lock_func
(
k˝_hdl
, 
ik˝_muãx_lock
, 
ik˝_muãx_u∆ock
, 
ik˝_muãx_dñ
, &
fh
->
pmuãx
);

73 
	`os_£m_¸óã
(&
fh
->
p£nd£m
, 0);

74 
	`ik˝_£t_£nd_block
(
k˝_hdl
, 0, 
ik˝_£m_po°
, 
ik˝_£m_≥nd
, 
ik˝_£m_dñ
, 0, &
fh
->
p£nd£m
);

76 
	`os_£m_¸óã
(&
fh
->
¥ecv£m
, 0);

77 
	`ik˝_£t_ªcv_block
(
k˝_hdl
, 0, 
ik˝_£m_po°
, 
ik˝_£m_≥nd
, 
ik˝_£m_dñ
, 0, &
fh
->
¥ecv£m
);

81 
fh
->
k˝_hdl
 = kcp_hdl;

82 
fh
->
k˝_öput
 = 
ik˝_öput
;

83 
fh
->
k˝_upd©e
 = 
ik˝_upd©e
;

89 
exô
:

91 
	}
}

93 
	$k˝_£nd
(
k˝_°ru˘
 *
fh
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

96 
ªt
 = 0;

97 
ªt
 = 
	`ik˝_£nd
(
fh
->
k˝_hdl
, 
buf
, 
Àn
);

98 i‡(!
ªt
) {

99 
	`ik˝_upd©e
(
fh
->
k˝_hdl
, 
timî_gë_ms
);

101  
ªt
;

102 
	}
}

105 
	$k˝_ªcv
(
k˝_°ru˘
 *
fh
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

107 
ªt
 = 0;

108 
ªt
 = 
	`ik˝_ªcv
(
fh
->
k˝_hdl
, (c⁄° *)
buf
, 
Àn
);

109  
ªt
;

110 
	}
}

112 
	$k˝_unöô
(
k˝_°ru˘
 *
fh
)

114 
	`ik˝_ªÀa£
(
fh
->
k˝_hdl
);

116 
	}
}

118 c⁄° 
_k˝_›s
 
	gk˝_›s
 = {

119 .
köô
 = 
k˝_öô
,

120 .
	gkwrôe
 = 
k˝_£nd
,

121 .
	gkio˘l
 = 
NULL
,

122 .
	gkªad
 = 
k˝_ªcv
,

123 .
	gkunöô
 = 
k˝_unöô
,

	@app/net/top-p2p/kcp_api.h

1 #i‚de‡
_KCP_API_H


2 
	#_KCP_API_H


	)

5 
	~"k˝/ik˝.h
"

6 
	~"gíîic/ty≥def.h
"

7 
	~"os/os_≠i.h
"

9 
	sk˝_°ru˘
 {

10 
ik˝cb
 *
	mk˝_hdl
;

12 
OS_MUTEX
 
	mpmuãx
;

13 
OS_SEM
 
	mp£nd£m
;

14 
OS_SEM
 
	m¥ecv£m
;

17 
	mk˝_c⁄v
;

18 (*
	mk˝_ouçut
)(c⁄° *, , 
	mIKCPCB
 *, *);

19 (*
	mk˝_öput
)(
	mik˝cb
 *, const *, );

20 (*
	mk˝_upd©e
)(
ik˝cb
 *
	mk˝
, (*
	mi˛ock
)());

21 *
	m¥iv©e_d©a
;

26 
	s_k˝_›s
 {

28 (*
	mköô
)(
	mk˝_°ru˘
 *);

29 (*
	mkwrôe
)(
	mk˝_°ru˘
 *, 
	mu8
 *, 
	mu32
, u32);

30 (*
	mkio˘l
)(
	mk˝_°ru˘
 *, 
	mu32
, u32);

31 (*
	mkªad
)(
	mk˝_°ru˘
 *, 
	mu8
 *, 
	mu32
, u32);

32 (*
	mkunöô
)(
	mk˝_°ru˘
 *);

39 c⁄° 
_k˝_›s
 
k˝_›s
;

	@app/net/top-p2p/p2p_dev.c

1 
	~<°dlib.h
>

2 
	~"devi˚/devi˚.h
"

3 
	~"fs/fs.h
"

4 
	~"jiffõs.h
"

5 
	~"sock_≠i/sock_≠i.h
"

6 
	~"os/os_com∑t.h
"

7 
	~"sy°em/evít.h
"

8 
	~"sy°em/timî.h
"

9 
	~"comm⁄/comm⁄.h
"

11 
	~"és_≠i.h
"

12 
	~"k˝_≠i.h
"

13 
	~"p2p_dev.h
"

18 
	sp2p_dev_c⁄åﬁ
 {

19 
OS_MUTEX
 
	mmuãx
;

20 
li°_hód
 
	mdev_li°
;

23 
	#P2P_INITING
 0x1

	)

24 
	#P2P_HANDSHARKE
 0x2

	)

26 
	sp2p_fh
 {

27 
li°_hód
 
	míåy
;

28 
u32
 
	mªf
;

31 
és_°ru˘
 
	més
;

32 
_és_›s
 *
	més_›s
;

35 
k˝_°ru˘
 
	mk˝
;

36 
_k˝_›s
 *
	mk˝_›s
;

38 
u32
 
	mch™√l
;

39 
u32
 
	m¥io
;

40 
u8
 
	mty≥
;

42 
sockaddr_ö
 
	mªmŸe_addr
;

44 
u32
 
	m°©us
;

45 
OS_MUTEX
 
	mmuãx
;

47 
devi˚
 
	mdevi˚
;

48 *
	m¥iv©e_d©a
;

51 
p2p_dev_c⁄åﬁ
 
	gp2p_dev
;

53 
	#__this
 (&
p2p_dev
)

	)

55 
	#li°_f‹_óch_p2p
(
fh
) \

56 
	`li°_f‹_óch_íåy
(
fh
, &
__this
->
dev_li°
, 
íåy
)

	)

58 
	#li°_add_p2p
(
fh
) \

59 
	`li°_add
(&
fh
->
íåy
, &
__this
->
dev_li°
)

	)

61 
	#li°_dñ_p2p
(
fh
) \

62 
	`li°_dñ
(&
fh
->
íåy
);

	)

66 
	$és_ouçut
(c⁄° *
buf
, 
Àn
, 
IKCPCB
 *
pcb
, *
u£r
)

68 
ªt
 = 0;

69 
k˝_°ru˘
 *
k˝
 = (k˝_°ru˘ *)
u£r
;

70 
p2p_fh
 *
fh
 = (p2p_fh *)
k˝
->
¥iv©e_d©a
;

71 
ªt
 = 
fh
->
és_›s
->
	`dwrôe
(&fh->
és
, 
buf
, 
Àn
, 0);

73 i‡(
ªt
 < 0) {

74 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_wrôêªtu∫ed %d\n\n", 
ªt
);

79 
	}
}

82 
	$k˝_loˇl_thªad_upd©e
(*
¥iv
)

84 
k˝_°ru˘
 *
k˝
 = (k˝_°ru˘ *)
¥iv
;

85 
p2p_fh
 *
fh
 = (p2p_fh *)
k˝
->
¥iv©e_d©a
;

88 
	`m¶ìp
(20);

89 
k˝
->
	`k˝_upd©e
(k˝->
k˝_hdl
, 
timî_gë_ms
);

92 
	}
}

94 
	$k˝_loˇl_thªad
(*
¥iv
)

96 
	#KCP_MAX_BUFFER_SIZE
 (44 * 1472)

	)

97 
k˝_°ru˘
 *
k˝
 = (k˝_°ru˘ *)
¥iv
;

98 
p2p_fh
 *
fh
 = (p2p_fh *)
k˝
->
¥iv©e_d©a
;

99 
ªt
;

100 
buf
[
KCP_MAX_BUFFER_SIZE
];

103 i‡(
fh
->
°©us
 & 
P2P_HANDSHARKE
 || fh->
ty≥
 & 
RAW_DATA
) {

104 
ªt
 = 
fh
->
és_›s
->
	`dªad
(&fh->
és
, 
buf
, 
KCP_MAX_BUFFER_SIZE
, 0);

105 i‡(
ªt
 <= 0) {

106 
	`¥ötf
(" DDD_READ RET ERR = %d \r\n", 
ªt
);

109 
k˝
->
	`k˝_öput
(k˝->
k˝_hdl
, 
buf
, 
ªt
);

111 
	`m¶ìp
(100);

115 
	}
}

121 
	$p2p_dev_öô
(c⁄° 
dev_node
 *
node
, *
_d©a
)

123 
	`os_muãx_¸óã
(&
__this
->
muãx
);

124 
	`INIT_LIST_HEAD
(&
__this
->
dev_li°
);

126 
	}
}

129 
	$p2p_dev_›í
(c⁄° 
dev_node
 *
node
, 
devi˚
 **devi˚, *
¨g
)

131 
ªt
;

132 
p2p_fh
 *
fh
 = 
NULL
;

133 
p2p_f‹m©
 *
p
 = (p2p_f‹m© *)
¨g
;

134 
	`log_i
("p2p_dev_open\n");

135 
	`os_muãx_≥nd
(&
__this
->
muãx
, 0);

136 
	`li°_f‹_óch_p2p
(
fh
) {

137 i‡(
fh
->
ªmŸe_addr
.
sö_p‹t
 =
p
->remote_addr.sin_port) {

138 
fh
->
ªf
++;

139 *
devi˚
 = &
fh
->device;

140 (*
devi˚
)->
¥iv©e_d©a
 = 
fh
;

141 
	`os_muãx_po°
(&
__this
->
muãx
);

146 
fh
 = (
p2p_fh
 *)
	`zÆloc
((*fh));

147 i‡(!
fh
) {

148 
	`os_muãx_po°
(&
__this
->
muãx
);

149  -
ENOMEM
;

152 
fh
->
ch™√l
 = 
p
->channel;

153 
fh
->
¥io
 = 
p
->prio;

154 
fh
->
ty≥
 = 
p
->type;

155 
	`mem˝y
(&
fh
->
ªmŸe_addr
, &
p
->ªmŸe_addr, (
sockaddr
));

160 i‡(
p
->
ty≥
 & 
DATA_WITH_TLS1_2
) {

161 
	`log_i
("useÅls1.2 \n");

164 i‡(
p
->
¡y≥
 & 
TLS_IS_CLIENT
) {

165 
fh
->
és_›s
 = &
és_˛i_›s
;

166 
	`öë_¡ﬂ_r
(
p
->
ªmŸe_addr
.
sö_addr
.
s_addr
, 
fh
->
és
.
public_ù
, (fh->tls.public_ip));

167 
	`ôﬂ
(
	`¡ohs
(
p
->
ªmŸe_addr
.
sö_p‹t
), 
fh
->
és
.
public_p‹t
, 10);

168 
ªt
 = 
fh
->
és_›s
->
	`döô
(&fh->
és
);

169 i‡(
ªt
) {

170 
	`log_e
("Åls init fail\n");

171 
	`‰ì
(
fh
);

172  -
EINVAL
;

174 } i‡(
p
->
¡y≥
 & 
TLS_IS_SERVER
) {

177 
fh
->
és_›s
 = &
és_£r_›s
;

179 
	`öë_¡ﬂ_r
(
p
->
loˇl_addr
.
sö_addr
.
s_addr
, 
fh
->
és
.
public_ù
, (fh->tls.public_ip));

180 
	`ôﬂ
(
	`¡ohs
(
p
->
loˇl_addr
.
sö_p‹t
), 
fh
->
és
.
public_p‹t
, 10);

181 
ªt
 = 
fh
->
és_›s
->
	`döô
(&fh->
és
);

182 i‡(
ªt
) {

183 
	`log_e
("Åls init fail\n");

184 
	`‰ì
(
fh
);

185  -
EINVAL
;

189 
	`log_e
("no setÇetÅype \n");

190 
	`‰ì
(
fh
);

193 } i‡(
p
->
ty≥
 & 
RAW_DATA
) {

194 
fh
->
és_›s
 = &
és_øw_›s
;

196 i‡(
p
->
¡y≥
 & 
TLS_IS_CLIENT
) {

197 
	`öë_¡ﬂ_r
(
p
->
ªmŸe_addr
.
sö_addr
.
s_addr
, 
fh
->
és
.
public_ù
, (fh->tls.public_ip));

198 
	`ôﬂ
(
	`¡ohs
(
p
->
ªmŸe_addr
.
sö_p‹t
), 
fh
->
és
.
public_p‹t
, 10);

199 } i‡(
p
->
¡y≥
 & 
TLS_IS_SERVER
) {

200 
	`öë_¡ﬂ_r
(
p
->
loˇl_addr
.
sö_addr
.
s_addr
, 
fh
->
és
.
public_ù
, (fh->tls.public_ip));

201 
	`ôﬂ
(
	`¡ohs
(
p
->
loˇl_addr
.
sö_p‹t
), 
fh
->
és
.
public_p‹t
, 10);

203 
ªt
 = 
fh
->
és_›s
->
	`döô
(&fh->
és
);

204 i‡(
ªt
) {

205 
	`log_e
("Åls init fail\n");

206 
	`‰ì
(
fh
);

207  -
EINVAL
;

212 i‡(
p
->
ty≥
 & 
DATA_WITH_KCP
) {

213 
	`log_i
("use kcp \n");

214 
fh
->
k˝_›s
 = &kcp_ops;

215 
fh
->
k˝
.
k˝_c⁄v
 = 1;

216 
fh
->
k˝
.
k˝_ouçut
 = 
és_ouçut
;

217 
fh
->
k˝
.
¥iv©e_d©a
 = fh;

218 
ªt
 = 
fh
->
k˝_›s
->
	`köô
(&fh->
k˝
);

219 i‡(
ªt
) {

220 
	`log_e
("kcp init fail\n");

221 
	`‰ì
(
fh
);

222  -
EINVAL
;

226 
	`thªad_f‹k
("k˝_ªcv_thªad_ddd", 6, 0x8000, 0, 0, 
k˝_loˇl_thªad
, (*)&
fh
->
k˝
);

227 
	`thªad_f‹k
("k˝_loˇl_thªad_upd©e", 5, 0x4000, 0, 0, 
k˝_loˇl_thªad_upd©e
, (*)&
fh
->
k˝
);

232 *
devi˚
 = &
fh
->device;

233 (*
devi˚
)->
¥iv©e_d©a
 = 
fh
;

234 
fh
->
ªf
 = 1;

236 
	`os_muãx_po°
(&
__this
->
muãx
);

237 
fh
->
°©us
 = 
P2P_INITING
;

240 
	}
}

243 
	$p2p_dev_io˘l
(
devi˚
 *devi˚, 
u32
 
cmd
, u32 
¨g
)

245 
ªt
 = 0;

246 
p2p_fh
 *
fh
 = (p2p_fh *)
devi˚
->
¥iv©e_d©a
;

248 
cmd
) {

249 
P2PIOC_HANDSHARK
:

250 
	`log_i
("P2PIOC_HANDSHARK\n");

251 i‡(
fh
->
és_›s
->
h™dshake
) {

252 
ªt
 = 
fh
->
és_›s
->
	`h™dshake
(&fh->
és
);

253 i‡(!
ªt
) {

254 
fh
->
°©us
 = 
P2P_HANDSHARKE
;

258 
P2PIOC_SERVER_ACCEPT
:

259 
ªt
 = 
fh
->
és_›s
->
	`dio˘l
(&fh->
és
, 
TLS_SERVER_ACCEPT
, 0);

265  
ªt
;

266 
	}
}

269 
	$p2p_dev_ªad
(
devi˚
 *devi˚, *
buf
, 
u32
 
Àn
, u32 
Êag
)

271 
ªt
 = 0;

272 
p2p_fh
 *
fh
 = (p2p_fh *)
devi˚
->
¥iv©e_d©a
;

273 i‡(
fh
->
ty≥
 & 
DATA_WITH_KCP
) {

274 
ªt
 = 
fh
->
k˝_›s
->
	`kªad
(&fh->
k˝
, 
buf
, 
Àn
, 
Êag
);

276 
ªt
 = 
fh
->
és_›s
->
	`dªad
(&fh->
és
, 
buf
, 
Àn
, 
Êag
);

279  
ªt
;

282 
	}
}

284 
	$p2p_dev_wrôe
(
devi˚
 *devi˚, *
buf
, 
u32
 
Àn
, u32 
Êag
)

286 
ªt
 = 0;

287 
p2p_fh
 *
fh
 = (p2p_fh *)
devi˚
->
¥iv©e_d©a
;

288 i‡(
fh
->
ty≥
 & 
DATA_WITH_KCP
) {

289 
ªt
 = 
fh
->
k˝_›s
->
	`kwrôe
(&fh->
k˝
, 
buf
, 
Àn
, 
Êag
);

291 
ªt
 = 
fh
->
és_›s
->
	`dwrôe
(&fh->
és
, 
buf
, 
Àn
, 
Êag
);

293  
ªt
;

294 
	}
}

296 
	$p2p_dev_˛o£
(
devi˚
 *device)

298 
p2p_fh
 *
fh
 = (p2p_fh *)
devi˚
->
¥iv©e_d©a
;

299 i‡(--
fh
->
ªf
 == 0) {

300 
	`log_i
("ipc dev close sock fd \n");

301 
fh
->
és_›s
->
	`dunöô
(&fh->
és
);

302 i‡(
fh
->
ty≥
 & 
DATA_WITH_KCP
) {

303 
fh
->
k˝_›s
->
	`kunöô
(&fh->
k˝
);

305 
	`li°_dñ_p2p
(
fh
);

306 
	`‰ì
(
fh
);

309 
	}
}

314 c⁄° 
devi˚_›î©i⁄s
 
	gp2p_dev_›s
 = {

315 .
öô
 = 
p2p_dev_öô
,

316 .
	g›í
 = 
p2p_dev_›í
,

317 .
	gio˘l
 = 
p2p_dev_io˘l
,

318 .
	g˛o£
 = 
p2p_dev_˛o£
,

319 .
	gªad
 = 
p2p_dev_ªad
,

320 .
	gwrôe
 = 
p2p_dev_wrôe
,

	@app/net/top-p2p/test.c

1 
	~"sock_≠i/sock_≠i.h
"

2 
	~"os/os_com∑t.h
"

3 
	~"comm⁄/comm⁄.h
"

5 
	~"és_≠i.h
"

6 
	~"k˝_≠i.h
"

7 
	~"p2p_dev.h
"

16 
	$és_k˝_˛i
()

18 
fh
->
és_›s
 = &
és_˛i_›s
;

19 
	`öë_¡ﬂ_r
(
p
->
ªmŸe_addr
.
sö_addr
.
s_addr
, 
fh
->
és
.
public_ù
, (fh->tls.public_ip));

20 
	`ôﬂ
(
	`¡ohs
(
p
->
ªmŸe_addr
.
sö_p‹t
), 
fh
->
és
.
public_p‹t
, 10);

23 
ªt
 = 
fh
->
és_›s
->
	`döô
(&fh->
és
);

24 i‡(
ªt
) {

25 
	`log_e
("Åls init fail\n");

26 
	`‰ì
(
fh
);

27  -
EINVAL
;

29 
	}
}

	@app/net/top-p2p/tls_api.h

1 #i‚de‡
__TLS_API_H


2 
	#__TLS_API_H


	)

6 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

7 
	~"mbedés/mbedés_c⁄fig.h
"

8 
	~"lwù.h
"

9 
	~"os/os_≠i.h
"

11 #ö˛udê
MBEDTLS_CONFIG_FILE


14 #i‡
deföed
(
MBEDTLS_PLATFORM_C
)

15 
	~"mbedés/∂©f‹m.h
"

17 
	#mbedés_¥ötf
 
¥ötf


	)

18 
	#mbedés_Ârötf
 
Ârötf


	)

19 
	#mbedés_time_t
 
time_t


	)

23 
	~"mbedés/√t.h
"

24 
	~"mbedés/debug.h
"

25 
	~"mbedés/s¶.h
"

26 
	~"mbedés/íå›y.h
"

27 
	~"mbedés/˘r_drbg.h
"

28 
	~"mbedés/îr‹.h
"

29 
	~"mbedés/˚πs.h
"

30 
	~"mbedés/timög.h
"

32 
	~"mbedés/x509.h
"

33 
	~"mbedés/s¶_cookõ.h
"

35 #i‡
deföed
(
MBEDTLS_SSL_CACHE_C
)

36 
	~"mbedés/s¶_ˇche.h
"

38 #i‡
deföed
(
MBEDTLS_SSL_TICKET_C
)

39 
	~"mbedés/s¶_tickë.h
"

42 
	~"os/os_≠i.h
"

44 
	#TLS_SET_CA
 0x1

	)

45 
	#TLS_SERVER_ACCEPT
 0x2

	)

48 
	sés_°ru˘
 {

50 
mbedés_√t_c⁄ãxt
 
	mdés_fd
;

51 
mbedés_s¶_c⁄ãxt
 
	ms¶
;

52 
mbedés_íå›y_c⁄ãxt
 
	míå›y
;

53 
mbedés_˘r_drbg_c⁄ãxt
 
	m˘r_drbg
;

54 
mbedés_s¶_c⁄fig
 
	mc⁄f
;

55 
mbedés_x509_¸t
 
	mˇ˚π
;

56 
mbedés_timög_dñay_c⁄ãxt
 
	mtimî
;

57 
	mpublic_ù
[15];

58 
	mpublic_p‹t
[6];

61 
mbedés_√t_c⁄ãxt
 
	m˛õ¡_fd
;

62 
mbedés_√t_c⁄ãxt
 
	mli°í_fd
;

63 
mbedés_s¶_cookõ_˘x
 
	mcookõ_˘x
;

65 
mbedés_x509_¸t
 
	m§v˚π
;

66 
mbedés_pk_c⁄ãxt
 
	mpkey
;

67 #i‡
deföed
(
MBEDTLS_SSL_CACHE_C
)

68 
mbedés_s¶_ˇche_c⁄ãxt
 
	mˇche
;

70 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
)

71 
mbedés_s¶_tickë_c⁄ãxt
 
	mtickë_˘x
;

74 
OS_MUTEX
 
	mmuãx
;

76 *
	mfd
;

84 
	s_és_›s
 {

86 (*
	mdöô
)(
	més_°ru˘
 *);

87 (*
	mh™dshake
)(
	més_°ru˘
 *);

88 (*
	mdwrôe
)(
	més_°ru˘
 *, 
	mu8
 *, 
	mu32
, u32);

89 (*
	mdªad
)(
	més_°ru˘
 *, 
	mu8
 *, 
	mu32
, u32);

90 (*
	mdio˘l
)(
	més_°ru˘
 *, 
	mu32
, u32);

91 (*
	mdunöô
)(
	més_°ru˘
 *);

96 c⁄° 
_és_›s
 
és_˛i_›s
;

97 c⁄° 
_és_›s
 
és_£r_›s
;

98 c⁄° 
_és_›s
 
és_øw_›s
;

	@app/net/top-p2p/tls_cli_api.c

3 
	~"és_≠i.h
"

4 
	#DEBUG_LEVEL
 1

	)

6 
	$my_debug
(*
˘x
, 
Àvñ
,

7 c⁄° *
fûe
, 
löe
,

8 c⁄° *
°r
)

10 ((Ë
Àvñ
);

12 
	}
}

18 
	$dés_˛õ¡_öô
(
és_°ru˘
 *
és
)

20 
	`log_d
("dtls_client_init\n");

21 
ªt
, 
Àn
;

22 c⁄° *
≥rs
 = "dtls_cli2223";

24 #i‡
	`deföed
(
MBEDTLS_DEBUG_C
)

25 
	`mbedés_debug_£t_thªshﬁd
(
DEBUG_LEVEL
);

31 
	`mbedés_√t_öô
(&
és
->
dés_fd
);

32 
	`os_muãx_¸óã
(&
és
->
dés_fd
.
muãx
);

33 
	`mbedés_s¶_öô
(&
és
->
s¶
);

34 
	`mbedés_s¶_c⁄fig_öô
(&
és
->
c⁄f
);

35 
	`mbedés_x509_¸t_öô
(&
és
->
ˇ˚π
);

36 
	`mbedés_˘r_drbg_öô
(&
és
->
˘r_drbg
);

38 
	`mbedés_¥ötf
("\n . SeedingÅheÑandomÇumber generator...");

40 
	`mbedés_íå›y_öô
(&
és
->
íå›y
);

41 i‡((
ªt
 = 
	`mbedés_˘r_drbg_£ed
(&
és
->
˘r_drbg
, 
mbedés_íå›y_func
, &és->
íå›y
,

42 (c⁄° *Ë
≥rs
,

43 
	`°æí
(
≥rs
))) != 0) {

44 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_˘r_drbg_£edÑëu∫ed %d\n", 
ªt
);

45 
exô
;

48 
	`mbedés_¥ötf
(" ok\n");

53 
	`mbedés_¥ötf
(" . LoadingÅhe CAÑoot certificate ...");

55 
ªt
 = 
	`mbedés_x509_¸t_∑r£
(&
és
->
ˇ˚π
, (c⁄° *Ë
mbedés_ã°_ˇs_≥m
,

56 
mbedés_ã°_ˇs_≥m_Àn
);

57 i‡(
ªt
 < 0) {

58 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_x509_¸t_∑r£Ñëu∫ed -0x%x\n\n", -
ªt
);

59 
exô
;

62 
	`mbedés_¥ötf
(" ok (%d skù≥d)\n", 
ªt
);

64 i‡((
ªt
 = 
	`mbedés_√t_c⁄√˘_böd
(&
és
->
dés_fd
, 
AF_INET
, 
SOCK_DGRAM
, 0, 0, 0)) != 0) {

65 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_√t_c⁄√˘_bödÑëu∫ed %d\n\n", 
ªt
);

66 
exô
;

73 
	`mbedés_¥ötf
(" . C⁄√˘ögÅÿud∞ù %†p‹à%s...", 
és
->
public_ù
,Åls->
public_p‹t
);

75 i‡((
ªt
 = 
	`mbedés_√t_c⁄√˘
(&
és
->
dés_fd
,Åls->
public_ù
,

76 
és
->
public_p‹t
, 
MBEDTLS_NET_PROTO_UDP
)) != 0) {

77 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_√t_c⁄√˘Ñëu∫ed %d\n\n", 
ªt
);

78 
exô
;

81 
	`mbedés_¥ötf
(" ok\n");

86 
	`mbedés_¥ötf
(" . Setting upÅhe DTLS structure...");

88 i‡((
ªt
 = 
	`mbedés_s¶_c⁄fig_deÁu…s
(&
és
->
c⁄f
,

89 
MBEDTLS_SSL_IS_CLIENT
,

90 
MBEDTLS_SSL_TRANSPORT_DATAGRAM
,

91 
MBEDTLS_SSL_PRESET_DEFAULT
)) != 0) {

92 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_c⁄fig_deÁu…†ªtu∫ed %d\n\n", 
ªt
);

93 
exô
;

99 
	`mbedés_s¶_c⁄f_authmode
(&
és
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_OPTIONAL
);

100 
	`mbedés_s¶_c⁄f_ˇ_chaö
(&
és
->
c⁄f
, &és->
ˇ˚π
, 
NULL
);

101 
	`mbedés_s¶_c⁄f_∫g
(&
és
->
c⁄f
, 
mbedés_˘r_drbg_øndom
, &és->
˘r_drbg
);

102 
	`mbedés_s¶_c⁄f_dbg
(&
és
->
c⁄f
, 
my_debug
, 0);

104 i‡((
ªt
 = 
	`mbedés_s¶_£tup
(&
és
->
s¶
, &és->
c⁄f
)) != 0) {

105 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_£tu∞ªtu∫ed %d\n\n", 
ªt
);

106 
exô
;

109 i‡((
ªt
 = 
	`mbedés_s¶_£t_ho°«me
(&
és
->
s¶
, "localhost")) != 0) {

110 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_£t_ho°«mêªtu∫ed %d\n\n", 
ªt
);

111 
exô
;

114 
	`mbedés_s¶_£t_bio
(&
és
->
s¶
, &és->
dés_fd
,

115 
mbedés_√t_£nd
, 
mbedés_√t_ªcv
, 
mbedés_√t_ªcv_timeout
);

117 
	`mbedés_s¶_£t_timî_cb
(&
és
->
s¶
, &és->
timî
, 
mbedés_timög_£t_dñay
,

118 
mbedés_timög_gë_dñay
);

120 
	`mbedés_¥ötf
(" ok\n");

123 
exô
:

125 #ifde‡
MBEDTLS_ERROR_C


126 i‡(
ªt
 != 0) {

127 
îr‹_buf
[100];

128 
	`mbedés_°ªº‹
(
ªt
, 
îr‹_buf
, 100);

129 
	`mbedés_¥ötf
("La°Éº‹ was: %d - %s\n\n", 
ªt
, 
îr‹_buf
);

133 
	`mbedés_√t_‰ì
(&
és
->
dés_fd
);

135 
	`mbedés_x509_¸t_‰ì
(&
és
->
ˇ˚π
);

136 
	`mbedés_s¶_‰ì
(&
és
->
s¶
);

137 
	`mbedés_s¶_c⁄fig_‰ì
(&
és
->
c⁄f
);

138 
	`mbedés_˘r_drbg_‰ì
(&
és
->
˘r_drbg
);

139 
	`mbedés_íå›y_‰ì
(&
és
->
íå›y
);

143 i‡(
ªt
 < 0) {

144 
ªt
 = 1;

148 
	}
}

151 
	$dés_h™dshake
(
és_°ru˘
 *
és
)

153 
ªt
 = 0;

154 
Êags
 = 0;

155 
vrfy_buf
[512];

159 
	`mbedés_¥ötf
(" . PerformingÅhe SSL/TLS handshake...");

162 
ªt
 = 
	`mbedés_s¶_h™dshake
(&
és
->
s¶
);

163 } 
ªt
 =
MBEDTLS_ERR_SSL_WANT_READ
 ||

164 
ªt
 =
MBEDTLS_ERR_SSL_WANT_WRITE
);

166 i‡(
ªt
 != 0) {

167 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_h™dshakêªtu∫ed -0x%x\n\n", -
ªt
);

171 
	`mbedés_¥ötf
(" ok\n");

176 
	`mbedés_¥ötf
(" . VerifyingÖeer X.509 certificate...");

181 i‡((
Êags
 = 
	`mbedés_s¶_gë_vîify_ªsu…
(&
és
->
s¶
)) != 0) {

183 
	`mbedés_¥ötf
(" failed\n");

185 
	`mbedés_x509_¸t_vîify_öfo
(
vrfy_buf
, (vrfy_buf), " ! ", 
Êags
);

187 
	`mbedés_¥ötf
("%s\n", 
vrfy_buf
);

189 
	`mbedés_¥ötf
(" ok\n");

191 
és
->
dés_fd
.
h™dshake_ok
 = 1;

193 
	}
}

195 
	$dés_wrôe
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

197 
ªt
 = 0;

199 
	`os_muãx_≥nd
(&
és
->
dés_fd
.
muãx
, 0);

202 
ªt
 = 
	`mbedés_s¶_wrôe
(&
és
->
s¶
, (*Ë
buf
, 
Àn
);

206 i‡(
ªt
 < 0) {

207 
	`mbedés_¥ötf
(" mbedés_s¶_wrôêªtu∫ed %d\n", 
ªt
);

208 
	`os_muãx_po°
(&
és
->
dés_fd
.
muãx
);

211 
	`os_muãx_po°
(&
és
->
dés_fd
.
muãx
);

215 
	}
}

219 
	$dés_ªad
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

221 
ªt
 = 0;

223 
	`os_muãx_≥nd
(&
és
->
dés_fd
.
muãx
, 0);

226 
ªt
 = 
	`mbedés_s¶_ªad
(&
és
->
s¶
, (*Ë
buf
, 
Àn
);

230 i‡(
ªt
 < 0) {

231 
	`mbedés_¥ötf
("mbedés_s¶_ªadÑëu∫ed %d\n", 
ªt
);

232 
	`os_muãx_po°
(&
és
->
dés_fd
.
muãx
);

235 
	`os_muãx_po°
(&
és
->
dés_fd
.
muãx
);

237  
ªt
;

238 
	}
}

241 
	$dés_io˘l
(
és_°ru˘
 *
és
, 
u32
 
cmd
, u32 
¨g
)

243 
ªt
 = 0;

244 
cmd
) {

245 
TLS_SET_CA
:

251  
ªt
;

252 
	}
}

255 
	$dés_˛o£
(
és_°ru˘
 *
és
)

257 
	`mbedés_√t_‰ì
(&
és
->
dés_fd
);

258 
	`mbedés_x509_¸t_‰ì
(&
és
->
ˇ˚π
);

259 
	`mbedés_s¶_‰ì
(&
és
->
s¶
);

260 
	`mbedés_s¶_c⁄fig_‰ì
(&
és
->
c⁄f
);

261 
	`mbedés_˘r_drbg_‰ì
(&
és
->
˘r_drbg
);

262 
	`mbedés_íå›y_‰ì
(&
és
->
íå›y
);

264 
	}
}

267 c⁄° 
_és_›s
 
	gés_˛i_›s
 = {

268 .
döô
 = 
dés_˛õ¡_öô
,

269 .
	gh™dshake
 = 
dés_h™dshake
,

270 .
	gdwrôe
 = 
dés_wrôe
,

271 .
	gdªad
 = 
dés_ªad
,

272 .
	gdio˘l
 = 
NULL
,

273 .
	gdunöô
 = 
dés_˛o£
,

	@app/net/top-p2p/tls_raw_api.c

3 
	~"és_≠i.h
"

7 
©oi
(c⁄° *
__≈å
);

9 
	$dés_˛õ¡_öô
(
és_°ru˘
 *
és
)

11 
	`log_d
("dtls_raw_init\n");

12 
sockaddr_ö
 
addr
;

13 
ªt
 = 0;

14 
és
->
fd
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_DGRAM
, 0, 
NULL
, NULL);

15 i‡(
és
->
fd
 =
NULL
) {

16 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__func__
, 
__LINE__
);

20 
addr
.
sö_Ámûy
 = 
AF_INET
;

21 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

22 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`©oi
(
és
->
public_p‹t
));

24 
ªt
 = 
	`sock_böd
(
és
->
fd
, (
sockaddr
 *)&
addr
, (addr));

25 i‡(
ªt
 < 0) {

29 
u32
 
mûl£c
 = 100;

31 
	`sock_£tsock›t
(
és
->
fd
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, (c⁄° *)&
mûl£c
, (millsec));

34 
	}
}

36 
	$dés_wrôe
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

38 
ªt
 = 0;

39 
sockaddr_ö
 
addr
;

42 
addr
.
sö_Ámûy
 = 
AF_INET
;

43 
addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
(
és
->
public_ù
);

44 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
	`©oi
(
és
->
public_p‹t
));

45 
ªt
 = 
	`sock_£ndto
(
és
->
fd
, 
buf
, 
Àn
, 
Êag
, (
sockaddr
 *)&
addr
, (addr));

46 i‡(
ªt
 <= 0) {

51 
	}
}

54 
	$dés_ªad
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

56 
ªt
 = 0;

58 
ªt
 = 
	`sock_ªcv
(
és
->
fd
, 
buf
, 
Àn
, 
Êag
);

59  
ªt
;

60 
	}
}

63 
	$dés_io˘l
(
és_°ru˘
 *
és
, 
u32
 
cmd
, u32 
¨g
)

65 
ªt
 = 0;

66 
cmd
) {

67 
TLS_SET_CA
:

73  
ªt
;

74 
	}
}

77 
	$dés_˛o£
(
és_°ru˘
 *
és
)

80 
	`sock_uƒeg
(
és
->
fd
);

82 
	}
}

85 c⁄° 
_és_›s
 
	gés_øw_›s
 = {

86 .
döô
 = 
dés_˛õ¡_öô
,

87 .
	gh™dshake
 = 
NULL
,

88 .
	gdwrôe
 = 
dés_wrôe
,

89 .
	gdªad
 = 
dés_ªad
,

90 .
	gdio˘l
 = 
NULL
,

91 .
	gdunöô
 = 
dés_˛o£
,

	@app/net/top-p2p/tls_ser_api.c

3 
	~"és_≠i.h
"

4 
	#DEBUG_LEVEL
 0

	)

6 
	$my_debug
(*
˘x
, 
Àvñ
,

7 c⁄° *
fûe
, 
löe
,

8 c⁄° *
°r
)

10 ((Ë
Àvñ
);

12 
	}
}

18 
	$dés_£rvî_öô
(
és_°ru˘
 *
és
)

20 
	`¥ötf
("dtls_server_init\n");

21 c⁄° *
≥rs
 = "dtls_server";

22 
ªt
 = 0;

23 
	`mbedés_√t_öô
(&
és
->
li°í_fd
);

24 
	`mbedés_√t_öô
(&
és
->
˛õ¡_fd
);

25 
	`os_muãx_¸óã
(&
és
->
˛õ¡_fd
.
muãx
);

26 
	`mbedés_s¶_öô
(&
és
->
s¶
);

27 
	`mbedés_s¶_c⁄fig_öô
(&
és
->
c⁄f
);

28 
	`mbedés_s¶_cookõ_öô
(&
és
->
cookõ_˘x
);

29 #i‡
	`deföed
(
MBEDTLS_SSL_CACHE_C
)

30 
	`mbedés_s¶_ˇche_öô
(&
és
->
ˇche
);

32 
	`mbedés_x509_¸t_öô
(&
és
->
§v˚π
);

33 
	`mbedés_pk_öô
(&
és
->
pkey
);

34 
	`mbedés_íå›y_öô
(&
és
->
íå›y
);

35 
	`mbedés_˘r_drbg_öô
(&
és
->
˘r_drbg
);

36 #i‡
	`deföed
(
MBEDTLS_SSL_SESSION_TICKETS
)

37 
	`mbedés_s¶_tickë_öô
(&
és
->
tickë_˘x
);

40 #i‡
	`deföed
(
MBEDTLS_DEBUG_C
)

41 
	`mbedés_debug_£t_thªshﬁd
(
DEBUG_LEVEL
);

47 
	`¥ötf
("\n . LoadingÅhe server cert.ánd key...");

54 
ªt
 = 
	`mbedés_x509_¸t_∑r£
(&
és
->
§v˚π
, (c⁄° *Ë
mbedés_ã°_§v_¸t
,

55 
mbedés_ã°_§v_¸t_Àn
);

56 i‡(
ªt
 != 0) {

57 
	`¥ötf
(" faûed\¿ ! mbedés_x509_¸t_∑r£Ñëu∫ed %d\n\n", 
ªt
);

58 
exô
;

61 
ªt
 = 
	`mbedés_x509_¸t_∑r£
(&
és
->
§v˚π
, (c⁄° *Ë
mbedés_ã°_ˇs_≥m
,

62 
mbedés_ã°_ˇs_≥m_Àn
);

63 i‡(
ªt
 != 0) {

64 
	`¥ötf
(" faûed\¿ ! mbedés_x509_¸t_∑r£Ñëu∫ed %d\n\n", 
ªt
);

65 
exô
;

68 
ªt
 = 
	`mbedés_pk_∑r£_key
(&
és
->
pkey
, (c⁄° *Ë
mbedés_ã°_§v_key
,

69 
mbedés_ã°_§v_key_Àn
, 
NULL
, 0);

70 i‡(
ªt
 != 0) {

71 
	`¥ötf
(" faûed\¿ ! mbedés_pk_∑r£_keyÑëu∫ed %d\n\n", 
ªt
);

72 
exô
;

75 
	`¥ötf
(" ok\n");

80 
	`¥ötf
(" . Bind on udp/*/4433 ...");

81 
	`mbedés_s¶_c⁄f_authmode
(&
és
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_OPTIONAL
);

82 i‡((
ªt
 = 
	`mbedés_√t_böd
(&
és
->
li°í_fd
, 
NULL
,Åls->
public_p‹t
, 
MBEDTLS_NET_PROTO_UDP
)) != 0) {

83 
	`¥ötf
(" faûed\¿ ! mbedés_√t_bödÑëu∫ed %d\n\n", 
ªt
);

84 
exô
;

87 
	`¥ötf
(" ok\n");

92 
	`¥ötf
(" . SeedingÅheÑandomÇumber generator...");

94 i‡((
ªt
 = 
	`mbedés_˘r_drbg_£ed
(&
és
->
˘r_drbg
, 
mbedés_íå›y_func
, &és->
íå›y
,

95 (c⁄° *Ë
≥rs
,

96 
	`°æí
(
≥rs
))) != 0) {

97 
	`¥ötf
(" faûed\¿ ! mbedés_˘r_drbg_£edÑëu∫ed %d\n", 
ªt
);

98 
exô
;

101 
	`¥ötf
(" ok\n");

106 
	`¥ötf
(" . Setting upÅhe DTLS data...");

108 i‡((
ªt
 = 
	`mbedés_s¶_c⁄fig_deÁu…s
(&
és
->
c⁄f
,

109 
MBEDTLS_SSL_IS_SERVER
,

110 
MBEDTLS_SSL_TRANSPORT_DATAGRAM
,

111 
MBEDTLS_SSL_PRESET_DEFAULT
)) != 0) {

112 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_c⁄fig_deÁu…†ªtu∫ed %d\n\n", 
ªt
);

113 
exô
;

116 
	`mbedés_s¶_c⁄f_∫g
(&
és
->
c⁄f
, 
mbedés_˘r_drbg_øndom
, &és->
˘r_drbg
);

119 #i‡
	`deföed
(
MBEDTLS_SSL_CACHE_C
)

120 
	`mbedés_s¶_c⁄f_£ssi⁄_ˇche
(&
és
->
c⁄f
, &és->
ˇche
,

121 
mbedés_s¶_ˇche_gë
,

122 
mbedés_s¶_ˇche_£t
);

124 #i‡
	`deföed
(
MBEDTLS_SSL_SESSION_TICKETS
)

125 i‡((
ªt
 = 
	`mbedés_s¶_tickë_£tup
(&
és
->
tickë_˘x
,

126 
mbedés_˘r_drbg_øndom
, &
és
->
˘r_drbg
,

127 
MBEDTLS_CIPHER_AES_256_GCM
,

129 
	`mbedés_¥ötf
(" faûed\¿ ! mbedés_s¶_tickë_£tu∞ªtu∫ed %d\n\n", 
ªt
);

130 
exô
;

132 
	`mbedés_s¶_c⁄f_£ssi⁄_tickës_cb
(&
és
->
c⁄f
,

133 
mbedés_s¶_tickë_wrôe
,

134 
mbedés_s¶_tickë_∑r£
,

135 &
és
->
tickë_˘x
);

138 
	`mbedés_s¶_c⁄f_authmode
(&
és
->
c⁄f
, 
MBEDTLS_SSL_VERIFY_OPTIONAL
);

139 
	`mbedés_s¶_c⁄f_ˇ_chaö
(&
és
->
c⁄f
,Åls->
§v˚π
.
√xt
, 
NULL
);

140 i‡((
ªt
 = 
	`mbedés_s¶_c⁄f_own_˚π
(&
és
->
c⁄f
, &és->
§v˚π
, &és->
pkey
)) != 0) {

141 
	`¥ötf
(" faûed\¿ ! mbedés_s¶_c⁄f_own_˚πÑëu∫ed %d\n\n", 
ªt
);

142 
exô
;

145 i‡((
ªt
 = 
	`mbedés_s¶_cookõ_£tup
(&
és
->
cookõ_˘x
,

146 
mbedés_˘r_drbg_øndom
, &
és
->
˘r_drbg
)) != 0) {

147 
	`¥ötf
(" faûed\¿ ! mbedés_s¶_cookõ_£tu∞ªtu∫ed %d\n\n", 
ªt
);

148 
exô
;

151 
	`mbedés_s¶_c⁄f_dés_cookõs
(&
és
->
c⁄f
, 
mbedés_s¶_cookõ_wrôe
, 
mbedés_s¶_cookõ_check
,

152 &
és
->
cookõ_˘x
);

154 i‡((
ªt
 = 
	`mbedés_s¶_£tup
(&
és
->
s¶
, &és->
c⁄f
)) != 0) {

155 
	`¥ötf
(" faûed\¿ ! mbedés_s¶_£tu∞ªtu∫ed %d\n\n", 
ªt
);

156 
exô
;

159 
	`mbedés_s¶_£t_timî_cb
(&
és
->
s¶
, &és->
timî
, 
mbedés_timög_£t_dñay
,

160 
mbedés_timög_gë_dñay
);

162 
	`¥ötf
(" ok\n");

165 
exô
:

166 
	`mbedés_√t_‰ì
(&
és
->
˛õ¡_fd
);

167 
	`mbedés_√t_‰ì
(&
és
->
li°í_fd
);

169 
	`mbedés_x509_¸t_‰ì
(&
és
->
§v˚π
);

170 
	`mbedés_pk_‰ì
(&
és
->
pkey
);

171 
	`mbedés_s¶_‰ì
(&
és
->
s¶
);

172 
	`mbedés_s¶_c⁄fig_‰ì
(&
és
->
c⁄f
);

173 
	`mbedés_s¶_cookõ_‰ì
(&
és
->
cookõ_˘x
);

174 #i‡
	`deföed
(
MBEDTLS_SSL_CACHE_C
)

175 
	`mbedés_s¶_ˇche_‰ì
(&
és
->
ˇche
);

177 
	`mbedés_˘r_drbg_‰ì
(&
és
->
˘r_drbg
);

178 
	`mbedés_íå›y_‰ì
(&
és
->
íå›y
);

181 
	}
}

184 
	$dés_h™dshake
(
és_°ru˘
 *
és
)

186 
vrfy_buf
[512];

187 
ªt
 = 0;

191 
	`¥ötf
(" . PerformingÅhe DTLS handshake...");

194 
ªt
 = 
	`mbedés_s¶_h™dshake
(&
és
->
s¶
);

195 } 
ªt
 =
MBEDTLS_ERR_SSL_WANT_READ
 ||

196 
ªt
 =
MBEDTLS_ERR_SSL_WANT_WRITE
);

198 i‡(
ªt
 =
MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
) {

199 
	`¥ötf
(" hello verificationÑequested\n");

200 
ªt
 = 0;

202 } i‡(
ªt
 != 0) {

203 
	`¥ötf
(" faûed\¿ ! mbedés_s¶_h™dshakêªtu∫ed -0x%x\n\n", -
ªt
);

207 
	`¥ötf
(" ok\n");

208 
	`¥ötf
("ca verify\n\n\n");

209 
u32
 
Êags
;

210 i‡((
Êags
 = 
	`mbedés_s¶_gë_vîify_ªsu…
(&
és
->
s¶
)) != 0) {

211 
	`mbedés_¥ötf
(" failed\n");

213 
	`mbedés_x509_¸t_vîify_öfo
(
vrfy_buf
, (vrfy_buf), " ! ", 
Êags
);

214 
	`mbedés_¥ötf
("%s\n", 
vrfy_buf
);

216 
	`mbedés_¥ötf
(" ok\n");

219 
és
->
˛õ¡_fd
.
h™dshake_ok
 = 1;

222 
	}
}

227 
	$dés_wrôe
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

229 
ªt
 = 0;

231 
	`os_muãx_≥nd
(&
és
->
˛õ¡_fd
.
muãx
, 0);

234 
ªt
 = 
	`mbedés_s¶_wrôe
(&
és
->
s¶
, (*Ë
buf
, 
Àn
);

238 i‡(
ªt
 < 0) {

239 
	`mbedés_¥ötf
(" mbedés_s¶_wrôêªtu∫ed %d\n", 
ªt
);

240 
	`os_muãx_po°
(&
és
->
˛õ¡_fd
.
muãx
);

243 
	`os_muãx_po°
(&
és
->
˛õ¡_fd
.
muãx
);

247 
	}
}

251 
	$dés_ªad
(
és_°ru˘
 *
és
, 
u8
 *
buf
, 
u32
 
Àn
, u32 
Êag
)

253 
ªt
 = 0;

255 
	`os_muãx_≥nd
(&
és
->
˛õ¡_fd
.
muãx
, 0);

258 
ªt
 = 
	`mbedés_s¶_ªad
(&
és
->
s¶
, (*Ë
buf
, 
Àn
);

262 i‡(
ªt
 < 0) {

263 
	`mbedés_¥ötf
("mbedés_s¶_ªadÑëu∫ed %d\n", 
ªt
);

264 
	`os_muãx_po°
(&
és
->
˛õ¡_fd
.
muãx
);

267 
	`os_muãx_po°
(&
és
->
˛õ¡_fd
.
muãx
);

269  
ªt
;

270 
	}
}

272 
	$dés_£rvî_ac˝ë
(
és_°ru˘
 *
és
)

275 
˛õ¡_ù
[16] = { 0 };

276 
size_t
 
˛iù_Àn
;

277 
ªt
 = 0;

279 
	`mbedés_√t_‰ì
(&
és
->
˛õ¡_fd
);

281 
	`mbedés_s¶_£ssi⁄_ª£t
(&
és
->
s¶
);

286 
	`¥ötf
(" . Waiting foráÑemote connection ...");

288 i‡((
ªt
 = 
	`mbedés_√t_ac˚±
(&
és
->
li°í_fd
, &és->
˛õ¡_fd
,

289 
˛õ¡_ù
, (˛õ¡_ù), &
˛iù_Àn
)) != 0) {

290 
	`¥ötf
(" faûed\¿ ! mbedés_√t_ac˚±Ñëu∫ed %d\n\n", 
ªt
);

295 i‡((
ªt
 = 
	`mbedés_s¶_£t_˛õ¡_å™•‹t_id
(&
és
->
s¶
,

296 
˛õ¡_ù
, 
˛iù_Àn
)) != 0) {

297 
	`¥ötf
(" failed\n ! "

298 "mbedés_s¶_£t_˛õ¡_å™•‹t_id(Ëªtu∫ed -0x%x\n\n", -
ªt
);

302 
	`mbedés_s¶_£t_bio
(&
és
->
s¶
, &és->
˛õ¡_fd
,

303 
mbedés_√t_£nd
, 
mbedés_√t_ªcv
, 
mbedés_√t_ªcv_timeout
);

305 
	`¥ötf
(" ok\n");

309 
	}
}

310 
	$dés_io˘l
(
és_°ru˘
 *
és
, 
u32
 
cmd
, u32 
¨g
)

312 
	`¥ötf
("%s\n", 
__func__
);

313 
ªt
 = 0;

314 
cmd
) {

315 
TLS_SET_CA
:

317 
TLS_SERVER_ACCEPT
:

318 
ªt
 = 
	`dés_£rvî_ac˝ë
(
és
);

324  
ªt
;

325 
	}
}

328 
	$dés_˛o£
(
és_°ru˘
 *
és
)

330 
	`mbedés_√t_‰ì
(&
és
->
˛õ¡_fd
);

331 
	`mbedés_√t_‰ì
(&
és
->
li°í_fd
);

333 
	`mbedés_x509_¸t_‰ì
(&
és
->
§v˚π
);

334 
	`mbedés_pk_‰ì
(&
és
->
pkey
);

335 
	`mbedés_s¶_‰ì
(&
és
->
s¶
);

336 
	`mbedés_s¶_c⁄fig_‰ì
(&
és
->
c⁄f
);

337 
	`mbedés_s¶_cookõ_‰ì
(&
és
->
cookõ_˘x
);

338 #i‡
	`deföed
(
MBEDTLS_SSL_CACHE_C
)

339 
	`mbedés_s¶_ˇche_‰ì
(&
és
->
ˇche
);

341 
	`mbedés_˘r_drbg_‰ì
(&
és
->
˘r_drbg
);

342 
	`mbedés_íå›y_‰ì
(&
és
->
íå›y
);

345 
	}
}

348 c⁄° 
_és_›s
 
	gés_£r_›s
 = {

349 .
döô
 = 
dés_£rvî_öô
,

350 .
	gh™dshake
 = 
dés_h™dshake
,

351 .
	gdwrôe
 = 
dés_wrôe
,

352 .
	gdªad
 = 
dés_ªad
,

353 .
	gdio˘l
 = 
dés_io˘l
,

354 .
	gdunöô
 = 
dés_˛o£
,

	@app/net/video_playback.c

1 
	~"sock_≠i/sock_≠i.h
"

2 
	~"os/os_com∑t.h
"

3 
	~"£rvî/√t_£rvî.h
"

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"£rvî/˘p_£rvî.h
"

7 
	~"£rvî/sim∂e_mov_u≈kg.h
"

8 
	~"£rvî/π_°ªam_pkg.h
"

9 
	~"fs/fs.h
"

10 
	~"comm⁄/comm⁄.h
"

11 
	~"gíîic/li°.h
"

12 
	~"£rvî/∑ckë.h
"

13 
	#VIDEO_PLAYBACK_TASK_NAME
 "video_∂ayback"

	)

14 
	#VIDEO_PLAYBACK_TASK_STK
 0x300

	)

15 
	#VIDEO_PLAYBACK_TASK_PRIO
 22

	)

19 
	#IMAGE_SIZE
 800*1024

	)

21 
	s__∂ayback
 {

22 
u32
 
	mid
;

23 
u8
 
	m°©e
;

24 *
	mvideo_∂ayback_sock_hdl
;

25 (*
	mcb
)(*
	m¥iv
, 
u8
 *
	md©a
, 
size_t
 
	mÀn
);

26 
u8
 
	mkûl_Êag
;

27 
OS_MUTEX
 
	mmuãx
;

28 
li°_hód
 
	m˛i_hód
;

32 
__∂ayback
 
	g∂ayback_öfo
;

33 
	#∂ayback_öfo_h™dî
 (&
∂ayback_öfo
)

	)

34 
u32
 
	gcout
 = 0;

35 
	s__∂ayback_˛i_öfo
 {

36 
li°_hód
 
	míåy
;

37 
u32
 
	mm£c
;

38 
u32
 
	m°©e
;

39 
sockaddr_ö
 
	mªmŸe_addr
;

40 
	mpid
;

41 
u8
 
	m°›
;

42 
u8
 
	mkûl_Êag
;

43 
u16
 
	mÁ°_˘æ
;

44 
u32
 
	mtmp_is_30Âs
;

45 
__∑ckë_öfo
 
	mpöfo
;

46 
OS_SEM
 
	m£m
;

50 
	$föd_idr_‰ame2
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
off£t
)

52 
i
 = 0;

53 
buf
[5];

54 
ßm∂e_off£t
;

55 
ßm∂e_size
;

56 
ªt
;

58 
i
 = 
off£t
;

62 i‡(
i
 >
pöfo
->
öfo
.
video_ßm∂e_cou¡
) {

63  
pöfo
->
öfo
.
video_ßm∂e_cou¡
 - 1;

66 
ßm∂e_size
 = 
	`gë_ßm∂e_size
(
pöfo
->
öfo
.
°sz_èb
, 
i
);

67 i‡(
ßm∂e_size
 == -1) {

70 
ßm∂e_off£t
 = 
	`gë_chunk_off£t
(
pöfo
->
öfo
.
°co_èb
, 
i
);

71 i‡(
ßm∂e_off£t
 == -1) {

74 i‡(
Ál£
 =
	`f£ek
(
pöfo
->
fd
, 
ßm∂e_off£t
, 
SEEK_SET
)) {

77 
ªt
 = 
	`‰ód
(
pöfo
->
fd
, 
buf
, 5);

78 i‡(
ªt
 != 5) {

81 i‡(
buf
[4] != 0x67) {

83 
i
++;

85  
i
;

90 
	}
}

92 
	$föd_idr_‰ame
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
off£t
)

94 
i
 = 0;

95 
buf
[5];

96 
ßm∂e_off£t
;

97 
ßm∂e_size
;

98 
ªt
;

100 
‰ame_≥r_ts
 = 0 ;

107 
i
 = 
off£t
 * 
pöfo
->
öfo
.
sˇÀ
 / (pöfo->öfo.
ßm∂e_duøti⁄
 * 1000);

110 i‡(
i
 >
pöfo
->
öfo
.
video_ßm∂e_cou¡
) {

111  
pöfo
->
öfo
.
video_ßm∂e_cou¡
 - 1;

114 
ßm∂e_size
 = 
	`gë_ßm∂e_size
(
pöfo
->
öfo
.
°sz_èb
, 
i
);

115 i‡(
ßm∂e_size
 == -1) {

119 
ßm∂e_off£t
 = 
	`gë_chunk_off£t
(
pöfo
->
öfo
.
°co_èb
, 
i
);

120 i‡(
ßm∂e_off£t
 == -1) {

124 i‡(
Ál£
 =
	`f£ek
(
pöfo
->
fd
, 
ßm∂e_off£t
, 
SEEK_SET
)) {

127 
ªt
 = 
	`‰ód
(
pöfo
->
fd
, 
buf
, 5);

128 i‡(
ªt
 != 5) {

132 i‡(
buf
[4] != 0x67) {

133 
i
--;

135  
i
;

140 
	}
}

159 
	$£nd_d©e_≥r_Âs
(
__∂ayback_˛i_öfo
 *
˛i
, 
u32
 
i
)

161 
ªt
 = 0;

163 
u32
 
is_30Âs
 = 0;

164 
u32
 
£c
 = 0;

166 
£c
 = (
i
 - 
˛i
->
tmp_is_30Âs
Ë/ (˛i->
pöfo
.
öfo
.
sˇÀ
 / cli->pöfo.öfo.
ßm∂e_duøti⁄
);

168 i‡(
£c
) {

169 
	`¥ötf
("£c->%d\n", 
£c
);

171 
ªt
 = 
	`£nd_d©e_∑ckë
(&
˛i
->
pöfo
, 
£c
);

172 
	`£nd_gps_d©a_∑ckë
(&
˛i
->
pöfo
);

174 
˛i
->
tmp_is_30Âs
 = 
i
;

177  
ªt
;

178 
	}
}

179 
	$video_∂ayback_˛i_thªad
(*
¨g
)

181 
ªt
;

182 
vfsˇn
 *
fs
;

183 
FILE
 *
fd
;

184 
u8
 
«me
[32];

185 
buf
[64];

186 
i
 = 0, 
j
 = 0;

187 
u32
 
m£c
 = 0;

188 
__∂ayback_˛i_öfo
 *
˛i
 = (__∂ayback_˛i_öfÿ*)
¨g
;

190 
	`puts
("start video_playback_cli_thread\n");

191 
˛i
->
pöfo
.
fd
 = 
	`f›í
(˛i->pöfo.
fûe_«me
, "r");

192 
˛i
->
Á°_˘æ
 = 0;

194 i‡(
˛i
->
pöfo
.
fd
 =
NULL
) {

195 
	`puts
("open fail\n");

196 
	`fgë_«me
(
˛i
->
pöfo
.
fd
, 
«me
, 32);

197 
	`•rötf
(
buf
, "∑th:%s", 
«me
);

198 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "TIME_AXIS_PLAY", "NOTIFY", 
buf
);

199 
îr1
;

202 i‡(!
	`is_vaûd_mov_fûe
(
˛i
->
pöfo
.
fd
)) {

203 
	`puts
("open fail\n");

204 
	`fgë_«me
(
˛i
->
pöfo
.
fd
, 
«me
, 32);

205 
	`•rötf
(
buf
, "∑th:%s", 
«me
);

206 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "TIME_AXIS_PLAY", "NOTIFY", 
buf
);

207 
îr1
;

209 i‡(
	`föd_gps_d©a
(&
˛i
->
pöfo
) < 0) {

210 
	`puts
("mov fileÇo gps data\n");

213 
˛i
->
pöfo
.
ty≥
 = 
H264_TYPE_VIDEO
;

215 i‡(
	`gë_mov_medü_öfo
(&
˛i
->
pöfo
)) {

216 
	`puts
("get mov media fail\n");

217 
îr1
;

219 
i
 = 
	`föd_idr_‰ame
(&
˛i
->
pöfo
, cli->
m£c
);

220 
	`¥ötf
("ßm∂ê°¨à© %d sam∂e_duøti⁄=%d\n", 
i
, 
˛i
->
pöfo
.
öfo
.
sˇÀ
);

224 i‡(
	`£nd_medü_∑ckë
(&
˛i
->
pöfo
) <= 0) {

225 
	`¥ötf
("send mediaÖacket fail \n\n");

226 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "TIME_AXIS_PLAY", "NOTIFY", 
CTP_NET_ERR_MSG
);

227 
îr1
;

234 
	`ö¸_d©e_time
(&
˛i
->
pöfo
.
time
, cli->
m£c
 / 1000);

236 
˛i
->
tmp_is_30Âs
 = 
i
;

237 
j
 = 
i
 / (
˛i
->
pöfo
.
öfo
.
video_ßm∂e_cou¡
 / cli->pöfo.öfo.
audio_chunk_num
);

240 i‡(
˛i
->
°›
) {

241 
	`os_£m_≥nd
(&
˛i
->
£m
, 0);

244 i‡(
˛i
->
kûl_Êag
) {

245 
îr1
;

248 i‡(
i
 >
˛i
->
pöfo
.
öfo
.
video_ßm∂e_cou¡
 - 1) {

249 
˛i
->
pöfo
.
fd
 = 
	`∂ay_√xt
(&cli->pinfo);

251 
	`£nd_íd_∑ckë
(&
˛i
->
pöfo
);

252 i‡(
˛i
->
pöfo
.
fd
 =
NULL
) {

253 
îr1
;

256 
	`upd©e_d©a
(&
˛i
->
pöfo
);

257 
i
 = 0;

258 
˛i
->
tmp_is_30Âs
 = 0;

259 
j
 = 0;

260 i‡(
	`föd_gps_d©a
(&
˛i
->
pöfo
) < 0) {

261 
	`¥ötf
("mov gps dataÉrr \n");

263 
	`£nd_medü_∑ckë
(&
˛i
->
pöfo
);

266 i‡(
˛i
->
pöfo
.
öfo
.
video_ßm∂e_cou¡
 && cli->pöfo.öfo.
audio_chunk_num
) {

267 i‡((
i
 % (
˛i
->
pöfo
.
öfo
.
video_ßm∂e_cou¡
 / cli->pöfo.öfo.
audio_chunk_num
) == 0)

268 && 
j
 < 
˛i
->
pöfo
.
öfo
.
audio_chunk_num
) {

269 i‡(!
˛i
->
Á°_˘æ
) {

270 
ªt
 = 
	`£nd_audio_∑ckë
(&
˛i
->
pöfo
, 
j
);

271 i‡(
ªt
 <= 0) {

272 
îr1
;

276 
j
++;

280 
ªt
 = 
	`£nd_video_∑ckë
(&
˛i
->
pöfo
, 
i
);

282 i‡(
ªt
 <= 0) {

283 
	`¥ötf
("send videoÖacket fail\n");

284 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "TIME_AXIS_PLAY", "NOTIFY", 
CTP_NET_ERR_MSG
);

285 
îr1
;

289 i‡(!
˛i
->
Á°_˘æ
) {

291 
i
++;

295 
i
 +
˛i
->
Á°_˘æ
;

300 
i
 = 
	`föd_idr_‰ame2
(&
˛i
->
pöfo
, i);

304 
	`£nd_d©e_≥r_Âs
(
˛i
, 
i
);

307 
îr1
:

308 
	`unföd_gps_d©a
();

309 i‡(
˛i
->
pöfo
.
öfo
.
°co_èb
 !
NULL
) {

310 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°co_èb
);

311 
˛i
->
pöfo
.
öfo
.
°co_èb
 = 
NULL
;

314 i‡(
˛i
->
pöfo
.
öfo
.
°sz_èb
 !
NULL
) {

315 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°sz_èb
);

316 
˛i
->
pöfo
.
öfo
.
°sz_èb
 = 
NULL
;

319 i‡(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 !
NULL
) {

320 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
);

321 
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 = 
NULL
;

324 i‡(
˛i
->
pöfo
.
fd
 !
NULL
) {

325 
	`f˛o£
(
˛i
->
pöfo
.
fd
);

326 
˛i
->
pöfo
.
fd
 = 
NULL
;

329 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

330 
	`li°_dñ
(&
˛i
->
íåy
);

332 
	`sock_uƒeg
(
˛i
->
pöfo
.
sock
);

334 
	`‰ì
(
˛i
->
pöfo
.
d©a
);

336 
	`‰ì
(
˛i
);

337 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

340 
	}
}

346 
	$video_∂ayback_ªq_h™dÀr
(*
msg
)

348 
buf
[128];

349 
sockaddr_ö
 
ªmŸe_addr
;

350 *
ªt
;

351 
«me
[32];

352 
ªt1
 = 0;

353 i‡(
msg
 =
NULL
) {

357 
√t_ªq
 *
ªq
 = (√t_ªq *)
msg
;

359 
sockÀn_t
 
addæí
 = (
ªmŸe_addr
);

360 
	`•rötf
(
buf
, "∑th:%s,off£t:%s", 
ªq
->
∂ayback
.
fûe_«me
,Ñeq->∂ayback.
m£c
);

361 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "TIME_AXIS_PLAY", "NOTIFY", 
buf
);

363 
ªt
 = 
	`sock_ac˚±
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
, (
sockaddr
 *)&
ªmŸe_addr
, &
addæí
, 
NULL
, NULL);

365 i‡(
ªt
 =
NULL
) {

366 
	`¥ötf
("%†::%d sock_ac˚± \n", 
__func__
, 
__LINE__
);

367 
îr1
;

372 
__∂ayback_˛i_öfo
 *
˛i
 = (__∂ayback_˛i_öfÿ*)
	`ˇŒoc
(1, (__playback_cli_info));

374 i‡(
˛i
 =
NULL
) {

375 
	`¥ötf
("%†::%d cÆlo¯\n", 
__func__
, 
__LINE__
);

376 
îr1
;

379 
	`¥ötf
("˛i->pöfo.sock : 0x%x \n", 
ªt
);

381 
	`°r˝y
(
˛i
->
pöfo
.
fûe_«me
, 
ªq
->
∂ayback
.file_name);

382 
˛i
->
m£c
 = 
ªq
->
∂ayback
.msec;

383 
˛i
->
pöfo
.
sock
 = 
ªt
;

385 
	`¥ötf
("˛i->pöfo.sock : %d \n", 
˛i
->
pöfo
.
sock
);

386 
	`¥ötf
("ªq->∂ayback.fûíamê: %†£c:%d\n", 
˛i
->
pöfo
.
fûe_«me
, cli->
m£c
);

389 
	`‰ì
(
ªq
);

391 
˛i
->
pöfo
.
d©a
 = (
u8
 *)
	`ˇŒoc
(
IMAGE_SIZE
, 1);

393 i‡(
˛i
->
pöfo
.
d©a
 =
NULL
) {

394 
	`¥ötf
("%†::%d mÆlo¯\n", 
__func__
, 
__LINE__
);

395 
	`‰ì
(
˛i
);

396 
îr1
;

399 
˛i
->
pöfo
.
Àn
 = 
IMAGE_SIZE
;

401 
	`mem˝y
(&
˛i
->
ªmŸe_addr
, &ªmŸe_addr, (
sockaddr_ö
));

402 
	`os_£m_¸óã
(&
˛i
->
£m
, 0);

403 
	`os_muãx_¸óã
(&
∂ayback_öfo_h™dî
->
muãx
);

404 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

405 
	`li°_add_èû
(&
˛i
->
íåy
, &
∂ayback_öfo_h™dî
->
˛i_hód
);

406 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

408 
	`¥ötf
("create cliÅhread\n");

409 
	`•rötf
(
«me
, "∂ayback_˛i_%x", 
ªmŸe_addr
.
sö_addr
.
s_addr
);

410 
ªt1
 = 
	`thªad_f‹k
(
«me
, 21, 0x600, 0, (*)0, 
video_∂ayback_˛i_thªad
, (*)
˛i
);

411 i‡(
ªt1
 !
OS_NO_ERR
) {

412 
	`¥ötf
("thªad f‹kÉº =%d\n", 
ªt1
);

413 
îr1
;

416 
îr1
:

417 
	`sock_uƒeg
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
);

419 
	}
}

421 
	$video_∂ayback_ªq_h™dÀr2
(*
msg
)

423 
buf
[128];

424 
sockaddr_ö
 
ªmŸe_addr
;

425 *
ªt
;

426 
fd_£t
 
rd£t
;

427 
timevÆ
 
tv
 = {5, 0};

429 
«me
[32];

430 
ªt1
 = 0;

431 i‡(
msg
 =
NULL
) {

435 
√t_ªq
 *
ªq
 = (√t_ªq *)
msg
;

437 
sockÀn_t
 
addæí
 = (
ªmŸe_addr
);

440 
	`•rötf
(
buf
, "status:%d", 0);

441 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "TIME_AXIS_PLAY", "NOTIFY", 
buf
);

443 
	`FD_ZERO
(&
rd£t
);

444 
	`FD_SET
(
	`sock_gë_sockë
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
), &
rd£t
);

446 
ªt1
 = 
	`sock_£À˘
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
, &
rd£t
, 
NULL
, NULL, &
tv
);

447 i‡(
ªt1
 < 0) {

448 
îr1
;

449 } i‡(
ªt1
 == 0) {

450 
	`puts
("acceptÅime out\n");

451 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_REQUEST
, "TIME_AXIS_PLAY", "NOTIFY", 
CTP_REQUEST_MSG
);

452 
	`‰ì
(
ªq
);

455 
ªt
 = 
	`sock_ac˚±
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
, (
sockaddr
 *)&
ªmŸe_addr
, &
addæí
, 
NULL
, NULL);

457 i‡(
ªt
 =
NULL
) {

458 
	`¥ötf
("%†::%d sock_ac˚± \n", 
__func__
, 
__LINE__
);

459 
îr1
;

464 
__∂ayback_˛i_öfo
 *
˛i
 = (__∂ayback_˛i_öfÿ*)
	`ˇŒoc
(1, (__playback_cli_info));

466 i‡(
˛i
 =
NULL
) {

467 
	`¥ötf
("%†::%d cÆlo¯\n", 
__func__
, 
__LINE__
);

468 
îr1
;

472 
	`°r˝y
(
˛i
->
pöfo
.
fûe_«me
, 
ªq
->
∂ayback
.file_name);

473 
˛i
->
m£c
 = 
ªq
->
∂ayback
.msec;

474 
˛i
->
pöfo
.
sock
 = 
ªt
;

476 
	`¥ötf
("ﬁdÑeq->∂ayback.fûíamê: %†£c:%d\n", 
ªq
->
∂ayback
.
fûe_«me
,Ñeq->∂ayback.
m£c
);

477 
	`¥ötf
("√wÑeq->∂ayback.fûíamê: %†£c:%d\n", 
˛i
->
pöfo
.
fûe_«me
, cli->
m£c
);

481 
	`‰ì
(
ªq
);

483 
˛i
->
pöfo
.
d©a
 = (
u8
 *)
	`ˇŒoc
(
IMAGE_SIZE
, 1);

485 i‡(
˛i
->
pöfo
.
d©a
 =
NULL
) {

486 
	`¥ötf
("%†::%d mÆlo¯\n", 
__func__
, 
__LINE__
);

487 
	`‰ì
(
˛i
);

488 
îr1
;

491 
˛i
->
pöfo
.
Àn
 = 
IMAGE_SIZE
;

493 
	`mem˝y
(&
˛i
->
ªmŸe_addr
, &ªmŸe_addr, (
sockaddr_ö
));

494 
	`os_£m_¸óã
(&
˛i
->
£m
, 0);

495 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

496 
	`li°_add_èû
(&
˛i
->
íåy
, &
∂ayback_öfo_h™dî
->
˛i_hód
);

497 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

499 
	`¥ötf
("create cliÅhread\n");

500 
	`•rötf
(
«me
, "∂ayback_˛i_%d", 
cout
++);

501 
ªt1
 = 
	`thªad_f‹k
(
«me
, 21, 0x600, 0, &
˛i
->
pid
, 
video_∂ayback_˛i_thªad
, (*)cli);

502 i‡(
ªt1
 !
OS_NO_ERR
) {

503 
	`¥ötf
("thªad f‹kÉº =%d\n", 
ªt1
);

504 
îr1
;

512 
îr1
:

513 
	`sock_uƒeg
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
);

515 
	}
}

516 
	$time_axis_∂ay_thªad
(*
¨g
)

518 
	`video_∂ayback_ªq_h™dÀr2
(
¨g
);

520 
	`¥ötf
("end videoÖlayback\n\n\n\n");

521 
	}
}

523 
	$video_∂ayback_po°_msg
(
√t_ªq
 *
_ªq
)

525 
ªt
 = 0;

526 
u32
 
cou¡
 = 0;

527 
buf
[64];

528 
√t_ªq
 *
ªq
 = (√t_ªq *)
	`ˇŒoc
(1, (net_req));

530 i‡(
ªq
 =
NULL
) {

534 
	`mem˝y
(
ªq
, 
_ªq
, (
√t_ªq
));

536 
	`•rötf
(
buf
, "time_axis_∂ay_thªad%d", 
cou¡
++);

537 
ªt
 = 
	`thªad_f‹k
(
buf
, 25, 0x1000, 0, 0, 
time_axis_∂ay_thªad
, (*)
ªq
);

538 i‡(
ªt
 !
OS_NO_ERR
) {

544 
	}
}

547 
	$video_∂ayback_thªad
(*
¨g
)

549 
ªs
;

550 
u32
 
msg
[32];

553 
	`puts
("wait msg\n");

554 
ªs
 = 
	`os_èsk_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

556 i‡(
∂ayback_öfo_h™dî
->
kûl_Êag
) {

560 
	`puts
("get msg gogogo\n");

561 
ªs
) {

562 
OS_TASKQ
:

563 
msg
[0]) {

564 
Q_EVENT
:

567 
Q_MSG
:

568 
	`video_∂ayback_ªq_h™dÀr
((*Ë
msg
[1]);

577 
OS_TIMER
:

580 
OS_TIMEOUT
:

586 
	}
}

588 
∂ayback_öô
(
u16
 
p‹t
, 
	$ˇŒback
(*
¥iv
, 
u8
 *
d©a
, 
size_t
 
Àn
))

590 
	`puts
("playback_init\n");

591 
ªt
;

592 
sockaddr_ö
 
de°_addr
;

593 
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_STREAM
, 0, 
NULL
, NULL);

595 i‡(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
 =
NULL
) {

596 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__func__
, 
__LINE__
);

597 
EXIT
;

600 i‡(
	`sock_£t_ªu£addr
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
)) {

601 
	`¥ötf
("%†%d->Eº‹ i¿sock_£t_ªu£addr(),î∫o=%d\n", 
__func__
, 
__LINE__
, 
î∫o
);

602 
EXIT
;

605 
de°_addr
.
sö_Ámûy
 = 
AF_INET
;

606 
de°_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

607 
de°_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

608 
	`puts
("playback_init\n");

609 
ªt
 = 
	`sock_böd
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
, (
sockaddr
 *)&
de°_addr
, (sockaddr));

611 i‡(
ªt
) {

612 
	`¥ötf
("%†%d->Eº‹ i¿böd(),î∫o=%d\n", 
__func__
, 
__LINE__
, 
î∫o
);

613 
EXIT
;

616 
ªt
 = 
	`sock_li°í
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
, 0xff);

618 i‡(
ªt
) {

619 
	`¥ötf
("%†%d->Eº‹ i¿li°í()\n", 
__func__
, 
__LINE__
);

620 
EXIT
;

623 
	`puts
("playback_init\n");

625 i‡(
ˇŒback
 =
NULL
) {

626 
∂ayback_öfo_h™dî
->
cb
 = 
NULL
;

628 
∂ayback_öfo_h™dî
->
cb
 = 
ˇŒback
;

631 
	`os_muãx_¸óã
(&
∂ayback_öfo_h™dî
->
muãx
);

632 
	`INIT_LIST_HEAD
(&
∂ayback_öfo_h™dî
->
˛i_hód
);

633 
	`puts
("create video_playback_thread\n");

638 
EXIT
:

639 
	`sock_uƒeg
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
);

640 
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
 = 
NULL
;

642 
	}
}

644 
	$∂ayback_disc⁄√˘_Æl_˛i
()

647 
__∂ayback_˛i_öfo
 *
˛i
 = 
NULL
;

648 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

649 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

650 i‡(
	`li°_em±y
(&
∂ayback_öfo_h™dî
->
˛i_hód
)) {

651 
	`puts
("video_playback cli isÉmtry\n");

652 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

655 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
∂ayback_öfo_h™dî
->
˛i_hód
) {

656 
˛i
 = 
	`li°_íåy
(
pos
, 
__∂ayback_˛i_öfo
, 
íåy
);

657 
˛i
->
kûl_Êag
 = 1;

658 i‡(
˛i
->
°›
) {

659 
	`os_£m_po°
(&
˛i
->
£m
);

662 
	`sock_£t_quô
(
˛i
->
pöfo
.
sock
);

665 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

667 
	}
}

669 
	$∂ayback_unöô
()

671 
	`∂ayback_disc⁄√˘_Æl_˛i
();

672 
	`sock_uƒeg
(
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
);

673 
∂ayback_öfo_h™dî
->
video_∂ayback_sock_hdl
 = 
NULL
;

678 
	}
}

681 
	$∂ayback_disc⁄√˘_˛i
(
sockaddr_ö
 *
d°_addr
)

684 
__∂ayback_˛i_öfo
 *
˛i
 = 
NULL
;

685 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

686 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

687 i‡(
	`li°_em±y
(&
∂ayback_öfo_h™dî
->
˛i_hód
)) {

688 
	`puts
("video_playback cli isÉmtry\n");

689 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

692 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
∂ayback_öfo_h™dî
->
˛i_hód
) {

693 
˛i
 = 
	`li°_íåy
(
pos
, 
__∂ayback_˛i_öfo
, 
íåy
);

696 i‡(
d°_addr
 !
NULL


697 && 
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr) {

698 
˛i
->
kûl_Êag
 = 1;

699 i‡(
˛i
->
°›
) {

700 
	`os_£m_po°
(&
˛i
->
£m
);

703 
	`sock_£t_quô
(
˛i
->
pöfo
.
sock
);

705 
	`¥ötf
("nŸ föd d°_addr:%s:%d\n", 
	`öë_¡ﬂ
(
d°_addr
->
sö_addr
.
s_addr
), 
	`¡ohs
(d°_addr->
sö_p‹t
));

708 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

713 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

715 
	}
}

717 
	$∂ayback_˛i_∑u£
(
sockaddr_ö
 *
d°_addr
)

719 
	`puts
("-----------playback_cli_pause\n\n");

720 
__∂ayback_˛i_öfo
 *
˛i
 = 
NULL
;

721 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

723 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

724 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
∂ayback_öfo_h™dî
->
˛i_hód
) {

725 
˛i
 = 
	`li°_íåy
(
pos
, 
__∂ayback_˛i_öfo
, 
íåy
);

727 i‡(
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr) {

728 
˛i
->
°›
 = 1;

729 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

734 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

736 
	}
}

738 
	$∂ayback_˛i_c⁄töue
(
sockaddr_ö
 *
d°_addr
)

740 
	`puts
("---------------playback_cli_continue\n\n");

741 
__∂ayback_˛i_öfo
 *
˛i
 = 
NULL
;

742 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

743 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

744 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
∂ayback_öfo_h™dî
->
˛i_hód
) {

745 
˛i
 = 
	`li°_íåy
(
pos
, 
__∂ayback_˛i_öfo
, 
íåy
);

747 i‡(
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr) {

748 
˛i
->
°›
 = 0;

750 
	`os_£m_po°
(&
˛i
->
£m
);

751 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

756 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

759 
	}
}

761 
	$∂ayback_˛i_Á°_∂ay
(
sockaddr_ö
 *
d°_addr
, 
u32
 
•ìd
)

763 
	`puts
("---------------playback_cli_fast_play\n\n");

764 
__∂ayback_˛i_öfo
 *
˛i
 = 
NULL
;

765 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

766 
	`os_muãx_≥nd
(&
∂ayback_öfo_h™dî
->
muãx
, 0);

767 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
∂ayback_öfo_h™dî
->
˛i_hód
) {

768 
˛i
 = 
	`li°_íåy
(
pos
, 
__∂ayback_˛i_öfo
, 
íåy
);

770 i‡(
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr) {

771 
˛i
->
Á°_˘æ
 = 
•ìd
;

772 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

777 
	`os_muãx_po°
(&
∂ayback_öfo_h™dî
->
muãx
);

780 
	}
}

	@app/net/video_preview.c

1 
	~"sock_≠i/sock_≠i.h
"

2 
	~"os/os_com∑t.h
"

3 
	~"£rvî/√t_£rvî.h
"

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"£rvî/˘p_£rvî.h
"

7 
	~"£rvî/π_°ªam_pkg.h
"

8 
	~"£rvî/sim∂e_mov_u≈kg.h
"

9 
	~"£rvî/∑ckë.h
"

10 
	~"gíîic/li°.h
"

12 
	#VIDEO_PREVIEW_TASK_NAME
 "video_¥evõw"

	)

13 
	#VIDEO_PREVIEW_TASK_STK
 0x1000

	)

14 
	#VIDEO_PREVIEW_TASK_PRIO
 22

	)

18 
	#IMAGE_SIZE
 800*1024

	)

20 
	s__¥evõw
 {

21 
li°_hód
 
	m˛i_hód
;

22 
u32
 
	mid
;

23 
u8
 
	m°©e
;

24 *
	mvideo_¥evõw_sock_hdl
;

25 (*
	mcb
)(*
	m¥iv
, 
u8
 *
	md©a
, 
size_t
 
	mÀn
);

26 
u8
 
	mkûl_Êag
;

28 
OS_MUTEX
 
	mmuãx
;

33 
__¥evõw
 
	g¥evõw_öfo
;

34 
	#¥evõw_öfo_h™dî
 (&
¥evõw_öfo
)

	)

36 
	s__¥evõw_˛i_öfo
 {

37 
li°_hód
 
	míåy
;

38 (*
	mfûíame
)[64];

39 
u32
 
	mnum
;

40 
	moff£t
;

41 
u16
 
	mtimeöv
;

42 
u8
 
	mdúe˘
;

43 
sockaddr_ö
 
	mªmŸe_addr
;

44 
__∑ckë_öfo
 
	mpöfo
;

45 
u8
 
	mkûl_Êag
;

46 
	mpid
;

47 
u32
 
	mtmp_is_30Âs
;

52 
	$video_¥evõw_˛i_thªad
(*
¨g
)

54 
ªt
;

55 
FILE
 *
fd
;

56 
«me
[32];

57 
buf
[256];

58 
i
 = 0;

59 
cou¡
 = 0;

60 
u32
 
m£c
 = 0;

61 
__¥evõw_˛i_öfo
 *
˛i
 = (__¥evõw_˛i_öfÿ*)
¨g
;

64 
˛i
->
pöfo
.
ty≥
 = 
PREVIEW_TYPE
;

66 i‡(!
	`°r°r
(
˛i
->
fûíame
[
i
], "storage")) {

67 
	`¥ötf
("˛i->fûíame[%d]=%s\n", 
i
, 
˛i
->
fûíame
[i]);

68 
	`•rötf
(
buf
, "status:%d", 1);

69 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "MULTI_COVER_FIGURE", "NOTIFY", 
buf
);

73 i‡(
˛i
->
kûl_Êag
) {

74 
îr2
;

79 
fd
 = 
	`f›í
(
˛i
->
fûíame
[
i
], "r");

81 i‡(
fd
 =
NULL
) {

82 
	`¥ötf
("%† f›í faû\n", 
__func__
);

84 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_OPEN_FILE_MSG
);

85 
i
++;

90 i‡(!
	`is_vaûd_mov_fûe
(
fd
)) {

92 
	`¥ötf
("%† i†InvÆid MOV\n", 
__func__
);

93 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_OPEN_FILE_MSG
);

94 
i
++;

95 
	`f˛o£
(
fd
);

99 
˛i
->
pöfo
.
fd
 = fd;

100 
	`°r˝y
(
˛i
->
pöfo
.
fûe_«me
, cli->
fûíame
[
i
]);

101 i‡(
	`upd©e_d©a
(&
˛i
->
pöfo
)) {

102 
	`¥ötf
("get media info fail\n");

103 
îr2
;

105 
ªt
 = 
	`£nd_medü_∑ckë
(&
˛i
->
pöfo
);

107 i‡(
ªt
 <= 0) {

109 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_NET_ERR_MSG
);

110 
îr2
;

113 
ªt
 = 
	`£nd_d©e_∑ckë
(&
˛i
->
pöfo
, 0);

114 i‡(
ªt
 <= 0) {

116 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_NET_ERR_MSG
);

117 
îr2
;

121 
ªt
 = 
	`£nd_video_∑ckë
(&
˛i
->
pöfo
, 0);

123 i‡(
ªt
 <= 0) {

125 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_NET_ERR_MSG
);

126 
îr2
;

128 
m£c
 = 
i
 * 
˛i
->
pöfo
.
öfo
.
ßm∂e_duøti⁄
 * 1000 / cli->pöfo.öfo.
sˇÀ
;

131 i‡(
m£c
) {

132 
	`ö¸_d©e_time
(&
˛i
->
pöfo
.
time
, 
m£c
 / 1000);

136 
	`f˛o£
(
fd
);

137 
i
++;

140 
îr2
:

144 i‡(
˛i
->
fûíame
 !
NULL
) {

146 
	`‰ì
(
˛i
->
fûíame
);

148 i‡(
˛i
->
pöfo
.
öfo
.
°co_èb
 !
NULL
) {

149 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°co_èb
);

150 
˛i
->
pöfo
.
öfo
.
°co_èb
 = 
NULL
;

153 i‡(
˛i
->
pöfo
.
öfo
.
°sz_èb
 !
NULL
) {

154 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°sz_èb
);

155 
˛i
->
pöfo
.
öfo
.
°sz_èb
 = 
NULL
;

158 i‡(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 !
NULL
) {

159 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
);

160 
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 = 
NULL
;

164 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

165 
	`li°_dñ
(&
˛i
->
íåy
);

166 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

168 
	`sock_uƒeg
(
˛i
->
pöfo
.
sock
);

170 
	`‰ì
(
˛i
->
pöfo
.
d©a
);

171 
	`‰ì
(
˛i
);

175 
	}
}

179 
	$föd_idr_‰ame
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
off£t
)

181 
i
 = 0;

182 
buf
[5];

183 
size_t
 
ßm∂e_off£t
;

184 
size_t
 
ßm∂e_size
;

185 
ªt
;

187 
‰ame_≥r_ts
 = 0 ;

193 
i
 = 
off£t
 * 
pöfo
->
öfo
.
sˇÀ
 / (pöfo->öfo.
ßm∂e_duøti⁄
 * 1000);

196 i‡(
i
 >
pöfo
->
öfo
.
video_ßm∂e_cou¡
) {

197  
pöfo
->
öfo
.
video_ßm∂e_cou¡
 - 1;

200 
ßm∂e_size
 = 
	`gë_ßm∂e_size
(
pöfo
->
öfo
.
°sz_èb
, 
i
);

201 
ßm∂e_off£t
 = 
	`gë_chunk_off£t
(
pöfo
->
öfo
.
°co_èb
, 
i
);

202 
	`f£ek
(
pöfo
->
fd
, 
ßm∂e_off£t
, 
SEEK_SET
);

203 
ªt
 = 
	`‰ód
(
pöfo
->
fd
, 
buf
, 5);

205 i‡(
buf
[4] != 0x67) {

206 
i
++;

208  
i
;

213 
	}
}

216 
	$£nd_d©e_≥r_Âs
(
__¥evõw_˛i_öfo
 *
˛i
, 
u32
 
i
)

218 
ªt
 = 0;

220 
is_30Âs
 = 0;

223 
u32
 
£c
 = (
i
 - 
˛i
->
tmp_is_30Âs
Ë/ (˛i->
pöfo
.
öfo
.
sˇÀ
 / cli->pöfo.öfo.
ßm∂e_duøti⁄
);

225 i‡(
£c
) {

227 
ªt
 = 
	`£nd_d©e_∑ckë
(&
˛i
->
pöfo
, 
£c
);

229 
˛i
->
tmp_is_30Âs
 = 
i
;

232  
ªt
;

234 
	}
}

236 
	$swôch_dúe˘_™d_fûe
(
__¥evõw_˛i_öfo
 *
˛i
)

238 
i
 = 0;

240 i‡(
˛i
->
dúe˘
) {

242 i‡(
˛i
->
off£t
 <= 0) {

244 
	`£nd_íd_∑ckë
(&
˛i
->
pöfo
);

245 
˛i
->
pöfo
.
fd
 = 
	`∂ay_¥ev
(&cli->pinfo);

247 i‡(
˛i
->
pöfo
.
fd
 =
NULL
) {

251 
	`upd©e_d©a
(&
˛i
->
pöfo
);

253 
˛i
->
off£t
 = ((˛i->
pöfo
.
öfo
.
durôi⁄
 / cli->pöfo.öfo.
sˇÀ
) * 1000);

254 
i
 = 
˛i
->
pöfo
.
öfo
.
video_ßm∂e_cou¡
 - 1;

260 i‡(
˛i
->
off£t
 >((˛i->
pöfo
.
öfo
.
durôi⁄
 / cli->pöfo.öfo.
sˇÀ
) * 1000)) {

262 
	`£nd_íd_∑ckë
(&
˛i
->
pöfo
);

263 
˛i
->
pöfo
.
fd
 = 
	`∂ay_√xt
(&cli->pinfo);

265 i‡(
˛i
->
pöfo
.
fd
 =
NULL
) {

269 
	`upd©e_d©a
(&
˛i
->
pöfo
);

270 
i
 = 0;

271 
˛i
->
off£t
 = 0;

277 i‡(
˛i
->
dúe˘
) {

278 
˛i
->
off£t
 -˛i->
timeöv
;

280 
˛i
->
off£t
 +˛i->
timeöv
;

283  
i
;

285 
	}
}

287 
	$video_thus_˛i_thªad
(*
¨g
)

289 
ªt
;

290 
FILE
 *
fd
;

291 
«me
[32];

292 
buf
[64];

293 
i
 = 0;

294 
cou¡
 = 0;

295 
u32
 
m£c
 = 0;

296 
__¥evõw_˛i_öfo
 *
˛i
 = (__¥evõw_˛i_öfÿ*)
¨g
;

299 
˛i
->
pöfo
.
ty≥
 = 
PREVIEW_TYPE
;

301 
fd
 = 
	`f›í
(
˛i
->
fûíame
[
i
], "r");

303 i‡(
fd
 =
NULL
) {

305 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "THUMBNAILS", "NOTIFY", 
CTP_OPEN_FILE_MSG
);

306 
îr2
;

309 i‡(!
	`is_vaûd_mov_fûe
(
fd
)) {

311 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_OPEN_FILE
, "THUMBNAILS", "NOTIFY", 
CTP_OPEN_FILE_MSG
);

312 
	`f˛o£
(
fd
);

313 
îr2
;

317 
˛i
->
pöfo
.
fd
 = fd;

318 
	`°r˝y
(
˛i
->
pöfo
.
fûe_«me
, cli->
fûíame
[0]);

320 i‡(
	`upd©e_d©a
(&
˛i
->
pöfo
)) {

321 
	`¥ötf
("get media info fail\n");

322 
îr2
;

325 
ªt
 = 
	`£nd_medü_∑ckë
(&
˛i
->
pöfo
);

327 i‡(
ªt
 <= 0) {

329 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "THUMBNAILS", "NOTIFY", 
CTP_NET_ERR_MSG
);

330 
îr2
;

332 
	`ö¸_d©e_time
(&
˛i
->
pöfo
.
time
, cli->
off£t
 / 1000);

335 i‡(
˛i
->
kûl_Êag
) {

336 
îr2
;

339 
i
 = 
	`föd_idr_‰ame
(&
˛i
->
pöfo
, cli->
off£t
);

343 
i
 = 
	`swôch_dúe˘_™d_fûe
(
˛i
);

345 i‡(
i
 < 0) {

346 
îr2
;

349 i‡((
cou¡
 + 1Ë=
˛i
->
num
) {

351 
	`£nd_íd_∑ckë
(&
˛i
->
pöfo
);

356 
ªt
 = 
	`£nd_d©e_∑ckë
(&
˛i
->
pöfo
, cli->
timeöv
 / 1000);

357 i‡(
ªt
 <= 0) {

358 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "THUMBNAILS", "NOTIFY", 
CTP_NET_ERR_MSG
);

359 
îr2
;

363 
ªt
 = 
	`£nd_video_∑ckë
(&
˛i
->
pöfo
, 
i
);

365 i‡(
ªt
 <= 0) {

367 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NET_ERR
, "THUMBNAILS", "NOTIFY", 
CTP_NET_ERR_MSG
);

368 
îr2
;

371 
cou¡
++;

372 
˛i
->
off£t
 +˛i->
timeöv
;

374 i‡(
˛i
->
num
 !0 && 
cou¡
 == cli->num) {

377 
	`•rötf
(
buf
, "status:%d", 1);

378 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "THUMBNAILS", "NOTIFY", 
buf
);

384 
îr2
:

385 i‡(
˛i
->
pöfo
.
öfo
.
°co_èb
 !
NULL
) {

386 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°co_èb
);

387 
˛i
->
pöfo
.
öfo
.
°co_èb
 = 
NULL
;

390 i‡(
˛i
->
pöfo
.
öfo
.
°sz_èb
 !
NULL
) {

391 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
°sz_èb
);

392 
˛i
->
pöfo
.
öfo
.
°sz_èb
 = 
NULL
;

395 i‡(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 !
NULL
) {

396 
	`‰ì
(
˛i
->
pöfo
.
öfo
.
audio_°co_èb
);

397 
˛i
->
pöfo
.
öfo
.
audio_°co_èb
 = 
NULL
;

401 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

402 
	`li°_dñ
(&
˛i
->
íåy
);

403 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

406 
	`sock_uƒeg
(
˛i
->
pöfo
.
sock
);

408 
	`‰ì
(
˛i
->
pöfo
.
d©a
);

409 
	`‰ì
(
˛i
);

413 
	}
}

416 
	$¸óã_≠p_thªad
(
√t_ªq
 *
ªq
, *
sock
, 
sockaddr_ö
 *
ªmŸe_addr
)

418 
«me
[32];

419 
u32
 
cou¡
 = 0;

421 
__¥evõw_˛i_öfo
 *
˛i
 = (__¥evõw_˛i_öfÿ*)
	`ˇŒoc
(1, (__preview_cli_info));

423 i‡(
˛i
 =
NULL
) {

424 
__îr1
;

429 
˛i
->
fûíame
 = 
ªq
->
¥e
.filename;

430 
˛i
->
pöfo
.
sock
 = sock;

434 
˛i
->
pöfo
.
d©a
 = (
u8
 *)
	`mÆloc
(
IMAGE_SIZE
);

436 i‡(
˛i
->
pöfo
.
d©a
 =
NULL
) {

438 
	`¥ötf
("Warn malloc fail,allocángan\n");

439 
	`m¶ìp
(200);

440 
˛i
->
pöfo
.
d©a
 = (
u8
 *)
	`mÆloc
(
IMAGE_SIZE
);

441 i‡(
˛i
->
pöfo
.
d©a
 !
NULL
) {

449 
˛i
->
pöfo
.
Àn
 = 
IMAGE_SIZE
;

453 
	`mem˝y
(&
˛i
->
ªmŸe_addr
,ÑemŸe_addr, (
sockaddr_ö
));

454 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

455 
	`li°_add_èû
(&
˛i
->
íåy
, &
¥evõw_öfo_h™dî
->
˛i_hód
);

456 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

457 
ªq
->
¥e
.
ty≥
) {

458 
PREVIEW
:

460 
	`•rötf
(
«me
, "¥evõw_˛i_%d", 
cou¡
++);

462 
	`thªad_f‹k
(
«me
, 24, 0x600, 0, &
˛i
->
pid
, 
video_¥evõw_˛i_thªad
, (*)cli);

466 
THUS
:

467 
˛i
->
num
 = 
ªq
->
¥e
.num;

468 
˛i
->
off£t
 = 
ªq
->
¥e
.offset;

469 
˛i
->
timeöv
 = 
ªq
->
¥e
.timeinv;

471 
	`•rötf
(
«me
, "thus_˛i_%x", 
ªmŸe_addr
->
sö_addr
.
s_addr
);

472 
	`thªad_f‹k
(
«me
, 24, 0x600, 0, &
˛i
->
pid
, 
video_thus_˛i_thªad
, (*)cli);

480 
	`‰ì
(
ªq
);

483 
__îr1
:

484 
	`‰ì
(
ªq
);

487 
	}
}

490 
	$video_¥evõw_ªq_h™dÀr2
(*
msg
)

492 
sockaddr_ö
 
ªmŸe_addr
;

493 
fd_£t
 
rd£t
;

494 
timevÆ
 
tv
 = {5, 0};

495 *
sock
 = 
NULL
;

496 
ªt
;

497 
buf
[64];

498 
sockÀn_t
 
addæí
 = (
ªmŸe_addr
);

499 i‡(
msg
 =
NULL
) {

500 
__îr1
;

504 
√t_ªq
 *
ªq
 = (√t_ªq *)
msg
;

505 
	`°r˝y
(
buf
, "status:0");

506 i‡(
ªq
->
¥e
.
ty≥
 =
PREVIEW
) {

507 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "MULTI_COVER_FIGURE", "NOTIFY", 
buf
);

508 } i‡(
ªq
->
¥e
.
ty≥
 =
THUS
) {

509 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_NO_ERR
, "THUMBNAILS", "NOTIFY", 
buf
);

513 
	`FD_ZERO
(&
rd£t
);

514 
	`FD_SET
(
	`sock_gë_sockë
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
), &
rd£t
);

516 
ªt
 = 
	`sock_£À˘
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
, &
rd£t
, 
NULL
, NULL, &
tv
);

517 i‡(
ªt
 < 0) {

518 
__îr1
;

519 } i‡(
ªt
 == 0) {

520 
	`puts
("acceptÅime out\n");

521 i‡(
ªq
->
¥e
.
ty≥
 =
PREVIEW
) {

522 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_REQUEST
, "MULTI_COVER_FIGURE", "NOTIFY", 
CTP_REQUEST_MSG
);

523 } i‡(
ªq
->
¥e
.
ty≥
 =
THUS
) {

524 
	`CTP_CMD_COMBINED
(
NULL
, 
CTP_REQUEST
, "THUMBNAILS", "NOTIFY", 
CTP_REQUEST_MSG
);

527 
	`‰ì
(
ªq
);

531 
sock
 = 
	`sock_ac˚±
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
, (
sockaddr
 *)&
ªmŸe_addr
, &
addæí
, 
NULL
, NULL);

533 i‡(
sock
 =
NULL
) {

534 
__îr1
;

537 i‡(
	`¸óã_≠p_thªad
(
ªq
, 
sock
, &
ªmŸe_addr
)) {

538 
__îr1
;

544 
__îr1
:

545 
	`sock_uƒeg
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
);

548 
	}
}

549 
	$¥e_thªad
(*
¨g
)

551 
	`video_¥evõw_ªq_h™dÀr2
(
¨g
);

552 
	}
}

554 
	$video_¥evõw_po°_msg
(
√t_ªq
 *
_ªq
)

556 
ªt
 = 0;

557 
u32
 
cou¡
 = 0;

558 
buf
[32];

559 
√t_ªq
 *
ªq
 = (√t_ªq *)
	`ˇŒoc
(1, (net_req));

561 i‡(
ªq
 =
NULL
) {

564 
	`mem˝y
(
ªq
, 
_ªq
, (
√t_ªq
));

565 
	`•rötf
(
buf
, "¥e_thªad%d", 
cou¡
++);

566 
ªt
 = 
	`thªad_f‹k
(
buf
, 25, 0x1000, 0, 0, 
¥e_thªad
, (*)
ªq
);

567 i‡(
ªt
 !
OS_NO_ERR
) {

568 
	`‰ì
(
ªq
);

573 
	}
}

577 
	$video_¥evõw_thªad
(*
¨g
)

579 
ªs
;

580 
u32
 
msg
[32];

583 
	`puts
("wait msg\n\n\n\n\n\n\n");

584 
ªs
 = 
	`os_èsk_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

585 
	`puts
("get msg gogogo\n");

587 i‡(
¥evõw_öfo_h™dî
->
kûl_Êag
) {

591 
ªs
) {

592 
OS_TASKQ
:

593 
msg
[0]) {

594 
Q_EVENT
:

597 
Q_MSG
:

598 
	`video_¥evõw_ªq_h™dÀr
((*Ë
msg
[1]);

599 
	`puts
("1111111111111111111111111\n\n\n\n\n\n\n\n");

608 
OS_TIMER
:

611 
OS_TIMEOUT
:

617 
	}
}

620 
¥evõw_öô
(
u16
 
p‹t
, 
	$ˇŒback
(*
¥iv
, 
u8
 *
d©a
, 
size_t
 
Àn
))

623 
ªt
;

624 
sockaddr_ö
 
de°_addr
;

625 
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
 = 
	`sock_ªg
(
AF_INET
, 
SOCK_STREAM
, 0, 
NULL
, NULL);

627 i‡(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
 =
NULL
) {

628 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__func__
, 
__LINE__
);

629 
EXIT
;

632 i‡(
	`sock_£t_ªu£addr
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
)) {

633 
	`¥ötf
("%†%d->Eº‹ i¿sock_£t_ªu£addr(),î∫o=%d\n", 
__func__
, 
__LINE__
, 
î∫o
);

634 
EXIT
;

637 
de°_addr
.
sö_Ámûy
 = 
AF_INET
;

638 
de°_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

639 
de°_addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

640 
ªt
 = 
	`sock_böd
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
, (
sockaddr
 *)&
de°_addr
, (sockaddr));

642 i‡(
ªt
) {

643 
	`¥ötf
("%†%d->Eº‹ i¿böd(),î∫o=%d\n", 
__func__
, 
__LINE__
, 
î∫o
);

644 
EXIT
;

647 
ªt
 = 
	`sock_li°í
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
, 0xff);

649 i‡(
ªt
) {

650 
	`¥ötf
("%†%d->Eº‹ i¿li°í()\n", 
__func__
, 
__LINE__
);

651 
EXIT
;

654 
	`os_muãx_¸óã
(&
¥evõw_öfo_h™dî
->
muãx
);

655 
	`INIT_LIST_HEAD
(&
¥evõw_öfo_h™dî
->
˛i_hód
);

661 
EXIT
:

662 
	`sock_uƒeg
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
);

663 
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
 = 
NULL
;

665 
	}
}

666 
	$video_¥evõw_™d_thus_Æl_disc⁄√˘
()

668 
	`puts
("---------------video_cli_disconnect\n\n");

669 
__¥evõw_˛i_öfo
 *
˛i
 = 
NULL
;

670 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

671 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

672 i‡(
	`li°_em±y
(&
¥evõw_öfo_h™dî
->
˛i_hód
)) {

673 
	`puts
("video_preview cli isÉmtry\n");

674 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

678 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
¥evõw_öfo_h™dî
->
˛i_hód
) {

679 
˛i
 = 
	`li°_íåy
(
pos
, 
__¥evõw_˛i_öfo
, 
íåy
);

680 
˛i
->
kûl_Êag
 = 1;

681 
	`sock_£t_quô
(
˛i
->
pöfo
.
sock
);

683 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

686 
	}
}

687 
	$¥evõw_unöô
()

691 
	`video_¥evõw_™d_thus_Æl_disc⁄√˘
();

692 
	`sock_uƒeg
(
¥evõw_öfo_h™dî
->
video_¥evõw_sock_hdl
);

696 
	}
}

698 
	$video_˛i_¶ide
(
sockaddr_ö
 *
d°_addr
, 
u8
 
dúe˘
)

701 
__¥evõw_˛i_öfo
 *
˛i
 = 
NULL
;

702 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

703 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

704 i‡(
	`li°_em±y
(&
¥evõw_öfo_h™dî
->
˛i_hód
)) {

705 
	`puts
("video_preview cli isÉmtry\n");

706 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

710 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
¥evõw_öfo_h™dî
->
˛i_hód
) {

711 
˛i
 = 
	`li°_íåy
(
pos
, 
__¥evõw_˛i_öfo
, 
íåy
);

713 i‡(
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr

714 && 
˛i
->
ªmŸe_addr
.
sö_p‹t
 =
d°_addr
->sin_port) {

715 
˛i
->
dúe˘
 = direct;

716 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

721 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

724 
	}
}

725 
	$video_¥evõw_™d_thus_disc⁄√˘
(
sockaddr_ö
 *
d°_addr
)

728 
__¥evõw_˛i_öfo
 *
˛i
 = 
NULL
;

729 
li°_hód
 *
pos
 = 
NULL
, *
node
 = NULL;

731 
	`os_muãx_≥nd
(&
¥evõw_öfo_h™dî
->
muãx
, 0);

732 i‡(
	`li°_em±y
(&
¥evõw_öfo_h™dî
->
˛i_hód
)) {

733 
	`puts
("video_preview cli isÉmtry\n");

734 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

739 
	`li°_f‹_óch_ß„
(
pos
, 
node
, &
¥evõw_öfo_h™dî
->
˛i_hód
) {

740 
˛i
 = 
	`li°_íåy
(
pos
, 
__¥evõw_˛i_öfo
, 
íåy
);

742 i‡(
d°_addr
 !
NULL


743 && 
˛i
->
ªmŸe_addr
.
sö_addr
.
s_addr
 =
d°_addr
->sin_addr.s_addr) {

744 
˛i
->
kûl_Êag
 = 1;

745 
	`sock_£t_quô
(
˛i
->
pöfo
.
sock
);

746 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

750 
	`os_muãx_po°
(&
¥evõw_öfo_h™dî
->
muãx
);

751 
	`¥ötf
("%†nŸ föd it\n", 
__func__
);

754 
	}
}

	@app/net/wifi_app_task.c

2 
	~"£rvî/wifi_c⁄√˘.h
"

3 
	~"lwù/sockës.h
"

4 
	~"lwù/√tdb.h
"

5 
	~"os/os_com∑t.h
"

6 
	~"wifi_ext.h
"

7 
	~"sy°em/öô.h
"

8 
	~"lwù.h
"

9 
	~"£rvî/˘p_£rvî.h
"

10 
	~"£rvî/√t_£rvî.h
"

11 
	~"devi˚/devi˚.h
"

12 
	~"sy°em/≠p_c‹e.h
"

13 
	~"£rvî/£rvî_c‹e.h
"

14 
	~"a˘i⁄.h
"

15 
	~"sy°em/timî.h
"

16 
	~"hâp/hâp_£rvî.h
"

17 
	~"asm/debug.h
"

18 
	~"≠p_c⁄fig.h
"

19 
	~"·p£rvî/°upid-·pd.h
"

20 
	~"devi˚/wifi_dev.h
"

21 
	~"£rvî/√tw‹k_mssdp.h
"

22 
	~"°ªamög_medü_£rvî/„ni˚_c⁄fig.h
"

23 
	~"sy°em/timî.h
"

24 
	~"£rvî/video_π_t˝.h
"

25 
	~"£rvî/√t2video.h
"

26 
	~"p2p_dev.h
"

27 
	~"wifi_ext.h
"

29 
	~"d©aba£.h
"

30 
time_œp£
(*
h™dÀ
, 
time_out
);

32 
„ni˚_c⁄fig
 
	gc⁄f
;

33 
u£r_cmd_cb
(
cmd
, *
buf„r
, 
Àn
, *
¥iv
);

34 
£rvî
 *
	g˘p
 = 
NULL
;

35 
u8
 
	gmac_addr
[6];

36 
	gssid
[64];

37 *
	gwifi_dev
 = 
NULL
;

38 *
	g˛i_hdl
 = 
NULL
;

43 
˘p_£rvî_öfo
 
	g£rvî_öfo
 = {

44 .
˘p_vaûd
 = 
åue
,

45 .
	g˘p_p‹t
 = 
CTP_CTRL_PORT
,

46 .
	gcdp_vaûd
 = 
åue
,

47 .
	gcdp_p‹t
 = 
CDP_CTRL_PORT
,

48 .
	gk_Æive_ty≥
 = 
CTP_ALIVE
,

53 
	gbe°_ch
, 
	gÀa°_˙t
 = -1;

55 
	$gë_be°_ch_‚
(
ch
, 
˙t
)

57 i‡(
ch
 >= 12) {

60 i‡(
˙t
 < 
Àa°_˙t
) {

61 
Àa°_˙t
 = 
˙t
;

62 
be°_ch
 = 
ch
;

64 
	}
}

66 #i‡
deföed
 
CONFIG_NET_CLIENT


68 
video_disc⁄√˘_Æl_˛i
();

69 
	$wifi_ùc_°©e_cb
(*
¥iv
, 
⁄
)

71 i‡(
⁄
) {

73 
	`video_disc⁄√˘_Æl_˛i
();

76 
	}
}

80 #i‡
deföed
 
CONFIG_NET_SERVER


81 
ùc_c⁄√˘
();

82 
ùc_disc⁄√˘
();

83 
	$wifi_ùc_°©e_cb
(*
¥iv
, 
⁄
)

85 i‡(
⁄
) {

86 
	`ùc_c⁄√˘
();

88 
	`ùc_disc⁄√˘
();

91 
	}
}

96 
	$wifi_smp_c⁄√˘_èsk
(*
p
)

98 
cfg_öfo
 
öfo
;

99 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_WIFI_SMP_RESULT
, (
u32
)&
öfo
);

101 
öfo
.
mode
 = 
STA_MODE
;

102 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

103 
	}
}

105 
	$√tw‹k_u£r_ˇŒback
(*
√tw‹k_˘x
, 
NETWORK_EVENT
 
°©e
, *
¥iv
)

109 
cfg_öfo
 
öfo
;

111 
°©e
) {

113 
WIFI_EVENT_MODULE_INIT
:

116 
	`gpio_£t_hd
(
IO_PORTG_00
, 0);

117 
	`gpio_£t_hd
(
IO_PORTG_01
, 0);

118 
	`gpio_£t_hd
(
IO_PORTG_02
, 0);

119 
	`gpio_£t_hd
(
IO_PORTG_03
, 0);

120 
	`gpio_£t_hd
(
IO_PORTG_04
, 0);

121 
	`gpio_£t_hd
(
IO_PORTG_05
, 0);

127 
öfo
.
p‹t_°©us
 = 0;

128 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

129 
	`m¶ìp
(10);

130 
öfo
.
p‹t_°©us
 = 1;

131 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

133 
öfo
.
p‹t_°©us
 = 1;

134 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_CS
, (
u32
)&
öfo
);

136 
öfo
.
p‹t_°©us
 = 1;

137 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_WKUP
, (
u32
)&
öfo
);

139 
	`m¶ìp
(100);

141 
öfo
.
ssid
 = "wifi_camera_ac54_666";

142 
öfo
.
pwd
 = "12345678";

143 
öfo
.
mode
 = 
AP_MODE
;

144 
öfo
.
f‹˚_deÁu…_mode
 = 0;

145 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_DEFAULT_MODE
, (
u32
)&
öfo
);

148 
WIFI_EVENT_MODULE_START
:

149 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_START\n");

157 
	`πw_sˇn
();

158 
	`πw_sˇn
();

159 
	`πw_sˇn
();

160 
	`πw_sˇn
();

161 
	`πw_gë_be°_ch
((*
gë_be°_ch_‚
)(, ));

162 
	`πw_gë_be°_ch
(
gë_be°_ch_‚
);

163 
	`¥ötf
("ho°≠d_£t_wifi_ch™√»%d\r\n", 
be°_ch
);

164 
	`ho°≠d_£t_wifi_ch™√l
(
ch™√l
);

165 
	`ho°≠d_£t_wifi_ch™√l
(
be°_ch
);

170 #i‡
	`deföed
 (
WIFI_CAM_SUFFIX
)

172 
	`•rötf
(
ssid
, 
WIFI_CAM_PREFIX
 
WIFI_CAM_SUFFIX
);

175 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_MAC
, (
u32
)&
mac_addr
);

176 
	`•rötf
(
ssid
, 
WIFI_CAM_PREFIX
"%02x%02x%02x%02x%02x%02x"

177 , 
mac_addr
[0]

178 , 
mac_addr
[1]

179 , 
mac_addr
[2]

180 , 
mac_addr
[3]

181 , 
mac_addr
[4]

182 , 
mac_addr
[5]);

187 
öfo
.
ssid
 = ssid;

188 
öfo
.
ssid
 = "wifi_camera_ac54_666";

189 
öfo
.
pwd
 = "12345678";

190 
öfo
.
mode
 = 
AP_MODE
;

191 
öfo
.
f‹˚_deÁu…_mode
 = 1;

192 
	`dev_io˘l
(
wifi_dev
, 
DEV_SAVE_DEFAULT_MODE
, (
u32
)&
öfo
);

196 
WIFI_EVENT_MODULE_STOP
:

197 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_STOP\n");

200 
WIFI_EVENT_AP_START
:

201 
	`puts
("|network_user_callback->WIFI_EVENT_AP_START\n");

204 
WIFI_EVENT_AP_STOP
:

205 
	`puts
("|network_user_callback->WIFI_EVENT_AP_STOP\n");

208 
öfo
.
p‹t_°©us
 = 0;

209 
	`¥ötf
("---------DEV_SET_WIFI_POWER-OFF-----------\r\n");

210 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

211 
	`m¶ìp
(10);

212 
öfo
.
p‹t_°©us
 = 1;

213 
	`¥ötf
("---------DEV_SET_WIFI_POWER-ON-----------\r\n");

214 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

218 
WIFI_EVENT_STA_START
:

219 
	`puts
("|network_user_callback->WIFI_EVENT_STA_START\n");

221 
WIFI_EVENT_MODULE_START_ERR
:

222 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_START_ERR\n");

225 
WIFI_EVENT_STA_STOP
:

226 
	`puts
("|network_user_callback->WIFI_EVENT_STA_STOP\n");

228 
öfo
.
p‹t_°©us
 = 0;

229 
	`¥ötf
("---------DEV_SET_WIFI_POWER-OFF-----------\r\n");

230 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

231 
	`m¶ìp
(10);

232 
öfo
.
p‹t_°©us
 = 1;

233 
	`¥ötf
("---------DEV_SET_WIFI_POWER-ON-----------\r\n");

234 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

238 
WIFI_EVENT_STA_DISCONNECT
:

239 
	`puts
("|network_user_callback->WIFI_STA_DISCONNECT\n");

240 #i‡
deföed
 
CONFIG_NET_CLIENT


241 
	`wifi_ùc_°©e_cb
(
NULL
, 0);

245 
WIFI_EVENT_STA_SCAN_COMPLETED
:

249 
	`puts
("|network_user_callback->WIFI_STA_SCAN_COMPLETED\n");

251 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_STA_SSID_INFO
, (
u32
)&
öfo
);

252 
	`¥ötf
("°a_ssid_num->%d\n", 
öfo
.
°a_ssid_num
);

257 
WIFI_EVENT_STA_CONNECT_SUCC
:

258 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_WIFI_CHANNEL
, (
u32
)&
öfo
);

259 
	`¥ötf
("|√tw‹k_u£r_ˇŒback->WIFI_STA_CONNECT_SUCC,CH=%d\r\n", 
öfo
.
°a_ch™√l
);

263 
WIFI_EVENT_MP_TEST_START
:

264 
	`puts
("|network_user_callback->WIFI_EVENT_MP_TEST_START\n");

273 
WIFI_EVENT_MP_TEST_STOP
:

274 
	`puts
("|network_user_callback->WIFI_EVENT_MP_TEST_STOP\n");

277 
WIFI_EVENT_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID
:

278 
	`puts
("|network_user_callback->WIFI_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID\n");

281 
WIFI_EVENT_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL
:

282 
	`puts
("|network_user_callback->WIFI_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL\n");

285 
WIFI_EVENT_STA_NETWORK_STACK_DHCP_SUCC
:

286 
	`puts
("|network_user_callback->WIFI_EVENT_STA_NETWPRK_STACK_DHCP_SUCC\n");

289 
WIFI_EVENT_STA_NETWORK_STACK_DHCP_TIMEOUT
:

290 
	`puts
("|network_user_callback->WIFI_EVENT_STA_NETWPRK_STACK_DHCP_TIMEOUT\n");

293 
WIFI_EVENT_P2P_START
:

294 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_START\n");

296 
WIFI_EVENT_P2P_STOP
:

297 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_STOP\n");

299 
WIFI_EVENT_P2P_GC_DISCONNECTED
:

300 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_DISCONNECTED\n");

302 
WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_SUCC
:

303 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_SUCC\n");

305 
WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_TIMEOUT
:

306 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_TIMEOUT\n");

309 
WIFI_EVENT_SMP_CFG_TIMEOUT
:

310 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_TIMEOUT\n");

313 
WIFI_EVENT_SMP_CFG_COMPLETED
:

314 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_COMPLETED\n");

316 
	`thªad_f‹k
("wifi_smp_c⁄√˘_èsk", 10, 0x1000, 0, 0, 
wifi_smp_c⁄√˘_èsk
, 
NULL
);

318 
WIFI_EVENT_AP_ON_ASSOC
:

320 
ëh_addr
 *
hwaddr
 = (ëh_add∏*)
√tw‹k_˘x
;

321 
	`¥ötf
("WIFI_EVENT_AP_ON_ASSOC hwaddr = %02x:%02x:%02x:%02x:%02x:%02x \r\n\r\n",

322 
hwaddr
->
addr
[0], hwaddr->addr[1], hwaddr->addr[2], hwaddr->addr[3], hwaddr->addr[4], hwaddr->addr[5]);

328 
WIFI_EVENT_AP_ON_DISCONNECTED
:

329 
hwaddr
 = (
ëh_addr
 *)
√tw‹k_˘x
;

330 
	`¥ötf
("WIFI_EVENT_AP_ON_DISCONNECTED hwaddr = %02x:%02x:%02x:%02x:%02x:%02x \r\n\r\n",

331 
hwaddr
->
addr
[0], hwaddr->addr[1], hwaddr->addr[2], hwaddr->addr[3], hwaddr->addr[4], hwaddr->addr[5]);

341 #i‡
deföed
 
CONFIG_NET_SERVER


354 
	}
}

357 
	$wifi_£t_œn_£âög_öfo
()

359 
œn_£âög
 
œn_£âög_öfo
 = {

361 .
WIRELESS_IP_ADDR0
 = 192,

362 .
WIRELESS_IP_ADDR1
 = 168,

363 .
WIRELESS_IP_ADDR2
 = 1,

364 .
WIRELESS_IP_ADDR3
 = 1,

366 .
WIRELESS_NETMASK0
 = 255,

367 .
WIRELESS_NETMASK1
 = 255,

368 .
WIRELESS_NETMASK2
 = 255,

369 .
WIRELESS_NETMASK3
 = 0,

371 .
WIRELESS_GATEWAY0
 = 192,

372 .
WIRELESS_GATEWAY1
 = 168,

373 .
WIRELESS_GATEWAY2
 = 1,

374 .
WIRELESS_GATEWAY3
 = 1,

376 .
SERVER_IPADDR1
 = 192,

377 .
SERVER_IPADDR2
 = 168,

378 .
SERVER_IPADDR3
 = 1,

379 .
SERVER_IPADDR4
 = 1,

381 .
CLIENT_IPADDR1
 = 192,

382 .
CLIENT_IPADDR2
 = 168,

383 .
CLIENT_IPADDR3
 = 1,

384 .
CLIENT_IPADDR4
 = 2,

386 .
SUB_NET_MASK1
 = 255,

387 .
SUB_NET_MASK2
 = 255,

388 .
SUB_NET_MASK3
 = 255,

389 .
SUB_NET_MASK4
 = 0,

392 
cfg_öfo
 
öfo
;

393 
öfo
.
__œn_£âög_öfo
 = &
œn_£âög_öfo
;

394 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_LAN_SETTING
, (
u32
)&
öfo
);

395 
	}
}

398 
	$√t_≠p_öô
()

400 
˘p
 = 
	`£rvî_›í
("˘p_£rvî", (*)&
£rvî_öfo
);

402 i‡(!
˘p
) {

403 
	`¥ötf
("ctp server fail\n");

406 
	`puts
("http server init\n");

407 
	`hâp_gë_£rvî_öô
(
HTTP_PORT
);

412 #i‡
deföed
 
CONFIG_NET_CLIENT


418 
	`√tw‹k_mssdp_öô
();

420 
	`puts
("ftpd server init\n");

422 
	`°upid_·pd_öô
("MAXUSERS=2\nUSER=FTPX 12345678 0:/ 2 A\n", 
NULL
);

432 
	`π•_modify_uæ
(c⁄° *
u£r_cu°om_«me
, c⁄° *
u£r_cu°om_c⁄ã¡
);

433 *
u£r_cu°om_«me
 = "rt";

434 *
u£r_cu°om_c⁄ã¡
 =

445 
	`π•_modify_uæ
(
u£r_cu°om_«me
, 
u£r_cu°om_c⁄ã¡
);

449 
„ni˚_c⁄fig
 
c⁄f
;

450 
	`„ni˚_video_ªc_£tup
();

451 
	`„ni˚_video_ªc_exô
();

452 
	`„ni˚_video_ªc_öfo
(
„ni˚_sour˚_öfo
 * 
öfo
);

453 
	`°∫˝y
(
c⁄f
.
¥Ÿocﬁ
, "UDP", 3);

454 
c⁄f
.
exô
 = 
„ni˚_video_ªc_exô
;

455 
c⁄f
.
£tup
 = 
„ni˚_video_ªc_£tup
;

456 
c⁄f
.
öfo
 = 
„ni˚_video_ªc_öfo
;

457 
c⁄f
.
p‹t
 = 
RTSP_PORT
;

463 
	}
}

466 
	$√t_≠p_unöô
()

468 
	`puts
("ctp server init\n");

469 
	`£rvî_˛o£
(
˘p
);

471 
	`puts
("http server init\n");

472 
	`hâp_gë_£rvî_unöô
();

474 
	`¥evõw_unöô
();

476 
	`∂ayback_unöô
();

478 
	`puts
("ftpd server init\n");

479 
	`°upid_·pd_unöô
();

480 
	}
}

482 
	$wifi_⁄
()

484 
	`dev_io˘l
(
wifi_dev
, 
DEV_NETWORK_START
, 0);

486 
	}
}

489 
	$wifi_off
()

492 
	`dev_io˘l
(
wifi_dev
, 
DEV_NETWORK_STOP
, 0);

493 
	}
}

496 
	$k˝_dés_£nd_thªad1
(*
¨g
)

498 
	`puts
("\n\n\n\n\nkcp_dtls_send1_thread\n\n\n\n\n");

499 *
fd
 = 
¨g
;

500 *
buf
 = 
	`mÆloc
(1300 * 10);

502 
	`dev_ªad
(
fd
, 
buf
, 1300 * 10);

507 
	}
}

508 
	$k˝_dés_ªcv_thªad1
(*
¨g
)

510 
	`puts
("\n\n\n\n\nkcp_dtls_recv1_thread\n\n\n\n\n");

511 *
fd
 = 
¨g
;

513 *
buf
 = 
	`mÆloc
(1300 * 10);

515 
	`dev_ªad
(
fd
, 
buf
, 1300 * 10);

519 
	}
}

523 
øndom32
(
ty≥
);

524 
	$k˝_dés_£nd_thªad
(*
¨g
)

526 
	`puts
("kcp_dtls_send_thread\n");

527 
	`m¶ìp
(5000);

528 
p2p_f‹m©
 
f
;

529 
Àn
 = 0;

531 *
buf
 = 
	`mÆloc
(1300 * 10);

532 
	`mem£t
(
buf
, 0x55, 1300 * 10);

534 
f
.
ty≥
 = 
DATA_WITH_TLS1_2
 | 
DATA_WITH_KCP
;

535 
f
.
¡y≥
 = 
TLS_IS_CLIENT
;

536 
f
.
ªmŸe_addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("192.168.1.1");

537 
f
.
ªmŸe_addr
.
sö_p‹t
 = 
	`ht⁄s
(3478);

538 *
fd
 = 
	`dev_›í
("p2p", &
f
);

540 
	`dev_io˘l
(
fd
, 
P2PIOC_HANDSHARK
, 0);

543 
	`thªad_f‹k
("k˝_dés_£nd_thªad1", 22, 0x4000, 0, 0, 
k˝_dés_£nd_thªad1
, 
fd
);

546 
Àn
 = 
	`øndom32
(0) % (1300 * 9);

547 i‡(
Àn
 < 10) {

548 
Àn
 = 1000;

550 
	`dev_wrôe
(
fd
, 
buf
, 
Àn
);

554 
	}
}

556 
	$k˝_dés_ªcv_thªad
(*
¨g
)

559 
	`puts
("\n\n\n\n\nkcp_dtls_recv_thread\n\n\n\n\n");

560 
ªt
 = 0;

561 
p2p_f‹m©
 
f
;

562 
Àn
;

564 *
buf
 = 
	`mÆloc
(1300 * 10);

565 
f
.
ty≥
 = 
DATA_WITH_TLS1_2
 | 
DATA_WITH_KCP
;

566 
f
.
¡y≥
 = 
TLS_IS_SERVER
;

567 
f
.
loˇl_addr
.
sö_addr
.
s_addr
 = 
	`öë_addr
("192.168.1.2");

568 
f
.
loˇl_addr
.
sö_p‹t
 = 
	`ht⁄s
(3478);

569 *
fd
 = 
	`dev_›í
("p2p", &
f
);

571 
ª£t
:

572 
	`dev_io˘l
(
fd
, 
P2PIOC_SERVER_ACCEPT
, 0);

573 
ªt
 = 
	`dev_io˘l
(
fd
, 
P2PIOC_HANDSHARK
, 0);

574 i‡(
ªt
 == 1) {

575 
ª£t
;

578 
	`thªad_f‹k
("k˝_dés_ªcv_thªad1", 22, 0x4000, 0, 0, 
k˝_dés_ªcv_thªad1
, 
fd
);

580 
Àn
 = 
	`øndom32
(0) % (1300 * 9);

581 i‡(
Àn
 < 10) {

582 
Àn
 = 1000;

585 
	`dev_wrôe
(
fd
, 
buf
, 
Àn
);

591 
	}
}

594 
	$wifi_≠p_èsk
(*
¥iv
)

596 
îr
 = 0;

597 
timehdl
 = 0;

598 
cfg_öfo
 
öfo
 = {0};

600 
	`¥ötf
("\¿>>>>>>>> %†ru¬ög : %†<<<<<<<< \n", 
__func__
, 
¥iv
);

605 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

606 i‡(!
wifi_dev
) {

607 
	`¥ötf
(">>>>>>> wifi dev openÉrr !!!! <<<<<<<<\r\n");

612 
öfo
.
cb
 = 
√tw‹k_u£r_ˇŒback
;

613 
öfo
.
√t_¥iv
 = 
NULL
;

614 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_CB_FUNC
, (
u32
)&
öfo
);

617 
	`¥ötf
("\n >>>> DEV_SET_WIFI_POWER_SAVE<<<< \n");

618 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER_SAVE
, 0);

622 
	`¥ötf
("\n >>>> DEV_SET_WIFI_TX_PWR_BY_RATE<<< \n");

624 
öfo
.
tx_pwr_lmt_íabÀ
 = 0;

625 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_TX_PWR_LMT_ENABLE
, (
u32
)&
öfo
);

626 
öfo
.
tx_pwr_by_øã
 = 1;

627 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_TX_PWR_BY_RATE
, (
u32
)&
öfo
);

631 
	`¥ötf
("@@@@@ %† %d \n", 
__func__
, 
__LINE__
);

632 
	`wifi_£t_œn_£âög_öfo
();

633 
	`¥ötf
("@@@@@ %† %d \n", 
__func__
, 
__LINE__
);

635 
	`wifi_⁄
();

636 
	`¥ötf
("@@@@@ %† %d \n", 
__func__
, 
__LINE__
);

639 
öfo
.
p2p_rﬁe
 = 0;

640 
	`dev_io˘l
(
wifi_dev
, 
DEV_P2P_MODE
, (
u32
)&
öfo
);

650 
	`thªad_f‹k
("k˝_dés_£nd_thªad", 20, 0x4000, 0, 0, 
k˝_dés_£nd_thªad
, 
NULL
);

652 
	`thªad_f‹k
("k˝_dés_ªcv_thªad", 19, 0x4000, 0, 0, 
k˝_dés_ªcv_thªad
, 
NULL
);

663 i‡(
	`time_œp£
(&
timehdl
, 3 * 1000)) {

664 i‡(
	`wifi_moduÀ_is_öô
()) {

666 
	`¥ötf
("WIFI U%d KB/s, D%d KB/s\r\n", 
	`wifi_gë_u∂ﬂd_øã
(Ë/ 1024, 
	`wifi_gë_dow∆ﬂd_øã
() / 1024);

671 
	`m¶ìp
(2000);

672 
	`¥ötf
("taskÅest 1 ...\n");

676 
	}
}

678 
u8
 
	g∑øm_°r
[] = "create wifiÅhread ...";

679 
	$wúñess_√t_öô
()

681 
	`¥ötf
("wifiÉarly init \n\n\n");

682 
	`thªad_f‹k
("wifi_≠p_èsk", 20, 0x1000, 256, 0, 
wifi_≠p_èsk
, 
∑øm_°r
);

684 
	}
}

686 #i‡
deföed
 
CONFIG_WIFI_ENABLE


688 
œã_öôˇŒ
(
wúñess_√t_öô
);

692 
	$DUMP_PORT
()

694  
_DUMP_PORT
;

695 
	}
}

697 
	$FORWARD_PORT
()

699  
_FORWARD_PORT
;

700 
	}
}

702 
	$BEHIND_PORT
()

704  
_BEHIND_PORT
;

705 
	}
}

707 c⁄° *
	$gë_ªc_∑th_1
()

709  
CONFIG_REC_PATH_1
;

710 
	}
}

711 c⁄° *
	$gë_ªc_∑th_2
()

713  
CONFIG_REC_PATH_2
;

714 
	}
}

715 c⁄° *
	$gë_roŸ_∑th
()

717  
CONFIG_ROOT_PATH
;

718 
	}
}

720 
cfg_öfo
 
	gwifi_öfo
;

721 *
	$gë_wifi_ssid
()

723 
wifi_öfo
.
mode
 = 
NONE_MODE
;

724 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
wifi_öfo
);

725  
wifi_öfo
.
ssid
;

726 
	}
}

729 *
	$gë_wifi_pwd
()

731 
wifi_öfo
.
mode
 = 
NONE_MODE
;

732 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
wifi_öfo
);

733  
wifi_öfo
.
pwd
;

734 
	}
}

737 #i‡
deföed
 
CONFIG_NET_SERVER


738 
	$dh˝_ch¨ge_devi˚_evít_h™dÀr
(
sys_evít
 *
evít
)

740 i‡(!
	`°∫cmp
(
evít
->
¨g
, "dhcp_srv", 8)) {

741 i‡(
evít
->
u
.
dev
.evíà=
DEVICE_EVENT_CHANGE
) {

742 
	`wifi_ùc_°©e_cb
(
NULL
, 1);

746 
	}
}

747 
SYS_EVENT_HANDLER
(
SYS_DEVICE_EVENT
, 
dh˝_ch¨ge_devi˚_evít_h™dÀr
, 0);

	@app/sd_speed_test.c

1 
	~"sy°em/ö˛udes.h
"

2 
	~"≠p_c⁄fig.h
"

4 
	#FILE_SIZE
 (200 * 1024 * 1024)

	)

6 
	ssd_ã°_hdl
 {

7 
	mid
;

8 
	mã°_time
;

9 
OS_SEM
 
	m£m
;

10 
OS_SEM
 
	m£m_íd
;

13 
	$sd_•ìd_èsk
(*
p
)

15 
FILE
 *
fûe
;

16 
u8
 
buf
[1024];

17 
u32
 
°¨t
 = 
jiffõs
;

18 
vfs_∑πôi⁄
 *
∑π
;

19 
sd_ã°_hdl
 *
hdl
 = (sd_ã°_hd»*)
p
;

21 
∑π
 = 
	`fgë_∑πôi⁄
(
CONFIG_ROOT_PATH
);

23 i‡(
hdl
->
id
 == 0) {

24 
fûe
 = 
	`f›í
(
CONFIG_STORAGE_PATH
"/C/speed0.bin", "w+");

26 
fûe
 = 
	`f›í
(
CONFIG_STORAGE_PATH
"/C/speed1.bin", "w+");

28 i‡(!
fûe
) {

29 
__íd
;

31 
u32
 
time
 = 
jiffõs
;

32 
Àn
 = 
	`f£ek
(
fûe
, 
FILE_SIZE
, 
SEEK_SET
);

33 i‡(
Àn
 <= 0) {

34 
__íd
;

36 
	`f£ek
(
fûe
, 0, 
SEEK_SET
);

38 
size
 = 
FILE_SIZE
 / 1024 / 
∑π
->
˛u°_size
 / 128 / 2;

40 
	`puts
("speed_test: writing\n");

42 
i
 = 0; i < 
FILE_SIZE
; i += 1024) {

43 
Àn
 = 
	`fwrôe
(
fûe
, 
buf
, 1024);

44 i‡(
Àn
 != 1024) {

47 
size
 += 1;

50 
	`log_d
("wrôe_•ìd: %dKB/s\n", 
size
 / ((
jiffõs
 - 
time
) * 2 / 1000));

52 
time
 = 
jiffõs
;

53 
	`f£ek
(
fûe
, 0, 
SEEK_SET
);

54 
i
 = 0; i < 
FILE_SIZE
; i += 1024) {

55 
Àn
 = 
	`‰ód
(
fûe
, 
buf
, 1024);

56 i‡(
Àn
 != 1024) {

60 
	`log_d
("ªad_•ìd: %dKB/s\n", 
FILE_SIZE
 / 1024 / ((
jiffõs
 - 
time
) / 2 / 1000));

62 
	`f˛o£
(
fûe
);

63 i‡(
hdl
->
id
 == 0) {

64 
	`fdñëe_by_«me
(
CONFIG_STORAGE_PATH
"/C/speed0.bin");

66 
	`fdñëe_by_«me
(
CONFIG_STORAGE_PATH
"/C/speed1.bin");

69 
__íd
:

70 
	`os_£m_po°
(&
hdl
->
£m
);

71 
	`os_£m_≥nd
(&
hdl
->
£m_íd
, 0);

73 
	}
}

77 
	$sd_•ìd_ã°
(
fûe_num
, 
ã°_£c
)

79 
i
;

80 
sd_ã°_hdl
 
hdl
[2];

82 i‡(
fûe_num
 == 0 || file_num > 2) {

83  -
EINVAL
;

86 i‡(
ã°_£c
 < 0 ||Åest_sec > 30) {

87 
ã°_£c
 = 15;

90 
i
 = 0; i < 2; i++) {

91 
hdl
[
i
].
id
 = i;

92 
hdl
[
i
].
ã°_time
 = 
ã°_£c
 * 1000;

93 
	`os_£m_¸óã
(&
hdl
[
i
].
£m
, 0);

94 
	`os_£m_¸óã
(&
hdl
[
i
].
£m_íd
, 0);

97 i‡(
fûe_num
 >= 1) {

98 
	`os_èsk_¸óã
(
sd_•ìd_èsk
, (*)&
hdl
[0], 10, 1024, 0, "sd_speed_0");

100 i‡(
fûe_num
 >= 2) {

101 
	`os_èsk_¸óã
(
sd_•ìd_èsk
, (*)&
hdl
[1], 10, 1024, 0, "sd_speed_1");

104 
i
 = 0; i < 
fûe_num
; i++) {

105 
	`os_£m_≥nd
(&
hdl
[
i
].
£m
, 0);

107 i‡(
fûe_num
 >= 1) {

108 
	`èsk_kûl
("sd_speed_0");

110 i‡(
fûe_num
 >= 2) {

111 
	`èsk_kûl
("sd_speed_1");

115 
	}
}

	@app/wifi_story_machine/app_database.c

1 
	~"sy°em/ö˛udes.h
"

3 
	~"ªs.h
"

4 
	~"≠p_d©aba£.h
"

5 
	~"≠p_c⁄fig.h
"

8 
	#CN_PA
 ((0xA9BE << 16Ë| ('A' << 8Ë| ('B' << 0))

	)

9 
	#CN_PB
 (('C' << 24Ë| ('D' << 16Ë| ('E' << 8Ë| ('F' << 0))

	)

18 c⁄° 
db_èbÀ
 
	g≠p_c⁄fig_èbÀ
[] = {

28 
	$≠p_£t_c⁄fig
(
öã¡
 *
ô
, c⁄° 
≠p_cfg
 *
cfg
, 
size
)

30 
i
;

32 
	`¥ötf
("≠p_£t_c⁄fig: %s, %d\n", 
ô
->
d©a
, it->
exd©a
);

34 
i
 = 0; i < 
size
; i++) {

35 i‡(!
	`°rcmp
(
ô
->
d©a
, 
cfg
[
i
].
èbÀ
)) {

36 i‡(
cfg
[
i
].
£t
) {

37 
îr
 = 
cfg
[
i
].
	`£t
(
ô
->
exd©a
);

38 i‡(
îr
) {

39  
îr
;

42 
	`db_upd©e
(
cfg
[
i
].
èbÀ
, 
ô
->
exd©a
);

47  -
EINVAL
;

48 
	}
}

54 
	$≠p_c⁄fig_öô
()

56 
îr
;

58 #i‡
deföed
 
CONFIG_DATABASE_2_RTC


59 
îr
 = 
	`db_¸óã
("rtc");

60 
	`ASSERT
(
îr
 == 0, "open deviceÑtc faild\n");

61 #ñi‡
deföed
 
CONFIG_DATABASE_2_FLASH


62 
îr
 = 
	`db_¸óã
("vm");

63 
	`ASSERT
(
îr
 == 0, "open device vm faild\n");

68  
	`db_¸óã_èbÀ
(
≠p_c⁄fig_èbÀ
, 
	`ARRAY_SIZE
(app_config_table));

69 
	}
}

70 
__öôˇŒ
(
≠p_c⁄fig_öô
);

	@app/wifi_story_machine/app_main.c

1 
	~"sy°em/ö˛udes.h
"

2 
	~"£rvî/ui_£rvî.h
"

3 
	~"a˘i⁄.h
"

4 
	~"™i_°yÀ.h
"

5 
	~"°yÀ.h
"

6 
	~"ªs_vî.h
"

7 
	~"≠p_c⁄fig.h
"

8 
	~"°‹age_devi˚.h
"

9 
	~"gíîic/log.h
"

10 
	~"mem_Àak_ã°.h
"

14 
u32
 
	g•ö_lock_˙t
[2] = {0};

16 
upgøde_dëe˘
(c⁄° *
sdˇrd_«me
);

20 c⁄° 
èsk_öfo
 
	gèsk_öfo_èbÀ
[] = {

47 #ifde‡
CONFIG_UI_ENABLE


51 
	$™im©i⁄_∂ay_íd
(*
_ui
)

53 
£rvî
 *
ui
 = (£rvî *)
_ui
;

55 
	`£rvî_˛o£
(
ui
);

60 *
imd
 = 
	`dev_›í
("imd", 
NULL
);

61 i‡(
imd
) {

62 
	`dev_io˘l
(
imd
, 
IMD_SET_COLOR_CFG
, (
u32
)"scr_auto.bin");

63 
	`dev_˛o£
(
imd
);

70 
	`sys_key_evít_íabÀ
();

71 
	`sys_touch_evít_íabÀ
();

73 
	}
}

78 
	$powî_off_∂ay_íd
(*
_ui
)

80 
£rvî
 *
ui
 = (£rvî *)
_ui
;

81 
u32
 
∑rk_í
;

83 i‡(
ui
) {

84 
	`£rvî_˛o£
(
ui
);

87 
	`sys_powî_£t_p‹t_wakeup
("wkup_usb", 1);

88 
	`sys_powî_powîoff
(0);

89 
	}
}

93 
	$maö_key_evít_h™dÀr
(
key_evít
 *
key
)

95 
öã¡
 
ô
;

96 
≠∂iˇti⁄
 *
≠p
;

98 
key
->
evít
) {

99 
KEY_EVENT_CLICK
:

100 
key
->
vÆue
) {

101 
KEY_MODE
:

104  
Ál£
;

107 
KEY_EVENT_LONG
:

110  
Ál£
;

113  
åue
;

114 
	}
}

116 
u8
 
gë_usb_ö_°©us
();

117 
	$maö_dev_evít_h™dÀr
(
sys_evít
 *
evít
)

119 
öã¡
 
ô
;

120 
≠∂iˇti⁄
 *
≠p
;

122 
	`öô_öã¡
(&
ô
);

123 
≠p
 = 
	`gë_cuºít_≠p
();

125 
evít
->
u
.
dev
.event) {

126 
DEVICE_EVENT_IN
:

128 
DEVICE_EVENT_OUT
:

130 
DEVICE_EVENT_CHANGE
:

134 
	}
}

141 
	$≠p_deÁu…_evít_h™dÀr
(
sys_evít
 *
evít
)

143 
evít
->
ty≥
) {

144 
SYS_KEY_EVENT
:

145 
	`maö_key_evít_h™dÀr
(&
evít
->
u
.
key
);

147 
SYS_TOUCH_EVENT
:

149 
SYS_DEVICE_EVENT
:

150 
	`maö_dev_evít_h™dÀr
(
evít
);

152 
SYS_NET_EVENT
:

155 
	`ASSERT
(0, "unknowÉvíàty≥: %s\n", 
__func__
);

158 
	}
}

160 #ifde‡
RTOS_STACK_CHECK_ENABLE


161 
	$πos_°ack_check_func
(*
p
)

163 *
pWrôeBuf„r
 = 
	`mÆloc
(2048);

164 i‡(!
pWrôeBuf„r
) {

167 
	`vTaskLi°
(*
pcWrôeBuf„r
);

168 
	`vTaskLi°
(
pWrôeBuf„r
);

169 
	`¥ötf
(" \n\¡ask_«mêÅask_°©ê¥i‹ôy sèckÅask_num\n%s\n", 
pWrôeBuf„r
);

170 
	`‰ì
(
pWrôeBuf„r
);

172 
	`mÆloc_°©s
();

173 
	`mÆloc_debug_show
();

175 
	}
}

178 
£t_duî_∑ckage_öfo
(c⁄° *
¥odu˘
,

179 c⁄° *
b©ch
,

180 c⁄° *
os_«me
,

181 c⁄° *
devñ›î
,

182 c⁄° *
os_vîsi⁄
,

183 c⁄° *
°aged_vîsi⁄
);

188 
	$≠p_maö
()

190 
öã¡
 
ô
;

191 
îr
;

193 i‡(!
	`fdú_exi°
("mnt/spiflash")) {

194 
	`mou¡
("•iÊash", "m¡/•iÊash", "sdfûe", 0, 
NULL
);

197 
	`mou¡_sd_to_fs
(
SDX_DEV
);

199 #ifde‡
CONFIG_DISPLAY_ENABLE


200 
	`lcd_backlight_˘æ
(
åue
);

211 #ifde‡
CONFIG_UI_ENABLE


212 
ui_°yÀ
 
°yÀ
;

214 
°yÀ
.
fûe
 = "mnt/spiflash/audlogo/ani.sty";

215 
°yÀ
.
vîsi⁄
 = 
ANI_UI_VERSION
;

217 
£rvî
 *
ui
 = 
	`£rvî_›í
("ui_£rvî", &
°yÀ
);

218 i‡(
ui
) {

219 
uúeq
 
ªq
;

221 
ªq
.
show
.
id
 = 
ANI_ID_PAGE_POWER_ON
;

222 
	`£rvî_ªque°_async
(
ui
, 
UI_REQ_SHOW_SYNC
 | 
REQ_COMPLETE_CALLBACK
, &
ªq
,

223 
™im©i⁄_∂ay_íd
, 
ui
);

226 
	`sys_key_evít_íabÀ
();

227 
	`sys_touch_evít_íabÀ
();

230 
	`sys_powî_auto_shutdown_°¨t
(
	`db_£À˘
("aff") * 60);

231 
	`sys_powî_ch¨gî_off_shutdown
(
PWR_DELAY_INFINITE
);

234 
	`öô_öã¡
(&
ô
);

235 
ô
.
«me
 = "app_music";

236 
ô
.
a˘i⁄
 = 
ACTION_MUSIC_PLAY_MAIN
;

237 
	`°¨t_≠p
(&
ô
);

239 #ifde‡
RTOS_STACK_CHECK_ENABLE


240 
	`sys_timî_add
(
NULL
, 
πos_°ack_check_func
, 60 * 1000);

243 #ifde‡
CONFIG_DUER_SDK_ENABLE


244 
fúmw¨e_vîsi⁄
[16];

245 
	`£t_duî_∑ckage_öfo
("WIFI_STORY", "12", "FreeRTOS", "xueyong", "0.0.0.0", "0.0.0.0");

246 i‡(
	`db_£À˘_buf„r
(9, 
fúmw¨e_vîsi⁄
, 16) > 0) {

247 i‡((
u8
)
fúmw¨e_vîsi⁄
[0] < 16) {

248 
fúmw¨e_vîsi⁄
[firmware_version[0] + 1] = 0;

249 
	`£t_duî_∑ckage_öfo
("WIFI_STORY", "12", "FªeRTOS", "xuey⁄g", 
fúmw¨e_vîsi⁄
 + 1, firmware_version + 1);

250 
	`¥ötf
("fúmw¨e_vîsi⁄ : %s", 
fúmw¨e_vîsi⁄
 + 1);

254 
	}
}

	@app/wifi_story_machine/app_music.c

1 
	~"≠p_music.h
"

2 
	~"sy°em/ö˛udes.h
"

3 
	~"£rvî/audio_£rvî.h
"

4 
	~"≠p_c⁄fig.h
"

5 
	~"a˘i⁄.h
"

6 
	~"°‹age_devi˚.h
"

7 
	~"key_voi˚.h
"

8 
	~"Àd_eyes.h
"

9 
	~"£rvî/Àd_ui_£rvî.h
"

11 #ifde‡
CONFIG_NET_ENABLE


12 
	~"wech©/wech©_£rvî.h
"

13 
	~"√tw‹k_dow∆ﬂd/√t_dow∆ﬂd.h
"

14 
	~"£rvî/ai_£rvî.h
"

18 
	mLISTEN_STATE_STOP
,

19 
	mLISTEN_STATE_START
,

20 
	mLISTEN_STATE_RETURN_URL
,

25 
	#DEC_BUF_LEN
 12 * 1024

	)

27 
≠p_music_hdl
 
	gmusic_h™dÀr
;

29 
	#__this
 (&
music_h™dÀr
)

	)

32 
≠p_music_swôch_loˇl_devi˚
(c⁄° *
∑th
);

33 
≠p_music_∂ay_voi˚_¥om±
(c⁄° *
‚ame
, *
dec_íd_h™dÀr
);

35 c⁄° 
music_dec_›s
 
	gloˇl_music_dec_›s
;

38 c⁄° 
u8
 
	gdú_«me_ch¨s
[][8] = {

45 c⁄° *
	gvoi˚_¥om±_fûe
[] = {

52 
	$≠p_music_shutdown
(
¥iv
)

54 
	`sys_powî_powîoff
(0);

56 
	}
}

59 
	$Àd_ui_po°_msg
(c⁄° *
msg
, ...)

61 
Àd_uúeq
 
ªq
;

62 
va_li°
 
¨g±r
;

64 i‡(
__this
->
∂ay_voi˚_¥om±
) {

68 
	`va_°¨t
(
¨g±r
, 
msg
);

70 i‡(
__this
->
Àd_ui
) {

71 
ªq
.
msg
.
ª˚ivî
 = "gr202_led";

72 
ªq
.
msg
.msg = msg;

73 
ªq
.
msg
.
exd©a
 = 
¨g±r
;

75 
	`£rvî_ªque°
(
__this
->
Àd_ui
, 
LED_UI_REQ_MSG
, &
ªq
);

78 
	`va_íd
(
¨g±r
);

80 
	}
}

83 
	$£t_dec_íd_h™dÀr
(*
fûe
, *
h™dÀr
, 
¨g0
, 
¨g1
)

85 
__this
->
dec_íd_fûe
 = 
fûe
;

86 
__this
->
dec_íd_¨gs
[0] = 
¨g0
;

87 
__this
->
dec_íd_¨gs
[1] = 
¨g1
;

88 
__this
->
dec_íd_h™dÀr
 = 
h™dÀr
;

89 
	}
}

91 
	$do_dec_íd_h™dÀr
(*
fûe
)

93 i‡(
fûe
 =
__this
->
dec_íd_fûe
) {

94 
__this
->
dec_íd_fûe
 = 
NULL
;

95 i‡(
__this
->
dec_íd_h™dÀr
) {

96 i‡(
__this
->
dec_íd_¨gs
[1] == -1) {

97 (((*)())
__this
->
dec_íd_h™dÀr
)(__this->
dec_íd_¨gs
[0]);

99 (((*)(, ))
__this
->
dec_íd_h™dÀr
)(__this->
dec_íd_¨gs
[0],

100 
__this
->
dec_íd_¨gs
[1]);

104 
	}
}

106 c⁄° *
	$__gë_dú«me_fûe
(c⁄° *
«me
, 
Àn
)

108 
i
 = 0; i < 
	`ARRAY_SIZE
(
dú_«me_ch¨s
); i++) {

109 i‡(!
	`memcmp
(
dú_«me_ch¨s
[
i
], 
«me
, 
Àn
)) {

110  
voi˚_¥om±_fûe
[
i
];

113 
i
 = 0; i < 
	`ARRAY_SIZE
(
voi˚_¥om±_fûe
); i++) {

114 i‡(!
	`memcmp
(
«me
, 
voi˚_¥om±_fûe
[
i
], 3)) {

115  
voi˚_¥om±_fûe
[
i
];

119  
NULL
;

120 
	}
}

123 
	$__gë_dec_bªakpoöt
(
audio_dec_bªakpoöt
 *
bp
)

125 
îr
;

126 
audio_ªq
 
r
;

128 
bp
->
Àn
 = 0;

130 
r
.
dec
.
cmd
 = 
AUDIO_DEC_GET_BREAKPOINT
;

131 
îr
 = 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
r
);

132 i‡(
îr
) {

133  
îr
;

136 i‡(
r
.
dec
.
°©us
 =
AUDIO_DEC_START
) {

137 
	`mem˝y
(
bp
, &
r
.
dec
.bp, (*bp));

138 
	`put_buf
(
bp
->
d©a
, bp->
Àn
);

141  -
EFAULT
;

142 
	}
}

144 
	$__£t_dec_vﬁume
(
°ï
)

146 
audio_ªq
 
ªq
;

148 
vﬁume
 = 
__this
->vﬁumê+ 
°ï
;

149 i‡(
vﬁume
 < 0) {

150 
vﬁume
 = 0;

151 } i‡(
vﬁume
 > 100) {

152 
vﬁume
 = 100;

154 i‡(
vﬁume
 =
__this
->volume) {

155  -
EINVAL
;

157 
__this
->
vﬁume
 = volume;

159 
	`log_d
("£t_dec_vﬁume: %d\n", 
vﬁume
);

161 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_SET_VOLUME
;

162 
ªq
.
dec
.
vﬁume
 = volume;

163  
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

164 
	}
}

170 
	$loˇl_music_dec_∂ay_∑u£
(
u8
 
nŸify
)

172 
audio_ªq
 
r
;

174 
r
.
dec
.
cmd
 = 
AUDIO_DEC_PP
;

175 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
r
);

176 i‡(
r
.
dec
.
°©us
 =
AUDIO_DEC_START
) {

177 
	`Àd_ui_po°_msg
("dec_start");

179 
	`Àd_ui_po°_msg
("dec_pause");

183 
	}
}

185 
	$loˇl_music_dec_°›
(
ßve_bªakpoöt
)

187 
audio_ªq
 
ªq
;

188 
vfs_©å
 
©å
;

190 i‡(!
__this
->
fûe
) {

194 
__this
->
dec_íd_h™dÀr
 = 
NULL
;

196 
	`puts
("local_music_dec_stop\n");

198 
	`Àd_ui_po°_msg
("dec_stop");

199 i‡(
__this
->
∂ay_voi˚_¥om±
) {

200 
__this
->
∂ay_voi˚_¥om±
 = 0;

201 
	`sys_key_evít_íabÀ
();

204 i‡(
ßve_bªakpoöt
) {

205 i‡(0 =
	`__gë_dec_bªakpoöt
(&
__this
->
loˇl_bp
)) {

206 
__this
->
loˇl_bp_fûe
 = __this->
fûe
;

210 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

211 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

213 i‡(!
ßve_bªakpoöt
) {

214 
	`f˛o£
(
__this
->
fûe
);

216 
__this
->
fûe
 = 
NULL
;

219 
	}
}

225 
	$loˇl_music_dec_fûe
(*
fûe
, 
bªakpoöt
, *
h™dÀr
, 
¨g
)

227 
Àn
, 
îr
;

228 
«me
[128];

229 
audio_ªq
 
ªq
 = {0};

231 
	`puts
("app_music_dec_file\n");

234 i‡(
__this
->
dec_›s
) {

235 
__this
->
dec_›s
->
	`dec_°›
(0);

239 
	`£t_dec_íd_h™dÀr
(
fûe
, 
h™dÀr
, 
¨g
, -1);

241 i‡(!
bªakpoöt
) {

242 
ªq
.
dec
.
bp
.
Àn
 = 0;

244 
	`mem˝y
(&
ªq
.
dec
.
bp
, &
__this
->
loˇl_bp
, (
audio_dec_bªakpoöt
));

245 
__this
->
loˇl_bp
.
Àn
 = 0;

248 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_OPEN
;

249 
ªq
.
dec
.
vﬁume
 = 
__this
->volume;

250 
ªq
.
dec
.
ouçut_buf
 = 
NULL
;

251 
ªq
.
dec
.
ouçut_buf_Àn
 = 
DEC_BUF_LEN
;

252 
ªq
.
dec
.
fûe
 = (
FILE
 *)file;

253 
ªq
.
dec
.
ch™√l
 = 0;

254 
ªq
.
dec
.
ßm∂e_øã
 = 0;

255 
ªq
.
dec
.
¥i‹ôy
 = 1;

256 
ªq
.
dec
.
vfs_›s
 = 
NULL
;

257 
îr
 = 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

258 i‡(
îr
) {

259 
	`log_e
("audio_dec_›í:Éº = %d\n", 
îr
);

260 
	`f˛o£
((
FILE
 *)
fûe
);

261  
îr
;

265 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_START
;

266 
îr
 = 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

267 i‡(
îr
) {

268 
	`log_e
("audio_dec_°¨t:Éº = %d\n", 
îr
);

269 
	`f˛o£
((
FILE
 *)
fûe
);

270  
îr
;

272 
__this
->
fûe
 = (
FILE
 *)file;

273 
__this
->
dec_›s
 = &
loˇl_music_dec_›s
;

275 
	`Àd_ui_po°_msg
("dec_start");

276 
	`puts
("play_music_file: suss\n");

279 
	}
}

281 
	$loˇl_music_dec_swôch_fûe
(
f£l_mode
)

283 
i
 = 0;

284 
FILE
 *
fûe
 = 
NULL
;

286 i‡(!
__this
->
fsˇn
) {

287  -
ENOENT
;

291 
fûe
 = 
	`f£À˘
(
__this
->
fsˇn
, 
f£l_mode
, 0);

292 i‡(
fûe
) {

295 i‡(
f£l_mode
 =
FSEL_NEXT_FILE
) {

296 
f£l_mode
 = 
FSEL_FIRST_FILE
;

297 } i‡(
f£l_mode
 =
FSEL_PREV_FILE
) {

298 
f£l_mode
 = 
FSEL_LAST_FILE
;

302 } 
i
++ < 
__this
->
fsˇn
->
fûe_numbî
);

304 i‡(!
fûe
) {

305  -
ENOENT
;

308  
	`loˇl_music_dec_fûe
(
fûe
, 0, 
loˇl_music_dec_swôch_fûe
, 
FSEL_LAST_FILE
);

309 
	}
}

311 
	$loˇl_music_dec_swôch_dú
(
f£l_mode
)

313 
Àn
;

314 
i
 = 0;

315 
«me
[64];

316 
∑th
[128];

317 
FILE
 *
dú
;

318 
FILE
 *
fûe
 = 
NULL
;

320 
	`puts
("app_music_dec_switch_dir\n");

322 i‡(!
__this
->
loˇl_∑th
) {

323  
	`≠p_music_swôch_loˇl_devi˚
(
NULL
);

329 i‡(!
__this
->
dú_li°
) {

330 
__this
->
dú_li°
 = 
	`fsˇn
(__this->
loˇl_∑th
, "-d -sn");

331 i‡(!
__this
->
dú_li°
 || __this->dú_li°->
fûe_numbî
 == 0) {

332 
	`puts
("no_music_dir_find\n");

333  -
ENOENT
;

340 
__åy
:

342 
dú
 = 
	`f£À˘
(
__this
->
dú_li°
, 
f£l_mode
, 0);

343 i‡(
dú
) {

344 
i
++;

347 i‡(
f£l_mode
 =
FSEL_NEXT_FILE
) {

348 
f£l_mode
 = 
FSEL_FIRST_FILE
;

349 } i‡(
f£l_mode
 =
FSEL_PREV_FILE
) {

350 
f£l_mode
 = 
FSEL_LAST_FILE
;

352 
	`puts
("fselect_dir_faild\n");

353  -
ENOENT
;

355 } 
i
++ < 
__this
->
dú_li°
->
fûe_numbî
);

361 
Àn
 = 
	`fgë_«me
(
dú
, (
u8
 *)
«me
, (name));

362 i‡(
Àn
 > 0) {

363 c⁄° *
nŸe
 = 
	`__gë_dú«me_fûe
(
«me
, 
Àn
);

364 i‡(
nŸe
) {

365 
	`‚ame_to_∑th
(
∑th
, 
CONFIG_VOICE_PROMPT_FILE_PATH
, 
nŸe
, 
	`°æí
(note) + 1);

367 
	`‚ame_to_∑th
(
∑th
, 
CONFIG_VOICE_PROMPT_FILE_PATH
, 
«me
, 
	`°æí
(name) + 1);

369 
fûe
 = 
	`f›í
(
∑th
, "r");

370 i‡(!
fûe
) {

371 i‡(
i
 >
__this
->
dú_li°
->
fûe_numbî
) {

372  -
ENOENT
;

374 i‡(
f£l_mode
 =
FSEL_FIRST_FILE
) {

375 
f£l_mode
 = 
FSEL_NEXT_FILE
;

376 } i‡(
f£l_mode
 =
FSEL_LAST_FILE
) {

377 
f£l_mode
 = 
FSEL_PREV_FILE
;

379 
__åy
;

381 
	`loˇl_music_dec_fûe
(
fûe
, 0, 
loˇl_music_dec_swôch_fûe
, 
FSEL_FIRST_FILE
);

384 i‡(
__this
->
fsˇn
) {

385 
	`fsˇn_ªÀa£
(
__this
->
fsˇn
);

391 
	`‚ame_to_∑th
(
∑th
, 
__this
->
loˇl_∑th
, 
«me
, 
Àn
);

392 
__this
->
fsˇn
 = 
	`fsˇn
(
∑th
, "-tMP3WMAWAV -sn");

394 
	`f˛o£
(
dú
);

396 i‡(!
fûe
) {

397 
	`loˇl_music_dec_swôch_fûe
(
FSEL_FIRST_FILE
);

401 
	}
}

403 
	$loˇl_music_dec_bªakpoöt
(
¥iv
)

405 i‡(!
__this
->
fsˇn
) {

406  -
ENOENT
;

409 i‡(
__this
->
loˇl_bp
.
Àn
 == 0) {

413  
	`loˇl_music_dec_fûe
(
__this
->
loˇl_bp_fûe
, 1,

414 
loˇl_music_dec_swôch_fûe
, 
FSEL_NEXT_FILE
);

415 
	}
}

417 
	$loˇl_musci_dec_¥ogªss
(
time
)

420 
	}
}

422 
	$loˇl_music_dec_vﬁume
(
°ï
)

424  
	`__£t_dec_vﬁume
(
°ï
);

425 
	}
}

427 c⁄° 
music_dec_›s
 
	gloˇl_music_dec_›s
 = {

428 .
swôch_dú
 = 
loˇl_music_dec_swôch_dú
,

429 .
	gswôch_fûe
 = 
loˇl_music_dec_swôch_fûe
,

430 .
	gdec_fûe
 = 
loˇl_music_dec_fûe
,

431 .
	gdec_bªakpoöt
 = 
loˇl_music_dec_bªakpoöt
,

432 .
	gdec_∂ay_∑u£
 = 
loˇl_music_dec_∂ay_∑u£
,

433 .
	gdec_vﬁume
 = 
loˇl_music_dec_vﬁume
,

434 .
	gdec_¥ogªss
 = 
loˇl_musci_dec_¥ogªss
,

435 .
	gdec_°›
 = 
loˇl_music_dec_°›
,

441 
	$≠p_music_swôch_loˇl_devi˚
(c⁄° *
∑th
)

443 i‡(!
∑th
) {

444 i‡(
	`°‹age_devi˚_ªady
()) {

445 
∑th
 = 
CONFIG_MUSIC_PATH_SD
;

447 
∑th
 = 
CONFIG_MUSIC_PATH_FLASH
;

451 i‡(
__this
->
loˇl_∑th
 =
∑th
) {

454 i‡(
__this
->
dú_li°
) {

455 
	`fsˇn_ªÀa£
(
__this
->
dú_li°
);

456 
__this
->
dú_li°
 = 
NULL
;

459 
__this
->
loˇl_∑th
 = 
∑th
;

460 
	`loˇl_music_dec_swôch_dú
(
FSEL_FIRST_FILE
);

463 
	}
}

469 #ifde‡
CONFIG_NET_ENABLE


471 c⁄° 
music_dec_›s
 
	g√t_music_dec_›s
;

473 c⁄° 
audio_vfs_›s
 
	g√t_audio_dec_vfs_›s
 = {

474 .
‰ód
 = 
√t_dow∆ﬂd_ªad
,

475 .
	gf£ek
 = 
√t_dow∆ﬂd_£ek
,

476 .
	gÊí
 = 
√t_dow∆ﬂd_gë_fûe_Àn
,

479 
	$__√t_dow∆ﬂd_ªady
()

481 
__this
->
dow∆ﬂd_ªady
 = 
	`√t_dow∆ﬂd_check_ªady
(__this->
√t_fûe
);

482 i‡(
__this
->
dow∆ﬂd_ªady
) {

486 
	}
}

488 
	$√t_music_dec_∂ay_∑u£
(
u8
 
nŸify
)

490 
audio_ªq
 
r
;

491 
ai_ªq
 
ªq
;

493 
r
.
dec
.
cmd
 = 
AUDIO_DEC_PP
;

494 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
r
);

495 i‡(
r
.
dec
.
°©us
 =
AUDIO_DEC_START
) {

497 
	`√t_dow∆ﬂd_£t_µ
(
__this
->
√t_fûe
, 0);

498 
	`Àd_ui_po°_msg
("dec_start");

499 } i‡(
r
.
dec
.
°©us
 =
AUDIO_DEC_PAUSE
) {

501 
	`√t_dow∆ﬂd_£t_µ
(
__this
->
√t_fûe
, 1);

502 
	`Àd_ui_po°_msg
("dec_pause");

505 i‡(
nŸify
) {

506 
ªq
.
evt
.
evít
 = 
AI_EVENT_PLAY_PAUSE
;

507 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

508 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

512 
	}
}

515 
	$√t_music_dec_°›
(
ßve_bªakpoöt
)

517 
audio_ªq
 
r
;

518 
ai_ªq
 
ªq
;

520 
	`¥ötf
("√t_music_dec_°›: %d\n", 
ßve_bªakpoöt
);

522 i‡(!
__this
->
√t_fûe
) {

526 
__this
->
dec_íd_h™dÀr
 = 
NULL
;

528 
	`Àd_ui_po°_msg
("dec_stop");

530 
	`√t_dow∆ﬂd_buf_öa˘ive
(
__this
->
√t_fûe
);

532 i‡(
__this
->
waô_dow∆ﬂd
) {

536 
	`waô_com∂ëi⁄_dñ
(
__this
->
waô_dow∆ﬂd
);

537 
__this
->
waô_dow∆ﬂd
 = 0;

539 i‡(
ßve_bªakpoöt
) {

540 
uæ_Àn
 = 
	`°æí
(
__this
->
uæ
) + 1;

541 i‡(
uæ_Àn
 > 
__this
->
√t_bp
.url_len) {

542 i‡(
__this
->
√t_bp
.
uæ
) {

543 
	`‰ì
(
__this
->
√t_bp
.
uæ
);

545 
__this
->
√t_bp
.
uæ
 = 
	`mÆloc
(
uæ_Àn
);

546 i‡(!
__this
->
√t_bp
.
uæ
) {

547 
__this
->
√t_bp
.
uæ_Àn
 = 0;

549 
__this
->
√t_bp
.
uæ_Àn
 = url_len;

552 i‡(
__this
->
√t_bp
.
uæ
) {

553 i‡(0 =
	`__gë_dec_bªakpoöt
(&
__this
->
√t_bp
.
dec_bp
)) {

554 
__this
->
√t_bp
.
ai_«me
 = __this->ai_name;

555 
	`°r˝y
(
__this
->
√t_bp
.
uæ
, __this->url);

556 
__this
->
√t_bp
.
Âå
 = __this->√t_bp.
dec_bp
.fptr;

557 
	`log_d
("ßve_bªakpoöt: f±r=%x\n", 
__this
->
√t_bp
.
Âå
);

562 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

563 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
r
);

566 
	`√t_dow∆ﬂd_˛o£
(
__this
->
√t_fûe
);

567 
__this
->
√t_fûe
 = 
NULL
;

570 
	}
}

572 
	$√t_music_dec_íd
(
ßve_bp
)

574 
ai_ªq
 
ªq
;

576 
	`puts
("net_music_dec_end\n");

578 
	`√t_music_dec_°›
(
ßve_bp
);

583 
ªq
.
evt
.
evít
 = 
AI_EVENT_MEDIA_END
;

584 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

585  
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

586 
	}
}

590 
	$__√t_music_dec_fûe
(
bªakpoöt
)

592 
ai_ªq
 
r
;

593 
audio_ªq
 
ªq
;

595 
__this
->
waô_dow∆ﬂd
 = 0;

597 i‡(
__this
->
dow∆ﬂd_ªady
 < 0) {

599 
__îr
;

601 i‡(
__this
->
waô_swôch_fûe
) {

602 
	`puts
("del_wait_switch_file\n");

603 
	`sys_timeout_dñ
(
__this
->
waô_swôch_fûe
);

604 
__this
->
waô_swôch_fûe
 = 0;

606 i‡(
__this
->
∂ay_voi˚_¥om±
) {

607 
	`£t_dec_íd_h™dÀr
(
__this
->
fûe
, 
__√t_music_dec_fûe
, 
bªakpoöt
, -1);

611 
ªq
.
dec
.
dec_ty≥
 = 
	`√t_dow∆ﬂd_gë_medü_ty≥
(
__this
->
√t_fûe
);

612 i‡(
ªq
.
dec
.
dec_ty≥
 =
NULL
) {

613 
__îr
;

615 
	`¥ötf
("urc_fûe_ty≥: %s\n", 
ªq
.
dec
.
dec_ty≥
);

618 i‡(
bªakpoöt
 == 0) {

619 
ªq
.
dec
.
bp
.
Àn
 = 0;

621 
__this
->
ai_«me
 = __this->
√t_bp
.ai_name;

622 
	`mem˝y
(&
ªq
.
dec
.
bp
, &
__this
->
√t_bp
.
dec_bp
, (req.dec.bp));

623 
__this
->
√t_bp
.
dec_bp
.
Àn
 = 0;

626 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_OPEN
;

627 
ªq
.
dec
.
vﬁume
 = 
__this
->volume;

628 
ªq
.
dec
.
ouçut_buf
 = 
NULL
;

629 
ªq
.
dec
.
ouçut_buf_Àn
 = 
DEC_BUF_LEN
;

630 
ªq
.
dec
.
fûe
 = (
FILE
 *)
__this
->
√t_fûe
;

631 
ªq
.
dec
.
ch™√l
 = 0;

632 
ªq
.
dec
.
ßm∂e_øã
 = 0;

633 
ªq
.
dec
.
¥i‹ôy
 = 1;

634 
ªq
.
dec
.
vfs_›s
 = &
√t_audio_dec_vfs_›s
;

635 
îr
 = 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

636 i‡(
îr
) {

637 
__îr
;

640 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_START
;

641 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

643 
	`√t_dow∆ﬂd_£t_µ
(
__this
->
√t_fûe
, 0);

646 
	`Àd_ui_po°_msg
("dec_start");

650 
__îr
:

651 
	`puts
("play_net_music_faild\n");

653 
	`√t_dow∆ﬂd_˛o£
(
__this
->
√t_fûe
);

654 
__this
->
√t_fûe
 = 
NULL
;

656 
r
.
evt
.
evít
 = 
AI_EVENT_MEDIA_END
;

657 
r
.
evt
.
ai_«me
 = 
__this
->ai_name;

658 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
r
);

660  -
EFAULT
;

661 
	}
}

663 
	$√t_music_dec_fûe
(*
_uæ
, 
bªakpoöt
, *
h™dÀr
, 
¨g
)

665 
îr
;

666 
√t_dow∆ﬂd_∑rm
 
∑rm
;

668 i‡(
__this
->
dec_›s
) {

669 
__this
->
dec_›s
->
	`dec_°›
(0);

672 
	`puts
("net_download_open\n");

674 
	`mem£t
(&
∑rm
, 0, (
√t_dow∆ﬂd_∑rm
));

675 
∑rm
.
uæ
 = (*)
_uæ
;

676 
∑rm
.
¥io
 = 0;

677 
∑rm
.
cbuf_size
 = 100 * 1024;

678 
∑rm
.
timeout_mûl£c
 = 5000;

679 
∑rm
.
max_ªc⁄√˘_˙t
 = 5;

680 
∑rm
.
£ek_high_ønge
 = 0;

681 
∑rm
.
£ek_low_ønge
 = 
bªakpoöt
 ? 
__this
->
√t_bp
.
Âå
 : 0;

682 
îr
 = 
	`√t_dow∆ﬂd_›í
(&
__this
->
√t_fûe
, &
∑rm
);

683 i‡(
îr
) {

684 
	`log_e
("√t_dow∆ﬂd_›í:Éº = %d\n", 
îr
);

685  
îr
;

687 
__this
->
uæ
 = (c⁄° *)
_uæ
;

689 
	`£t_dec_íd_h™dÀr
(
__this
->
√t_fûe
, 
h™dÀr
, 
¨g
, -1);

694 
__this
->
waô_dow∆ﬂd
 = 
	`waô_com∂ëi⁄
(
__√t_dow∆ﬂd_ªady
,

695 ((*)(*))
__√t_music_dec_fûe
, (*)
bªakpoöt
);

697 
__this
->
dec_›s
 = &
√t_music_dec_›s
;

700 
	}
}

703 
	$√t_music_dec_swôch_fûe
(
f£l_mode
)

705 
îr
;

706 
audio_ªq
 
r
;

707 
ai_ªq
 
ªq
;

709 
	`puts
("net_music_dec_stop\n");

711 
	`√t_music_dec_°›
(0);

713 i‡(
f£l_mode
 =
FSEL_NEXT_FILE
) {

714 
ªq
.
evt
.
evít
 = 
AI_EVENT_NEXT_SONG
;

715 } i‡(
f£l_mode
 =
FSEL_PREV_FILE
) {

716 
ªq
.
evt
.
evít
 = 
AI_EVENT_PREVIOUS_SONG
;

721 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

722 
îr
 = 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

723 i‡(
îr
) {

727 
	`loˇl_music_dec_bªakpoöt
(0);

732 i‡(
__this
->
waô_swôch_fûe
 == 0) {

733 
__this
->
waô_swôch_fûe
 = 
	`sys_timeout_add
(
NULL
,

734 ((*)(*))
≠p_music_swôch_loˇl_devi˚
, 10000);

739 
	}
}

741 
	$√t_music_dec_swôch_dú
(
f£l_mode
)

744 
	}
}

746 
	$√t_music_dec_bªakpoöt
(
¥iv
)

748 
	`puts
("net_music_dec_breakpoint\n");

750 i‡(
__this
->
√t_bp
.
dec_bp
.
Àn
 == 0) {

751  -
ENOENT
;

753 
	`√t_music_dec_fûe
(
__this
->
√t_bp
.
uæ
, 1, 
√t_music_dec_íd
, 0);

756 
	}
}

758 
	$√t_music_dec_¥ogªss
(
£c
)

760 
ai_ªq
 
ªq
;

762 
ªq
.
evt
.
evít
 = 
AI_EVENT_PLAY_TIME
;

763 
ªq
.
evt
.
¥ogªss
 = 
£c
;

764 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

765 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

768 
	}
}

770 
	$√t_music_dec_vﬁume
(
°ï
)

772 
îr
;

773 
ai_ªq
 
ªq
;

775 
îr
 = 
	`__£t_dec_vﬁume
(
°ï
);

776 i‡(
îr
) {

777  
îr
;

779 
ªq
.
evt
.
evít
 = 
AI_EVENT_VOLUME_CHANGE
;

780 
ªq
.
evt
.
vﬁume
 = 
__this
->volume;

781 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

782  
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

783 
	}
}

786 c⁄° 
music_dec_›s
 
	g√t_music_dec_›s
 = {

787 .
swôch_dú
 = 
√t_music_dec_swôch_dú
,

788 .
	gswôch_fûe
 = 
√t_music_dec_swôch_fûe
,

789 .
	gdec_fûe
 = 
√t_music_dec_fûe
,

790 .
	gdec_bªakpoöt
 = 
√t_music_dec_bªakpoöt
,

791 .
	gdec_∂ay_∑u£
 = 
√t_music_dec_∂ay_∑u£
,

792 .
	gdec_vﬁume
 = 
√t_music_dec_vﬁume
,

793 .
	gdec_¥ogªss
 = 
√t_music_dec_¥ogªss
,

794 .
	gdec_°›
 = 
√t_music_dec_°›
,

798 
	$ai_£rvî_evít_h™dÀr
(*
¥iv
, 
¨gc
, *
¨gv
)

800 
¨gv
[0]) {

801 
AI_SERVER_EVENT_CONNECTED
:

802 i‡(!
	`°rcmp
((c⁄° *)
¨gv
[1], "wechat")) {

803 i‡(!
__this
->
wech©_c⁄√˘ed
) {

804 
__this
->
wech©_c⁄√˘ed
 = 1;

807 i‡(!
__this
->
ai_c⁄√˘ed
) {

808 
__this
->
ai_c⁄√˘ed
 = 1;

809 
	`≠p_music_∂ay_voi˚_¥om±
("002.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

813 
AI_SERVER_EVENT_DISCONNECTED
:

814 i‡(!
	`°rcmp
((c⁄° *)
¨gv
[1], "wechat")) {

817 i‡(
__this
->
ai_c⁄√˘ed
) {

818 
__this
->
ai_c⁄√˘ed
 = 0;

819 
	`≠p_music_∂ay_voi˚_¥om±
("014.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

823 
AI_SERVER_EVENT_URL
:

824 
__this
->
ai_«me
 = (c⁄° *)
¨gv
[2];

825 i‡(
__this
->
li°íög
 =
LISTEN_STATE_START
) {

826 i‡(!
	`°rcmp
(
__this
->
ai_«me
, "wechat")) {

829 
__this
->
li°íög
 = 
LISTEN_STATE_RETURN_URL
;

833 
__this
->
dec_›s
->
	`dec_°›
(1);

834 
	`√t_music_dec_fûe
((*)
¨gv
[1], 0, 
√t_music_dec_íd
, 0);

836 
AI_SERVER_EVENT_CONTINUE
:

837 
__this
->
dec_›s
->
	`dec_∂ay_∑u£
(0);

839 
AI_SERVER_EVENT_PAUSE
:

840 
__this
->
dec_›s
->
	`dec_∂ay_∑u£
(0);

845 
	}
}

847 
	$≠p_music_ai_li°í_°¨t
(
u8
 
wech©
)

849 
îr
;

850 
ai_ªq
 
ªq
;

852 i‡(
__this
->
li°íög
 !
LISTEN_STATE_STOP
) {

856 i‡(!
__this
->
ai_c⁄√˘ed
) {

857 i‡(
wech©
) {

858 
	`≠p_music_∂ay_voi˚_¥om±
("016.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

860 
	`≠p_music_∂ay_voi˚_¥om±
("015.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

865 i‡(
__this
->
dec_›s
) {

866 
__this
->
dec_›s
->
	`dec_°›
(1);

868 
ªq
.
evt
.
evít
 = 
AI_EVENT_MEDIA_STOP
;

869 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

870 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

872 
	`≠p_music_∂ay_voi˚_¥om±
("ªc.mp3", 
NULL
);

874 i‡(
wech©
) {

875 
	`os_time_dly
(50);

876 
ªq
.
evt
.
evít
 = 
AI_EVENT_VOICE_MODE
;

877 
ªq
.
evt
.
ai_«me
 = "duer";

878 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

881 
ªq
.
lis
.
cmd
 = 
AI_LISTEN_START
;

882 
îr
 = 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_LISTEN
, &
ªq
);

883 i‡(
îr
 == 0) {

884 
__this
->
li°íög
 = 
LISTEN_STATE_START
;

886 
	}
}

888 
	$≠p_music_ai_li°í_°›
()

890 
ai_ªq
 
ªq
;

892 i‡(
__this
->
li°íög
 !
LISTEN_STATE_START
) {

893 
__this
->
li°íög
 = 
LISTEN_STATE_STOP
;

897 
__this
->
li°íög
 = 
LISTEN_STATE_STOP
;

899 i‡(
__this
->
ai_£rvî
) {

900 
ªq
.
lis
.
cmd
 = 
AI_LISTEN_STOP
;

901 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_LISTEN
, &
ªq
);

903 
	`≠p_music_∂ay_voi˚_¥om±
("£nd.mp3", 
NULL
);

904 
	`os_time_dly
(5);

905 
	}
}

907 
	$≠p_music_evít_√t_c⁄√˘ed
()

909 
ai_ªq
 
ªq
;

915 i‡(
__this
->
ai_£rvî
) {

919 
__this
->
ai_£rvî
 = 
	`£rvî_›í
("ai_£rvî", 
NULL
);

920 i‡(!
__this
->
ai_£rvî
) {

924 
	`£rvî_ªgi°î_evít_h™dÀr
(
__this
->
ai_£rvî
, 
NULL
, 
ai_£rvî_evít_h™dÀr
);

926 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_CONNECT
, &
ªq
);

927 
	}
}

931 
√t_dh˝_ªady
();

932 
jõlüµ_√t_ªady
();

933 
	$wech©_°¨t
()

935 
wech©_ªq
 
ªq
;

936 
ªq
.
cmd
 = 
WECHAT_STATE_START
;

937 
	`£rvî_ªque°
(
__this
->
wech©_£rvî
, 
WECHAT_REQ
, &
ªq
);

940 
	}
}

942 
	$wech©_›í
()

944 
wech©_ªq
 
ªq
;

945 
ªq
.
cmd
 = 
WECHAT_STATE_OPEN
;

946 
	`£rvî_ªque°
(
__this
->
wech©_£rvî
, 
WECHAT_REQ
, &
ªq
);

949 
	}
}

951 
	$≠p_wech©_íc_°¨t
()

953 
îr
;

954 
wech©_ªq
 
ªq
;

956 i‡(!
__this
->
wech©_c⁄√˘ed
) {

957 
	`≠p_music_∂ay_voi˚_¥om±
("016.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

960 i‡(
__this
->
wech©_°©e
 & 0x1) {

964 i‡(
__this
->
dec_›s
) {

965 
__this
->
dec_›s
->
	`dec_°›
(1);

968 
	`≠p_music_∂ay_voi˚_¥om±
("ªc.mp3", 
NULL
);

970 
	`os_time_dly
(50);

972 
ªq
.
cmd
 = 
WECHAT_STATE_ENC_AMR_START
;

973 
îr
 = 
	`£rvî_ªque°
(
__this
->
wech©_£rvî
, 
WECHAT_REQ
, &
ªq
);

974 i‡(
îr
 == 0) {

975 
__this
->
wech©_°©e
 |= 0x1;

978  
îr
;

979 
	}
}

981 
	$≠p_wech©_íc_°›
()

983 
wech©_ªq
 
ªq
;

984 
îr
;

986 i‡(!(
__this
->
wech©_°©e
 & 0x1)) {

990 
ªq
.
cmd
 = 
WECHAT_STATE_ENC_AMR_STOP
;

991 
îr
 = 
	`£rvî_ªque°
(
__this
->
wech©_£rvî
, 
WECHAT_REQ
, &
ªq
);

992 
	`¥ötf
("\n\«µ_wech©_amr_íc_°›Éº = %d\n\n", 
îr
);

994 
__this
->
wech©_°©e
 &= ~0x1;

996 
	`≠p_music_∂ay_voi˚_¥om±
("£nd.mp3", 
NULL
);

999 
	}
}

1001 
	$wech©_music_dec_vﬁume
(
°ï
)

1003 
îr
;

1004 
audio_ªq
 
ªq
;

1006 
vﬁume
 = 
°ï
;

1007 i‡(
vﬁume
 < 0) {

1008 
vﬁume
 = 0;

1009 } i‡(
vﬁume
 > 100) {

1010 
vﬁume
 = 100;

1012 i‡(
vﬁume
 =
__this
->volume) {

1013  -
EINVAL
;

1015 
__this
->
vﬁume
 = volume;

1017 
	`log_d
("£t_dec_vﬁume: %d\n", 
vﬁume
);

1019 
ªq
.
dec
.
cmd
 = 
AUDIO_DEC_SET_VOLUME
;

1020 
ªq
.
dec
.
vﬁume
 = volume;

1021 
îr
 = 
	`£rvî_ªque°
(
__this
->
dec_£rvî
, 
AUDIO_REQ_DEC
, &
ªq
);

1022 i‡(
îr
 == 0) {

1023 #ifde‡
CONFIG_STORE_VOLUME


1024 
	`db_upd©e
("vﬁ", 
__this
->
vﬁume
);

1025 
	`db_Êush
();

1029  
îr
;

1031 
	}
}

1033 
	$gë_≠p_music_vﬁume
()

1035  
__this
->
vﬁume
;

1036 
	}
}

1038 
	$gë_≠p_music_∂aytime
()

1040  
__this
->
∂ay_time
;

1041 
	}
}

1043 
	$duî_wech©_•ók_∂ay
(c⁄° *
uæ
)

1045 
	`°r˝y
(
__this
->
wech©_•ìch_uæ
, 
uæ
);

1046 
__this
->
wech©_•ìch_ªad_Êag
 = 1;

1047 
	`≠p_music_∂ay_voi˚_¥om±
("009.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1048 
	}
}

1050 
	$duî_wech©_îr_nŸify
()

1052 
	`os_time_dly
(50);

1053 
	`≠p_music_∂ay_voi˚_¥om±
("019.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1054 
	}
}

1056 
	$wech©_£rvî_evít_h™dÀr
(*
¥iv
, 
¨gc
, *
¨gv
)

1058 
buf„r
[7];

1059 
¨gv
[0]) {

1060 
WECHAT_SERVER_SPEECH_URL_EVENT
:

1061 
	`¥ötf
("WECHAT_SERVER_SPEECH_URL_EVENT\n");

1062 
	`°r˝y
(
__this
->
wech©_•ìch_uæ
, (*)
¨gv
[1]);

1063 
__this
->
wech©_•ìch_ªad_Êag
 = 1;

1064 
	`≠p_music_∂ay_voi˚_¥om±
("009.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1066 
WECHAT_SERVER_AMR_ERR_EVENT
:

1067 
	`¥ötf
("WECHAT_SERVER_AMR_ERR_EVENT\n");

1068 
	`≠p_music_∂ay_voi˚_¥om±
("019.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1069 
WECHAT_SERVER_AMR_END_EVENT
:

1070 
	`¥ötf
("WECHAT_SERVER_AMR_END_EVENT\n");

1071 
	`≠p_wech©_íc_°›
();

1074 
	}
}

1080 
	$≠p_music_√t_c⁄fig
()

1082 
	`wifi_íãr_smp_cfg_mode
();

1083 
	`wifi_ªtu∫_°a_mode
();

1084 
	`gë_wifi_is_smp_mode
();

1086 
	`sys_powî_auto_shutdown_∑u£
();

1088 i‡(!
__this
->
wifi_c⁄fig_°©e
) {

1089 i‡(
__this
->
ai_£rvî
) {

1090 
	`£rvî_˛o£
(
__this
->
ai_£rvî
);

1091 
__this
->
ai_£rvî
 = 
NULL
;

1092 
__this
->
ai_c⁄√˘ed
 = 0;

1093 
__this
->
wech©_c⁄√˘ed
 = 0;

1095 
	`≠p_music_∂ay_voi˚_¥om±
("013.mp3", 
NULL
);

1096 
	`wifi_íãr_smp_cfg_mode
();

1098 i‡(
	`gë_wifi_is_smp_mode
()) {

1099 
	`wifi_ªtu∫_°a_mode
();

1101 
	`≠p_music_∂ay_voi˚_¥om±
("017.mp3", 
NULL
);

1103 
__this
->
wifi_c⁄fig_°©e
 = !__this->wifi_config_state;

1104 
	}
}

1115 
	$dec_£rvî_evít_h™dÀr
(*
¥iv
, 
¨gc
, *
¨gv
)

1117 
¨gv
[0]) {

1118 
AUDIO_SERVER_EVENT_ERR
:

1119 
	`puts
("app_music: AUDIO_SERVER_EVENT_ERR\n");

1120 
AUDIO_SERVER_EVENT_END
:

1121 
	`puts
("app_music: AUDIO_SERVER_EVENT_END\n");

1123 
	`Àd_ui_po°_msg
("dec_end");

1124 
	`sys_key_evít_íabÀ
();

1125 
__this
->
∂ay_voi˚_¥om±
 = 0;

1127 
	`do_dec_íd_h™dÀr
((*)
¨gv
[1]);

1129 
AUDIO_SERVER_EVENT_CURR_TIME
:

1130 
	`log_d
("∂ay_time: %d\n", 
¨gv
[1]);

1131 
__this
->
∂ay_time
 = 
¨gv
[1];

1132 
	`sys_powî_auto_shutdown_˛ór
();

1136 
	}
}

1141 
	$__∂ay_voi˚_¥om±
(c⁄° *
‚ame
, *
dec_íd_h™dÀr
, 
ßve_bp
)

1143 
îr
;

1144 
∑th
[64];

1146 
	`log_d
("∂ay_voi˚_¥om±: %s\n", 
‚ame
);

1148 
	`•rötf
(
∑th
, "%s%s", 
CONFIG_VOICE_PROMPT_FILE_PATH
, 
‚ame
);

1150 
FILE
 *
fûe
 = 
	`f›í
(
∑th
, "r");

1151 i‡(!
fûe
) {

1152  -
ENOENT
;

1154 
	`sys_key_evít_dißbÀ
();

1156 
__this
->
dec_›s
->
	`dec_°›
(
ßve_bp
);

1158 
__this
->
∂ay_voi˚_¥om±
 = 1;

1160 
îr
 = 
	`loˇl_music_dec_fûe
(
fûe
, 0, 
dec_íd_h™dÀr
, 0);

1161 i‡(
îr
) {

1162 
	`sys_key_evít_íabÀ
();

1165  
îr
;

1166 
	}
}

1168 
	$_∂ay_voi˚_¥om±
(c⁄° *
‚ame
, *
dec_íd_h™dÀr
)

1170  
	`__∂ay_voi˚_¥om±
(
‚ame
, 
dec_íd_h™dÀr
, 0);

1171 
	}
}

1176 
	$≠p_music_∂ay_voi˚_¥om±
(c⁄° *
‚ame
, *
dec_íd_h™dÀr
)

1178 i‡(
dec_íd_h™dÀr
 =(*)
≠p_music_shutdown
) {

1179  
	`_∂ay_voi˚_¥om±
(
‚ame
, 
dec_íd_h™dÀr
);

1182 i‡(
__this
->
∂ay_voi˚_¥om±
) {

1183 i‡(
__this
->
dec_íd_h™dÀr
 !(*)
≠p_music_shutdown
) {

1184 
	`£t_dec_íd_h™dÀr
(
__this
->
dec_íd_fûe
, 
_∂ay_voi˚_¥om±
,

1185 ()
‚ame
, ()
dec_íd_h™dÀr
);

1190  
	`__∂ay_voi˚_¥om±
(
‚ame
, 
dec_íd_h™dÀr
, 1);

1191 
	}
}

1194 
	$≠p_music_maö
()

1196 
îr
;

1197 
	`puts
("action_music_play_main\n");

1199 #ifde‡
CONFIG_STORE_VOLUME


1200 
__this
->
vﬁume
 = 
	`db_£À˘
("vol");

1202 i‡(
__this
->
vﬁume
 <= 0 || __this->volume > 100) {

1203 
__this
->
vﬁume
 = 60;

1206 
	`Àd_ui_po°_msg
("init");

1207 
__this
->
dec_£rvî
 = 
	`£rvî_›í
("audio_server", "dec");

1208 i‡(!
__this
->
dec_£rvî
) {

1209 
	`puts
("play_music openáudio_server fail!\n");

1210  -
EPERM
;

1212 
	`£rvî_ªgi°î_evít_h™dÀr
(
__this
->
dec_£rvî
, 
NULL
, 
dec_£rvî_evít_h™dÀr
);

1214 #ifde‡
CONFIG_NET_ENABLE


1215 
__this
->
wech©_£rvî
 = 
	`£rvî_›í
("wech©_£rvî", 
NULL
);

1216 i‡(!
__this
->
wech©_£rvî
) {

1217 
	`puts
("play_music open wechat_server fail!\n");

1218  -
EPERM
;

1221 
	`£rvî_ªgi°î_evít_h™dÀr
(
__this
->
wech©_£rvî
, 
NULL
, 
wech©_£rvî_evít_h™dÀr
);

1223 
	`waô_com∂ëi⁄
(
√t_dh˝_ªady
, ((*)(*))
wech©_›í
, 
NULL
);

1224 
	`waô_com∂ëi⁄
(
√t_dh˝_ªady
, ((*)(*))
wech©_°¨t
, 
NULL
);

1231 
FILE
 *
fûe
 = 
	`f›í
(
CONFIG_VOICE_PROMPT_FILE_PATH
"001.mp3", "r");

1232 i‡(
fûe
) {

1233 
	`sys_key_evít_dißbÀ
();

1234 
îr
 = 
	`loˇl_music_dec_fûe
(
fûe
, 0, 
≠p_music_swôch_loˇl_devi˚
, 0);

1235 i‡(
îr
) {

1236 
	`sys_key_evít_íabÀ
();

1239 
îr
 = 
	`≠p_music_swôch_loˇl_devi˚
(0);

1242  
îr
;

1243 
	}
}

1269 
	$≠p_music_key_˛ick
(
key_evít
 *
key
)

1271 
key
->
vÆue
) {

1272 
KEY_OK
:

1273 i‡(
__this
->
dec_›s
 && !__this->
∂ay_voi˚_¥om±
) {

1274 
__this
->
dec_›s
->
	`dec_∂ay_∑u£
(1);

1277 
KEY_UP
:

1278 
	`puts
("music key up\n");

1279 i‡(
__this
->
dec_›s
) {

1280 
	`puts
("prev_file\n");

1281 
__this
->
dec_›s
->
	`swôch_fûe
(
FSEL_PREV_FILE
);

1284 
KEY_DOWN
:

1285 
	`puts
("music key down\n");

1286 i‡(
__this
->
dec_›s
) {

1287 
__this
->
dec_›s
->
	`swôch_fûe
(
FSEL_NEXT_FILE
);

1290 #ifde‡
CONFIG_NET_ENABLE


1291 
KEY_ENC
:

1292 i‡(!
__this
->
ai_c⁄√˘ed
) {

1293 
	`≠p_music_∂ay_voi˚_¥om±
("015.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1295 
	`≠p_music_∂ay_voi˚_¥om±
("003.mp3", 
NULL
);

1298 
KEY_F1
:

1299 i‡(!
__this
->
wech©_c⁄√˘ed
) {

1300 
	`≠p_music_∂ay_voi˚_¥om±
("016.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1302 i‡(
__this
->
wech©_•ìch_ªad_Êag
) {

1304 
__this
->
dec_›s
->
	`dec_°›
(1);

1305 
	`√t_music_dec_fûe
(
__this
->
wech©_•ìch_uæ
, 0,

1306 
__this
->
dec_›s
->
dec_bªakpoöt
, 0);

1307 
	`mem£t
(
__this
->
wech©_•ìch_uæ
, 0, (__this->wechat_speech_url));

1308 
__this
->
wech©_•ìch_ªad_Êag
 = 0;

1310 
	`≠p_music_∂ay_voi˚_¥om±
("023.mp3", 
NULL
);

1318  
Ál£
;

1319 
	}
}

1321 
	$≠p_music_key_hﬁd
(
key_evít
 *
key
)

1324 
key
->
vÆue
) {

1325 
KEY_UP
:

1326 i‡(
__this
->
dec_›s
) {

1327 i‡(0 =
__this
->
dec_›s
->
	`dec_vﬁume
(-3)) {

1328 #ifde‡
CONFIG_STORE_VOLUME


1329 
	`db_upd©e
("vﬁ", 
__this
->
vﬁume
);

1330 
	`db_Êush
();

1335 
KEY_DOWN
:

1336 i‡(
__this
->
dec_›s
) {

1337 i‡(0 =
__this
->
dec_›s
->
	`dec_vﬁume
(3)) {

1338 #ifde‡
CONFIG_STORE_VOLUME


1339 
	`db_upd©e
("vﬁ", 
__this
->
vﬁume
);

1340 
	`db_Êush
();

1345 #ifde‡
CONFIG_NET_ENABLE


1346 
KEY_ENC
:

1347 
	`≠p_music_ai_li°í_°¨t
(0);

1349 
KEY_F1
:

1350 #ifde‡
CONFIG_DUER_WECHAT_ENABLE


1351 
	`≠p_music_ai_li°í_°¨t
(1);

1353 
	`≠p_wech©_íc_°¨t
();

1358  
Ál£
;

1359 
	}
}

1361 
	$≠p_music_key_evít_h™dÀr
(
key_evít
 *
key
)

1363 
ªt
 = 
Ál£
;

1364 
audio_ªq
 
r
;

1366 
key
->
evít
) {

1367 
KEY_EVENT_CLICK
:

1368 
ªt
 = 
	`≠p_music_key_˛ick
(
key
);

1370 
KEY_EVENT_LONG
:

1371 i‡(
key
->
vÆue
 =
KEY_OK
) {

1372 
	`puts
("switch_next_dir\n");

1373 
	`loˇl_music_dec_swôch_dú
(
FSEL_NEXT_FILE
);

1375 #ifde‡
CONFIG_NET_ENABLE


1376 
ai_ªq
 
ªq
 = {0};

1377 
ªq
.
evt
.
evít
 = 
AI_EVENT_MEDIA_STOP
;

1378 
ªq
.
evt
.
ai_«me
 = 
__this
->ai_name;

1379 
	`£rvî_ªque°
(
__this
->
ai_£rvî
, 
AI_REQ_EVENT
, &
ªq
);

1383 } i‡(
key
->
vÆue
 =
KEY_MODE
) {

1384 #ifde‡
CONFIG_NET_ENABLE


1385 
	`puts
("switch_net_config\n");

1386 
	`≠p_music_√t_c⁄fig
();

1390 
KEY_EVENT_HOLD
:

1391 
ªt
 = 
	`≠p_music_key_hﬁd
(
key
);

1393 
KEY_EVENT_UP
:

1394 #ifde‡
CONFIG_NET_ENABLE


1395 i‡(
key
->
vÆue
 =
KEY_ENC
) {

1396 
	`≠p_music_ai_li°í_°›
();

1397 } i‡(
key
->
vÆue
 =
KEY_F1
) {

1398 #ifde‡
CONFIG_DUER_WECHAT_ENABLE


1399 
	`≠p_music_ai_li°í_°›
();

1401 
	`≠p_wech©_íc_°›
();

1410  
ªt
;

1411 
	}
}

1413 
	$≠p_music_low_powî
(*
¥iv
)

1415 
	`sys_timî_modify
(
__this
->
low_powî
, 60000);

1416 
	`≠p_music_∂ay_voi˚_¥om±
("021.mp3", 
__this
->
dec_›s
->
dec_bªakpoöt
);

1417 
	}
}

1422 
	$≠p_music_devi˚_evít_h™dÀr
(
sys_evít
 *
evít
)

1427 i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, 
SDX_DEV
, 4)) {

1428 
evít
->
u
.
dev
.event) {

1429 
DEVICE_EVENT_IN
:

1430 
	`waô_com∂ëi⁄
(
°‹age_devi˚_ªady
,

1431 ((*)(*))
≠p_music_swôch_loˇl_devi˚
,

1432 
CONFIG_MUSIC_PATH_SD
);

1434 
DEVICE_EVENT_OUT
:

1435 i‡(!
	`°rcmp
(
__this
->
loˇl_∑th
, 
CONFIG_MUSIC_PATH_SD
)) {

1436 i‡(
__this
->
dec_›s
 =&
loˇl_music_dec_›s
) {

1437 
	`≠p_music_swôch_loˇl_devi˚
(
CONFIG_MUSIC_PATH_FLASH
);

1439 
__this
->
loˇl_bp
.
Àn
 = 0;

1440 
__this
->
loˇl_∑th
 = 
NULL
;

1445 } i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "sys_power", 9)) {

1446 i‡(
evít
->
u
.
dev
.evíà=
DEVICE_EVENT_POWER_PERCENT
) {

1447 
b©ãry_vÆ
 = 
evít
->
u
.
dev
.
vÆue
;

1448 i‡(
b©ãry_vÆ
 <30 && !
	`sys_powî_is_ch¨gög
()) {

1449 i‡(
__this
->
low_powî
 == 0) {

1450 
__this
->
low_powî
 = 
	`sys_timî_add
(
NULL
,

1451 
≠p_music_low_powî
, 5000);

1454 i‡(
__this
->
low_powî
) {

1455 
	`sys_timî_dñ
(
__this
->
low_powî
);

1456 
__this
->
low_powî
 = 0;

1459 } i‡(
evít
->
u
.
dev
.evíà=
DEVICE_EVENT_POWER_SHUTDOWN
) {

1460 i‡(!
	`°rcmp
((*)
evít
->
u
.
dev
.
vÆue
, "auto")) {

1461 
	`≠p_music_∂ay_voi˚_¥om±
("018.mp3", 
≠p_music_shutdown
);

1462 } i‡(!
	`°rcmp
((*)
evít
->
u
.
dev
.
vÆue
, "low_power")) {

1463 
	`log_d
("low_power_shutdown\n");

1464 
	`≠p_music_∂ay_voi˚_¥om±
("022.mp3", 
≠p_music_shutdown
);

1468  
Ál£
;

1469 
	}
}

1471 
	$≠p_music_√t_evít_h™dÀr
(
sys_evít
 *
evít
)

1473 #ifde‡
CONFIG_NET_ENABLE


1474 i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "net", 4)) {

1475 
evít
->
u
.
√t
.event) {

1476 
NET_EVENT_CONNECTED
:

1477 
	`puts
("NET_EVENT_CONNECTED\n");

1478 
__this
->
wifi_c⁄fig_°©e
 = 0;

1481 
	`≠p_music_evít_√t_c⁄√˘ed
();

1483 
NET_EVENT_DISCONNECTED
:

1484 
	`puts
("NET_EVENT_DISCONNECTED\n");

1485  
Ál£
;

1486 
NET_EVENT_SMP_CFG_TIMEOUT
:

1487 i‡(
__this
->
wifi_c⁄fig_°©e
) {

1488 
	`≠p_music_∂ay_voi˚_¥om±
("020.mp3", 
loˇl_music_dec_bªakpoöt
);

1489 
__this
->
wifi_c⁄fig_°©e
 = 0;

1494 
	`sys_powî_auto_shutdown_ªsume
();

1498  
Ál£
;

1499 
	}
}

1501 
	$evít_h™dÀr
(
≠∂iˇti⁄
 *
≠p
, 
sys_evít
 *
evít
)

1503 
evít
->
ty≥
) {

1504 
SYS_KEY_EVENT
:

1505  
	`≠p_music_key_evít_h™dÀr
(&
evít
->
u
.
key
);

1506 
SYS_DEVICE_EVENT
:

1507  
	`≠p_music_devi˚_evít_h™dÀr
(
evít
);

1508 
SYS_NET_EVENT
:

1509  
	`≠p_music_√t_evít_h™dÀr
(
evít
);

1511  
Ál£
;

1513 
	}
}

1515 
	$°©e_machöe
(
≠∂iˇti⁄
 *
≠p
, 
≠p_°©e
 
°©e
,

1516 
öã¡
 *
ô
)

1518 
°©e
) {

1519 
APP_STA_CREATE
:

1520 
	`mem£t
(
__this
, 0, (
≠p_music_hdl
));

1521 #ifde‡
CONFIG_NET_ENABLE


1522 
__this
->
√t_bp
.
uæ
 = 
	`mÆloc
(512);

1523 
__this
->
√t_bp
.
uæ_Àn
 = 512;

1526 
__this
->
Àd_ui
 = 
	`£rvî_›í
("Àd_ui_£rvî", 
NULL
);

1527 i‡(!
__this
->
Àd_ui
) {

1528 
	`log_e
("led_ui open serverÉrr!\n");

1529  -
EINVAL
;

1532 
APP_STA_START
:

1533 i‡(!
ô
) {

1536 
ô
->
a˘i⁄
) {

1537 
ACTION_MUSIC_PLAY_MAIN
:

1538 
	`≠p_music_maö
();

1540 
ACTION_MUSIC_PLAY_VOICE_PROMPT
:

1541 
	`≠p_music_∂ay_voi˚_¥om±
(
ô
->
d©a
, 
__this
->
dec_›s
->
dec_bªakpoöt
);

1545 
APP_STA_PAUSE
:

1547 
APP_STA_RESUME
:

1549 
APP_STA_STOP
:

1551 
APP_STA_DESTROY
:

1552 i‡(
__this
->
Àd_ui
) {

1553 
	`£rvî_˛o£
(
__this
->
Àd_ui
);

1554 
__this
->
Àd_ui
 = 
NULL
;

1560 
	}
}

1562 c⁄° 
≠∂iˇti⁄_›î©i⁄
 
	g≠p_music_›s
 = {

1563 .
°©e_machöe
 = state_machine,

1564 .
	gevít_h™dÀr
 = 
evít_h™dÀr
,

1567 
REGISTER_APPLICATION
(
≠p_≠p_music
) = {

1568 .
«me
 = "app_music",

1569 .
	ga˘i⁄
 = 
ACTION_MUSIC_PLAY_MAIN
,

1570 .
	g›s
 = &
≠p_music_›s
,

1571 .
	g°©e
 = 
APP_STA_DESTROY
,

	@app/wifi_story_machine/device_mount.c

1 
	~"sy°em/ö˛udes.h
"

2 
	~"£rvî/audio_£rvî.h
"

3 
	~"£rvî/£rvî_c‹e.h
"

5 
	~"≠p_c⁄fig.h
"

8 
	mSD_UNMOUNT
,

9 
	mSD_MOUNT_SUSS
,

10 
	mSD_MOUNT_FAILD
,

13 *c⁄° 
	gsd_li°
[] = {

19 
u32
 
	g˛ass
;

20 
u8
 
	gfs_mou¡
 = 
SD_UNMOUNT
;

21 
OS_MUTEX
 
	gsd_muãx
;

23 
	$__sd_muãx_öô
()

25  
	`os_muãx_¸óã
(&
sd_muãx
);

26 
	}
}

27 
óæy_öôˇŒ
(
__sd_muãx_öô
);

30 
	$mou¡_sd_to_fs
(c⁄° *
«me
)

32 
îr
 = 0;

33 
imou¡
 *
mt
;

34 
id
 = ((*)
«me
)[2] - '0';

35 c⁄° *
dev
 = 
sd_li°
[
id
];

37 
îr
 = 
	`os_muãx_≥nd
(&
sd_muãx
, 0);

38 i‡(
îr
) {

39  -
EFAULT
;

43 i‡(
fs_mou¡
 =
SD_MOUNT_SUSS
) {

44 
__exô
;

46 i‡(
fs_mou¡
 =
SD_MOUNT_FAILD
) {

47 
îr
 = -
EFAULT
;

48 
__exô
;

50 i‡(!
	`dev_⁄löe
(
dev
)) {

51 
îr
 = -
EFAULT
;

52 
__exô
;

55 *
fd
 = 
	`dev_›í
(
dev
, 0);

56 i‡(!
fd
) {

57 
îr
 = -
EFAULT
;

58 
__îr
;

60 
	`dev_io˘l
(
fd
, 
SD_IOCTL_GET_CLASS
, (
u32
)&
˛ass
);

61 i‡(
˛ass
 =
SD_CLASS_10
) {

62 
	`puts
("sd card class: 10\n");

64 
	`log_w
("sd c¨d cœss: %d\n", 
˛ass
 * 2);

66 
	`dev_˛o£
(
fd
);

68 
mt
 = 
	`mou¡
(
dev
, 
CONFIG_STORAGE_PATH
, "Át", 
FAT_CACHE_NUM
, 
NULL
);

69 i‡(!
mt
) {

70 
	`puts
("mount fail\n");

71 
îr
 = -
EFAULT
;

73 
	`puts
("mount sd suss\n");

76 
__îr
:

77 
fs_mou¡
 = 
îr
 ? 
SD_MOUNT_FAILD
 : 
SD_MOUNT_SUSS
;

78 
__exô
:

79 
	`os_muãx_po°
(&
sd_muãx
);

81  
îr
;

82 
	}
}

84 
	$unmou¡_sd_to_fs
(c⁄° *
∑th
)

86 
	`os_muãx_≥nd
(&
sd_muãx
, 0);

88 
	`unmou¡
(
∑th
);

89 
fs_mou¡
 = 
SD_UNMOUNT
;

91 
	`os_muãx_po°
(&
sd_muãx
);

92 
	}
}

94 
	$°‹age_devi˚_ªady
()

96 i‡(!
	`dev_⁄löe
(
SDX_DEV
)) {

97  
Ál£
;

99 i‡(
fs_mou¡
 =
SD_UNMOUNT
) {

100 
	`mou¡_sd_to_fs
(
SDX_DEV
);

103  
	`fdú_exi°
(
CONFIG_STORAGE_PATH
);

104 
	}
}

106 
	$°‹age_devi˚_f‹m©
()

108 
îr
;

110 
	`unmou¡_sd_to_fs
(
CONFIG_STORAGE_PATH
);

112 
îr
 = 
	`f_f‹m©
(
SDX_DEV
, "fat", 32 * 1024);

113 i‡(
îr
 == 0) {

114 
	`mou¡_sd_to_fs
(
SDX_DEV
);

117  
îr
;

118 
	}
}

124 
	$sd_evít_h™dÀr
(
sys_evít
 *
evít
)

126 
id
 = ((*)
evít
->
¨g
)[2] - '0';

127 c⁄° *
dev
 = 
sd_li°
[
id
];

129 
evít
->
u
.
dev
.event) {

130 
DEVICE_EVENT_IN
:

131 
	`mou¡_sd_to_fs
(
evít
->
¨g
);

133 
DEVICE_EVENT_OUT
:

134 
	`¥ötf
("%s: out\n", 
dev
);

135 
	`unmou¡_sd_to_fs
(
CONFIG_STORAGE_PATH
);

138 
	}
}

141 
	$devi˚_evít_h™dÀr
(
sys_evít
 *
evít
)

143 i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "sd*", 4)) {

144 
	`sd_evít_h™dÀr
(
evít
);

145 } i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "usb", 4)) {

148 
	}
}

152 
SYS_EVENT_HANDLER
(
SYS_DEVICE_EVENT
, 
devi˚_evít_h™dÀr
, 0);

	@app/wifi_story_machine/include/action.h

1 #i‚de‡
APP_ACTION_H


2 
	#APP_ACTION_H


	)

5 
	#ACTION_HOME_MAIN
 0x00001001

	)

6 
	#ACTION_DEVICE_OUT
 0x00001002

	)

11 
	#ACTION_MUSIC_PLAY_MAIN
 0x00009001

	)

12 
	#ACTION_MUSIC_PLAY_VOICE_PROMPT
 0x00009002

	)

16 
	#ACTION_UPGRADE_MAIN
 0x00030001

	)

17 
	#ACTION_UPGRADE_SET_CONFIRM
 0x00030002

	)

	@app/wifi_story_machine/include/ani_style.h

1 #i‚de‡
ANI_STYLE_H


2 
	#ANI_STYLE_H


	)

7 
	#ANI_ID_BASEFORM
 0X4E049D5

	)

8 
	#ANI_ID_BASEFORM_1
 0X3B5D7EA

	)

9 
	#ANI_ID_BASEFORM_3
 0X43A9632

	)

10 
	#ANI_ID_BASEFORM_4
 0X34A309A

	)

11 
	#ANI_ID_POWER_OFF
 0XDC5BA26

	)

12 
	#ANI_ID_POWER_ON
 0XD525E5C

	)

13 
	#ANI_ID_PAGE_POWER_ON
 0X2000000

	)

14 
	#ANI_ID_PAGE_POWER_OFF
 0X2000001

	)

15 
	#ANI_UI_VERSION
 0X2F33010E

	)

	@app/wifi_story_machine/include/app_config.h

1 #i‚de‡
APP_CONFIG_H


2 
	#APP_CONFIG_H


	)

6 
	#CONFIG_BOARD_GR202_2M


	)

12 #ifde‡
CONFIG_BOARD_GR202_2M


13 
	#__CPU_AC521x__


	)

14 
	#__FLASH_SIZE__
 (4 * 1024 * 1024)

	)

15 
	#__SDRAM_SIZE__
 (2 * 1024 * 1024)

	)

16 
	#CONFIG_SFC_ENABLE


	)

17 
	#CONFIG_SD2_ENABLE


	)

18 
	#CONFIG_NET_ENABLE


	)

22 
	#CONFIG_DATABASE_2_FLASH


	)

23 
	#CONFIG_DEBUG_ENABLE


	)

26 
	#CONFIG_ADKEY_ENABLE


	)

27 
	#CONFIG_IOKEY_ENABLE


	)

29 
	#CONFIG_MP3_DEC_ENABLE


	)

30 
	#CONFIG_WMA_DEC_ENABLE


	)

31 
	#CONFIG_M4A_DEC_ENABLE


	)

32 
	#CONFIG_WAV_DEC_ENABLE


	)

33 
	#CONFIG_WAV_ENC_ENABLE


	)

34 
	#CONFIG_AMR_DEC_ENABLE


	)

35 
	#CONFIG_AMR_ENC_ENABLE


	)

37 
	#CONFIG_SPEEX_ENC_ENABLE


	)

39 #ifde‡
CONFIG_NET_ENABLE


40 
	#CONFIG_WIFI_ENABLE


	)

41 
	#CONFIG_WECHAT_SDK_ENABLE


43 
	#CONFIG_DUER_SDK_ENABLE


	)

44 
	#CONFIG_DUER_WECHAT_ENABLE


	)

48 #ifde‡
CONFIG_SD0_ENABLE


49 
	#CONFIG_STORAGE_PATH
 "°‹age/sd0"

	)

50 
	#SDX_DEV
 "sd0"

	)

53 #ifde‡
CONFIG_SD1_ENABLE


54 
	#CONFIG_STORAGE_PATH
 "°‹age/sd1"

	)

55 
	#SDX_DEV
 "sd1"

	)

58 #ifde‡
CONFIG_SD2_ENABLE


59 
	#CONFIG_STORAGE_PATH
 "°‹age/sd2"

	)

60 
	#SDX_DEV
 "sd2"

	)

63 
	#CONFIG_ROOT_PATH
 
CONFIG_STORAGE_PATH
"/C/"

	)

65 
	#CONFIG_MUSIC_PATH_SD
 
CONFIG_ROOT_PATH


	)

67 
	#CONFIG_MUSIC_PATH_FLASH
 "m¡/•iÊash/C/"

	)

68 
	#CONFIG_VOICE_PROMPT_FILE_PATH
 "m¡/•iÊash/audlogo/"

	)

71 
	#RTOS_STACK_CHECK_ENABLE


72 

	)

82 
	#OTA_MAJOR
 0

	)

83 
	#OTA_MINOR
 2

	)

84 
	#OTA_PATCH
 0

	)

89 #i‚de‡
__LD__


90 
	~"˝u_c⁄fig.h
"

91 
	~"bﬂrd.h
"

	@app/wifi_story_machine/include/app_database.h

1 #i‚de‡
APP_DATABASE_H


2 
	#APP_DATABASE_H


	)

9 
	#VIDEO_RES_1080P
 0

	)

10 
	#VIDEO_RES_720P
 1

	)

11 
	#VIDEO_RES_VGA
 2

	)

17 
	#GRA_SEN_OFF
 0

	)

18 
	#GRA_SEN_LO
 1

	)

19 
	#GRA_SEN_MD
 2

	)

20 
	#GRA_SEN_HI
 3

	)

26 
	#TVM_PAL
 0

	)

27 
	#TVM_NTSC
 1

	)

33 
	#PHOTO_RES_VGA
 0

	)

34 
	#PHOTO_RES_1D3M
 1

	)

35 
	#PHOTO_RES_2M
 2

	)

36 
	#PHOTO_RES_3M
 3

	)

37 
	#PHOTO_RES_5M
 5

	)

38 
	#PHOTO_RES_8M
 8

	)

39 
	#PHOTO_RES_10M
 10

	)

40 
	#PHOTO_RES_12M
 12

	)

46 
	#PHOTO_QUA_LO
 0

	)

47 
	#PHOTO_QUA_MD
 1

	)

48 
	#PHOTO_QUA_HI
 2

	)

53 
	#PHOTO_ACU_LO
 0

	)

54 
	#PHOTO_ACU_MD
 1

	)

55 
	#PHOTO_ACU_HI
 2

	)

60 
	#PHOTO_WBL_AUTO
 0

	)

61 
	#PHOTO_WBL_SUN
 1

	)

62 
	#PHOTO_WBL_CLDY
 2

	)

63 
	#PHOTO_WBL_TSL
 3

	)

64 
	#PHOTO_WBL_FLUL
 4

	)

69 
	#PHOTO_COLOR_NORMAL
 0

	)

70 
	#PHOTO_COLOR_WB
 1

	)

71 
	#PHOTO_COLOR_OLD
 2

	)

75 
	s≠p_cfg
 {

76 c⁄° *
	mèbÀ
;

77 (*
	m£t
)(
u32
 
	mexd©a
);

83 
≠p_£t_c⁄fig
(
öã¡
 *
ô
, c⁄° 
≠p_cfg
 *
cfg
, 
size
);

	@app/wifi_story_machine/include/app_music.h

2 #i‚de‡
_VIDEO_MUSIC_


3 
	#_VIDEO_MUSIC_


	)

5 
	~"sy°em/ö˛udes.h
"

6 
	~"≠p_c⁄fig.h
"

7 
	~"£rvî/audio_£rvî.h
"

9 
	smusic_dec_›s
 {

10 (*
	mswôch_dú
)(
	mf£l_mode
);

11 (*
	mswôch_fûe
)(
	mf£l_mode
);

12 (*
	mdec_fûe
)(*
	mfûe
, , *, );

13 (*
	mdec_∂ay_∑u£
)(
u8
 
	mnŸify
);

14 (*
	mdec_bªakpoöt
)();

15 (*
	mdec_°›
)();

16 (*
	mdec_vﬁume
)();

17 (*
	mdec_¥ogªss
)();

18 (*
	mexô
)();

21 
	s√t_bªakpoöt
 {

22 
u32
 
	mÂå
;

23 
u16
 
	muæ_Àn
;

24 *
	muæ
;

25 c⁄° *
	mai_«me
;

26 
audio_dec_bªakpoöt
 
	mdec_bp
;

29 
	s≠p_music_hdl
 {

30 #ifde‡
CONFIG_NET_ENABLE


31 
u8
 
	mwifi_c⁄fig_°©e
;

32 
u8
 
	mwifi_c⁄√˘ed
;

33 
u8
 
	mai_c⁄√˘ed
;

34 
u8
 
	mwech©_c⁄√˘ed
;

35 
u8
 
	mli°íög
;

36 
	mwech©_•ìch_uæ
[512];

37 
u8
 
	mwech©_•ìch_ªad_Êag
;

38 
u16
 
	mwaô_dow∆ﬂd
;

39 
u16
 
	mwech©_°©e
;

40 
	mdow∆ﬂd_ªady
;

41 *
	m√t_fûe
;

42 *
	mªc_fûe
;

43 c⁄° *
	muæ
;

44 c⁄° *
	mai_«me
;

45 
£rvî
 *
	mwech©_£rvî
;

46 
£rvî
 *
	míc_£rvî
;

47 
£rvî
 *
	mai_£rvî
;

48 
√t_bªakpoöt
 
	m√t_bp
;

50 
	m∂ay_time
;

51 
	mvﬁume
;

52 
u8
 
	mgë_bªakpoöt
;

53 
u8
 
	m∂ay_voi˚_¥om±
;

54 
	mlow_powî
;

55 
u32
 
	mbp_fûe_s˛u°
;

56 
	mwaô_swôch_fûe
;

57 
FILE
 *
	mloˇl_bp_fûe
;

58 
FILE
 *
	mfûe
;

59 
	mdec_íd_¨gs
[4];

60 *
	mdec_íd_fûe
;

61 *
	mdec_íd_h™dÀr
;

62 
vfsˇn
 *
	mfsˇn
;

63 
vfsˇn
 *
	mdú_li°
;

64 
£rvî
 *
	mdec_£rvî
;

65 
audio_dec_bªakpoöt
 
	mloˇl_bp
;

66 c⁄° *
	mloˇl_∑th
;

67 c⁄° 
music_dec_›s
 *
	mdec_›s
;

68 
£rvî
 *
	mÀd_ui
;

	@app/wifi_story_machine/include/board.h

1 #i‚de‡
BOARD_H


2 
	#BOARD_H


	)

6 
av_∑rkög_dë_öô
();

7 
av_∑rkög_dë_°©us
();

8 
PWR_CTL
(
⁄_off
);

9 
ªad_powî_key
();

10 
usb_is_ch¨gög
();

11 
key_voi˚_íabÀ
(
íabÀ
);

	@app/wifi_story_machine/include/cpu_config.h

1 #i‚de‡
CPU_CONFIG_H


2 
	#CPU_CONFIG_H


	)

6 #ifde‡
__CPU_AC521x__


8 
	#FAT_CACHE_NUM
 32

	)

10 
	#VIDEO0_REC_FORMAT
 
VIDEO_FMT_AVI


	)

11 
	#VIDEO1_REC_FORMAT
 
VIDEO_FMT_AVI


	)

12 
	#VIDEO2_REC_FORMAT
 
VIDEO_FMT_AVI


	)

13 
	#VREC0_FBUF_SIZE
 (2*1024*1024)

	)

14 
	#VREC1_FBUF_SIZE
 (2*1024*1024)

	)

15 
	#VREC2_FBUF_SIZE
 (1*1024*1024 + 512 * 1024)

	)

16 
	#AUDIO_BUF_SIZE
 (300*1024)

	)

17 
	#CAMERA_CAP_BUF_SIZE
 (1 * 1024 * 1024)

	)

22 #ñi‡
deföed
 
__CPU_AC5401__


24 
	#FAT_CACHE_NUM
 64

	)

26 
	#VIDEO0_REC_FORMAT
 
VIDEO_FMT_MOV


	)

27 
	#VIDEO1_REC_FORMAT
 
VIDEO_FMT_MOV


	)

28 #i‡
THREE_WAY_ENABLE


29 
	#VIDEO2_REC_FORMAT
 
VIDEO_FMT_AVI


	)

30 
	#VREC0_FBUF_SIZE
 (12*1024*1024)

	)

31 
	#VREC1_FBUF_SIZE
 (8*1024*1024)

	)

32 
	#VREC2_FBUF_SIZE
 (8*1024*1024)

	)

34 
	#VIDEO2_REC_FORMAT
 
VIDEO_FMT_MOV


	)

35 
	#VREC0_FBUF_SIZE
 (6*1024*1024)

	)

36 
	#VREC1_FBUF_SIZE
 (2*1024*1024)

	)

37 
	#VREC2_FBUF_SIZE
 (4*1024*1024)

	)

39 
	#AUDIO_BUF_SIZE
 (300*1024)

	)

40 
	#CAMERA_CAP_BUF_SIZE
 (2 * 1024 * 1024)

	)

47 #ñi‡
deföed
 
__CPU_AC5601__


49 
	#FAT_CACHE_NUM
 64

	)

51 
	#VIDEO0_REC_FORMAT
 
VIDEO_FMT_MOV


	)

52 
	#VIDEO1_REC_FORMAT
 
VIDEO_FMT_AVI


	)

53 
	#VIDEO2_REC_FORMAT
 
VIDEO_FMT_AVI


	)

54 
	#VREC0_FBUF_SIZE
 (6*1024*1024)

	)

55 
	#VREC1_FBUF_SIZE
 (2*1024*1024)

	)

56 
	#VREC2_FBUF_SIZE
 (4*1024*1024)

	)

57 
	#AUDIO_BUF_SIZE
 (300*1024)

	)

58 
	#CAMERA_CAP_BUF_SIZE
 (2 * 1024 * 1024)

	)

	@app/wifi_story_machine/include/key_voice.h

1 #i‚de‡
KEY_VOICE_H


2 
	#KEY_VOICE_H


	)

5 
key_voi˚_°¨t
(
id
);

8 
key_voi˚_íabÀ
(
íabÀ
);

	@app/wifi_story_machine/include/led_eyes.h

1 #i‚de‡
_LED_EYES_


2 
	#_LED_EYES_


	)

4 
	~"sy°em/ö˛udes.h
"

5 
	~"≠p_c⁄fig.h
"

8 
	mLED_CLOSE
,

9 
	mLED_UP_LIGHT
,

10 
	mLED_DOWN_LIGHT
,

11 
	mLED_ALL_LIGHT
,

12 
	mLED_TWINKLING
,

13 
	mLED_TWINKLING_CIRCLE
,

14 } 
	t_Àd_°©us
;

16 
	s__gr202_Àd_˘l
 {

17 vﬁ©ûê
u8
 
	mÀd_°©us
;

18 
	mÀd_timî
;

19 (*
	mÀd_sˇn
)();

20 (*
	mÀd_swôch
)(
_Àd_°©us
 
	m°©us
);

21 (*
	mÀd_öô
)(
_Àd_°©us
 
	m°©us
);

22 (*
	mÀd_unöô
)();

23 } 
	t_gr202_Àd_˘l
;

25 
_gr202_Àd_˘l
 
gr202_Àd_˘l
;

	@app/wifi_story_machine/include/main.h

1 #i‚de‡
APP_MAIN_H


2 
	#APP_MAIN_H


	)

4 
	~"ty≥def.h
"

7 
	s≠p_öfo
 {

8 (*
	mrun
)();

12 c⁄° 
≠p_öfo
 
maö_≠p_li°
[];

	@app/wifi_story_machine/include/net_config.h

1 #i‚de‡
_NET_CONFIG_H__


2 
	#_NET_CONFIG_H__


	)

5 
	#ACCESS_NUM
 1

	)

6 
	#UUID
 "f2dd3cd7-b026-40Ø-Øf4-f6ó07376490"

	)

8 
	#WIFI_CAM_PREFIX
 "wifi_ˇmîa_ac54_"

	)

10 
	#WIFI_CAM_WIFI_PWD
 "12345678"

	)

11 
	#IPERF_ENABLE


	)

15 
	#CONFIG_RTS_JPEG_ENABLE


	)

18 
	#CONFIG_NET_UDP_ENABLE


	)

25 
	#APP_PROJECTION
 0

	)

29 
	#CTP_CTRL_PORT
 3333

	)

30 
	#CDP_CTRL_PORT
 2228

	)

31 
	#PROJECTION_PORT
 2230

	)

32 
	#VIDEO_PREVIEW_PORT
 2226

	)

33 
	#VIDEO_PLAYBACK_PORT
 2223

	)

34 
	#HTTP_PORT
 8080

	)

35 
	#RTSP_PORT
 554

	)

41 
	#_DUMP_PORT
 2229

	)

42 
	#_FORWARD_PORT
 2224

	)

43 
	#_BEHIND_PORT
 2225

	)

	@app/wifi_story_machine/include/res.h

3 #i‚de‡
__RESULT_H__


4 
	#__RESULT_H__


	)

6 
	#Chöe£_Sim∂ifõd
 1

7 
	#Chöe£_Tødôi⁄Æ
 2

8 
	#J≠™e£
 3

9 
	#K‹ón
 4

10 
	#English
 5

11 
	#Fªnch
 6

12 
	#Gîm™
 7

13 
	#Ièlün
 8

14 
	#Dutch
 9

15 
	#P‹tugue£
 10

16 
	#S∑nish
 11

17 
	#Swedish
 12

18 
	#Czech
 13

19 
	#D™ish
 14

20 
	#Pﬁish
 15

21 
	#Russün
 16

22 
	#Turkey
 17

23 
	#Hebªw
 18

24 
	#Thai
 19

25 
	#Hung¨ün
 20

26 
	#Rom™ün
 21

27 
	#Aøbic
 22

28 

	)

29 
	#LANGUAGEID_SUM
 22

	)

	@app/wifi_story_machine/include/res_ver.h

1 #i‚de‡
__RES_VER_H__


2 
	#__RES_VER_H__


	)

6 
	#IMAGE_VERION
 0xf60f23ac

	)

7 
	#STRING_VERION
 0xa2f21442

	)

	@app/wifi_story_machine/include/storage_device.h

1 #i‚de‡
STORAGE_DEVICE_H


2 
	#STORAGE_DEVICE_H


	)

7 
°‹age_devi˚_ªady
();

9 
mou¡_sd_to_fs
(c⁄° *
«me
);

11 
°‹age_devi˚_f‹m©
();

13 
unmou¡_sd_to_fs
(c⁄° *
∑th
);

	@app/wifi_story_machine/include/style.h

1 #i‚de‡
UI_STYLE_H


2 
	#UI_STYLE_H


	)

4 
	~"≠p_c⁄fig.h
"

6 #ifde‡
CONFIG_UI_STYLE_JL02_ENABLE


8 
	~"°yÀ_jl02.h
"

10 
	#ID_WINDOW_VIDEO_REC
 
PAGE_1


	)

11 
	#ID_WINDOW_VIDEO_TPH
 
PAGE_2


	)

12 
	#ID_WINDOW_VIDEO_REP
 
PAGE_3


	)

13 
	#ID_WINDOW_USB_SLAVE
 
PAGE_4


	)

14 
	#ID_WINDOW_VIDEO_SYS
 
PAGE_5


	)

15 
	#ID_WINDOW_MAIN_PAGE
 
PAGE_0


	)

16 
	#ID_WINDOW_PARKING
 
PAGE_6


	)

17 
	#ID_WINDOW_LANE
 
PAGE_7


	)

22 #ifde‡
CONFIG_UI_STYLE_LY_ENABLE


24 
	~"°yÀ_ly.h
"

26 
	#ID_WINDOW_VIDEO_REC
 
PAGE_0


	)

27 
	#ID_WINDOW_VIDEO_TPH
 
PAGE_1


	)

28 
	#ID_WINDOW_VIDEO_REP
 
PAGE_2


	)

29 
	#ID_WINDOW_USB_SLAVE
 
PAGE_3


	)

30 
	#ID_WINDOW_VIDEO_SYS
 
PAGE_4


	)

31 
	#ID_WINDOW_PARKING
 
PAGE_5


	)

32 
	#ID_WINDOW_LANE
 
PAGE_6


	)

	@app/wifi_story_machine/include/upgrade_style.h

8 #i‚de‡
_UPGRADE_STYLE_H


9 
	#_UPGRADE_STYLE_H


	)

12 
	#UPD_ID_PAGE_UPGRADE
 0X2000000

	)

13 
	#UPD_ID_PAGE_CONFIRM
 0X2000001

	)

14 
	#UPD_UI_VERSION
 0X19EFA016

	)

15 
	#UPD_ID_AFX_MSGBOX
 0X50553F8

	)

16 
	#UPD_ID_CANCEL
 0X3DE28E9

	)

17 
	#UPD_ID_CONFIRM
 0X3F26FAE

	)

18 
	#UPD_ID_CONFIRM_LAYER
 0X41DCC1D

	)

19 
	#UPD_ID_CONFIRM_LAYOUT
 0X3214DE0

	)

20 
	#UPD_ID_LAYER
 0X4B7AAB0

	)

21 
	#UPD_ID_LAYOUT
 0X3866DDE

	)

22 
	#UPD_ID_MESSAGE_0
 0X82E0D0D

	)

23 
	#UPD_ID_MESSAGE_1
 0X825AEDD

	)

24 
	#UPD_ID_MESSAGE_2
 0X8BEF22A

	)

25 
	#UPD_ID_MESSAGE_3
 0X84FFAB6

	)

26 
	#UPD_ID_MESSAGE_4
 0X8BDD5F7

	)

27 
	#UPD_ID_MESSAGE_5
 0X86F8803

	)

28 
	#UPD_ID_MESSAGE_6
 0X83E4099

	)

29 
	#UPD_ID_PIC_CONFIRM
 0X8B7291C

	)

30 
	#UPD_ID_SLIDER
 0X323FCFB8

	)

31 
	#UPD_ID_SLIDER_LEFT
 0X34119B64

	)

32 
	#UPD_ID_SLIDER_PIC
 0X35D4088C

	)

33 
	#UPD_ID_SLIDER_RIGHT
 0X33B8A955

	)

34 
	#UPD_ID_TEXT_CANCEL
 0XCAD21D0

	)

35 
	#UPD_ID_TEXT_CONFIRM
 0XCB2FD8F

	)

36 
	#UPD_ID_TEXT_PERCENT
 0XCD8D421

	)

	@app/wifi_story_machine/include/video_music.h

2 #i‚de‡
APP_MUSIC


3 
	#APP_MUSIC


	)

5 
	~"sy°em/ö˛udes.h
"

6 
	~"≠p_c⁄fig.h
"

8 
	smusic_míu_°a
 {

9 
u8
 
	mØa
;

14 
	smusic_∂ay_hdl
 {

15 
£rvî
 *
	maudio_£rvî
;

16 
music_míu_°a
 
	mmíu_°©us
;

	@app/wifi_story_machine/key_voice.c

1 
	~"sy°em/ö˛udes.h
"

2 
	~"£rvî/audio_£rvî.h
"

3 
	~"£rvî/video_dec_£rvî.h
"

6 c⁄° 
u8
 
	gkey_voi˚
[] = {

109 
u8
 
	gèke_phŸo_voi˚
[] = {

501 *
	gdev
 = 
NULL
;

502 
u8
 
	gbödex
 = 0xff;

503 
u16
 
	goff£t
 = 0;

504 
u8
 
	gkey_t⁄e_èbÀ
;

505 
u8
 
	gkvoi˚_dißbÀ
 = 0;

506 
key_voi˚_öô
();

508 
	$audio_dec_úq_h™dÀr
(*
¥iv
, *
d©a
, 
Àn
)

510 
æí
 = 
Àn
;

511 
tŸÆ_Àn
;

512 c⁄° 
u8
 *
èbÀ
;

514 i‡(
bödex
 == 0xff) {

518 i‡(
key_t⁄e_èbÀ
 == 0) {

519 
èbÀ
 = 
key_voi˚
;

520 
tŸÆ_Àn
 = (
key_voi˚
);

522 
èbÀ
 = 
èke_phŸo_voi˚
;

523 
tŸÆ_Àn
 = (
èke_phŸo_voi˚
);

526 i‡(
æí
 > 
tŸÆ_Àn
 - 
off£t
) {

527 
æí
 = 
tŸÆ_Àn
 - 
off£t
;

529 
	`mem˝y
(
d©a
, 
èbÀ
 + 
off£t
, 
æí
);

530 i‡(
æí
 < 
Àn
) {

531 
	`mem£t
((
u8
 *)
d©a
 + 
æí
, 0, 
Àn
 -Ñlen);

533 
off£t
 +
æí
;

534 i‡(
off£t
 =
tŸÆ_Àn
) {

535 
off£t
 = 0;

536 
	`dev_io˘l
(
dev
, 
AUDIOC_STREAM_OFF
, 
bödex
);

537 
bödex
 = 0xff;

539 
	}
}

541 
	$key_evít_h™dÀr
(
sys_evít
 *
e
)

543 i‡(!
	`db_£À˘
("kvo")) {

546 i‡(
kvoi˚_dißbÀ
) {

550 i‡(
e
->
ty≥
 =
SYS_KEY_EVENT
) {

551 i‡(
e
->
u
.
key
.
vÆue
 =
KEY_POWER
) {

552 i‡(
e
->
u
.
key
.
evít
 !
KEY_EVENT_CLICK
) {

556 i‡(
e
->
u
.
key
.
vÆue
 =
KEY_PHOTO
) {

559 i‡(
e
->
u
.
key
.
vÆue
 =
KEY_ENC
) {

563 i‡(
e
->
u
.
touch
.
evít
 !
TOUCH_EVENT_DOWN
) {

569 i‡(
dev
 =
NULL
) {

570 
	`key_voi˚_öô
();

574 
off£t
 = 0;

575 
key_t⁄e_èbÀ
 = 0;

577 i‡(
bödex
 == 0xff) {

578 
	`dev_io˘l
(
dev
, 
AUDIOC_STREAM_ON
, (
u32
)&
bödex
);

580 
	}
}

587 
	$key_voi˚_°¨t
(
id
)

589 i‡(!
	`db_£À˘
("kvo")) {

592 i‡(
kvoi˚_dißbÀ
) {

597 i‡(
dev
 =
NULL
) {

598 
	`key_voi˚_öô
();

602 
off£t
 = 0;

603 
key_t⁄e_èbÀ
 = 
id
;

606 i‡(
bödex
 == 0xff) {

607 
	`dev_io˘l
(
dev
, 
AUDIOC_STREAM_ON
, (
u32
)&
bödex
);

609 
	}
}

613 
	$key_voi˚_öô
()

615 
îr
;

616 
u32
 
¨g
[2];

617 
audio_f‹m©
 
f
;

619 
dev
 = 
	`dev_›í
("audio", (*)
AUDIO_TYPE_DEC
);

620 i‡(!
dev
) {

624 
f
.
vﬁume
 = 50;

625 
f
.
ch™√l
 = 1;

626 
f
.
ßm∂e_øã
 = 8000;

627 
f
.
¥i‹ôy
 = 10;

628 
îr
 = 
	`dev_io˘l
(
dev
, 
AUDIOC_SET_FMT
, (
u32
)&
f
);

629 i‡(
îr
) {

630 
	`puts
("format_err\n");

634 
¨g
[0] = 0;

635 
¨g
[1] = (
u32
)
audio_dec_úq_h™dÀr
;

636 
	`dev_io˘l
(
dev
, 
IOCTL_REGISTER_IRQ_HANDLER
, (
u32
)
¨g
);

638 
	}
}

643 
£rvî
 *
	gaudio
 = 
NULL
;

644 
FILE
 *
	gfûe
;

645 
	$audio_£rvî_evít_h™dÀr
(*
¥iv
, 
¨gc
, *
¨gv
)

647 
audio_ªq
 
r
;

648 
¨gv
[0]) {

649 
AUDIO_SERVER_EVENT_END
:

650 i‡(
audio
) {

651 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

652 
	`£rvî_ªque°
(
audio
, 
AUDIO_REQ_DEC
, &
r
);

653 
	`£rvî_˛o£
(
audio
);

654 
	`f˛o£
(
fûe
);

655 
audio
 = 
NULL
;

656 
kvoi˚_dißbÀ
 = 0;

660 
	}
}

662 
	$∂ay_voi˚_fûe
(c⁄° *
fûe_«me
)

664 
audio_ªq
 
r
;

666 i‡(
audio
) {

670 
fûe
 = 
	`f›í
(
fûe_«me
, "r");

671 i‡(!
fûe
) {

675 
audio
 = 
	`£rvî_›í
("audio_server", "dec");

676 i‡(!
audio
) {

677 
	`f˛o£
(
fûe
);

681 
kvoi˚_dißbÀ
 = 1;

683 
r
.
dec
.
cmd
 = 
AUDIO_DEC_OPEN
;

684 
r
.
dec
.
vﬁume
 = 
	`db_£À˘
("vol");

685 
r
.
dec
.
ouçut_buf
 = 
NULL
;

686 
r
.
dec
.
ouçut_buf_Àn
 = 1024;

687 
r
.
dec
.
fûe
 = file;

688 
r
.
dec
.
ch™√l
 = 1;

689 
r
.
dec
.
ßm∂e_øã
 = 8000;

690 
r
.
dec
.
¥i‹ôy
 = 0;

691 
	`£rvî_ªque°
(
audio
, 
AUDIO_REQ_DEC
, &
r
);

693 
r
.
dec
.
cmd
 = 
AUDIO_DEC_START
;

694 
	`£rvî_ªque°
(
audio
, 
AUDIO_REQ_DEC
, &
r
);

695 
	`£rvî_ªgi°î_evít_h™dÀr
(
audio
, 
NULL
, 
audio_£rvî_evít_h™dÀr
);

696 
	}
}

699 
	$°›_∂ay_voi˚_fûe
()

701 
audio_ªq
 
r
;

703 i‡(
audio
) {

704 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

705 
	`£rvî_ªque°
(
audio
, 
AUDIO_REQ_DEC
, &
r
);

706 
	`£rvî_˛o£
(
audio
);

707 
	`f˛o£
(
fûe
);

708 
audio
 = 
NULL
;

709 
kvoi˚_dißbÀ
 = 0;

711 
	}
}

	@app/wifi_story_machine/led_ui/led_ui_gr202.c

1 
	~"≠p_c⁄fig.h
"

3 #i‡(
deföed
 
CONFIG_BOARD_GR202
Ë|| (deföed 
CONFIG_BOARD_GR202_2M
)

5 
	~"£rvî/Àd_ui_£rvî.h
"

6 
	~"sy°em/öô.h
"

7 
	~"sy°em/ö˛udes.h
"

8 
	~"Àd_eyes.h
"

10 
	~"a˘i⁄.h
"

12 #ifde‡
CONFIG_BOARD_GR202


14 
	#LED1_IO
 
IO_PORTH_03


	)

15 
	#LED2_IO
 
IO_PORTH_04


	)

16 
	#LED3_IO
 
IO_PORTH_05


	)

19 #ñi‡(
deföed
 
CONFIG_BOARD_GR202_2M
)

21 
	#LED1_IO
 
IO_PORTH_11


	)

22 
	#LED2_IO
 
IO_PORTG_13


	)

23 
	#LED3_IO
 
IO_PORTG_12


	)

27 
	#LED_INIT
() do{\

28 
	`gpio_£t_hd
(
LED1_IO
,1);\

29 
	`gpio_£t_hd
(
LED2_IO
,1);\

30 
	`gpio_£t_hd
(
LED3_IO
,1);\

31 }0)

	)

32 
	#LED_ALL_CLOSE
() do{\

33 
	`gpio_dúe˘i⁄_ouçut
(
LED1_IO
,0);\

34 
	`gpio_dúe˘i⁄_ouçut
(
LED2_IO
,0);\

35 
	`gpio_dúe˘i⁄_ouçut
(
LED3_IO
,0);\

36 }0)

	)

37 
	#LED_LEFT_UP
() do{\

38 
	`gpio_dúe˘i⁄_öput
(
LED1_IO
);\

39 
	`gpio_£t_puŒ_up
(
LED1_IO
,0);\

40 
	`gpio_£t_puŒ_down
(
LED1_IO
,0);\

41 
	`gpio_dúe˘i⁄_ouçut
(
LED2_IO
,1);\

42 
	`gpio_dúe˘i⁄_ouçut
(
LED3_IO
,0);\

43 }0)

	)

44 
	#LED_RIGHT_UP
() do{\

45 
	`gpio_dúe˘i⁄_öput
(
LED1_IO
);\

46 
	`gpio_£t_puŒ_up
(
LED1_IO
,0);\

47 
	`gpio_£t_puŒ_down
(
LED1_IO
,0);\

48 
	`gpio_dúe˘i⁄_ouçut
(
LED2_IO
,0);\

49 
	`gpio_dúe˘i⁄_ouçut
(
LED3_IO
,1);\

50 }0)

	)

51 
	#LED_LEFT_DOWN
() do{\

52 
	`gpio_dúe˘i⁄_öput
(
LED2_IO
);\

53 
	`gpio_£t_puŒ_up
(
LED2_IO
,0);\

54 
	`gpio_£t_puŒ_down
(
LED2_IO
,0);\

55 
	`gpio_dúe˘i⁄_ouçut
(
LED1_IO
,0);\

56 
	`gpio_dúe˘i⁄_ouçut
(
LED3_IO
,1);\

57 }0)

	)

58 
	#LED_RIGHT_DOWN
() do{\

59 
	`gpio_dúe˘i⁄_öput
(
LED2_IO
);\

60 
	`gpio_£t_puŒ_up
(
LED2_IO
,0);\

61 
	`gpio_£t_puŒ_down
(
LED2_IO
,0);\

62 
	`gpio_dúe˘i⁄_ouçut
(
LED1_IO
,1);\

63 
	`gpio_dúe˘i⁄_ouçut
(
LED3_IO
,0);\

64 }0)

	)

67 
	#TWINKLING_CIRCLE_ONCE_TIMES
 2000

	)

69 
u8
 
	gÀd_⁄
 = 0;

70 
u8
 
	geye_Àd_°©us
;

71 
u8
 
	g°©us_Êg
 = 0;

72 
u16
 
	gÀd_˙t
 = 0;

73 
u16
 
	geye_timî
;

76 
	$gr202_Àd_sˇn
()

79 i‡(!
Àd_⁄
) {

84 
eye_Àd_°©us
) {

85 
LED_CLOSE
:

86 
	`LED_ALL_CLOSE
();

88 
LED_UP_LIGHT
:

89 i‡(
°©us_Êg
 == 0) {

90 
°©us_Êg
++;

91 
	`LED_LEFT_UP
();

93 
°©us_Êg
 = 0;

94 
	`LED_RIGHT_UP
();

97 
LED_DOWN_LIGHT
:

98 i‡(
°©us_Êg
 == 0) {

99 
°©us_Êg
++;

100 
	`LED_LEFT_DOWN
();

102 
°©us_Êg
 = 0;

103 
	`LED_RIGHT_DOWN
();

106 
LED_ALL_LIGHT
:

107 i‡(
°©us_Êg
 == 0) {

108 
°©us_Êg
++;

109 
	`LED_LEFT_UP
();

110 } i‡(
°©us_Êg
 == 1) {

111 
°©us_Êg
 ++;

112 
	`LED_RIGHT_UP
();

113 } i‡(
°©us_Êg
 == 2) {

114 
°©us_Êg
 ++;

115 
	`LED_LEFT_DOWN
();

117 
°©us_Êg
 = 0;

118 
	`LED_RIGHT_DOWN
();

121 
LED_TWINKLING
:

122 i‡(
Àd_˙t
 < 500) {

123 i‡(
°©us_Êg
 == 0) {

124 
°©us_Êg
++;

125 
	`LED_LEFT_UP
();

126 } i‡(
°©us_Êg
 == 1) {

127 
°©us_Êg
 ++;

128 
	`LED_RIGHT_UP
();

129 } i‡(
°©us_Êg
 == 2) {

130 
°©us_Êg
 ++;

131 
	`LED_LEFT_DOWN
();

133 
°©us_Êg
 = 0;

134 
	`LED_RIGHT_DOWN
();

137 
	`LED_ALL_CLOSE
();

140 
Àd_˙t
++;

141 i‡(
Àd_˙t
 >= 1000) {

142 
Àd_˙t
 = 0;

145 
LED_TWINKLING_CIRCLE
:

146 i‡(
Àd_˙t
 < (
TWINKLING_CIRCLE_ONCE_TIMES
 / 5 * 1)) {

147 i‡(
°©us_Êg
 == 0) {

148 
°©us_Êg
++;

149 
	`LED_LEFT_UP
();

150 } i‡(
°©us_Êg
 == 1) {

151 
°©us_Êg
 ++;

152 
	`LED_RIGHT_UP
();

153 } i‡(
°©us_Êg
 == 2) {

154 
°©us_Êg
 ++;

155 
	`LED_LEFT_DOWN
();

157 
°©us_Êg
 = 0;

158 
	`LED_RIGHT_DOWN
();

160 } i‡(
Àd_˙t
 < (
TWINKLING_CIRCLE_ONCE_TIMES
 / 5 * 2)) {

161 
	`LED_ALL_CLOSE
();

162 } i‡(
Àd_˙t
 < (
TWINKLING_CIRCLE_ONCE_TIMES
 / 5 * 3)) {

163 i‡(
°©us_Êg
 == 0) {

164 
°©us_Êg
++;

165 
	`LED_LEFT_DOWN
();

167 
°©us_Êg
 = 0;

168 
	`LED_RIGHT_DOWN
();

170 } i‡(
Àd_˙t
 < (
TWINKLING_CIRCLE_ONCE_TIMES
 / 5 * 4)) {

171 i‡(
°©us_Êg
 == 0) {

172 
°©us_Êg
++;

173 
	`LED_LEFT_UP
();

174 } i‡(
°©us_Êg
 == 1) {

175 
°©us_Êg
 ++;

176 
	`LED_RIGHT_UP
();

177 } i‡(
°©us_Êg
 == 2) {

178 
°©us_Êg
 ++;

179 
	`LED_LEFT_DOWN
();

181 
°©us_Êg
 = 0;

182 
	`LED_RIGHT_DOWN
();

185 } i‡(
Àd_˙t
 < (
TWINKLING_CIRCLE_ONCE_TIMES
)) {

186 i‡(
°©us_Êg
 == 0) {

187 
°©us_Êg
++;

188 
	`LED_LEFT_UP
();

190 
°©us_Êg
 = 0;

191 
	`LED_RIGHT_UP
();

194 
Àd_˙t
 = 0;

196 
Àd_˙t
 ++;

202 
	}
}

205 
	$dec_∑u£_h™dÀr
(c⁄° *
ty≥
, 
u32
 
¨g
)

207 
eye_Àd_°©us
 = 
LED_ALL_LIGHT
;

210 
	}
}

212 
	$dec_°¨t_h™dÀr
(c⁄° *
ty≥
, 
u32
 
¨g
)

214 
Àd_˙t
 = 0;

215 
°©us_Êg
 = 0;

216 
eye_Àd_°©us
 = 
LED_TWINKLING_CIRCLE
;

219 
	}
}

221 
	$öô_h™dÀr
(c⁄° *
ty≥
, 
u32
 
¨g
)

223 
	`LED_INIT
();

225 
Àd_⁄
 = 1;

226 
eye_Àd_°©us
 = 
LED_ALL_LIGHT
;

227 
eye_timî
 = 
	`sys_hi_timî_add
(
NULL
, ((*)(*))
gr202_Àd_sˇn
, 1);

230 
	}
}

232 
	$unöô_h™dÀr
(c⁄° *
ty≥
, 
u32
 
¨g
)

234 
	`sys_hi_timî_dñ
(
eye_timî
);

237 
	}
}

239 c⁄° 
uimsg_h™dl
 
	gÀd_msg_h™dÀr
[] = {

240 { "dec_°¨t", 
dec_°¨t_h™dÀr
 },

241 { "dec_∑u£", 
dec_∑u£_h™dÀr
 },

242 { "dec_°›", 
dec_∑u£_h™dÀr
 },

243 { "dec_íd", 
dec_∑u£_h™dÀr
 },

244 { "öô", 
öô_h™dÀr
 },

245 { "unöô", 
unöô_h™dÀr
 },

246 { 
NULL
, NULL},

250 
	$Àd_ui_evít_h™dÀr
(
sys_evít
 *
evít
, *
¥iv
)

252 
öã¡
 
ô
;

254 i‡(
evít
->
ty≥
 =
SYS_KEY_EVENT
) {

255 i‡(
evít
->
u
.
key
.evíà=
KEY_EVENT_CLICK
 &&Évít->u.key.
vÆue
 =
KEY_MODE
) {

256 
Àd_⁄
 = !led_on;

258 i‡(!
Àd_⁄
) {

259 
	`LED_ALL_CLOSE
();

260 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTG_08
, 0);

262 
Àd_˙t
 = 0;

263 
°©us_Êg
 = 0;

264 
	`LED_INIT
();

265 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTG_08
, 1);

268 
ô
.
«me
 = "app_music";

269 
ô
.
a˘i⁄
 = 
ACTION_MUSIC_PLAY_VOICE_PROMPT
;

270 
ô
.
d©a
 = 
Àd_⁄
 ? "012.mp3" : "011.mp3";

271 
	`°¨t_≠p_async
(&
ô
, 
NULL
, NULL);

274 
	}
}

276 
	$gr202_Àd_ui_öô
()

278 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTG_08
, 1);

279 
	`Àd_ui_ªgi°î_msg_h™dÀr
("gr202_Àd", 
Àd_msg_h™dÀr
);

281 
	}
}

285 
œã_öôˇŒ
(
gr202_Àd_ui_öô
);

	@app/wifi_story_machine/mqtt_cmd.c

1 
	~"hâp/hâp_˛i.h
"

2 
	~"wech©/dev_√t_mqâ.h
"

3 
	~"wech©/dev_√t_ﬂuth.h
"

4 
	~"js⁄_c/js⁄.h
"

5 
	~"js⁄_c/js⁄_tokíî.h
"

6 
	~"os/os_≠i.h
"

7 
	~"os/os_com∑t.h
"

8 
	~"wech©/wech©_£rvî.h
"

9 
	~"sy°em/d©aba£.h
"

10 
	~"devi˚/devi˚.h
"

11 
	~"wifi_dev.h
"

12 
	~"fs/fs.h
"

13 
	~"°‹age_devi˚.h
"

14 
	~"sock_≠i/sock_≠i.h
"

15 
	~"≠p_c⁄fig.h
"

18 #ifde‡
CONFIG_WECHAT_SDK_ENABLE


19 
	#RECV_DATA_SIZE
 1024

	)

21 
	swech©_html_fûe_öfo
 {

22 
	mfûíame
[128];

23 
	mfûëime
[16];

24 
	mfûeuæ
[1024];

25 
	mmëa_uuid
[128];

26 
u32
 
	mÆbum_id
;

27 
u32
 
	mmëa_¢
;

28 
u32
 
	m°©e
;

32 
	mWECHAT_MUSIC_PLAYING
 = 0x1,

33 
	mWECHAT_MUSIC_PAUSE
,

34 
	mWECHAT_MUSIC_STOP
,

35 
	mWECHAT_MUSIC_DOWNLOADING
,

36 
	mWECHAT_MUSIC_DOWNLOAD_FLINSH
,

40 
	s__wech©_html_°©us
 {

41 
wech©_html_fûe_öfo
 
	mcur
;

42 
wech©_html_fûe_öfo
 
	m∂ayli°
;

45 
__wech©_html_°©us
 
	gwech©_html_°©us
;

47 
	#__this
 (&
wech©_html_°©us
)

	)

50 
JL_wech©_medü_audio_∂ay
(c⁄° *
uæ
);

51 
JL_wech©_medü_audio_c⁄töue
(c⁄° *
uæ
);

52 
JL_wech©_medü_audio_∑u£
(c⁄° *
uæ
);

53 
wech©_music_dec_vﬁume
(
°ï
);

54 *
ôﬂ
(
num
, *
°r
, 
ødix
);

55 
©oi
(c⁄° *
__≈å
);

56 
wech©_£rvî_evít_uæ
(c⁄° *
uæ
, 
evít
);

60 
	$≠p_mqâ_cb_u£r_∂ay
(c⁄° *
buf„r
)

62 
js⁄_obje˘
 *
√w_obj1
 = 
NULL
;

63 
js⁄_obje˘
 *
uæ
 = 
NULL
;

64 
js⁄_obje˘
 *
«me
 = 
NULL
;

65 
js⁄_obje˘
 *
time
 = 
NULL
;

66 
js⁄_obje˘
 *
Æbum_id
 = 
NULL
;

67 
js⁄_obje˘
 *
mëa_¢
 = 
NULL
;

69 
√w_obj1
 = 
	`js⁄_tokíî_∑r£
(
buf„r
);

71 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "uæ", &
uæ
)) {

72 
__ªsu…_exô
;

75 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

77 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "«me", &
«me
)) {

78 
__ªsu…_exô
;

81 c⁄° *
«me_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

83 i‡(
	`°æí
(
«me_°rög
Ë> (
__this
->
cur
.
fûíame
) - 1) {

84 
	`mem˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
, (__this->cur.filename) - 1);

85 
__this
->
cur
.
fûíame
[(__this->cur.filename) - 1] = 0;

87 
	`°r˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
);

90 i‡(
	`°æí
(
uæ_°rög
Ë> (
__this
->
cur
.
fûeuæ
) - 1) {

91 
	`mem˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
, (__this->cur.fileurl) - 1);

92 
__this
->
cur
.
fûeuæ
[(__this->cur.fileurl) - 1] = 0;

94 
	`°r˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
);

98 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "time", &
time
)) {

99 
__ªsu…_exô
;

102 c⁄° *
time_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
time
);

104 
	`°r˝y
(
__this
->
cur
.
fûëime
, 
time_°rög
);

106 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "Æbum_id", &
Æbum_id
)) {

107 
__ªsu…_exô
;

110 
__this
->
cur
.
Æbum_id
 = 
	`js⁄_obje˘_gë_öt
(album_id);

112 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "mëa_¢", &
mëa_¢
)) {

113 
__ªsu…_exô
;

116 
__this
->
cur
.
mëa_¢
 = 
	`js⁄_obje˘_gë_öt
(meta_sn);

118 
	`¥ötf
("Æbum_id=%d mëa_¢:%d\n", 
__this
->
cur
.
Æbum_id
, __this->cur.
mëa_¢
);

120 
	`dev_mqâ_push_°©us
("∂ay", 
__this
->
cur
.
fûíame
);

121 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

123 
	`dev_mqâ_push_°©us
("play_status", "play");

125 
	`JL_wech©_medü_audio_∂ay
(
uæ_°rög
);

127 
__ªsu…_exô
:

128 
	`js⁄_obje˘_put
(
√w_obj1
);

129 
	}
}

131 
	$≠p_mqâ_cb_u£r_√xt
(c⁄° *
buf„r
)

133 
u8
 *
d©a
;

134 
js⁄_obje˘
 *
√w_obj1
 = 
NULL
;

135 
js⁄_obje˘
 *
d©a1
 = 
NULL
;

136 
js⁄_obje˘
 *
uæ
 = 
NULL
;

137 
js⁄_obje˘
 *
Æbum_id
 = 
NULL
;

138 
js⁄_obje˘
 *
mëa_¢
 = 
NULL
;

139 
js⁄_obje˘
 *
«me
 = 
NULL
;

140 
js⁄_obje˘
 *
time
 = 
NULL
;

141 i‡(!
__this
->
cur
.
°©e
) {

146 
d©a
 = (
u8
 *)
	`ˇŒoc
(1, 
RECV_DATA_SIZE
);

147 i‡(!
d©a
) {

151 i‡(
	`≠p_gë_music_uæ
("√xt", 
__this
->
cur
.
Æbum_id
, __this->cur.
mëa_¢
, 
d©a
, 
RECV_DATA_SIZE
)) {

152 
	`‰ì
(
d©a
);

156 
√w_obj1
 = 
	`js⁄_tokíî_∑r£
((c⁄° *)
d©a
);

157 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "d©a", &
d©a1
)) {

158 
__ªsu…_exô
;

161 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "uæ", &
uæ
)) {

162 
__ªsu…_exô
;

165 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

167 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "«me", &
«me
)) {

168 
__ªsu…_exô
;

171 c⁄° *
«me_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

173 i‡(
	`°æí
(
«me_°rög
Ë> (
__this
->
cur
.
fûíame
) - 1) {

174 
	`mem˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
, (__this->cur.filename) - 1);

175 
__this
->
cur
.
fûíame
[(__this->cur.filename) - 1] = 0;

177 
	`°r˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
);

180 i‡(
	`°æí
(
uæ_°rög
Ë> (
__this
->
cur
.
fûeuæ
) - 1) {

181 
	`mem˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
, (__this->cur.fileurl) - 1);

182 
__this
->
cur
.
fûeuæ
[(__this->cur.fileurl) - 1] = 0;

184 
	`°r˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
);

189 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "time", &
time
)) {

190 
__ªsu…_exô
;

193 c⁄° *
time_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
time
);

195 
	`°r˝y
(
__this
->
cur
.
fûëime
, 
time_°rög
);

197 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "Æbum_id", &
Æbum_id
)) {

198 
__ªsu…_exô
;

201 
__this
->
cur
.
Æbum_id
 = 
	`js⁄_obje˘_gë_öt
(album_id);

203 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "mëa_¢", &
mëa_¢
)) {

204 
__ªsu…_exô
;

207 
__this
->
cur
.
mëa_¢
 = 
	`js⁄_obje˘_gë_öt
(meta_sn);

209 
	`¥ötf
("Æbum_id=%d mëa_¢:%d\n", 
__this
->
cur
.
Æbum_id
, __this->cur.
mëa_¢
);

211 
	`JL_wech©_medü_audio_∂ay
(
uæ_°rög
);

213 
	`dev_mqâ_push_°©us
("∂ay", 
__this
->
cur
.
fûíame
);

214 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

215 
	`dev_mqâ_push_°©us
("play_status", "play");

217 
__ªsu…_exô
:

219 
	`js⁄_obje˘_put
(
√w_obj1
);

220 
	`‰ì
(
d©a
);

222 
	}
}

224 
	$≠p_mqâ_cb_u£r_¥e
(c⁄° *
buf„r
)

226 
u8
 *
d©a
;

227 
js⁄_obje˘
 *
√w_obj1
 = 
NULL
;

228 
js⁄_obje˘
 *
d©a1
 = 
NULL
;

229 
js⁄_obje˘
 *
uæ
 = 
NULL
;

230 
js⁄_obje˘
 *
Æbum_id
 = 
NULL
;

231 
js⁄_obje˘
 *
mëa_¢
 = 
NULL
;

232 
js⁄_obje˘
 *
«me
 = 
NULL
;

233 
js⁄_obje˘
 *
time
 = 
NULL
;

234 i‡(!
__this
->
cur
.
°©e
) {

238 
d©a
 = (
u8
 *)
	`ˇŒoc
(1, 
RECV_DATA_SIZE
);

239 i‡(!
d©a
) {

243 i‡(
	`≠p_gë_music_uæ
("¥e", 
__this
->
cur
.
Æbum_id
, __this->cur.
mëa_¢
, 
d©a
, 
RECV_DATA_SIZE
)) {

244 
	`‰ì
(
d©a
);

248 
√w_obj1
 = 
	`js⁄_tokíî_∑r£
((c⁄° *)
d©a
);

249 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "d©a", &
d©a1
)) {

250 
__ªsu…_exô
;

253 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "uæ", &
uæ
)) {

254 
__ªsu…_exô
;

257 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

259 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "«me", &
«me
)) {

260 
__ªsu…_exô
;

263 c⁄° *
«me_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

265 i‡(
	`°æí
(
«me_°rög
Ë> (
__this
->
cur
.
fûíame
) - 1) {

266 
	`mem˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
, (__this->cur.filename) - 1);

267 
__this
->
cur
.
fûíame
[(__this->cur.filename) - 1] = 0;

269 
	`°r˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
);

273 i‡(
	`°æí
(
uæ_°rög
Ë> (
__this
->
cur
.
fûeuæ
) - 1) {

274 
	`mem˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
, (__this->cur.fileurl) - 1);

275 
__this
->
cur
.
fûeuæ
[(__this->cur.fileurl) - 1] = 0;

277 
	`°r˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
);

283 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "time", &
time
)) {

284 
__ªsu…_exô
;

287 c⁄° *
time_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
time
);

289 
	`°r˝y
(
__this
->
cur
.
fûëime
, 
time_°rög
);

291 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "Æbum_id", &
Æbum_id
)) {

292 
__ªsu…_exô
;

295 
__this
->
cur
.
Æbum_id
 = 
	`js⁄_obje˘_gë_öt
(album_id);

297 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
d©a1
, "mëa_¢", &
mëa_¢
)) {

298 
__ªsu…_exô
;

301 
__this
->
cur
.
mëa_¢
 = 
	`js⁄_obje˘_gë_öt
(meta_sn);

303 
	`¥ötf
("Æbum_id=%d mëa_¢:%d\n", 
__this
->
cur
.
Æbum_id
, __this->cur.
mëa_¢
);

305 
	`JL_wech©_medü_audio_∂ay
(
uæ_°rög
);

306 
	`dev_mqâ_push_°©us
("∂ay", 
__this
->
cur
.
fûíame
);

307 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

309 
	`dev_mqâ_push_°©us
("play_status", "play");

311 
__ªsu…_exô
:

312 
	`js⁄_obje˘_put
(
√w_obj1
);

313 
	`‰ì
(
d©a
);

315 
	}
}

318 
	$≠p_mqâ_cb_u£r_∑u£
(c⁄° *
buf„r
)

320 
buf
[10];

321 i‡(!
__this
->
cur
.
°©e
) {

325 i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PLAYING
) {

326 
	`°r˝y
(
buf
, "stop");

327 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PAUSE
;

328 } i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PAUSE


329 || 
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_STOP
) {

331 
	`°r˝y
(
buf
, "play");

332 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

334 
	`dev_mqâ_push_°©us
("∂ay_°©us", 
buf
);

335 
	}
}

338 
	$≠p_mqâ_cb_u£r_°›
(c⁄° *
buf„r
)

340 
buf
[10];

341 i‡(!
__this
->
cur
.
°©e
) {

345 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_STOP
;

346 
	`°r˝y
(
buf
, "stop");

347 
	`dev_mqâ_push_°©us
("∂ay_°©us", 
buf
);

348 
	}
}

353 
	$≠p_mqâ_cb_u£r_vﬁume_ch™ge
(c⁄° *
buf„r
)

356 
u32
 
ﬁd_vﬁ
 = 0;

357 
buf
[16];

358 
u32
 
vﬁ
 = 
	`db_£À˘
("vol");

359 i‡(
vﬁ
 - 
ﬁd_vﬁ
 > 20 || old_vol - vol > 20) {

360 
	`ôﬂ
(
vﬁ
, 
buf
, 10);

361 
	`dev_mqâ_push_°©us
("vﬁume", 
buf
);

363 
ﬁd_vﬁ
 = 
vﬁ
;

365 
	}
}

367 
	$≠p_mqâ_cb_u£r_upd©e
(c⁄° *
buf„r
)

372 
	`¥ötf
("\n\n\nupdate update update\n\n\n");

373 
	`Ÿa_upd©e
("wifi_°‹y", "devi˚", 
OTA_MAJOR
, 
OTA_MINOR
, 
OTA_PATCH
);

374 
	}
}

380 
	$≠p_mqâ_cb_sys_•ìch
(c⁄° *
buf„r
)

383 
	`wech©_£rvî_evít_uæ
(
buf„r
, 
WECHAT_SERVER_SPEECH_URL_EVENT
);

384 
	}
}

386 
	$≠p_mqâ_cb_u£r_vﬁume
(c⁄° *
buf„r
)

388 
	`¥ötf
("buf„r->%s\n", 
buf„r
);

389 
	`wech©_music_dec_vﬁume
(
	`©oi
(
buf„r
));

390 
	}
}

392 
hâpö_îr‹
 
hâp˛i_öô
(
hâp˛i_˘x
 *
˘x
);

393 
s32_t
 
hâp˛i_ªad
(
hâp˛i_˘x
 *
˘x
, *
ªcvbuf
, 
u32_t
 
Àn
);

394 
hâp˛i_˛o£
(
hâp˛i_˘x
 *
˘x
);

397 
	$hâp˛i_b
(*
˘x
, *
buf
, 
size
, *
¥iv
, 
hâpö_°©us
 
°©us
)

401 
	}
}

404 
	$__hâp_∂ayli°_dow∆ﬂd
(c⁄° *
uæ
, c⁄° *
«me
)

406 
îr‹
 = 0;

407 
hâp˛i_˘x
 
˘x
;

408 
ªt
 = 0;

409 *
fd
 = 
NULL
;

410 *
buf„r
 = 
NULL
;

411 
«mebuf
[256];

413 c⁄° 
°‹y_∑th
[8] = { 0x45, 0x65, 0x8B, 0x4E, 0x2f, 0x0};

414 
	`¥ötf
("uæ->%s\n", 
uæ
);

415 
	`mem£t
(&
˘x
, 0x0, (ctx));

416 
	`mem£t
(
«mebuf
, 0, 256);

418 
ªt
 = 
	`‚ame_to_∑th
(
«mebuf
, 
CONFIG_ROOT_PATH
, 
°‹y_∑th
, 6);

419 
	`put_buf
(
«mebuf
, 
ªt
);

420 
	`mem˝y
(
«mebuf
 + 
ªt
, 
«me
, 
	`°æí
(name));

421 
	`put_buf
(
«mebuf
, 
ªt
 + 
	`°æí
(
«me
));

422 
	`mem˝y
(
«mebuf
 + 
ªt
 + 
	`°æí
(
«me
), 
uæ
 + strlen(url) - 4, 4);

423 
˘x
.
uæ
 = url;

424 
˘x
.
c⁄√˘i⁄
 = "close";

425 
˘x
.
timeout_mûl£c
 = 2000;

426 
˘x
.
cb
 = 
hâp˛i_b
;

427 
îr‹
 = 
	`hâp˛i_öô
(&
˘x
);

428 i‡(
îr‹
 =
HERROR_OK
) {

429 
fd
 = 
	`f›í
(
«mebuf
, "w+");

430 i‡(!
fd
) {

431 
	`¥ötf
("open file fail\n");

433 
buf„r
 = 
	`mÆloc
(8 * 1024);

434 i‡(!
buf„r
) {

437 
˘x
.
c⁄ã¡_Àngth
) {

438 
ªt
 = 
	`hâp˛i_ªad
(&
˘x
, 
buf„r
, 8 * 1024);

439 i‡(
ªt
 < 0) {

442 
	`fwrôe
(
fd
, 
buf„r
, 
ªt
);

443 
˘x
.
c⁄ã¡_Àngth
 -
ªt
 ;

451 
	`f˛o£
(
fd
);

452 
	`‰ì
(
buf„r
);

457 
	`hâp˛i_˛o£
(&
˘x
);

459  
îr‹
;

462 
	}
}

467 
	$∂ayli°_dow∆ﬂd_èsk
(*
¨g
)

469 
wech©_html_fûe_öfo
 *
∂ayli°
 = (wech©_html_fûe_öfÿ*)
¨g
;

471 
ªt
 = 0;

473 
	`¥ötf
("uæ=>%s\n", 
∂ayli°
->
fûeuæ
);

474 
	`¥ötf
("fûíame=>%s\n", 
∂ayli°
->
fûíame
);

475 
	`¥ötf
("mëa_uuid=>%s\n", 
∂ayli°
->
mëa_uuid
);

477 *
buf„r
 = 
	`mÆloc
(1024);

479 
	`•rötf
(
buf„r
, "{\\\"ty≥\\\":\\\"dow∆ﬂd\\\",\\\"öfo\\\":\\\"Ê≠£Âú®‰∏ãËΩΩÔºö%s\\\"}", 
∂ayli°
->
fûíame
);

480 
	`dev_mqâ_push_∂ayli°
("dow∆ﬂd", 
buf„r
);

481 
ªt
 = 
	`__hâp_∂ayli°_dow∆ﬂd
(
∂ayli°
->
fûeuæ
,Öœyli°->
mëa_uuid
);

482 i‡(
ªt
) {

483 
	`¥ötf
("httpÖlaylist download fail\n");

485 
	`•rötf
(
buf„r
, "{\\\"ty≥\\\":\\\"îr‹\\\",\\\"öfo\\\":\\\"‰∏ãËΩΩÂ§±Ë¥•Ôºö%s\\\"}", 
∂ayli°
->
fûíame
);

486 
	`dev_mqâ_push_∂ayli°
("dow∆ﬂd", 
buf„r
);

489 
	`•rötf
(
buf„r
, "{\\\"ty≥\\\":\\\"föish\\\",\\\"öfo\\\":\\\"‰∏ãËΩΩÂÆåÊàêÔºö%s\\\"}", 
∂ayli°
->
fûíame
);

490 
	`dev_mqâ_push_∂ayli°
("dow∆ﬂd", 
buf„r
);

494 
__this
->
∂ayli°
.
°©e
 = 
WECHAT_MUSIC_DOWNLOAD_FLINSH
;

495 
	`‰ì
(
buf„r
);

497 
	}
}

499 
	$≠p_mqâ_cb_u£r_∂ayli°_dow∆ﬂd
(c⁄° *
buf„r
)

501 
	`¥ötf
("buf„r->%s\n", 
buf„r
);

502 
i
;

503 
ªt
;

504 
js⁄_obje˘
 *
√w_obj1
 = 
NULL
;

505 
js⁄_obje˘
 *
√w_obj2
 = 
NULL
;

506 
js⁄_obje˘
 *
uæ
 = 
NULL
;

507 
js⁄_obje˘
 *
«me
 = 
NULL
;

508 
js⁄_obje˘
 *
mëa_uuid
 = 
NULL
;

510 *
buf„r1
 = 
	`mÆloc
(1024);

512 
√w_obj1
 = 
	`js⁄_tokíî_∑r£
((c⁄° *)
buf„r
);

514 
i
 = 0;; i++) {

515 
√w_obj2
 = 
	`¨øy_li°_gë_idx
(
	`js⁄_obje˘_gë_¨øy
(
√w_obj1
), 
i
);

516 i‡(
√w_obj2
 =
NULL
) {

520 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj2
, "uæ", &
uæ
)) {

521 
__ªsu…_exô
;

523 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

527 i‡(
	`°æí
(
uæ_°rög
Ë> (
__this
->
∂ayli°
.
fûeuæ
) - 1) {

528 
	`mem˝y
(
__this
->
∂ayli°
.
fûeuæ
, 
uæ_°rög
, (__this->playlist.fileurl) - 1);

529 
__this
->
∂ayli°
.
fûeuæ
[(__this->playlist.fileurl) - 1] = 0;

531 
	`°r˝y
(
__this
->
∂ayli°
.
fûeuæ
, 
uæ_°rög
);

535 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj2
, "mëa_uuid", &
mëa_uuid
)) {

536 
__ªsu…_exô
;

538 c⁄° *
mëa_uuid_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
mëa_uuid
);

543 i‡(!
	`°rcmp
(
mëa_uuid_°rög
, 
__this
->
∂ayli°
.
mëa_uuid
)

544 || 
__this
->
∂ayli°
.
°©e
 =
WECHAT_MUSIC_DOWNLOADING
) {

545 
	`•rötf
(
buf„r1
, "{\\\"ty≥\\\":\\\"dow∆ﬂd\\\",\\\"öfo\\\":\\\"Ê≠£Âú®‰∏ãËΩΩÔºö%s\\\"}", 
__this
->
∂ayli°
.
fûíame
);

546 
	`dev_mqâ_push_∂ayli°
("dow∆ﬂd", 
buf„r1
);

547 
	`¥ötf
("warnning it is downloading.....\n");

548 
__ªsu…_exô
;

552 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj2
, "«me", &
«me
)) {

553 
__ªsu…_exô
;

555 c⁄° *
«me_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

557 i‡(
	`°æí
(
«me_°rög
Ë> (
__this
->
∂ayli°
.
fûíame
) - 1) {

558 
	`mem˝y
(
__this
->
∂ayli°
.
fûíame
, 
«me_°rög
, (__this->playlist.filename) - 1);

559 
__this
->
∂ayli°
.
fûíame
[(__this->playlist.filename) - 1] = 0;

561 
	`°r˝y
(
__this
->
∂ayli°
.
fûíame
, 
«me_°rög
);

565 i‡(!
	`°‹age_devi˚_ªady
()) {

566 
	`•rötf
(
buf„r1
, "{\\\"ty≥\\\":\\\"îr‹\\\",\\\"öfo\\\":\\\"‰∏ãËΩΩÂ§±Ë¥•Ôºö%s\\\"}", 
__this
->
∂ayli°
.
fûíame
);

568 
	`dev_mqâ_push_∂ayli°
("dow∆ﬂd", 
buf„r1
);

569 
__ªsu…_exô
;

574 i‡(
	`°æí
(
mëa_uuid_°rög
Ë> (
__this
->
∂ayli°
.
mëa_uuid
) - 1) {

575 
	`mem˝y
(
__this
->
∂ayli°
.
mëa_uuid
, 
mëa_uuid_°rög
, (__this->playlist.meta_uuid) - 1);

576 
__this
->
∂ayli°
.
mëa_uuid
[(__this->playlist.meta_uuid) - 1] = 0;

578 
	`°r˝y
(
__this
->
∂ayli°
.
mëa_uuid
, 
mëa_uuid_°rög
);

584 
__this
->
∂ayli°
.
°©e
 = 
WECHAT_MUSIC_DOWNLOADING
;

585 
ªt
 = 
	`thªad_f‹k
("∂ayli°_dow∆ﬂd_èsk", 17, 0x500, 0, 0, 
∂ayli°_dow∆ﬂd_èsk
, (*Ë&
__this
->
∂ayli°
);

587 i‡(
ªt
 !
OS_NO_ERR
) {

588 
	`¥ötf
("¸óãÅhªad faûÑë=%d\n", 
ªt
);

589 
__ªsu…_exô
;

594 
__ªsu…_exô
:

595 
	`‰ì
(
buf„r1
);

596 
	`js⁄_obje˘_put
(
√w_obj1
);

598 
	}
}

605 
	$≠p_mqâ_cb_u£r_°©us
(c⁄° *
buf„r
)

607 
buf
[32];

608 
u8
 
mac_addr
[6];

609 
	`dev_mqâ_push_°©us
("online", "ËÆæÂ§áÂú®Á∫ø");

610 
	`dev_mqâ_push_°©us
("quantity", "20");

612 
u32
 
vﬁ
 = 
	`db_£À˘
("vol");

613 
	`ôﬂ
(
vﬁ
, 
buf
, 10);

614 
	`dev_mqâ_push_°©us
("vﬁume", 
buf
);

616 
	`mem£t
(
buf
, 0, 32);

617 i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PLAYING
) {

618 
	`°r˝y
(
buf
, "play");

619 } i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PAUSE
) {

620 
	`°r˝y
(
buf
, "stop");

622 
	`dev_mqâ_push_°©us
("∂ay_°©us", 
buf
);

624 
	`mem£t
(
buf
, 0, 32);

626 
	`•rötf
(
buf
, "%d.%d.%d", 
OTA_MAJOR
, 
OTA_MINOR
, 
OTA_PATCH
);

629 
	`dev_mqâ_push_°©us
("vîsi⁄", 
buf
);

630 
	`dev_mqâ_push_°©us
("∂ay", 
__this
->
cur
.
fûíame
);

632 
	`mem£t
(
buf
, 0, 32);

633 *
fd
 = 
	`dev_›í
("wifi", 
NULL
);

635 
	`dev_io˘l
(
fd
, 
DEV_GET_MAC
, (
u32
)&
mac_addr
);

636 
	`•rötf
(
buf
, "%02x:%02x:%02x:%02x:%02x:%02x"

637 , 
mac_addr
[0]

638 , 
mac_addr
[1]

639 , 
mac_addr
[2]

640 , 
mac_addr
[3]

641 , 
mac_addr
[4]

642 , 
mac_addr
[5]);

644 
	`dev_mqâ_push_°©us
("mac", 
buf
);

647 
cfg_öfo
 
öfo
;

648 
öfo
.
mode
 = 
NONE_MODE
;

649 
	`dev_io˘l
(
fd
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
öfo
);

650 
	`dev_mqâ_push_°©us
("wifi", 
öfo
.
ssid
);

651 
	`dev_˛o£
(
fd
);

653 
	`mem£t
(
buf
, 0, 32);

656 
u32
 
•a˚
 = 0;

657 
vfs_∑πôi⁄
 *
∑π
 = 
NULL
;

658 i‡(
	`°‹age_devi˚_ªady
() == 0) {

660 
	`dev_mqâ_push_°©us
("storage", "‰∏çÂú®Á∫ø");

662 
∑π
 = 
	`fgë_∑πôi⁄
(
CONFIG_ROOT_PATH
);

663 
	`fgë_‰ì_•a˚
(
CONFIG_ROOT_PATH
, &
•a˚
);

664 
	`•rötf
(
buf
, "%dMB/%dMB", 
•a˚
 / 1024, 
∑π
->
tŸÆ_size
 / 1024);

666 
	`dev_mqâ_push_°©us
("°‹age", 
buf
);

670 
	}
}

674 
	$dev_mqâ_cb_sys_msg
(*
cmd
, *
∑rm
)

676 
	`≠p_mqâ_cb_sys_•ìch
(
∑rm
);

677 
	}
}

679 
	$dev_mqâ_cb_u£r_msg
(*
cmd
, *
∑rm
)

681 i‡(!
	`°rcmp
(
cmd
, "play")) {

682 
	`≠p_mqâ_cb_u£r_∂ay
(
∑rm
);

683 } i‡(!
	`°rcmp
(
cmd
, "status")) {

684 
	`≠p_mqâ_cb_u£r_°©us
(
∑rm
);

685 } i‡(!
	`°rcmp
(
cmd
, "list")) {

686 
	`¥ötf
("no supportÜist\n");

687 } i‡(!
	`°rcmp
(
cmd
, "stop")) {

688 
	`¥ötf
("no support stop\n");

689 } i‡(!
	`°rcmp
(
cmd
, "next")) {

690 
	`≠p_mqâ_cb_u£r_√xt
(
NULL
);

691 } i‡(!
	`°rcmp
(
cmd
, "pre")) {

692 
	`≠p_mqâ_cb_u£r_¥e
(
NULL
);

693 } i‡(!
	`°rcmp
(
cmd
, "pause")) {

694 
	`JL_wech©_medü_audio_∑u£
(
NULL
);

695 
	`≠p_mqâ_cb_u£r_∑u£
(
NULL
);

696 } i‡(!
	`°rcmp
(
cmd
, "continue")) {

697 i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_STOP
) {

698 
	`JL_wech©_medü_audio_∂ay
(
__this
->
cur
.
fûeuæ
);

699 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

700 
	`dev_mqâ_push_°©us
("play_status", "play");

702 } i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PAUSE
) {

703 
	`JL_wech©_medü_audio_c⁄töue
(
NULL
);

704 
	`≠p_mqâ_cb_u£r_∑u£
(
NULL
);

706 } i‡(!
	`°rcmp
(
cmd
, "download")) {

707 
	`≠p_mqâ_cb_u£r_∂ayli°_dow∆ﬂd
(
∑rm
);

708 } i‡(!
	`°rcmp
(
cmd
, "update")) {

709 
	`≠p_mqâ_cb_u£r_upd©e
(
NULL
);

712 
	`¥ötf
("no support \n");

714 
	}
}

717 
	$wech©_≠i_èsk
(*
¨g
)

719 
msg
[32];

720 
îr
;

722 
îr
 = 
	`os_èskq_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

723 i‡(
îr
 !
OS_TASKQ
 || 
msg
[0] !
Q_USER
) {

727 
msg
[1]) {

728 
WECHAT_NEXT_SONG
:

729 
	`puts
("===========WECHAT_NEXT_END\n");

730 
	`≠p_mqâ_cb_u£r_√xt
(
NULL
);

732 
WECHAT_PRE_SONG
:

733 
	`puts
("===========WECHAT_PRE_END\n");

734 
	`≠p_mqâ_cb_u£r_¥e
(
NULL
);

736 
WECHAT_PAUSE_SONG
:

737 
	`puts
("===========WECHAT_PAUSE\n");

738 
	`≠p_mqâ_cb_u£r_∑u£
(
NULL
);

740 
WECHAT_VOLUME_CHANGE
:

741 
	`puts
("===========WECHAT_VOLUME_CHANGE\n");

742 
	`≠p_mqâ_cb_u£r_vﬁume_ch™ge
(
NULL
);

744 
WECHAT_MEDIA_END
:

745 
	`puts
("===========WECHAT_MEDIA_END\n");

746 
	`≠p_mqâ_cb_u£r_√xt
(
NULL
);

748 
WECHAT_MEDIA_STOP
:

749 
	`puts
("===========WECHAT_MEDIA_STOP\n");

750 
	`≠p_mqâ_cb_u£r_°›
(
NULL
);

752 
WECHAT_KILL_SELF_TASK
:

753 
	`¥ötf
("\nwechatÅask kill\n");

759 
	}
}

	@app/wifi_story_machine/turing_cmd.c

1 
	~"os/os_com∑t.h
"

2 
	~"turög/turög.h
"

4 #ifde‡
CONFIG_TURING_SDK_ENABLE


6 
	$turög_cb
(
code
, 
js⁄_obje˘
 *
func
)

8 
js⁄_obje˘
 *
√w
 = 
NULL
;

9 
js⁄_obje˘
 *
uæ
 = 
NULL
;

10 
js⁄_obje˘
 *
isPœy
 = 
NULL
;

11 
ªt
 = 0;

13 
code
) {

14 
TURING_EVENT_FUN_SLEEP_CTL
:

15 
TURING_EVENT_FUN_DANCE
:

16 
TURING_EVENT_FUN_SPORT_CTL
:

17 
TURING_EVENT_FUN_ALARM_CTL
:

19 
TURING_EVENT_FUN_VOL_CTL
:

20 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "›î©e", &
√w
)) {

21 
is
 = 
	`js⁄_obje˘_gë_öt
(
√w
);

22 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
√w
, "arg", &new)) {

23 
ªt
 = 
	`js⁄_obje˘_gë_öt
(
√w
);

24 i‡(
is
) {

32 
TURING_EVENT_FUN_SCREEN_LIGHT
:

33 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "›î©e", &
√w
)) {

34 
is
 = 
	`js⁄_obje˘_gë_öt
(
√w
);

35 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
√w
, "arg", &new)) {

36 
ªt
 = 
	`js⁄_obje˘_gë_öt
(
√w
);

37 i‡(
is
) {

45 
TURING_EVENT_FUN_PLAY_MUSIC
:

46 
TURING_EVENT_FUN_PLAY_STORY
:

47 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "›î©e", &
√w
)) {

48 
ªt
 = 
	`js⁄_obje˘_gë_öt
(
√w
);

50 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "isPœy", &
isPœy
)) {

51 
is
 = 
	`js⁄_obje˘_gë_öt
(
isPœy
);

52 i‡(
is
 == 1) {

53 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "uæ", &
uæ
)) {

54 
	`£t_turög_medü_uæ
(
	`js⁄_obje˘_gë_°rög
(
uæ
));

59 
TURING_EVENT_FUN_ANIMAL_SOUND
:

60 
TURING_EVENT_FUN_GUESS_SOUND
:

61 i‡(
	`js⁄_obje˘_obje˘_gë_ex
(
func
, "uæ", &
uæ
)) {

62 
	`£t_turög_medü_uæ
(
	`js⁄_obje˘_gë_°rög
(
uæ
));

70 
	}
}

71 
	#APIKEY
 "3d442018244f477d8fc84b2f05d6571c"

	)

72 
	#DEVICE_ID
 "aiAA001122334483"

	)

73 
	#SECRET_KEY
 "58AF23xUN47Y4Tt4"

	)

74 
	$öô_turög_∑ø
()

76 
turög_∑ø
 
∑ø
 = {0};

78 
	`°r˝y
(
∑ø
.
u£r_id
, 
DEVICE_ID
);

79 
	`°r˝y
(
∑ø
.
´s_key
, 
SECRET_KEY
);

80 
	`°r˝y
(
∑ø
.
≠i_key
, 
APIKEY
);

82 
∑ø
.
a§
 = 
ASR_SPEEX
;

83 
∑ø
.
âs
 = 
TTS_MP3_16
;

84 
∑ø
.
Êag
 = 
OUTPUT_ARS_TTS_TXT
;

85 
∑ø
.
ªÆ_time
 = 
STREAM_IDENTIFY
;

86 
∑ø
.
ícode
 = 
NORMAL_ENCODE
;

87 
∑ø
.
ty≥
 = 
SMARTCHAT
;

88 
∑ø
.
•ìd
 = 5;

89 
∑ø
.
pôch
 = 5;

90 
∑ø
.
vﬁume
 = 5;

91 
∑ø
.
t⁄e
 = 14;

92 
∑ø
.
a§_œn
 = 0;

93 
∑ø
.
âs_œn
 = 0;

95 
	`£t_turög_∑ø
(&
∑ø
, 5000, 
turög_cb
);

96 
	}
}

	@app/wifi_story_machine/turing_mqtt_cmd.c

1 
	~"hâp/hâp_˛i.h
"

2 
	~"js⁄_c/js⁄.h
"

3 
	~"js⁄_c/js⁄_tokíî.h
"

4 
	~"os/os_≠i.h
"

5 
	~"os/os_com∑t.h
"

6 
	~"wech©/wech©_£rvî.h
"

7 
	~"sy°em/d©aba£.h
"

8 
	~"devi˚/devi˚.h
"

9 
	~"wifi_dev.h
"

10 
	~"fs/fs.h
"

11 
	~"°‹age_devi˚.h
"

12 
	~"sock_≠i/sock_≠i.h
"

13 
	~"≠p_c⁄fig.h
"

14 
	~"evít.h
"

17 #ifde‡
CONFIG_TURING_SDK_ENABLE


18 
	#RECV_DATA_SIZE
 1024

	)

20 
	swech©_html_fûe_öfo
 {

21 
	mfûíame
[128];

22 
	mfûëime
[16];

23 
	mfûeuæ
[1024];

24 
	mmëa_uuid
[128];

25 
	mÆbum_id
[32];

26 
u32
 
	mmëa_¢
;

27 
u32
 
	m°©e
;

28 
u32
 
	mmesßge_ty≥
;

31 
	sé_iŸ_devi˚_°©e
 {

32 
	mvﬁ
;

33 
	mb©ãry
;

34 
	ms‰ì
;

35 
	m°ŸÆ
;

36 
	mshake
;

37 
	mpowî
;

38 
	mb 
;

39 
	m∂ay
;

40 
	mch¨gög
;

41 
	mlbi
;

42 
	mtˇrd
;

48 
	mWECHAT_MUSIC_PLAYING
 = 0x1,

49 
	mWECHAT_MUSIC_PAUSE
,

50 
	mWECHAT_MUSIC_STOP
,

51 
	mWECHAT_MUSIC_DOWNLOADING
,

52 
	mWECHAT_MUSIC_DOWNLOAD_FLINSH
,

57 
	mMQTT_MESSAGE_CHAT
 = 0x0,

58 
	mMQTT_MESSAGE_AUDIO
,

59 
	mMQTT_MESSAGE_CONTROL
,

60 
	mMQTT_MESSAGE_NOTIFY


64 
	mMQTT_MESSAGE_MUSIC_PLAY
 = 0x1,

65 
	mMQTT_MESSAGE_MUSIC_STOP
,

69 
	mCONCROL_VOL_DOWN
 = 0x0,

70 
	mCONCROL_VOL_UP
,

71 
	mCONCROL_LED_CLOSE
,

72 
	mCONCROL_LED_OPEN
,

73 
	mCONCROL_LOW_POWER_OPEN
,

74 
	mCONCROL_LOW_POWER_CLOSE
,

75 
	mCONCROL_STROAGE_FORMAT
,

76 
	mCONCROL_DEFAULT
,

77 
	mCONCROL_SET_CLOCK
,

78 
	mCONCROL_CALL_PHONE
,

79 
	mCONCROL_SLEEP_TIME
,

80 
	mCONCROL_SET_UP
,

81 
	mCONCROL_SET_CLOSE_PLAYING
,

89 
	s__wech©_html_°©us
 {

90 
wech©_html_fûe_öfo
 
	mcur
;

91 
wech©_html_fûe_öfo
 
	m∂ayli°
;

92 
é_iŸ_devi˚_°©e
 
	mdev_°©e
;

95 
__wech©_html_°©us
 
	gwech©_html_°©us
;

97 
	#__this
 (&
wech©_html_°©us
)

	)

100 
turög_wech©_medü_audio_∂ay
(c⁄° *
uæ
);

101 
turög_wech©_medü_audio_c⁄töue
(c⁄° *
uæ
);

102 
turög_wech©_medü_audio_∑u£
(c⁄° *
uæ
);

103 
turög_wech©_°©e_noôfy
(
u8
 
ty≥
, c⁄° *
°©us_buf„r
) ;

104 *
ôﬂ
(
num
, *
°r
, 
ødix
);

105 
©oi
(c⁄° *
__≈å
);

106 
turög_wech©_£rvî_evít_uæ
(c⁄° *
uæ
, 
evít
);

107 
wech©_music_dec_vﬁume
(
°ï
);

108 
gë_≠p_music_vﬁume
();

109 
turög_wech©_√xt_s⁄g
(*
tôÀ
, *
id
);

110 
turög_wech©_¥e_s⁄g
(*
tôÀ
, *
id
);

111 
turög_wech©_∑u£_s⁄g
(*
tôÀ
, *
id
, 
u8
 
°©us
);

114 
	$mqâ_mesßge_ch©
(
js⁄_obje˘
 *
mesßge
)

116 
js⁄_obje˘
 *
uæ
 = 
NULL
;

118 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "uæ", &
uæ
)) {

122 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

124 
	`turög_wech©_£rvî_evít_uæ
(
uæ_°rög
, 
WECHAT_SERVER_SPEECH_URL_EVENT
);

128 
	}
}

129 
	$mqâ_mesßge_audio
(
js⁄_obje˘
 *
mesßge
)

131 
js⁄_obje˘
 *
uæ
 = 
NULL
;

132 
js⁄_obje˘
 *
›î©e
 = 
NULL
;

133 
js⁄_obje˘
 *
Æbum_id
 = 
NULL
;

134 
js⁄_obje˘
 *
mëa_¢
 = 
NULL
;

135 
js⁄_obje˘
 *
«me
 = 
NULL
;

138 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "¨g", &
«me
)) {

142 c⁄° *
«me_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
«me
);

144 i‡(
	`°æí
(
«me_°rög
Ë> (
__this
->
cur
.
fûíame
) - 1) {

145 
	`mem˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
, (__this->cur.filename) - 1);

146 
__this
->
cur
.
fûíame
[(__this->cur.filename) - 1] = 0;

148 
	`°r˝y
(
__this
->
cur
.
fûíame
, 
«me_°rög
);

152 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "uæ", &
uæ
)) {

157 c⁄° *
uæ_°rög
 = 
	`js⁄_obje˘_gë_°rög
(
uæ
);

161 i‡(
	`°æí
(
uæ_°rög
Ë> (
__this
->
cur
.
fûeuæ
) - 1) {

162 
	`mem˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
, (__this->cur.fileurl) - 1);

163 
__this
->
cur
.
fûeuæ
[(__this->cur.fileurl) - 1] = 0;

165 
	`°r˝y
(
__this
->
cur
.
fûeuæ
, 
uæ_°rög
);

169 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "medüId", &
Æbum_id
)) {

173 
id
 = 
	`js⁄_obje˘_gë_öt
(
Æbum_id
);

175 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "›î©e", &
›î©e
)) {

180 
music_°©e
 = 
	`js⁄_obje˘_gë_öt
(
›î©e
);

183 i‡(
music_°©e
 =
MQTT_MESSAGE_MUSIC_PLAY
 && 
id
 !
	`©oi
(
__this
->
cur
.
Æbum_id
)) {

184 
	`turög_wech©_medü_audio_∂ay
(
__this
->
cur
.
fûeuæ
);

185 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

186 
	`•rötf
(
__this
->
cur
.
Æbum_id
, "%d", 
id
);

187 
	`¥ötf
("\n\n\nplayÇew music\n\n\n");

189 
	`turög_wech©_medü_audio_∑u£
(
NULL
);

191 
	`¥ötf
("\n\n\nplay old music\n\n\n");

197 
	}
}

200 
	$mqâ_mesßge_c⁄åﬁ
(
js⁄_obje˘
 *
mesßge
)

202 
js⁄_obje˘
 *
›î©e
 = 
NULL
;

203 
js⁄_obje˘
 *
¨g
 = 
NULL
;

205 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "›î©e", &
›î©e
)) {

209 
°©e
 = 
	`js⁄_obje˘_gë_öt
(
›î©e
);

211 
°©e
) {

212 
CONCROL_VOL_DOWN
:

213 
CONCROL_VOL_UP
:

214 
	`¥ötf
("CONCROL_SET_VOL\n");

215 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
mesßge
, "¨g", &
¨g
)) {

218 
vﬁ
 = 
	`js⁄_obje˘_gë_öt
(
¨g
);

219 
	`wech©_music_dec_vﬁume
(
vﬁ
);

222 
CONCROL_LED_CLOSE
:

223 
	`¥ötf
("CONCROL_LED_CLOSE\n");

225 
sys_evít
 
evt
;

226 
evt
.
ty≥
 = 
SYS_KEY_EVENT
;

227 
evt
.
u
.
key
.
evít
 = 
KEY_EVENT_CLICK
;

228 
evt
.
u
.
key
.
vÆue
 = 
KEY_MODE
;

229 
	`sys_evít_nŸify
(&
evt
);

232 
CONCROL_LED_OPEN
:

233 
	`¥ötf
("CONCROL_LED_OPEN\n");

235 
sys_evít
 
evt1
;

236 
evt1
.
ty≥
 = 
SYS_KEY_EVENT
;

237 
evt1
.
u
.
key
.
evít
 = 
KEY_EVENT_CLICK
;

238 
evt1
.
u
.
key
.
vÆue
 = 
KEY_MODE
;

239 
	`sys_evít_nŸify
(&
evt1
);

243 
CONCROL_LOW_POWER_CLOSE
:

244 
	`¥ötf
("CONCROL_LOW_POWER_CLOSE\n");

246 
CONCROL_LOW_POWER_OPEN
:

247 
	`¥ötf
("CONCROL_LOW_POWER_OPEN\n");

249 
CONCROL_STROAGE_FORMAT
:

250 
	`¥ötf
("CONCROL_STROAGE_FORMAT\n");

253 
CONCROL_DEFAULT
:

254 
	`¥ötf
("CONCROL_DEFAULT\n");

258 
	`¥ötf
("no support\n");

269 
	}
}

271 
	$mqâ_mesßge_noôfy
(
js⁄_obje˘
 *
mesßge
)

273 
	`¥ötf
("no support\n");

275 
	}
}

277 
	$mqâ_öô_°©e_noôfy
(
js⁄_obje˘
 *
mesßge
)

279 
	#SSS
 "\"vﬁ\": %d,\"b©ãry\": %d,\"s‰ì\": %d,\"°ŸÆ\": %d,\"shake\": %d,\"powî\": %d,\"b \": %d,\"∂ay\": %d,\"ch¨gög\": %d,\"lbi\": %d,\"tˇrd\": %d"

	)

281 
buf
[512];

285 
__this
->
dev_°©e
.
vﬁ
 = 
	`gë_≠p_music_vﬁume
();

287 
u32
 
•a˚
 = 0;

288 
vfs_∑πôi⁄
 *
∑π
 = 
NULL
;

289 i‡(
	`°‹age_devi˚_ªady
() == 0) {

292 
__this
->
dev_°©e
.
tˇrd
 = 0;

293 
__this
->
dev_°©e
.
s‰ì
 = 0;

294 
__this
->
dev_°©e
.
°ŸÆ
 = 0;

296 
∑π
 = 
	`fgë_∑πôi⁄
(
CONFIG_ROOT_PATH
);

297 
	`fgë_‰ì_•a˚
(
CONFIG_ROOT_PATH
, &
•a˚
);

299 
__this
->
dev_°©e
.
tˇrd
 = 1;

300 
__this
->
dev_°©e
.
s‰ì
 = 
•a˚
;

301 
__this
->
dev_°©e
.
°ŸÆ
 = 
∑π
->
tŸÆ_size
;

309 
__this
->
dev_°©e
.
b©ãry
 = 100;

310 
__this
->
dev_°©e
.
shake
 = 1;

312 
__this
->
dev_°©e
.
powî
 = 0;

313 
__this
->
dev_°©e
.
b 
 = 1;

315 
__this
->
dev_°©e
.
∂ay
 = 0;

317 
__this
->
dev_°©e
.
ch¨gög
 = 0;

319 
__this
->
dev_°©e
.
lbi
 = 0;

323 
	`•rötf
(
buf
, 
SSS


324 , 
__this
->
dev_°©e
.
vﬁ


325 , 
__this
->
dev_°©e
.
b©ãry


326 , 
__this
->
dev_°©e
.
s‰ì


327 , 
__this
->
dev_°©e
.
°ŸÆ


328 , 
__this
->
dev_°©e
.
shake


329 , 
__this
->
dev_°©e
.
powî


330 , 
__this
->
dev_°©e
.
b 


331 , 
__this
->
dev_°©e
.
∂ay


332 , 
__this
->
dev_°©e
.
ch¨gög


333 , 
__this
->
dev_°©e
.
lbi


334 , 
__this
->
dev_°©e
.
tˇrd
);

336 
	`turög_wech©_°©e_noôfy
(0, 
buf
);

339 
	}
}

343 
	$Æl_ˇ£
(*
∑rm
)

346 
js⁄_obje˘
 *
√w_obj1
 = 
NULL
;

347 
js⁄_obje˘
 *
ty≥
 = 
NULL
;

348 
js⁄_obje˘
 *
mesßge
 = 
NULL
;

349 
√w_obj1
 = 
	`js⁄_tokíî_∑r£
(
∑rm
);

350 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "ty≥", &
ty≥
)) {

351 
__ªsu…_exô
;

353 
__this
->
cur
.
mesßge_ty≥
 = 
	`js⁄_obje˘_gë_öt
(
ty≥
);

354 i‡(!
	`js⁄_obje˘_obje˘_gë_ex
(
√w_obj1
, "mesßge", &
mesßge
)) {

355 
__ªsu…_exô
;

360 
__this
->
cur
.
mesßge_ty≥
) {

362 
MQTT_MESSAGE_CHAT
:

363 
	`mqâ_mesßge_ch©
(
mesßge
);

365 
MQTT_MESSAGE_AUDIO
:

366 
	`mqâ_mesßge_audio
(
mesßge
);

368 
MQTT_MESSAGE_CONTROL
:

369 
	`mqâ_mesßge_c⁄åﬁ
(
mesßge
);

371 
MQTT_MESSAGE_NOTIFY
:

372 
	`mqâ_mesßge_noôfy
(
mesßge
);

379 
__ªsu…_exô
:

380 
	`js⁄_obje˘_put
(
√w_obj1
);

383 
	}
}

387 
	$dev_mqâ_cb_u£r_msg
(*
cmd
, *
∑rm
)

389 i‡(!
	`°rcmp
(
cmd
, "turing")) {

390 
	`Æl_ˇ£
(
∑rm
);

392 
	`¥ötf
("no support \n");

394 
	}
}

396 
	$wech©_≠i_èsk
(*
¨g
)

398 
msg
[32];

399 
îr
;

401 
îr
 = 
	`os_èskq_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

402 i‡(
îr
 !
OS_TASKQ
 || 
msg
[0] !
Q_USER
) {

406 
msg
[1]) {

407 
WECHAT_NEXT_SONG
:

408 
	`puts
("===========WECHAT_NEXT_END\n");

409 
	`turög_wech©_√xt_s⁄g
(
__this
->
cur
.
fûíame
, __this->cur.
Æbum_id
);

410 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

412 
WECHAT_PRE_SONG
:

413 
	`puts
("===========WECHAT_PRE_END\n");

414 
	`turög_wech©_¥e_s⁄g
(
__this
->
cur
.
fûíame
, __this->cur.
Æbum_id
);

415 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

417 
WECHAT_PAUSE_SONG
:

418 
	`puts
("===========WECHAT_PAUSE\n");

419 i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PAUSE
) {

420 
	`turög_wech©_∑u£_s⁄g
(
__this
->
cur
.
fûíame
, __this->cur.
Æbum_id
, 1);

421 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

422 } i‡(
__this
->
cur
.
°©e
 =
WECHAT_MUSIC_PLAYING
) {

423 
	`turög_wech©_∑u£_s⁄g
(
__this
->
cur
.
fûíame
, __this->cur.
Æbum_id
, 2);

424 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PAUSE
;

428 
WECHAT_VOLUME_CHANGE
:

429 
	`puts
("===========WECHAT_VOLUME_CHANGE\n");

430 
buf
[32];

431 
	`•rötf
(
buf
, "\"vﬁ\":%d", 
	`gë_≠p_music_vﬁume
());

432 
	`turög_wech©_°©e_noôfy
(0, 
buf
);

434 
WECHAT_MEDIA_END
:

435 
	`puts
("===========WECHAT_MEDIA_END\n");

437 
	`turög_wech©_√xt_s⁄g
(
__this
->
cur
.
fûíame
, __this->cur.
Æbum_id
);

438 
__this
->
cur
.
°©e
 = 
WECHAT_MUSIC_PLAYING
;

440 
WECHAT_MEDIA_STOP
:

441 
	`puts
("===========WECHAT_MEDIA_STOP\n");

443 
WECHAT_SEND_INIT_STATE
:

444 
	`puts
("===========WECHAT_SEND_INIT_STATE\n");

445 
	`mqâ_öô_°©e_noôfy
(
NULL
);

448 
WECHAT_KILL_SELF_TASK
:

449 
	`¥ötf
("\nwechatÅask kill\n");

455 
	}
}

	@app/wifi_story_machine/upgrade.c

7 
	~"sy°em/ö˛udes.h
"

8 
	~"≠p_c⁄fig.h
"

9 
	~"°‹age_devi˚.h
"

10 
	~"£rvî/upgøde_£rvî.h
"

25 
	#RECV_BLOCK_SIZE
 (4 * 1024)

	)

29 
	$wifi_fûe_upgøde_demo
()

31 *
sys_ufd
 = 
NULL
;

32 
£rvî
 *
upgøde_£r
;

33 
sys_upgøde_ªq
 
ªq
 = {0};

34 
u8
 *
buf
 = 
NULL
;

35 
îr
 = 0;

36 
block_size
 = 0;

37 
size
 = 0;

38 
off£t
 = 0;

40 
	`£rvî_lﬂd
(
upgøde_£rvî
);

41 
upgøde_£r
 = 
	`£rvî_›í
("upgøde_£rvî", 
NULL
);

42 i‡(!
upgøde_£r
) {

43 
	`log_e
("open upgrade serverÉrror\n");

44  -
EINVAL
;

47 
FILE
 *
fsdc
 = 
	`f›í
(
CONFIG_ROOT_PATH
"ota_ver3.bfu", "r");

48 i‡(!
fsdc
) {

49 
	`log_e
("openÅest ota_ver2.bfuÉrror\n");

50  -
ENOENT
;

53 
buf
 = 
	`mÆloc
(
RECV_BLOCK_SIZE
);

54 i‡(!
buf
) {

55 
	`log_e
("mallocÑecv bufferÉrror\n");

56 
__Ÿa_exô
;

58 
block_size
 = 
RECV_BLOCK_SIZE
;

59 
	`‰ód
(
fsdc
, 
buf
, 
block_size
);

64 
ªq
.
öfo
.
ty≥
 = 
UPGRADE_TYPE_BUF
;

65 
ªq
.
öfo
.
öput
.
d©a
.
buf
 = buf;

66 
ªq
.
öfo
.
öput
.
d©a
.
size
 = 
block_size
;

67 
ªq
.
öfo
.
off£t
 = 0;

68 
îr
 = 
	`£rvî_ªque°
(
upgøde_£r
, 
UPGRADE_REQ_CHECK_FILE
, &
ªq
);

69 i‡(
îr
) {

70 
	`log_e
("upgødêfûêî∏: 0x%x\n", 
îr
);

71  
îr
;

77 
ªq
.
öfo
.
ty≥
 = 
UPGRADE_TYPE_BUF
;

78 
ªq
.
öfo
.
öput
.
d©a
.
buf
 = buf;

79 
ªq
.
öfo
.
öput
.
d©a
.
size
 = 
block_size
;

80 
ªq
.
öfo
.
off£t
 = 0;

81 
îr
 = 
	`£rvî_ªque°
(
upgøde_£r
, 
UPGRADE_REQ_CHECK_SYSTEM
, &
ªq
);

82 i‡(
îr
) {

83 
	`log_e
("sy°emÇŸ m©chÅÿfûê: 0x%x\n", 
îr
);

84  
îr
;

94 
size
 = 
	`Êí
(
fsdc
);

96 
ªq
.
c‹e
.
ty≥
 = 
UPGRADE_TYPE_BUF
;

97 
ªq
.
c‹e
.
öput
.
d©a
.
buf
 = buf;

98 
ªq
.
c‹e
.
öput
.
d©a
.
size
 = 
block_size
;

99 
ªq
.
c‹e
.
off£t
 = offset;

100 
îr
 = 
	`£rvî_ªque°
(
upgøde_£r
, 
UPGRADE_REQ_CORE_START
, &
ªq
);

101 i‡(
îr
) {

102 
	`log_e
("upgødêc‹êru¿î∏: 0x%x\n", 
îr
);

105 
off£t
 +
block_size
;

106 
size
 -
block_size
;

107 
block_size
 = 
size
 > 
RECV_BLOCK_SIZE
 ? RECV_BLOCK_SIZE : size;

108 
	`‰ód
(
fsdc
, 
buf
, 
block_size
);

109 } 
block_size
);

112 
	`£rvî_˛o£
(
upgøde_£r
);

113 
	`˝u_ª£t
();

114 
__Ÿa_exô
:

115 i‡(
fsdc
) {

116 
	`f˛o£
(
fsdc
);

119 i‡(
buf
) {

120 
	`‰ì
(
buf
);

124 
	}
}

	@app/wifi_story_machine/version.c

1 
	~"sy°em/ö˛udes.h
"

2 
	~"gíîic/log.h
"

6 
	$≠p_vîsi⁄_check
()

8 
	`lib_vîsi⁄_check
();

22 #ifde‡
LED_UI_SERVER_VERSION


23 
	`VERSION_CHECK
(
Àd_ui_£rvî
, 
LED_UI_SERVER_VERSION
);

26 #ifde‡
AUDIO_SERVER_VERSION


27 
	`VERSION_CHECK
(
audio_£rvî
, 
AUDIO_SERVER_VERSION
);

42 #ifde‡
CONFIG_WAV_DEC_ENABLE


43 
	`VERSION_CHECK
(
wav_dec
, 
WAV_DEC_VERSION
);

45 #ifde‡
CONFIG_WAV_ENC_ENABLE


46 
	`VERSION_CHECK
(
wav_íc
, 
WAV_ENC_VERSION
);

49 #ifde‡
CONFIG_MP3_DEC_ENABLE


50 
	`VERSION_CHECK
(
mp3_dec
, 
MP3_DEC_VERSION
);

53 #ifde‡
CONFIG_WMA_DEC_ENABLE


54 
	`VERSION_CHECK
(
wma_dec
, 
WMA_DEC_VERSION
);

56 #ifde‡
CONFIG_WMA_ENC_ENABLE


57 
	`VERSION_CHECK
(
wma_íc
, 
WMA_ENC_VERSION
);

60 #ifde‡
CONFIG_M4A_DEC_ENABLE


61 
	`VERSION_CHECK
(
m4a_dec
, 
M4A_DEC_VERSION
);

63 #ifde‡
CONFIG_M4A_ENC_ENABLE


64 
	`VERSION_CHECK
(
m4a_íc
, 
M4A_ENC_VERSION
);

67 #ifde‡
CONFIG_DUER_SDK_ENABLE


68 
	`VERSION_CHECK
(
duî_sdk
, 
DUER_SDK_VERSION
);

71 #ifde‡
CONFIG_SPEEX_ENC_ENABLE


72 
	`VERSION_CHECK
(
•ìx_íc
, 
SPEEX_ENC_VERSION
);

75 #ifde‡
CONFIG_AAC_DEC_ENABLE


76 
	`VERSION_CHECK
(
Øc_dec
, 
AAC_DEC_VERSION
);

79 #ifde‡
CONFIG_AMR_DEC_ENABLE


80 
	`VERSION_CHECK
(
amr_dec
, 
AMR_DEC_VERSION
);

83 #ifde‡
CONFIG_AMR_ENC_ENABLE


84 
	`VERSION_CHECK
(
amr_íc
, 
AMR_ENC_VERSION
);

87 #ifde‡
CONFIG_TURING_SDK_ENABLE


88 
	`VERSION_CHECK
(
turög_wech©_sdk
, 
TURING_WECHAT_SDK_VERSION
);

91 #ifde‡
CONFIG_TURING_SDK_ENABLE


92 
	`VERSION_CHECK
(
turög_wech©_£rvî
, 
TURING_WECHAT_SERVER_VERSION
);

95 #ifde‡
CONFIG_TURING_SDK_ENABLE


96 
	`VERSION_CHECK
(
turög_sdk
, 
TURING_SDK_VERSION
);

100 #ifde‡
CONFIG_WECHAT_SDK_ENABLE


101 
	`VERSION_CHECK
(
wech©_sdk
, 
WECHAT_SDK_VERSION
);

104 #ifde‡
CONFIG_WECHAT_SDK_ENABLE


105 
	`VERSION_CHECK
(
wech©_£rvî
, 
WECHAT_SERVER_VERSION
);

111 
	}
}

112 
óæy_öôˇŒ
(
≠p_vîsi⁄_check
);

	@app/wifi_story_machine/video_music.c

5 
	~"video_music.h
"

7 
	~"sy°em/ö˛udes.h
"

8 
	~"£rvî/ui_£rvî.h
"

9 
	~"£rvî/video_£rvî.h
"

10 
	~"£rvî/video_dec_£rvî.h
"

11 
	~"video_dec.h
"

12 
	~"ö˛ude/míu_∑rm_≠i.h
"

13 
	~"£rvî/audio_£rvî.h
"

15 
	~"a˘i⁄.h
"

16 
	~"°yÀ.h
"

17 
	~"≠p_c⁄fig.h
"

19 
	~"lyrics/lyrics.h
"

21 #ifde‡
CONFIG_MUSIC_MOD


23 
video_music_£t_c⁄fig
(
öã¡
 *
ô
);

25 
£À˘_fûe_™d_∑ly
(
mode
);

27 
music_∂ay_hdl
 
	gmusic_h™dÀr
;

29 
	#__this
 (&
music_h™dÀr
)

	)

30 
	#sizeof_this
 ((
music_∂ay_hdl
))

	)

32 
FILE
 *
	gfûe
;

33 
£rvî
 *
	gmusic_audio
 = 
NULL
;

38 
	$music_ui_po°_msg
(c⁄° *
msg
, ...)

40 #ifde‡
CONFIG_UI_ENABLE


41 
uúeq
 
ªq
;

42 
va_li°
 
¨g±r
;

44 
	`va_°¨t
(
¨g±r
, 
msg
);

46 i‡(
__this
->
ui
) {

47 
ªq
.
msg
.
ª˚ivî
 = 
ID_WINDOW_MUSIC
;

48 
ªq
.
msg
.msg = msg;

49 
ªq
.
msg
.
exd©a
 = 
¨g±r
;

50 
	`£rvî_ªque°
(
__this
->
ui
, 
UI_REQ_MSG
, &
ªq
);

53 
	`va_íd
(
¨g±r
);

56 
	}
}

57 
	$music_ui_po°_msg_async
(c⁄° *
msg
, ...)

59 #ifde‡
CONFIG_UI_ENABLE


60 
uúeq
 
ªq
;

61 
va_li°
 
¨g±r
;

63 
	`va_°¨t
(
¨g±r
, 
msg
);

65 i‡(
__this
->
ui
) {

66 
ªq
.
msg
.
ª˚ivî
 = 
ID_WINDOW_MUSIC
;

67 
ªq
.
msg
.msg = msg;

68 
ªq
.
msg
.
exd©a
 = 
¨g±r
;

69 
	`£rvî_ªque°_async
(
__this
->
ui
, 
UI_REQ_MSG
, &
ªq
);

72 
	`va_íd
(
¨g±r
);

75 
	}
}

77 
	$show_maö_ui
()

79 #ifde‡
CONFIG_UI_ENABLE


80 
uúeq
 
ªq
;

82 i‡(!
__this
->
ui
) {

86 
	`puts
("show_main_ui\n");

87 
ªq
.
show
.
id
 = 
ID_WINDOW_MUSIC
;

88 
	`£rvî_ªque°_async
(
__this
->
ui
, 
UI_REQ_SHOW
, &
ªq
);

90 
	}
}

91 
	$hide_maö_ui
()

93 #ifde‡
CONFIG_UI_ENABLE


94 
uúeq
 
ªq
;

96 i‡(!
__this
->
ui
) {

97 
	`puts
("__this->ui == NULL!!!!\n");

101 
	`puts
("hide_main_ui\n");

103 
ªq
.
hide
.
id
 = 
ID_WINDOW_MUSIC
;

104 
	`£rvî_ªque°
(
__this
->
ui
, 
UI_REQ_HIDE
, &
ªq
);

106 
	}
}

108 
	$audio_£rvî_evít_h™dÀr
(*
¥iv
, 
¨gc
, *
¨gv
)

111 
ªt
;

112 
¨gv
[0]) {

113 
AUDIO_SERVER_EVENT_DEC_END
:

114 
	`puts
("music: AUDIO_SERVER_EVENT_DEC_END.\n");

119 
	`music_ui_po°_msg_async
("end");

121 
AUDIO_SERVER_EVENT_PLAY_TIME
:

122 
	`music_ui_po°_msg_async
("±ime:t=%4", 
¨gv
[1]);

125 
	}
}

130 
	$∂ay_music
(c⁄° *
«me
)

132 
audio_ªq
 
r
;

133 
u8
 
‚ame
[
MAX_FILE_NAME_LEN
];

134 
Àn
, 
îr
;

136 i‡(
«me
 && !
fûe
) {

137 
	`¥ötf
("∂ay_music: %s\n", 
«me
);

138 
fûe
 = 
	`f›í
(
«me
, "r");

139 i‡(!
fûe
) {

140 
	`puts
("play_music open file fail!\n");

141  -
ENOENT
;

143 } i‡(!
«me
 && !
fûe
) {

144 
	`puts
("play_music openÉrr!\n");

145 
	`ASSERT
(0);

146  -
EPERM
;

149 i‡(!
music_audio
) {

150 
music_audio
 = 
	`£rvî_›í
("audio_server", "dec");

151 i‡(!
music_audio
) {

152 
	`f˛o£
(
fûe
);

153 
	`puts
("play_music openáudio_server fail!\n");

154  -
EPERM
;

156 
	`£rvî_ªgi°î_evít_h™dÀr
(
music_audio
, 
NULL
, 
audio_£rvî_evít_h™dÀr
);

159 
r
.
dec
.
cmd
 = 
AUDIO_DEC_OPEN
;

160 
r
.
dec
.
vﬁume
 = -1;

161 
r
.
dec
.
ouçut_buf
 = 
NULL
;

162 
r
.
dec
.
ouçut_buf_Àn
 = 4096;

163 
r
.
dec
.
fûe
 = file;

164 
r
.
dec
.
ch™√l
 = 0;

165 
r
.
dec
.
ßm∂e_øã
 = 0;

166 
r
.
dec
.
¥i‹ôy
 = 1;

167 
îr
 = 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

168 i‡(
îr
) {

169 
__îr_p
;

172 
r
.
dec
.
cmd
 = 
AUDIO_DEC_START
;

173 
îr
 = 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

175 i‡(
îr
) {

176 
__îr_p
;

193 
	`puts
("play_music start ok.\n");

195 
__îr_p
:

196 i‡(
music_audio
) {

197 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

198 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

199 
	`£rvî_˛o£
(
music_audio
);

200 
music_audio
 = 
NULL
;

202 
	`f˛o£
(
fûe
);

203 
fûe
 = 
NULL
;

205  -
EFAULT
;

206 
	}
}

212 
	$∑u£_music
()

214 
audio_ªq
 
r
;

215 
r
.
dec
.
cmd
 = 
AUDIO_DEC_PAUSE
;

216 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

217 
	`puts
("pause_music.\n");

219 
	}
}

224 
	$c⁄töue_music
()

226 
audio_ªq
 
r
;

227 
r
.
dec
.
cmd
 = 
AUDIO_DEC_START
;

228 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

229 
	`puts
("continue_music.\n");

231 
	}
}

236 
	$°›_music
()

238 
audio_ªq
 
r
;

240 i‡(
music_audio
) {

241 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

242 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

243 
	`£rvî_˛o£
(
music_audio
);

244 
music_audio
 = 
NULL
;

246 i‡(
fûe
) {

247 
	`f˛o£
(
fûe
);

248 
fûe
 = 
NULL
;

250 i‡(
__this
->
fs
) {

251 
	`fsˇn_ªÀa£
(
__this
->
fs
);

252 
__this
->
fs
 = 
NULL
;

254 
	`puts
("stop_music.\n");

256 
	}
}

261 
	$£À˘_fûe_™d_∑ly
(
mode
)

263 
audio_ªq
 
r
;

264 
u8
 
‚ame
[
MAX_FILE_NAME_LEN
];

265 
Àn
, 
îr
;

270 i‡(!
__this
->
fs
) {

271 
__this
->
fs
 = 
	`fsˇn
(
CONFIG_MUSIC_PATH
, "-tMP3WMA -sn");

272 i‡(!
__this
->
fs
) {

273 
	`puts
("no music file1!\n");

274  -
ENOENT
;

281 i‡(
fûe
) {

282 i‡(
music_audio
) {

283 
r
.
dec
.
cmd
 = 
AUDIO_DEC_STOP
;

284 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, &
r
);

285 
	`£rvî_˛o£
(
music_audio
);

286 
music_audio
 = 
NULL
;

288 
	`f˛o£
(
fûe
);

289 
fûe
 = 
NULL
;

295 
fûe
 = 
	`f£À˘
(
__this
->
fs
, 
mode
, 0);

296 i‡(!
fûe
) {

297 i‡(
mode
 =
FSEL_NEXT_FILE
) {

298 
	`puts
("Next fileÉnd.goto first file.\n");

299 
fûe
 = 
	`f£À˘
(
__this
->
fs
, 
FSEL_FIRST_FILE
, 0);

300 } i‡(
mode
 =
FSEL_PREV_FILE
) {

301 
	`puts
("Prev file head.gotoÜast file.\n");

302 
fûe
 = 
	`f£À˘
(
__this
->
fs
, 
FSEL_LAST_FILE
, 0);

304 i‡(!
fûe
) {

305 
	`puts
("no music file2!\n");

306 i‡(
__this
->
fs
) {

307 
	`fsˇn_ªÀa£
(
__this
->
fs
);

308 
__this
->
fs
 = 
NULL
;

310  -
ENOENT
;

321 
îr
 = 
	`∂ay_music
(
NULL
);

329  
îr
;

330 
	}
}

332 
	$°©e_machöe
(
≠∂iˇti⁄
 *
≠p
, 
≠p_°©e
 
°©e
, 
öã¡
 *
ô
)

334 
Àn
;

335 
ªt
;

336 
u8
 
‚ame
[
MAX_FILE_NAME_LEN
];

338 
°©e
) {

339 
APP_STA_CREATE
:

340 
	`puts
("Enter musicÖlay mode.\n");

341 
	`mem£t
(
__this
, 0, 
sizeof_this
);

342 #ifde‡
CONFIG_UI_ENABLE


343 
__this
->
ui
 = 
	`£rvî_›í
("ui_£rvî", 
NULL
);

344 i‡(!
__this
->
ui
) {

345  -
EINVAL
;

348 
	`show_maö_ui
();

350 
APP_STA_START
:

351 i‡(!
ô
) {

354 
ô
->
a˘i⁄
) {

355 
ACTION_MUSIC_PLAY_MAIN
:

356 
	`puts
("ACTION_MUSIC_PLAY_MAIN.\n");

357 i‡(!
	`°rcmp
(
ô
->
d©a
, "play")) {

358 i‡(
ô
->
exd©a
) {

359 
	`°›_music
();

360 
fûe
 = (
FILE
 *)
ô
->
exd©a
;

361 
ªt
 = 
	`∂ay_music
(
NULL
);

363 i‡(
ªt
 == 0) {

364 
__this
->
°©us
 = 
MUSIC_STA_PLAY
;

366 
__this
->
°©us
 = 
MUSIC_STA_IDLE
;

368 } i‡(!
	`°rcmp
(
ô
->
d©a
, "getInfo")) {

369 i‡(
ô
->
exd©a
) {

370 
audio_ªq
 *
r
;

371 
r
 = (
audio_ªq
 *)
ô
->
exd©a
;

372 
r
->
dec
.
cmd
 = 
AUDIO_DEC_GET_INFO
;

373 
	`£rvî_ªque°
(
music_audio
, 
AUDIO_REQ_DEC
, 
r
);

377 
	`mem£t
(
‚ame
, 0, 
MAX_FILE_NAME_LEN
);

378 
Àn
 = 
	`fgë_«me
(
fûe
, 
‚ame
, 
MAX_FILE_NAME_LEN
);

379 
	`¥ötf
("Àn: %d, sñe˘ music: %s\n", 
Àn
, 
‚ame
);

380 
	`put_buf
(
‚ame
, 
Àn
);

381 
r
->
dec
.
öfo_ªt
.
‚ame
 = fname;

382 
r
->
dec
.
öfo_ªt
.
«me_code
 = 0;

386 i‡(
Àn
 >= 12) {

387 
r
->
dec
.
öfo_ªt
.
«me_code
 = 1;

392 
ACTION_MUSIC_PLAY_SET_CONFIG
:

393 
	`puts
("ACTION_MUSIC_PLAY_SET_CONFIG.\n");

398 
APP_STA_PAUSE
:

399 
	`puts
("music:APP_STA_PAUSE.\n");

401 
APP_STA_RESUME
:

402 
	`puts
("music:APP_STA_RESUME.\n");

404 
APP_STA_STOP
:

405 
	`puts
("music:APP_STA_STOP.\n");

406 i‡(
__this
->
°©us
 =
MUSIC_STA_PLAY


407 || 
__this
->
°©us
 =
MUSIC_STA_PAUSE
) {

408 
	`°›_music
();

410 
__this
->
°©us
 = 
MUSIC_STA_STOP
;

412 
APP_STA_DESTROY
:

413 
	`puts
("music:APP_STA_DESTROY.\n");

414 
	`hide_maö_ui
();

415 #ifde‡
CONFIG_UI_ENABLE


416 
	`puts
("--------music close ui\n");

417 i‡(
__this
->
ui
) {

418 
	`£rvî_˛o£
(
__this
->
ui
);

419 
__this
->
ui
 = 
NULL
;

426 
	}
}

432 
	$video_music_key_evít_h™dÀr
(
key_evít
 *
key
)

434 
ªt
;

435 
audio_ªq
 
r
;

438 
key
->
evít
) {

439 
KEY_EVENT_CLICK
:

440 
key
->
vÆue
) {

441 
KEY_OK
:

442 
	`puts
("music key ok\n");

443 i‡(
__this
->
°©us
 =
MUSIC_STA_PLAY
) {

444 
	`∑u£_music
();

445 
__this
->
°©us
 = 
MUSIC_STA_PAUSE
;

446 
	`music_ui_po°_msg_async
("pp:s=%1", 0);

447 } i‡(
__this
->
°©us
 =
MUSIC_STA_PAUSE
) {

448 
	`c⁄töue_music
();

449 
__this
->
°©us
 = 
MUSIC_STA_PLAY
;

450 
	`music_ui_po°_msg_async
("pp:s=%1", 1);

453 
KEY_MENU
:

454 
	`puts
("music key menu\n");

455  
åue
;

457 
KEY_MODE
:

458 
	`puts
("music key mode\n");

460 
KEY_UP
:

461 
	`puts
("music key up\n");

463 
KEY_DOWN
:

464 
	`puts
("music key down\n");

470 
KEY_EVENT_HOLD
:

499  
Ál£
;

500 
	}
}

505 
	$video_music_devi˚_evít_h™dÀr
(
sys_evít
 *
evít
)

507 
îr
;

508 
ªt
;

509 
öã¡
 
ô
;

511 i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "sd*", 4)) {

512 
evít
->
u
.
dev
.event) {

513 
DEVICE_EVENT_IN
:

514 
	`puts
("\ncard in\n");

516 
DEVICE_EVENT_OUT
:

517 
	`puts
("\ncard out\n");

518 i‡(
__this
->
°©us
 =
MUSIC_STA_PLAY


519 || 
__this
->
°©us
 =
MUSIC_STA_PAUSE
) {

520 
	`°›_music
();

522 
__this
->
°©us
 = 
MUSIC_STA_STOP
;

525 } i‡(!
	`ASCII_SåCmp
(
evít
->
¨g
, "sys_power", 7)) {

526 
evít
->
u
.
dev
.event) {

527 
DEVICE_EVENT_POWER_CHARGER_IN
:

528 
	`puts
("\ncharger in\n");

530 
DEVICE_EVENT_POWER_CHARGER_OUT
:

531 
	`puts
("\ncharger out\n");

536  
Ál£
;

537 
	}
}

538 
	$evít_h™dÀr
(
≠∂iˇti⁄
 *
≠p
, 
sys_evít
 *
evít
)

540 
evít
->
ty≥
) {

541 
SYS_KEY_EVENT
:

542  
	`video_music_key_evít_h™dÀr
(&
evít
->
u
.
key
);

543 
SYS_DEVICE_EVENT
:

544  
	`video_music_devi˚_evít_h™dÀr
(
evít
);

547  
Ál£
;

549 
	}
}

553 c⁄° 
≠∂iˇti⁄_›î©i⁄
 
	gvideo_music_›s
 = {

554 .
°©e_machöe
 = state_machine,

555 .
	gevít_h™dÀr
 = 
evít_h™dÀr
,

558 
REGISTER_APPLICATION
(
≠p_video_music
) = {

559 .
«me
 = "video_music",

560 .
	ga˘i⁄
 = 
ACTION_MUSIC_PLAY_MAIN
,

561 .
	g›s
 = &
video_music_›s
,

562 .
	g°©e
 = 
APP_STA_DESTROY
,

	@app/wifi_story_machine/wifi_app_task.c

2 
	~"£rvî/wifi_c⁄√˘.h
"

3 
	~"lwù/sockës.h
"

4 
	~"lwù/√tdb.h
"

5 
	~"os/os_com∑t.h
"

6 
	~"wifi_ext.h
"

7 
	~"sy°em/öô.h
"

8 
	~"lwù.h
"

9 
	~"£rvî/√t_£rvî.h
"

10 
	~"devi˚/devi˚.h
"

11 
	~"sy°em/≠p_c‹e.h
"

12 
	~"£rvî/£rvî_c‹e.h
"

13 
	~"a˘i⁄.h
"

14 
	~"sy°em/timî.h
"

15 
	~"hâp/hâp_£rvî.h
"

16 
	~"asm/debug.h
"

17 
	~"√t_c⁄fig.h
"

18 
	~"≠p_c⁄fig.h
"

19 
	~"devi˚/wifi_dev.h
"

20 
	~"£rvî/√tw‹k_mssdp.h
"

21 
	~"hâp/hâp_˛i.h
"

22 
	~"sy°em/timî.h
"

23 
	~"d©aba£.h
"

24 
	~"wech©/wech©_c‹e.h
"

25 
	~"wech©/Ÿa_upd©e.h
"

26 
	~"√t/wifi-toﬁs/voi˚¥öt_cfg.h
"

28 
	#WIFI_APP_TASK_NAME
 "wifi_≠p_èsk"

	)

30 
	eWIFI_APP_MSG_CODE
 {

31 
	mWIFI_MSG_TICK_1_SEC
,

32 
	mWIFI_MSG_SMP_CFG_START
,

33 
	mWIFI_MSG_SMP_CFG_STOP
,

34 
	mWIFI_MSG_SMP_CFG_COMPLETED
,

35 
	mWIFI_MSG_SMP_CFG_TIMEOUT
,

36 
	mWIFI_MSG_STA_SCAN_COMPLETED
,

37 
	mWIFI_MSG_STA_NETWORK_STACK_DHCP_SUCC
,

38 
	mWIFI_MSG_STA_DISCONNECTED
,

41 
u8
 
	gmac_addr
[6];

42 
	gg_ssid
[32];

43 
	gg_pwd
[64];

44 *
	gwifi_dev
;

45 
u8
 
	g_√t_dh˝_ªady
 = 0;

46 
	saúkiss_ªsu…
 {

47 
smp_cfg_ªsu…
 
	mªsu…
;

48 
	msˇn_ssid_found
;

49 } 
	gaúkiss_ªsu…
;

51 
	svoi˚¥öt_ªsu…
 {

52 
	mønd_°r
[8];

53 } 
	gvoi˚¥öt_ªsu…
;

55 
	$√t_dh˝_ªady
()

57  (
_√t_dh˝_ªady
);

58 
	}
}

60 
	$wifi_≠p_timî_func
(*
p
)

62 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_TICK_1_SEC
);

63 
	}
}

65 
	$wifi_smp_c⁄√˘
(*
ssid
, *
pwd
, *
ønd_°r
)

67 
cfg_öfo
 
öfo
 = {0};

68 i‡(
ssid
) {

69 
	`°r˝y
(
voi˚¥öt_ªsu…
.
ønd_°r
,Ñand_str);

70 
öfo
.
mode
 = 
STA_MODE
;

71 
öfo
.
ssid
 = ssid;

72 
öfo
.
pwd
 =Öwd;

73 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

74 
	`dev_io˘l
(
wifi_dev
, 
DEV_CHANGE_SAVING_MODE
, (
u32
)&
öfo
);

77 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_WIFI_SMP_RESULT
, (
u32
)&
öfo
);

79 i‡(
öfo
.
smp_cfg
.
ty≥
 =
AIRKISS_SMP_CFG
) {

80 
	`¥ötf
("\r\¿AIRKISS INFO, SSID = %s, PWD = %s, ssid_¸¯0x%x,Ñ™_vÆ = 0x%x \r\n", 
öfo
.
smp_cfg
.
ssid
, info.smp_cfg.
∑s•hø£
, info.smp_cfg.
ssid_¸c
, info.smp_cfg.
øndom_vÆ
);

81 
aúkiss_ªsu…
.
ªsu…
.
ty≥
 = 
AIRKISS_SMP_CFG
 ;

82 
aúkiss_ªsu…
.
ªsu…
.
ssid_¸c
 = 
öfo
.
smp_cfg
.ssid_crc;

83 
aúkiss_ªsu…
.
ªsu…
.
øndom_vÆ
 = 
öfo
.
smp_cfg
.random_val;

84 
	`°r˝y
(
aúkiss_ªsu…
.
ªsu…
.
ssid
, 
öfo
.
smp_cfg
.ssid);

85 
	`°r˝y
(
aúkiss_ªsu…
.
ªsu…
.
∑s•hø£
, 
öfo
.
smp_cfg
.passphrase);

86 
	`dev_io˘l
(
wifi_dev
, 
DEV_NET_SCANF
, 0);

88 
öfo
.
mode
 = 
STA_MODE
;

89 
öfo
.
ssid
 = info.
smp_cfg
.ssid;

90 
öfo
.
pwd
 = info.
smp_cfg
.
∑s•hø£
;

91 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

92 
	`dev_io˘l
(
wifi_dev
, 
DEV_CHANGE_SAVING_MODE
, (
u32
)&
öfo
);

95 
	}
}

97 
	$aúkiss_ssid_check
()

99 
u32
 
i
;

100 
cfg_öfo
 
öfo
 = {0};

101 i‡(
aúkiss_ªsu…
.
ªsu…
.
ty≥
 !
AIRKISS_SMP_CFG
 ||áúkiss_ªsu….
sˇn_ssid_found
) {

105 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_STA_SSID_INFO
, (
u32
)&
öfo
);

107 
i
 = 0; i < 
öfo
.
°a_ssid_num
; i++) {

108 i‡(!
	`°∫cmp
(
aúkiss_ªsu…
.
ªsu…
.
ssid
, 
öfo
.
°a_ssid_öfo
[
i
].ssid, 
	`°æí
(airkiss_result.result.ssid))) {

109 
CHECK_AIRKISS_SSID_CRC
:

111 
u8
 
	`aúkiss_ˇl¸c_byãs
(u8 * 
p
, 
num_of_byãs
);

112 i‡(
aúkiss_ªsu…
.
ªsu…
.
ssid_¸c
 =
	`aúkiss_ˇl¸c_byãs
((
u8
 *)
öfo
.
°a_ssid_öfo
[
i
].
ssid
, 
	`°æí
(info.sta_ssid_info[i].ssid))) {

113 
	`¥ötf
("födáúkis†ssid = [%s]\r\n", 
öfo
.
°a_ssid_öfo
[
i
].
ssid
);

114 
	`°r˝y
(
aúkiss_ªsu…
.
ªsu…
.
ssid
, 
öfo
.
°a_ssid_öfo
[
i
].ssid);

115 
aúkiss_ªsu…
.
sˇn_ssid_found
 = 1;

117 
öfo
.
mode
 = 
STA_MODE
;

118 
öfo
.
ssid
 = 
aúkiss_ªsu…
.
ªsu…
.ssid;

119 
öfo
.
pwd
 = 
aúkiss_ªsu…
.
ªsu…
.
∑s•hø£
;

120 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

122 
	`dev_io˘l
(
wifi_dev
, 
DEV_CHANGE_SAVING_MODE
, (
u32
)&
öfo
);

130 
	`¥ötf
("ˇ¬Ÿ foundáúkis†ssid[%s] !!! \n\n", 
aúkiss_ªsu…
.
ªsu…
.
ssid
);

132 
	}
}

135 
	$voi˚¥öt_brﬂdˇ°
()

137 i‡(
voi˚¥öt_ªsu…
.
ønd_°r
[0]) {

139 
	#SEND_VOICE_PRINT_MSG
 "hâps://robŸ.jõlüµ.com/wx/wech©/√tw‹k/c⁄fig/voi˚/suc˚ss?wifú™d=%s"

	)

141 
ªt
 = 0;

142 
uæ
[1024];

144 
hâp_body_obj
 
hâp_body_buf
;

145 
hâp˛i_˘x
 
˘x
;

147 
	`•rötf
(
uæ
, 
SEND_VOICE_PRINT_MSG
, 
voi˚¥öt_ªsu…
.
ønd_°r
);

149 
	`mem£t
(&
hâp_body_buf
, 0x0, (
hâp_body_obj
));

150 
	`mem£t
(&
˘x
, 0x0, (ctx));

151 
hâp_body_buf
.
ªcv_Àn
 = 0;

152 
hâp_body_buf
.
buf_Àn
 = 5 * 1024;

153 
hâp_body_buf
.
buf_cou¡
 = 1;

154 
hâp_body_buf
.
p
 = (*Ë
	`mÆloc
(hâp_body_buf.
buf_Àn
 * ());

155 
˘x
.
uæ
 = url;

156 
˘x
.
¥iv
 = &
hâp_body_buf
;

157 
˘x
.
c⁄√˘i⁄
 = "close";

158 
ªt
 = 
	`hâps˛i_gë
(&
˘x
);

159 i‡(
ªt
 =
HERROR_OK
) {

160 
ªt
 = 0;

162 
	`puts
("voiceprint_broadcast fail!\n");

163 
ªt
 = -1;

166 i‡(
hâp_body_buf
.
p
) {

167 
	`‰ì
(
hâp_body_buf
.
p
);

170 
voi˚¥öt_ªsu…
.
ønd_°r
[0] = 0;

172 
	}
}

174 
	$aúkiss_brﬂdˇ°
()

176 
i
, 
ªt
;

177 
⁄Off
 = 1;

178 
sock
;

179 
sockaddr_ö
 
de°_addr
;

181 i‡(
aúkiss_ªsu…
.
ªsu…
.
ty≥
 !
AIRKISS_SMP_CFG
) {

186 
	`puts
("airkiss_broadcastÑandom_val \n");

188 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

189 i‡(
sock
 == -1) {

190 
	`¥ötf
("%†%d->Eº‹ i¿sockë()\n", 
__FUNCTION__
, 
__LINE__
);

191 
EXIT
;

194 
de°_addr
.
sö_Ámûy
 = 
AF_INET
;

195 
de°_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

196 
de°_addr
.
sö_p‹t
 = 0;

197 
ªt
 = 
	`böd
(
sock
, (
sockaddr
 *)&
de°_addr
, (dest_addr));

198 i‡(
ªt
 == -1) {

199 
	`¥ötf
("%†%d->Eº‹ i¿böd()\n", 
__FUNCTION__
, 
__LINE__
);

200 
EXIT
;

203 
ªt
 = 
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
,

204 (*)&
⁄Off
, (onOff));

205 i‡(
ªt
 == -1) {

206 
	`¥ötf
("%†%d->Eº‹ i¿£tsock›t(ËSO_BROADCAST\n", 
__FUNCTION__
, 
__LINE__
);

207 
EXIT
;

209 
	`öë_±⁄
(
AF_INET
, "255.255.255.255", &
de°_addr
.
sö_addr
.
s_addr
);

210 
de°_addr
.
sö_p‹t
 = 
	`ht⁄s
(10000);

212 
i
 = 0; i < 8; i++) {

213 
ªt
 = 
	`£ndto
(
sock
, (*)&
aúkiss_ªsu…
.
ªsu…
.
øndom_vÆ
, 1, 0, (
sockaddr
 *)&
de°_addr
, (sockaddr));

214 i‡(
ªt
 == -1) {

215 
	`¥ötf
("%†%d->Eº‹ i¿£ndto\n", 
__FUNCTION__
, 
__LINE__
);

217 
	`m¶ìp
(20);

220 
	`mem£t
(&
aúkiss_ªsu…
, 0, (airkiss_result));

222 
EXIT
:

223 i‡(
sock
 != -1) {

224 
	`˛o£sockë
(
sock
);

227 
	}
}

229 
	$√tw‹k_u£r_ˇŒback
(*
√tw‹k_˘x
, 
NETWORK_EVENT
 
°©e
, *
¥iv
)

231 
cfg_öfo
 
öfo
;

233 
°©e
) {

235 
WIFI_EVENT_MODULE_INIT
:

238 
	`gpio_£t_hd
(
IO_PORTG_00
, 0);

239 
	`gpio_£t_hd
(
IO_PORTG_01
, 0);

240 
	`gpio_£t_hd
(
IO_PORTG_02
, 0);

241 
	`gpio_£t_hd
(
IO_PORTG_03
, 0);

242 
	`gpio_£t_hd
(
IO_PORTG_04
, 0);

243 
	`gpio_£t_hd
(
IO_PORTG_05
, 0);

249 
öfo
.
p‹t_°©us
 = 0;

250 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

251 
	`m¶ìp
(10);

252 
öfo
.
p‹t_°©us
 = 1;

253 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

255 
öfo
.
p‹t_°©us
 = 1;

256 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_CS
, (
u32
)&
öfo
);

258 
öfo
.
p‹t_°©us
 = 1;

259 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_WKUP
, (
u32
)&
öfo
);

261 
	`m¶ìp
(100);

263 
öfo
.
mode
 = 
AP_MODE
;

264 
öfo
.
f‹˚_deÁu…_mode
 = 0;

265 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_DEFAULT_MODE
, (
u32
)&
öfo
);

268 
WIFI_EVENT_MODULE_START
:

269 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_START\n");

272 
öfo
.
ssid
 = "WM31_TEST";

273 
öfo
.
pwd
 = "12345678";

275 
öfo
.
mode
 = 
SMP_CFG_MODE
;

276 
öfo
.
f‹˚_deÁu…_mode
 = 0;

277 
	`dev_io˘l
(
wifi_dev
, 
DEV_SAVE_DEFAULT_MODE
, (
u32
)&
öfo
);

281 
WIFI_EVENT_MODULE_STOP
:

282 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_STOP\n");

285 
WIFI_EVENT_AP_START
:

286 
	`puts
("|network_user_callback->WIFI_EVENT_AP_START\n");

289 
WIFI_EVENT_AP_STOP
:

290 
	`puts
("|network_user_callback->WIFI_EVENT_AP_STOP\n");

293 
öfo
.
p‹t_°©us
 = 0;

294 
	`¥ötf
("---------DEV_SET_WIFI_POWER-OFF-----------\r\n");

295 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

296 
	`m¶ìp
(10);

297 
öfo
.
p‹t_°©us
 = 1;

298 
	`¥ötf
("---------DEV_SET_WIFI_POWER-ON-----------\r\n");

299 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

303 
WIFI_EVENT_STA_START
:

304 
	`puts
("|network_user_callback->WIFI_EVENT_STA_START\n");

306 
WIFI_EVENT_MODULE_START_ERR
:

307 
	`puts
("|network_user_callback->WIFI_EVENT_MODULE_START_ERR\n");

310 
WIFI_EVENT_STA_STOP
:

311 
	`puts
("|network_user_callback->WIFI_EVENT_STA_STOP\n");

313 
öfo
.
p‹t_°©us
 = 0;

314 
	`¥ötf
("---------DEV_SET_WIFI_POWER-OFF-----------\r\n");

315 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

316 
	`m¶ìp
(10);

317 
öfo
.
p‹t_°©us
 = 1;

318 
	`¥ötf
("---------DEV_SET_WIFI_POWER-ON-----------\r\n");

319 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER
, (
u32
)&
öfo
);

323 
WIFI_EVENT_STA_DISCONNECT
:

324 
	`puts
("|network_user_callback->WIFI_STA_DISCONNECT\n");

325 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_STA_DISCONNECTED
);

329 
WIFI_EVENT_STA_SCAN_COMPLETED
:

333 
	`puts
("|network_user_callback->WIFI_STA_SCAN_COMPLETED\n");

334 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_STA_SCAN_COMPLETED
);

338 
WIFI_EVENT_STA_CONNECT_SUCC
:

339 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_WIFI_CHANNEL
, (
u32
)&
öfo
);

340 
	`¥ötf
("|√tw‹k_u£r_ˇŒback->WIFI_STA_CONNECT_SUCC,CH=%d\r\n", 
öfo
.
°a_ch™√l
);

343 
WIFI_EVENT_MP_TEST_START
:

344 
	`puts
("|network_user_callback->WIFI_EVENT_MP_TEST_START\n");

346 
WIFI_EVENT_MP_TEST_STOP
:

347 
	`puts
("|network_user_callback->WIFI_EVENT_MP_TEST_STOP\n");

350 
WIFI_EVENT_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID
:

351 
	`puts
("|network_user_callback->WIFI_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID\n");

353 
WIFI_EVENT_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL
:

354 
	`puts
("|network_user_callback->WIFI_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL\n");

356 
WIFI_EVENT_STA_NETWORK_STACK_DHCP_SUCC
:

357 
	`puts
("|network_user_callback->WIFI_EVENT_STA_NETWPRK_STACK_DHCP_SUCC\n");

358 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_STA_NETWORK_STACK_DHCP_SUCC
);

360 
WIFI_EVENT_STA_NETWORK_STACK_DHCP_TIMEOUT
:

361 
	`puts
("|network_user_callback->WIFI_EVENT_STA_NETWPRK_STACK_DHCP_TIMEOUT\n");

364 
WIFI_EVENT_P2P_START
:

365 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_START\n");

367 
WIFI_EVENT_P2P_STOP
:

368 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_STOP\n");

370 
WIFI_EVENT_P2P_GC_DISCONNECTED
:

371 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_DISCONNECTED\n");

373 
WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_SUCC
:

374 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_SUCC\n");

376 
WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_TIMEOUT
:

377 
	`puts
("|network_user_callback->WIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_TIMEOUT\n");

380 
WIFI_EVENT_SMP_CFG_START
:

381 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_START\n");

382 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_SMP_CFG_START
);

385 
WIFI_EVENT_SMP_CFG_STOP
:

386 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_STOP\n");

387 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_SMP_CFG_STOP
);

390 
WIFI_EVENT_SMP_CFG_TIMEOUT
:

391 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_TIMEOUT\n");

392 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_SMP_CFG_TIMEOUT
);

394 
WIFI_EVENT_SMP_CFG_COMPLETED
:

395 
	`puts
("|network_user_callback->WIFI_EVENT_SMP_CFG_COMPLETED\n");

396 
	`os_èskq_po°
(
WIFI_APP_TASK_NAME
, 1, 
WIFI_MSG_SMP_CFG_COMPLETED
);

399 
WIFI_EVENT_PM_SUSPEND
:

400 
	`puts
("|network_user_callback->WIFI_EVENT_PM_SUSPEND\n");

402 
WIFI_EVENT_PM_RESUME
:

403 
	`puts
("|network_user_callback->WIFI_EVENT_PM_RESUME\n");

405 
WIFI_EVENT_AP_ON_ASSOC
:

407 
ëh_addr
 *
hwaddr
 = (ëh_add∏*)
√tw‹k_˘x
;

408 
	`¥ötf
("WIFI_EVENT_AP_ON_ASSOC hwaddr = %02x:%02x:%02x:%02x:%02x:%02x \r\n\r\n",

409 
hwaddr
->
addr
[0], hwaddr->addr[1], hwaddr->addr[2], hwaddr->addr[3], hwaddr->addr[4], hwaddr->addr[5]);

412 
WIFI_EVENT_AP_ON_DISCONNECTED
:

413 
hwaddr
 = (
ëh_addr
 *)
√tw‹k_˘x
;

414 
	`¥ötf
("WIFI_EVENT_AP_ON_DISCONNECTED hwaddr = %02x:%02x:%02x:%02x:%02x:%02x \r\n\r\n",

415 
hwaddr
->
addr
[0], hwaddr->addr[1], hwaddr->addr[2], hwaddr->addr[3], hwaddr->addr[4], hwaddr->addr[5]);

423 
	}
}

426 
	$wifi_£t_œn_£âög_öfo
()

428 
œn_£âög
 
œn_£âög_öfo
 = {

430 .
WIRELESS_IP_ADDR0
 = 192,

431 .
WIRELESS_IP_ADDR1
 = 168,

432 .
WIRELESS_IP_ADDR2
 = 1,

433 .
WIRELESS_IP_ADDR3
 = 1,

435 .
WIRELESS_NETMASK0
 = 255,

436 .
WIRELESS_NETMASK1
 = 255,

437 .
WIRELESS_NETMASK2
 = 255,

438 .
WIRELESS_NETMASK3
 = 0,

440 .
WIRELESS_GATEWAY0
 = 192,

441 .
WIRELESS_GATEWAY1
 = 168,

442 .
WIRELESS_GATEWAY2
 = 1,

443 .
WIRELESS_GATEWAY3
 = 1,

445 .
SERVER_IPADDR1
 = 192,

446 .
SERVER_IPADDR2
 = 168,

447 .
SERVER_IPADDR3
 = 1,

448 .
SERVER_IPADDR4
 = 1,

450 .
CLIENT_IPADDR1
 = 192,

451 .
CLIENT_IPADDR2
 = 168,

452 .
CLIENT_IPADDR3
 = 1,

453 .
CLIENT_IPADDR4
 = 2,

455 .
SUB_NET_MASK1
 = 255,

456 .
SUB_NET_MASK2
 = 255,

457 .
SUB_NET_MASK3
 = 255,

458 .
SUB_NET_MASK4
 = 0,

461 
cfg_öfo
 
öfo
;

462 
öfo
.
__œn_£âög_öfo
 = &
œn_£âög_öfo
;

463 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_LAN_SETTING
, (
u32
)&
öfo
);

464 
	}
}

467 
	$√t_≠p_öô
()

471 
	`ùîf_ã°
();

472 
	`ùîf_ã°
();

473 
	}
}

476 
	$√t_≠p_unöô
()

478 
	}
}

480 
	$wifi_⁄
()

482 
	`dev_io˘l
(
wifi_dev
, 
DEV_NETWORK_START
, 0);

483 
	`√t_≠p_öô
();

484 
	}
}

487 
	$wifi_off
()

489 
	`√t_≠p_unöô
();

490 
	`dev_io˘l
(
wifi_dev
, 
DEV_NETWORK_STOP
, 0);

491 
	}
}

493 
	$wifi_íãr_smp_cfg_mode
()

495 
cfg_öfo
 
öfo
 = {0};

496 
öfo
.
timeout
 = 100;

497 #ifde‡
CONFIG_DUER_WECHAT_ENABLE


498 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_SMP_AIRKISS_AES_ON_OFF
, 1);

500 
	`dev_io˘l
(
wifi_dev
, 
DEV_SMP_MODE
, 0);

501 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_SMP_CONFIG_TIMEOUT_SEC
, (
u32
)&
öfo
);

502 
	}
}

504 
	$gë_wifi_is_smp_mode
()

506 
cfg_öfo
 
öfo
 = {0};

507 
öfo
.
mode
 = 
NONE_MODE
;

508 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
öfo
);

509  
öfo
.
mode
 =
SMP_CFG_MODE
;

510 
	}
}

512 
	$wifi_ªtu∫_°a_mode
()

514 
cfg_öfo
 
öfo
 = {0};

515 
öfo
.
mode
 = 
STA_MODE
;

516 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
öfo
);

517 
	`dev_io˘l
(
wifi_dev
, 
DEV_STA_MODE
, (
u32
)&
öfo
);

518 
	}
}

520 
	$wifi_≠p_èsk
(*
¥iv
)

522 
msg
[32];

523 
ªs
;

524 
u32
 
timehdl
 = 0;

525 
cfg_öfo
 
öfo
 = {0};

534 
wifi_dev
 = 
	`dev_›í
("wifi", 
NULL
);

535 i‡(!
wifi_dev
) {

536 
	`¥ötf
(">>>>>>> wifi dev openÉrr !!!! <<<<<<<<\r\n");

540 
öfo
.
cb
 = 
√tw‹k_u£r_ˇŒback
;

541 
öfo
.
√t_¥iv
 = 
NULL
;

542 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_CB_FUNC
, (
u32
)&
öfo
);

545 
	`¥ötf
("\n >>>> DEV_SET_WIFI_POWER_SAVE<<<< \n");

546 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_POWER_SAVE
, 0);

550 
	`¥ötf
("\n >>>> DEV_SET_WIFI_TX_PWR_BY_RATE<<< \n");

552 
öfo
.
tx_pwr_lmt_íabÀ
 = 0;

553 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_TX_PWR_LMT_ENABLE
, (
u32
)&
öfo
);

554 
öfo
.
tx_pwr_by_øã
 = 1;

555 
	`dev_io˘l
(
wifi_dev
, 
DEV_SET_WIFI_TX_PWR_BY_RATE
, (
u32
)&
öfo
);

559 
	`wifi_£t_œn_£âög_öfo
();

561 
	`wifi_⁄
();

563 
	`sys_timî_add
(
NULL
, 
wifi_≠p_timî_func
, 1000);

566 
ªs
 = 
	`os_èsk_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

568 
ªs
) {

569 
OS_TASKQ
:

570 
msg
[0]) {

571 
Q_USER
:

572 
msg
[1]) {

573 
WIFI_MSG_TICK_1_SEC
:

575 i‡(
	`time_œp£
(&
timehdl
, 60 * 1000)) {

581 i‡(
	`wifi_moduÀ_is_öô
()) {

584 
	`¥ötf
("WIFI U%d KB/s, D%d KB/s\r\n", 
	`wifi_gë_u∂ﬂd_øã
(Ë/ 1024, 
	`wifi_gë_dow∆ﬂd_øã
() / 1024);

586 i‡(
	`gë_cur_wifi_öfo
()->
mode
 =
STA_MODE
) {

587 
	`gë_rx_sig«l
();

595 
WIFI_MSG_SMP_CFG_START
:

596 
	`mem£t
(&
aúkiss_ªsu…
, 0, (airkiss_result));

597 
	`voi˚¥öt_cfg_°¨t
();

599 
WIFI_MSG_SMP_CFG_STOP
:

600 
	`voi˚¥öt_cfg_°›
();

603 
WIFI_MSG_SMP_CFG_COMPLETED
:

604 
	`wifi_smp_c⁄√˘
(
NULL
, NULL, NULL);

606 
WIFI_MSG_SMP_CFG_TIMEOUT
: {

607 
sys_evít
 
evt
;

608 
evt
.
¨g
 = "net";

609 
evt
.
ty≥
 = 
SYS_NET_EVENT
;

610 
evt
.
u
.
√t
.
evít
 = 
NET_EVENT_SMP_CFG_TIMEOUT
;

611 
	`sys_evít_nŸify
(&
evt
);

615 
WIFI_MSG_STA_SCAN_COMPLETED
:

616 
	`aúkiss_ssid_check
();

618 
WIFI_MSG_STA_NETWORK_STACK_DHCP_SUCC
:

619 
	`aúkiss_brﬂdˇ°
();

620 
	`voi˚¥öt_brﬂdˇ°
();

621 
_√t_dh˝_ªady
 = 1;

624 
sys_evít
 
evt
;

625 
evt
.
¨g
 = "net";

626 
evt
.
ty≥
 = 
SYS_NET_EVENT
;

627 
evt
.
u
.
√t
.
evít
 = 
NET_EVENT_CONNECTED
;

628 
	`sys_evít_nŸify
(&
evt
);

631 
WIFI_MSG_STA_DISCONNECTED
:

632 
_√t_dh˝_ªady
 = 0;

634 
sys_evít
 
evt
;

635 
evt
.
¨g
 = "net";

636 
evt
.
ty≥
 = 
SYS_NET_EVENT
;

637 
evt
.
u
.
√t
.
evít
 = 
NET_EVENT_DISCONNECTED
;

638 
	`sys_evít_nŸify
(&
evt
);

653 
	}
}

655 
	$wúñess_√t_öô
()

657 
	`puts
("wifiÉarly init \n\n\n\n\n\n");

658 
	`thªad_f‹k
(
WIFI_APP_TASK_NAME
, 10, 0x1000, 64, 0, 
wifi_≠p_èsk
, 
NULL
);

660 
	}
}

661 #i‡
deföed
 
CONFIG_WIFI_ENABLE


662 
œã_öôˇŒ
(
wúñess_√t_öô
);

665 
cfg_öfo
 
	gwifi_öfo
;

666 *
	$gë_wifi_ssid
()

668 
wifi_öfo
.
mode
 = 
NONE_MODE
;

669 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
wifi_öfo
);

670  
wifi_öfo
.
ssid
;

671 
	}
}

674 *
	$gë_wifi_pwd
()

676 
wifi_öfo
.
mode
 = 
NONE_MODE
;

677 
	`dev_io˘l
(
wifi_dev
, 
DEV_GET_CUR_WIFI_INFO
, (
u32
)&
wifi_öfo
);

678  
wifi_öfo
.
pwd
;

679 
	}
}

683 
	$sdio_ªcv_pkg_úq
()

685 
u32
 
thdŒ
, 
cou¡222
;

686 
ªt22
;

687 
ªt22
 = 
	`time_œp£
(&
thdŒ
, 1000);

688 i‡(
ªt22
) {

690 
cou¡222
 = 0;

692 ++
cou¡222
;

693 
	}
}

	@app/wire_app_task.c

1 
	~"≠p_c⁄fig.h
"

3 #ifde‡
CONFIG_NET_ENABLE


5 
	~"√t/√t_≠i.h
"

6 
	~"sy°em/ö˛udes.h
"

8 
	~"a˘i⁄.h
"

19 *
	gdev
 = 
NULL
 ;

22 
	$wifi_£t_œn_£âög_öfo
()

25 
œn_£âög
 
œn_£âög_öfo
 = {

27 .
WIRELESS_IP_ADDR0
 = 192,

28 .
WIRELESS_IP_ADDR1
 = 168,

29 .
WIRELESS_IP_ADDR2
 = 1,

30 .
WIRELESS_IP_ADDR3
 = 3,

32 .
WIRELESS_NETMASK0
 = 255,

33 .
WIRELESS_NETMASK1
 = 255,

34 .
WIRELESS_NETMASK2
 = 255,

35 .
WIRELESS_NETMASK3
 = 0,

37 .
WIRELESS_GATEWAY0
 = 192,

38 .
WIRELESS_GATEWAY1
 = 168,

39 .
WIRELESS_GATEWAY2
 = 1,

40 .
WIRELESS_GATEWAY3
 = 1,

42 .
SERVER_IPADDR1
 = 192,

43 .
SERVER_IPADDR2
 = 168,

44 .
SERVER_IPADDR3
 = 1,

45 .
SERVER_IPADDR4
 = 3,

47 .
CLIENT_IPADDR1
 = 192,

48 .
CLIENT_IPADDR2
 = 168,

49 .
CLIENT_IPADDR3
 = 1,

50 .
CLIENT_IPADDR4
 = 2,

52 .
SUB_NET_MASK1
 = 255,

53 .
SUB_NET_MASK2
 = 255,

54 .
SUB_NET_MASK3
 = 255,

55 .
SUB_NET_MASK4
 = 0,

58 
cfg_öfo
 
öfo
;

59 
öfo
.
__œn_£âög_öfo
 = &
œn_£âög_öfo
;

60 
	`dev_io˘l
(
dev
, 
DEV_SET_LAN_SETTING
, (
u32
)&
öfo
);

62 
	}
}

65 
	$t˝_c⁄√˘_ã°
(*
¨g
)

67 
fd
;

68 
sockaddr_ö
 
de°_addr
;

69 
sockaddr_ö
 
ªmŸe
;

70 
ªt
 = 0;

72 
	`puts
("connect init\n");

73 
fd
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

75 *
buf1
 = 
	`mÆloc
(44 * 1460);

76 
ªmŸe
.
sö_Ámûy
 = 
AF_INET
;

78 
ªmŸe
.
sö_addr
.
s_addr
 = 
	`öë_addr
("192.168.1.100");

79 
ªmŸe
.
sö_p‹t
 = 
	`ht⁄s
(22222);

83 
ªt
 = 
	`c⁄√˘
(
fd
, (
sockaddr
 *)&
ªmŸe
, (remote));

84 i‡(
ªt
 < 0) {

85 
	`puts
("connect fail\n\n\n");

88 
	`£nd
(
fd
, "exit", 4, 0);

92 
	`puts
("connect success\n\n\n");

95 
	}
}

101 
	$dh˝_°¨t_com∂ëe
(
îr
)

103 i‡(
îr
 == 0) {

104 
	`t˝_c⁄√˘_ã°
(
NULL
);

106 
	`log_e
("dh˝_°¨t_ÁûdÉº=%d\n", 
îr
);

108 
	}
}

110 
	$√tw‹k_°¨t_com∂ëe
(
îr
)

112 
√t_c⁄fig_öfo
 
öfo
;

114 i‡(
îr
 == 0) {

115 
	`log_d
("network_start_complete\n");

117 
öfo
.
dh˝_íabÀ
 = 
åue
;

118 
öfo
.
£t_deÁu…
 = 
åue
;

119 
öfo
.
loˇl_ho°_«me
 = "jieli_wifi";

121 
öfo
.
cfg
.
wifi
.
mode
 = 
ETHDEV_WIFI_STA_MODE
;

122 
öfo
.
cfg
.
wifi
.
ssid
 = "FAST_105";

123 
öfo
.
cfg
.
wifi
.
∑ssw‹d
 = "caozhilong";

125 
	`√èpi_icfg_ª°¨t
("wifi", &
öfo
, 
dh˝_°¨t_com∂ëe
);

128 
	}
}

130 
Inô_LwIP
(
u8_t
 
is_wúñess
, u8_à
dh˝
);

131 
	$√t_èsk
(*
¨g
)

143 
√t_c⁄fig_öfo
 
öfo
;

146 
öfo
.
dh˝_íabÀ
 = 
åue
;

147 
öfo
.
£t_deÁu…
 = 
åue
;

148 
öfo
.
loˇl_ho°_«me
 = "jieli_host";

153 
öfo
.
cfg
.
wifi
.
mode
 = 
ETHDEV_WIFI_STA_MODE
;

154 
öfo
.
cfg
.
wifi
.
ssid
 = "FAST_105";

155 
öfo
.
cfg
.
wifi
.
∑ssw‹d
 = "caozhilong";

157 
	`√èpi_icfg_£t
("wifi", &
öfo
);

158 
	`√èpi_icfg_ª°¨t
("wifi", 
dh˝_°¨t_com∂ëe
);

160 
öfo
.
dh˝_íabÀ
 = 
Ál£
;

161 
öfo
.
£t_deÁu…
 = 
åue
;

162 
öfo
.
loˇl_ho°_«me
 = "jieli_host";

163 
	`IP4_ADDR
(&
öfo
.
ùaddr
, 192, 168, 1, 1);

164 
	`IP4_ADDR
(&
öfo
.
mask
, 255, 255, 255, 0);

165 
	`IP4_ADDR
(&
öfo
.
gw
, 192, 168, 1, 1);

167 
öfo
.
cfg
.
wifi
.
mode
 = 
ETHDEV_WIFI_AP_MODE
;

168 
öfo
.
cfg
.
wifi
.
ssid
 = "CPYZ";

169 
öfo
.
cfg
.
wifi
.
∑ssw‹d
 = "12345678";

171 
	`√èpi_icfg_ª°¨t
("wifi", &
öfo
, 
√tw‹k_°¨t_com∂ëe
);

182 
msg
[32];

187 
	`puŒ_video_ªcv_öô
();

188 
	`puŒ_video_ªcv_öô
();

191 
	`os_èsk_≥nd
("èskq", 
msg
, 
	`ARRAY_SIZE
(msg));

194 
	}
}

196 
	$wúe_√t_öô
()

199 
	`os_èsk_¸óã
(
√t_èsk
, 
NULL
, 20, 0x1000, 256, "net_task");

201 
	}
}

203 
œã_öôˇŒ
(
wúe_√t_öô
);

	@cpu/AC521x/adc.c

1 
	~"asm/˝u.h
"

2 
	~"asm/adc.h
"

3 
	~"sy°em/öô.h
"

4 
	~"sy°em/timî.h
"

6 
	#FIRST_CHANNEL
() \

7 
adc_sˇn_begö


	)

9 
	#NEXT_CHANNEL
(
ch
) \

10 ++
ch
 >
adc_sˇn_íd
? 
adc_sˇn_begö
:
	)
ch

12 
adc_sˇn
 *
	gch™√l
 = 
FIRST_CHANNEL
();

14 
adc_•ö_lck
();

15 
adc_•ö_u∆ck
();

16 
	$adc_sˇn_¥o˚ss
(*
p
)

19 
	`adc_•ö_lck
();

20 
ch™√l
 = 
	`NEXT_CHANNEL
(channel);

21 
	`ADCSEL
(
ch™√l
->channel);

22 
	`KITSTART
();

23 !
	`ADC_PND
());

24 
ch™√l
->
vÆue
 = 
GPADC_RES
;

26 
	`adc_•ö_u∆ck
();

28 !
	`ADC_PND
());

29 
ch™√l
->
vÆue
 = 
GPADC_RES
;

30 i‡(
ch™√l
->
upd©a
) {

31 
ch™√l
->
	`upd©a
();

34 
ch™√l
 = 
	`NEXT_CHANNEL
(channel);

36 
	`ADCSEL
(
ch™√l
->channel);

37 
	`KITSTART
();

39 
	}
}

42 
	$adc_sˇn_öô
()

44 
	`ADCSEL
(
ch™√l
->channel);

45 
	`ADC_EN
(1);

46 
	`ADCEN
(1);

47 
	`ADC_BAUD
(0x7);

48 
	`ADC_WTIME
(0x1);

49 
	`KITSTART
();

53 
	`sys_hi_timî_add
(0, 
adc_sˇn_¥o˚ss
, 4);

56 
	}
}

57 
∂©f‹m_öôˇŒ
(
adc_sˇn_öô
);

	@cpu/AC521x/adkey.c

1 
	~"asm/adkey.h
"

2 
	~"asm/adc.h
"

3 
	~"gíîic/gpio.h
"

4 
	~"devi˚/key_drivî.h
"

5 
	~"devi˚/devi˚.h
"

8 
key_drivî
 
	gadkey_drivî
;

9 
adkey_∂©f‹m_d©a
 *
	g__this
 = 
NULL
;

13 
REGISTER_ADC_SCAN
(
adkey_sˇn
)

14 .
	gvÆue
 = 0,

18 
	$adkey_öô
(
key_drivî
 *
key
, *
¨g
)

20 
__this
 = (
adkey_∂©f‹m_d©a
 *)
¨g
;

21 i‡(!
__this
) {

22  -
EINVAL
;

25 
adkey_sˇn
.
ch™√l
 = 
__this
->
ad_ch™√l
;

27 
	`gpio_dúe˘i⁄_öput
(
__this
->
io
);

28 
	`gpio_£t_puŒ_up
(
__this
->
io
, 0);

29 
	`gpio_£t_puŒ_down
(
__this
->
io
, 0);

30 
	`gpio_£t_dõ
(
__this
->
io
, 0);

32 
adkey_drivî
.
¥ev_vÆue
 = 0;

33 
adkey_drivî
.
œ°_key
 = 
NO_KEY
;

34 
adkey_drivî
.
sˇn_time
 = 10;

35 
adkey_drivî
.
ba£_˙t
 = 
__this
->base_cnt;

36 
adkey_drivî
.
l⁄g_˙t
 = 
__this
->long_cnt;

37 
adkey_drivî
.
hﬁd_˙t
 = 
__this
->hold_cnt;

40 
	}
}

42 
u16
 
	$adkey_gë_vÆue
(
key_drivî
 *
key
)

44 
i
;

45 
adkey_vÆue_èbÀ
 *
èbÀ
 = &
__this
->table;

49 
i
 = 0; i < 
ADKEY_MAX_NUM
; i++) {

50 i‡(
adkey_sˇn
.
vÆue
 >
èbÀ
->
ad_vÆue
[
i
]) {

51  
èbÀ
->
key_vÆue
[
i
];

53 i‡(
èbÀ
->
ad_vÆue
[
i
] == 0) {

58  
NO_KEY
;

59 
	}
}

61 c⁄° 
key_drivî_›s
 
	gadkey_drivî_›s
 = {

62 .
öô
 = 
adkey_öô
,

63 .
	ggë_vÆue
 = 
adkey_gë_vÆue
,

66 
REGISTER_KEY_DRIVER
(
adkey_drivî
) = {

67 .
«me
 = "adkey",

68 .
	g›s
 = &
adkey_drivî_›s
,

	@cpu/AC521x/board/board_5213B_wifi_story.c

1 
	~"≠p_c⁄fig.h
"

3 #ifde‡
CONFIG_BOARD_5213B_STORY


5 
	~"sy°em/ö˛udes.h
"

6 
	~"devi˚/av10_•i.h
"

7 
	~"asm/ldo.h
"

8 
	~"vm_≠i.h
"

10 #ifde‡
CONFIG_WIFI_ENABLE


11 
	~"devi˚/wifi_dev.h
"

14 #ifde‡
CONFIG_GSENSOR_ENABLE


15 
	~"gSís‹_m™age.h
"

35 
UART2_PLATFORM_DATA_BEGIN
(
u¨t2_d©a
)

36 .
	gbaudøã
 = 460800,

37 .
	gtx_pö
 = 
IO_PORTF_00
,

38 .
	gÊags
 = 
UART_DEBUG
,

39 
UART2_PLATFORM_DATA_END
();

49 #ifde‡
CONFIG_SD0_ENABLE


51 
	$sdmmc_0_io_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *
d©a
)

54 
u8
 
öô
 = 0;

56 i‡(!
öô
) {

57 
öô
 = 1;

58 
	`gpio_dúe˘i⁄_öput
(
IO_PORTH_12
);

59 
	`gpio_£t_puŒ_up
(
IO_PORTH_12
, 1);

60 
	`gpio_£t_puŒ_down
(
IO_PORTH_12
, 0);

63  !
	`gpio_ªad
(
IO_PORTH_12
);

64 
	}
}

66 
SD0_PLATFORM_DATA_BEGIN
(
sd0_d©a
)

67 .
	gp‹t
 = 'B',

68 .
	g¥i‹ôy
 = 3,

69 .
	gd©a_width
 = 4,

70 .
	g•ìd
 = 20000000,

71 .
	gdëe˘_mode
 = 
SD_IO_DECT
,

72 .
	gdëe˘_func
 = 
sdmmc_0_io_dëe˘
,

73 
	$SD0_PLATFORM_DATA_END
()

77 #ifde‡
CONFIG_SD1_ENABLE


79 
	$sdmmc_1_io_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *
d©a
)

81 
u8
 
öô
 = 0;

85 i‡(!
öô
) {

86 
öô
 = 1;

87 
	`gpio_dúe˘i⁄_öput
(
IO_PORTA_11
);

88 
	`gpio_£t_puŒ_up
(
IO_PORTA_11
, 1);

89 
	`gpio_£t_puŒ_down
(
IO_PORTA_11
, 0);

92  !
	`gpio_ªad
(
IO_PORTA_11
);

94 
	}
}

96 
	$sdmmc_powî
(
⁄
)

98 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTB_11
, !
⁄
);

99 
	}
}

101 
SD1_PLATFORM_DATA_BEGIN
(
sd1_d©a
)

102 .
	gp‹t
 = 'A',

103 .
	g¥i‹ôy
 = 3,

104 .
	gd©a_width
 = 4,

105 .
	g•ìd
 = 30000000,

106 .
	gdëe˘_mode
 = 
SD_CMD_DECT
,

107 .
	gdëe˘_func
 = 
NULL
,

108 
	$SD1_PLATFORM_DATA_END
()

112 #ifde‡
CONFIG_SD2_ENABLE


114 
	$sdmmc_2_io_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *
d©a
)

116 
˙t
 = 0;

118 i‡(
˙t
 < 100) {

119 
˙t
++;

124 
	}
}

126 
SD2_PLATFORM_DATA_BEGIN
(
sd2_d©a
)

127 .
	gp‹t
 = 'A',

128 .
	g¥i‹ôy
 = 3,

129 .
	gd©a_width
 = 4,

130 .
	g•ìd
 = 30000000,

131 .
	gdëe˘_mode
 = 
SD_CMD_DECT
,

132 .
	gdëe˘_func
 = 
NULL
,

133 
	$SD2_PLATFORM_DATA_END
()

138 
	`SW_IIC_PLATFORM_DATA_BEGIN
(
hw_iic0_d©a
)

139 .
˛k_pö
 = 
IO_PORTA_06
,

140 .
d©_pö
 = 
IO_PORTA_08
,

141 .
sw_iic_dñay
 = 50,

142 
	$SW_IIC_PLATFORM_DATA_END
()

144 
	`HW_IIC0_PLATFORM_DATA_BEGIN
(
hw_iic0_d©a
)

145 .
˛k_pö
 = 
IO_PORTA_06
,

146 .
d©_pö
 = 
IO_PORTA_08
,

147 .
baudøã
 = 0x3f,

148 
	$HW_IIC0_PLATFORM_DATA_END
()

152 
	`HW_IIC1_PLATFORM_DATA_BEGIN
(
hw_iic1_d©a
)

153 .
˛k_pö
 = 
IO_PORTB_00
,

154 .
d©_pö
 = 
IO_PORTB_01
,

155 .
baudøã
 = 0x1f,

156 
	$HW_IIC1_PLATFORM_DATA_END
()

159 
	`SW_IIC_PLATFORM_DATA_BEGIN
(
sw_iic_d©a
)

160 .
˛k_pö
 = 
IO_PORTD_01
,

161 .
d©_pö
 = 
IO_PORTD_02
,

162 .
sw_iic_dñay
 = 50,

163 
	$SW_IIC_PLATFORM_DATA_END
()

165 #ifde‡
CONFIG_DISPLAY_ENABLE


167 
	`LCD_PLATFORM_DATA_BEGIN
(
lcd_d©a
)

168 .
öãrÁ˚
 = 
LCD_DVP_RGB
,

169 .
lcd_io
 = {

170 .
backlight
 = 
IO_PORTH_01
,

171 .
backlight_vÆue
 = 1,

173 .
lcd_ª£t
 = -1,

174 .
lcd_cs
 = -1,

175 .
lcd_rs
 = -1,

176 .
lcd_•i_ck
= -1,

177 .
lcd_•i_di
= -1,

178 .
lcd_•i_do
= -1,

179 
	}
}

180 
	$LCD_PLATFORM_DATA_END
()

187 #ifde‡
CONFIG_VIDEO0_ENABLE


189 c⁄° 
ˇmîa_∂©f‹m_d©a
 
ˇmîa0_d©a
 = {

190 .
x˛k_gpio
 = 
IO_PORTH_13
,

191 .
ª£t_gpio
 = 
IO_PORTD_00
,

192 .
⁄löe_dëe˘
 = 
NULL
,

193 .
pwdn_gpio
 = -1,

194 .
powî_vÆue
 = 0,

195 .
öãrÁ˚
 = 
SEN_INTERFACE0
,

196 .
dvp
={

197 .
p˛k_gpio
 = 
IO_PORTD_03
,

198 .
hsync_gpio
 = 
IO_PORTD_04
,

199 .
vsync_gpio
 = 
IO_PORTD_05
,

200 .
io_fun˘i⁄_£l
 = 
	`DVP_SENSOR0
(0),

201 .
d©a_gpio
={

204 
IO_PORTD_13
,

205 
IO_PORTD_12
,

206 
IO_PORTD_11
,

207 
IO_PORTD_10
,

208 
IO_PORTD_09
,

209 
IO_PORTD_08
,

210 
IO_PORTD_07
,

211 
IO_PORTD_06
,

214 
	}
};

216 c⁄° 
video_subdevi˚_d©a
 
	gvideo0_subdev_d©a
[] = {

217 { 
VIDEO_TAG_CAMERA
, (*)&
ˇmîa0_d©a
 },

219 c⁄° 
video_∂©f‹m_d©a
 
	gvideo0_d©a
 = {

220 .
d©a
 = 
video0_subdev_d©a
,

221 .
	gnum
 = 
ARRAY_SIZE
(
video0_subdev_d©a
),

228 #ifde‡
CONFIG_VIDEO1_ENABLE


230 
boﬁ
 
	$ˇmîa1_⁄löe_dëe˘
()

232 
u8
 
öô
 = 0;

236 i‡(!
öô
) {

237 
öô
 = 1;

238 
	`gpio_dúe˘i⁄_öput
(
IO_PORTA_10
);

239 
	`gpio_£t_puŒ_up
(
IO_PORTA_10
, 0);

240 
	`gpio_£t_puŒ_down
(
IO_PORTA_10
, 0);

243  !
	`gpio_ªad
(
IO_PORTA_10
);

244 
	}
}

246 c⁄° 
ˇmîa_∂©f‹m_d©a
 
	gˇmîa1_d©a
 = {

247 .
x˛k_gpio
 = -1,

248 .
	gª£t_gpio
 = 
IO_PORTA_11
,

249 .
	gpwdn_gpio
 = -1,

250 .
	gpowî_vÆue
 = 1,

251 .
	göãrÁ˚
 = 
SEN_INTERFACE1
,

252 .
	g⁄löe_dëe˘
 = 
ˇmîa1_⁄löe_dëe˘
,

253 .
	gdvp
 = {

254 .
p˛k_gpio
 = 
IO_PORTF_04
,

255 .
	ghsync_gpio
 = 
IO_PORTF_02
,

256 .
	gvsync_gpio
 = 
IO_PORTF_03
,

257 .
	gio_fun˘i⁄_£l
 = 
DVP_SENSOR1
(1),

258 .
	gd©a_gpio
 = {

261 
IO_PORTG_04
,

262 
IO_PORTG_03
,

263 
IO_PORTG_02
,

264 
IO_PORTG_01
,

265 
IO_PORTG_00
,

266 
IO_PORTF_07
,

267 
IO_PORTF_06
,

268 
IO_PORTF_05
,

273 c⁄° 
video_subdevi˚_d©a
 
	gvideo1_subdev_d©a
[] = {

274 { 
VIDEO_TAG_CAMERA
, (*)&
ˇmîa1_d©a
 },

276 c⁄° 
video_∂©f‹m_d©a
 
	gvideo1_d©a
 = {

277 .
d©a
 = 
video1_subdev_d©a
,

278 .
	gnum
 = 
ARRAY_SIZE
(
video1_subdev_d©a
),

283 #ifde‡
CONFIG_VIDEO2_ENABLE


286 
UVC_PLATFORM_DATA_BEGIN
(
uvc_d©a
)

287 .
	gwidth
 = 640,

288 .
	gheight
 = 480,

289 .
	gÂs
 = 25,

290 .
	gmem_size
 = 512 * 1024,

291 .
	gtimeout
 = 3000,

292 .
	gput_msg
 = 0,

293 
	$UVC_PLATFORM_DATA_END
()

295 c⁄° 
video_subdevi˚_d©a
 
video2_subdev_d©a
[] = {

296 { 
VIDEO_TAG_UVC
, (*)&
uvc_d©a
 },

297 
	}
};

298 c⁄° 
video_∂©f‹m_d©a
 
	gvideo2_d©a
 = {

299 .
d©a
 = 
video2_subdev_d©a
,

300 .
	gnum
 = 
ARRAY_SIZE
(
video2_subdev_d©a
),

305 
USB_PLATFORM_DATA_BEGIN
(
usb_d©a
)

306 .
	gid
 = 0,

307 .
	g⁄löe_check_˙t
 = 3,

308 .
	gofÊöe_check_˙t
 = 20,

309 .
	gi§_¥i‹ôy
 = 6,

310 .
	gho°_Ÿ
 = 20,

311 .
	gho°_•ìd
 = 1,

312 .
	g¶ave_Ÿ
 = 10,

313 .
	g˘l_úq_öt
 = 
HUSB_CTL_INT
,

314 
	$USB_PLATFORM_DATA_END
()

319 #ifde‡
CONFIG_ADKEY_ENABLE


321 
	#ADC0_33
 (0x3FF)

	)

322 
	#ADC0_08
 (0x3f‡* 220 / (220 + 22))

	)

323 
	#ADC0_07
 (0x3f‡* 100 / (100 + 22))

	)

324 
	#ADC0_06
 (0x3f‡* 51 / (51 + 22))

	)

325 
	#ADC0_05
 (0x3f‡* 33 / (33 + 22))

	)

326 
	#ADC0_04
 (0x3f‡* 24 / (24 + 22))

	)

327 
	#ADC0_03
 (0x3f‡* 15 / (15 + 22))

	)

328 
	#ADC0_02
 (0x3f‡* 10 / (10 + 22))

	)

329 
	#ADC0_01
 (0x3f‡* 3 / (3 + 22))

	)

330 
	#ADC0_00
 (0)

	)

332 
	#ADKEY_V_0
 ((
ADC0_33
 + ADC0_33)/2)

	)

333 
	#ADKEY_V_1
 ((
ADC0_33
 + ADC0_33)/2)

	)

334 
	#ADKEY_V_2
 ((
ADC0_07
 + 
ADC0_08
)/2)

	)

335 
	#ADKEY_V_3
 ((
ADC0_06
 + 
ADC0_07
)/2)

	)

336 
	#ADKEY_V_4
 ((
ADC0_05
 + 
ADC0_06
)/2)

	)

337 
	#ADKEY_V_5
 ((
ADC0_04
 + 
ADC0_05
)/2)

	)

338 
	#ADKEY_V_6
 ((
ADC0_03
 + 
ADC0_04
)/2)

339 
	#ADKEY_V_7
 ((
ADC0_02
 + 
ADC0_03
)/2)

340 
	#ADKEY_V_8
 ((
ADC0_01
 + 
ADC0_02
)/2)

341 
	#ADKEY_V_9
 ((
ADC0_00
 + 
ADC0_01
)/2)

342 
	#ADKEY_V_10
 (
ADC0_00
)

	)

345 
	`ADKEY_PLATFORM_DATA_BEGIN
(
adkey_d©a
)

346 .
io
 = 
IO_PORTD_00
,

347 .
ad_ch™√l
 = 12,

348 .
èbÀ
 = {

349 .
ad_vÆue
 = {

350 
ADKEY_V_0
,

351 
ADKEY_V_1
,

352 
ADKEY_V_2
,

353 
ADKEY_V_3
,

354 
ADKEY_V_4
,

355 
ADKEY_V_5
,

356 
ADKEY_V_6
,

357 
ADKEY_V_7
,

358 
ADKEY_V_8
,

359 
ADKEY_V_9
,

360 
ADKEY_V_10
,

362 .
key_vÆue
 = {

363 
NO_KEY
,

364 
NO_KEY
,

365 
KEY_UP
,

366 
NO_KEY
,

367 
NO_KEY
,

368 
NO_KEY
,

369 
KEY_ENC
,

370 
NO_KEY
,

371 
KEY_DOWN
,

372 
KEY_OK
,

373 
KEY_MODE
,

375 
	}
},

376 
	$ADKEY_PLATFORM_DATA_END
()

377 
	$key_evít_ªm≠
(
sys_evít
 *
e
)

379  
åue
;

380 
	}
}

386 #ifde‡
CONFIG_IOKEY_ENABLE


390 
	#POWER_PIN
 
IO_PORTA_07


	)

391 c⁄° 
iokey_p‹t
 
	giokey_li°
[] = {

393 .
p‹t
 = 
POWER_PIN
,

394 .
	g¥ess_vÆue
 = 1,

395 .
	gkey_vÆue
 = 
KEY_POWER
,

399 c⁄° 
iokey_∂©f‹m_d©a
 
	giokey_d©a
 = {

400 .
num
 = 
ARRAY_SIZE
(
iokey_li°
),

401 .
	gp‹t
 = 
iokey_li°
,

404 
	$ªad_powî_key
()

406 
	`gpio_£t_puŒ_down
(
POWER_PIN
,1);

407 
	`gpio_dúe˘i⁄_öput
(
POWER_PIN
);

408  (
	`gpio_ªad
(
POWER_PIN
));

409 
	}
}

412 
	$ªad_powî_key
()

415 
	}
}

423 
SPI0_PLATFORM_DATA_BEGIN
(
•i0_d©a
)

424 .
	g˛k
 = 20000000,

425 .
	gmode
 = 
SPI_ODD_MODE
,

426 .
	gp‹t
 = 'A',

427 
	$SPI0_PLATFORM_DATA_END
()

431 
	`SPI1_PLATFORM_DATA_BEGIN
(
•i1_d©a
)

432 .
˛k
 = 10000000,

433 .
mode
 = 
SPI_ODD_MODE
,

434 .
p‹t
 = 'D',

435 
	$SPI1_PLATFORM_DATA_END
()

437 c⁄° 
•iÊash_∂©f‹m_d©a
 
•iÊash_d©a
 = {

438 .
«me
 = "spi0",

439 .
mode
 = 
FAST_READ_OUTPUT_MODE
,

440 .
sfc_run_mode
 = 
SFC_FAST_READ_DUAL_OUTPUT_MODE
,

441 
	}
};

447 c⁄° 
dac_∂©f‹m_d©a
 
	gdac_d©a
 = {

448 .
ldo_id
 = 1,

449 .
	g∑_muã_p‹t
 = 0xff,

450 .
	g∑_muã_vÆue
 = 0,

451 .
	gdif„r_ouçut
 = 1,

454 c⁄° 
adc_∂©f‹m_d©a
 
	gadc_d©a
 = {

455 .
mic_ch™√l
 = 
LADC_CH_MIC_R
,

456 .
	glöeö_ch™√l
 = 
LADC_LINE0_MASK
,

457 .
	gldo_£l
 = 1,

460 c⁄° 
audio_pf_d©a
 
	gaudio_pf_d
 = {

461 .
adc_pf_d©a
 = &
adc_d©a
,

462 .
	gdac_pf_d©a
 = &
dac_d©a
,

464 c⁄° 
audio_∂©f‹m_d©a
 
	gaudio_d©a
 = {

465 .
¥iv©e_d©a
 = (*)&
audio_pf_d
,

468 
USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa0_d©a
)

469 .
	g›í_log
 = 1,

470 
	$USB_CAMERA_PLATFORM_DATA_END
()

472 
	`USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa1_d©a
)

473 .
›í_log
 = 1,

474 
	$USB_CAMERA_PLATFORM_DATA_END
()

476 #ifde‡
CONFIG_GSENSOR_ENABLE


478 c⁄° 
g£ns‹_∂©f‹m_d©a
 
g£ns‹_d©a
 = {

479 .
iic
 = "iic0",

480 
	}
};

486 #ifde‡
CONFIG_AV10_SPI_ENABLE


487 c⁄° 
devi˚_›î©i⁄s
 
_•i_dev_›s
;

489 
SW_SPI_PLATFORM_DATA_BEGIN
(
sw_•i_d©a
)

490 .
	gpö_cs
 = 
IO_PORTD_02
,

491 .
	gpö_˛k
 = 
IO_PORTD_00
,

492 .
	gpö_ö
 = 
IO_PORTD_01
,

493 .
	gpö_out
 = 
IO_PORTD_01
,

494 
	$SW_SPI_PLATFORM_DATA_END
()

498 #ifde‡
CONFIG_WIFI_ENABLE


499 
	`WIFI_PLATFORM_DATA_BEGIN
(
wifi_d©a
)

500 .
moduÀ
 = 
RTL8189E
,

501 .
sdio_∑rm
 = 
SDIO_GRP_1
 | 
SDIO_PORT_2
 | 
SDIO_4_BIT_DATA
 | 
SDIO_CLOCK_26M
,

502 .
wakeup_p‹t
 = -1,

503 .
cs_p‹t
 = -1,

504 .
powî_p‹t
 = -1,

505 
	$WIFI_PLATFORM_DATA_END
()

508 
	$av_∑rkög_dë_öô
()

510 
	`gpio_dúe˘i⁄_öput
(
IO_PORTA_09
);

511 
	}
}

513 
	$av_∑rkög_dë_°©us
()

515  (!
	`gpio_ªad
(
IO_PORTA_09
));

516 
	}
}

517 
	$PWR_CTL
(
⁄_off
)

520 
	}
}

522 
	#USB_WKUP_IO
 
IO_PORT_PR_01


	)

523 
	#GSEN_WKUP_IO
 
IO_PORT_PR_02


	)

524 
	$usb_is_ch¨gög
()

527 
öô
 = 0;

528 i‡(!
öô
){

529 
öô
 = 1;

530 
	`gpio_dúe˘i⁄_öput
(
USB_WKUP_IO
);

531 
	`gpio_£t_puŒ_up
(
USB_WKUP_IO
, 0);

532 
	`gpio_£t_puŒ_down
(
USB_WKUP_IO
, 0);

533 
	`gpio_£t_dõ
(
USB_WKUP_IO
, 1);

534 
	`dñay
(10);

537  (
	`gpio_ªad
(
USB_WKUP_IO
));

541 
	}
}

543 
	$gë_usb_wkup_gpio
()

545  (
USB_WKUP_IO
);

546 
	}
}

548 
POWER_PLATFORM_DATA_BEGIN
(
sys_powî_d©a
)

549 .
	gwkup_m≠
 = {

550 {"wkup_usb", 
WKUP_IO_PR1
, 0},

551 {"wkup_g£n", 
WKUP_IO_PR2
, 0},

554 .
	gmö_b©_powî_vÆ
 = 350,

555 .
	gmax_b©_powî_vÆ
 = 420,

556 .
	gch¨gî_⁄löe
 = 
usb_is_ch¨gög
,

557 .
	gch¨gî_gpio
 = 
gë_usb_wkup_gpio
,

558 .
	gªad_powî_key
 = 
ªad_powî_key
,

559 .
	gpwr_˘l
 = 
PWR_CTL
,

560 
	$POWER_PLATFORM_DATA_END
()

565 
	`REGISTER_DEVICES
(
devi˚_èbÀ
) = {

567 { "iic0", &
iic_dev_›s
, (*)&
hw_iic0_d©a
 },

569 { "audio", &
audio_dev_›s
, (*)&
audio_d©a
 },

571 #ifde‡
CONFIG_SD0_ENABLE


572 { "sd0", &
sd_dev_›s
, (*)&
sd0_d©a
 },

575 #ifde‡
CONFIG_SD1_ENABLE


576 { "sd1", &
sd_dev_›s
, (*)&
sd1_d©a
 },

579 #ifde‡
CONFIG_SD2_ENABLE


580 { "sd2", &
sd_dev_›s
, (*)&
sd2_d©a
 },

583 #ifde‡
CONFIG_ADKEY_ENABLE


584 { "adkey", &
key_dev_›s
, (*)&
adkey_d©a
 },

586 { "u¨t_key", &
key_dev_›s
, 
NULL
 },

588 #ifde‡
CONFIG_IOKEY_ENABLE


589 { "iokey", &
key_dev_›s
, (*)&
iokey_d©a
 },

592 #i‚de‡
CONFIG_SFC_ENABLE


593 { "•i0", &
•i_dev_›s
, (*)&
•i0_d©a
 },

594 { "•iÊash", &
•iÊash_dev_›s
, (*)&
•iÊash_d©a
 },

596 { "•iÊash", &
sfcÊash_dev_›s
, (*)&
•iÊash_d©a
 },

599 #ifde‡
CONFIG_ETH_PHY_ENABLE


603 #ifde‡
CONFIG_WIFI_ENABLE


604 { "wifi", &
wifi_dev_›s
, (*Ë&
wifi_d©a
},

606 {"πc", &
πc_dev_›s
, 
NULL
},

607 {"vm", &
vm_dev_›s
, 
NULL
},

609 
	}
};

613 #ifde‡
CONFIG_DEBUG_ENABLE


614 
	$debug_u¨t_öô
()

616 
	`avdd18_¸é
(
AVDD18_18063
, 0);

619 
	`u¨t_öô
(&
u¨t0_d©a
);

629 
IOMC3
 &~
	`BIT
(25);

631 
	`u¨t_öô
(&
u¨t2_d©a
);

642 
	}
}

645 
	$bﬂrd_öô
()

661 
	`gpio_dúe˘i⁄_öput
(
IO_PORTF_01
);

664 
SDTAP_CON
 = 0;

668 
	`πc_pö_ª£t_˘æ
(0);

672 #ifde‡
CONFIG_VIDEO3_ENABLE


674 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTB_12
, 1);

676 
	`avdd28_˘æ
(
AVDD28_2803
, 0);

681 
	`devi˚s_öô
();

682 
	}
}

	@cpu/AC521x/board/board_GR202.c

1 
	~"≠p_c⁄fig.h
"

3 #ifde‡
CONFIG_BOARD_GR202


5 
	~"sy°em/ö˛udes.h
"

6 
	~"devi˚/av10_•i.h
"

7 
	~"asm/ldo.h
"

8 
	~"vm_≠i.h
"

9 
	~"devi˚/wifi_dev.h
"

13 
UART2_PLATFORM_DATA_BEGIN
(
u¨t2_d©a
)

14 .
	gbaudøã
 = 460800,

15 .
	gtx_pö
 = 
IO_PORTH_00
,

16 .
	gÊags
 = 
UART_DEBUG
,

17 
UART2_PLATFORM_DATA_END
();

19 #ifde‡
CONFIG_SD2_ENABLE


21 
	$sd2_io_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *
d©a
)

24 
	}
}

26 
SD2_PLATFORM_DATA_BEGIN
(
sd2_d©a
)

27 .
	gp‹t
 = 'A',

28 .
	g¥i‹ôy
 = 3,

29 .
	gd©a_width
 = 1,

30 .
	g•ìd
 = 30000000,

32 .
	gdëe˘_mode
 = 
SD_CLK_DECT
,

33 .
	gdëe˘_func
 = 
sdmmc_2_˛k_dëe˘
,

36 
	$SD2_PLATFORM_DATA_END
()

40 
	`HW_IIC0_PLATFORM_DATA_BEGIN
(
hw_iic0_d©a
)

41 .
˛k_pö
 = 
IO_PORTA_06
,

42 .
d©_pö
 = 
IO_PORTA_08
,

43 .
baudøã
 = 0x3f,

44 
	$HW_IIC0_PLATFORM_DATA_END
()

47 
	`SW_IIC_PLATFORM_DATA_BEGIN
(
sw_iic_d©a
)

48 .
˛k_pö
 = 
IO_PORTD_01
,

49 .
d©_pö
 = 
IO_PORTD_02
,

50 .
sw_iic_dñay
 = 50,

51 
	$SW_IIC_PLATFORM_DATA_END
()

54 
	`USB_PLATFORM_DATA_BEGIN
(
usb_d©a
)

55 .
id
 = 0,

56 .
⁄löe_check_˙t
 = 3,

57 .
ofÊöe_check_˙t
 = 20,

58 .
i§_¥i‹ôy
 = 6,

59 .
ho°_Ÿ
 = 20,

60 .
ho°_•ìd
 = 1,

61 .
¶ave_Ÿ
 = 10,

62 .
˘l_úq_öt
 = 
HUSB_CTL_INT
,

63 
	$USB_PLATFORM_DATA_END
()

68 #ifde‡
CONFIG_ADKEY_ENABLE


70 
ADC_PORTA_0
 = 0,

71 
ADC_PORTA_5
 = 1,

72 
ADC_PORTG_6
 = 2,

73 
ADC_PORTG_7
 = 3,

74 
ADC_PORTH_0
 = 4,

75 
ADC_PORTH_1
 = 5,

76 
ADC_PORTH_5
 = 6,

77 
ADC_PORTH_7
 = 7,

78 
ADC_PORTH_9
 = 8,

79 
ADC_PORTH_10
 = 9,

80 
ADC_PORTH_12
 = 10,

81 
ADC_PORTH_13
 = 11,

82 
ADC_PORTD_0
 = 12,

83 
ADC_ANALOG_TEST
 = 13,

84 
ADC_RTC
 = 14,

85 
ADC_LDO_VBG
 = 15,

90 
	#ADKEY_UPLOAD_R
 22

	)

92 
	#ADC0_0A
 (0x3FF)

	)

93 
	#ADC0_09
 (0x3FF)

	)

94 
	#ADC0_08
 (0x3FF)

	)

95 
	#ADC0_07
 (0x3FF)

	)

96 
	#ADC0_06
 (0x3FF)

	)

97 
	#ADC0_05
 (0x3FF * 33 / (33 + 
ADKEY_UPLOAD_R
))

	)

98 
	#ADC0_04
 (0x3FF * 24 / (24 + 
ADKEY_UPLOAD_R
))

	)

99 
	#ADC0_03
 (0x3FF * 15 / (15 + 
ADKEY_UPLOAD_R
))

	)

100 
	#ADC0_02
 (0x3FF * 10 / (10 + 
ADKEY_UPLOAD_R
))

	)

101 
	#ADC0_01
 (0x3FF * 3 / (3 + 
ADKEY_UPLOAD_R
))

	)

102 
	#ADC0_00
 (0)

	)

104 
	#ADKEY_V_0
 ((
ADC0_09
 + 
ADC0_0A
)/2)

	)

105 
	#ADKEY_V_1
 ((
ADC0_08
 + 
ADC0_09
)/2)

	)

106 
	#ADKEY_V_2
 ((
ADC0_07
 + 
ADC0_08
)/2)

	)

107 
	#ADKEY_V_3
 ((
ADC0_06
 + 
ADC0_07
)/2)

	)

108 
	#ADKEY_V_4
 ((
ADC0_05
 + 
ADC0_06
)/2)

	)

109 
	#ADKEY_V_5
 ((
ADC0_04
 + 
ADC0_05
)/2)

	)

110 
	#ADKEY_V_6
 ((
ADC0_03
 + 
ADC0_04
)/2)

	)

111 
	#ADKEY_V_7
 ((
ADC0_02
 + 
ADC0_03
)/2)

	)

112 
	#ADKEY_V_8
 ((
ADC0_01
 + 
ADC0_02
)/2)

	)

113 
	#ADKEY_V_9
 ((
ADC0_00
 + 
ADC0_01
)/2)

	)

114 
	#ADKEY_V_10
 (
ADC0_00
)

	)

117 
	`ADKEY_PLATFORM_DATA_BEGIN
(
adkey_d©a
)

118 .
io
 = 
IO_PORTH_01
,

119 .
ad_ch™√l
 = 5,

120 .
èbÀ
 = {

121 .
ad_vÆue
 = {

122 
ADKEY_V_0
,

123 
ADKEY_V_1
,

124 
ADKEY_V_2
,

125 
ADKEY_V_3
,

126 
ADKEY_V_4
,

127 
ADKEY_V_5
,

128 
ADKEY_V_6
,

129 
ADKEY_V_7
,

130 
ADKEY_V_8
,

131 
ADKEY_V_9
,

132 
ADKEY_V_10
,

134 .
key_vÆue
 = {

135 
NO_KEY
,

136 
NO_KEY
,

137 
NO_KEY
,

138 
NO_KEY
,

139 
NO_KEY
,

140 
KEY_DOWN
,

141 
KEY_UP
,

142 
KEY_MODE
,

143 
KEY_F1
,

144 
KEY_ENC
,

145 
KEY_OK
,

147 
	}
},

148 
	$ADKEY_PLATFORM_DATA_END
()

150 
	$key_evít_ªm≠
(
sys_evít
 *
e
)

152  
åue
;

153 
	}
}

159 
	$ªad_powî_key
()

162 
	}
}

167 
SPI0_PLATFORM_DATA_BEGIN
(
•i0_d©a
)

168 .
	g˛k
 = 80000000,

169 .
	gmode
 = 
SPI_ODD_MODE
,

170 .
	gp‹t
 = 'A',

171 
	$SPI0_PLATFORM_DATA_END
()

173 c⁄° 
•iÊash_∂©f‹m_d©a
 
•iÊash_d©a
 = {

174 .
«me
 = "spi0",

175 .
mode
 = 
FAST_READ_OUTPUT_MODE
,

176 .
sfc_run_mode
 = 
SFC_FAST_READ_DUAL_OUTPUT_MODE
,

177 
	}
};

183 c⁄° 
dac_∂©f‹m_d©a
 
	gdac_d©a
 = {

184 .
ldo_id
 = 1,

185 .
	g∑_muã_p‹t
 = 
IO_PORTA_08
,

186 .
	g∑_muã_vÆue
 = 0,

187 .
	gdif„r_ouçut
 = 1,

190 c⁄° 
adc_∂©f‹m_d©a
 
	gadc_d©a
 = {

191 .
mic_ch™√l
 = 
LADC_CH_MIC_R
,

192 .
	glöeö_ch™√l
 = 
LADC_LINE0_MASK
,

193 .
	gldo_£l
 = 1,

196 c⁄° 
audio_pf_d©a
 
	gaudio_pf_d
 = {

197 .
adc_pf_d©a
 = &
adc_d©a
,

198 .
	gdac_pf_d©a
 = &
dac_d©a
,

200 c⁄° 
audio_∂©f‹m_d©a
 
	gaudio_d©a
 = {

201 .
¥iv©e_d©a
 = (*Ë&
audio_pf_d
,

204 
USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa0_d©a
)

205 .
	g›í_log
 = 1,

206 
	$USB_CAMERA_PLATFORM_DATA_END
()

208 
	`USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa1_d©a
)

209 .
›í_log
 = 1,

210 
	$USB_CAMERA_PLATFORM_DATA_END
()

213 #ifde‡
CONFIG_WIFI_ENABLE


214 
	`WIFI_PLATFORM_DATA_BEGIN
(
wifi_d©a
)

215 .
moduÀ
 = 
RTL8189E
,

216 .
sdio_∑rm
 = 
SDIO_GRP_1
 | 
SDIO_PORT_2
 | 
SDIO_4_BIT_DATA
 | 
SDIO_CLOCK_26M
,

217 .
wakeup_p‹t
 = -1,

218 .
cs_p‹t
 = -1,

219 .
powî_p‹t
 = -1,

220 
	$WIFI_PLATFORM_DATA_END
()

223 
	$av_∑rkög_dë_öô
()

225 
	}
}

227 
	$av_∑rkög_dë_°©us
()

230 
	}
}

231 
	$PWR_CTL
(
⁄_off
)

234 
	}
}

236 
	#USB_WKUP_IO
 
IO_PORT_PR_01


	)

238 
	$usb_is_ch¨gög
()

241 
öô
 = 0;

242 i‡(!
öô
) {

243 
öô
 = 1;

244 
	`gpio_dúe˘i⁄_öput
(
USB_WKUP_IO
);

245 
	`gpio_£t_puŒ_up
(
USB_WKUP_IO
, 0);

246 
	`gpio_£t_puŒ_down
(
USB_WKUP_IO
, 0);

247 
	`gpio_£t_dõ
(
USB_WKUP_IO
, 1);

248 
	`dñay
(10);

251  (
	`gpio_ªad
(
USB_WKUP_IO
));

255 
	}
}

257 
	$gë_usb_wkup_gpio
()

259  (
USB_WKUP_IO
);

260 
	}
}

262 
POWER_PLATFORM_DATA_BEGIN
(
sys_powî_d©a
)

263 .
	gwkup_m≠
 = {

264 {"wkup_usb", 
WKUP_IO_PR1
, 0},

268 .
	gvﬁège_èbÀ
 = {

280 .
	gch¨gî_⁄löe
 = 
usb_is_ch¨gög
,

281 .
	gch¨gî_gpio
 = 
gë_usb_wkup_gpio
,

282 .
	gªad_powî_key
 = 
ªad_powî_key
,

283 .
	gpwr_˘l
 = 
PWR_CTL
,

284 
	$POWER_PLATFORM_DATA_END
()

288 
	`REGISTER_DEVICES
(
devi˚_èbÀ
) = {

290 { "iic0", &
iic_dev_›s
, (*Ë&
hw_iic0_d©a
 },

292 { "audio", &
audio_dev_›s
, (*Ë&
audio_d©a
 },

294 #ifde‡
CONFIG_SD2_ENABLE


295 { "sd2", &
sd_dev_›s
, (*Ë&
sd2_d©a
 },

298 #ifde‡
CONFIG_ADKEY_ENABLE


299 { "adkey", &
key_dev_›s
, (*Ë&
adkey_d©a
 },

301 { "u¨t_key", &
key_dev_›s
, 
NULL
 },

303 #i‚de‡
CONFIG_SFC_ENABLE


304 { "•i0", &
•i_dev_›s
, (*)&
•i0_d©a
 },

305 { "•iÊash", &
•iÊash_dev_›s
, (*)&
•iÊash_d©a
 },

307 { "•iÊash", &
sfcÊash_dev_›s
, (*)&
•iÊash_d©a
 },

310 #ifde‡
CONFIG_WIFI_ENABLE


311 { "wifi", &
wifi_dev_›s
, (*Ë&
wifi_d©a
},

313 {"πc", &
πc_dev_›s
, 
NULL
},

314 {"vm", &
vm_dev_›s
, 
NULL
},

316 
	}
};

319 #ifde‡
CONFIG_DEBUG_ENABLE


320 
	$debug_u¨t_öô
()

322 
	`avdd18_¸é
(
AVDD18_18063
, 0);

323 
	`u¨t_öô
(&
u¨t2_d©a
);

324 
	}
}

327 
	$bﬂrd_óæy_öô
()

329 
	`lvd_cfg
(0);

330 
	`sys_powî_low_vﬁège_shutdown
(370, 0);

331 
	}
}

333 
	$bﬂrd_öô
()

335 
	`gpio_dúe˘i⁄_öput
(
IO_PORTF_01
);

338 
SDTAP_CON
 = 0;

342 
	`πc_pö_ª£t_˘æ
(0);

344 
	`avdd28_˘æ
(
AVDD28_2803
, 0);

346 
	`devi˚s_öô
();

348 
	}
}

	@cpu/AC521x/board/board_GR202_2M.c

7 
	~"≠p_c⁄fig.h
"

9 #ifde‡
CONFIG_BOARD_GR202_2M


11 
	~"sy°em/ö˛udes.h
"

12 
	~"devi˚/av10_•i.h
"

13 
	~"asm/ldo.h
"

14 
	~"vm_≠i.h
"

15 
	~"devi˚/wifi_dev.h
"

19 
UART2_PLATFORM_DATA_BEGIN
(
u¨t2_d©a
)

20 .
	gbaudøã
 = 460800,

21 .
	gtx_pö
 = 
IO_PORTG_10
,

22 .
	gÊags
 = 
UART_DEBUG
,

23 
UART2_PLATFORM_DATA_END
();

25 #ifde‡
CONFIG_SD2_ENABLE


27 
	$sd2_io_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *
d©a
)

30 
	}
}

32 
SD2_PLATFORM_DATA_BEGIN
(
sd2_d©a
)

33 .
	gp‹t
 = 'A',

34 .
	g¥i‹ôy
 = 3,

35 .
	gd©a_width
 = 1,

36 .
	g•ìd
 = 30000000,

38 .
	gdëe˘_mode
 = 
SD_CLK_DECT
,

39 .
	gdëe˘_func
 = 
sdmmc_2_˛k_dëe˘
,

42 
	$SD2_PLATFORM_DATA_END
()

46 
	`HW_IIC0_PLATFORM_DATA_BEGIN
(
hw_iic0_d©a
)

47 .
˛k_pö
 = 
IO_PORTA_06
,

48 .
d©_pö
 = 
IO_PORTA_08
,

49 .
baudøã
 = 0x3f,

50 
	$HW_IIC0_PLATFORM_DATA_END
()

53 
	`SW_IIC_PLATFORM_DATA_BEGIN
(
sw_iic_d©a
)

54 .
˛k_pö
 = 
IO_PORTD_01
,

55 .
d©_pö
 = 
IO_PORTD_02
,

56 .
sw_iic_dñay
 = 50,

57 
	$SW_IIC_PLATFORM_DATA_END
()

60 
	`USB_PLATFORM_DATA_BEGIN
(
usb_d©a
)

61 .
id
 = 0,

62 .
⁄löe_check_˙t
 = 3,

63 .
ofÊöe_check_˙t
 = 20,

64 .
i§_¥i‹ôy
 = 6,

65 .
ho°_Ÿ
 = 20,

66 .
ho°_•ìd
 = 1,

67 .
¶ave_Ÿ
 = 10,

68 .
˘l_úq_öt
 = 
HUSB_CTL_INT
,

69 
	$USB_PLATFORM_DATA_END
()

74 #ifde‡
CONFIG_ADKEY_ENABLE


76 
ADC_PORTA_0
 = 0,

77 
ADC_PORTA_5
 = 1,

78 
ADC_PORTG_6
 = 2,

79 
ADC_PORTG_7
 = 3,

80 
ADC_PORTH_0
 = 4,

81 
ADC_PORTH_1
 = 5,

82 
ADC_PORTH_5
 = 6,

83 
ADC_PORTH_7
 = 7,

84 
ADC_PORTH_9
 = 8,

85 
ADC_PORTH_10
 = 9,

86 
ADC_PORTH_12
 = 10,

87 
ADC_PORTH_13
 = 11,

88 
ADC_PORTD_0
 = 12,

89 
ADC_ANALOG_TEST
 = 13,

90 
ADC_RTC
 = 14,

91 
ADC_LDO_VBG
 = 15,

96 
	#ADKEY_UPLOAD_R
 22

	)

98 
	#ADC0_0A
 (0x3FF)

	)

99 
	#ADC0_09
 (0x3FF)

	)

100 
	#ADC0_08
 (0x3FF)

	)

101 
	#ADC0_07
 (0x3FF)

	)

102 
	#ADC0_06
 (0x3FF)

	)

103 
	#ADC0_05
 (0x3FF * 33 / (33 + 
ADKEY_UPLOAD_R
))

	)

104 
	#ADC0_04
 (0x3FF * 24 / (24 + 
ADKEY_UPLOAD_R
))

	)

105 
	#ADC0_03
 (0x3FF * 15 / (15 + 
ADKEY_UPLOAD_R
))

	)

106 
	#ADC0_02
 (0x3FF * 10 / (10 + 
ADKEY_UPLOAD_R
))

	)

107 
	#ADC0_01
 (0x3FF * 3 / (3 + 
ADKEY_UPLOAD_R
))

	)

108 
	#ADC0_00
 (0)

	)

110 
	#ADKEY_V_0
 ((
ADC0_09
 + 
ADC0_0A
)/2)

	)

111 
	#ADKEY_V_1
 ((
ADC0_08
 + 
ADC0_09
)/2)

	)

112 
	#ADKEY_V_2
 ((
ADC0_07
 + 
ADC0_08
)/2)

	)

113 
	#ADKEY_V_3
 ((
ADC0_06
 + 
ADC0_07
)/2)

	)

114 
	#ADKEY_V_4
 ((
ADC0_05
 + 
ADC0_06
)/2)

	)

115 
	#ADKEY_V_5
 ((
ADC0_04
 + 
ADC0_05
)/2)

	)

116 
	#ADKEY_V_6
 ((
ADC0_03
 + 
ADC0_04
)/2)

	)

117 
	#ADKEY_V_7
 ((
ADC0_02
 + 
ADC0_03
)/2)

	)

118 
	#ADKEY_V_8
 ((
ADC0_01
 + 
ADC0_02
)/2)

	)

119 
	#ADKEY_V_9
 ((
ADC0_00
 + 
ADC0_01
)/2)

	)

120 
	#ADKEY_V_10
 (
ADC0_00
)

	)

123 
	`ADKEY_PLATFORM_DATA_BEGIN
(
adkey_d©a
)

124 .
io
 = 
IO_PORTG_06
,

125 .
ad_ch™√l
 = 2,

126 .
èbÀ
 = {

127 .
ad_vÆue
 = {

128 
ADKEY_V_0
,

129 
ADKEY_V_1
,

130 
ADKEY_V_2
,

131 
ADKEY_V_3
,

132 
ADKEY_V_4
,

133 
ADKEY_V_5
,

134 
ADKEY_V_6
,

135 
ADKEY_V_7
,

136 
ADKEY_V_8
,

137 
ADKEY_V_9
,

138 
ADKEY_V_10
,

140 .
key_vÆue
 = {

141 
NO_KEY
,

142 
NO_KEY
,

143 
NO_KEY
,

144 
NO_KEY
,

145 
NO_KEY
,

146 
KEY_DOWN
,

147 
KEY_UP
,

148 
KEY_MODE
,

149 
KEY_F1
,

150 
KEY_ENC
,

151 
KEY_OK
,

153 
	}
},

154 
	$ADKEY_PLATFORM_DATA_END
()

156 
	$key_evít_ªm≠
(
sys_evít
 *
e
)

158  
åue
;

159 
	}
}

165 
	$ªad_powî_key
()

168 
	}
}

173 
SPI0_PLATFORM_DATA_BEGIN
(
•i0_d©a
)

175 .
	g˛k
 = 20000000,

176 .
	gmode
 = 
SPI_ODD_MODE
,

177 .
	gp‹t
 = 'A',

178 
	$SPI0_PLATFORM_DATA_END
()

180 c⁄° 
•iÊash_∂©f‹m_d©a
 
•iÊash_d©a
 = {

181 .
«me
 = "spi0",

182 .
mode
 = 
FAST_READ_OUTPUT_MODE
,

183 .
sfc_run_mode
 = 
SFC_FAST_READ_DUAL_OUTPUT_MODE
,

184 
	}
};

190 c⁄° 
dac_∂©f‹m_d©a
 
	gdac_d©a
 = {

191 .
ldo_id
 = 1,

192 .
	g∑_muã_p‹t
 = 
IO_PORT_PR_02
,

193 .
	g∑_muã_vÆue
 = 1,

194 .
	gdif„r_ouçut
 = 1,

197 c⁄° 
adc_∂©f‹m_d©a
 
	gadc_d©a
 = {

198 .
mic_ch™√l
 = 
LADC_CH_MIC_R
,

199 .
	glöeö_ch™√l
 = 
LADC_LINE0_MASK
,

200 .
	gldo_£l
 = 1,

203 c⁄° 
audio_pf_d©a
 
	gaudio_pf_d
 = {

204 .
adc_pf_d©a
 = &
adc_d©a
,

205 .
	gdac_pf_d©a
 = &
dac_d©a
,

207 c⁄° 
audio_∂©f‹m_d©a
 
	gaudio_d©a
 = {

208 .
¥iv©e_d©a
 = (*Ë&
audio_pf_d
,

211 
USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa0_d©a
)

212 .
	g›í_log
 = 1,

213 
	$USB_CAMERA_PLATFORM_DATA_END
()

215 
	`USB_CAMERA_PLATFORM_DATA_BEGIN
(
usb_ˇmîa1_d©a
)

216 .
›í_log
 = 1,

217 
	$USB_CAMERA_PLATFORM_DATA_END
()

220 #ifde‡
CONFIG_WIFI_ENABLE


221 
	`WIFI_PLATFORM_DATA_BEGIN
(
wifi_d©a
)

222 .
moduÀ
 = 
RTL8189E
,

223 .
sdio_∑rm
 = 
SDIO_GRP_1
 | 
SDIO_PORT_2
 | 
SDIO_4_BIT_DATA
 | 
SDIO_CLOCK_26M
,

224 .
wakeup_p‹t
 = -1,

225 .
cs_p‹t
 = -1,

226 .
powî_p‹t
 = -1,

227 
	$WIFI_PLATFORM_DATA_END
()

230 
	$av_∑rkög_dë_öô
()

232 
	}
}

234 
	$av_∑rkög_dë_°©us
()

237 
	}
}

238 
	$PWR_CTL
(
⁄_off
)

241 
	}
}

243 
	#USB_WKUP_IO
 
IO_PORT_PR_01


	)

245 
	$usb_is_ch¨gög
()

248 
öô
 = 0;

249 i‡(!
öô
) {

250 
öô
 = 1;

251 
	`gpio_dúe˘i⁄_öput
(
USB_WKUP_IO
);

252 
	`gpio_£t_puŒ_up
(
USB_WKUP_IO
, 0);

253 
	`gpio_£t_puŒ_down
(
USB_WKUP_IO
, 0);

254 
	`gpio_£t_dõ
(
USB_WKUP_IO
, 1);

255 
	`dñay
(10);

258  (
	`gpio_ªad
(
USB_WKUP_IO
));

262 
	}
}

264 
	$gë_usb_wkup_gpio
()

266  (
USB_WKUP_IO
);

267 
	}
}

269 
POWER_PLATFORM_DATA_BEGIN
(
sys_powî_d©a
)

270 .
	gwkup_m≠
 = {

271 {"wkup_usb", 
WKUP_IO_PR1
, 0},

272 {"wkup_g£n", 
WKUP_IO_PR2
, 0},

275 .
	gmö_b©_powî_vÆ
 = 350,

276 .
	gmax_b©_powî_vÆ
 = 420,

277 .
	gch¨gî_⁄löe
 = 
usb_is_ch¨gög
,

278 .
	gch¨gî_gpio
 = 
gë_usb_wkup_gpio
,

279 .
	gªad_powî_key
 = 
ªad_powî_key
,

280 .
	gpwr_˘l
 = 
PWR_CTL
,

281 
	$POWER_PLATFORM_DATA_END
()

285 
	`REGISTER_DEVICES
(
devi˚_èbÀ
) = {

287 { "iic0", &
iic_dev_›s
, (*Ë&
hw_iic0_d©a
 },

289 { "audio", &
audio_dev_›s
, (*Ë&
audio_d©a
 },

291 #ifde‡
CONFIG_SD2_ENABLE


292 { "sd2", &
sd_dev_›s
, (*Ë&
sd2_d©a
 },

295 #ifde‡
CONFIG_ADKEY_ENABLE


296 { "adkey", &
key_dev_›s
, (*Ë&
adkey_d©a
 },

298 { "u¨t_key", &
key_dev_›s
, 
NULL
 },

300 #i‚de‡
CONFIG_SFC_ENABLE


301 { "•i0", &
•i_dev_›s
, (*)&
•i0_d©a
 },

302 { "•iÊash", &
•iÊash_dev_›s
, (*)&
•iÊash_d©a
 },

304 { "•iÊash", &
sfcÊash_dev_›s
, (*)&
•iÊash_d©a
 },

307 #ifde‡
CONFIG_WIFI_ENABLE


308 { "wifi", &
wifi_dev_›s
, (*Ë&
wifi_d©a
},

310 {"πc", &
πc_dev_›s
, 
NULL
},

311 {"vm", &
vm_dev_›s
, 
NULL
},

313 
	}
};

316 #ifde‡
CONFIG_DEBUG_ENABLE


317 
	$debug_u¨t_öô
()

319 
	`avdd18_¸é
(
AVDD18_18063
, 0);

321 
	`u¨t_öô
(&
u¨t2_d©a
);

323 
IOMC1
 &= ~(0x0f << 8);

324 
IOMC1
 |= (0x2 << 8);

325 
	`gpio_dúe˘i⁄_ouçut
(
u¨t2_d©a
.
tx_pö
, 0);

326 
	`gpio_£t_puŒ_up
(
u¨t2_d©a
.
tx_pö
, 1);

327 
	`gpio_£t_puŒ_down
(
u¨t2_d©a
.
tx_pö
, 1);

328 
	`gpio_£t_dõ
(
u¨t2_d©a
.
tx_pö
, 0);

330 
	}
}

333 
	$bﬂrd_óæy_öô
()

335 
	`lvd_cfg
(0);

336 
	`sys_powî_low_vﬁège_shutdown
(370, 0);

337 
	}
}

339 
	$bﬂrd_öô
()

341 
	`gpio_dúe˘i⁄_öput
(
IO_PORTF_01
);

344 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTA_02
, 1);

345 
	`gpio_dúe˘i⁄_ouçut
(
IO_PORTA_03
, 1);

348 
SDTAP_CON
 = 0;

354 
	`avdd28_˘æ
(
AVDD28_2803
, 0);

356 
	`devi˚s_öô
();

358 
	}
}

	@cpu/AC521x/debug.c

8 
	~"asm/˝u.h
"

9 
	~"asm/debug.h
"

10 
	~"os/os_˝u.h
"

11 
	#DEBUG_WR_SFR_EN
 do{
DEBUG_WR_EN
 = 0xe7;}0);

	)

12 
u32
 
	gdebug_ödex
;

16 
	$debug_íãr_¸ôiˇl
()

18 i‡(
DEBUG_WR_EN
 & 
	`BIT
(0)) {

21 
DEBUG_WR_EN
 = 1;

22 
	}
}

24 
	$debug_exô_¸ôiˇl
()

26 i‡(
DEBUG_WR_EN
 & 
	`BIT
(0)) {

27 
DEBUG_WR_EN
 = 0;

30 
	}
}

42 
ölöe
 
u32
 
	$gë_debug_ödex
()

44 
u32
 
i
 = 0; i < 8 ; i++) {

45 i‡(!(
debug_ödex
 & 
	`BIT
(
i
))) {

46  
i
;

52 
	}
}

61 
	$pc0_øng_limô
(*
low_addr
, *
high_addr
)

63 
	`¥ötf
("pc0 :%x---%x\n", (
u32
)
low_addr
, (u32)
high_addr
);

65 
DEBUG_MSG_CLR
 = 0xffffffff;

66 
DSP_PC_LIMH
 = (
u32
)
high_addr
;

67 
DSP_PC_LIML
 = (
u32
)
low_addr
;

68 
	}
}

77 
	$pc1_øng_limô
(*
low_addr
, *
high_addr
)

79 
	`¥ötf
("pc1 :%x---%x\n", (
u32
)
low_addr
, (u32)
high_addr
);

84 
	}
}

94 
	$pc_øng_limô
(*
low_addr
, *
high_addr
)

97 
	`debug_íãr_¸ôiˇl
();

99 i‡(
OS_CPU_ID
 == 0) {

100 
	`pc0_øng_limô
(
low_addr
, 
high_addr
);

102 
	`pc1_øng_limô
(
low_addr
, 
high_addr
);

105 
	`debug_exô_¸ôiˇl
();

108 
	}
}

112 
	s_wr_limô
 {

113 vﬁ©ûê
u32
 
	mwr_limô_h
;

114 vﬁ©ûê
u32
 
	mwr_limô_l
;

117 
	#wr_limô
 ((
_wr_limô
 *)&
WR_LIM0H
)

	)

138 
u32
 
	$dev_wrôe_ønge_limô
(
u32
 
limô_ödex
, *
low_addr
, *
high_addr
, u32 
is_Ælow_wrôe
, u32 
dev
)

140 i‡(
limô_ödex
 == -1) {

141 
limô_ödex
 = 
	`gë_debug_ödex
();

142 } i‡(
debug_ödex
 & 
	`BIT
(
limô_ödex
)) {

143  
debug_ödex
;

146 
	`debug_íãr_¸ôiˇl
();

148 
debug_ödex
 |
	`BIT
(
limô_ödex
);

155 
DEBUG_MSG_CLR
 = 0xffffffff;

156 
wr_limô
[
limô_ödex
].
wr_limô_h
 = (
u32
)
high_addr
;

157 
wr_limô
[
limô_ödex
].
wr_limô_l
 = (
u32
)
low_addr
;

159 i‡(
is_Ælow_wrôe
) {

160 i‡(
limô_ödex
 > 3) {

161 
PRP_ALLOW_NUM1
 |
dev
 << ((
limô_ödex
 - 4) * 8);

163 
PRP_ALLOW_NUM0
 |
dev
 << (
limô_ödex
 * 8);

166 
DSPCON
 |((1 << 
limô_ödex
) << 24) | ((1 <<Üimit_index) << 8);

168 i‡(
limô_ödex
 > 3) {

169 
PRP_ALLOW_NUM1
 &~(0xf‡<< ((
limô_ödex
 - 4) * 8));

171 
PRP_ALLOW_NUM0
 &~(0xf‡<< (
limô_ödex
 * 8));

174 
DSPCON
 &~((1 << 
limô_ödex
) << 8);

175 
DSPCON
 |(1 << 
limô_ödex
) << 24;

178 
	`debug_exô_¸ôiˇl
();

181 
	`¥ötf
("WR_LIM%dL:%x--WR_LIM%dH:%x--DSPCON:%x--PRP_ALLOW_NUM0:%x--%x\n",

182 
limô_ödex
,

183 
wr_limô
[
limô_ödex
].
wr_limô_l
,

184 
limô_ödex
,

185 
wr_limô
[
limô_ödex
].
wr_limô_h
,

186 
DSPCON
,

187 
PRP_ALLOW_NUM0
, 
PRP_ALLOW_NUM1
);

190 
	}
}

202 
u32
 
	$˝u0_wrôe_ønge_limô
(
u32
 
limô_ödex
, *
low_addr
, *
high_addr
)

204 i‡(
limô_ödex
 == -1) {

205 
limô_ödex
 = 
	`gë_debug_ödex
();

206 } i‡(
debug_ödex
 & 
	`BIT
(
limô_ödex
)) {

207  
debug_ödex
;

210 
debug_ödex
 |
	`BIT
(
limô_ödex
);

214 
DEBUG_MSG_CLR
 = 0xffffffff;

216 
wr_limô
[
limô_ödex
].
wr_limô_h
 = (
u32
)
high_addr
;

217 
wr_limô
[
limô_ödex
].
wr_limô_l
 = (
u32
)
low_addr
;

218 
DSPCON
 |(1 << (16 + 
limô_ödex
));

220 
	`¥ötf
("WR_LIM%dL:%x--WR_LIM%dH:%x---DSPCON:%x\n",

221 
limô_ödex
,

222 
wr_limô
[
limô_ödex
].
wr_limô_l
,

223 
limô_ödex
,

224 
wr_limô
[
limô_ödex
].
wr_limô_h
,

225 
DSPCON
);

228 
	}
}

240 
u32
 
	$˝u1_wrôe_ønge_limô
(
u32
 
limô_ödex
, *
low_addr
, *
high_addr
)

242 i‡(
limô_ödex
 == -1) {

243 
limô_ödex
 = 
	`gë_debug_ödex
();

244 } i‡(
debug_ödex
 & 
	`BIT
(
limô_ödex
)) {

245  
debug_ödex
;

247 
debug_ödex
 |
	`BIT
(
limô_ödex
);

251 
DEBUG_MSG_CLR
 = 0xffffffff;

253 
wr_limô
[
limô_ödex
].
wr_limô_h
 = (
u32
)
high_addr
;

254 
wr_limô
[
limô_ödex
].
wr_limô_l
 = (
u32
)
low_addr
;

255 
DSPCON
 |(1 << 
limô_ödex
);

257 
	`¥ötf
("WR_LIM%dL:%x--WR_LIM%dH:%x---DSPCON:%x\n",

258 
limô_ödex
,

259 
wr_limô1
[
limô_ödex
].
wr_limô_l
,

260 
limô_ödex
,

261 
wr_limô1
[
limô_ödex
].
wr_limô_h
,

262 
DSPCON
);

265 
	}
}

277 
u32
 
	$˝u_wrôe_ønge_limô
(*
low_addr
, 
u32
 
wö_size
)

279 
u32
 
i
 = 
	`gë_debug_ödex
();

280 *
high_addr
 = 
low_addr
 + 
wö_size
;

282 
	`debug_íãr_¸ôiˇl
();

284 i‡(
i
 != -1) {

285 
	`˝u0_wrôe_ønge_limô
(
i
, 
low_addr
, 
high_addr
);

286 
i
 = 
	`gë_debug_ödex
();

288 i‡(
i
 != -1) {

289 
	`˝u1_wrôe_ønge_limô
(
i
, 
low_addr
, 
high_addr
);

291 
	`debug_exô_¸ôiˇl
();

295 
	`debug_exô_¸ôiˇl
();

299 
	`debug_exô_¸ôiˇl
();

302 
	}
}

304 
u32
 
	$sdr_wrôe_ønge_limô
(*
low_addr
, 
u32
 
wö_size
, u32 
is_Ælow_wrôe
, u32 
dev
)

306 *
high_addr
 = (*)((
u32
)
low_addr
 + 
wö_size
);

308 
u32
 
i
 = 
	`gë_debug_ödex
();

309 i‡(
i
 == -1) {

314 
	`debug_íãr_¸ôiˇl
();

316 
debug_ödex
 |
	`BIT
(
i
);

317 
	`¥ötf
("sdr %x write %sÜow_addr:%x--high_addr:%x\n",

318 
dev
,

319 
is_Ælow_wrôe
 ? ("allow") : ("limit"),

320 (
u32
)
low_addr
,

321 (
u32
)
high_addr
);

323 i‡(
is_Ælow_wrôe
) {

324 i‡(
i
 > 3) {

325 
PRP_ALLOW_NUM1
 |
dev
 << ((
i
 - 4) * 8);

327 
PRP_ALLOW_NUM0
 |
dev
 << (
i
 * 8);

330 
DSPCON
 |((1 << 
i
) << 24) | ((1 << i) << 8);

332 i‡(
i
 > 3) {

333 
PRP_ALLOW_NUM1
 &~(0xf‡<< ((
i
 - 4) * 8));

335 
PRP_ALLOW_NUM0
 &~(0xf‡<< (
i
 * 8));

337 
DSPCON
 &~((1 << 
i
) << 8);

341 
DEBUG_MSG_CLR
 = 0xffffffff;

343 
wr_limô
[
i
].
wr_limô_h
 = (
u32
)
high_addr
;

344 
wr_limô
[
i
].
wr_limô_l
 = (
u32
)
low_addr
;

346 
SDRDBG
 = (1 << (8 + 
i
)Ë| 
	`BIT
(30);

347 
SDRDBG
 = (1 << (8 + 
i
)Ë| 
	`BIT
(30);

348 
SDRDBG
 = (1 << (8 + 
i
)Ë| 
	`BIT
(30);

349 
SDRDBG
 = (1 << (8 + 
i
)Ë| 
	`BIT
(30);

351 
	`debug_exô_¸ôiˇl
();

354 
	}
}

357 
	$debug_˛ór
()

360 
	`debug_íãr_¸ôiˇl
();

362 
SDRDBG
 = 0;

363 
DSPCON
 = 0;

364 
PRP_ALLOW_NUM0
 = 0;

365 
PRP_ALLOW_NUM1
 = 0;

367 
DEBUG_MSG_CLR
 = 0xffffffff;

369 
debug_ödex
 = 0;

371 
	`debug_exô_¸ôiˇl
();

373 
	}
}

382 
	$debug_öô
()

386 
	`debug_íãr_¸ôiˇl
();

389 i‡(
OS_CPU_ID
 == 0) {

390 
DSPCON
 |= (0xf << 9);

391 
debug_ödex
 = 0;

392 
DEBUG_MSG_CLR
 = 0xffffffff;

393 
	`debug_˛ór
();

399 
	`debug_exô_¸ôiˇl
();

401 
	`¥ötf
("%s()debug_ödex=%d\n", 
__func__
, 
debug_ödex
);

407 
	`pc_øng_limô
(&
ãxt_rod©a_begö
, &
ãxt_rod©a_íd
);

408 
	}
}

	@cpu/AC521x/iokey.c

1 
	~"key_drivî.h
"

2 
	~"iokey.h
"

3 
	~"gpio.h
"

4 
	~"sy°em/evít.h
"

8 c⁄° 
iokey_∂©f‹m_d©a
 *
	g__this
 = 
NULL
;

11 
u16
 
	$io_gë_key_vÆue
(
key_drivî
 *
_key
)

13 
i
;

15 
i
 = 0; i < 
__this
->
num
; i++) {

16 i‡(
	`gpio_ªad
(
__this
->
p‹t
[
i
].p‹tË=__this->p‹t[i].
¥ess_vÆue
) {

17  
__this
->
p‹t
[
i
].
key_vÆue
;

21  
NO_KEY
;

22 
	}
}

24 
	$iokey_öô
(
key_drivî
 *
_key
, *
¨g
)

26 
i
;

28 
__this
 = (
iokey_∂©f‹m_d©a
 *)
¨g
;

29 i‡(
__this
 =
NULL
) {

30  -
EINVAL
;

33 
i
 = 0; i < 
__this
->
num
; i++) {

34 
v
 = 
__this
->
p‹t
[
i
].
¥ess_vÆue
;

35 
	`gpio_dúe˘i⁄_öput
(
__this
->
p‹t
[
i
].port);

36 
	`gpio_£t_puŒ_up
(
__this
->
p‹t
[
i
].p‹t, !
v
);

38 
	`gpio_£t_puŒ_down
(
__this
->
p‹t
[
i
].p‹t, 
v
);

42 
	}
}

44 c⁄° 
key_drivî_›s
 
	gio_key_›s
 = {

45 .
öô
 = 
iokey_öô
,

46 .
	ggë_vÆue
 = 
io_gë_key_vÆue
,

49 
REGISTER_KEY_DRIVER
(
iokey
) = {

50 .
«me
 = "iokey",

51 .
	g¥ev_vÆue
 = 0,

52 .
	gœ°_key
 = 
NO_KEY
,

53 .
	gfûãr_˙t
 = 2,

54 .
	gba£_˙t
 = 2,

55 .
	gl⁄g_˙t
 = 75,

56 .
	ghﬁd_˙t
 = (75 + 15),

57 .
	gsˇn_time
 = 10,

58 .
	g›s
 = &
io_key_›s
,

	@cpu/AC521x/ldo.c

1 
	~"asm/ö˛udes.h
"

2 
	~"asm/sysöfo.h
"

3 
	~"asm/ldo.h
"

7 
	$avdd18_¸é
(
AVDD18_LEV
 
Àv
, 
u8
 
avdd18í
)

9 
avdd18í
 = (avdd18en ? 1 : 0);

10 i‡(
Àv
 > 7) {

11 
Àv
 = 7;

13 
	`SFR
(
LDO_CON
, 9, 1, 
avdd18í
);

14 
	`SFR
(
LDO_CON
, 3, 3, 
Àv
);

15 
	}
}

17 
	$avdd28_˘æ
(
AVDD28_LEV
 
Àv
, 
u8
 
avdd28í
)

19 
avdd28í
 = (avdd28en ? 1 : 0);

20 i‡(
Àv
 > 7) {

21 
Àv
 = 7;

23 
	`SFR
(
LDO_CON
, 10, 1, 
avdd28í
);

24 
	`SFR
(
LDO_CON
, 6, 3, 
Àv
);

25 
	}
}

27 
	$dvdd_˘æ
(
DVDD_LEV
 
Àv
)

29 i‡(
Àv
 > 7) {

30 
Àv
 = 7;

32 
	`SFR
(
LDO_CON
, 0, 3, 
Àv
);

33 
	}
}

45 
	$lvd_cfg
(
u8
 
Àv
)

48 
LVD_CON
 = 0;

50 
LVD_CON
 |(0x7 & (
Àv
));

51 
LVD_CON
 &~
	`BIT
(7);

52 
	`dñay
(10);

53 
LVD_CON
 &~
	`BIT
(6);

54 
	`dñay
(10);

55 
LVD_CON
 &~
	`BIT
(5);

56 
	`dñay
(10);

57 
LVD_CON
 |
	`BIT
(4);

58 
	`dñay
(100);

59 
LVD_CON
 |
	`BIT
(3);

60 
	`dñay
(10);

62 
	}
}

	@cpu/AC521x/power_inf.c

1 
	~"devi˚/devi˚.h
"

2 
	~"devi˚/key_drivî.h
"

3 
	~"timî.h
"

4 
	~"d©aba£.h
"

5 
	~"evít.h
"

6 
	~"asm/adc.h
"

7 
	~"asm/πc.h
"

8 
	~"os/os_≠i.h
"

9 
	~"powî_m™age.h
"

10 
	~"asm/powî_öf.h
"

11 
	~"sy°em/•ölock.h
"

12 
	~"gíîic/ascii.h
"

13 
	~"asm/gpio.h
"

15 
DEFINE_SPINLOCK
(
lock
);

17 
powî_∂©f‹m_d©a
 
sys_powî_d©a
;

18 
powî_∂©f‹m_d©a
 *
	g__this
 = 
NULL
;

20 
πc_vdd50_íabÀ
();

23 
	$sy°em_ª£t_ªas⁄_check
()

25 vﬁ©ûê
u32
 
ª£t_Êag
;

26 
ª£t_Êag
 = (
PWR_CON
 & 0xe0) >> 5;

28 
ª£t_Êag
) {

30 
	`log_v
("=====power onÑeset=====\n");

33 
	`log_v
("=====VCMÑeset======\n");

36 
	`log_v
("=====PR2 4sÑeset=====\n");

39 
	`log_v
("=====LVDÜowerÖowerÑeset=====\n");

42 
	`log_v
("=====WDTÑeset=====\n");

45 
	`log_v
("=====sofwareÑeset=====\n");

48 
	`log_v
("=====otherÑeason======\n");

51  
ª£t_Êag
;

52 
	}
}

54 
	$sys_powîoff
(*
¨g
)

56 
__this
->
	`ªad_powî_key
());

57 
	`πc_powîoff
();

58 
	}
}

60 
	$p‹t_wakeup_£t_c⁄fig
(c⁄° *
p‹t
, 
íabÀ
)

62 
wkup_io_m≠
 *
p
;

63 
˙t
 = 0;

64 
πc_wkup_cfg
 
πc_cfg
 = {0};

66 i‡(!
p‹t
) {

67 
	`log_e
("%s(Ëp‹àövÆid\n", 
__FUNCTION__
);

68  -
EINVAL
;

70 
p
 = 
__this
->
wkup_m≠
;Ö->
wkup_p‹t
 != 0;Ö++) {

71 i‡(!
	`°rcmp
(
p‹t
, 
p
->
wkup_p‹t
)) {

72 
p
->
p‹å
) {

73 
WKUP_IO_PR1
:

74 
πc_cfg
.
¥1
.
edge
 = 
p
->edge;

75 
πc_cfg
.
¥1
.
p‹t_í
 = 
íabÀ
;

77 
WKUP_IO_PR2
:

78 
πc_cfg
.
¥2
.
edge
 = 
p
->edge;

79 
πc_cfg
.
¥2
.
p‹t_í
 = 
íabÀ
;

81 
WKUP_IO_PR3
:

82 
πc_cfg
.
¥3
.
edge
 = 
p
->edge;

83 
πc_cfg
.
¥3
.
p‹t_í
 = 
íabÀ
;

89 i‡(
p
->
wkup_p‹t
 == 0) {

90 
	`log_e
("%s(Ëp‹ànŸ found\n", 
__FUNCTION__
);

91  -
EINVAL
;

93 
˙t
 = 
πc_cfg
.
¥1
.
p‹t_í
 +Ñtc_cfg.
¥2
.p‹t_í +Ñtc_cfg.
¥3
.port_en;

94 
πc_cfg
.
wkup_í
 = 
˙t
 ? 1 : 0;

95 
	`πc_wkup_˘æ
(&
πc_cfg
);

96 
	`πc_vdd50_íabÀ
();

98 
	}
}

100 
	$usb_wakeup_íabÀ
()

102 
πc_wkup_cfg
 
πc_cfg
 = {0};

103 
wkup_io_m≠
 *
p
;

104 c⁄° *
ch
;

105 
˙t
 = 0;

107 
p
 = 
__this
->
wkup_m≠
;Ö->
wkup_p‹t
 !0 && !
˙t
;Ö++) {

108 
ch
 = 
p
->
wkup_p‹t
;

109 *
ch
 && !
˙t
) {

110 i‡(*
ch
 == 'u' || *ch == 'U') {

111 i‡(!
	`ASCII_SåCmpNoCa£
(
ch
, "usb", 3)) {

112 
p
->
p‹å
) {

113 
WKUP_IO_PR1
:

114 
πc_cfg
.
¥1
.
edge
 = 
p
->edge;

115 
πc_cfg
.
¥1
.
p‹t_í
 = 1;

117 
WKUP_IO_PR2
:

118 
πc_cfg
.
¥2
.
edge
 = 
p
->edge;

119 
πc_cfg
.
¥2
.
p‹t_í
 = 1;

121 
WKUP_IO_PR3
:

122 
πc_cfg
.
¥3
.
edge
 = 
p
->edge;

123 
πc_cfg
.
¥3
.
p‹t_í
 = 1;

126 
˙t
 = 1;

129 
ch
++;

132 
˙t
 = 
πc_cfg
.
¥1
.
p‹t_í
 +Ñtc_cfg.
¥2
.p‹t_í +Ñtc_cfg.
¥3
.port_en;

133 
πc_cfg
.
wkup_í
 = 
˙t
 ? 1 : 0;

134 
	`πc_wkup_˘æ
(&
πc_cfg
);

135 
	`πc_vdd50_íabÀ
();

136 
	}
}

138 
	$Æ¨m_wakeup_£t_c⁄fig
(
u32
 
£c
, 
íabÀ
)

140 
	`Æ¨m_wkup_˘æ
(
íabÀ
, 
£c
);

141 
	`πc_vdd50_íabÀ
();

143 
	}
}

146 
	$wkup_ªas⁄_check
(*
ªas⁄
, 
max_Àn
)

148 
u32
 
tmp
;

149 
u32
 
Àn
;

150 
˙t
 = 0;

151 
wkup_io_m≠
 *
p
;

153 i‡(!
ªas⁄
 || !
max_Àn
) {

154 
	`log_e
("%s(Ë°rög buf„∏övÆid\n", 
__FUNCTION__
);

155  -
EINVAL
;

158 
	`sy°em_ª£t_ªas⁄_check
();

160 
i
 = 0; i < 5; i++) {

161 i‡(
__this
->
	`ªad_powî_key
()) {

162 
˙t
++;

165 i‡(
˙t
 >= 4) {

166 
	`log_v
("power keyÖress wake up\n");

167 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_PWR_ON
) ? strlen(PWR_WKUP_PWR_ON) : max_len - 1;

168 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_PWR_ON
, 
Àn
);

170 
tmp
 = 
	`πc_wkup_ªas⁄
();

171 
u8
 
sh‹t_key_⁄
 = 0;

172 i‡(
__this
->
	`ch¨gî_gpio
(Ë=
IO_PORT_PR_02
) {

173 i‡(!(
tmp
 & 
WKUP_IO_PR1
)) {

174 i‡(
tmp
 & 
WKUP_IO_PR2
) {

175 
sh‹t_key_⁄
 = 1;

179 i‡(!(
tmp
 & 
WKUP_IO_PR2
)) {

180 i‡(
tmp
 & 
WKUP_IO_PR1
) {

181 
sh‹t_key_⁄
 = 2;

186 i‡(
sh‹t_key_⁄
) {

187 i‡(!
__this
->
	`ch¨gî_⁄löe
()) {

188 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_SHORT_KEY
) ? strlen(PWR_WKUP_SHORT_KEY) : max_len - 1;

189 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_SHORT_KEY
, 
Àn
);

191 
	`log_v
("short key on,Öower off\n");

192 
	`πc_pö_ª£t_˘æ
(0);

193 
	`usb_wakeup_íabÀ
();

194 
	`sys_powîoff
(0);

199 i‡(
tmp
 & (
WKUP_IO_PR1
 | 
WKUP_IO_PR2
 | 
WKUP_IO_PR3
)) {

200 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_PORT
) ? strlen(PWR_WKUP_PORT) : max_len - 1;

201 
p
 = 
__this
->
wkup_m≠
;Ö->
wkup_p‹t
 != 0;Ö++) {

202 i‡(
tmp
 & 
p
->
p‹å
) {

203 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_PORT
, 
Àn
);

204 
max_Àn
 -
Àn
;

206 i‡(
max_Àn
 > 1) {

207 
ªas⁄
[
Àn
] = ':';

208 
ªas⁄
[
Àn
 + 1] = '\0';

209 
max_Àn
 -= 1;

210 
Àn
 = 
max_Àn
 > 
	`°æí
(
p
->
wkup_p‹t
) ? strlen(p->wkup_port) : max_len - 1;

211 
	`°∫˝y
(
ªas⁄
 + 
	`°æí
‘ós⁄), 
p
->
wkup_p‹t
, 
Àn
);

212 
	`log_v
("p‹å wakeup: %s\n", 
p
->
wkup_p‹t
);

217 } i‡(
tmp
 & 
WKUP_ALARM
) {

218 
	`log_v
("alarm wakeup\n");

219 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_ALARM
) ? strlen(PWR_WKUP_ALARM) : max_len - 1;

220 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_ALARM
, 
Àn
);

221 } i‡(
tmp
 & 
ABNORMAL_RESET
) {

223 
	`log_v
("abnormal wakeup\n");

224 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_ABNORMAL
) ? strlen(PWR_WKUP_ABNORMAL) : max_len - 1;

225 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_ABNORMAL
, 
Àn
);

226 } i‡(
tmp
 & 
BAT_POWER_FIRST
) {

228 
Àn
 = 
max_Àn
 > 
	`°æí
(
PWR_WKUP_PWR_ON
) ? strlen(PWR_WKUP_PWR_ON) : max_len - 1;

229 
	`°∫˝y
(
ªas⁄
, 
PWR_WKUP_PWR_ON
, 
Àn
);

232 
	`usb_wakeup_íabÀ
();

233 
__this
->
	`pwr_˘l
(1);

234  
	`°æí
(
ªas⁄
);

235 
	}
}

238 
ldoö_upd©a
();

241 
REGISTER_ADC_SCAN
(
ldoö_sˇn
)

242 .
	gch™√l
 = 
AD_CH14_V50
,

243 .
	gvÆue
 = 0,

244 .
	gupd©a
 = 
ldoö_upd©a
,

247 
	gldoö_sum
 = 0;

248 
	gldoö_˙t
 = 0;

250 
	$ldoö_upd©a
()

252 
	`•ö_lock
(&
lock
);

253 
ldoö_sum
 +
ldoö_sˇn
.
vÆue
;

254 
ldoö_˙t
++;

255 
	`•ö_u∆ock
(&
lock
);

256 
	}
}

258 
ldo_vbg_upd©a
();

260 
REGISTER_ADC_SCAN
(
ldo_vbg_sˇn
)

261 .
	gch™√l
 = 
AD_CH15_LDO_VBG
,

262 .
	gvÆue
 = 0,

263 .
	gupd©a
 = 
ldo_vbg_upd©a
,

266 
	gldo_vbg_sum
 = 0;

267 
	gldo_vbg_˙t
 = 0;

269 
	$ldo_vbg_upd©a
()

271 
	`•ö_lock
(&
lock
);

272 
ldo_vbg_sum
 +
ldo_vbg_sˇn
.
vÆue
;

273 
ldo_vbg_˙t
++;

274 
	`•ö_u∆ock
(&
lock
);

275 
	}
}

278 
adc_sˇn
 
	gldo_vbg_sˇn
;

280 
	$ldo_vbg_öô
(
key_drivî
 *
key
, *
¨g
)

282 
LDO_CON
 |
	`BIT
(11);

283 
LDO_CON
 |
	`BIT
(15);

286 
	}
}

288 
u16
 
	$ldo_vbg_gë_vÆue
(
key_drivî
 *
key
)

290  
ldo_vbg_sˇn
.
vÆue
;

291 
	}
}

293 c⁄° 
key_drivî_›s
 
	gldo_vbg_drivî_›s
 = {

294 .
öô
 = 
ldo_vbg_öô
,

295 .
	ggë_vÆue
 = 
ldo_vbg_gë_vÆue
,

298 
REGISTER_KEY_DRIVER
(
ldo_vbg_drivî
) = {

299 .
«me
 = "ad_ldo",

300 .
	g›s
 = &
ldo_vbg_drivî_›s
,

305 
	$adc_sˇn_öô
()

307 
	`ADC_EN
(1);

308 
	`ADCEN
(1);

309 
	`ADC_BAUD
(0x7);

310 
	`ADC_WTIME
(0x1);

312 
	}
}

314 
	$adc_sˇn_¥o˚ss
()

316 
	`ADCSEL
(
AD_CH15_LDO_VBG
);

317 
	`KITSTART
();

318 !
	`ADC_PND
());

319 
ldo_vbg_sˇn
.
vÆue
 = 
GPADC_RES
;

321 
	`ADCSEL
(
AD_CH14_V50
);

322 
	`KITSTART
();

323 !
	`ADC_PND
());

324 
ldoö_sˇn
.
vÆue
 = 
GPADC_RES
;

325 
	}
}

327 
	$gë_b©ãry_vﬁège
()

329 
u16
 
ö_vÆ
;

330 
u16
 
ª„r_vÆ
;

331 
u16
 
vÆ
;

333 i‡(
	`˝u_úq_dißbÀd
()) {

334 
	`adc_sˇn_¥o˚ss
();

335 
ª„r_vÆ
 = 
ldo_vbg_sˇn
.
vÆue
;

336 
ö_vÆ
 = 
ldoö_sˇn
.
vÆue
;

338 
	`•ö_lock
(&
lock
);

339 
ª„r_vÆ
 = 
ldo_vbg_sum
 / 
ldo_vbg_˙t
;

340 
ö_vÆ
 = 
ldoö_sum
 / 
ldoö_˙t
;

341 
ldo_vbg_sum
 = 0;

342 
ldo_vbg_˙t
 = 0;

343 
ldoö_sum
 = 0;

344 
ldoö_˙t
 = 0;

345 
	`•ö_u∆ock
(&
lock
);

348 #i‡
ENABLE_SAMPLE_VAL


349 c⁄° 
u8
 
vbg_vﬁt
 = 126;

350 
vÆ
 = 
ö_vÆ
 * 
vbg_vﬁt
 / 
ª„r_vÆ
 * 3;

352 
vÆ
 = (
ö_vÆ
 * 3 * 
LDO_REFERENCE_VOL
 + 0x181 * 2Ë/ 
ª„r_vÆ
;

359  
vÆ
;

360 
	}
}

375 
__©åibuã__
((
wók
)Ë
	$vﬁège_to_≥r£¡
(
vﬁège
)

377 
i
 = 0; i < 10; i++) {

378 i‡(
vﬁège
 <
__this
->
vﬁège_èbÀ
[
i
][0]) {

379  
__this
->
vﬁège_èbÀ
[
i
][1];

383 
	}
}

387 
	$ch¨gî_⁄löe
()

389  
__this
->
	`ch¨gî_⁄löe
();

390 
	}
}

392 
	$powî_óæy_öô
()

394 
__this
 = &
sys_powî_d©a
;

396 
LDO_CON
 |
	`BIT
(11);

397 
LDO_CON
 |
	`BIT
(15);

400 
	`πc_vdd50_íabÀ
();

402 
	`adc_sˇn_öô
();

403 
	}
}

406 
REGISTER_SYS_POWER_HAL_OPS
(
sys_powî
) = {

407 .
öô
 = 
powî_óæy_öô
,

408 .
	gpowîoff
 = 
sys_powîoff
,

409 .
	gwakeup_check
 = 
wkup_ªas⁄_check
,

410 .
	gp‹t_wakeup_c⁄fig
 = 
p‹t_wakeup_£t_c⁄fig
,

411 .
	gÆ¨m_wakeup_c⁄fig
 = 
Æ¨m_wakeup_£t_c⁄fig
,

412 .
	ggë_b©ãry_vﬁège
 = 
gë_b©ãry_vﬁège
,

413 .
	gch¨gî_⁄löe
 = 
ch¨gî_⁄löe
,

	@cpu/AC521x/ram.c

3 
	~"≠p_c⁄fig.h
"

6 
	gSDRAM_SIZE
 = 
__SDRAM_SIZE__
;

8 #i‡
deföed
 
__CPU_AC521x__


9 
	gFLASH_SIZE
 = 
__FLASH_SIZE__
;

10 
	g__˝u_id__
 = 52;

15 
	gMEMORY


18 
rom
(
rx
Ë: 
ORIGIN
 = 0x0000000, 
	gLENGTH
 = 
FLASH_SIZE


19 
sdøm
(
rwx
Ë: 
ORIGIN
 = 0x1000000, 
	gLENGTH
 = 
SDRAM_SIZE


20 
øm0
(
rwx
Ë: 
ORIGIN
 = 0x0f00000, 
	gLENGTH
 = 0x0f10000-0x0f00000

23 
	gSECTIONS


26 #ifde‡
CONFIG_SFC_ENABLE


27 . = 
ORIGIN
(
rom
);

29 . = 
ORIGIN
(
sdøm
);

31 .
rom_code
 
ALIGN
(4):

33 
_ãxt_rod©a_begö
 = .;

34 
PROVIDE
(
ãxt_rod©a_begö
 = .);

36 *
	g°¨tup
.
o
(.
ãxt
)

38 *
	gsfc_boŸ
.
o
(.
ãxt
*)

39 *
	gsfc_boŸ
.
o
(.
rod©a
*)

40 *
	gboŸ_maö
.
o
(.
ãxt
*)

41 *
	gboŸ_maö
.
o
(.
rod©a
*)

43 *(.
	gãxt
*)

44 *(.
	grod©a
*)

46 
	g_ãxt_rod©a_íd
 = .;

47 
PROVIDE
(
ãxt_rod©a_íd
 = .);

49 . = 
ALIGN
(4);

52 #ifde‡
CONFIG_SFC_ENABLE


53 >
	grom


54 . = 
ORIGIN
(
sdøm
);

56 > 
	gsdøm


60 .
d©a
 
ALIGN
(4):

62 *(.
•ìx_íc_lib
.
ãxt
)

63 *(.
amr_íc_lib
.
ãxt
)

64 *(.
amr_dec_lib
.
ãxt
)

65 *(.
mp3_dec_lib
.
ãxt
)

66 *(.
wma_dec_lib
.
ãxt
)

67 *(.
m4a_dec_lib
.
ãxt
)

69 . = 
ALIGN
(4);

70 *(.
	gd©a
)

71 . = 
ALIGN
(32);

73 . = 
ALIGN
(4);

74 
	gvfs_›s_begö
 = .;

75 *(.
	gvfs_›î©i⁄s
)

76 
	gvfs_›s_íd
 = .;

78 
	g_lcd_devi˚_begö
 = .;

79 
PROVIDE
(
lcd_devi˚_begö
 = .);

80 *(.
	glcd_devi˚
)

81 
	g_lcd_devi˚_íd
 = .;

82 
PROVIDE
(
lcd_devi˚_íd
 = .);

84 
	g_lcd_devi˚_drive_begö
 = .;

85 
PROVIDE
(
lcd_devi˚_drive_begö
 = .);

86 *(.
	glcd_devi˚_drive
)

87 
	g_lcd_devi˚_drive_íd
 = .;

88 
PROVIDE
(
lcd_devi˚_drive_íd
 = .);

90 
	g_g£ns‹_dev_begö
 = .;

91 
PROVIDE
(
g£ns‹_dev_begö
 = .);

92 *(.
	gg£ns‹_dev
)

93 
	g_g£ns‹_dev_íd
 = .;

94 
PROVIDE
(
g£ns‹_dev_íd
 = .);

96 
	g_touch_∑√l_dev_begö
 = .;

97 
PROVIDE
(
touch_∑√l_dev_begö
 = .);

98 *(.
	gtouch_∑√l_dev
)

99 
	g_touch_∑√l_dev_íd
 = .;

100 
PROVIDE
(
touch_∑√l_dev_íd
 = .);

102 
	g_i•_s¸_begö
 = .;

103 
PROVIDE
(
i•_s¸_begö
 = .);

104 *(.
	gi•_s¸_w‹k
)

105 
	g_i•_s¸_íd
 = .;

106 
PROVIDE
(
i•_s¸_íd
 = .);

108 
	g_powî_dev_begö
 = .;

109 
PROVIDE
(
powî_dev_begö
 = .);

110 *(.
	gpowî_dev
)

111 
	g_powî_dev_íd
 = .;

112 
PROVIDE
(
powî_dev_íd
 = .);

114 
	g_ëh_phy_devi˚_begö
 = .;

115 
PROVIDE
(
ëh_phy_devi˚_begö
 = .);

116 *(.
	gëh_phy_devi˚
)

117 
	g_ëh_phy_devi˚_íd
 = .;

118 
PROVIDE
(
ëh_phy_devi˚_íd
 = .);

120 #ifde‡
CONFIG_PWM_ENABLE


121 
	g_pwm_devi˚_begö
 = .;

122 
PROVIDE
(
pwm_devi˚_begö
 = .);

123 *(.
	gpwm_dev
)

124 
	g_pwm_devi˚_íd
 = .;

125 
PROVIDE
(
pwm_devi˚_íd
 = .);

128 
INCLUDE
 
	gö˛ude_lib
/
	gui
/ui/ui.
ld


129 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/sy°em.
	gld


131 . = 
ALIGN
(32);

132 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	g˝u
/
	gAC521x
/
	gdevi˚
.
	gld


133 . = 
ALIGN
(32);

134 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gdevi˚
/devi˚.
ld


135 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gdevi˚
/
	gdevi˚_d©a
.
	gld


136 . = 
ALIGN
(32);

137 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gsy°em_d©a
.
ld


139 
INCLUDE
 
	gö˛ude_lib
/
	g£rvî
/£rvî.
	gld


141 . = 
ALIGN
(32);

142 #ifde‡
CONFIG_NET_ENABLE


143 
INCLUDE
 
	gö˛ude_lib
/
	g√t
/
	gdevi˚
/
	gdevi˚_d©a
.
ld


144 
INCLUDE
 
	gö˛ude_lib
/
	g√t
/
	g£rvî
/
	g√t_£rvî
.
	gld


149 
	g_œyî_buf_begö
 = .;

150 
PROVIDE
(
œyî_buf_begö
 = .);

151 *(.
	gœyî_buf_t
)

152 
	g_œyî_buf_íd
 = .;

153 
PROVIDE
(
œyî_buf_íd
 = .);

156 
	g_f⁄t_öfo_begö
 = .;

157 
PROVIDE
(
f⁄t_öfo_begö
 = .);

158 *(.
	gf⁄t_öfo_t
)

159 
	g_f⁄t_öfo_íd
 = .;

160 
PROVIDE
(
f⁄t_öfo_íd
 = .);

163 
	g_s¸ìn_toﬁ_öfo_begö
 = .;

164 
PROVIDE
(
s¸ìn_toﬁ_öfo_begö
 = .);

165 *(.
	gs¸ìn_toﬁ_öfo
)

166 
	g_s¸ìn_toﬁ_öfo_íd
 = .;

167 
PROVIDE
(
s¸ìn_toﬁ_öfo_íd
 = .);

169 } > 
	gsdøm


171 .
bss
 
ALIGN
(32) :

173 *(.
°ack
)

174 
_sy°em_d©a_begö
 = .;

175 *(.
	gbss
)

176 *(
	gCOMMON
)

177 *(.
	gusb_¶ave_v¨
)

178 *(.
	gmem_hóp
)

179 *(.
	gmemp_mem‹y_x
)

181 
	g_lcd_dev_buf_addr
 = .;

182 
PROVIDE
(
lcd_dev_buf_addr
 = .);

183 *(.
	glcd_dev_buf
)

184 
	g_sy°em_d©a_íd
 = .;

186 } > 
sdøm


187 
	g_HEAP_BEGIN
 = ( . +31 )/ 32 *32 ;

188 
PROVIDE
(
HEAP_BEGIN
 = (. + 31) / 32 *32);

189 
	g_HEAP_END
 = 0x1000000 + 
SDRAM_SIZE
 - 32;

190 
PROVIDE
(
HEAP_END
 = 0x1000000 + 
SDRAM_SIZE
 - 32);

191 
	g_MALLOC_SIZE
 = 
_HEAP_END
 - 
_HEAP_BEGIN
;

192 
PROVIDE
(
MALLOC_SIZE
 = 
_HEAP_END
 - 
_HEAP_BEGIN
);

196 . =
ORIGIN
(
øm0
);

197 .
øm0_d©a
 
ALIGN
(4):

199 
_VM_CODE_START
 = . ;

200 *(.
	gvm
)

201 
	g_VM_CODE_END
 = . ;

202 *(.
	gÊushöv_iˇche
)

203 } > 
	gøm0


205 .
øm0_bss
 
ALIGN
(4):

210 *(.
sd_v¨
)

211 *(.
§am
)

212 *(.
usb0_fifo
)

213 } > 
øm0


216 
ãxt_begö
 = 
ADDR
(.
rom_code
 ) ;

217 
	gãxt_size
 = 
SIZEOF
(.
rom_code
 ) ;

218 
	gbss_begö
 = 
ADDR
(.
bss
 ) ;

219 
	gbss_size
 = 
SIZEOF
(.
bss
);

220 
	gbss_size1
 = 
_sy°em_d©a_íd
 - 
_sy°em_d©a_begö
;

222 
	gbss_begö1
 = 
_sy°em_d©a_begö
;

224 
	gd©a_begö
 = 
LOADADDR
(.
d©a
) ;

225 
	gd©a_addr
 = 
ADDR
(.
d©a
) ;

226 
	gd©a_size
 = 
SIZEOF
(.
d©a
) ;

228 
	gd©a_vma
 = 
ADDR
(.
d©a
);

229 
	gd©a_lma
 = 
ãxt_begö
 + 
SIZEOF
(.
rom_code
);

232 
	g_øm0_bss_vma
 = 
ADDR
(.
øm0_bss
);

233 
	g_øm0_bss_size
 = 
SIZEOF
(.
øm0_bss
);

234 
	g_øm0_d©a_vma
 = 
ADDR
(.
øm0_d©a
);

235 
	g_øm0_d©a_lma
 = 
ãxt_begö
 + 
SIZEOF
(.
rom_code
Ë+ SIZEOF(.
d©a
);

236 
	g_øm0_d©a_size
 = 
SIZEOF
(.
øm0_d©a
);

	@cpu/AC521x/ram.ld

5 
	gSDRAM_SIZE
 = (2 * 1024 * 1024);

8 
	gFLASH_SIZE
 = (4 * 1024 * 1024);

9 
	g__˝u_id__
 = 52;

14 
	gMEMORY


17 
rom
(
rx
Ë: 
ORIGIN
 = 0x0000000, 
	gLENGTH
 = 
FLASH_SIZE


18 
sdøm
(
rwx
Ë: 
ORIGIN
 = 0x1000000, 
	gLENGTH
 = 
SDRAM_SIZE


19 
øm0
(
rwx
Ë: 
ORIGIN
 = 0x0f00000, 
	gLENGTH
 = 0x0f10000-0x0f00000

22 
	gSECTIONS


26 . = 
ORIGIN
(
rom
);

30 .
rom_code
 
ALIGN
(4):

32 
_ãxt_rod©a_begö
 = .;

33 
PROVIDE
(
ãxt_rod©a_begö
 = .);

35 *
	g°¨tup
.
o
(.
ãxt
)

37 *
	gsfc_boŸ
.
o
(.
ãxt
*)

38 *
	gsfc_boŸ
.
o
(.
rod©a
*)

39 *
	gboŸ_maö
.
o
(.
ãxt
*)

40 *
	gboŸ_maö
.
o
(.
rod©a
*)

42 *(.
	gãxt
*)

43 *(.
	grod©a
*)

45 
	g_ãxt_rod©a_íd
 = .;

46 
PROVIDE
(
ãxt_rod©a_íd
 = .);

48 . = 
ALIGN
(4);

52 >
	grom


53 . = 
ORIGIN
(
sdøm
);

59 .
d©a
 
ALIGN
(4):

61 *(.
•ìx_íc_lib
.
ãxt
)

62 *(.
amr_íc_lib
.
ãxt
)

63 *(.
amr_dec_lib
.
ãxt
)

64 *(.
mp3_dec_lib
.
ãxt
)

65 *(.
wma_dec_lib
.
ãxt
)

66 *(.
m4a_dec_lib
.
ãxt
)

68 . = 
ALIGN
(4);

69 *(.
	gd©a
)

70 . = 
ALIGN
(32);

72 . = 
ALIGN
(4);

73 
	gvfs_›s_begö
 = .;

74 *(.
	gvfs_›î©i⁄s
)

75 
	gvfs_›s_íd
 = .;

77 
	g_lcd_devi˚_begö
 = .;

78 
PROVIDE
(
lcd_devi˚_begö
 = .);

79 *(.
	glcd_devi˚
)

80 
	g_lcd_devi˚_íd
 = .;

81 
PROVIDE
(
lcd_devi˚_íd
 = .);

83 
	g_lcd_devi˚_drive_begö
 = .;

84 
PROVIDE
(
lcd_devi˚_drive_begö
 = .);

85 *(.
	glcd_devi˚_drive
)

86 
	g_lcd_devi˚_drive_íd
 = .;

87 
PROVIDE
(
lcd_devi˚_drive_íd
 = .);

89 
	g_g£ns‹_dev_begö
 = .;

90 
PROVIDE
(
g£ns‹_dev_begö
 = .);

91 *(.
	gg£ns‹_dev
)

92 
	g_g£ns‹_dev_íd
 = .;

93 
PROVIDE
(
g£ns‹_dev_íd
 = .);

95 
	g_touch_∑√l_dev_begö
 = .;

96 
PROVIDE
(
touch_∑√l_dev_begö
 = .);

97 *(.
	gtouch_∑√l_dev
)

98 
	g_touch_∑√l_dev_íd
 = .;

99 
PROVIDE
(
touch_∑√l_dev_íd
 = .);

101 
	g_i•_s¸_begö
 = .;

102 
PROVIDE
(
i•_s¸_begö
 = .);

103 *(.
	gi•_s¸_w‹k
)

104 
	g_i•_s¸_íd
 = .;

105 
PROVIDE
(
i•_s¸_íd
 = .);

107 
	g_powî_dev_begö
 = .;

108 
PROVIDE
(
powî_dev_begö
 = .);

109 *(.
	gpowî_dev
)

110 
	g_powî_dev_íd
 = .;

111 
PROVIDE
(
powî_dev_íd
 = .);

113 
	g_ëh_phy_devi˚_begö
 = .;

114 
PROVIDE
(
ëh_phy_devi˚_begö
 = .);

115 *(.
	gëh_phy_devi˚
)

116 
	g_ëh_phy_devi˚_íd
 = .;

117 
PROVIDE
(
ëh_phy_devi˚_íd
 = .);

118 
INCLUDE
 
	gö˛ude_lib
/
	gui
/ui/ui.
ld


119 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/sy°em.
	gld


121 . = 
ALIGN
(32);

122 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	g˝u
/
	gAC521x
/
	gdevi˚
.
	gld


123 . = 
ALIGN
(32);

124 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gdevi˚
/devi˚.
ld


125 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gdevi˚
/
	gdevi˚_d©a
.
	gld


126 . = 
ALIGN
(32);

127 
INCLUDE
 
	gö˛ude_lib
/
	gsy°em
/
	gsy°em_d©a
.
ld


129 
INCLUDE
 
	gö˛ude_lib
/
	g£rvî
/£rvî.
	gld


131 . = 
ALIGN
(32);

133 
INCLUDE
 
	gö˛ude_lib
/
	g√t
/
	gdevi˚
/
	gdevi˚_d©a
.
ld


134 
INCLUDE
 
	gö˛ude_lib
/
	g√t
/
	g£rvî
/
	g√t_£rvî
.
	gld


139 
	g_œyî_buf_begö
 = .;

140 
PROVIDE
(
œyî_buf_begö
 = .);

141 *(.
	gœyî_buf_t
)

142 
	g_œyî_buf_íd
 = .;

143 
PROVIDE
(
œyî_buf_íd
 = .);

146 
	g_f⁄t_öfo_begö
 = .;

147 
PROVIDE
(
f⁄t_öfo_begö
 = .);

148 *(.
	gf⁄t_öfo_t
)

149 
	g_f⁄t_öfo_íd
 = .;

150 
PROVIDE
(
f⁄t_öfo_íd
 = .);

153 
	g_s¸ìn_toﬁ_öfo_begö
 = .;

154 
PROVIDE
(
s¸ìn_toﬁ_öfo_begö
 = .);

155 *(.
	gs¸ìn_toﬁ_öfo
)

156 
	g_s¸ìn_toﬁ_öfo_íd
 = .;

157 
PROVIDE
(
s¸ìn_toﬁ_öfo_íd
 = .);

159 } > 
	gsdøm


161 .
bss
 
ALIGN
(32) :

163 *(.
°ack
)

164 
_sy°em_d©a_begö
 = .;

165 *(.
	gbss
)

166 *(
	gCOMMON
)

167 *(.
	gusb_¶ave_v¨
)

168 *(.
	gmem_hóp
)

169 *(.
	gmemp_mem‹y_x
)

171 
	g_lcd_dev_buf_addr
 = .;

172 
PROVIDE
(
lcd_dev_buf_addr
 = .);

173 *(.
	glcd_dev_buf
)

174 
	g_sy°em_d©a_íd
 = .;

176 } > 
sdøm


177 
	g_HEAP_BEGIN
 = ( . +31 )/ 32 *32 ;

178 
PROVIDE
(
HEAP_BEGIN
 = (. + 31) / 32 *32);

179 
	g_HEAP_END
 = 0x1000000 + 
SDRAM_SIZE
 - 32;

180 
PROVIDE
(
HEAP_END
 = 0x1000000 + 
SDRAM_SIZE
 - 32);

181 
	g_MALLOC_SIZE
 = 
_HEAP_END
 - 
_HEAP_BEGIN
;

182 
PROVIDE
(
MALLOC_SIZE
 = 
_HEAP_END
 - 
_HEAP_BEGIN
);

186 . =
ORIGIN
(
øm0
);

187 .
øm0_d©a
 
ALIGN
(4):

189 
_VM_CODE_START
 = . ;

190 *(.
	gvm
)

191 
	g_VM_CODE_END
 = . ;

192 *(.
	gÊushöv_iˇche
)

193 } > 
	gøm0


195 .
øm0_bss
 
ALIGN
(4):

200 *(.
sd_v¨
)

201 *(.
§am
)

202 *(.
usb0_fifo
)

203 } > 
øm0


206 
ãxt_begö
 = 
ADDR
(.
rom_code
 ) ;

207 
	gãxt_size
 = 
SIZEOF
(.
rom_code
 ) ;

208 
	gbss_begö
 = 
ADDR
(.
bss
 ) ;

209 
	gbss_size
 = 
SIZEOF
(.
bss
);

210 
	gbss_size1
 = 
_sy°em_d©a_íd
 - 
_sy°em_d©a_begö
;

212 
	gbss_begö1
 = 
_sy°em_d©a_begö
;

214 
	gd©a_begö
 = 
LOADADDR
(.
d©a
) ;

215 
	gd©a_addr
 = 
ADDR
(.
d©a
) ;

216 
	gd©a_size
 = 
SIZEOF
(.
d©a
) ;

218 
	gd©a_vma
 = 
ADDR
(.
d©a
);

219 
	gd©a_lma
 = 
ãxt_begö
 + 
SIZEOF
(.
rom_code
);

222 
	g_øm0_bss_vma
 = 
ADDR
(.
øm0_bss
);

223 
	g_øm0_bss_size
 = 
SIZEOF
(.
øm0_bss
);

224 
	g_øm0_d©a_vma
 = 
ADDR
(.
øm0_d©a
);

225 
	g_øm0_d©a_lma
 = 
ãxt_begö
 + 
SIZEOF
(.
rom_code
Ë+ SIZEOF(.
d©a
);

226 
	g_øm0_d©a_size
 = 
SIZEOF
(.
øm0_d©a
);

	@cpu/AC521x/setup.c

1 
	~"asm/ö˛udes.h
"

2 
	~"asm/sysöfo.h
"

3 
	~"asm/ldo.h
"

4 
	~"asm/ˇche.h
"

5 
	~"sy°em/èsk.h
"

7 
	~"≠p_c⁄fig.h
"

8 
	~"powî_m™age.h
"

10 
dv15_dac_óæy_öô
(
u8
 
ldo_£l
, u8 
pwr_£l
, 
u32
 
dly_m£cs
);

13 #ifde‡
CONFIG_DEBUG_ENABLE


14 
debug_u¨t_öô
();

17 *
	gdebug_msg
[32] = {

57 
___öãºu±


58 
	$ex˚±i⁄_úq_h™dÀr
()

60 
u32
 
ªts_addr
, 
ªti_addr
;

61 
u32
 
i
;

62 
u32
 
tmp_•
, 
tmp_u•
, 
tmp_s•
;

63 
u32
 *
tmp_•_±r
;

66 
__asm__
 volatile("[--sp] = {r15-r0}");

68 
__asm__
 vﬁ©ûe("%0 =Ñë†;" : "Ù"(
ªts_addr
));

69 
__asm__
 vﬁ©ûe("%0 =Ñëò;" : "Ù"(
ªti_addr
));

71 
__asm__
 vﬁ©ûe("%0 = s∞;" : "Ù"(
tmp_•
));

72 
__asm__
 vﬁ©ûe("%0 = u• ;" : "Ù"(
tmp_u•
));

73 
__asm__
 vﬁ©ûe("%0 = s• ;" : "Ù"(
tmp_s•
));

76 
FPGA_TRI
 = 0;

86 i‡(
	`cuºít_˝u_id
() == 0) {

87 
	`¥ötf
("!!!!! cpu 0 %s:Ñets_addr = 0x%x,Ñeti_addr = 0x%x\n DEBUG_MSG = 0x%x, DEBUG_PRP_NUM = 0x%x DSPCON=%x\n",

88 
__func__
, 
ªts_addr
, 
ªti_addr
, 
DEBUG_MSG
, 
DEBUG_WRNUM
, 
DSPCON
);

94 
	`¥ötf
("\n• : 0x%x, u• : 0x%x, s• : 0x%x\n", 
tmp_•
, 
tmp_u•
, 
tmp_s•
);

96 
	`¥ötf
("\nWR_LIM4H : 0x%x, WR_LIM4L : 0x%x, SDRDBG : 0x%x\n", 
WR_LIM4H
, 
WR_LIM4L
, 
SDRDBG
);

98 
i
 = 0; i < 32; i++) {

99 i‡(
	`BIT
(
i
)&
DEBUG_MSG
) {

100 
	`puts
(
debug_msg
[
i
]);

105 
	`log_Êush
();

107 
	}
}

109 
	$˝u_xbus_öô
()

112 
xbus_ch01_lvl
 = 0;

113 
xbus_ch03_lvl
 = 3;

114 
xbus_ch04_lvl
 = 3;

115 
xbus_ch05_lvl
 = 0;

116 
xbus_ch06_lvl
 = 0;

117 
xbus_ch07_lvl
 = 0;

118 
xbus_ch08_lvl
 = 0;

119 
xbus_ch09_lvl
 = 0;

120 
xbus_ch10_lvl
 = 0;

122 
xbus_ch18_lvl
 = 0;

123 
xbus_ch19_lvl
 = 3;

124 
xbus_ch20_lvl
 = 3;

125 
xbus_ch23_lvl
 = 0;

126 
xbus_ch24_lvl
 = 0;

127 
xbus_ch25_lvl
 = 0;

128 
xbus_ch26_lvl
 = 0;

130 
xbus_lv1_¥d
 = 8;

131 
xbus_lv2_¥d
 = 16;

134 
	}
}

136 
u32
 
ãxt_rod©a_begö
, 
ãxt_rod©a_íd
;

138 
	$˝u1_maö
()

140 
	`loˇl_úq_dißbÀ
();

142 
	`öãºu±_öô
();

144 
	`ªque°_úq
(1, 7, 
ex˚±i⁄_úq_h™dÀr
, 1);

148 
	`os_°¨t
();

150 
	`loˇl_úq_íabÀ
();

153 
__asm__
 volatile("idle");

155 
	}
}

157 
	$wdt_öô
()

162 
CLK_CON0
 |
	`BIT
(9);

163 
CRC1_REG
 = 0x6EA5;

164 
WDT_CON
 = 
	`BIT
(6) | BIT(4) | 0x0c;

165 
CRC1_REG
 = 0;

166 
	}
}

168 
__©åibuã__
((
noölöe
))

169 
	$˛r_wdt
()

171 
WDT_CON
 |
	`BIT
(6);

174 
	}
}

176 
	$˛o£_wdt
()

178 
CRC1_REG
 = 0x6EA5;

179 
WDT_CON
 &~
	`BIT
(4);

180 
CRC1_REG
 = 0;

181 
	}
}

186 
u32
 
sdfûe_öô
(u32 
cmd_z⁄e_addr
, u32 *
hód_addr
, 
num
);

196 
	$óæy_putch¨
(
a
)

198 i‡(
a
 == '\n') {

199 
UT2_BUF
 = '\r';

200 
	`__asm_csync
();

201 (
UT2_CON
 & 
	`BIT
(15)) == 0);

203 
UT2_BUF
 = 
a
;

204 
	`__asm_csync
();

205 (
UT2_CON
 & 
	`BIT
(15)) == 0);

206 
	}
}

208 
	$óæy_puts
(*
s
)

211 
	`óæy_putch¨
(*
s
);

212 } *(++
s
));

213 
	}
}

216 
	$£tup_¨ch
()

218 
	`wdt_öô
();

220 
	`˛k_óæy_öô
();

222 
	`öãºu±_öô
();

224 #ifde‡
CONFIG_DEBUG_ENABLE


225 
	`debug_u¨t_öô
();

227 
	`log_óæy_öô
(8 * 1024);

229 
	`puts
("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");

230 
	`¥ötf
("\¿ sëup_¨ch %†%s", 
__DATE__
, 
__TIME__
);

231 
	`puts
("\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n");

234 
	`dˇche_way_u£_£À˘
(1, 1);

237 
	`dv15_dac_óæy_öô
(1, 1, 1000);

239 
	`πc_óæy_öô
();

241 
	`sys_powî_óæy_öô
();

243 
	`˝u_xbus_öô
();

244 #i‚de‡
CONFIG_SFC_ENABLE


245 
	`debug_öô
();

253 
	`ªque°_úq
(1, 7, 
ex˚±i⁄_úq_h™dÀr
, 0);

255 
	}
}

	@cpu/AC521x/uart_key.c

1 
	~"key_drivî.h
"

2 
	~"sy°em/evít.h
"

3 
	~"asm/u¨t.h
"

5 
gëbyã
(*
c
);

7 
	$u¨t_key_öô
(
key_drivî
 *
_key
, *
¨g
)

10 
	}
}

12 
u16
 
	$u¨t_gë_key_vÆue
(
key_drivî
 *
_key
)

14 
c
;

15 
u8
 
key_vÆue
;

17 i‡(
	`gëbyã
(&
c
) == 0) {

18  
NO_KEY
;

21 
c
) {

23 
key_vÆue
 = 
KEY_MODE
;

26 
key_vÆue
 = 
KEY_UP
;

29 
key_vÆue
 = 
KEY_DOWN
;

32 
key_vÆue
 = 
KEY_OK
;

35 
key_vÆue
 = 
KEY_MENU
;

38 
key_vÆue
 = 
NO_KEY
;

42  
key_vÆue
;

43 
	}
}

45 
key_drivî_›s
 
	gu¨t_key_›s
 = {

46 .
öô
 = 
u¨t_key_öô
,

47 .
	ggë_vÆue
 = 
u¨t_gë_key_vÆue
,

50 
REGISTER_KEY_DRIVER
(
u¨t_key
) = {

51 .
«me
 = "uart_key",

52 .
	g¥ev_vÆue
 = 0,

53 .
	gœ°_key
 = 
NO_KEY
,

54 .
	gfûãr_˙t
 = 0,

55 .
	gba£_˙t
 = 0,

56 .
	gl⁄g_˙t
 = 75,

57 .
	ghﬁd_˙t
 = (75 + 15),

58 .
	gsˇn_time
 = 40,

59 .
	g›s
 = &
u¨t_key_›s
,

	@include_lib/common/common.h

1 #i‚de‡ 
__COMMON_H__


2 
	#__COMMON_H__


	)

5 
	~"os/os_cfg.h
"

6 
	~"asm/˛ock.h
"

7 
	~"gíîic/jiffõs.h
"

10 
time_œp£
(*
h™dÀ
, 
time_out
);

12 
a•rötf
(**
ªt
, c⁄° *
f‹m©
, ...);

13 
u32
 
timî_gë_£c
();

14 
u32
 
timî_gë_ms
();

21 
ˇl_days
(
yór
, 
m⁄th
);

23 
ønd
();

31 *
c⁄f_fûe_›í
(c⁄° *
∑th
, c⁄° *
mode
);

33 
c⁄f_fûe_˛o£
(*
Â
);

35 *
c⁄f_fûe_gës
(*
Â
, *
buf
, 
buf_Àn
);

	@include_lib/configs/config-ccm-psk-tls1_2.h

31 #i‚de‡
MBEDTLS_CONFIG_H


32 
	#MBEDTLS_CONFIG_H


	)

39 
	#MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


	)

40 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

43 
	#MBEDTLS_AES_C


	)

44 
	#MBEDTLS_CCM_C


	)

45 
	#MBEDTLS_CIPHER_C


	)

46 
	#MBEDTLS_CTR_DRBG_C


	)

47 
	#MBEDTLS_ENTROPY_C


	)

48 
	#MBEDTLS_MD_C


	)

49 
	#MBEDTLS_NET_C


	)

50 
	#MBEDTLS_SHA256_C


	)

51 
	#MBEDTLS_SSL_CLI_C


	)

52 
	#MBEDTLS_SSL_SRV_C


	)

53 
	#MBEDTLS_SSL_TLS_C


	)

56 
	#MBEDTLS_AES_ROM_TABLES


	)

59 
	#MBEDTLS_PSK_MAX_LEN
 16

	)

66 
	#MBEDTLS_ENTROPY_MAX_SOURCES
 2

	)

72 
	#MBEDTLS_SSL_CIPHERSUITES
 \

73 
MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8
, \

74 
MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8


	)

81 
	#MBEDTLS_SSL_MAX_CONTENT_LEN
 512

	)

83 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/configs/config-default.h

29 #i‚de‡
MBEDTLS_CONFIG_H


30 
	#MBEDTLS_CONFIG_H


	)

32 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
_CRT_SECURE_NO_DEPRECATE
)

33 
	#_CRT_SECURE_NO_DEPRECATE
 1

	)

57 
	#MBEDTLS_HAVE_ASM


	)

77 
	#MBEDTLS_HAVE_TIME


	)

89 
	#MBEDTLS_HAVE_TIME_DATE


	)

317 
	#MBEDTLS_CIPHER_MODE_CBC


	)

324 
	#MBEDTLS_CIPHER_MODE_CFB


	)

331 
	#MBEDTLS_CIPHER_MODE_CTR


	)

376 
	#MBEDTLS_CIPHER_PADDING_PKCS7


	)

377 
	#MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS


	)

378 
	#MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN


	)

379 
	#MBEDTLS_CIPHER_PADDING_ZEROS


	)

407 
	#MBEDTLS_REMOVE_ARC4_CIPHERSUITES


	)

417 
	#MBEDTLS_ECP_DP_SECP192R1_ENABLED


	)

418 
	#MBEDTLS_ECP_DP_SECP224R1_ENABLED


	)

419 
	#MBEDTLS_ECP_DP_SECP256R1_ENABLED


	)

420 
	#MBEDTLS_ECP_DP_SECP384R1_ENABLED


	)

421 
	#MBEDTLS_ECP_DP_SECP521R1_ENABLED


	)

422 
	#MBEDTLS_ECP_DP_SECP192K1_ENABLED


	)

423 
	#MBEDTLS_ECP_DP_SECP224K1_ENABLED


	)

424 
	#MBEDTLS_ECP_DP_SECP256K1_ENABLED


	)

425 
	#MBEDTLS_ECP_DP_BP256R1_ENABLED


	)

426 
	#MBEDTLS_ECP_DP_BP384R1_ENABLED


	)

427 
	#MBEDTLS_ECP_DP_BP512R1_ENABLED


	)

428 
	#MBEDTLS_ECP_DP_CURVE25519_ENABLED


	)

439 
	#MBEDTLS_ECP_NIST_OPTIM


	)

453 
	#MBEDTLS_ECDSA_DETERMINISTIC


	)

475 
	#MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


	)

499 
	#MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED


	)

519 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED


	)

544 
	#MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED


	)

572 
	#MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


	)

598 
	#MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED


	)

623 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED


	)

647 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


	)

671 
	#MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED


	)

695 
	#MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED


	)

709 
	#MBEDTLS_PK_PARSE_EC_EXTENDED


	)

724 
	#MBEDTLS_ERROR_STRERROR_DUMMY


	)

733 
	#MBEDTLS_GENPRIME


	)

814 
	#MBEDTLS_PK_RSA_ALT_SUPPORT


	)

825 
	#MBEDTLS_PKCS1_V15


	)

836 
	#MBEDTLS_PKCS1_V21


	)

895 
	#MBEDTLS_SSL_ALL_ALERT_MESSAGES


	)

929 
	#MBEDTLS_SSL_ENCRYPT_THEN_MAC


	)

947 
	#MBEDTLS_SSL_EXTENDED_MASTER_SECRET


	)

964 
	#MBEDTLS_SSL_FALLBACK_SCSV


	)

986 
	#MBEDTLS_SSL_CBC_RECORD_SPLITTING


	)

1001 
	#MBEDTLS_SSL_RENEGOTIATION


	)

1030 
	#MBEDTLS_SSL_MAX_FRAGMENT_LENGTH


	)

1054 
	#MBEDTLS_SSL_PROTO_TLS1


	)

1066 
	#MBEDTLS_SSL_PROTO_TLS1_1


	)

1078 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

1102 
	#MBEDTLS_SSL_ALPN


	)

1117 
	#MBEDTLS_SSL_DTLS_ANTI_REPLAY


	)

1135 
	#MBEDTLS_SSL_DTLS_HELLO_VERIFY


	)

1151 
	#MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE


	)

1162 
	#MBEDTLS_SSL_DTLS_BADMAC_LIMIT


	)

1176 
	#MBEDTLS_SSL_SESSION_TICKETS


	)

1186 
	#MBEDTLS_SSL_EXPORT_KEYS


	)

1197 
	#MBEDTLS_SSL_SERVER_NAME_INDICATION


	)

1206 
	#MBEDTLS_SSL_TRUNCATED_HMAC


	)

1241 
	#MBEDTLS_VERSION_FEATURES


	)

1277 
	#MBEDTLS_X509_CHECK_KEY_USAGE


	)

1290 
	#MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE


	)

1300 
	#MBEDTLS_X509_RSASSA_PSS_SUPPORT


	)

1344 
	#MBEDTLS_AESNI_C


	)

1419 
	#MBEDTLS_AES_C


	)

1442 
	#MBEDTLS_ARC4_C


	)

1456 
	#MBEDTLS_ASN1_PARSE_C


	)

1470 
	#MBEDTLS_ASN1_WRITE_C


	)

1482 
	#MBEDTLS_BASE64_C


	)

1498 
	#MBEDTLS_BIGNUM_C


	)

1507 
	#MBEDTLS_BLOWFISH_C


	)

1562 
	#MBEDTLS_CAMELLIA_C


	)

1576 
	#MBEDTLS_CCM_C


	)

1588 
	#MBEDTLS_CERTS_C


	)

1600 
	#MBEDTLS_CIPHER_C


	)

1614 
	#MBEDTLS_CTR_DRBG_C


	)

1628 
	#MBEDTLS_DEBUG_C


	)

1654 
	#MBEDTLS_DES_C


	)

1668 
	#MBEDTLS_DHM_C


	)

1684 
	#MBEDTLS_ECDH_C


	)

1699 
	#MBEDTLS_ECDSA_C


	)

1712 
	#MBEDTLS_ECP_C


	)

1726 
	#MBEDTLS_ENTROPY_C


	)

1738 
	#MBEDTLS_ERROR_C


	)

1752 
	#MBEDTLS_GCM_C


	)

1789 
	#MBEDTLS_HMAC_DRBG_C


	)

1801 
	#MBEDTLS_MD_C


	)

1840 
	#MBEDTLS_MD5_C


	)

1867 
	#MBEDTLS_NET_C


	)

1890 
	#MBEDTLS_OID_C


	)

1904 
	#MBEDTLS_PADLOCK_C


	)

1922 
	#MBEDTLS_PEM_PARSE_C


	)

1938 
	#MBEDTLS_PEM_WRITE_C


	)

1954 
	#MBEDTLS_PK_C


	)

1969 
	#MBEDTLS_PK_PARSE_C


	)

1983 
	#MBEDTLS_PK_WRITE_C


	)

1996 
	#MBEDTLS_PKCS5_C


	)

2027 
	#MBEDTLS_PKCS12_C


	)

2047 
	#MBEDTLS_PLATFORM_C


	)

2058 
	#MBEDTLS_RIPEMD160_C


	)

2076 
	#MBEDTLS_RSA_C


	)

2092 
	#MBEDTLS_SHA1_C


	)

2109 
	#MBEDTLS_SHA256_C


	)

2124 
	#MBEDTLS_SHA512_C


	)

2136 
	#MBEDTLS_SSL_CACHE_C


	)

2146 
	#MBEDTLS_SSL_COOKIE_C


	)

2158 
	#MBEDTLS_SSL_TICKET_C


	)

2172 
	#MBEDTLS_SSL_CLI_C


	)

2202 
	#MBEDTLS_SSL_TLS_C


	)

2246 
	#MBEDTLS_VERSION_C


	)

2263 
	#MBEDTLS_X509_USE_C


	)

2279 
	#MBEDTLS_X509_CRT_PARSE_C


	)

2293 
	#MBEDTLS_X509_CRL_PARSE_C


	)

2307 
	#MBEDTLS_X509_CSR_PARSE_C


	)

2320 
	#MBEDTLS_X509_CREATE_C


	)

2333 
	#MBEDTLS_X509_CRT_WRITE_C


	)

2346 
	#MBEDTLS_X509_CSR_WRITE_C


	)

2356 
	#MBEDTLS_XTEA_C


	)

2460 #i‡
deföed
(
YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE
)

2461 #ö˛udê
YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE


2462 #ñi‡
deföed
(
MBEDTLS_USER_CONFIG_FILE
)

2463 #ö˛udê
MBEDTLS_USER_CONFIG_FILE


2466 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/configs/config-mini-tls1_1.h

29 #i‚de‡
MBEDTLS_CONFIG_H


30 
	#MBEDTLS_CONFIG_H


	)

32 
	#MBEDTLS_DEBUG_C
 1

	)

44 
	#MBEDTLS_ERROR_C


45 

	)

55 
	#MBEDTLS_HAVE_ASM


	)

56 
	#MBEDTLS_HAVE_TIME


	)

71 
	#MBEDTLS_SSL_SESSION_TICKETS


	)

74 
	#MBEDTLS_CIPHER_MODE_CBC


	)

75 
	#MBEDTLS_PKCS1_V15


	)

76 
	#MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


	)

77 
	#MBEDTLS_SSL_PROTO_TLS1


	)

78 
	#MBEDTLS_SSL_PROTO_TLS1_1


	)

79 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

82 
	#MBEDTLS_AES_C


	)

83 
	#MBEDTLS_ASN1_PARSE_C


	)

84 
	#MBEDTLS_ASN1_WRITE_C


	)

85 
	#MBEDTLS_BIGNUM_C


	)

86 
	#MBEDTLS_CIPHER_C


	)

87 
	#MBEDTLS_CTR_DRBG_C


	)

88 
	#MBEDTLS_DES_C


	)

89 
	#MBEDTLS_ENTROPY_C


	)

90 
	#MBEDTLS_MD_C


	)

91 
	#MBEDTLS_MD5_C


	)

92 
	#MBEDTLS_NET_C


	)

93 
	#MBEDTLS_OID_C


	)

94 
	#MBEDTLS_PK_C


	)

95 
	#MBEDTLS_PK_PARSE_C


	)

96 
	#MBEDTLS_RSA_C


	)

97 
	#MBEDTLS_SHA1_C


	)

98 
	#MBEDTLS_SHA256_C


	)

99 
	#MBEDTLS_SSL_CLI_C


	)

100 
	#MBEDTLS_SSL_SRV_C


101 

	)

102 
	#MBEDTLS_SSL_TICKET_C


	)

103 
	#MBEDTLS_GCM_C


	)

105 
	#MBEDTLS_SSL_CACHE_C


	)

106 
	#MBEDTLS_SSL_PROTO_DTLS


	)

107 
	#MBEDTLS_TIMING_C


	)

109 
	#MBEDTLS_SSL_COOKIE_C


	)

110 
	#MBEDTLS_SSL_DTLS_HELLO_VERIFY


	)

113 
	#MBEDTLS_SSL_TLS_C


	)

114 
	#MBEDTLS_X509_CRT_PARSE_C


	)

115 
	#MBEDTLS_X509_USE_C


	)

118 
	#MBEDTLS_BASE64_C


	)

119 
	#MBEDTLS_CERTS_C


	)

120 
	#MBEDTLS_PEM_PARSE_C


	)

125 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/configs/config-picocoin.h

32 #i‚de‡
MBEDTLS_CONFIG_H


33 
	#MBEDTLS_CONFIG_H


	)

36 
	#MBEDTLS_HAVE_ASM


	)

37 
	#MBEDTLS_HAVE_TIME


	)

40 
	#MBEDTLS_CIPHER_MODE_CBC


	)

41 
	#MBEDTLS_CIPHER_PADDING_PKCS7


	)

42 
	#MBEDTLS_ECP_DP_SECP256K1_ENABLED


	)

43 
	#MBEDTLS_ECDSA_DETERMINISTIC


	)

44 
	#MBEDTLS_PK_PARSE_EC_EXTENDED


	)

45 
	#MBEDTLS_ERROR_STRERROR_DUMMY


	)

46 
	#MBEDTLS_FS_IO


	)

49 
	#MBEDTLS_AESNI_C


	)

50 
	#MBEDTLS_AES_C


	)

51 
	#MBEDTLS_ASN1_PARSE_C


	)

52 
	#MBEDTLS_ASN1_WRITE_C


	)

53 
	#MBEDTLS_BASE64_C


	)

54 
	#MBEDTLS_BIGNUM_C


	)

55 
	#MBEDTLS_ECDSA_C


	)

56 
	#MBEDTLS_ECP_C


	)

57 
	#MBEDTLS_ENTROPY_C


	)

58 
	#MBEDTLS_HMAC_DRBG_C


	)

59 
	#MBEDTLS_MD_C


	)

60 
	#MBEDTLS_OID_C


	)

61 
	#MBEDTLS_PADLOCK_C


	)

62 
	#MBEDTLS_PK_C


	)

63 
	#MBEDTLS_PK_PARSE_C


	)

64 
	#MBEDTLS_PK_WRITE_C


	)

65 
	#MBEDTLS_RIPEMD160_C


	)

66 
	#MBEDTLS_SHA1_C


	)

67 
	#MBEDTLS_SHA256_C


	)

69 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/configs/config-suite-b.h

35 #i‚de‡
MBEDTLS_CONFIG_H


36 
	#MBEDTLS_CONFIG_H


	)

39 
	#MBEDTLS_HAVE_ASM


	)

40 
	#MBEDTLS_HAVE_TIME


	)

43 
	#MBEDTLS_ECP_DP_SECP256R1_ENABLED


	)

44 
	#MBEDTLS_ECP_DP_SECP384R1_ENABLED


	)

45 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


	)

46 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

49 
	#MBEDTLS_AES_C


	)

50 
	#MBEDTLS_ASN1_PARSE_C


	)

51 
	#MBEDTLS_ASN1_WRITE_C


	)

52 
	#MBEDTLS_BIGNUM_C


	)

53 
	#MBEDTLS_CIPHER_C


	)

54 
	#MBEDTLS_CTR_DRBG_C


	)

55 
	#MBEDTLS_ECDH_C


	)

56 
	#MBEDTLS_ECDSA_C


	)

57 
	#MBEDTLS_ECP_C


	)

58 
	#MBEDTLS_ENTROPY_C


	)

59 
	#MBEDTLS_GCM_C


	)

60 
	#MBEDTLS_MD_C


	)

61 
	#MBEDTLS_NET_C


	)

62 
	#MBEDTLS_OID_C


	)

63 
	#MBEDTLS_PK_C


	)

64 
	#MBEDTLS_PK_PARSE_C


	)

65 
	#MBEDTLS_SHA256_C


	)

66 
	#MBEDTLS_SHA512_C


	)

67 
	#MBEDTLS_SSL_CLI_C


	)

68 
	#MBEDTLS_SSL_SRV_C


	)

69 
	#MBEDTLS_SSL_TLS_C


	)

70 
	#MBEDTLS_X509_CRT_PARSE_C


	)

71 
	#MBEDTLS_X509_USE_C


	)

74 
	#MBEDTLS_BASE64_C


	)

75 
	#MBEDTLS_CERTS_C


	)

76 
	#MBEDTLS_PEM_PARSE_C


	)

79 
	#MBEDTLS_AES_ROM_TABLES


	)

82 
	#MBEDTLS_ECP_MAX_BITS
 384

	)

83 
	#MBEDTLS_MPI_MAX_SIZE
 48

84 

	)

86 
	#MBEDTLS_ECP_WINDOW_SIZE
 2

	)

87 
	#MBEDTLS_ECP_FIXED_POINT_OPTIM
 0

	)

90 
	#MBEDTLS_ECP_NIST_OPTIM


	)

97 
	#MBEDTLS_ENTROPY_MAX_SOURCES
 2

	)

100 
	#MBEDTLS_SSL_CIPHERSUITES
 \

101 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
, \

102 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256


	)

110 
	#MBEDTLS_SSL_MAX_CONTENT_LEN
 1024

	)

112 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/HSM/hsm.h

1 #i‚de‡
__HSM_H__


2 
	#__HSM_H__


	)

6 
	~"¥ötf.h
"

7 #ifde‡
__˝lu•lus


13 
	#HSM_DEBUG_ENABLE


	)

15 
	#HSM_CHECK_ENABLE


	)

19 
	#HSM_MAX_DEPTH
 4

	)

22 
	#HSME_INIT
 (-3)

	)

23 
	#HSME_ENTRY
 (-2)

	)

24 
	#HSME_EXIT
 (-1)

	)

25 
	#HSME_NULL
 0

	)

26 
	#HSME_START
 1

	)

29 #ifde‡
HSM_DEBUG_ENABLE


31 
	#HSM_SET_DEBUG
(
hsm
, 
bE«bÀ
, 
¥eFix
, 
evt2°r_func
Ë{ (hsm)->
hsmDebug
 = (bE«bÀ);(hsm)->
¥efix
 = (¥eFix);(hsm)->
evt2°r
 = (evt2°r_func);}

	)

33 
	#HSM_GET_DEBUG
(
hsm
Ë((hsm)->
hsmDebug
)

	)

36 
	#HSM_DEBUG
(
x
, ...Ë{ i‡(
This
->
hsmDebug
Ë
	`¥ötf
("%s" x "\r\n", This->
¥efix
, 
__VA_ARGS__
); }

	)

38 
	#HSM_SET_DEBUG
(
hsm
, 
bE«bÀ
, 
¥eFix
, 
evt2°r_func
)

	)

39 
	#HSM_GET_DEBUG
(
hsm
)

	)

40 
	#HSM_DEBUG
(...)

	)

43 
	#HSM_ERROR
(
x
, ...Ë{ 
	`¥ötf
("%s" x "\r\n", 
This
->
¥efix
, 
__VA_ARGS__
); }

	)

46 
HSM_STATE_T
 
	tHSM_STATE
;

47 
HSM_T
 
	tHSM
;

49 (* 
HSM_FN
)(
	tHSM
 *
	tThis
, 
	tevít
, *
	t∑øm
);

51 
	sHSM_STATE_T
 {

52 
HSM_STATE
 *
∑ª¡
;

53 
HSM_FN
 
h™dÀr
;

54 c⁄° *
«me
;

55 
Àvñ
;

58 
	sHSM_T
 {

59 
HSM_STATE
 *
curSèã
;

60 #ifde‡
HSM_DEBUG_ENABLE


61 c⁄° *
«me
;

62 c⁄° *
¥efix
;

63 
hsmDebug
;

64 c⁄° *(*
evt2°r
)(
evít
);

66 #ifde‡
HSM_CHECK_ENABLE


67 
hsmTøn
;

78 
HSM_STATE_Cª©e
(
HSM_STATE
 *
This
, c⁄° *
«me
, 
HSM_FN
 
h™dÀr
, HSM_STATE *
∑ª¡
);

84 
HSM_Cª©e
(
HSM
 *
This
, c⁄° *
«me
, 
HSM_STATE
 *
öôSèã
);

90 
HSM_STATE
 *
HSM_GëSèã
(
HSM
 *
This
);

97 
HSM_IsInSèã
(
HSM
 *
This
, 
HSM_STATE
 *
°©e
);

104 
HSM_Run
(
HSM
 *
This
, 
evít
, *
∑øm
);

113 
HSM_Tøn
(
HSM
 *
This
, 
HSM_STATE
 *
√xtSèã
, 
evít
, *
∑øm
, (*
mëhod
)(HSM *This, *param));

121 
	tfsm_ªt_t
;

122 
fsm_s
 
	tfsm_t
;

123 
	sfsm_evít_s
 {

124 
sig
;

125 *
evít
;

126 } 
	tfsm_evít_t
;

127 
fsm_ªt_t
 (*
	tfsm_°©e_h™dÀr_t
)(
	tfsm_t
 *
	tfsm
, 
	tfsm_evít_t
 c⁄° *
	te
);

128 
	sfsm_s
 {

129 
fsm_°©e_h™dÀr_t
 
°©e
;

130 
fsm_°©e_h™dÀr_t
 
ãmp
;

133 
FSM_RET_HANDLED
,

134 
FSM_RET_IGNORE
,

135 
FSM_RET_UNHANDLED
,

136 
FSM_RET_TRAN
,

138 
	#FSM_RET_CAST
(
x
Ë–(
fsm_ªt_t
)(xË)

	)

140 
	#FSM_HANDLED
(Ë
	`SM_RET_CAST
(
SM_RET_HANDLED
)

	)

141 
	#FSM_IGNORE
(Ë
	`SM_RET_CAST
(
SM_RET_IGNORE
)

	)

142 
	#FSM_UNHANDLED
(Ë
	`SM_RET_CAST
(
SM_RET_UNHANDLED
)

	)

144 
	#FSM_TRAN
(
me
, 
èrgë
) \

145 ((
me
)->
ãmp
 = (
èrgë
), 
	`FSM_RET_CAST
(
SM_RET_TRAN
))

	)

146 
	#FSM_SUPER
(
me
, 
su≥r
) \

147 ((
me
)->
ãmp
 = (
su≥r
), 
	`FSM_RET_CAST
(
FSM_RET_SUPER
))

	)

148 
	#FSM_TRIG
(
me
, 
°©e
, 
sig
Ë((°©e)(me, &
fsm_ª£rved_evít
[5 + (sig)]))

	)

149 
	#FSM_ENTRY
(
me
, 
°©e
Ë
	`FSM_TRIG
(me, sèã, 
FSM_ENTRY_SIG
)

	)

150 
	#FSM_EXIT
(
me
, 
°©e
Ë
	`FSM_TRIG
(me, sèã, 
FSM_EXIT_SIG
)

	)

152 
	efsm_ª£rved_sig
 {

153 
FSM_EMPTY_SIG
 = -5,

154 
FSM_ENTRY_SIG
 = -4,

155 
FSM_EXIT_SIG
 = -3,

156 
FSM_INIT_SIG
 = -2,

157 
FSM_USER_SIG
 = -1,

160 
fsm_˘‹
(
fsm_t
 *
me
, 
fsm_°©e_h™dÀr_t
 
öô
);

161 
fsm_ªt_t
 
fsm_öô
(
fsm_t
 *
me
, 
fsm_evít_t
 *
e
);

162 
fsm_di•©ch
(
fsm_t
 *
me
, 
fsm_evít_t
 *
e
);

164 #ifde‡
__˝lu•lus


	@include_lib/net/device/device_data.ld

2 
	g_˘p_m≠pög_èb_begö
 = .;

3 
PROVIDE
(
˘p_m≠pög_èb_begö
 = .);

5 
	g_˘p_m≠pög_èb_sy°em_cmd_begö
 = .;

6 
PROVIDE
(
˘p_m≠pög_èb_sy°em_cmd_begö
 = .);

7 *(.
	g˘p_sy°em_cmd
)

8 
	g_˘p_m≠pög_èb_sy°em_cmd_íd
 = .;

9 
PROVIDE
(
˘p_m≠pög_èb_sy°em_cmd_íd
 = .);

11 
	g_˘p_m≠pög_èb_video_cmd_begö
 = .;

12 
PROVIDE
(
˘p_m≠pög_èb_video_cmd_begö
 = .);

13 *(.
	g˘p_video_cmd
)

14 
	g_˘p_m≠pög_èb_video_cmd_íd
 = .;

15 
PROVIDE
(
˘p_m≠pög_èb_video_cmd_íd
 = .);

17 
	g_˘p_m≠pög_èb_phŸo_cmd_begö
 = .;

18 
PROVIDE
(
˘p_m≠pög_èb_phŸo_cmd_begö
 = .);

19 *(.
	g˘p_phŸo_cmd
)

20 
	g_˘p_m≠pög_èb_phŸo_cmd_íd
 = .;

21 
PROVIDE
(
˘p_m≠pög_èb_phŸo_cmd_íd
 = .);

23 
	g_˘p_m≠pög_èb_íd
 = .;

24 
PROVIDE
(
˘p_m≠pög_èb_íd
 = .);

26 
	g_sig_m≠pög_èb_cmd_begö
 = .;

27 
PROVIDE
(
sig_m≠pög_èb_cmd_begö
 = .);

	@include_lib/net/device/eth/DP83848.h

1 #i‚de‡
_DP83848_H_


2 
	#_DP83848_H_


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"ëh/phy_°©e.h
"

6 
	#DP8_PHYAD
 0x01

7 

	)

10 
dp83848_íabÀ_lo›back
(
u8
 
phyad
);

11 
dp83848_InôPhy
(
u8
 
phyad
, u8 
rii_rmii_mode
, 
LINK_SPEED_MODE
 
lök_•ìd_mode
);

13 
dp83848_IsPhyC⁄√˘ed
(
u8
 
phyad
);

	@include_lib/net/device/eth/RTL8201.h

1 #i‚de‡
_RTL8201_H_


2 
	#_RTL8201_H_


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"ëh/ëh_phy.h
"

7 
	#RTL8201_PHYAD
 0x01

8 

	)

10 
πl8201_íabÀ_lo›back
(
ëh_∂©f‹m_d©a
 *);

11 
πl8201_InôPhy
(
ëh_∂©f‹m_d©a
 *);

12 
πl8201_GëLökS≥ed
(
ëh_∂©f‹m_d©a
 *);

13 
πl8201_IsPhyC⁄√˘ed
(
ëh_∂©f‹m_d©a
 *);

	@include_lib/net/device/eth/eth_phy.h

1 #i‚de‡ 
__PHY_STATE_H__


2 
	#__PHY_STATE_H__


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"ëh/mdio_bus.h
"

6 
	ephy_°©e
 {

7 
	mPHY_CHECK
,

8 
	mPHY_RUNNING
,

9 
	mPHY_UNLINK
,

11 
	e_LINK_SPEED_MODE
 {

12 
	mPHY_FULLDUPLEX_100M
,

13 
	mPHY_HALFDUPLEX_100M
,

14 
	mPHY_FULLDUPLEX_10M
,

15 
	mPHY_HALFDUPLEX_10M
,

16 
	mPHY_AUTONEGOTINATION
,

17 } 
	tLINK_SPEED_MODE
;

21 
	sëh_∂©f‹m_d©a
 {

22 
u8
 *
	m«me
;

23 
LINK_SPEED_MODE
 
	m•ìd
;

24 
u8
 
	mmode
;

25 
	múq
;

26 
	mmdio_p‹t
;

27 
	mmdc_p‹t
;

28 
u32
 
	mcheck_lök_time
;

29 
u8
 
	mmac_addr
[6];

30 
so·w¨e_rmii
 
	mrmii_bus
;

38 
	#NET_PLATFORM_DATA_BEGIN
(
d©a
) \

39 c⁄° 
ëh_∂©f‹m_d©a
 
d©a
 = {

	)

42 
	#NET_PLATFORM_DATA_END
() \

43 };

	)

46 
	sëh_phy_devi˚
 {

47 *
	m«me
;

48 (*
	möô
)(
	mëh_∂©f‹m_d©a
 *);

49 (*
	mis_c⁄√˘
)(
	mëh_∂©f‹m_d©a
 *);

50 (*
	mgë_lök_•ìd
)(
	mëh_∂©f‹m_d©a
 *);

51 (*
	m£t_lök_•ìd
)(
	mëh_∂©f‹m_d©a
 *);

55 
	#REGISTER_NET_PHY_DEVICE
(
dev
) \

56 
ëh_phy_devi˚
 
dev
 
	`£c
(.ëh_phy_devi˚)

	)

59 
ëh_phy_devi˚
 
ëh_phy_devi˚_begö
[];

60 
ëh_phy_devi˚
 
ëh_phy_devi˚_íd
[];

63 c⁄° 
devi˚_›î©i⁄s
 
ëh_phy_dev_›s
;

64 c⁄° 
devi˚_›î©i⁄s
 
ùc_dev_›s
;

66 
u8
 *
gë_mac_addªss_f‹_∂©f‹m
();

67 
phy_°©e_machöe
(*
¥iv
);

68 
£t_phy_°©s_cb
(
u8
 
id
, (*
f
)(
phy_°©e
));

69 
ëh_∂©f‹m_d©a
 *
	`gë_∂©f‹m_d©a
();

	@include_lib/net/device/eth/ethmac.h

1 #i‚de‡
_ETHMAC_H_


2 
	#_ETHMAC_H_


	)

3 
	~"gíîic/ty≥def.h
"

4 
	~"ëh/ëh_phy.h
"

30 
	s_€th_ªgs
 {

31 vﬁ©ûê
u32
 
	mmodî
;

32 vﬁ©ûê
u32
 
	möt_§c
;

33 vﬁ©ûê
u32
 
	möt_mask
;

34 vﬁ©ûê
u32
 
	mùgt
;

35 vﬁ©ûê
u32
 
	mùgr1
;

36 vﬁ©ûê
u32
 
	mùgr2
;

37 vﬁ©ûê
u32
 
	m∑ckë_Àn
;

38 vﬁ©ûê
u32
 
	mcﬁlc⁄f
;

39 vﬁ©ûê
u32
 
	mtx_bd_num
;

40 vﬁ©ûê
u32
 
	m˘æmodî
;

41 vﬁ©ûê
u32
 
	mmiimodî
;

42 vﬁ©ûê
u32
 
	mmiicomm™d
;

43 vﬁ©ûê
u32
 
	mmiüddªss
;

44 vﬁ©ûê
u32
 
	mmiôx_d©a
;

45 vﬁ©ûê
u32
 
	mmiúx_d©a
;

46 vﬁ©ûê
u32
 
	mmii°©us
;

47 vﬁ©ûê
u32
 
	mmac_addr0
;

48 vﬁ©ûê
u32
 
	mmac_addr1
;

49 vﬁ©ûê
u32
 
	mhash_addr0
;

50 vﬁ©ûê
u32
 
	mhash_addr1
;

51 vﬁ©ûê
u32
 
	mtx˘æ
;

52 vﬁ©ûê
u32
 
	mrx˘æ
;

53 vﬁ©ûê
u32
 
	mwbdbg
;

55 } 
	t€th_ªgs
;

58 
	s_€th_bd
 {

59 vﬁ©ûê
u32
 
	mÀn_°©us
;

60 vﬁ©ûê
u32
 
	maddr
;

61 } 
	t€th_bd
;

63 
	s€th_d©a
 {

64 
u8
 *
	md©a
;

65 
u32
 
	md©a_Àn
;

72 
	#OETH_TX_BD_READY
 0x8000

	)

73 
	#OETH_TX_BD_IRQ
 0x4000

	)

74 
	#OETH_TX_BD_WRAP
 0x2000

	)

75 
	#OETH_TX_BD_PAD
 0x1000

	)

76 
	#OETH_TX_BD_CRC
 0x0800

	)

78 
	#OETH_TX_BD_UNDERRUN
 0x0100

	)

79 
	#OETH_TX_BD_RETRY
 0x00F0

	)

80 
	#OETH_TX_BD_RETLIM
 0x0008

	)

81 
	#OETH_TX_BD_LATECOL
 0x0004

	)

82 
	#OETH_TX_BD_DEFER
 0x0002

	)

83 
	#OETH_TX_BD_CARRIER
 0x0001

	)

84 
	#OETH_TX_BD_STATS
 (
OETH_TX_BD_UNDERRUN
 | \

85 
OETH_TX_BD_RETRY
 | \

86 
OETH_TX_BD_RETLIM
 | \

87 
OETH_TX_BD_LATECOL
 | \

88 
OETH_TX_BD_DEFER
 | \

89 
OETH_TX_BD_CARRIER
)

	)

91 
	#OETH_TX_BD_ERR_STATS
 (
OETH_TX_BD_UNDERRUN
 | \

92 
OETH_TX_BD_RETRY
 | \

93 
OETH_TX_BD_RETLIM
 | \

94 
OETH_TX_BD_LATECOL
 | \

95 
OETH_TX_BD_DEFER
 | \

96 
OETH_TX_BD_CARRIER
)

	)

99 
	#OETH_RX_BD_EMPTY
 0x8000

	)

100 
	#OETH_RX_BD_IRQ
 0x4000

	)

101 
	#OETH_RX_BD_WRAP
 0x2000

	)

103 
	#OETH_RX_BD_CF
 0x0100

	)

104 
	#OETH_RX_BD_MISS
 0x0080

	)

105 
	#OETH_RX_BD_OVERRUN
 0x0040

	)

106 
	#OETH_RX_BD_INVSIMB
 0x0020

	)

107 
	#OETH_RX_BD_DRIBBLE
 0x0010

	)

108 
	#OETH_RX_BD_TOOLONG
 0x0008

	)

109 
	#OETH_RX_BD_SHORT
 0x0004

	)

110 
	#OETH_RX_BD_CRCERR
 0x0002

	)

111 
	#OETH_RX_BD_LATECOL
 0x0001

	)

112 
	#OETH_RX_BD_STATS
 (
OETH_RX_BD_CF
 | \

113 
OETH_RX_BD_MISS
 | \

114 
OETH_RX_BD_OVERRUN
 | \

115 
OETH_RX_BD_INVSIMB
 | \

116 
OETH_RX_BD_DRIBBLE
 | \

117 
OETH_RX_BD_TOOLONG
 | \

118 
OETH_RX_BD_SHORT
 | \

119 
OETH_RX_BD_CRCERR
 | \

120 
OETH_RX_BD_LATECOL
)

	)

122 
	#OETH_RX_BD_ERR_STATS
 (
OETH_RX_BD_OVERRUN
 | \

123 
OETH_RX_BD_INVSIMB
 | \

124 
OETH_RX_BD_DRIBBLE
 | \

125 
OETH_RX_BD_TOOLONG
 | \

126 
OETH_RX_BD_SHORT
 | \

127 
OETH_RX_BD_CRCERR
 | \

128 
OETH_RX_BD_LATECOL
)

	)

131 
	#OETH_MODER_RXEN
 0x00000001

	)

132 
	#OETH_MODER_TXEN
 0x00000002

	)

133 
	#OETH_MODER_NOPRE
 0x00000004

	)

134 
	#OETH_MODER_BRO
 0x00000008

	)

135 
	#OETH_MODER_IAM
 0x00000010

	)

136 
	#OETH_MODER_PRO
 0x00000020

	)

137 
	#OETH_MODER_IFG
 0x00000040

	)

138 
	#OETH_MODER_LOOPBCK
 0x00000080

	)

139 
	#OETH_MODER_NOBCKOF
 0x00000100

	)

140 
	#OETH_MODER_EXDFREN
 0x00000200

	)

141 
	#OETH_MODER_FULLD
 0x00000400

	)

143 
	#OETH_MODER_MODE
 0x00000800

	)

144 
	#OETH_MODER_DLYCRCEN
 0x00001000

	)

145 
	#OETH_MODER_CRCEN
 0x00002000

	)

146 
	#OETH_MODER_HUGEN
 0x00004000

	)

147 
	#OETH_MODER_PAD
 0x00008000

	)

148 
	#OETH_MODER_RECSMALL
 0x00010000

	)

151 
	#OETH_INT_TXB
 0x00000001

	)

152 
	#OETH_INT_TXE
 0x00000002

	)

153 
	#OETH_INT_RXB
 0x00000004

	)

154 
	#OETH_INT_RXE
 0x00000008

	)

155 
	#OETH_INT_BUSY
 0x00000010

	)

156 
	#OETH_INT_TXC
 0x00000020

	)

157 
	#OETH_INT_RXC
 0x00000040

	)

160 
	#OETH_INT_MASK_TXB
 0x00000001

	)

161 
	#OETH_INT_MASK_TXE
 0x00000002

	)

162 
	#OETH_INT_MASK_RXF
 0x00000004

	)

163 
	#OETH_INT_MASK_RXE
 0x00000008

	)

164 
	#OETH_INT_MASK_BUSY
 0x00000010

	)

165 
	#OETH_INT_MASK_TXC
 0x00000020

	)

166 
	#OETH_INT_MASK_RXC
 0x00000040

	)

169 
	#OETH_CTRLMODER_PASSALL
 0x00000001

	)

170 
	#OETH_CTRLMODER_RXFLOW
 0x00000002

	)

171 
	#OETH_CTRLMODER_TXFLOW
 0x00000004

	)

174 
	#OETH_MIIMODER_CLKDIV
 0x000000FF

	)

175 
	#OETH_MIIMODER_NOPRE
 0x00000100

	)

176 
	#OETH_MIIMODER_RST
 0x00000200

	)

179 
	#OETH_MIICOMMAND_SCANSTAT
 0x00000001

	)

180 
	#OETH_MIICOMMAND_RSTAT
 0x00000002

	)

181 
	#OETH_MIICOMMAND_WCTRLDATA
 0x00000004

	)

184 
	#OETH_MIIADDRESS_FIAD
 0x0000001F

	)

185 
	#OETH_MIIADDRESS_RGAD
 0x00001F00

	)

188 
	#OETH_MIISTATUS_LINKFAIL
 0x00000001

	)

189 
	#OETH_MIISTATUS_BUSY
 0x00000002

	)

190 
	#OETH_MIISTATUS_NVALID
 0x00000004

	)

192 
	#RMII_MODE
 1

	)

193 
	#MII_MODE
 0

	)

195 
	#€th_puts
 
puts


	)

196 
	#€th_¥ötf
 
¥ötf


	)

199 
€th_˛ón_cuºít_bd
(
ëh_∂©f‹m_d©a
 *
__d©a
);

201 
ëhmac_£tup
(
ëh_∂©f‹m_d©a
 *
__d©a
);

202 
€th_íabÀ_€th_txrx
();

203 
€th_dißbÀ_€th_txrx
();

205 
u8
 *
€th_gë_txaddr
();

206 
€th_tx_∑ckë
(
u16
 
Àngth
);

207 
€th_tx_pkt_addr_w‹d_Æign
(*
pkt
, 
u16
 
Àngth
);

209 
u8
 
€th_tx_pkt
(*
buf
, 
u16
 
buf_Àn
);

210 
€th_rx_pkt
(*
¨g
, 
u8
 *
buf
, 
u16
 
buf_Àn
);

211 
€th_rx_pkt_ã°
(*
¨g
);

212 
u16
 
ëhî√t_checksum
(*
d©≠å
, 
u32
 
Àn
);

213 
€th_gë_rxpkt_addr_Àn
(
ëh_∂©f‹m_d©a
 *
__d©a
, 
€th_d©a
 *
_€th_d©a
);

214 
u32
 
check_Æl_rx_bd
();

215 
˛ór_Æl_rx_bd
();

216 
u32
 
check_Æl_tx_bd
();

217 
tx_•ìd
();

218 
rx_•ìd
();

219 
check_€th_°©s
();

220 
ª£t_mac
();

	@include_lib/net/device/eth/mdio_bus.h

1 #i‚de‡ 
__RMII_MII_IO_CONFIG_H__


2 
	#__RMII_MII_IO_CONFIG_H__


	)

4 
	~"gíîic/gpio.h
"

6 
	sso·w¨e_rmii
 {

7 
u8
 
	mphy_addr
;

8 
u8
 
	m˛k_pö
;

9 
u8
 
	md©_pö
;

13 
ëh_mii_wrôe
(
so·w¨e_rmii
 *
bus
, 
u16
 
ªgnum
, u16 
d©a
);

14 
u16
 
ëh_mii_ªad
(
so·w¨e_rmii
 *
rmii_bus
, u16 
ªgnum
);

	@include_lib/net/device/wifi_dev.h

1 #i‚de‡ 
__WIFI_DEV_H__


2 
	#__WIFI_DEV_H__


	)

5 
	~"sdio_ho°.h
"

6 
	~"£rvî/wifi_c⁄√˘.h
"

9 
	swifi_∂©f‹m_d©a
 {

10 
WIFI_MODULE
 
	mmoduÀ
;

11 
u32
 
	msdio_∑rm
;

12 
	mwakeup_p‹t
;

13 
	mcs_p‹t
;

14 
	mpowî_p‹t
;

64 
	mDEV_AP_MODE
 = 0x0,

65 
	mDEV_STA_MODE
,

66 
	mDEV_SMP_MODE
,

67 
	mDEV_P2P_MODE
,

68 
	mDEV_P2P_MODE_CHANGE
,

69 
	mDEV_NET_SCANF
,

70 
	mDEV_SET_AP_CONFIG
,

71 
	mDEV_GET_MAC
,

72 
	mDEV_SET_MAC
,

73 
	mDEV_SET_DEFAULT_MODE
,

74 
	mDEV_SAVE_DEFAULT_MODE
,

75 
	mDEV_CHANGE_SAVING_MODE
,

76 
	mDEV_SET_CB_FUNC
,

77 
	mDEV_NETWORK_START
,

78 
	mDEV_NETWORK_STOP
,

79 
	mDEV_SET_WIFI_CS
,

80 
	mDEV_SET_WIFI_WKUP
,

81 
	mDEV_SET_WIFI_POWER
,

82 
	mDEV_STA_STATUS
,

83 
	mDEV_GET_DEFAULT_WIFI_INFO
,

84 
	mDEV_GET_CUR_WIFI_INFO
,

85 
	mDEV_GET_STA_SSID_INFO
,

86 
	mDEV_SET_LAN_SETTING
,

87 
	mDEV_SET_WIFI_POWER_SAVE
,

88 
	mDEV_SET_WIFI_TX_PWR_LMT_ENABLE
,

89 
	mDEV_SET_WIFI_TX_PWR_BY_RATE
,

90 
	mDEV_GET_WIFI_CHANNEL
,

91 
	mDEV_WIFI_PM_SUSPEND
,

92 
	mDEV_WIFI_PM_RESUME
,

93 
	mDEV_GET_WIFI_SMP_RESULT
,

94 
	mDEV_SET_SMP_CONFIG_TIMEOUT_SEC
,

95 
	mDEV_SET_SMP_AIRKISS_KEY
,

96 
	mDEV_SET_SMP_AIRKISS_AES_ON_OFF
,

100 
	mSTATIC_IP
 = 0x0,

101 
	mDHCP_IP
 = 0x1,

104 
	scfg_öfo
 {

105 
u32
 
	mtimeout
;

106 
WIFI_MODE
 
	mmode
;

107 *
	mssid
;

108 *
	mpwd
;

109 *
	m≠_c⁄fig_èbÀ
;

110 (*
	mcb
)(*, 
	mNETWORK_EVENT
, *);

111 *
	m√t_¥iv
;

112 
	mf‹˚_deÁu…_mode
;

113 
	mp‹t_°©us
;

114 
	mtx_pwr_lmt_íabÀ
;

115 
	mtx_pwr_by_øã
;

116 
wifi_°a_c⁄√˘_°©e
 
	m°a_°©us
;

117 
√tdev_ssid_öfo
 *
	m°a_ssid_öfo
;

118 
smp_cfg_ªsu…
 
	msmp_cfg
;

119 
u32
 
	m°a_ssid_num
;

120 *
	m__œn_£âög_öfo
;

121 
u32
 
	m°a_ch™√l
;

122 
u8
 
	mp2p_rﬁe
;

126 
	#WIFI_PLATFORM_DATA_BEGIN
(
d©a
) \

127 c⁄° 
wifi_∂©f‹m_d©a
 
d©a
 = { \

128 

	)

129 
	#WIFI_PLATFORM_DATA_END
() \

130 };

	)

132 c⁄° 
devi˚_›î©i⁄s
 
wifi_dev_›s
;

	@include_lib/net/ftpclient/ftpclient.h

1 #i‚de‡
CYGONCE_NET_FTPCLIENT_FTPCLIENT_H


2 
	#CYGONCE_NET_FTPCLIENT_FTPCLIENT_H


	)

5 (*
	t·p_ªad_t
)(*
	t·p_˘x
, *
	tbuf
, 
	tbufsize
, *
	t¥iv
);

7 (*
	t·p_wrôe_t
)(*
	t·p_˘x
, *
	tbuf
, 
	tbufsize
, *
	t¥iv
);

8 (*
	t·p_ªad_dú_t
)(*
	t·p_˘x
, *
	tfûe_«me
, *
	t¥iv
);

13 *
ho°«me
;

14 *
u£∫ame
;

15 *
∑sswd
;

16 
timeout_mûl£c
;

20 *
fûíame
;

21 *
buf
;

22 
buf_size
;

23 
·p_ªad_t
 
·p_ªad
;

24 *
·p_¥iv
;

25 } 
ªad
;

27 *
buf
;

28 *
fûíame
;

29 
buf_size
;

30 
·p_ªad_t
 
·p_wrôe
;

31 *
·p_¥iv
;

32 } 
wrôe
;

34 *
li°_cmd
;

35 *
dú_«me
;

36 
·p_ªad_dú_t
 
·p_ªad_dú
;

37 *
·p_¥iv
;

38 } 
li°
;

40 *
fûíame
;

41 *
dú_«me
;

42 } 
dñ
;

44 *
dú_«me
;

45 } 
make_dú
;

47 *
dú_«me
;

48 *
ﬁd_«me
;

49 *
√w_«me
;

50 } 
ª«me
;

51 } 
mëhod
;

54 
exô_Êag
;

55 
ªq_exô_Êag
;

56 } 
	t·p_˘x
;

59 
	`·p_c⁄n_logö_ã°
(
·p_˘x
 *
˘x
);

68 
	`·p_gë
(
·p_˘x
 *
˘x
);

76 
	`·p_put
(
·p_˘x
 *
˘x
);

78 
	`·p_dñ_fûe
(
·p_˘x
 *
˘x
);

80 
	`·p_make_dú
(
·p_˘x
 *
˘x
);

82 
	`·p_ª«me_fûe
(
·p_˘x
 *
˘x
);

84 
	`·p_li°_dú
(
·p_˘x
 *
˘x
);

86 
	`·p_ˇn˚l
(
·p_˘x
 *
˘x
);

89 
	`·ps_gë
(*
fûíame
,

90 *
buf
,

91 
buf_size
,

92 *
ho°«me
,

93 *
u£∫ame
,

94 *
∑sswd
,

95 
·p_ªad_t
 
·p_ªad
,

96 *
·p_ªad_¥iv


103 
	#FTP_BAD
 -2

	)

104 
	#FTP_NOSUCHHOST
 -3

	)

105 
	#FTP_BADUSER
 -4

	)

106 
	#FTP_TOOBIG
 -5

	)

107 
	#FTP_BADFILENAME
 -6

	)

108 
	#FTP_NOMEMORY
 -7

	)

111 
	#FTP_LOGIN_OK
 0

	)

112 
	#FTP_LOGIN_ERR
 -1

	)

113 
	#FTP_CONNECT_ERR
 -2

	)

114 
	#FTP_SRV_REFUSED
 -3

	)

	@include_lib/net/ftpserver/stupid-ftpd.h

13 #i‚de‡
__STUPID_FTPD_H__


14 
	#__STUPID_FTPD_H__


	)

16 
	~<lwù/√tdb.h
>

17 
	~<lwù/sockës.h
>

18 
	~"os/os_com∑t.h
"

19 
	eFTPD_EVENT
 {

20 
	mFTP_CLI_CONNECTED
,

21 
	mFTP_CLI_CLOSED
,

24 
	s·pd_vfs_cfg
 {

25 *(*
	mf›í
)(c⁄° *
	m∑th
, c⁄° *
	mmode
);

26 (*
	mfwrôe
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

27 (*
	mf˛o£
)(*
	mfûe
);

30 
°upid_·pd_log
(c⁄° *
f‹m©
, ...);

31 
°upid_·pd_îr
(c⁄° *
f‹m©
, ...);

34 
°upid_·pd_öô
(c⁄° *
c⁄f_fûe
, (*
·pd_cb
)(
FTPD_EVENT
 
evít
, 
sockaddr_ö
 *
d°
));

36 
	`°upid_·pd_unöô
();

37 
	`°upid_vfs_ªg
(
·pd_vfs_cfg
 *
öfo
);

38 
	`hâp_gë_£rvî_dis˝¬e˘_˛i
(
sockaddr_ö
 *
d°_addr
);

	@include_lib/net/hostapdandwpa_supplicant/wpa_supplicant_event.h

2 #i‚de‡
_WPA_SUPPLICANT_EVENT_H_


3 
	#_WPA_SUPPLICANT_EVENT_H_


	)

5 
	ew∑_suµliˇ¡_°©e
 {

6 
	mSTA_WPA_DISCONNECTED
,

7 
	mSTA_WPA_CONNECT_TIMEOUT_NOT_FOUND_SSID
,

8 
	mSTA_WPA_CONNECT_TIMEOUT_ASSOCIAT_FAIL
,

9 
	mSTA_WPA_SCANNING
,

10 
	mSTA_WPA_SCAN_COMPLETED
,

11 
	mSTA_WPA_CONNECT_COMPLETED
,

14 
w∑_suµliˇ¡_°©e
 
w∑_suµliˇ¡_gë_°©e
();

	@include_lib/net/http/http_cli.h

1 #i‚de‡
_HTTP_CLI_H_


2 
	#_HTTP_CLI_H_


	)

17 
	mHERROR_REDIRECT
 = 1,

18 
	mHERROR_OK
 = 0,

19 
	mHERROR_MEM
 = -1,

20 
	mHERROR_HEADER
 = -2,

21 
	mHERROR_RESPOND
 = -3,

22 
	mHERROR_SOCK
 = -4,

23 
	mHERROR_CALLBACK
 = -5,

24 
	mHERROR_UNKNOWN
 = -6,

25 
	mHERROR_PARAM
 = -7,

26 
	mHERROR_REDIRECT_DEEP
 = -8,

27 
	mHERROR_BODY_ANALYSIS
 = -9,

28 
	mHERROR_SOCKHDL
 = -10,

29 } 
	thâpö_îr‹
;

36 
	mHTTPIN_HEADER
,

37 
	mHTTPIN_PROGRESS
,

38 
	mHTTPIN_FINISHED
,

39 
	mHTTPIN_ABORT
,

40 
	mHTTPIN_ERROR
,

41 
	mHTTPIN_NON_BLOCK
,

42 } 
	thâpö_°©us
;

46 (*
	thâp˛i_cb
)(*
	thâp˛i_˘x
, *
	tbuf
, 
	tsize
, *
	t¥iv
, 
	thâpö_°©us
 
	t°©us
);

52 
	s_hâp_body_obj
 {

53 *
p
;

54 
buf_Àn
;

55 
ªcv_Àn
;

56 
buf_cou¡
;

57 } 
	thâp_body_obj
;

59 
	s_hâp_d©a_box
 {

60 
Àn
;

61 
Ωå
;

62 
buf
[512];

63 } 
	thâp_d©a_box
;

65 
	#HTTP_POST_MORE_DATA


	)

66 
	#HTTP_USE_DATA_BOX


	)

70 
	shâp˛i_˘x
 {

71 *
sock_hdl
;

73 c⁄° *
uæ
;

74 *
ªdúe˘i⁄_uæ
;

75 c⁄° *
u£r_hâp_hódî
;

76 
lowR™ge
;

77 
highR™ge
;

78 
hâp˛i_cb
 
cb
;

79 *
¥iv
;

80 c⁄° *
po°_d©a
;

81 *
d©a_f‹m©
;

82 
d©a_Àn
;

83 
timeout_mûl£c
;

84 *
c⁄√˘i⁄
;

86 
c⁄ã¡_Àngth
;

87 
c⁄ã¡_ty≥
[64];

88 
å™s„r_ícodög
[64];

91 
exô_Êag
;

92 
ªq_exô_Êag
;

94 
chunked_œ°_ªad
;

95 
chunked_hódî_föd
[10];

96 
chunked_hódî_off£t
;

97 
suµ‹t_ønge
;

98 #ifde‡
HTTP_POST_MORE_DATA


99 *
m‹e_d©a
;

100 *
m‹e_d©a_Àn
;

103 #ifde‡
HTTP_USE_DATA_BOX


104 
hâp_d©a_box
 
box
;

106 } 
	thâp˛i_˘x
;

108 
	s√t_dow∆ﬂd_›s
 {

109 
	`hâpö_îr‹
(*
öô
)(
hâp˛i_˘x
 *
˘x
);

110 (*
˛o£
)(
hâp˛i_˘x
 *
˘x
);

111 (*
quô
)(
hâp˛i_˘x
 *
˘x
);

112 (*
ªad
)(
hâp˛i_˘x
 *
˘x
, *
ªcvbuf
, 
Àn
);

124 
hâpö_îr‹
 
	`hâp˛i_gë
(
hâp˛i_˘x
 *
˘x
);

133 
hâpö_îr‹
 
	`hâp˛i_po°
(
hâp˛i_˘x
 *
˘x
);

140 
	`hâp˛i_ˇn˚l
(
hâp˛i_˘x
 *
˘x
);

149 
hâpö_îr‹
 
	`hâps˛i_gë
(
hâp˛i_˘x
 *
˘x
);

158 
hâpö_îr‹
 
	`hâps˛i_po°
(
hâp˛i_˘x
 *
˘x
);

165 
	`hâps˛i_ˇn˚l
(
hâp˛i_˘x
 *
˘x
);

174 
	`hâp˛i_c⁄ã¡_Àngth
(
hâp˛i_˘x
 *
˘x
);

176 
hâpö_îr‹
 
	`hâp˛i_po°_hódî
(
hâp˛i_˘x
 *
˘x
);

178 
hâpö_îr‹
 
	`hâp˛i_chunked_£nd
(
hâp˛i_˘x
 *
˘x
);

180 c⁄° 
√t_dow∆ﬂd_›s
 
hâp_›s
;

182 c⁄° 
√t_dow∆ﬂd_›s
 
hâps_›s
;

184 
	`å™s„r_chunked_∑r£
(
hâp˛i_˘x
 *
˘x
, *
ª˚ive_buf
, 
ªcv_Àngth
, (*
cb
)(*, , *), *
¥iv
);

186 
	`å™s„r_chunked_™Æysis
(*
ª˚ive_buf
, 
ªcv_Àngth
);

	@include_lib/net/http/http_server.h

1 #i‚de‡ 
__HTTP_SERVER_H__


2 
	#__HTTP_SERVER_H__


	)

4 
hâp_gë_£rvî_öô
(
p‹t
);

6 
hâp_gë_£rvî_dis˝¬e˘_˛i
(
sockaddr_ö
 *
d°_addr
);

8 
hâp_gë_£rvî_unöô
();

	@include_lib/net/jieli_net/dev_net_mqtt.h

1 #i‚de‡
__DEV_NET_MQTT_H


2 
	#__DEV_NET_MQTT_H


	)

4 
	~"ty≥def.h
"

6 (*
	tjl_mqâ_func
)(c⁄° *
	tcmd
, c⁄° *
	t∑rm
);

7 
	`jõli_mqâ_msg_cb_ªg
(
jl_mqâ_func
 
sys
, jl_mqâ_fun¯
u£r
);

9 
	`jõli_mqâ_push
(*
msg_«me
, *
buf
, 
buf_Àn
);

10 
	`jõli_mqâ_push_°©us
(*
°©us_cmd
, *
°©us_∑rm
);

	@include_lib/net/jieli_net/dev_net_oauth.h

2 #i‚de‡
__DEV_NET_OAUTH_H


3 
	#__DEV_NET_OAUTH_H


	)

5 
	~"ty≥def.h
"

8 
dev_√t_ﬂuth_£t_u£r
(*
u£∫ame
, *
∑ssw‹d
, *
dev_mac
);

10 
jõlüµ_ch©_£nd_voi˚
(*
fûíame
);

11 
jõlüµ_ch©_£nd_voi˚_buf„r
(*
buf„r
, 
u32
 
Àn
);

13 *
dev_√t_gë_ac˚ss_tokí
();

17 (*
	tjl_ch©_voi˚
)(*
	tty≥
, *
	tbuf
);

18 
	`jõlüµ_ch©_voi˚_£t_ªad
();

19 
	`jõlüµ_ch©_gë_√w_voi˚
(
jl_ch©_voi˚
 
cb
);

20 
	`jõlüµ_ch©_gë_⁄e_voi˚
(
jl_ch©_voi˚
 
cb
);

21 
	`jõlüµ_ch©_gë_√xt_voi˚
(
jl_ch©_voi˚
 
cb
);

22 
	`jõlüµ_ch©_gë_¥ev_voi˚
(
jl_ch©_voi˚
 
cb
);

24 
	`jõli_gë_music_uæ
(c⁄° *
°r
, 
u32
 
Æbum_id
, u32 
mëa_¢
, 
u8
 *
d©a
, u32 
d©a_Àn
);

	@include_lib/net/jieli_net/jieli_net.h

1 #i‚de‡
__JIELI_NET_H


2 
	#__JIELI_NET_H


	)

5 
	mJIELI_NET_ERROR_OK
 = 0,

6 
	mJIELI_NET_ERROR_ONLINE
,

8 
	mOAUTH_ERROR_USER
,

9 
	mOAUTH_ERROR_MALLOC
,

10 
	mOAUTH_ERROR_SOCK_CONNECT
,

11 
	mOAUTH_ERROR_SOCK_WRITE
,

12 
	mOAUTH_ERROR_SOCK_READ
,

13 
	mOAUTH_ERROR_BIND
,

14 
	mOAUTH_ERROR_TOKEN
,

15 
	mOAUTH_ERROR_GET_WAN_IP
,

16 
	mOAUTH_ERROR_SEND
,

17 
	mOAUTH_ERROR_FILE
,

18 
	mOAUTH_ERROR_JSON
,

19 
	mOAUTH_ERROR_VOICE_INFO
,

21 
	mJIELI_MQTT_ERR_MALLOC
,

22 
	mJIELI_MQTT_ERR_PTR
,

23 
	mJIELI_MQTT_ERR_STU
,

24 
	mJIELI_MQTT_ERR_CLOSE
,

25 
	mJIELI_MQTT_ERR_SEND
,

26 
	mJIELI_MQTT_ERR_USER
,

27 
	mJIELI_MQTT_ERR_JSON
,

30 
jõlüµ_√t_⁄löe
();

31 
jõlüµ_√t_ªady
();

33 
jõli_√t_›í
();

34 
jõli_√t_˛o£
();

	@include_lib/net/jieli_net/jieli_ota.h

1 #i‚de‡
__JIELI_OTA_H


2 
	#__JIELI_OTA_H


	)

4 
	~"ty≥def.h
"

6 (*
	tjl_Ÿa_cb
)(*
	tvî
, *
	tuæ
);

7 
	`jõli_Ÿa_po°
(
jl_Ÿa_cb
 
cb
);

9 
	`jõli_Ÿa_£t_öfo
(*
key
, *
£¸ë
, *
cur_vî
);

	@include_lib/net/jieli_net/jieli_result.h

1 #i‚de‡
__JIELI_RESULT_H


2 
	#__JIELI_RESULT_H


	)

4 
	~"ty≥def.h
"

7 
	mJL_RESULT_ERROR_OK
 = 0,

8 
	mJL_RESULT_ERROR_MALLOC
,

9 
	mJL_RESULT_ERROR_JSON
,

10 
	mJL_RESULT_ERROR_UNKOWN_CMD
,

14 
	mJL_CMD_NULL
 = 0,

15 
	mJL_CMD_TEXT
,

16 
	mJL_CMD_VOICE
,

17 
	mJL_CMD_IMAGE
,

19 
	mJL_CMD_MEDIA_ID
,

22 (*
	tjl_ªsu…_func
)(*
	thdl
, 
	tcmd
, *
	tbuf
, 
	t∑rm
);

23 
	`jõli_ªsu…
(*
ö
, 
jl_ªsu…_func
 
cb
, *
cb_hdl
);

24 
	`jõli_wech©_ªsu…
(*
ö
, 
jl_ªsu…_func
 
cb
, *
cb_hdl
);

26 *
	`jõli_ªsu…_po°
(*
cmd
, *
∑rm
);

	@include_lib/net/jieli_net/wechat_server.h

15 #i‚de‡
NET_AUDIO_SERVER_H


16 
	#NET_AUDIO_SERVER_H


	)

18 
	~"ty≥def.h
"

19 
	~"os/os_≠i.h
"

22 
	#WECHAT_REQ
 0x1

	)

25 
	mWECHAT_NEXT_SONG
 = 0,

26 
	mWECHAT_PRE_SONG
,

27 
	mWECHAT_PAUSE_SONG
,

28 
	mWECHAT_CONTINUE_SONG
,

29 
	mWECHAT_VOLUME_CHANGE
,

30 
	mWECHAT_MEDIA_END
,

31 
	mWECHAT_PROGRESS_INFO
,

32 
	mWECHAT_KILL_SELF_TASK
 = 0xfe,

36 
	mWECHAT_SERVER_SPEECH_URL_EVENT
 = 0,

37 
	mWECHAT_SERVER_AMR_ERR_EVENT
,

42 
	mWECHAT_STATE_OPEN
 = 0x0,

43 
	mWECHAT_STATE_START
,

44 
	mWECHAT_STATE_ENC_AMR_START
,

45 
	mWECHAT_STATE_ENC_AMR_STOP
,

46 
	mWECHAT_STATE_SEND
,

47 
	mWECHAT_STATE_PAUSE
,

48 
	mWECHAT_STATE_STOP
,

49 
	mWECHAT_STATE_CLOSE
,

52 
	swech©_ªq
 {

54 *
	mfûíame
;

55 *
	mu£∫ame
;

56 *
	m∑ssw‹d
;

57 *
	mdev_mac
;

61 
u8
 
	mcmd
;

62 
	mîr
;

63 
OS_SEM
 
	m£m
;

	@include_lib/net/json_c/arraylist.h

12 #i‚de‡
_¨øyli°_h_


13 
	#_¨øyli°_h_


	)

15 #ifde‡
__˝lu•lus


19 
	#ARRAY_LIST_DEFAULT_SIZE
 32

	)

21 (
¨øy_li°_‰ì_‚
)(*
	td©a
);

23 
	s¨øy_li°
 {

24 **
¨øy
;

25 
Àngth
;

26 
size
;

27 
¨øy_li°_‰ì_‚
 *
‰ì_‚
;

30 
¨øy_li°
 *

31 
¨øy_li°_√w
(
¨øy_li°_‰ì_‚
 *
‰ì_‚
);

34 
¨øy_li°_‰ì
(
¨øy_li°
 *
Æ
);

37 
¨øy_li°_gë_idx
(
¨øy_li°
 *
Æ
, 
i
);

40 
¨øy_li°_put_idx
(
¨øy_li°
 *
Æ
, 
i
, *
d©a
);

43 
¨øy_li°_add
(
¨øy_li°
 *
Æ
, *
d©a
);

46 
¨øy_li°_Àngth
(
¨øy_li°
 *
Æ
);

49 
¨øy_li°_s‹t
(
¨øy_li°
 *
¨r
, (*
com∑r
)(const *, const *));

51 *
¨øy_li°_b£¨ch
(c⁄° **
key
,

52 
¨øy_li°
 *
¨r
,

53 (*
s‹t_‚
)(const *, const *));

56 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/bits.h

15 #i‚de‡
_bôs_h_


16 
	#_bôs_h_


	)

21 
	#hexdigô
(
x
Ë(((xË<'9'Ë? (xË- '0' : ((xË& 7Ë+ 9)

	)

25 
	#îr‹_±r
(
îr‹
Ë((*Îº‹)

	)

29 
	#îr‹_des¸ùti⁄
(
îr‹
Ë(
	`js⁄_tokíî_gë_îr‹
”º‹))

	)

33 
	#is_îr‹
(
±r
Ë’å =
NULL
)

	)

	@include_lib/net/json_c/config_j.h

11 
	#HAVE_DECL_INFINITY


	)

16 
	#HAVE_DECL_ISINF


	)

21 
	#HAVE_DECL_ISNAN


	)

43 
	#HAVE_FCNTL_H


	)

46 
	#HAVE_INTTYPES_H


	)

49 
	#HAVE_LIMITS_H


	)

52 
	#HAVE_LOCALE_H


	)

56 
	#HAVE_MALLOC


	)

62 
	#HAVE_OPEN


	)

66 
	#HAVE_REALLOC


	)

72 
	#HAVE_SNPRINTF


	)

75 
	#HAVE_STDARG_H


	)

78 
	#HAVE_STDINT_H


	)

81 
	#HAVE_STDLIB_H


	)

87 
	#HAVE_STRDUP
 1

	)

90 
	#HAVE_STRERROR


	)

96 
	#HAVE_STRING_H


	)

99 
	#HAVE_STRNCASECMP
 1

	)

105 
	#HAVE_SYS_CDEFS_H


	)

108 
	#HAVE_SYS_PARAM_H
 1

	)

111 
	#HAVE_SYS_STAT_H


	)

114 
	#HAVE_SYS_TYPES_H


	)

117 
	#HAVE_UNISTD_H
 1

	)

123 
	#HAVE_VPRINTF


	)

126 
	#HAVE_VSNPRINTF


	)

129 
	#HAVE_VSYSLOG
 0

	)

132 
	#JSON_C_HAVE_INTTYPES_H


	)

160 
	#STDC_HEADERS


161 

	)

	@include_lib/net/json_c/debug.h

13 #i‚de‡
_DEBUG_H_


14 
	#_DEBUG_H_


	)

16 
	~<°dlib.h
>

18 #ifde‡
__˝lu•lus


22 
mc_£t_debug
(
debug
);

23 
mc_gë_debug
();

25 
mc_£t_sy¶og
(
sy¶og
);

27 
mc_debug
(c⁄° *
msg
, ...);

28 
mc_îr‹
(c⁄° *
msg
, ...);

29 
mc_öfo
(c⁄° *
msg
, ...);

31 #i‚de‡
__STRING


32 
	#__STRING
(
x
Ë#x

	)

35 #i‚de‡
PARSER_BROKEN_FIXED


37 
	#JASSERT
(
c⁄d
Ëdÿ{} 0)

	)

41 
	#JASSERT
(
c⁄d
) do { \

42 i‡(!(
c⁄d
)) { \

43 
	`mc_îr‹
("cjs⁄ás£π faûuª %s:%d : c⁄d \"" 
	`__STRING
(
c⁄d
Ë"Áûed\n", 
__FILE__
, 
__LINE__
); \

45 
	`ab‹t
(); \

47 } 0)

	)

51 
	#MC_ERROR
(
x
, ...Ë
	`mc_îr‹
(x, ##
__VA_ARGS__
)

	)

53 #ifde‡
MC_MAINTAINER_MODE


54 
	#MC_SET_DEBUG
(
x
Ë
	`mc_£t_debug
(x)

	)

55 
	#MC_GET_DEBUG
(Ë
	`mc_gë_debug
()

	)

56 
	#MC_SET_SYSLOG
(
x
Ë
	`mc_£t_sy¶og
(x)

	)

57 
	#MC_DEBUG
(
x
, ...Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

58 
	#MC_INFO
(
x
, ...Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

60 
	#MC_SET_DEBUG
(
x
Ëi‡(0Ë
	`mc_£t_debug
(x)

	)

61 
	#MC_GET_DEBUG
(Ë(0)

	)

62 
	#MC_SET_SYSLOG
(
x
Ëi‡(0Ë
	`mc_£t_sy¶og
(x)

	)

63 
	#MC_DEBUG
(
x
, ...Ëi‡(0Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

64 
	#MC_INFO
(
x
, ...Ëi‡(0Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

67 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json.h

13 #i‚de‡
_js⁄_h_


14 
	#_js⁄_h_


	)

16 #ifde‡
__˝lu•lus


19 
	~"gíîic/ty≥def.h
"

20 
	~"js⁄_debug.h
"

21 
	~"lökhash.h
"

22 
	~"¨øyli°.h
"

23 
	~"js⁄_utû.h
"

24 
	~"js⁄_obje˘.h
"

25 
	~"js⁄_tokíî.h
"

26 
	~"js⁄_obje˘_ôî©‹.h
"

27 
	~"js⁄_c_vîsi⁄.h
"

28 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_c_config.h

3 
	#__LITTLE_ENDIAN
 1234

	)

4 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

7 #unde‡
ENABLE_RDRAND


10 #unde‡
HAS_GNU_WARNING_LONG


15 
	#HAVE_DECL_INFINITY
 1

	)

21 
	#HAVE_DECL_ISINF
 1

	)

27 
	#HAVE_DECL_ISNAN
 1

	)

32 
	#HAVE_DECL_NAN
 1

	)

37 
	#HAVE_DECL__FINITE
 1

	)

41 
	#HAVE_DECL__ISNAN
 1

	)

44 
	#HAVE_DLFCN_H
 1

	)

47 
	#HAVE_DOPRNT
 1

	)

51 
	#HAVE_ENDIAN_H
 0

	)

53 
	#HAVE_FCNTL_H
 1

	)

56 
	#HAVE_INTTYPES_H
 1

	)

59 
	#HAVE_LIMITS_H
 1

	)

63 #unde‡
HAVE_LOCALE_H


67 
	#HAVE_MALLOC
 1

	)

70 
	#HAVE_MEMORY_H
 1

	)

73 
	#HAVE_OPEN
 1

	)

77 
	#HAVE_REALLOC
 1

	)

80 #unde‡
HAVE_SETLOCALE


83 
	#HAVE_SNPRINTF


	)

86 
	#HAVE_STDARG_H
 1

	)

89 
	#HAVE_STDINT_H
 1

	)

92 
	#HAVE_STDLIB_H
 1

	)

95 
	#HAVE_STRCASECMP
 1

	)

98 
	#HAVE_STRDUP
 1

	)

101 
	#HAVE_STRERROR
 1

	)

104 #unde‡
HAVE_STRINGS_H


107 
	#HAVE_STRING_H
 1

	)

110 
	#HAVE_STRNCASECMP
 1

	)

113 #unde‡
HAVE_SYSLOG_H


116 
	#HAVE_SYS_CDEFS_H
 1

	)

119 #unde‡
HAVE_SYS_PARAM_H


122 
	#HAVE_SYS_STAT_H
 1

	)

125 
	#HAVE_SYS_TYPES_H
 1

	)

128 #unde‡
HAVE_UNISTD_H


131 #unde‡
HAVE_VASPRINTF


134 
	#HAVE_VPRINTF
 1

	)

137 
	#HAVE_VSNPRINTF
 1

	)

140 #unde‡
HAVE_VSYSLOG


144 #unde‡
LT_OBJDIR


150 
	#PACKAGE
 "js⁄-c"

	)

153 
	#PACKAGE_BUGREPORT
 "js⁄-c@googÀgroups.com"

	)

156 
	#PACKAGE_NAME
 "JSON C Libøry"

	)

159 
	#PACKAGE_STRING
 "JSON C Libøry 0.12.99"

	)

162 
	#PACKAGE_TARNAME
 "js⁄-c"

	)

165 
	#PACKAGE_URL
 "hâps://gôhub.com/js⁄-c/js⁄-c"

	)

168 
	#PACKAGE_VERSION
 "0.12.99"

	)

171 
	#STDC_HEADERS
 1

	)

174 
	#VERSION
 "0.12.99"

	)

	@include_lib/net/json_c/json_c_version.h

8 #i‚de‡
_js⁄_c_vîsi⁄_h_


9 
	#_js⁄_c_vîsi⁄_h_


	)

11 
	#JSON_C_MAJOR_VERSION
 0

	)

12 
	#JSON_C_MINOR_VERSION
 12

	)

13 
	#JSON_C_MICRO_VERSION
 99

	)

14 
	#JSON_C_VERSION_NUM
 ((
JSON_C_MAJOR_VERSION
 << 16) | \

15 (
JSON_C_MINOR_VERSION
 << 8) | \

16 
JSON_C_MICRO_VERSION
)

	)

17 
	#JSON_C_VERSION
 "0.12.99"

	)

19 c⁄° *
js⁄_c_vîsi⁄
();

20 
js⁄_c_vîsi⁄_num
();

	@include_lib/net/json_c/json_config.h

4 
	#JSON_C_HAVE_INTTYPES_H
 1

	)

	@include_lib/net/json_c/json_debug.h

13 #i‚de‡
_DEBUG_H_


14 
	#_DEBUG_H_


	)

16 
	~<°dlib.h
>

18 #ifde‡
__˝lu•lus


22 
mc_£t_debug
(
debug
);

23 
mc_gë_debug
();

25 
mc_£t_sy¶og
(
sy¶og
);

27 
mc_debug
(c⁄° *
msg
, ...);

28 
mc_îr‹
(c⁄° *
msg
, ...);

29 
mc_öfo
(c⁄° *
msg
, ...);

31 #i‚de‡
__STRING


32 
	#__STRING
(
x
Ë#x

	)

35 #i‚de‡
PARSER_BROKEN_FIXED


37 
	#JASSERT
(
c⁄d
Ëdÿ{} 0)

	)

41 
	#JASSERT
(
c⁄d
) do { \

42 i‡(!(
c⁄d
)) { \

43 
	`mc_îr‹
("cjs⁄ás£π faûuª %s:%d : c⁄d \"" 
	`__STRING
(
c⁄d
Ë"Áûed\n", 
__FILE__
, 
__LINE__
); \

45 
	`ab‹t
(); \

47 } 0)

	)

51 
	#MC_ERROR
(
x
, ...Ë
	`mc_îr‹
(x, ##
__VA_ARGS__
)

	)

53 #ifde‡
MC_MAINTAINER_MODE


54 
	#MC_SET_DEBUG
(
x
Ë
	`mc_£t_debug
(x)

	)

55 
	#MC_GET_DEBUG
(Ë
	`mc_gë_debug
()

	)

56 
	#MC_SET_SYSLOG
(
x
Ë
	`mc_£t_sy¶og
(x)

	)

57 
	#MC_DEBUG
(
x
, ...Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

58 
	#MC_INFO
(
x
, ...Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

60 
	#MC_SET_DEBUG
(
x
Ëi‡(0Ë
	`mc_£t_debug
(x)

	)

61 
	#MC_GET_DEBUG
(Ë(0)

	)

62 
	#MC_SET_SYSLOG
(
x
Ëi‡(0Ë
	`mc_£t_sy¶og
(x)

	)

63 
	#MC_DEBUG
(
x
, ...Ëi‡(0Ë
	`mc_debug
(x, ##
__VA_ARGS__
)

	)

64 
	#MC_INFO
(
x
, ...Ëi‡(0Ë
	`mc_öfo
(x, ##
__VA_ARGS__
)

	)

67 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_inttypes.h

2 #i‚de‡
_js⁄_öây≥s_h_


3 
	#_js⁄_öây≥s_h_


	)

5 
	~"js⁄_c⁄fig.h
"

7 #ifde‡
JSON_C_HAVE_INTTYPES_H


9 
	~<öây≥s.h
>

12 
	~<°döt.h
>

14 
	#PRId64
 "I64d"

	)

15 
	#SCNd64
 "I64d"

	)

	@include_lib/net/json_c/json_object.h

13 #i‚de‡
_js⁄_obje˘_h_


14 
	#_js⁄_obje˘_h_


	)

16 #ifde‡
__GNUC__


17 
	#THIS_FUNCTION_IS_DEPRECATED
(
func
) func

18 #ñi‡
	`deföed
(
_MSC_VER
)

	)

19 
	#THIS_FUNCTION_IS_DEPRECATED
(
func
Ë
	`__de˛•ec
(
dïªˇãd
Ë
	)
func

21 
	#THIS_FUNCTION_IS_DEPRECATED
(
func
Ë
	)
func

24 
	~"js⁄_öây≥s.h
"

26 #ifde‡
__˝lu•lus


30 
	#JSON_OBJECT_DEF_HASH_ENTRIES
 16

	)

37 
	#JSON_C_TO_STRING_PLAIN
 0

	)

43 
	#JSON_C_TO_STRING_SPACED
 (1<<0)

	)

52 
	#JSON_C_TO_STRING_PRETTY
 (1<<1)

	)

60 
	#JSON_C_TO_STRING_PRETTY_TAB
 (1<<3)

	)

64 
	#JSON_C_TO_STRING_NOZERO
 (1<<2)

	)

66 #unde‡
FALSE


67 
	#FALSE
 ((
js⁄_boﬁ
)0)

	)

69 #unde‡
TRUE


70 
	#TRUE
 ((
js⁄_boﬁ
)1)

	)

72 c⁄° *
js⁄_numbî_ch¨s
;

73 c⁄° *
js⁄_hex_ch¨s
;

76 
	sjs⁄_obje˘_ôî
 {

77 *
	gkey
;

78 
js⁄_obje˘
 *
	gvÆ
;

79 
lh_íåy
 *
	gíåy
;

84 
	tjs⁄_boﬁ
;

85 
¥ötbuf
 
	t¥ötbuf
;

86 
lh_èbÀ
 
	tlh_èbÀ
;

87 
¨øy_li°
 
	t¨øy_li°
;

88 
js⁄_obje˘
 
	tjs⁄_obje˘
;

89 
js⁄_obje˘_ôî
 
	tjs⁄_obje˘_ôî
;

90 
js⁄_tokíî
 
	tjs⁄_tokíî
;

95 (
	gjs⁄_obje˘_dñëe_‚
)(
	tjs⁄_obje˘
 *
	tjso
, *
	tu£rd©a
);

100 (
	gjs⁄_obje˘_to_js⁄_°rög_‚
)(
	tjs⁄_obje˘
 *
	tjso
,

101 
	t¥ötbuf
 *
	tpb
,

102 
	tÀvñ
,

103 
	tÊags
);

107 
	ejs⁄_ty≥
 {

109 
	gjs⁄_ty≥_nuŒ
,

110 
	gjs⁄_ty≥_boﬁón
,

111 
	gjs⁄_ty≥_doubÀ
,

112 
	gjs⁄_ty≥_öt
,

113 
	gjs⁄_ty≥_obje˘
,

114 
	gjs⁄_ty≥_¨øy
,

115 
	gjs⁄_ty≥_°rög


116 } 
	tjs⁄_ty≥
;

126 
js⁄_obje˘
 *
js⁄_obje˘_gë
(js⁄_obje˘ *
obj
);

136 
js⁄_obje˘_put
(
js⁄_obje˘
 *
obj
);

150 
js⁄_obje˘_is_ty≥
(
js⁄_obje˘
 *
obj
, 
js⁄_ty≥
 
ty≥
);

166 
js⁄_ty≥
 
js⁄_obje˘_gë_ty≥
(
js⁄_obje˘
 *
obj
);

178 c⁄° *
js⁄_obje˘_to_js⁄_°rög
(
js⁄_obje˘
 *
obj
);

186 c⁄° *
js⁄_obje˘_to_js⁄_°rög_ext
(
js⁄_obje˘
 *
obj
, 

187 
Êags
);

215 
js⁄_obje˘_£t_£rülizî
(
js⁄_obje˘
 *
jso
,

216 
js⁄_obje˘_to_js⁄_°rög_‚
 
to_°rög_func
,

217 *
u£rd©a
,

218 
js⁄_obje˘_dñëe_‚
 *
u£r_dñëe
);

227 
js⁄_obje˘_dñëe_‚
 
	gjs⁄_obje˘_‰ì_u£rd©a
;

238 
js⁄_obje˘_to_js⁄_°rög_‚
 
	gjs⁄_obje˘_u£rd©a_to_js⁄_°rög
;

253 
js⁄_obje˘
 *
js⁄_obje˘_√w_obje˘
();

259 
lh_èbÀ
 *
js⁄_obje˘_gë_obje˘
(
js⁄_obje˘
 *
obj
);

264 
js⁄_obje˘_obje˘_Àngth
(
js⁄_obje˘
 *
obj
);

282 
js⁄_obje˘_obje˘_add
(
js⁄_obje˘
 *
obj
, c⁄° *
key
,

283 
js⁄_obje˘
 *
vÆ
);

302 
THIS_FUNCTION_IS_DEPRECATED
(
js⁄_obje˘
 *
js⁄_obje˘_obje˘_gë
(js⁄_obje˘ *
obj
,

303 c⁄° *
key
));

323 
js⁄_boﬁ
 
js⁄_obje˘_obje˘_gë_ex
(
js⁄_obje˘
 *
obj
,

324 c⁄° *
key
,

325 
js⁄_obje˘
 **
vÆue
);

336 
js⁄_obje˘_obje˘_dñ
(
js⁄_obje˘
 *
obj
, c⁄° *
key
);

351 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
Ë&& 
__STDC_VERSION__
 >= 199901L

353 
	#js⁄_obje˘_obje˘_f‹óch
(
obj
,
key
,
vÆ
) \

354 *
key
 = 
NULL
; \

355 
js⁄_obje˘
 *
vÆ
 
	`__©åibuã__
((
__unu£d__
)Ë
NULL
; \

356 
lh_íåy
 *
íåy
 ## 
key
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
, *
íåy_√xt
 ## key = 
NULL
; \

357 ({ if(
íåy
 ## 
key
) { \

358 
key
 = (*)
íåy
 ## key->
k
; \

359 
vÆ
 = (
js⁄_obje˘
*)
íåy
 ## 
key
->
v
; \

360 
íåy_√xt
 ## 
key
 = 
íåy
 ## key->
√xt
; \

361 } ; 
íåy
 ## 
key
; }); \

362 
íåy
 ## 
key
 = 
íåy_√xt
 ## key )

	)

366 
	#js⁄_obje˘_obje˘_f‹óch
(
obj
,
key
,
vÆ
) \

367 *
key
;\

368 
js⁄_obje˘
 *
vÆ
; \

369 
lh_íåy
 *
íåy
 ## 
key
; \

370 
lh_íåy
 *
íåy_√xt
 ## 
key
 = 
NULL
; \

371 
íåy
 ## 
key
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
; \

372 (
íåy
 ## 
key
 ? ( \

373 
key
 = (*)
íåy
 ## key->
k
, \

374 
vÆ
 = (
js⁄_obje˘
*)
íåy
 ## 
key
->
v
, \

375 
íåy_√xt
 ## 
key
 = 
íåy
 ## key->
√xt
, \

376 
íåy
 ## 
key
) : 0); \

377 
íåy
 ## 
key
 = 
íåy_√xt
 ## key)

	)

385 
	#js⁄_obje˘_obje˘_f‹óchC
(
obj
,
ôî
) \

386 
ôî
.
íåy
 = 
	`js⁄_obje˘_gë_obje˘
(
obj
)->
hód
; (ôî.íåy ? (ôî.
key
 = (*)ôî.íåy->
k
, iãr.
vÆ
 = (
js⁄_obje˘
*)ôî.íåy->
v
, iãr.íåyË: 0); iãr.íåy = iãr.íåy->
√xt
)

	)

393 
js⁄_obje˘
 *
js⁄_obje˘_√w_¨øy
();

399 
¨øy_li°
 *
js⁄_obje˘_gë_¨øy
(
js⁄_obje˘
 *
obj
);

405 
js⁄_obje˘_¨øy_Àngth
(
js⁄_obje˘
 *
obj
);

415 
js⁄_obje˘_¨øy_s‹t
(
js⁄_obje˘
 *
jso
, (*
s‹t_‚
)(const *, const *));

431 
js⁄_obje˘
 *
js⁄_obje˘_¨øy_b£¨ch
(

432 c⁄° 
js⁄_obje˘
 *
key
,

433 c⁄° 
js⁄_obje˘
 *
jso
,

434 (*
s‹t_‚
)(const *, const *));

445 
js⁄_obje˘_¨øy_add
(
js⁄_obje˘
 *
obj
,

446 
js⁄_obje˘
 *
vÆ
);

463 
js⁄_obje˘_¨øy_put_idx
(
js⁄_obje˘
 *
obj
, 
idx
,

464 
js⁄_obje˘
 *
vÆ
);

471 
js⁄_obje˘
 *
js⁄_obje˘_¨øy_gë_idx
(js⁄_obje˘ *
obj
,

472 
idx
);

480 
js⁄_obje˘
 *
js⁄_obje˘_√w_boﬁón
(
js⁄_boﬁ
 
b
);

493 
js⁄_boﬁ
 
js⁄_obje˘_gë_boﬁón
(
js⁄_obje˘
 *
obj
);

504 
js⁄_obje˘
 *
js⁄_obje˘_√w_öt
(
öt32_t
 
i
);

511 
js⁄_obje˘
 *
js⁄_obje˘_√w_öt64
(
öt64_t
 
i
);

528 
öt32_t
 
js⁄_obje˘_gë_öt
(
js⁄_obje˘
 *
obj
);

543 
öt64_t
 
js⁄_obje˘_gë_öt64
(
js⁄_obje˘
 *
obj
);

552 
js⁄_obje˘
 *
js⁄_obje˘_√w_doubÀ
(
d
);

575 
js⁄_obje˘
 *
js⁄_obje˘_√w_doubÀ_s
(
d
, c⁄° *
ds
);

600 
js⁄_obje˘_gë_doubÀ
(
js⁄_obje˘
 *
obj
);

612 
js⁄_obje˘
 *
js⁄_obje˘_√w_°rög
(c⁄° *
s
);

614 
js⁄_obje˘
 *
js⁄_obje˘_√w_°rög_Àn
(c⁄° *
s
, 
Àn
);

627 c⁄° *
js⁄_obje˘_gë_°rög
(
js⁄_obje˘
 *
obj
);

637 
js⁄_obje˘_gë_°rög_Àn
(
js⁄_obje˘
 *
obj
);

639 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_object_iterator.h

23 #i‚de‡
JSON_OBJECT_ITERATOR_H


24 
	#JSON_OBJECT_ITERATOR_H


	)

26 
	~<°ddef.h
>

28 #ifde‡
__˝lu•lus


35 
js⁄_obje˘_ôî_öfo_
;

41 
	sjs⁄_obje˘_ôî©‹
 {

42 c⁄° *
›aque_
;

49 
js⁄_obje˘
;

74 
js⁄_obje˘_ôî©‹


75 
js⁄_obje˘_ôî_öô_deÁu…
();

108 
js⁄_obje˘_ôî©‹


109 
js⁄_obje˘_ôî_begö
(
js⁄_obje˘
 *
obj
);

139 
js⁄_obje˘_ôî©‹


140 
js⁄_obje˘_ôî_íd
(c⁄° 
js⁄_obje˘
 *
obj
);

158 
js⁄_obje˘_ôî_√xt
(
js⁄_obje˘_ôî©‹
 *
ôî
);

177 
js⁄_obje˘_ôî_≥ek_«me
(c⁄° 
js⁄_obje˘_ôî©‹
 *
ôî
);

199 
js⁄_obje˘
 *

200 
js⁄_obje˘_ôî_≥ek_vÆue
(c⁄° 
js⁄_obje˘_ôî©‹
 *
ôî
);

229 
js⁄_boﬁ


230 
js⁄_obje˘_ôî_equÆ
(c⁄° 
js⁄_obje˘_ôî©‹
 *
ôî1
,

231 c⁄° 
js⁄_obje˘_ôî©‹
 *
ôî2
);

234 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_object_private.h

12 #i‚de‡
_js⁄_obje˘_¥iv©e_h_


13 
	#_js⁄_obje˘_¥iv©e_h_


	)

15 #ifde‡
__˝lu•lus


19 (
js⁄_obje˘_¥iv©e_dñëe_‚
)(
	tjs⁄_obje˘
 *
	to
);

21 
	sjs⁄_obje˘
 {

22 
js⁄_ty≥
 
o_ty≥
;

23 
js⁄_obje˘_¥iv©e_dñëe_‚
 *
_dñëe
;

24 
js⁄_obje˘_to_js⁄_°rög_‚
 *
_to_js⁄_°rög
;

25 
_ªf_cou¡
;

26 
¥ötbuf
 *
_pb
;

27 
	ud©a
 {

28 
js⁄_boﬁ
 
c_boﬁón
;

29 
c_doubÀ
;

30 
öt64_t
 
c_öt64
;

31 
lh_èbÀ
 *
c_obje˘
;

32 
¨øy_li°
 *
c_¨øy
;

34 *
°r
;

35 
Àn
;

36 } 
c_°rög
;

37 } 
o
;

38 
js⁄_obje˘_dñëe_‚
 *
_u£r_dñëe
;

39 *
_u£rd©a
;

42 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_tokener.h

12 #i‚de‡
_js⁄_tokíî_h_


13 
	#_js⁄_tokíî_h_


	)

15 
	~<°ddef.h
>

16 
	~"js⁄_obje˘.h
"

18 #ifde‡
__˝lu•lus


22 
	ejs⁄_tokíî_îr‹
 {

23 
js⁄_tokíî_suc˚ss
,

24 
js⁄_tokíî_c⁄töue
,

25 
js⁄_tokíî_îr‹_dïth
,

26 
js⁄_tokíî_îr‹_∑r£_eof
,

27 
js⁄_tokíî_îr‹_∑r£_u√x≥˘ed
,

28 
js⁄_tokíî_îr‹_∑r£_nuŒ
,

29 
js⁄_tokíî_îr‹_∑r£_boﬁón
,

30 
js⁄_tokíî_îr‹_∑r£_numbî
,

31 
js⁄_tokíî_îr‹_∑r£_¨øy
,

32 
js⁄_tokíî_îr‹_∑r£_obje˘_key_«me
,

33 
js⁄_tokíî_îr‹_∑r£_obje˘_key_£p
,

34 
js⁄_tokíî_îr‹_∑r£_obje˘_vÆue_£p
,

35 
js⁄_tokíî_îr‹_∑r£_°rög
,

36 
js⁄_tokíî_îr‹_∑r£_commít
,

37 
js⁄_tokíî_îr‹_size


40 
	ejs⁄_tokíî_°©e
 {

41 
js⁄_tokíî_°©e_ótws
,

42 
js⁄_tokíî_°©e_°¨t
,

43 
js⁄_tokíî_°©e_föish
,

44 
js⁄_tokíî_°©e_nuŒ
,

45 
js⁄_tokíî_°©e_commít_°¨t
,

46 
js⁄_tokíî_°©e_commít
,

47 
js⁄_tokíî_°©e_commít_eﬁ
,

48 
js⁄_tokíî_°©e_commít_íd
,

49 
js⁄_tokíî_°©e_°rög
,

50 
js⁄_tokíî_°©e_°rög_esˇ≥
,

51 
js⁄_tokíî_°©e_esˇ≥_unicode
,

52 
js⁄_tokíî_°©e_boﬁón
,

53 
js⁄_tokíî_°©e_numbî
,

54 
js⁄_tokíî_°©e_¨øy
,

55 
js⁄_tokíî_°©e_¨øy_add
,

56 
js⁄_tokíî_°©e_¨øy_£p
,

57 
js⁄_tokíî_°©e_obje˘_fõld_°¨t
,

58 
js⁄_tokíî_°©e_obje˘_fõld
,

59 
js⁄_tokíî_°©e_obje˘_fõld_íd
,

60 
js⁄_tokíî_°©e_obje˘_vÆue
,

61 
js⁄_tokíî_°©e_obje˘_vÆue_add
,

62 
js⁄_tokíî_°©e_obje˘_£p
,

63 
js⁄_tokíî_°©e_¨øy_a·î_£p
,

64 
js⁄_tokíî_°©e_obje˘_fõld_°¨t_a·î_£p
,

65 
js⁄_tokíî_°©e_öf


68 
	sjs⁄_tokíî_§ec
 {

69 
js⁄_tokíî_°©e
 
°©e
, 
ßved_°©e
;

70 
js⁄_obje˘
 *
obj
;

71 
js⁄_obje˘
 *
cuºít
;

72 *
obj_fõld_«me
;

75 
	#JSON_TOKENER_DEFAULT_DEPTH
 32

	)

77 
	sjs⁄_tokíî
 {

78 *
°r
;

79 
¥ötbuf
 *
pb
;

80 
max_dïth
, 
dïth
, 
is_doubÀ
, 
°_pos
, 
ch¨_off£t
;

81 
js⁄_tokíî_îr‹
 
îr
;

82 
ucs_ch¨
;

83 
quŸe_ch¨
;

84 
js⁄_tokíî_§ec
 *
°ack
;

85 
Êags
;

98 
	#JSON_TOKENER_STRICT
 0x01

	)

106 c⁄° *
js⁄_tokíî_îr‹_desc
(
js⁄_tokíî_îr‹
 
jîr
);

117 
js⁄_tokíî_îr‹
 
js⁄_tokíî_gë_îr‹
(
js⁄_tokíî
 *
tok
);

119 
js⁄_tokíî
 *
js⁄_tokíî_√w
();

120 
js⁄_tokíî
 *
js⁄_tokíî_√w_ex
(
dïth
);

121 
js⁄_tokíî_‰ì
(
js⁄_tokíî
 *
tok
);

122 
js⁄_tokíî_ª£t
(
js⁄_tokíî
 *
tok
);

123 
js⁄_obje˘
 *
js⁄_tokíî_∑r£
(c⁄° *
°r
);

124 
js⁄_obje˘
 *
js⁄_tokíî_∑r£_vîbo£
(c⁄° *
°r
, 
js⁄_tokíî_îr‹
 *
îr‹
);

129 
js⁄_tokíî_£t_Êags
(
js⁄_tokíî
 *
tok
, 
Êags
);

199 
js⁄_obje˘
 *
js⁄_tokíî_∑r£_ex
(
js⁄_tokíî
 *
tok
,

200 c⁄° *
°r
, 
Àn
);

202 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/json_util.h

12 #i‚de‡
_js⁄_utû_h_


13 
	#_js⁄_utû_h_


	)

15 
	~"js⁄_obje˘.h
"

17 #i‚de‡
js⁄_mö


18 
	#js⁄_mö
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

21 #i‚de‡
js⁄_max


22 
	#js⁄_max
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

26 #ifde‡
__˝lu•lus


30 
	#JSON_FILE_BUF_SIZE
 4096

	)

33 
js⁄_obje˘
 *
js⁄_obje˘_‰om_fûe
(c⁄° *
fûíame
);

34 
js⁄_obje˘
 *
js⁄_obje˘_‰om_fd
(
fd
);

35 
js⁄_obje˘_to_fûe
(c⁄° *
fûíame
, 
js⁄_obje˘
 *
obj
);

36 
js⁄_obje˘_to_fûe_ext
(c⁄° *
fûíame
, 
js⁄_obje˘
 *
obj
, 
Êags
);

37 
js⁄_∑r£_öt64
(c⁄° *
buf
, 
öt64_t
 *
ªtvÆ
);

38 
js⁄_∑r£_doubÀ
(c⁄° *
buf
, *
ªtvÆ
);

45 c⁄° *
js⁄_ty≥_to_«me
(
js⁄_ty≥
 
o_ty≥
);

47 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/linkhash.h

13 #i‚de‡
_lökhash_h_


14 
	#_lökhash_h_


	)

16 
	~"js⁄_obje˘.h
"

18 #ifde‡
__˝lu•lus


25 
	#LH_PRIME
 0x9e370001UL

	)

32 
	#LH_LOAD_FACTOR
 0.66

	)

37 
	#LH_EMPTY
 (*)-1

	)

42 
	#LH_FREED
 (*)-2

	)

44 
lh_íåy
;

49 (
lh_íåy_‰ì_‚
)(
	tlh_íåy
 *
	te
);

53 (
	tlh_hash_‚
)(c⁄° *
	tk
);

57 (
lh_equÆ_‚
)(c⁄° *
	tk1
, c⁄° *
	tk2
);

62 
	slh_íåy
 {

66 *
k
;

70 c⁄° *
v
;

74 
lh_íåy
 *
√xt
;

78 
lh_íåy
 *
¥ev
;

85 
	slh_èbÀ
 {

89 
size
;

93 
cou¡
;

98 
cﬁlisi⁄s
;

103 
ªsizes
;

108 
lookups
;

113 
ö£πs
;

118 
dñëes
;

123 c⁄° *
«me
;

128 
lh_íåy
 *
hód
;

133 
lh_íåy
 *
èû
;

135 
lh_íåy
 *
èbÀ
;

140 
lh_íåy_‰ì_‚
 *
‰ì_‚
;

141 
lh_hash_‚
 *
hash_‚
;

142 
lh_equÆ_‚
 *
equÆ_‚
;

149 
lh_±r_hash
(c⁄° *
k
);

150 
lh_±r_equÆ
(c⁄° *
k1
, c⁄° *
k2
);

152 
lh_ch¨_hash
(c⁄° *
k
);

153 
lh_ch¨_equÆ
(c⁄° *
k1
, c⁄° *
k2
);

159 
	#lh_f‹óch
(
èbÀ
, 
íåy
) \

160 
íåy
 = 
èbÀ
->
hód
;É¡ry;É¡ry =É¡ry->
√xt
)

	)

165 
	#lh_f‹óch_ß„
(
èbÀ
, 
íåy
, 
tmp
) \

166 
íåy
 = 
èbÀ
->
hód
;É¡ry && ((
tmp
 =É¡ry->
√xt
Ë|| 1);É¡ry =Åmp)

	)

187 
lh_èbÀ
 *
lh_èbÀ_√w
(
size
, c⁄° *
«me
,

188 
lh_íåy_‰ì_‚
 *
‰ì_‚
,

189 
lh_hash_‚
 *
hash_‚
,

190 
lh_equÆ_‚
 *
equÆ_‚
);

200 
lh_èbÀ
 *
lh_kch¨_èbÀ_√w
(
size
, c⁄° *
«me
,

201 
lh_íåy_‰ì_‚
 *
‰ì_‚
);

212 
lh_èbÀ
 *
lh_k±r_èbÀ_√w
(
size
, c⁄° *
«me
,

213 
lh_íåy_‰ì_‚
 *
‰ì_‚
);

222 
lh_èbÀ_‰ì
(
lh_èbÀ
 *
t
);

231 
lh_èbÀ_ö£π
(
lh_èbÀ
 *
t
, *
k
, c⁄° *
v
);

240 
lh_íåy
 *
lh_èbÀ_lookup_íåy
(
lh_èbÀ
 *
t
, c⁄° *
k
);

249 
THIS_FUNCTION_IS_DEPRECATED
(c⁄° *
lh_èbÀ_lookup
(
lh_èbÀ
 *
t
, c⁄° *
k
));

258 
js⁄_boﬁ
 
lh_èbÀ_lookup_ex
(
lh_èbÀ
 *
t
, c⁄° *
k
, **
v
);

269 
lh_èbÀ_dñëe_íåy
(
lh_èbÀ
 *
t
, 
lh_íåy
 *
e
);

281 
lh_èbÀ_dñëe
(
lh_èbÀ
 *
t
, c⁄° *
k
);

283 
lh_èbÀ_Àngth
(
lh_èbÀ
 *
t
);

285 
lh_ab‹t
(c⁄° *
msg
, ...);

286 
lh_èbÀ_ªsize
(
lh_èbÀ
 *
t
, 
√w_size
);

288 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/math_compat.h

1 #i‚de‡
__m©h_com∑t_h


2 
	#__m©h_com∑t_h


	)

6 #i‚de‡
HAVE_DECL_ISNAN


7 #ifde‡
HAVE_DECL__ISNAN


8 
	~<Êﬂt.h
>

9 
	#i¢™
(
x
Ë
	`_i¢™
(x)

	)

13 #i‚de‡
HAVE_DECL_ISINF


14 #ifde‡
HAVE_DECL__FINITE


15 
	~<Êﬂt.h
>

16 
	#isöf
(
x
Ë(!
	`_föôe
(x))

	)

20 #i‚de‡
HAVE_DECL_INFINITY


21 
	~<Êﬂt.h
>

22 
	#INFINITY
 (
DBL_MAX
 + DBL_MAX)

	)

23 
	#HAVE_DECL_INFINITY


	)

26 #i‚de‡
HAVE_DECL_NAN


27 
	#NAN
 (
INFINITY
 - INFINITY)

	)

28 
	#HAVE_DECL_NAN


	)

	@include_lib/net/json_c/printbuf.h

16 #i‚de‡
_¥ötbuf_h_


17 
	#_¥ötbuf_h_


	)

19 #ifde‡
__˝lu•lus


23 
	s¥ötbuf
 {

24 *
buf
;

25 
bpos
;

26 
size
;

29 
¥ötbuf
 *

30 
¥ötbuf_√w
();

40 
¥ötbuf_mem≠≥nd
(
¥ötbuf
 *
p
, c⁄° *
buf
, 
size
);

42 
	#¥ötbuf_mem≠≥nd_Á°
(
p
, 
buÂå
, 
bufsize
) \

44 i‡((
p
->
size
 -Ö->
bpos
Ë> 
bufsize
) { \

45 
	`mem˝y
(
p
->
buf
 +Ö->
bpos
, (
buÂå
), 
bufsize
); \

46 
p
->
bpos
 +
bufsize
; \

47 
p
->
buf
[p->
bpos
]= '\0'; \

48 } { 
	`¥ötbuf_mem≠≥nd
(
p
, (
buÂå
), 
bufsize
); } \

49 } 0)

	)

51 
	#¥ötbuf_Àngth
(
p
Ë(’)->
bpos
)

	)

62 
¥ötbuf_mem£t
(
¥ötbuf
 *
pb
, 
off£t
, 
ch¨vÆue
, 
Àn
);

65 
•rötbuf
(
¥ötbuf
 *
p
, c⁄° *
msg
, ...);

68 
¥ötbuf_ª£t
(
¥ötbuf
 *
p
);

71 
¥ötbuf_‰ì
(
¥ötbuf
 *
p
);

73 #ifde‡
__˝lu•lus


	@include_lib/net/json_c/random_seed.h

12 #i‚de‡
£ed_h


13 
	#£ed_h


	)

15 #ifde‡
__˝lu•lus


19 
js⁄_c_gë_øndom_£ed
();

21 #ifde‡
__˝lu•lus


	@include_lib/net/kcp/ikcp.h

20 #i‚de‡
__IKCP_H__


21 
	#__IKCP_H__


	)

23 
	~<°d¨g.h
>

25 
	#IKCP_HEAD_SIZE
 (24)

	)

30 #i‚de‡
__IQUEUE_DEF__


31 
	#__IQUEUE_DEF__


	)

33 
	sIQUEUEHEAD
 {

34 
IQUEUEHEAD
 *
	m√xt
, *
	m¥ev
;

37 
IQUEUEHEAD
 
	tiqueue_hód
;

43 
	#IQUEUE_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

44 
	#IQUEUE_HEAD
(
«me
) \

45 
IQUEUEHEAD
 
«me
 = 
	`IQUEUE_HEAD_INIT
“ame)

	)

47 
	#IQUEUE_INIT
(
±r
) ( \

48 (
±r
)->
√xt
 = (±r), (±r)->
¥ev
 = (±r))

	)

50 
	#IOFFSETOF
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

52 
	#ICONTAINEROF
(
±r
, 
ty≥
, 
membî
) ( \

53 (
ty≥
*)–((*)(—y≥*)
±r
)Ë- 
	`IOFFSETOF
—y≥, 
membî
)Ë)

	)

55 
	#IQUEUE_ENTRY
(
±r
, 
ty≥
, 
membî
Ë
	`ICONTAINEROF
’å,Åy≥, membî)

	)

61 
	#IQUEUE_ADD
(
node
, 
hód
) ( \

62 (
node
)->
¥ev
 = (
hód
), (node)->
√xt
 = (head)->next, \

63 (
hód
)->
√xt
->
¥ev
 = (
node
), (hód)->√xà“ode))

	)

65 
	#IQUEUE_ADD_TAIL
(
node
, 
hód
) ( \

66 (
node
)->
¥ev
 = (
hód
)->¥ev, (node)->
√xt
 = (head), \

67 (
hód
)->
¥ev
->
√xt
 = (
node
), (hód)->¥ev = (node))

	)

69 
	#IQUEUE_DEL_BETWEEN
(
p
, 
n
Ë(“)->
¥ev
 = (p), (p)->
√xt
 = (n))

	)

71 
	#IQUEUE_DEL
(
íåy
) (\

72 (
íåy
)->
√xt
->
¥ev
 = (entry)->prev, \

73 (
íåy
)->
¥ev
->
√xt
 = (entry)->next, \

74 (
íåy
)->
√xt
 = 0, (íåy)->
¥ev
 = 0)

	)

76 
	#IQUEUE_DEL_INIT
(
íåy
) do { \

77 
	`IQUEUE_DEL
(
íåy
); 
	`IQUEUE_INIT
”¡ry); } 0)

	)

79 
	#IQUEUE_IS_EMPTY
(
íåy
Ë(”¡ryË=”¡ry)->
√xt
)

	)

81 
	#iqueue_öô
 
IQUEUE_INIT


	)

82 
	#iqueue_íåy
 
IQUEUE_ENTRY


	)

83 
	#iqueue_add
 
IQUEUE_ADD


	)

84 
	#iqueue_add_èû
 
IQUEUE_ADD_TAIL


	)

85 
	#iqueue_dñ
 
IQUEUE_DEL


	)

86 
	#iqueue_dñ_öô
 
IQUEUE_DEL_INIT


	)

87 
	#iqueue_is_em±y
 
IQUEUE_IS_EMPTY


	)

89 
	#IQUEUE_FOREACH
(
ôî©‹
, 
hód
, 
TYPE
, 
MEMBER
) \

90 (
ôî©‹
Ë
	`iqueue_íåy
((
hód
)->
√xt
, 
TYPE
, 
MEMBER
); \

91 &((
ôî©‹
)->
MEMBER
Ë!(
hód
); \

92 (
ôî©‹
Ë
	`iqueue_íåy
((ôî©‹)->
MEMBER
.
√xt
, 
TYPE
, MEMBER))

	)

94 
	#iqueue_f‹óch
(
ôî©‹
, 
hód
, 
TYPE
, 
MEMBER
) \

95 
	`IQUEUE_FOREACH
(
ôî©‹
, 
hód
, 
TYPE
, 
MEMBER
)

	)

97 
	#iqueue_f‹óch_íåy
(
pos
, 
hód
) \

98  (
pos
Ë(
hód
)->
√xt
; (posË!(hódË; (posË’os)->√xà)

	)

101 
	#__iqueue_•li˚
(
li°
, 
hód
) do { \

102 
iqueue_hód
 *
fú°
 = (
li°
)->
√xt
, *
œ°
 = (li°)->
¥ev
; \

103 
iqueue_hód
 *
©
 = (
hód
)->
√xt
; \

104 (
fú°
)->
¥ev
 = (
hód
), (hód)->
√xt
 = (first); \

105 (
œ°
)->
√xt
 = (
©
), (©)->
¥ev
 = (œ°); } 0)

	)

107 
	#iqueue_•li˚
(
li°
, 
hód
) do { \

108 i‡(!
	`iqueue_is_em±y
(
li°
)Ë
	`__iqueue_•li˚
÷i°, 
hód
); } 0)

	)

110 
	#iqueue_•li˚_öô
(
li°
, 
hód
) do { \

111 
	`iqueue_•li˚
(
li°
, 
hód
); 
	`iqueue_öô
÷i°); } 0)

	)

119 #i‚de‡
IWORDS_BIG_ENDIAN


120 
	#IWORDS_BIG_ENDIAN
 0

	)

128 
	sIKCPSEG
 {

129 
IQUEUEHEAD
 
	mnode
;

130 
	mc⁄v
;

131 
	mcmd
;

132 
	m‰g
;

133 
	mwnd
;

134 
	mts
;

135 
	m¢
;

136 
	mu«
;

137 
	mÀn
;

138 
	mª£ndts
;

139 
	mπo
;

140 
	mÁ°ack
;

141 
	mxmô
;

142 
	md©a
[1];

149 
	sIKCPCB
 {

150 
	mc⁄v
, 
	mmtu
, 
	magg_mtu
, 
	mmss
, 
	m°©e
;

151 
	m¢d_u«
, 
	m¢d_nxt
, 
	mrcv_nxt
;

152 
	mts_ª˚¡
, 
	mts_œ°ack
, 
	ms°hªsh
;

153 
	mrx_πtvÆ
, 
	mrx_§â
, 
	mrx_πo
, 
	mrx_möπo
;

154 
	m¢d_wnd
, 
	mrcv_wnd
, 
	mrmt_wnd
, 
	mcwnd
, 
	m¥obe
;

155 
	mcuºít
, 
	möãrvÆ
, 
	mts_Êush
, 
	mxmô
;

156 
	mƒcv_buf
, 
	mn¢d_buf
;

157 
	mƒcv_que
, 
	mn¢d_que
;

158 
	mnodñay
, 
	mupd©ed
;

159 
	mts_¥obe
, 
	m¥obe_waô
;

160 
	mdód_lök
, 
	mö¸
;

161 
IQUEUEHEAD
 
	m¢d_queue
;

162 
IQUEUEHEAD
 
	mrcv_queue
;

163 
IQUEUEHEAD
 
	m¢d_buf
;

164 
IQUEUEHEAD
 
	mrcv_buf
;

165 *
	mackli°
;

166 
	mackcou¡
;

167 
	mackblock
;

168 *
	mu£r
;

169 *
	mbuf„r
;

170 
	mÁ°ª£nd
;

171 
	mnocwnd
, 
	m°ªam
;

172 
	mlogmask
;

173 (*
	mouçut
)(c⁄° *
	mbuf
, 
	mÀn
, 
IKCPCB
 *
	mk˝
, *
	mu£r
);

174 (*
	mwrôñog
)(
IKCPCB
 *
	mk˝
, c⁄° *
	mfmt
, 
va_li°
 
	mva
, *
	mu£r
);

175 
	m£nd_block
;

176 
	mªcv_block
;

177 (*
	m£nd_£m_po°
)(*
	m£nd_£m
);

178 (*
	m£nd_£m_≥nd
)(*
	m£nd_£m
, 
	mtimeout
);

179 (*
	m£nd_£m_dñ
)(*
	m£nd_£m
);

180 *
	m£nd_£m
;

181 (*
	mªcv_£m_po°
)(*
	mªcv_£m
);

182 (*
	mªcv_£m_≥nd
)(*
	mªcv_£m
, 
	mtimeout
);

183 
	m£nd_£m_≥nd_timeout
;

184 
	mªcv_£m_≥nd_timeout
;

185 (*
	mªcv_£m_dñ
)(*
	mªcv_£m
);

186 *
	mªcv_£m
;

187 (*
	mmuãx_lock
)(*mutex_lock);

188 (*
	mmuãx_u∆ock
)(*
	mmuãx_lock
);

189 (*
	mmuãx_dñ
)(*
	mmuãx_lock
);

190 *
	mmuãx
;

194 
IKCPCB
 
	tik˝cb
;

196 
	#IKCP_LOG_OUTPUT
 1

	)

197 
	#IKCP_LOG_INPUT
 2

	)

198 
	#IKCP_LOG_SEND
 4

	)

199 
	#IKCP_LOG_RECV
 8

	)

200 
	#IKCP_LOG_IN_DATA
 16

	)

201 
	#IKCP_LOG_IN_ACK
 32

	)

202 
	#IKCP_LOG_IN_PROBE
 64

	)

203 
	#IKCP_LOG_IN_WINS
 128

	)

204 
	#IKCP_LOG_OUT_DATA
 256

	)

205 
	#IKCP_LOG_OUT_ACK
 512

	)

206 
	#IKCP_LOG_OUT_PROBE
 1024

	)

207 
	#IKCP_LOG_OUT_WINS
 2048

	)

209 #ifde‡
__˝lu•lus


220 
ik˝cb
 *
ik˝_¸óã
(
c⁄v
, *
u£r
);

223 
ik˝_ªÀa£
(
ik˝cb
 *
k˝
);

226 
ik˝_£touçut
(
ik˝cb
 *
k˝
, (*
ouçut
)(c⁄° *
buf
, 
Àn
,

227 
ik˝cb
 *
k˝
, *
u£r
));

230 
ik˝_ªcv
(
ik˝cb
 *
k˝
, *
buf„r
, 
Àn
);

233 
ik˝_£nd
(
ik˝cb
 *
k˝
, c⁄° *
buf„r
, 
Àn
);

238 
ik˝_upd©e
(
ik˝cb
 *
k˝
, (*
i˛ock
)());

247 
ik˝_check
(c⁄° 
ik˝cb
 *
k˝
, (*
i˛ock
)());

250 
ik˝_öput
(
ik˝cb
 *
k˝
, c⁄° *
d©a
, 
size
);

253 
ik˝_Êush
(
ik˝cb
 *
k˝
, (*
i˛ock
)());

256 
ik˝_≥eksize
(c⁄° 
ik˝cb
 *
k˝
);

259 
ik˝_£tmtu
(
ik˝cb
 *
k˝
, 
mtu
, 
agg_mtu
);

262 
ik˝_wndsize
(
ik˝cb
 *
k˝
, 
¢dwnd
, 
rcvwnd
);

265 
ik˝_waô¢d
(c⁄° 
ik˝cb
 *
k˝
);

268 
ik˝_gë_ƒcv_que
(
ik˝cb
 *
k˝
);

275 
ik˝_nodñay
(
ik˝cb
 *
k˝
, 
nodñay
, 
öãrvÆ
, 
ª£nd
, 
nc
);

278 
ik˝_Æloˇt‹
(*(*
√w_mÆloc
)(
Àn
), (*
√w_‰ì
)(*
p
));

281 
ik˝_gëc⁄v
(c⁄° *
±r
);

283 
ik˝_gëÀn
(c⁄° *
±r
);

285 
ik˝_£t_u£r
(
ik˝cb
 *
k˝
, *
u£r
);

287 
ik˝_£t_wrôñog
(
ik˝cb
 *
k˝
, (*
wrôñog
)(
IKCPCB
 *k˝, c⁄° *
fmt
, 
va_li°
 
va
, *
u£r
), 
logmask
);

289 
ik˝_£t_£nd_block
(
ik˝cb
 *
k˝
, 
block
, (*
£nd_£m_po°
)(*
¥iv
), (*
£nd_£m_≥nd
)(*¥iv, 
timeout
), (*
£nd_£m_dñ
)(*priv), timeout, *priv);

290 
ik˝_£t_ªcv_block
(
ik˝cb
 *
k˝
, 
block
, (*
ªcv_£m_po°
)(*
¥iv
), (*
ªcv_£m_≥nd
)(*¥iv, 
timeout
), (*
ªcv_£m_dñ
)(*priv), timeout, *priv);

291 
ik˝_£t_muãx_lock_func
(
ik˝cb
 *
k˝
, (*
muãx_lock
)(*
¥iv
), (*
muãx_u∆ock
)(*¥iv), (*
muãx_dñ
)(*priv), *priv);

293 
ik˝_£t_i˛ock
(
ik˝cb
 *
k˝
, (*
i˛ock
)());

295 
ik˝_dód_lök
(
ik˝cb
 *
k˝
);

297 #ifde‡
__˝lu•lus


	@include_lib/net/libcoap/address.h

14 #i‚de‡
_COAP_ADDRESS_H_


15 
	#_COAP_ADDRESS_H_


	)

17 
	~"cﬂp_c⁄fig.h
"

18 
	~<as£π.h
>

20 
	~<°rög.h
>

23 
	~<lwù/sockës.h
>

24 
	~<lwù/√tdb.h
>

27 
	scﬂp_addªss_t
 {

28 
sockÀn_t
 
	msize
;

30 
sockaddr
 
	mß
;

31 
sockaddr_°‹age
 
	m°
;

32 
sockaddr_ö
 
	msö
;

33 #i‡
LWIP_IPV6


34 
sockaddr_ö6
 
	msö6
;

36 } 
	maddr
;

37 } 
	tcﬂp_addªss_t
;

39 
ölöe
 

40 
	$_cﬂp_addªss_equÆs_im∂
(c⁄° 
cﬂp_addªss_t
 *
a
,

41 c⁄° 
cﬂp_addªss_t
 *
b
)

43 i‡(
a
->
size
 !
b
->sizê||á->
addr
.
ß
.
ß_Ámûy
 != b->addr.sa.sa_family) {

48 
a
->
addr
.
ß
.
ß_Ámûy
) {

49 
AF_INET
:

51 
a
->
addr
.
sö
.
sö_p‹t
 =
b
->addr.sin.sin_port &&

52 
	`memcmp
(&
a
->
addr
.
sö
.
sö_addr
, &
b
->addr.sin.sin_addr,

53 (
ö_addr
)) == 0;

54 #i‡
LWIP_IPV6


55 
AF_INET6
:

56  
a
->
addr
.
sö6
.
sö6_p‹t
 =
b
->addr.sin6.sin6_port &&

57 
	`memcmp
(&
a
->
addr
.
sö6
.
sö6_addr
, &
b
->addr.sin6.sin6_addr,

58 (
ö6_addr
)) == 0;

64 
	}
}

66 
ölöe
 

67 
	$_cﬂp_is_mˇ°_im∂
(c⁄° 
cﬂp_addªss_t
 *
a
)

69 i‡(!
a
) {

73 
a
->
addr
.
ß
.
ß_Ámûy
) {

74 
AF_INET
:

75  
	`IN_MULTICAST
(
a
->
addr
.
sö
.
sö_addr
.
s_addr
);

76 #i‡
LWIP_IPV6


77 
AF_INET6
:

78  
	`IN6_IS_ADDR_MULTICAST
(&
a
->
addr
.
sö6
.
sö6_addr
);

84 
	}
}

93 
ölöe
 

94 
	$cﬂp_addªss_öô
(
cﬂp_addªss_t
 *
addr
)

96 
	`as£π
(
addr
);

97 
	`mem£t
(
addr
, 0, (
cﬂp_addªss_t
));

99 
addr
->
size
 = (addr->addr);

100 
	}
}

107 
ölöe
 

108 
	$cﬂp_addªss_equÆs
(c⁄° 
cﬂp_addªss_t
 *
a
, c⁄° cﬂp_addªss_à*
b
)

110 
	`as£π
(
a
);

111 
	`as£π
(
b
);

112  
	`_cﬂp_addªss_equÆs_im∂
(
a
, 
b
);

113 
	}
}

119 
ölöe
 

120 
	$cﬂp_is_mˇ°
(c⁄° 
cﬂp_addªss_t
 *
a
)

122  
a
 && 
	`_cﬂp_is_mˇ°_im∂
(a);

123 
	}
}

	@include_lib/net/libcoap/async.h

15 #i‚de‡
_COAP_ASYNC_H_


16 
	#_COAP_ASYNC_H_


	)

18 
	~"cﬂp_c⁄fig.h
"

19 
	~"cﬂp_√t.h
"

21 #i‚de‡
WITHOUT_ASYNC


32 
	scﬂp_async_°©e_t
 {

33 
	mÊags
;

40 
cﬂp_tick_t
 
	m¸óãd
;

45 *
	m≠pd©a
;

47 
	mmesßge_id
;

48 
cﬂp_tid_t
 
	mid
;

50 
cﬂp_async_°©e_t
 *
	m√xt
;

52 
cﬂp_addªss_t
 
	m≥î
;

53 
size_t
 
	mtokíÀn
;

54 
	mtokí
[];

55 } 
	tcﬂp_async_°©e_t
;

59 
	#COAP_ASYNC_CONFIRM
 0x01

	)

60 
	#COAP_ASYNC_SEPARATE
 0x02

	)

61 
	#COAP_ASYNC_OBSERVED
 0x04

	)

64 
	#COAP_ASYNC_RELEASE_DATA
 0x08

	)

87 
cﬂp_async_°©e_t
 *

88 
cﬂp_ªgi°î_async
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_addªss_t
 *
≥î
,

89 
cﬂp_pdu_t
 *
ªque°
, 
Êags
, *
d©a
);

108 
cﬂp_ªmove_async
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_tid_t
 
id
,

109 
cﬂp_async_°©e_t
 **
s
);

119 
cﬂp_‰ì_async
(
cﬂp_async_°©e_t
 *
°©e
);

133 
cﬂp_async_°©e_t
 *
cﬂp_föd_async
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_tid_t
 
id
);

140 
ölöe
 

141 
	$cﬂp_touch_async
(
cﬂp_async_°©e_t
 *
s
)

143 
	`cﬂp_ticks
(&
s
->
¸óãd
);

144 
	}
}

	@include_lib/net/libcoap/bits.h

15 #i‚de‡
_BITS_H_


16 
	#_BITS_H_


	)

18 
	~<sys/ty≥s.h
>

32 
ölöe
 

33 
	$bôs_£tb
(*
vec
, 
size_t
 
size
, 
bô
)

35 i‡(
size
 <(
bô
 >> 3)) {

39 *(
vec
 + (
bô
 >> 3)) |= ()(1 << (bit & 0x07));

41 
	}
}

54 
ölöe
 

55 
	$bôs_˛rb
(*
vec
, 
size_t
 
size
, 
bô
)

57 i‡(
size
 <(
bô
 >> 3)) {

61 *(
vec
 + (
bô
 >> 3)) &= ()(~(1 << (bit & 0x07)));

63 
	}
}

75 
ölöe
 

76 
	$bôs_gëb
(c⁄° *
vec
, 
size_t
 
size
, 
bô
)

78 i‡(
size
 <(
bô
 >> 3)) {

82  (*(
vec
 + (
bô
 >> 3)) & (1 << (bit & 0x07))) != 0;

83 
	}
}

	@include_lib/net/libcoap/block.h

9 #i‚de‡
_COAP_BLOCK_H_


10 
	#_COAP_BLOCK_H_


	)

12 
	~"›ti⁄.h
"

13 
	~"ícode.h
"

14 
	~"pdu.h
"

21 #i‚de‡
COAP_MAX_BLOCK_SZX


27 
	#COAP_MAX_BLOCK_SZX
 4

	)

30 #i‡(
COAP_MAX_PDU_SIZE
 - 6Ë< (1 << (
COAP_MAX_BLOCK_SZX
 + 4))

38 
	mnum
: 20;

39 
	mm
: 1;

40 
	mszx
: 3;

41 } 
	tcﬂp_block_t
;

48 
	#COAP_OPT_BLOCK_LAST
(
›t
) \

49 (
	`COAP_OPT_LENGTH
(
›t
Ë? (
	`COAP_OPT_VALUE
(›tË+ (COAP_OPT_LENGTH(›t)-1)Ë: 0)

	)

52 
	#COAP_OPT_BLOCK_MORE
(
›t
) \

53 (
	`COAP_OPT_LENGTH
(
›t
Ë? (*
	`COAP_OPT_BLOCK_LAST
(›tË& 0x08Ë: 0)

	)

56 
	#COAP_OPT_BLOCK_SZX
(
›t
) \

57 (
	`COAP_OPT_LENGTH
(
›t
Ë? (*
	`COAP_OPT_BLOCK_LAST
(›tË& 0x07Ë: 0)

	)

63 
cﬂp_›t_block_num
(c⁄° 
cﬂp_›t_t
 *
block_›t
);

69 
ölöe
 

70 
	$cﬂp_m‹e_blocks
(
size_t
 
d©a_Àn
, 
num
, 
szx
)

72  ((
num
 + 1Ë<< (
szx
 + 4)Ë< 
d©a_Àn
;

73 
	}
}

76 
ölöe
 

77 
	$cﬂp_›t_block_£t_m
(
cﬂp_›t_t
 *
block_›t
, 
m
)

79 i‡(
m
) {

80 *(
	`COAP_OPT_VALUE
(
block_›t
Ë+ (
	`COAP_OPT_LENGTH
(block_opt) - 1)) |= 0x08;

82 *(
	`COAP_OPT_VALUE
(
block_›t
Ë+ (
	`COAP_OPT_LENGTH
(block_opt) - 1)) &= ~0x08;

84 
	}
}

98 
cﬂp_gë_block
(
cﬂp_pdu_t
 *
pdu
, 
ty≥
, 
cﬂp_block_t
 *
block
);

122 
cﬂp_wrôe_block_›t
(
cﬂp_block_t
 *
block
, 
ty≥
,

123 
cﬂp_pdu_t
 *
pdu
, 
size_t
 
d©a_Àngth
);

136 
cﬂp_add_block
(
cﬂp_pdu_t
 *
pdu
, 
Àn
, c⁄° *
d©a
,

137 
block_num
, 
block_szx
);

	@include_lib/net/libcoap/coap.h

9 #i‚de‡
_COAP_H_


10 
	#_COAP_H_


	)

12 #ifde‡
__˝lu•lus


16 
	~"libcﬂp/cﬂp_c⁄fig.h
"

17 
	~"libcﬂp/cﬂp_debug.h
"

18 
	~"libcﬂp/sﬂp_mem.h
"

19 
	~"libcﬂp/cﬂp_li°.h
"

20 
	~"libcﬂp/pdu.h
"

21 
	~"libcﬂp/›ti⁄.h
"

22 
	~"libcﬂp/cﬂp_√t.h
"

23 
	~"libcﬂp/ícode.h
"

24 
	~"libcﬂp/°r.h
"

25 
	~"libcﬂp/uri.h
"

26 
	~"libcﬂp/async.h
"

27 
	~"libcﬂp/ªsour˚.h
"

28 
	~"libcﬂp/subs¸ibe.h
"

29 
	~"libcﬂp/block.h
"

30 
	~"libcﬂp/addªss.h
"

31 #ifde‡
__˝lu•lus


	@include_lib/net/libcoap/coap_config.h

6 
	#COAP_PACKAGE_BUGREPORT
 ""

	)

9 
	#COAP_PACKAGE_NAME
 "libcﬂp"

	)

12 
	#COAP_PACKAGE_STRING
 "libcﬂ∞4.1.1"

	)

15 
	#COAP_PACKAGE_TARNAME
 "libcﬂp"

	)

18 
	#COAP_PACKAGE_URL
 ""

	)

21 
	#COAP_PACKAGE_VERSION
 "4.1.1"

	)

26 #unde‡
WORDS_BIGENDIAN


	@include_lib/net/libcoap/coap_debug.h

9 #i‚de‡
_COAP_DEBUG_H_


10 
	#_COAP_DEBUG_H_


	)

12 
	~"cﬂp_c⁄fig.h
"

15 íum { 
	mLOG_EMERG
 = 0, 
	mLOG_ALERT
, 
	mLOG_CRIT
, 
	mLOG_WARNING
,

16 
	mLOG_NOTICE
, 
	mLOG_INFO
, 
	mLOG_DEBUG


17 } 
	tcﬂp_log_t
;

20 
cﬂp_log_t
 
cﬂp_gë_log_Àvñ
();

23 
cﬂp_£t_log_Àvñ
(
cﬂp_log_t
 
Àvñ
);

26 c⁄° *
cﬂp_∑ckage_«me
();

29 c⁄° *
cﬂp_∑ckage_vîsi⁄
();

37 
cﬂp_log_im∂
(
cﬂp_log_t
 
Àvñ
, c⁄° *
f‹m©
, ...);

39 #i‚de‡
cﬂp_log


40 
	#cﬂp_log
(...Ë
	`cﬂp_log_im∂
(
__VA_ARGS__
)

	)

43 #i‚de‡
NDEBUG


46 
	#öfo
(...Ë
	`cﬂp_log
(
LOG_INFO
, 
__VA_ARGS__
)

	)

47 
	#w¨n
(...Ë
	`cﬂp_log
(
LOG_WARNING
, 
__VA_ARGS__
)

	)

48 
	#debug
(...Ë
	`cﬂp_log
(
LOG_DEBUG
, 
__VA_ARGS__
)

	)

50 
	~"pdu.h
"

51 
cﬂp_show_pdu
(c⁄° 
cﬂp_pdu_t
 *);

53 
	gcﬂp_addªss_t
;

54 
size_t
 
cﬂp_¥öt_addr
(c⁄° 
cﬂp_addªss_t
 *, *, size_t);

58 
	#debug
(...)

	)

59 
	#öfo
(...)

	)

60 
	#w¨n
(...)

	)

62 
	#cﬂp_show_pdu
(
x
)

	)

63 
	#cﬂp_¥öt_addr
(...)

	)

	@include_lib/net/libcoap/coap_list.h

9 #i‚de‡
_COAP_LIST_H_


10 
	#_COAP_LIST_H_


	)

12 
	scﬂp_lökedli°node
 {

13 
cﬂp_lökedli°node
 *
	m√xt
;

14 *
	md©a
;

20 (*
	mdñëe_func
)(*);

23 
cﬂp_lökedli°node
 
	tcﬂp_li°_t
;

29 
cﬂp_ö£π
(
cﬂp_li°_t
 **
queue
, cﬂp_li°_à*
node
,

30 (*
‹dî
)(*, *));

33 
	`cﬂp_dñëe
(
cﬂp_li°_t
 *
node
);

36 
	`cﬂp_dñëe_li°
(
cﬂp_li°_t
 *
queue
);

43 
cﬂp_li°_t
 *
	`cﬂp_√w_li°node
(*
d©a
, (*
dñëe_func
)(*));

	@include_lib/net/libcoap/coap_net.h

9 #i‚de‡
_COAP_NET_H_


10 
	#_COAP_NET_H_


	)

12 #ifde‡
__˝lu•lus


16 
	~"cﬂp_c⁄fig.h
"

18 
	~<as£π.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~<lwù/sockës.h
>

24 
	~<lwù/√tdb.h
>

26 
	~<time.h
>

29 
	~<sys/time.h
>

32 
	~"›ti⁄.h
"

33 
	~"addªss.h
"

34 
	~"¥ng.h
"

35 
	~"pdu.h
"

36 
	~"cﬂp_time.h
"

38 
cﬂp_queue_t
;

40 
	scﬂp_queue_t
 {

41 
cﬂp_queue_t
 *
√xt
;

43 
cﬂp_tick_t
 
t
;

44 
ªå™smô_˙t
;

45 
timeout
;

47 
cﬂp_addªss_t
 
loˇl
;

48 
cﬂp_addªss_t
 
ªmŸe
;

49 
cﬂp_tid_t
 
id
;

51 
cﬂp_pdu_t
 *
pdu
;

52 } 
	tcﬂp_queue_t
;

55 
cﬂp_ö£π_node
(
cﬂp_queue_t
 **
queue
, cﬂp_queue_à*
node
);

58 
cﬂp_dñëe_node
(
cﬂp_queue_t
 *
node
);

61 
cﬂp_dñëe_Æl
(
cﬂp_queue_t
 *
queue
);

64 
cﬂp_queue_t
 *
cﬂp_√w_node
();

66 
cﬂp_ªsour˚_t
;

67 
cﬂp_c⁄ãxt_t
;

68 #i‚de‡
WITHOUT_ASYNC


69 
cﬂp_async_°©e_t
;

73 (*
cﬂp_ª•⁄£_h™dÀr_t
)(
	tcﬂp_c⁄ãxt_t
 *,

74 c⁄° 
	tcﬂp_addªss_t
 *
	tªmŸe
,

75 
	tcﬂp_pdu_t
 *
	t£¡
,

76 
	tcﬂp_pdu_t
 *
	tª˚ived
,

77 c⁄° 
	tcﬂp_tid_t
 
	tid
);

79 
	#COAP_MID_CACHE_SIZE
 3

	)

81 
Êags
[
COAP_MID_CACHE_SIZE
];

82 
cﬂp_key_t
 
ôem
[
COAP_MID_CACHE_SIZE
];

83 } 
	tcﬂp_mid_ˇche_t
;

86 
	scﬂp_c⁄ãxt_t
 {

87 
cﬂp_›t_fûãr_t
 
known_›ti⁄s
;

89 
cﬂp_ªsour˚_t
 *
ªsour˚s
;

91 #i‚de‡
WITHOUT_ASYNC


93 
cﬂp_async_°©e_t
 *
async_°©e
;

98 
cﬂp_tick_t
 
£ndqueue_ba£time
;

99 
cﬂp_queue_t
 *
£ndqueue
, *
ªcvqueue
;

100 
sockfd
;

108 
mesßge_id
;

114 
ob£rve
;

116 
cﬂp_ª•⁄£_h™dÀr_t
 
ª•⁄£_h™dÀr
;

117 } 
	tcﬂp_c⁄ãxt_t
;

126 
ölöe
 

127 
cﬂp_ªgi°î_ª•⁄£_h™dÀr
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

128 
cﬂp_ª•⁄£_h™dÀr_t
 
h™dÀr
)

130 
c⁄ãxt
->
ª•⁄£_h™dÀr
 = 
h™dÀr
;

140 
ölöe
 

141 
cﬂp_ªgi°î_›ti⁄
(
cﬂp_c⁄ãxt_t
 *
˘x
, 
ty≥
)

143 
cﬂp_›ti⁄_£tb
(
˘x
->
known_›ti⁄s
, 
ty≥
);

152 
cﬂp_adju°_ba£time
(
cﬂp_c⁄ãxt_t
 *
˘x
, 
cﬂp_tick_t
 
now
);

155 
cﬂp_queue_t
 *
cﬂp_≥ek_√xt
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

158 
cﬂp_queue_t
 *
cﬂp_p›_√xt
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

161 
cﬂp_c⁄ãxt_t
 *
cﬂp_√w_c⁄ãxt
(c⁄° 
cﬂp_addªss_t
 *
li°í_addr
);

171 
ölöe
 

172 
cﬂp_√w_mesßge_id
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
)

174  
ht⁄s
(++(
c⁄ãxt
->
mesßge_id
));

178 
cﬂp_‰ì_c⁄ãxt
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

191 
cﬂp_tid_t
 
cﬂp_£nd_c⁄fúmed
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

192 c⁄° 
cﬂp_addªss_t
 *
d°
,

193 
cﬂp_pdu_t
 *
pdu
);

212 
cﬂp_pdu_t
 *
cﬂp_√w_îr‹_ª•⁄£
(cﬂp_pdu_à*
ªque°
,

213 
code
,

214 
cﬂp_›t_fûãr_t
 
›ts
);

225 
cﬂp_tid_t
 
cﬂp_£nd
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

226 c⁄° 
cﬂp_addªss_t
 *
d°
,

227 
cﬂp_pdu_t
 *
pdu
);

246 
cﬂp_tid_t
 
cﬂp_£nd_îr‹
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

247 
cﬂp_pdu_t
 *
ªque°
,

248 c⁄° 
cﬂp_addªss_t
 *
d°
,

249 
code
,

250 
cﬂp_›t_fûãr_t
 
›ts
);

263 
cﬂp_tid_t


264 
cﬂp_£nd_mesßge_ty≥
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

265 c⁄° 
cﬂp_addªss_t
 *
d°
,

266 
cﬂp_pdu_t
 *
ªque°
,

267 
ty≥
);

280 
cﬂp_tid_t
 
cﬂp_£nd_ack
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

281 c⁄° 
cﬂp_addªss_t
 *
d°
,

282 
cﬂp_pdu_t
 *
ªque°
);

296 
ölöe
 
cﬂp_tid_t


297 
cﬂp_£nd_r°
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

298 c⁄° 
cﬂp_addªss_t
 *
d°
,

299 
cﬂp_pdu_t
 *
ªque°
)

301  
cﬂp_£nd_mesßge_ty≥
(
c⁄ãxt
, 
d°
, 
ªque°
, 
COAP_MESSAGE_RST
);

305 
cﬂp_tid_t
 
cﬂp_ªå™smô
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_queue_t
 *
node
);

312 
cﬂp_ªad
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

322 
cﬂp_å™ß˘i⁄_id
(c⁄° 
cﬂp_addªss_t
 *
≥î
, c⁄° 
cﬂp_pdu_t
 *
pdu
,

323 
cﬂp_tid_t
 *
id
);

342 
cﬂp_ªmove_‰om_queue
(
cﬂp_queue_t
 **
queue
,

343 
cﬂp_tid_t
 
id
,

344 
cﬂp_queue_t
 **
node
);

356 
ölöe
 

357 
cﬂp_ªmove_å™ß˘i⁄
(
cﬂp_queue_t
 **
queue
, 
cﬂp_tid_t
 
id
)

359 
cﬂp_queue_t
 *
node
;

360 i‡(!
cﬂp_ªmove_‰om_queue
(
queue
, 
id
, &
node
)) {

364 
cﬂp_dñëe_node
(
node
);

374 
cﬂp_queue_t
 *
cﬂp_föd_å™ß˘i⁄
(cﬂp_queue_à*
queue
, 
cﬂp_tid_t
 
id
);

385 
cﬂp_ˇn˚l_Æl_mesßges
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

386 c⁄° 
cﬂp_addªss_t
 *
d°
,

387 c⁄° *
tokí
,

388 
size_t
 
tokí_Àngth
);

391 
cﬂp_di•©ch
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

394 
cﬂp_ˇn_exô
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

400 
cﬂp_ticks
(
cﬂp_tick_t
 *);

434 
cﬂp_›ti⁄_check_¸ôiˇl
(
cﬂp_c⁄ãxt_t
 *
˘x
,

435 
cﬂp_pdu_t
 *
pdu
,

436 
cﬂp_›t_fûãr_t
 
unknown
);

442 
cﬂp_ªad‰om
(
cﬂp_c⁄ãxt_t
 *
˘x
, *
buf
, 
size_t
 
byãs_ªad
, 
sockaddr
 *
‰om
, 
sockÀn_t
 
‰omÀn
);

444 
cﬂp_wôh_dés
(*
¥iv
);

447 #ifde‡
__˝lu•lus


	@include_lib/net/libcoap/coap_time.h

14 #i‚de‡
_COAP_TIME_H_


15 
	#_COAP_TIME_H_


	)

20 #ifde‡
__˝lu•lus


25 
	~"cﬂp_c⁄fig.h
"

26 
	~"comm⁄/comm⁄.h
"

33 
	tcﬂp_tick_t
;

40 
	tcﬂp_tick_diff_t
;

42 
	#COAP_TICKS_PER_SECOND
 100

	)

45 
time_t
 
˛ock_off£t
;

47 #i‚de‡
cﬂp_˛ock_öô


48 
ölöe
 

49 
cﬂp_˛ock_öô_im∂
()

51 
	g˛ock_off£t
 = 
time
(
NULL
);

53 
	#cﬂp_˛ock_öô
 
cﬂp_˛ock_öô_im∂


	)

56 #i‚de‡
cﬂp_ticks


57 
ölöe
 

58 
cﬂp_ticks_im∂
(
cﬂp_tick_t
 *
t
)

60 
timevÆ
 
	gtv
;

61 
gëtimeofday
(&
tv
, 
NULL
);

62 *
	gt
 = (
tv
.
tv_£c
 - 
˛ock_off£t
Ë* 
COAP_TICKS_PER_SECOND


63 + (
tv
.
tv_u£c
 * 
COAP_TICKS_PER_SECOND
 / 1000000);

65 
	#cﬂp_ticks
 
cﬂp_ticks_im∂


	)

72 
ölöe


73 
cﬂp_time_…
(
cﬂp_tick_t
 
a
, cﬂp_tick_à
b
)

75  ((
	gcﬂp_tick_diff_t
)(
	ga
 - 
	gb
)) < 0;

82 
ölöe


83 
cﬂp_time_À
(
cﬂp_tick_t
 
a
, cﬂp_tick_à
b
)

85  
	ga
 =
b
 || 
cﬂp_time_…
(
a
, b);

90 #ifde‡
__˝lu•lus


	@include_lib/net/libcoap/encode.h

9 #i‚de‡
_COAP_ENCODE_H_


10 
	#_COAP_ENCODE_H_


	)

12 #i‡(
BSD
 >= 199103)

13 
	~<°rög.h
>

15 
	~<°rögs.h
>

18 
	#Nn
 8

	)

19 
	#E
 4

	)

20 
	#HIBIT
 (1 << (
Nn
 - 1))

	)

21 
	#EMASK
 ((1 << 
E
Ë- 1)

	)

22 
	#MMASK
 ((1 << 
Nn
Ë- 1 - 
EMASK
)

	)

23 
	#MAX_VALUE
 ( (1 << 
Nn
Ë- (1 << 
E
ËË* (1 << ((1 << EË- 1))

	)

25 
	#COAP_PSEUDOFP_DECODE_8_4
(
r
Ë‘ < 
HIBIT
 ?Ñ : (∏& 
MMASK
Ë<< (∏& 
EMASK
))

	)

27 #i‚de‡
HAVE_FLS


29 
cﬂp_Ês
(
i
);

31 
	#cﬂp_Ês
(
i
Ë
	`Ês
(i)

	)

35 
	#COAP_PSEUDOFP_ENCODE_8_4_DOWN
(
v
,
ls
Ë(v < 
HIBIT
 ? v : (l†
	`cﬂp_Ês
(vË- 
Nn
, (v >>ÜsË& 
MMASK
Ë+Üs)

	)

36 
	#COAP_PSEUDOFP_ENCODE_8_4_UP
(
v
,
ls
,
s
Ë(v < 
HIBIT
 ? v : (l†
	`cﬂp_Ês
(vË- 
Nn
, (†(((v + ((1<<
E
<<ls)-1)Ë>>ÜsË& 
MMASK
)), s =0 ? HIBIT +Ü†+ 1 : s +Üs))

	)

42 
cﬂp_decode_v¨_byãs
(*
buf
, 
Àn
);

50 
cﬂp_ícode_v¨_byãs
(*
buf
, 
vÆ
);

	@include_lib/net/libcoap/hashkey.h

14 #i‚de‡
_COAP_HASHKEY_H_


15 
	#_COAP_HASHKEY_H_


	)

17 
	~"°r.h
"

19 
	tcﬂp_key_t
[4];

21 #i‚de‡
cﬂp_hash


32 
cﬂp_hash_im∂
(c⁄° *
s
, 
Àn
, 
cﬂp_key_t
 
h
);

34 
	#cﬂp_hash
(
Såög
,
Lígth
,
Resu…
) \

35 
	`cﬂp_hash_im∂
((
Såög
),(
Lígth
),(
Resu…
))

	)

38 
	#__COAP_DEFAULT_HASH


	)

40 #unde‡
__COAP_DEFAULT_HASH


51 
	#cﬂp_°r_hash
(
Så
,
H
) { \

52 
	`as£π
(
Så
); \

53 
	`mem£t
((
H
), 0, (
cﬂp_key_t
)); \

54 
	`cﬂp_hash
((
H
), (
Så
)->
s
, (Så)->
Àngth
); \

55 }

	)

	@include_lib/net/libcoap/option.h

15 #i‚de‡
_OPTION_H_


16 
	#_OPTION_H_


	)

18 
	~"bôs.h
"

19 
	~"pdu.h
"

26 
	tcﬂp_›t_t
;

27 
	#PCHAR
(
p
Ë((
cﬂp_›t_t
 *)’))

	)

31 
	mdñè
;

32 
size_t
 
	mÀngth
;

33 *
	mvÆue
;

34 } 
	tcﬂp_›ti⁄_t
;

49 
size_t
 
cﬂp_›t_∑r£
(c⁄° 
cﬂp_›t_t
 *
›t
, size_à
Àngth
,

50 
cﬂp_›ti⁄_t
 *
ªsu…
);

62 
size_t
 
cﬂp_›t_size
(c⁄° 
cﬂp_›t_t
 *
›t
);

65 
	#COAP_OPT_SIZE
(
›t
Ë
	`cﬂp_›t_size
(›t)

	)

73 
cﬂp_›t_t
 *
›ti⁄s_°¨t
(
cﬂp_pdu_t
 *
pdu
);

80 
	#›ti⁄s_√xt
(
›t
) \

81 ((
cﬂp_›t_t
 *)((*)(
›t
Ë+ 
	`COAP_OPT_SIZE
(›t)))

	)

93 
	tcﬂp_›t_fûãr_t
[(
COAP_MAX_OPT
 >> 3) + 1];

96 
	#COAP_OPT_ALL
 
NULL


	)

103 
ölöe
 

104 
	$cﬂp_›ti⁄_fûãr_˛ór
(
cﬂp_›t_fûãr_t
 
f
)

106 
	`mem£t
(
f
, 0, (
cﬂp_›t_fûãr_t
));

107 
	}
}

119 
ölöe
 

120 
	$cﬂp_›ti⁄_£tb
(
cﬂp_›t_fûãr_t
 
fûãr
, 
ty≥
)

122  
	`bôs_£tb
((*)
fûãr
, (
cﬂp_›t_fûãr_t
), 
ty≥
);

123 
	}
}

135 
ölöe
 

136 
	$cﬂp_›ti⁄_˛rb
(
cﬂp_›t_fûãr_t
 
fûãr
, 
ty≥
)

138  
	`bôs_˛rb
((*)
fûãr
, (
cﬂp_›t_fûãr_t
), 
ty≥
);

139 
	}
}

151 
ölöe
 

152 
	$cﬂp_›ti⁄_gëb
(c⁄° 
cﬂp_›t_fûãr_t
 
fûãr
, 
ty≥
)

154  
	`bôs_gëb
((*)
fûãr
, (
cﬂp_›t_fûãr_t
), 
ty≥
);

155 
	}
}

174 
size_t
 
	mÀngth
;

175 
	mty≥
;

176 
	mbad
: 1;

177 
	mfûãªd
: 1;

178 
cﬂp_›t_t
 *
	m√xt_›ti⁄
;

179 
cﬂp_›t_fûãr_t
 
	mfûãr
;

180 } 
	tcﬂp_›t_ôî©‹_t
;

199 
cﬂp_›t_ôî©‹_t
 *
cﬂp_›ti⁄_ôî©‹_öô
(
cﬂp_pdu_t
 *
pdu
,

200 
cﬂp_›t_ôî©‹_t
 *
oi
, c⁄° 
cﬂp_›t_fûãr_t
 
fûãr
);

221 
cﬂp_›t_t
 *
cﬂp_›ti⁄_√xt
(
cﬂp_›t_ôî©‹_t
 *
oi
);

237 
cﬂp_›t_t
 *
cﬂp_check_›ti⁄
(
cﬂp_pdu_t
 *
pdu
,

238 
ty≥
,

239 
cﬂp_›t_ôî©‹_t
 *
oi
);

255 
size_t
 
cﬂp_›t_£thódî
(
cﬂp_›t_t
 *
›t
, size_à
maxÀn
,

256 
dñè
, 
size_t
 
Àngth
);

272 
size_t
 
cﬂp_›t_ícode
(
cﬂp_›t_t
 *
›t
, size_à
n
, 
dñè
,

273 c⁄° *
vÆ
, 
size_t
 
Àngth
);

284 
cﬂp_›t_dñè
(c⁄° 
cﬂp_›t_t
 *
›t
);

287 
	#COAP_OPT_DELTA
(
›t
Ë
	`cﬂp_›t_dñè
(›t)

	)

290 
	#COAP_OPT_SETDELTA
(
›t
,
vÆ
) \

291 
	`cﬂp_›t_ícode
((
›t
), 
COAP_MAX_PDU_SIZE
, (
vÆ
), 
NULL
, 0)

	)

306 
cﬂp_›t_Àngth
(c⁄° 
cﬂp_›t_t
 *
›t
);

309 
	#COAP_OPT_LENGTH
(
›t
Ë
	`cﬂp_›t_Àngth
(›t)

	)

319 *
cﬂp_›t_vÆue
(
cﬂp_›t_t
 *
›t
);

322 
	#COAP_OPT_VALUE
(
›t
Ë
	`cﬂp_›t_vÆue
((
cﬂp_›t_t
 *)›t)

	)

	@include_lib/net/libcoap/pdu.h

9 #i‚de‡
_PDU_H_


10 
	#_PDU_H_


	)

12 
	~"cﬂp_c⁄fig.h
"

13 
	~"cﬂp_li°.h
"

14 
	~"uri.h
"

20 
	#COAP_DEFAULT_RESPONSE_TIMEOUT
 2

	)

21 
	#COAP_DEFAULT_MAX_RETRANSMIT
 7

	)

22 
	#COAP_DEFAULT_PORT
 5683

	)

23 
	#COAP_DEFAULT_PORT_STR
 "5683"

	)

24 
	#COAP_DEFAULT_MAX_AGE
 60

	)

25 #i‚de‡
COAP_MAX_PDU_SIZE


26 
	#COAP_MAX_PDU_SIZE
 1400

	)

29 
	#COAP_DEFAULT_VERSION
 1

	)

30 
	#COAP_DEFAULT_SCHEME
 "cﬂp"

	)

33 
	#COAP_DEFAULT_URI_WELLKNOWN
 ".wñl-known/c‹e"

	)

35 #ifde‡
__COAP_DEFAULT_HASH


37 
	#COAP_DEFAULT_WKC_HASHKEY
 "\345\130\144\245"

	)

42 
	#COAP_MESSAGE_CON
 0

	)

43 
	#COAP_MESSAGE_NON
 1

	)

44 
	#COAP_MESSAGE_ACK
 2

	)

45 
	#COAP_MESSAGE_RST
 3

	)

49 
	#COAP_REQUEST_GET
 1

	)

50 
	#COAP_REQUEST_POST
 2

	)

51 
	#COAP_REQUEST_PUT
 3

	)

52 
	#COAP_REQUEST_DELETE
 4

	)

56 
	#COAP_OPTION_IF_MATCH
 1

	)

57 
	#COAP_OPTION_URI_HOST
 3

	)

58 
	#COAP_OPTION_ETAG
 4

	)

59 
	#COAP_OPTION_IF_NONE_MATCH
 5

	)

60 
	#COAP_OPTION_URI_PORT
 7

	)

61 
	#COAP_OPTION_LOCATION_PATH
 8

	)

62 
	#COAP_OPTION_URI_PATH
 11

	)

63 
	#COAP_OPTION_CONTENT_FORMAT
 12

	)

64 
	#COAP_OPTION_CONTENT_TYPE
 
COAP_OPTION_CONTENT_FORMAT


	)

65 
	#COAP_OPTION_MAXAGE
 14

	)

66 
	#COAP_OPTION_URI_QUERY
 15

	)

67 
	#COAP_OPTION_ACCEPT
 17

	)

68 
	#COAP_OPTION_LOCATION_QUERY
 20

	)

69 
	#COAP_OPTION_PROXY_URI
 35

	)

70 
	#COAP_OPTION_PROXY_SCHEME
 39

	)

71 
	#COAP_OPTION_SIZE1
 60

	)

75 
	#COAP_OPTION_OBSERVE
 6

	)

76 
	#COAP_OPTION_SUBSCRIPTION
 
COAP_OPTION_OBSERVE


	)

80 
	#COAP_OPTION_BLOCK2
 23

	)

81 
	#COAP_OPTION_BLOCK1
 27

	)

83 
	#COAP_MAX_OPT
 63

	)

91 
	#COAP_RESPONSE_CODE
(
N
Ë(((N)/100 << 5Ë| (N)%100)

	)

94 
	#COAP_RESPONSE_CLASS
(
C
Ë(((CË>> 5Ë& 0xFF)

	)

96 #i‚de‡
SHORT_ERROR_RESPONSE


107 *
cﬂp_ª•⁄£_phø£
(
code
);

109 
	#COAP_ERROR_PHRASE_LENGTH
 32

	)

112 
	#cﬂp_ª•⁄£_phø£
(
x
Ë((*)
NULL
)

	)

114 
	#COAP_ERROR_PHRASE_LENGTH
 0

	)

119 
	#COAP_RESPONSE_100
 40

	)

121 
	#COAP_RESPONSE_200
 
	`COAP_RESPONSE_CODE
(200Ë

	)

122 
	#COAP_RESPONSE_201
 
	`COAP_RESPONSE_CODE
(201Ë

	)

123 
	#COAP_RESPONSE_304
 
	`COAP_RESPONSE_CODE
(203Ë

	)

124 
	#COAP_RESPONSE_400
 
	`COAP_RESPONSE_CODE
(400Ë

	)

125 
	#COAP_RESPONSE_404
 
	`COAP_RESPONSE_CODE
(404Ë

	)

126 
	#COAP_RESPONSE_405
 
	`COAP_RESPONSE_CODE
(405Ë

	)

127 
	#COAP_RESPONSE_415
 
	`COAP_RESPONSE_CODE
(415Ë

	)

128 
	#COAP_RESPONSE_500
 
	`COAP_RESPONSE_CODE
(500Ë

	)

129 
	#COAP_RESPONSE_501
 
	`COAP_RESPONSE_CODE
(501Ë

	)

130 
	#COAP_RESPONSE_503
 
	`COAP_RESPONSE_CODE
(503Ë

	)

131 
	#COAP_RESPONSE_504
 
	`COAP_RESPONSE_CODE
(504Ë

	)

133 
	#COAP_RESPONSE_X_240
 240

	)

134 
	#COAP_RESPONSE_X_241
 241

	)

136 
	#COAP_RESPONSE_X_242
 
	`COAP_RESPONSE_CODE
(402Ë

	)

140 
	#COAP_MEDIATYPE_TEXT_PLAIN
 0

	)

141 
	#COAP_MEDIATYPE_APPLICATION_LINK_FORMAT
 40

	)

142 
	#COAP_MEDIATYPE_APPLICATION_XML
 41

	)

143 
	#COAP_MEDIATYPE_APPLICATION_OCTET_STREAM
 42

	)

144 
	#COAP_MEDIATYPE_APPLICATION_RDF_XML
 43

	)

145 
	#COAP_MEDIATYPE_APPLICATION_EXI
 47

	)

146 
	#COAP_MEDIATYPE_APPLICATION_JSON
 50

	)

150 
	#COAP_MEDIATYPE_ANY
 0xf‡

	)

154 
	tcﬂp_tid_t
;

155 
	#COAP_INVALID_TID
 -1

	)

157 #ifde‡
WORDS_BIGENDIAN


159 
	mvîsi⁄
: 2;

160 
	mty≥
: 2;

161 
	mtokí_Àngth
: 4;

162 
	mcode
: 8;

163 
	mid
;

164 
	mtokí
[];

165 } 
	tcﬂp_hdr_t
;

168 
	mtokí_Àngth
: 4;

169 
	mty≥
: 2;

170 
	mvîsi⁄
: 2;

171 
	mcode
: 8;

172 
	mid
;

173 
	mtokí
[];

174 } 
	tcﬂp_hdr_t
;

177 
	#COAP_MESSAGE_IS_EMPTY
(
MSG
Ë((MSG)->
code
 =0)

	)

178 
	#COAP_MESSAGE_IS_REQUEST
(
MSG
Ë(!
	`COAP_MESSAGE_IS_EMPTY
(MSG) \

179 && ((
MSG
)->
code
 < 32))

	)

180 
	#COAP_MESSAGE_IS_RESPONSE
(
MSG
Ë((MSG)->
code
 >64)

	)

182 
	#COAP_OPT_LONG
 0x0F

	)

185 
	#COAP_OPT_END
 0xF0

	)

187 
	#COAP_PAYLOAD_START
 0xFF

	)

195 
	mkey
;

196 
	mÀngth
;

197 } 
	tcﬂp_›ti⁄
;

199 
	#COAP_OPTION_KEY
(
›ti⁄
Ë(›ti⁄).
key


	)

200 
	#COAP_OPTION_LENGTH
(
›ti⁄
Ë(›ti⁄).
Àngth


	)

201 
	#COAP_OPTION_DATA
(
›ti⁄
Ë((*)&(›ti⁄Ë+ (
cﬂp_›ti⁄
))

	)

206 
size_t
 
	mmax_size
;

208 
cﬂp_hdr_t
 *
	mhdr
;

209 
	mmax_dñè
;

210 
	mÀngth
;

211 *
	md©a
;

213 } 
	tcﬂp_pdu_t
;

216 
	#COAP_OPTION
(
node
Ë((
cﬂp_›ti⁄
 *)“ode)->
›ti⁄s
)

	)

232 
cﬂp_pdu_t
 *

233 
cﬂp_pdu_öô
(
ty≥
, 
code
,

234 
id
, 
size_t
 
size
);

242 
cﬂp_pdu_˛ór
(
cﬂp_pdu_t
 *
pdu
, 
size_t
 
size
);

251 
cﬂp_pdu_t
 *
cﬂp_√w_pdu
();

253 
cﬂp_dñëe_pdu
(
cﬂp_pdu_t
 *);

267 
cﬂp_pdu_∑r£
(*
d©a
, 
size_t
 
Àngth
, 
cﬂp_pdu_t
 *
ªsu…
);

281 
cﬂp_add_tokí
(
cﬂp_pdu_t
 *
pdu
, 
size_t
 
Àn
, c⁄° *
d©a
);

291 
size_t
 
cﬂp_add_›ti⁄
(
cﬂp_pdu_t
 *
pdu
, 
ty≥
,

292 
Àn
, c⁄° *
d©a
);

301 *
cﬂp_add_›ti⁄_œãr
(
cﬂp_pdu_t
 *
pdu
, 
ty≥
,

302 
Àn
);

309 
cﬂp_add_d©a
(
cﬂp_pdu_t
 *
pdu
, 
Àn
, c⁄° *
d©a
);

316 
cﬂp_gë_d©a
(
cﬂp_pdu_t
 *
pdu
, 
size_t
 *
Àn
, **
d©a
);

	@include_lib/net/libcoap/prng.h

14 #i‚de‡
_COAP_PRNG_H_


15 
	#_COAP_PRNG_H_


	)

17 
	~"cﬂp_c⁄fig.h
"

24 
	~<°dlib.h
>

31 
ölöe
 

32 
	$cﬂp_¥ng_im∂
(*
buf
, 
size_t
 
Àn
)

34 
Àn
--) {

35 *
buf
++ = 
	`ønd
() & 0xFF;

38 
	}
}

40 #i‚de‡
¥ng


46 
	#¥ng
(
Buf
,
Lígth
Ë
	`cﬂp_¥ng_im∂
((Buf), (Lígth))

	)

49 #i‚de‡
¥ng_öô


56 
	#¥ng_öô
(
VÆue
Ë
	`§™d
(()(VÆue))

	)

	@include_lib/net/libcoap/resource.h

14 #i‚de‡
_COAP_RESOURCE_H_


15 
	#_COAP_RESOURCE_H_


	)

17 
	~"cﬂp_c⁄fig.h
"

18 
	~"t_li°.h
"

20 
	~<as£π.h
>

22 #i‚de‡
COAP_RESOURCE_CHECK_TIME


24 
	#COAP_RESOURCE_CHECK_TIME
 2

	)

27 #ifde‡
COAP_RESOURCES_NOHASH


28 
	~"uéi°.h
"

30 
	~"uthash.h
"

32 
	~"hashkey.h
"

33 
	~"async.h
"

34 
	~"°r.h
"

35 
	~"pdu.h
"

36 
	~"cﬂp_√t.h
"

37 
	~"subs¸ibe.h
"

40 (*
	tcﬂp_mëhod_h™dÀr_t
)

41 (
	tcﬂp_c⁄ãxt_t
 *, 
	tcﬂp_ªsour˚_t
 *, 
	tcﬂp_addªss_t
 *, 
	tcﬂp_pdu_t
 *,

42 
	t°r
 * , 
	tcﬂp_pdu_t
 * );

44 
	#COAP_ATTR_FLAGS_RELEASE_NAME
 0x1

	)

45 
	#COAP_ATTR_FLAGS_RELEASE_VALUE
 0x2

	)

47 
	scﬂp_©å_t
 {

48 
cﬂp_©å_t
 *
√xt
;

49 
°r
 
«me
;

50 
°r
 
vÆue
;

51 
Êags
;

52 } 
	tcﬂp_©å_t
;

54 
	#COAP_RESOURCE_FLAGS_RELEASE_URI
 0x1

	)

56 
	scﬂp_ªsour˚_t
 {

57 
dúty
: 1;

58 
∑πüŒydúty
: 1;

59 
ob£rvabÀ
: 1;

60 
ˇchóbÀ
: 1;

68 
cﬂp_mëhod_h™dÀr_t
 
h™dÀr
[4];

70 
cﬂp_key_t
 
key
;

72 #ifde‡
COAP_RESOURCES_NOHASH


73 
cﬂp_ªsour˚_t
 *
√xt
;

75 
UT_hash_h™dÀ
 
hh
;

78 
cﬂp_©å_t
 *
lök_©å
;

79 
	`LIST_STRUCT
(
subs¸ibîs
);

85 
°r
 
uri
;

86 
Êags
;

87 
îr_no
;

88 *
nŸify_¥iv
;

89 *
ªgi°î_¥iv
;

90 } 
	tcﬂp_ªsour˚_t
;

103 
cﬂp_ªsour˚_t
 *
	`cﬂp_ªsour˚_öô
(c⁄° *
uri
, 
size_t
 
Àn
, 
Êags
);

113 
	`cﬂp_add_ªsour˚
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_ªsour˚_t
 *
ªsour˚
);

124 
	`cﬂp_dñëe_ªsour˚
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_key_t
 
key
);

141 
cﬂp_©å_t
 *
	`cﬂp_add_©å
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

142 c⁄° *
«me
, 
size_t
 
∆í
,

143 c⁄° *
vÆ
, 
size_t
 
vÀn
,

144 
Êags
);

156 
cﬂp_©å_t
 *
	`cﬂp_föd_©å
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

157 c⁄° *
«me
, 
size_t
 
∆í
);

165 
	`cﬂp_dñëe_©å
(
cﬂp_©å_t
 *
©å
);

177 
	tcﬂp_¥öt_°©us_t
;

179 
	#COAP_PRINT_STATUS_MASK
 0xF0000000u

	)

180 
	#COAP_PRINT_OUTPUT_LENGTH
(
v
Ë((vË& ~
COAP_PRINT_STATUS_MASK
)

	)

181 
	#COAP_PRINT_STATUS_ERROR
 0x80000000u

	)

182 
	#COAP_PRINT_STATUS_TRUNC
 0x40000000u

	)

206 
cﬂp_¥öt_°©us_t
 
	`cﬂp_¥öt_lök
(c⁄° 
cﬂp_ªsour˚_t
 *
ªsour˚
,

207 *
buf
, 
size_t
 *
Àn
, size_à*
off£t
);

217 
ölöe
 

218 
	$cﬂp_ªgi°î_h™dÀr
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

219 
mëhod
, 
cﬂp_mëhod_h™dÀr_t
 
h™dÀr
)

221 
	`as£π
(
ªsour˚
);

222 
	`as£π
(
mëhod
 > 0 && (
size_t
)(mëhod - 1Ë< (
ªsour˚
->
h™dÀr
Ë/ (
cﬂp_mëhod_h™dÀr_t
));

223 
ªsour˚
->
h™dÀr
[
mëhod
 - 1] = handler;

224 
	}
}

235 
cﬂp_ªsour˚_t
 *
cﬂp_gë_ªsour˚_‰om_key
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

236 
cﬂp_key_t
 
key
);

237 
cﬂp_ªsour˚_t
 *
cﬂp_gë_ªsour˚_‰om_uri
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

238 *
uri
);

247 
cﬂp_hash_ªque°_uri
(c⁄° 
cﬂp_pdu_t
 *
ªque°
, 
cﬂp_key_t
 
key
);

267 
cﬂp_subs¸ùti⁄_t
 *
cﬂp_add_ob£rvî
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

268 c⁄° 
cﬂp_addªss_t
 *
ob£rvî
,

269 c⁄° 
°r
 *
tokí
);

280 
cﬂp_subs¸ùti⁄_t
 *
cﬂp_föd_ob£rvî
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

281 c⁄° 
cﬂp_addªss_t
 *
≥î
,

282 c⁄° 
°r
 *
tokí
);

292 
cﬂp_touch_ob£rvî
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

293 c⁄° 
cﬂp_addªss_t
 *
ob£rvî
,

294 c⁄° 
°r
 *
tokí
);

307 
cﬂp_dñëe_ob£rvî
(
cﬂp_ªsour˚_t
 *
ªsour˚
,

308 c⁄° 
cﬂp_addªss_t
 *
ob£rvî
,

309 c⁄° 
°r
 *
tokí
);

315 
cﬂp_check_nŸify
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

318 
cﬂp_add_›ti⁄_ob£rvî
(
cﬂp_c⁄ãxt_t
 *
˘x
, 
cﬂp_ªsour˚_t
 *
ªsour˚
,

319 
cﬂp_addªss_t
 *
≥î
, 
cﬂp_pdu_t
 *
ªque°
, 
°r
 *
tokí
, cﬂp_pdu_à*
ª•⁄£
);

	@include_lib/net/libcoap/soap_mem.h

10 #i‚de‡
_COAP_MEM_H_


11 
	#_COAP_MEM_H_


	)

13 
	~<°dlib.h
>

15 
	#cﬂp_mÆloc
(
size
Ë
	`mÆloc
(size)

	)

16 
	#cﬂp_‰ì
(
size
Ë
	`‰ì
(size)

	)

	@include_lib/net/libcoap/str.h

9 #i‚de‡
_COAP_STR_H_


10 
	#_COAP_STR_H_


	)

12 
	~<°rög.h
>

15 
size_t
 
	mÀngth
;

16 *
	ms
;

17 } 
	t°r
;

19 
	#COAP_SET_STR
(
°
,
l
,
v
Ë{ (°)->
Àngth
 = (l), (°)->
s
 = (v); }

	)

25 
°r
 *
cﬂp_√w_°rög
(
size_t
 
size
);

28 
cﬂp_dñëe_°rög
(
°r
 *);

	@include_lib/net/libcoap/subscribe.h

11 #i‚de‡
_COAP_SUBSCRIBE_H_


12 
	#_COAP_SUBSCRIBE_H_


	)

14 
	~"cﬂp_c⁄fig.h
"

15 
	~"addªss.h
"

22 #i‚de‡
COAP_OBS_MAX_NON


28 
	#COAP_OBS_MAX_NON
 5

	)

31 #i‚de‡
COAP_OBS_MAX_FAIL


37 
	#COAP_OBS_MAX_FAIL
 0

	)

41 
	scﬂp_subs¸ùti⁄_t
 {

42 
cﬂp_subs¸ùti⁄_t
 *
	m√xt
;

43 
cﬂp_addªss_t
 
	msubs¸ibî
;

45 
	mn⁄
: 1;

46 
	mn⁄_˙t
: 4;

47 
	mÁû_˙t
: 2;

48 
	mdúty
: 1;

50 
size_t
 
	mtokí_Àngth
;

51 
	mtokí
[8];

53 } 
	tcﬂp_subs¸ùti⁄_t
;

55 
cﬂp_subs¸ùti⁄_öô
(
cﬂp_subs¸ùti⁄_t
 *);

58 
	~"uthash.h
"

59 
	~"uri.h
"

60 
	~"li°.h
"

61 
	~"pdu.h
"

62 
	~"cﬂp_√t.h
"

65 
	tcﬂp_key_t
;

68 
	#COAP_INVALID_HASHKEY
 ((
cﬂp_key_t
)-1)

	)

71 
cﬂp_uri_t
 *
	muri
;

72 
UT_hash_h™dÀ
 
	mhh
;

73 
°r
 *
	m«me
;

74 
	mmedüty≥
;

75 
	mdúty
: 1;

76 
	mwrôabÀ
: 1;

79 
	mëag
[4];

81 
	mmaxage
;

98 (*
	md©a
)(
cﬂp_uri_t
 *
	muri
, *
	mmedüty≥
, 
	moff£t
, *
	mbuf
, *
	mbuÊí
, *
	mföished
);

99 } 
	tcﬂp_ªsour˚_t
;

103 
cﬂp_key_t
 
	mªsour˚
;

104 
time_t
 
	mexpúes
;

106 
cﬂp_addªss_t
 
	msubs¸ibî
;

108 
°r
 
	mtokí
;

109 } 
	tcﬂp_subs¸ùti⁄_t
;

111 
	#COAP_RESOURCE
(
node
Ë((
cﬂp_ªsour˚_t
 *)“ode)->
d©a
)

	)

112 
	#COAP_SUBSCRIPTION
(
node
Ë((
cﬂp_subs¸ùti⁄_t
 *)“ode)->
d©a
)

	)

115 
cﬂp_check_ªsour˚_li°
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

118 
cﬂp_check_subs¸ùti⁄s
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
);

126 
cﬂp_key_t
 
cﬂp_add_ªsour˚
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_ªsour˚_t
 *);

132 
cﬂp_dñëe_ªsour˚
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
, 
cﬂp_key_t
 
key
);

137 
cﬂp_subs¸ùti⁄_t
 *
cﬂp_√w_subs¸ùti⁄
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

138 c⁄° 
cﬂp_uri_t
 *
ªsour˚
,

139 c⁄° 
sockaddr
 *
subs¸ibî
,

140 
sockÀn_t
 
addæí
,

141 
time_t
 
expúy
);

153 
cﬂp_key_t
 
cﬂp_add_subs¸ùti⁄
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

154 
cﬂp_subs¸ùti⁄_t
 *
subs¸ùti⁄
);

167 
cﬂp_subs¸ùti⁄_t
 *
cﬂp_föd_subs¸ùti⁄
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

168 
cﬂp_key_t
 
hashkey
,

169 
sockaddr
 *
subs¸ibî
,

170 
°r
 *
tokí
);

178 
cﬂp_dñëe_subs¸ùti⁄
(
cﬂp_c⁄ãxt_t
 *
c⁄ãxt
,

179 
cﬂp_key_t
 
hashkey
,

180 
sockaddr
 *
subs¸ibî
);

183 
cﬂp_key_t
 
cﬂp_uri_hash
(c⁄° 
cﬂp_uri_t
 *
uri
);

187 
cﬂp_key_t
 
cﬂp_subs¸ùti⁄_hash
(
cﬂp_subs¸ùti⁄_t
 *
subs¸ùti⁄
);

190 
cﬂp_ªsour˚_t
 *
cﬂp_gë_ªsour˚_‰om_key
(
cﬂp_c⁄ãxt_t
 *
˘x
, 
cﬂp_key_t
 
key
);

193 
cﬂp_ªsour˚_t
 *
cﬂp_gë_ªsour˚
(
cﬂp_c⁄ãxt_t
 *
˘x
, 
cﬂp_uri_t
 *
uri
);

	@include_lib/net/libcoap/t_list.h

31 #i‚de‡
_DTLS_LIST_H_


32 
	#_DTLS_LIST_H_


	)

35 
	~"uthash.h
"

36 
	~"uéi°.h
"

77 **
	tli°_t
;

78 
	sli°
 {

79 
li°
 *
	m√xt
;

82 
	#LIST_CONCAT
(
s1
, 
s2
Ës1##
	)
s2

84 
	#LIST_STRUCT
(
«me
) \

85 *
	`LIST_CONCAT
(
«me
, 
_li°
); \

86 
li°_t
 
«me


	)

88 
	#LIST_STRUCT_INIT
(
°ru˘_±r
, 
«me
) { \

89 (
°ru˘_±r
)->
«me
 = &((°ru˘_±r)->
	`LIST_CONCAT
“ame,
_li°
)); \

90 (
°ru˘_±r
)->
	`LIST_CONCAT
(
«me
,
_li°
Ë
NULL
; \

91 }

	)

93 
ölöe
 *

94 
	$li°_hód
(
li°_t
 
the_li°
)

96  *
the_li°
;

97 
	}
}

99 
ölöe
 

100 
	$li°_ªmove
(
li°_t
 
the_li°
, *
ôem
)

102 i‡(
	`li°_hód
(
the_li°
)) {

103 
	`LL_DELETE
(*(
li°
 **)
the_li°
, (li° *)
ôem
);

105 
	}
}

107 
ölöe
 

108 
	$li°_t_add
(
li°_t
 
the_li°
, *
ôem
)

110 
	`li°_ªmove
(
the_li°
, 
ôem
);

111 
	`LL_APPEND
(*(
li°
 **)
the_li°
, (li° *)
ôem
);

112 
	}
}

114 
ölöe
 

115 
	$li°_push
(
li°_t
 
the_li°
, *
ôem
)

117 
	`LL_PREPEND
(*(
li°
 **)
the_li°
, (li° *)
ôem
);

118 
	}
}

120 
ölöe
 *

121 
	$li°_p›
(
li°_t
 
the_li°
)

123 
li°
 *
l
;

124 
l
 = (
li°
 *)*
the_li°
;

125 i‡(
l
) {

126 
	`li°_ªmove
(
the_li°
, 
l
);

129  
l
;

130 
	}
}

132 
ölöe
 

133 
	$li°_ö£π
(
li°_t
 
the_li°
, *
¥evôem
, *
√wôem
)

135 i‡(
¥evôem
 =
NULL
) {

136 
	`li°_push
(
the_li°
, 
√wôem
);

138 ((
li°
 *)
√wôem
)->
√xt
 = ((li° *)
¥evôem
)->next;

139 ((
li°
 *)
¥evôem
)->
√xt
 = (li° *)
√wôem
;

141 
	}
}

143 
ölöe
 *

144 
	$li°_ôem_√xt
(*
ôem
)

146  
ôem
 =
NULL
 ? NULL : ((
li°
 *)ôem)->
√xt
;

147 
	}
}

	@include_lib/net/libcoap/uri.h

9 #i‚de‡
_COAP_URI_H_


10 
	#_COAP_URI_H_


	)

12 
	~"hashkey.h
"

13 
	~"°r.h
"

19 
°r
 
	mho°
;

20 
	mp‹t
;

21 
°r
 
	m∑th
;

23 
°r
 
	mquîy
;

24 } 
	tcﬂp_uri_t
;

35 
cﬂp_uri_t
 *
cﬂp_√w_uri
(c⁄° *
uri
, 
Àngth
);

41 
cﬂp_uri_t
 *
cﬂp_˛⁄e_uri
(c⁄° cﬂp_uri_à*
uri
);

53 
cﬂp_hash_∑th
(c⁄° *
∑th
, 
size_t
 
Àn
, 
cﬂp_key_t
 
key
);

79 
size_t
 
	mn
;

80 
	m£∑øt‹
;

81 *
	mdñim
;

82 
size_t
 
	mdÀn
;

83 *
	mpos
;

84 
size_t
 
	m£gmít_Àngth
;

85 } 
	tcﬂp_∑r£_ôî©‹_t
;

99 
cﬂp_∑r£_ôî©‹_t
 *

100 
cﬂp_∑r£_ôî©‹_öô
(*
s
, 
size_t
 
n
,

101 
£∑øt‹
,

102 *
dñim
, 
size_t
 
dÀn
,

103 
cﬂp_∑r£_ôî©‹_t
 *
pi
);

116 *
cﬂp_∑r£_√xt
(
cﬂp_∑r£_ôî©‹_t
 *
pi
);

135 
cﬂp_•lô_uri
(*
°r_v¨
, 
size_t
 
Àn
, 
cﬂp_uri_t
 *
uri
);

150 
cﬂp_•lô_∑th
(c⁄° *
s
, 
size_t
 
Àngth
,

151 *
buf
, 
size_t
 *
buÊí
);

168 
cﬂp_•lô_quîy
(c⁄° *
s
, 
size_t
 
Àngth
,

169 *
buf
, 
size_t
 *
buÊí
);

	@include_lib/net/libcoap/uthash.h

24 #i‚de‡
UTHASH_H


25 
	#UTHASH_H


	)

27 
	~<°rög.h
>

28 
	~<°ddef.h
>

34 #ifde‡
_MSC_VER


35 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

36 
	#DECLTYPE
(
x
Ë(
	`de˛ty≥
(x))

	)

38 
	#NO_DECLTYPE


	)

39 
	#DECLTYPE
(
x
)

	)

42 
	#DECLTYPE
(
x
Ë(
	`__ty≥of
(x))

	)

45 #ifde‡
NO_DECLTYPE


46 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

48 **
_da_d°
 = (**)(&(
d°
)); \

49 *
_da_d°
 = (*)(
§c
); \

50 } 0)

	)

52 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

54 (
d°
Ë
	`DECLTYPE
(d°)(
§c
); \

55 } 0)

	)

59 #ifde‡
_MSC_VER


60 
	tuöt32_t
;

62 
	~<öây≥s.h
>

65 
	#UTHASH_VERSION
 1.9.3

	)

67 
	#uthash_Áèl
(
msg
)

68 
	#uthash_mÆloc
(
sz
Ë
	`mÆloc
(szË

	)

69 
	#uthash_‰ì
(
±r
,
sz
Ë
	`‰ì
’åË

	)

71 
	#uthash_n€x∑nd_fyi
(
tbl
Ë

	)

72 
	#uthash_ex∑nd_fyi
(
tbl
Ë

	)

75 
	#HASH_INITIAL_NUM_BUCKETS
 32

	)

76 
	#HASH_INITIAL_NUM_BUCKETS_LOG2
 5

	)

77 
	#HASH_BKT_CAPACITY_THRESH
 10

	)

80 
	#ELMT_FROM_HH
(
tbl
,
hhp
Ë((*)(((*)(hhp)Ë- (—bl)->
hho
)))

	)

82 
	#HASH_FIND
(
hh
,
hód
,
key±r
,
keyÀn
,
out
) \

84 
_hf_bkt
,
_hf_hashv
; \

85 
out
=
NULL
; \

86 i‡(
hód
) { \

87 
	`HASH_FCN
(
key±r
,
keyÀn
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hf_hashv
, 
_hf_bkt
); \

88 i‡(
	`HASH_BLOOM_TEST
((
hód
)->
hh
.
tbl
, 
_hf_hashv
)) { \

89 
	`HASH_FIND_IN_BKT
((
hód
)->
hh
.
tbl
, hh, (hód)->hh.tbl->
buckës
[ 
_hf_bkt
 ], \

90 
key±r
,
keyÀn
,
out
); \

93 } 0)

	)

95 #ifde‡
HASH_BLOOM


96 
	#HASH_BLOOM_BITLEN
 (1ULL << 
HASH_BLOOM
)

	)

97 
	#HASH_BLOOM_BYTELEN
 (
HASH_BLOOM_BITLEN
/8Ë+ ((HASH_BLOOM_BITLEN%8Ë? 1:0)

	)

98 
	#HASH_BLOOM_MAKE
(
tbl
) \

100 (
tbl
)->
bloom_nbôs
 = 
HASH_BLOOM
; \

101 (
tbl
)->
bloom_bv
 = (
uöt8_t
*)
	`uthash_mÆloc
(
HASH_BLOOM_BYTELEN
); \

102 i‡(!((
tbl
)->
bloom_bv
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

103 
	`mem£t
((
tbl
)->
bloom_bv
, 0, 
HASH_BLOOM_BYTELEN
); \

104 (
tbl
)->
bloom_sig
 = 
HASH_BLOOM_SIGNATURE
; \

105 } 0);

	)

107 
	#HASH_BLOOM_FREE
(
tbl
) \

109 
	`uthash_‰ì
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

110 } 0);

	)

112 
	#HASH_BLOOM_BITSET
(
bv
,
idx
Ë(bv[(idx)/8] |(1U << ((idx)%8)))

	)

113 
	#HASH_BLOOM_BITTEST
(
bv
,
idx
Ë(bv[(idx)/8] & (1U << ((idx)%8)))

	)

115 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
) \

116 
	`HASH_BLOOM_BITSET
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

118 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
) \

119 
	`HASH_BLOOM_BITTEST
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

122 
	#HASH_BLOOM_MAKE
(
tbl
)

	)

123 
	#HASH_BLOOM_FREE
(
tbl
)

	)

124 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
)

	)

125 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
Ë(1)

	)

128 
	#HASH_MAKE_TABLE
(
hh
,
hód
) \

130 (
hód
)->
hh
.
tbl
 = (
UT_hash_èbÀ
*)
	`uthash_mÆloc
( \

131 (
UT_hash_èbÀ
)); \

132 i‡(!((
hód
)->
hh
.
tbl
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

133 
	`mem£t
((
hód
)->
hh
.
tbl
, 0, (
UT_hash_èbÀ
)); \

134 (
hód
)->
hh
.
tbl
->
èû
 = &((head)->hh); \

135 (
hód
)->
hh
.
tbl
->
num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS
; \

136 (
hód
)->
hh
.
tbl
->
log2_num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS_LOG2
; \

137 (
hód
)->
hh
.
tbl
->
hho
 = (*)(&(head)->hh) - (*)(head); \

138 (
hód
)->
hh
.
tbl
->
buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

139 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

140 i‡(! (
hód
)->
hh
.
tbl
->
buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

141 
	`mem£t
((
hód
)->
hh
.
tbl
->
buckës
, 0, \

142 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

143 
	`HASH_BLOOM_MAKE
((
hód
)->
hh
.
tbl
); \

144 (
hód
)->
hh
.
tbl
->
sig«tuª
 = 
HASH_SIGNATURE
; \

145 } 0)

	)

147 
	#HASH_ADD
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
) \

148 
	`HASH_ADD_KEYPTR
(
hh
,
hód
,&
add
->
fõld«me
,
keyÀn_ö
,add)

	)

150 
	#HASH_ADD_KEYPTR
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
) \

152 
_ha_bkt
; \

153 (
add
)->
hh
.
√xt
 = 
NULL
; \

154 (
add
)->
hh
.
key
 = (*)
key±r
; \

155 (
add
)->
hh
.
keyÀn
 = 
keyÀn_ö
; \

156 i‡(!(
hód
)) { \

157 
hód
 = (
add
); \

158 (
hód
)->
hh
.
¥ev
 = 
NULL
; \

159 
	`HASH_MAKE_TABLE
(
hh
,
hód
); \

161 (
hód
)->
hh
.
tbl
->
èû
->
√xt
 = (
add
); \

162 (
add
)->
hh
.
¥ev
 = 
	`ELMT_FROM_HH
((
hód
)->hh.
tbl
, (hód)->hh.tbl->
èû
); \

163 (
hód
)->
hh
.
tbl
->
èû
 = &((
add
)->hh); \

165 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

166 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

167 
	`HASH_FCN
(
key±r
,
keyÀn_ö
, (
hód
)->
hh
.
tbl
->
num_buckës
, \

168 (
add
)->
hh
.
hashv
, 
_ha_bkt
); \

169 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
],&(
add
)->hh); \

170 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
,(
add
)->hh.
hashv
); \

171 
	`HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
keyÀn_ö
); \

172 
	`HASH_FSCK
(
hh
,
hód
); \

173 } 0)

	)

175 
	#HASH_TO_BKT
–
hashv
, 
num_bkts
, 
bkt
 ) \

177 
bkt
 = ((
hashv
Ë& ((
num_bkts
) - 1)); \

178 } 0)

	)

192 
	#HASH_DELETE
(
hh
,
hód
,
dñ±r
) \

194 
_hd_bkt
; \

195 
UT_hash_h™dÀ
 *
_hd_hh_dñ
; \

196 i‡–((
dñ±r
)->
hh
.
¥ev
 =
NULL
Ë&& ((dñ±r)->hh.
√xt
 == NULL) ) { \

197 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

198 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
) ); \

199 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

200 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

201 
hód
 = 
NULL
; \

203 
_hd_hh_dñ
 = &((
dñ±r
)->
hh
); \

204 i‡((
dñ±r
Ë=
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,(hód)->hh.tbl->
èû
)) { \

205 (
hód
)->
hh
.
tbl
->
èû
 = \

206 (
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

207 (
hód
)->
hh
.
tbl
->
hho
); \

209 i‡((
dñ±r
)->
hh
.
¥ev
) { \

210 ((
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

211 (
hód
)->
hh
.
tbl
->
hho
))->
√xt
 = (
dñ±r
)->hh.next; \

213 
	`DECLTYPE_ASSIGN
(
hód
,(
dñ±r
)->
hh
.
√xt
); \

215 i‡(
_hd_hh_dñ
->
√xt
) { \

216 ((
UT_hash_h™dÀ
*)((*)
_hd_hh_dñ
->
√xt
 + \

217 (
hód
)->
hh
.
tbl
->
hho
))->
¥ev
 = \

218 
_hd_hh_dñ
->
¥ev
; \

220 
	`HASH_TO_BKT
–
_hd_hh_dñ
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

221 
	`HASH_DEL_IN_BKT
(
hh
,(
hód
)->hh.
tbl
->
buckës
[
_hd_bkt
], 
_hd_hh_dñ
); \

222 (
hód
)->
hh
.
tbl
->
num_ôems
--; \

224 
	`HASH_FSCK
(
hh
,
hód
); \

225 } 0)

	)

229 
	#HASH_FIND_STR
(
hód
,
föd°r
,
out
) \

230 
	`HASH_FIND
(
hh
,
hód
,
föd°r
,
	`°æí
(föd°r),
out
)

	)

231 
	#HASH_ADD_STR
(
hód
,
°rfõld
,
add
) \

232 
	`HASH_ADD
(
hh
,
hód
,
°rfõld
,
	`°æí
(
add
->°rfõld),add)

	)

233 
	#HASH_FIND_INT
(
hód
,
födöt
,
out
) \

234 
	`HASH_FIND
(
hh
,
hód
,
födöt
,(),
out
)

	)

235 
	#HASH_ADD_INT
(
hód
,
ötfõld
,
add
) \

236 
	`HASH_ADD
(
hh
,
hód
,
ötfõld
,(),
add
)

	)

237 
	#HASH_FIND_PTR
(
hód
,
föd±r
,
out
) \

238 
	`HASH_FIND
(
hh
,
hód
,
föd±r
,(*),
out
)

	)

239 
	#HASH_ADD_PTR
(
hód
,
±rfõld
,
add
) \

240 
	`HASH_ADD
(
hh
,
hód
,
±rfõld
,(*),
add
)

	)

241 
	#HASH_DEL
(
hód
,
dñ±r
) \

242 
	`HASH_DELETE
(
hh
,
hód
,
dñ±r
)

	)

247 #ifde‡
HASH_DEBUG


248 
	#HASH_OOPS
(...Ëdÿ{ 
	`¥ötf
(
__VA_ARGS__
);  (-1); } 0)

	)

249 
	#HASH_FSCK
(
hh
,
hód
) \

251 
_bkt_i
; \

252 
_cou¡
, 
_bkt_cou¡
; \

253 *
_¥ev
; \

254 
UT_hash_h™dÀ
 *
_thh
; \

255 i‡(
hód
) { \

256 
_cou¡
 = 0; \

257  
_bkt_i
 = 0; _bkt_ò< (
hód
)->
hh
.
tbl
->
num_buckës
; _bkt_i++) { \

258 
_bkt_cou¡
 = 0; \

259 
_thh
 = (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
hh_hód
; \

260 
_¥ev
 = 
NULL
; \

261 
_thh
) { \

262 i‡(
_¥ev
 !(*)(
_thh
->
hh_¥ev
)) { \

263 
	`HASH_OOPS
("invalid hh_prev %p,áctual %p\n", \

264 
_thh
->
hh_¥ev
, 
_¥ev
 ); \

266 
_bkt_cou¡
++; \

267 
_¥ev
 = (*)(
_thh
); \

268 
_thh
 = _thh->
hh_√xt
; \

270 
_cou¡
 +
_bkt_cou¡
; \

271 i‡((
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
 !
_bkt_cou¡
) { \

272 
	`HASH_OOPS
("invalid bucket count %d,áctual %d\n", \

273 (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
, 
_bkt_cou¡
); \

276 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

277 
	`HASH_OOPS
("invalid hh item count %d,áctual %d\n", \

278 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

281 
_cou¡
 = 0; \

282 
_¥ev
 = 
NULL
; \

283 
_thh
 = &(
hód
)->
hh
; \

284 
_thh
) { \

285 
_cou¡
++; \

286 i‡(
_¥ev
 !=(*)(
_thh
->
¥ev
)) { \

287 
	`HASH_OOPS
("invalidÖrev %p,áctual %p\n", \

288 
_thh
->
¥ev
, 
_¥ev
 ); \

290 
_¥ev
 = (*)
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_thh
); \

291 
_thh
 = ( _thh->
√xt
 ? (
UT_hash_h™dÀ
*)((*)(_thh->next) + \

292 (
hód
)->
hh
.
tbl
->
hho
Ë: 
NULL
 ); \

294 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

295 
	`HASH_OOPS
("invalidápp item count %d,áctual %d\n", \

296 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

299 } 0)

	)

301 
	#HASH_FSCK
(
hh
,
hód
)

	)

307 #ifde‡
HASH_EMIT_KEYS


308 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
) \

310 
_kÀn
 = 
fõldÀn
; \

311 
	`wrôe
(
HASH_EMIT_KEYS
, &
_kÀn
, (_klen)); \

312 
	`wrôe
(
HASH_EMIT_KEYS
, 
key±r
, 
fõldÀn
); \

313 } 0)

	)

315 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
)

	)

319 #ifde‡
HASH_FUNCTION


320 
	#HASH_FCN
 
HASH_FUNCTION


	)

322 
	#HASH_FCN
 
HASH_JEN


	)

326 
	#HASH_BER
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

328 
_hb_keyÀn
=
keyÀn
; \

329 *
_hb_key
=(*)(
key
); \

330 (
hashv
) = 0; \

331 
_hb_keyÀn
--Ë{ (
hashv
Ë((hashvË* 33Ë+ *
_hb_key
++; } \

332 
bkt
 = (
hashv
Ë& (
num_bkts
-1); \

333 } 0)

	)

338 
	#HASH_SAX
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

340 
_sx_i
; \

341 *
_hs_key
=(*)(
key
); \

342 
hashv
 = 0; \

343 
_sx_i
=0; _sx_ò< 
keyÀn
; _sx_i++) \

344 
hashv
 ^(hashv << 5Ë+ (hashv >> 2Ë+ 
_hs_key
[
_sx_i
]; \

345 
bkt
 = 
hashv
 & (
num_bkts
-1); \

346 } 0)

	)

348 
	#HASH_FNV
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

350 
_‚_i
; \

351 *
_hf_key
=(*)(
key
); \

352 
hashv
 = 2166136261UL; \

353 
_‚_i
=0; _‚_ò< 
keyÀn
; _fn_i++) \

354 
hashv
 = (hashv * 16777619Ë^ 
_hf_key
[
_‚_i
]; \

355 
bkt
 = 
hashv
 & (
num_bkts
-1); \

356 } 0);

	)

358 
	#HASH_OAT
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

360 
_ho_i
; \

361 *
_ho_key
=(*)(
key
); \

362 
hashv
 = 0; \

363 
_ho_i
=0; _ho_ò< 
keyÀn
; _ho_i++) { \

364 
hashv
 +
_ho_key
[
_ho_i
]; \

365 
hashv
 += (hashv << 10); \

366 
hashv
 ^= (hashv >> 6); \

368 
hashv
 += (hashv << 3); \

369 
hashv
 ^= (hashv >> 11); \

370 
hashv
 += (hashv << 15); \

371 
bkt
 = 
hashv
 & (
num_bkts
-1); \

372 } 0)

	)

374 
	#HASH_JEN_MIX
(
a
,
b
,
c
) \

376 
a
 -
b
;á -
c
;á ^= ( c >> 13 ); \

377 
b
 -
c
; b -
a
; b ^= (á << 8 ); \

378 
c
 -
a
; c -
b
; c ^= ( b >> 13 ); \

379 
a
 -
b
;á -
c
;á ^= ( c >> 12 ); \

380 
b
 -
c
; b -
a
; b ^= (á << 16 ); \

381 
c
 -
a
; c -
b
; c ^= ( b >> 5 ); \

382 
a
 -
b
;á -
c
;á ^= ( c >> 3 ); \

383 
b
 -
c
; b -
a
; b ^= (á << 10 ); \

384 
c
 -
a
; c -
b
; c ^= ( b >> 15 ); \

385 } 0)

	)

387 
	#HASH_JEN
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

389 
_hj_i
,
_hj_j
,
_hj_k
; \

390 *
_hj_key
=(*)(
key
); \

391 
hashv
 = 0xfeedbeef; \

392 
_hj_i
 = 
_hj_j
 = 0x9e3779b9; \

393 
_hj_k
 = 
keyÀn
; \

394 
_hj_k
 >= 12) { \

395 
_hj_i
 +(
_hj_key
[0] + ( ()_hj_key[1] << 8 ) \

396 + ( ()
_hj_key
[2] << 16 ) \

397 + ( ()
_hj_key
[3] << 24 ) ); \

398 
_hj_j
 +(
_hj_key
[4] + ( ()_hj_key[5] << 8 ) \

399 + ( ()
_hj_key
[6] << 16 ) \

400 + ( ()
_hj_key
[7] << 24 ) ); \

401 
hashv
 +(
_hj_key
[8] + ( ()_hj_key[9] << 8 ) \

402 + ( ()
_hj_key
[10] << 16 ) \

403 + ( ()
_hj_key
[11] << 24 ) ); \

405 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

407 
_hj_key
 += 12; \

408 
_hj_k
 -= 12; \

410 
hashv
 +
keyÀn
; \

411  
_hj_k
 ) { \

412 11: 
hashv
 +–()
_hj_key
[10] << 24 ); \

413 10: 
hashv
 +–()
_hj_key
[9] << 16 ); \

414 9: 
hashv
 +–()
_hj_key
[8] << 8 ); \

415 8: 
_hj_j
 +–()
_hj_key
[7] << 24 ); \

416 7: 
_hj_j
 +–()
_hj_key
[6] << 16 ); \

417 6: 
_hj_j
 +–()
_hj_key
[5] << 8 ); \

418 5: 
_hj_j
 +
_hj_key
[4]; \

419 4: 
_hj_i
 +–()
_hj_key
[3] << 24 ); \

420 3: 
_hj_i
 +–()
_hj_key
[2] << 16 ); \

421 2: 
_hj_i
 +–()
_hj_key
[1] << 8 ); \

422 1: 
_hj_i
 +
_hj_key
[0]; \

424 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

425 
bkt
 = 
hashv
 & (
num_bkts
-1); \

426 } 0)

	)

429 #unde‡
gë16bôs


430 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)Ë|| deföed(
__WATCOMC__
) \

431 || 
deföed
(
_MSC_VER
Ë|| deföed (
__BORLANDC__
Ë|| 
	$deföed
 (
__TURBOC__
)

432 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

435 #i‡!
	`deföed
 (
gë16bôs
)

436 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8) \

437 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

439 
	#HASH_SFH
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

441 *
_sfh_key
=(*)(
key
); \

442 
uöt32_t
 
_sfh_tmp
, 
_sfh_Àn
 = 
keyÀn
; \

444 
_sfh_ªm
 = 
_sfh_Àn
 & 3; \

445 
_sfh_Àn
 >>= 2; \

446 
hashv
 = 0xcafebabe; \

449 ;
_sfh_Àn
 > 0; _sfh_len--) { \

450 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

451 
_sfh_tmp
 = (
	`gë16bôs
 (
_sfh_key
+2Ë<< 11Ë^ 
hashv
; \

452 
hashv
 = (hashv << 16Ë^ 
_sfh_tmp
; \

453 
_sfh_key
 +2* (
uöt16_t
); \

454 
hashv
 += hashv >> 11; \

458 
_sfh_ªm
) { \

459 3: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

460 
hashv
 ^= hashv << 16; \

461 
hashv
 ^
_sfh_key
[ (
uöt16_t
)] << 18; \

462 
hashv
 += hashv >> 11; \

464 2: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

465 
hashv
 ^= hashv << 11; \

466 
hashv
 += hashv >> 17; \

468 1: 
hashv
 +*
_sfh_key
; \

469 
hashv
 ^= hashv << 10; \

470 
hashv
 += hashv >> 1; \

474 
hashv
 ^= hashv << 3; \

475 
hashv
 += hashv >> 5; \

476 
hashv
 ^= hashv << 4; \

477 
hashv
 += hashv >> 17; \

478 
hashv
 ^= hashv << 25; \

479 
hashv
 += hashv >> 6; \

480 
bkt
 = 
hashv
 & (
num_bkts
-1); \

481 
	}
} 0);

	)

483 #ifde‡
HASH_USING_NO_STRICT_ALIASING


494 #i‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
))

495 
	#HASH_MUR
 
HASH_MUR_UNALIGNED


	)

497 
	#HASH_MUR
 
HASH_MUR_ALIGNED


	)

501 
	#HASH_MUR_UNALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

503 c⁄° 
_mur_m
 = 0x5bd1e995; \

504 c⁄° 
_mur_r
 = 24; \

505 
hashv
 = 0xˇ„babê^ 
keyÀn
; \

506 *
_mur_key
 = (*)(
key
); \

507 
uöt32_t
 
_mur_tmp
, 
_mur_Àn
 = 
keyÀn
; \

509 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

510 
_mur_tmp
 = *(
uöt32_t
 *)
_mur_key
; \

511 
_mur_tmp
 *
_mur_m
; \

512 
_mur_tmp
 ^_mur_tm∞>> 
_mur_r
; \

513 
_mur_tmp
 *
_mur_m
; \

514 
hashv
 *
_mur_m
; \

515 
hashv
 ^
_mur_tmp
; \

516 
_mur_key
 += 4; \

519 
_mur_Àn
) \

521 3: 
hashv
 ^
_mur_key
[2] << 16; \

522 2: 
hashv
 ^
_mur_key
[1] << 8; \

523 1: 
hashv
 ^
_mur_key
[0]; \

524 
hashv
 *
_mur_m
; \

527 
hashv
 ^= hashv >> 13; \

528 
hashv
 *
_mur_m
; \

529 
hashv
 ^= hashv >> 15; \

531 
bkt
 = 
hashv
 & (
num_bkts
-1); \

532 } 0)

	)

535 
	#HASH_MUR_ALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

537 c⁄° 
_mur_m
 = 0x5bd1e995; \

538 c⁄° 
_mur_r
 = 24; \

539 
hashv
 = 0xˇ„babê^ (
keyÀn
); \

540 *
_mur_key
 = (*)(
key
); \

541 
uöt32_t
 
_mur_Àn
 = 
keyÀn
; \

542 
_mur_Æign
 = ()
_mur_key
 & 3; \

544 i‡(
_mur_Æign
 && (
_mur_Àn
 >= 4)) { \

545 
_mur_t
 = 0, 
_mur_d
 = 0; \

546 
_mur_Æign
) { \

547 1: 
_mur_t
 |
_mur_key
[2] << 16; \

548 2: 
_mur_t
 |
_mur_key
[1] << 8; \

549 3: 
_mur_t
 |
_mur_key
[0]; \

551 
_mur_t
 <<(8 * 
_mur_Æign
); \

552 
_mur_key
 +4-
_mur_Æign
; \

553 
_mur_Àn
 -4-
_mur_Æign
; \

554 
_mur_¶
 = 8 * (4-
_mur_Æign
); \

555 
_mur_§
 = 8 * 
_mur_Æign
; \

557 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

558 
_mur_d
 = *(*)
_mur_key
; \

559 
_mur_t
 = (_mur_à>> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

560 
_mur_k
 = 
_mur_t
; \

561 
_mur_k
 *
_mur_m
; \

562 
_mur_k
 ^_mur_k >> 
_mur_r
; \

563 
_mur_k
 *
_mur_m
; \

564 
hashv
 *
_mur_m
; \

565 
hashv
 ^
_mur_k
; \

566 
_mur_t
 = 
_mur_d
; \

567 
_mur_key
 += 4; \

569 
_mur_d
 = 0; \

570 if(
_mur_Àn
 >
_mur_Æign
) { \

571 
_mur_Æign
) { \

572 3: 
_mur_d
 |
_mur_key
[2] << 16; \

573 2: 
_mur_d
 |
_mur_key
[1] << 8; \

574 1: 
_mur_d
 |
_mur_key
[0]; \

576 
_mur_k
 = (
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

577 
_mur_k
 *
_mur_m
; \

578 
_mur_k
 ^_mur_k >> 
_mur_r
; \

579 
_mur_k
 *
_mur_m
; \

580 
hashv
 *
_mur_m
; \

581 
hashv
 ^
_mur_k
; \

582 
_mur_k
 +
_mur_Æign
; \

583 
_mur_Àn
 -
_mur_Æign
; \

585 
_mur_Àn
) \

587 3: 
hashv
 ^
_mur_key
[2] << 16; \

588 2: 
hashv
 ^
_mur_key
[1] << 8; \

589 1: 
hashv
 ^
_mur_key
[0]; \

590 
hashv
 *
_mur_m
; \

593 
_mur_Àn
) \

595 3: 
_mur_d
 ^
_mur_key
[2] << 16; \

596 2: 
_mur_d
 ^
_mur_key
[1] << 8; \

597 1: 
_mur_d
 ^
_mur_key
[0]; \

598 0: 
hashv
 ^(
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

599 
hashv
 *
_mur_m
; \

603 
hashv
 ^= hashv >> 13; \

604 
hashv
 *
_mur_m
; \

605 
hashv
 ^= hashv >> 15; \

607 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

608 
_mur_k
 = *(*)
_mur_key
; \

609 
_mur_k
 *
_mur_m
; \

610 
_mur_k
 ^_mur_k >> 
_mur_r
; \

611 
_mur_k
 *
_mur_m
; \

612 
hashv
 *
_mur_m
; \

613 
hashv
 ^
_mur_k
; \

614 
_mur_key
 += 4; \

616 
_mur_Àn
) \

618 3: 
hashv
 ^
_mur_key
[2] << 16; \

619 2: 
hashv
 ^
_mur_key
[1] << 8; \

620 1: 
hashv
 ^
_mur_key
[0]; \

621 
hashv
 *
_mur_m
; \

624 
hashv
 ^= hashv >> 13; \

625 
hashv
 *
_mur_m
; \

626 
hashv
 ^= hashv >> 15; \

628 
bkt
 = 
hashv
 & (
num_bkts
-1); \

629 } 0)

	)

633 
	#HASH_KEYCMP
(
a
,
b
,
Àn
Ë
	`memcmp
◊,b,Àn)

	)

636 
	#HASH_FIND_IN_BKT
(
tbl
,
hh
,
hód
,
key±r
,
keyÀn_ö
,
out
) \

638 i‡(
hód
.
hh_hód
Ë
	`DECLTYPE_ASSIGN
(
out
,
	`ELMT_FROM_HH
(
tbl
,head.hh_head)); \

639 
out
=
NULL
; \

640 
out
) { \

641 i‡(
out
->
hh
.
keyÀn
 =
keyÀn_ö
) { \

642 i‡((
	`HASH_KEYCMP
(
out
->
hh
.
key
,
key±r
,
keyÀn_ö
)) == 0) ; \

644 i‡(
out
->
hh
.
hh_√xt
Ë
	`DECLTYPE_ASSIGN
(out,
	`ELMT_FROM_HH
(
tbl
,out->hh.hh_next)); \

645 
out
 = 
NULL
; \

647 } 0)

	)

650 
	#HASH_ADD_TO_BKT
(
hód
,
addhh
) \

652 
hód
.
cou¡
++; \

653 (
addhh
)->
hh_√xt
 = 
hód
.
hh_hód
; \

654 (
addhh
)->
hh_¥ev
 = 
NULL
; \

655 i‡(
hód
.
hh_hód
Ë{ (hód).hh_hód->
hh_¥ev
 = (
addhh
); } \

656 (
hód
).
hh_hód
=
addhh
; \

657 i‡(
hód
.
cou¡
 >((hód.
ex∑nd_mu…
+1Ë* 
HASH_BKT_CAPACITY_THRESH
) \

658 && (
addhh
)->
tbl
->
n€x∑nd
 != 1) { \

659 
	`HASH_EXPAND_BUCKETS
((
addhh
)->
tbl
); \

661 } 0)

	)

664 
	#HASH_DEL_IN_BKT
(
hh
,
hód
,
hh_dñ
) \

665 (
hód
).
cou¡
--; \

666 i‡((
hód
).
hh_hód
 =
hh_dñ
) { \

667 (
hód
).
hh_hód
 = 
hh_dñ
->
hh_√xt
; \

669 i‡(
hh_dñ
->
hh_¥ev
) { \

670 
hh_dñ
->
hh_¥ev
->
hh_√xt
 = hh_del->hh_next; \

672 i‡(
hh_dñ
->
hh_√xt
) { \

673 
hh_dñ
->
hh_√xt
->
hh_¥ev
 = hh_del->hh_prev; \

674 }

	)

705 
	#HASH_EXPAND_BUCKETS
(
tbl
) \

707 
_he_bkt
; \

708 
_he_bkt_i
; \

709 
UT_hash_h™dÀ
 *
_he_thh
, *
_he_hh_nxt
; \

710 
UT_hash_buckë
 *
_he_√w_buckës
, *
_he_√wbkt
; \

711 
_he_√w_buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

712 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

713 i‡(!
_he_√w_buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

714 
	`mem£t
(
_he_√w_buckës
, 0, \

715 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

716 
tbl
->
idól_chaö_maxÀn
 = \

717 (
tbl
->
num_ôems
 >> (tbl->
log2_num_buckës
+1)) + \

718 ((
tbl
->
num_ôems
 & (—bl->
num_buckës
*2)-1)) ? 1 : 0); \

719 
tbl
->
n⁄idól_ôems
 = 0; \

720 
_he_bkt_i
 = 0; _he_bkt_ò< 
tbl
->
num_buckës
; _he_bkt_i++) \

722 
_he_thh
 = 
tbl
->
buckës
[ 
_he_bkt_i
 ].
hh_hód
; \

723 
_he_thh
) { \

724 
_he_hh_nxt
 = 
_he_thh
->
hh_√xt
; \

725 
	`HASH_TO_BKT
–
_he_thh
->
hashv
, 
tbl
->
num_buckës
*2, 
_he_bkt
); \

726 
_he_√wbkt
 = &(
_he_√w_buckës
[ 
_he_bkt
 ]); \

727 i‡(++(
_he_√wbkt
->
cou¡
Ë> 
tbl
->
idól_chaö_maxÀn
) { \

728 
tbl
->
n⁄idól_ôems
++; \

729 
_he_√wbkt
->
ex∑nd_mu…
 = _he_√wbkt->
cou¡
 / \

730 
tbl
->
idól_chaö_maxÀn
; \

732 
_he_thh
->
hh_¥ev
 = 
NULL
; \

733 
_he_thh
->
hh_√xt
 = 
_he_√wbkt
->
hh_hód
; \

734 i‡(
_he_√wbkt
->
hh_hód
Ë_he_√wbkt->hh_hód->
hh_¥ev
 = \

735 
_he_thh
; \

736 
_he_√wbkt
->
hh_hód
 = 
_he_thh
; \

737 
_he_thh
 = 
_he_hh_nxt
; \

740 
	`uthash_‰ì
–
tbl
->
buckës
,Åbl->
num_buckës
*(
UT_hash_buckë
) ); \

741 
tbl
->
num_buckës
 *= 2; \

742 
tbl
->
log2_num_buckës
++; \

743 
tbl
->
buckës
 = 
_he_√w_buckës
; \

744 
tbl
->
öeff_ex∑nds
 = (tbl->
n⁄idól_ôems
 > (tbl->
num_ôems
 >> 1)) ? \

745 (
tbl
->
öeff_ex∑nds
+1) : 0; \

746 i‡(
tbl
->
öeff_ex∑nds
 > 1) { \

747 
tbl
->
n€x∑nd
=1; \

748 
	`uthash_n€x∑nd_fyi
(
tbl
); \

750 
	`uthash_ex∑nd_fyi
(
tbl
); \

751 } 0)

	)

757 
	#HASH_SORT
(
hód
,
cmpf˙
Ë
	`HASH_SRT
(
hh
,hód,cmpf˙)

	)

758 
	#HASH_SRT
(
hh
,
hód
,
cmpf˙
) \

760 
_hs_i
; \

761 
_hs_lo›ög
,
_hs_nmîges
,
_hs_ösize
,
_hs_psize
,
_hs_qsize
; \

762 
UT_hash_h™dÀ
 *
_hs_p
, *
_hs_q
, *
_hs_e
, *
_hs_li°
, *
_hs_èû
; \

763 i‡(
hód
) { \

764 
_hs_ösize
 = 1; \

765 
_hs_lo›ög
 = 1; \

766 
_hs_li°
 = &((
hód
)->
hh
); \

767 
_hs_lo›ög
) { \

768 
_hs_p
 = 
_hs_li°
; \

769 
_hs_li°
 = 
NULL
; \

770 
_hs_èû
 = 
NULL
; \

771 
_hs_nmîges
 = 0; \

772 
_hs_p
) { \

773 
_hs_nmîges
++; \

774 
_hs_q
 = 
_hs_p
; \

775 
_hs_psize
 = 0; \

776  
_hs_i
 = 0; _hs_ò< 
_hs_ösize
; _hs_i++ ) { \

777 
_hs_psize
++; \

778 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

779 ((*)((*)(
_hs_q
->
√xt
) + \

780 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

781 i‡(! (
_hs_q
) ) ; \

783 
_hs_qsize
 = 
_hs_ösize
; \

784 (
_hs_psize
 > 0Ë|| ((
_hs_qsize
 > 0Ë&& 
_hs_q
 )) { \

785 i‡(
_hs_psize
 == 0) { \

786 
_hs_e
 = 
_hs_q
; \

787 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

788 ((*)((*)(
_hs_q
->
√xt
) + \

789 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

790 
_hs_qsize
--; \

791 } i‡–(
_hs_qsize
 =0Ë|| !(
_hs_q
) ) { \

792 
_hs_e
 = 
_hs_p
; \

793 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

794 ((*)((*)(
_hs_p
->
√xt
) + \

795 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

796 
_hs_psize
--; \

798 
	`cmpf˙
(
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_p
)), \

799 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_q
))) \

801 
_hs_e
 = 
_hs_p
; \

802 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

803 ((*)((*)(
_hs_p
->
√xt
) + \

804 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

805 
_hs_psize
--; \

807 
_hs_e
 = 
_hs_q
; \

808 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

809 ((*)((*)(
_hs_q
->
√xt
) + \

810 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

811 
_hs_qsize
--; \

813 i‡–
_hs_èû
 ) { \

814 
_hs_èû
->
√xt
 = ((
_hs_e
) ? \

815 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_e
Ë: 
NULL
); \

817 
_hs_li°
 = 
_hs_e
; \

819 
_hs_e
->
¥ev
 = ((
_hs_èû
) ? \

820 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_èû
Ë: 
NULL
); \

821 
_hs_èû
 = 
_hs_e
; \

823 
_hs_p
 = 
_hs_q
; \

825 
_hs_èû
->
√xt
 = 
NULL
; \

826 i‡–
_hs_nmîges
 <= 1 ) { \

827 
_hs_lo›ög
=0; \

828 (
hód
)->
hh
.
tbl
->
èû
 = 
_hs_èû
; \

829 
	`DECLTYPE_ASSIGN
(
hód
,
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_li°
)); \

831 
_hs_ösize
 *= 2; \

833 
	`HASH_FSCK
(
hh
,
hód
); \

835 } 0)

	)

842 
	#HASH_SELECT
(
hh_d°
, 
d°
, 
hh_§c
, 
§c
, 
c⁄d
) \

844 
_§c_bkt
, 
_d°_bkt
; \

845 *
_œ°_ñt
=
NULL
, *
_ñt
; \

846 
UT_hash_h™dÀ
 *
_§c_hh
, *
_d°_hh
, *
_œ°_ñt_hh
=
NULL
; \

847 
±rdiff_t
 
_d°_hho
 = ((*)(&(
d°
)->
hh_d°
) - (*)(dst)); \

848 i‡(
§c
) { \

849 
_§c_bkt
=0; _§c_bkà< (
§c
)->
hh_§c
.
tbl
->
num_buckës
; _src_bkt++) { \

850 
_§c_hh
 = (
§c
)->
hh_§c
.
tbl
->
buckës
[
_§c_bkt
].
hh_hód
; \

851 
_§c_hh
; \

852 
_§c_hh
 = _§c_hh->
hh_√xt
) { \

853 
_ñt
 = 
	`ELMT_FROM_HH
((
§c
)->
hh_§c
.
tbl
, 
_§c_hh
); \

854 i‡(
	`c⁄d
(
_ñt
)) { \

855 
_d°_hh
 = (
UT_hash_h™dÀ
*)(((*)
_ñt
Ë+ 
_d°_hho
); \

856 
_d°_hh
->
key
 = 
_§c_hh
->key; \

857 
_d°_hh
->
keyÀn
 = 
_§c_hh
->keylen; \

858 
_d°_hh
->
hashv
 = 
_§c_hh
->hashv; \

859 
_d°_hh
->
¥ev
 = 
_œ°_ñt
; \

860 
_d°_hh
->
√xt
 = 
NULL
; \

861 i‡(
_œ°_ñt_hh
Ë{ _œ°_ñt_hh->
√xt
 = 
_ñt
; } \

862 i‡(!
d°
) { \

863 
	`DECLTYPE_ASSIGN
(
d°
,
_ñt
); \

864 
	`HASH_MAKE_TABLE
(
hh_d°
,
d°
); \

866 
_d°_hh
->
tbl
 = (
d°
)->
hh_d°
.tbl; \

868 
	`HASH_TO_BKT
(
_d°_hh
->
hashv
, _d°_hh->
tbl
->
num_buckës
, 
_d°_bkt
); \

869 
	`HASH_ADD_TO_BKT
(
_d°_hh
->
tbl
->
buckës
[
_d°_bkt
],_dst_hh); \

870 (
d°
)->
hh_d°
.
tbl
->
num_ôems
++; \

871 
_œ°_ñt
 = 
_ñt
; \

872 
_œ°_ñt_hh
 = 
_d°_hh
; \

877 
	`HASH_FSCK
(
hh_d°
,
d°
); \

878 } 0)

	)

880 
	#HASH_CLEAR
(
hh
,
hód
) \

882 i‡(
hód
) { \

883 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

884 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
)); \

885 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

886 (
hód
)=
NULL
; \

888 } 0)

	)

890 #ifde‡
NO_DECLTYPE


891 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

892 (
ñ
)=(
hód
), (*(**)(&(
tmp
)))=(*)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

893 
ñ
; (ñ)=(
tmp
),(*(**)(&—mp)))=(*)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

895 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

896 (
ñ
)=(
hód
),(
tmp
)=
	`DECLTYPE
”l)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

897 
ñ
; (ñ)=(
tmp
),—mp)=
	`DECLTYPE
”l)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

901 
	#HASH_COUNT
(
hód
Ë
	`HASH_CNT
(
hh
,hód)

	)

902 
	#HASH_CNT
(
hh
,
hód
Ë((hód)?((hód)->hh.
tbl
->
num_ôems
):0)

	)

904 
	sUT_hash_buckë
 {

905 
UT_hash_h™dÀ
 *
	mhh_hód
;

906 
	mcou¡
;

920 
	mex∑nd_mu…
;

922 } 
	tUT_hash_buckë
;

925 
	#HASH_SIGNATURE
 0xa0111„1

	)

926 
	#HASH_BLOOM_SIGNATURE
 0xb12220f2

	)

928 
	sUT_hash_èbÀ
 {

929 
UT_hash_buckë
 *
	mbuckës
;

930 
	mnum_buckës
, 
	mlog2_num_buckës
;

931 
	mnum_ôems
;

932 
UT_hash_h™dÀ
 *
	mèû
;

933 
±rdiff_t
 
	mhho
;

937 
	midól_chaö_maxÀn
;

942 
	mn⁄idól_ôems
;

950 
	möeff_ex∑nds
, 
	mn€x∑nd
;

952 
uöt32_t
 
	msig«tuª
;

953 #ifde‡
HASH_BLOOM


954 
uöt32_t
 
	mbloom_sig
;

955 
uöt8_t
 *
	mbloom_bv
;

956 
	mbloom_nbôs
;

959 } 
	tUT_hash_èbÀ
;

961 
	sUT_hash_h™dÀ
 {

962 
UT_hash_èbÀ
 *
	mtbl
;

963 *
	m¥ev
;

964 *
	m√xt
;

965 
UT_hash_h™dÀ
 *
	mhh_¥ev
;

966 
UT_hash_h™dÀ
 *
	mhh_√xt
;

967 *
	mkey
;

968 
	mkeyÀn
;

969 
	mhashv
;

970 } 
	tUT_hash_h™dÀ
;

	@include_lib/net/libcoap/utlist.h

24 #i‚de‡
UTLIST_H


25 
	#UTLIST_H


	)

27 
	#UTLIST_VERSION
 1.9.1

	)

64 #ifde‡
_MSC_VER


65 #i‡
_MSC_VER
 >1600 && 
__˝lu•lus


66 
	#LDECLTYPE
(
x
Ë
	`de˛ty≥
(x)

	)

68 
	#NO_DECLTYPE


	)

69 
	#LDECLTYPE
(
x
Ë*

	)

72 
	#LDECLTYPE
(
x
Ë
	`__ty≥of
(x)

	)

78 #ifde‡
NO_DECLTYPE


79 
	#_SV
(
ñt
,
li°
Ë
_tmp
 = (*)÷i°); {**
_Æüs
 = (**)&÷i°); *_Æü†”…); }

	)

80 
	#_NEXT
(
ñt
,
li°
Ë((*)(÷i°)->
√xt
))

	)

81 
	#_NEXTASGN
(
ñt
,
li°
,
to
Ë{ **
_Æüs
 = (**)&(÷i°)->
√xt
); *_Æüs=(*)—o); }

	)

82 
	#_PREV
(
ñt
,
li°
Ë((*)(÷i°)->
¥ev
))

	)

83 
	#_PREVASGN
(
ñt
,
li°
,
to
Ë{ **
_Æüs
 = (**)&(÷i°)->
¥ev
); *_Æüs=(*)—o); }

	)

84 
	#_RS
(
li°
Ë{ **
_Æüs
 = (**)&÷i°); *_Æüs=
_tmp
; }

	)

85 
	#_CASTASGN
(
a
,
b
Ë{ **
_Æüs
 = (**)&◊); *_Æüs=(*)(b); }

	)

87 
	#_SV
(
ñt
,
li°
)

	)

88 
	#_NEXT
(
ñt
,
li°
Ë(”…)->
√xt
)

	)

89 
	#_NEXTASGN
(
ñt
,
li°
,
to
Ë(”…)->
√xt
)=—o)

	)

90 
	#_PREV
(
ñt
,
li°
Ë(”…)->
¥ev
)

	)

91 
	#_PREVASGN
(
ñt
,
li°
,
to
Ë(”…)->
¥ev
)=—o)

	)

92 
	#_RS
(
li°
)

	)

93 
	#_CASTASGN
(
a
,
b
Ë◊)=(b)

	)

100 
	#LL_SORT
(
li°
, 
cmp
) \

102 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

103 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

104 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

105 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

106 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

107 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

108 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

109 i‡(
li°
) { \

110 
_ls_ösize
 = 1; \

111 
_ls_lo›ög
 = 1; \

112 
_ls_lo›ög
) { \

113 
	`_CASTASGN
(
_ls_p
,
li°
); \

114 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

115 
li°
 = 
NULL
; \

116 
_ls_èû
 = 
NULL
; \

117 
_ls_nmîges
 = 0; \

118 
_ls_p
) { \

119 
_ls_nmîges
++; \

120 
_ls_q
 = 
_ls_p
; \

121 
_ls_psize
 = 0; \

122 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

123 
_ls_psize
++; \

124 
	`_SV
(
_ls_q
,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
(list); \

125 i‡(!
_ls_q
) ; \

127 
_ls_qsize
 = 
_ls_ösize
; \

128 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

129 i‡(
_ls_psize
 == 0) { \

130 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

131 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

132 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

133 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

134 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

136 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

138 i‡(
_ls_èû
) { \

139 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

141 
	`_CASTASGN
(
li°
,
_ls_e
); \

143 
_ls_èû
 = 
_ls_e
; \

145 
_ls_p
 = 
_ls_q
; \

147 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
NULL
); 
	`_RS
(list); \

148 i‡(
_ls_nmîges
 <= 1) { \

149 
_ls_lo›ög
=0; \

151 
_ls_ösize
 *= 2; \

153 } 
_tmp
=
NULL
; \

154 } 0)

	)

156 
	#DL_SORT
(
li°
, 
cmp
) \

158 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

159 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

160 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

161 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

162 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

163 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

164 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

165 i‡(
li°
) { \

166 
_ls_ösize
 = 1; \

167 
_ls_lo›ög
 = 1; \

168 
_ls_lo›ög
) { \

169 
	`_CASTASGN
(
_ls_p
,
li°
); \

170 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

171 
li°
 = 
NULL
; \

172 
_ls_èû
 = 
NULL
; \

173 
_ls_nmîges
 = 0; \

174 
_ls_p
) { \

175 
_ls_nmîges
++; \

176 
_ls_q
 = 
_ls_p
; \

177 
_ls_psize
 = 0; \

178 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

179 
_ls_psize
++; \

180 
	`_SV
(
_ls_q
,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
(list); \

181 i‡(!
_ls_q
) ; \

183 
_ls_qsize
 = 
_ls_ösize
; \

184 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

185 i‡(
_ls_psize
 == 0) { \

186 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

187 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

188 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

189 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

190 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

192 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

194 i‡(
_ls_èû
) { \

195 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

197 
	`_CASTASGN
(
li°
,
_ls_e
); \

199 
	`_SV
(
_ls_e
,
li°
); 
	`_PREVASGN
(_ls_e,li°,
_ls_èû
); 
	`_RS
(list); \

200 
_ls_èû
 = 
_ls_e
; \

202 
_ls_p
 = 
_ls_q
; \

204 
	`_CASTASGN
(
li°
->
¥ev
, 
_ls_èû
); \

205 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
NULL
); 
	`_RS
(list); \

206 i‡(
_ls_nmîges
 <= 1) { \

207 
_ls_lo›ög
=0; \

209 
_ls_ösize
 *= 2; \

211 } 
_tmp
=
NULL
; \

212 } 0)

	)

214 
	#CDL_SORT
(
li°
, 
cmp
) \

216 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

217 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

218 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

219 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

220 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

221 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

222 
	`LDECLTYPE
(
li°
Ë
_tmp2
; \

223 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

224 i‡(
li°
) { \

225 
_ls_ösize
 = 1; \

226 
_ls_lo›ög
 = 1; \

227 
_ls_lo›ög
) { \

228 
	`_CASTASGN
(
_ls_p
,
li°
); \

229 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

230 
li°
 = 
NULL
; \

231 
_ls_èû
 = 
NULL
; \

232 
_ls_nmîges
 = 0; \

233 
_ls_p
) { \

234 
_ls_nmîges
++; \

235 
_ls_q
 = 
_ls_p
; \

236 
_ls_psize
 = 0; \

237 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

238 
_ls_psize
++; \

239 
	`_SV
(
_ls_q
,
li°
); \

240 i‡(
	`_NEXT
(
_ls_q
,
li°
Ë=
_ls_ﬁdhód
) { \

241 
_ls_q
 = 
NULL
; \

243 
_ls_q
 = 
	`_NEXT
(_ls_q,
li°
); \

245 
	`_RS
(
li°
); \

246 i‡(!
_ls_q
) ; \

248 
_ls_qsize
 = 
_ls_ösize
; \

249 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

250 i‡(
_ls_psize
 == 0) { \

251 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

252 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

253 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

254 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

255 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

256 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

257 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

258 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

260 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

261 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

263 i‡(
_ls_èû
) { \

264 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

266 
	`_CASTASGN
(
li°
,
_ls_e
); \

268 
	`_SV
(
_ls_e
,
li°
); 
	`_PREVASGN
(_ls_e,li°,
_ls_èû
); 
	`_RS
(list); \

269 
_ls_èû
 = 
_ls_e
; \

271 
_ls_p
 = 
_ls_q
; \

273 
	`_CASTASGN
(
li°
->
¥ev
,
_ls_èû
); \

274 
	`_CASTASGN
(
_tmp2
,
li°
); \

275 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_tmp2
); 
	`_RS
(list); \

276 i‡(
_ls_nmîges
 <= 1) { \

277 
_ls_lo›ög
=0; \

279 
_ls_ösize
 *= 2; \

281 } 
_tmp
=
NULL
; \

282 } 0)

	)

287 
	#LL_PREPEND
(
hód
,
add
) \

289 (
add
)->
√xt
 = 
hód
; \

290 
hód
 = 
add
; \

291 } 0)

	)

293 
	#LL_APPEND
(
hód
,
add
) \

295 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

296 (
add
)->
√xt
=
NULL
; \

297 i‡(
hód
) { \

298 
_tmp
 = 
hód
; \

299 
_tmp
->
√xt
) { _tmp = _tmp->next; } \

300 
_tmp
->
√xt
=(
add
); \

302 (
hód
)=(
add
); \

304 } 0)

	)

306 
	#LL_DELETE
(
hód
,
dñ
) \

308 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

309 i‡((
hód
Ë=(
dñ
)) { \

310 (
hód
)=(hód)->
√xt
; \

312 
_tmp
 = 
hód
; \

313 
_tmp
->
√xt
 && (_tmp->√xà!(
dñ
))) { \

314 
_tmp
 = _tmp->
√xt
; \

316 i‡(
_tmp
->
√xt
) { \

317 
_tmp
->
√xt
 = ((
dñ
)->next); \

320 } 0)

	)

323 
	#LL_APPEND_VS2008
(
hód
,
add
) \

325 i‡(
hód
) { \

326 (
add
)->
√xt
 = 
hód
; \

327 (
add
)->
√xt
->next) { (add)->next = (add)->next->next; } \

328 (
add
)->
√xt
->next=(add); \

330 (
hód
)=(
add
); \

332 (
add
)->
√xt
=
NULL
; \

333 } 0)

	)

335 
	#LL_DELETE_VS2008
(
hód
,
dñ
) \

337 i‡((
hód
Ë=(
dñ
)) { \

338 (
hód
)=(hód)->
√xt
; \

340 *
_tmp
 = (*)(
hód
); \

341 
hód
->
√xt
 && (hód->√xà!(
dñ
))) { \

342 
hód
 = hód->
√xt
; \

344 i‡(
hód
->
√xt
) { \

345 
hód
->
√xt
 = ((
dñ
)->next); \

348 **
_hód_Æüs
 = (**)&(
hód
); \

349 *
_hód_Æüs
 = 
_tmp
; \

352 } 0)

	)

353 #ifde‡
NO_DECLTYPE


354 #unde‡
LL_APPEND


355 
	#LL_APPEND
 
LL_APPEND_VS2008


	)

356 #unde‡
LL_DELETE


357 
	#LL_DELETE
 
LL_DELETE_VS2008


	)

361 
	#LL_FOREACH
(
hód
,
ñ
) \

362 
ñ
=
hód
;ñ;ñÛl->
√xt
)

	)

364 
	#LL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

365 (
ñ
)=(
hód
);”lË&& (
tmp
 = (ñ)->
√xt
, 1); (ñËtmp)

	)

367 
	#LL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

369 
	`LL_FOREACH
(
hód
,
out
) { \

370 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

372 } 0)

	)

374 
	#LL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

376 
	`LL_FOREACH
(
hód
,
out
) { \

377 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

379 } 0)

	)

384 
	#DL_PREPEND
(
hód
,
add
) \

386 (
add
)->
√xt
 = 
hód
; \

387 i‡(
hód
) { \

388 (
add
)->
¥ev
 = (
hód
)->prev; \

389 (
hód
)->
¥ev
 = (
add
); \

391 (
add
)->
¥ev
 = (add); \

393 (
hód
Ë(
add
); \

394 } 0)

	)

396 
	#DL_APPEND
(
hód
,
add
) \

398 i‡(
hód
) { \

399 (
add
)->
¥ev
 = (
hód
)->prev; \

400 (
hód
)->
¥ev
->
√xt
 = (
add
); \

401 (
hód
)->
¥ev
 = (
add
); \

402 (
add
)->
√xt
 = 
NULL
; \

404 (
hód
)=(
add
); \

405 (
hód
)->
¥ev
 = (head); \

406 (
hód
)->
√xt
 = 
NULL
; \

408 } 0);

	)

410 
	#DL_DELETE
(
hód
,
dñ
) \

412 i‡((
dñ
)->
¥ev
 == (del)) { \

413 (
hód
)=
NULL
; \

414 } i‡((
dñ
)==(
hód
)) { \

415 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

416 (
hód
Ë(
dñ
)->
√xt
; \

418 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

419 i‡((
dñ
)->
√xt
) { \

420 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

422 (
hód
)->
¥ev
 = (
dñ
)->prev; \

425 } 0);

	)

428 
	#DL_FOREACH
(
hód
,
ñ
) \

429 
ñ
=
hód
;ñ;ñÛl->
√xt
)

	)

432 
	#DL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

433 (
ñ
)=(
hód
);”lË&& (
tmp
 = (ñ)->
√xt
, 1); (ñËtmp)

	)

436 
	#DL_SEARCH_SCALAR
 
LL_SEARCH_SCALAR


	)

437 
	#DL_SEARCH
 
LL_SEARCH


	)

442 
	#CDL_PREPEND
(
hód
,
add
) \

444 i‡(
hód
) { \

445 (
add
)->
¥ev
 = (
hód
)->prev; \

446 (
add
)->
√xt
 = (
hód
); \

447 (
hód
)->
¥ev
 = (
add
); \

448 (
add
)->
¥ev
->
√xt
 = (add); \

450 (
add
)->
¥ev
 = (add); \

451 (
add
)->
√xt
 = (add); \

453 (
hód
)=(
add
); \

454 } 0)

	)

456 
	#CDL_DELETE
(
hód
,
dñ
) \

458 i‡–((
hód
)==(
dñ
)Ë&& ((hód)->
√xt
 == (head))) { \

459 (
hód
) = 0L; \

461 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

462 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

463 i‡((
dñ
Ë=(
hód
)Ë(hód)=(dñ)->
√xt
; \

465 } 0);

	)

467 
	#CDL_FOREACH
(
hód
,
ñ
) \

468 
ñ
=
hód
;ñ;ñ=”l->
√xt
==hód ? 0L :Él->√xt))

	)

470 
	#CDL_FOREACH_SAFE
(
hód
,
ñ
,
tmp1
,
tmp2
) \

471 (
ñ
)=(
hód
), ((
tmp1
)=(hód)?((hód)->
¥ev
):
NULL
); \

472 (
ñ
Ë&& ((
tmp2
)=”l)->
√xt
, 1); \

473 ((
ñ
Ë((”l)==(
tmp1
)Ë? 0L : (
tmp2
))))

	)

475 
	#CDL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

477 
	`CDL_FOREACH
(
hód
,
out
) { \

478 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

480 } 0)

	)

482 
	#CDL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

484 
	`CDL_FOREACH
(
hód
,
out
) { \

485 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

487 } 0)

	)

	@include_lib/net/log/elog.h

29 #i‚de‡
__ELOG_H__


30 
	#__ELOG_H__


	)

32 
	~<ñog_cfg.h
>

33 
	~<°döt.h
>

34 
	~<°ddef.h
>

36 
	~"gíîic/ty≥def.h
"

38 #ifde‡
__˝lu•lus


43 
	#ELOG_LVL_ASSERT
 0

	)

44 
	#ELOG_LVL_ERROR
 1

	)

45 
	#ELOG_LVL_WARN
 2

	)

46 
	#ELOG_LVL_INFO
 3

	)

47 
	#ELOG_LVL_DEBUG
 4

	)

48 
	#ELOG_LVL_VERBOSE
 5

	)

51 
	#ELOG_LVL_TOTAL_NUM
 6

	)

54 
	#ELOG_SW_VERSION
 "2.0.0"

	)

57 #ifde‡
ELOG_ASSERT_ENABLE


58 
	#ELOG_ASSERT
(
EXPR
) \

59 i‡(!(
EXPR
)) \

61 i‡(
ñog_as£π_hook
 =
NULL
) { \

62 
	`ñog_a
("ñog", "(%sËha†as£π faûedáà%s:%ld.", #EXPR, 
__FUNCTION__
, 
__LINE__
); \

65 
	`ñog_as£π_hook
(#EXPR, 
__FUNCTION__
, 
__LINE__
); \

67 }

	)

69 
	#ELOG_ASSERT
(
EXPR
Ë(()0);

	)

72 #i‚de‡
ELOG_OUTPUT_ENABLE


73 
	#ñog_a
(
èg
, ...)

	)

74 
	#ñog_e
(
èg
, ...)

	)

75 
	#ñog_w
(
èg
, ...)

	)

76 
	#ñog_i
(
èg
, ...)

	)

77 
	#ñog_d
(
èg
, ...)

	)

78 
	#ñog_v
(
èg
, ...)

	)

80 #i‡
ELOG_OUTPUT_LVL
 >
ELOG_LVL_ASSERT


81 
	#ñog_as£π
(
èg
, ...) \

82 
	`ñog_ouçut
(
ELOG_LVL_ASSERT
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

84 
	#ñog_as£π
(
èg
, ...)

	)

87 #i‡
ELOG_OUTPUT_LVL
 >
ELOG_LVL_ERROR


88 
	#ñog_îr‹
(
èg
, ...) \

89 
	`ñog_ouçut
(
ELOG_LVL_ERROR
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

91 
	#ñog_îr‹
(
èg
, ...)

	)

94 #i‡
ELOG_OUTPUT_LVL
 >
ELOG_LVL_WARN


95 
	#ñog_w¨n
(
èg
, ...) \

96 
	`ñog_ouçut
(
ELOG_LVL_WARN
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

98 
	#ñog_w¨n
(
èg
, ...)

	)

101 #i‡
ELOG_OUTPUT_LVL
 >
ELOG_LVL_INFO


102 
	#ñog_öfo
(
èg
, ...) \

103 
	`ñog_ouçut
(
ELOG_LVL_INFO
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

105 
	#ñog_öfo
(
èg
, ...)

	)

108 #i‡
ELOG_OUTPUT_LVL
 >
ELOG_LVL_DEBUG


109 
	#ñog_debug
(
èg
, ...) \

110 
	`ñog_ouçut
(
ELOG_LVL_DEBUG
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

112 
	#ñog_debug
(
èg
, ...)

	)

115 #i‡
ELOG_OUTPUT_LVL
 =
ELOG_LVL_VERBOSE


116 
	#ñog_vîbo£
(
èg
, ...) \

117 
	`ñog_ouçut
(
ELOG_LVL_VERBOSE
, 
èg
, 
__FILE__
, 
__FUNCTION__
, 
__LINE__
, 
__VA_ARGS__
)

	)

119 
	#ñog_vîbo£
(
èg
, ...)

	)

125 
ELOG_FMT_LVL
 = 1 << 0,

126 
ELOG_FMT_TAG
 = 1 << 1,

127 
ELOG_FMT_TIME
 = 1 << 2,

128 
ELOG_FMT_P_INFO
 = 1 << 3,

129 
ELOG_FMT_T_INFO
 = 1 << 4,

130 
ELOG_FMT_DIR
 = 1 << 5,

131 
ELOG_FMT_FUNC
 = 1 << 6,

132 
ELOG_FMT_LINE
 = 1 << 7,

133 } 
	tElogFmtIndex
;

136 
LOG_STDIN
 = 0,

137 
LOG_STDOUT
 = 1,

138 
LOG_STDERR
 = 2,

139 
LOG_FILE
 = 3,

140 
LOG_RSYSLOG
 = 4,

141 
LOG_NET
 = 5,

148 
	#ELOG_FMT_ALL
 (
ELOG_FMT_LVL
|
ELOG_FMT_TAG
|
ELOG_FMT_TIME
|
ELOG_FMT_P_INFO
|
ELOG_FMT_T_INFO
| \

149 
ELOG_FMT_DIR
|
ELOG_FMT_FUNC
|
ELOG_FMT_LINE
)

	)

153 
uöt8_t
 
Àvñ
;

154 
èg
[
ELOG_FILTER_TAG_MAX_LEN
 + 1];

155 
keyw‹d
[
ELOG_FILTER_KW_MAX_LEN
 + 1];

156 } 
	tElogFûãr
, *
	tElogFûãr_t
;

160 
ElogFûãr
 
fûãr
;

161 
size_t
 
íabÀd_fmt_£t
[
ELOG_LVL_TOTAL_NUM
];

162 
boﬁ
 
ouçut_íabÀd
;

163 
boﬁ
 
ouçut_lock_íabÀd
;

164 
boﬁ
 
ouçut_is_locked_bef‹e_íabÀ
;

165 
boﬁ
 
ouçut_is_locked_bef‹e_dißbÀ
;

167 #ifde‡
ELOG_COLOR_ENABLE


168 
boﬁ
 
ãxt_cﬁ‹_íabÀd
;

171 } 
	tEasyLoggî
, *
	tEasyLoggî_t
;

175 
ELOG_NO_ERR
,

176 } 
	tElogEºCode
;

179 
ElogEºCode
 
ñog_öô
(
u32
 
ty≥
);

180 
ñog_°¨t
();

181 
ñog_£t_ouçut_íabÀd
(
boﬁ
 
íabÀd
);

182 
boﬁ
 
ñog_gë_ouçut_íabÀd
();

183 
ñog_£t_ãxt_cﬁ‹_íabÀd
(
boﬁ
 
íabÀd
);

184 
boﬁ
 
ñog_gë_ãxt_cﬁ‹_íabÀd
();

185 
ñog_£t_fmt
(
uöt8_t
 
Àvñ
, 
size_t
 
£t
);

186 
ñog_£t_fûãr
(
uöt8_t
 
Àvñ
, c⁄° *
èg
, c⁄° *
keyw‹d
);

187 
ñog_£t_fûãr_lvl
(
uöt8_t
 
Àvñ
);

188 
ñog_£t_fûãr_èg
(c⁄° *
èg
);

189 
ñog_£t_fûãr_kw
(c⁄° *
keyw‹d
);

190 
ñog_øw
(c⁄° *
f‹m©
, ...);

191 
ñog_ouçut
(
uöt8_t
 
Àvñ
, c⁄° *
èg
, c⁄° *
fûe
, c⁄° *
func
,

192 c⁄° 
löe
, c⁄° *
f‹m©
, ...);

193 
ñog_ouçut_lock_íabÀd
(
boﬁ
 
íabÀd
);

194 (*
ñog_as£π_hook
)(c⁄° *
ex¥
, c⁄° *
func
, 
size_t
 
löe
);

195 
ñog_as£π_£t_hook
((*
hook
)(c⁄° *
ex¥
, c⁄° *
func
, 
size_t
 
löe
));

196 
öt8_t
 
ñog_föd_lvl
(c⁄° *
log
);

197 c⁄° *
ñog_föd_èg
(c⁄° *
log
, 
uöt8_t
 
lvl
, 
size_t
 *
èg_Àn
);

199 
	#ñog_a
(
èg
, ...Ë
	`ñog_as£π
—ag, 
__VA_ARGS__
)

	)

200 
	#ñog_e
(
èg
, ...Ë
	`ñog_îr‹
—ag, 
__VA_ARGS__
)

	)

201 
	#ñog_w
(
èg
, ...Ë
	`ñog_w¨n
—ag, 
__VA_ARGS__
)

	)

202 
	#ñog_i
(
èg
, ...Ë
	`ñog_öfo
—ag, 
__VA_ARGS__
)

	)

203 
	#ñog_d
(
èg
, ...Ë
	`ñog_debug
—ag, 
__VA_ARGS__
)

	)

204 
	#ñog_v
(
èg
, ...Ë
	`ñog_vîbo£
—ag, 
__VA_ARGS__
)

	)

210 #i‡!
deföed
(
LOG_TAG
)

211 
	#LOG_TAG
 "NO_TAG"

	)

213 #i‡!
deföed
(
LOG_LVL
)

214 
	#LOG_LVL
 
ELOG_LVL_VERBOSE


	)

216 #i‡
LOG_LVL
 >
ELOG_LVL_ASSERT


217 
	#log_a
(...Ë
	`ñog_a
(
LOG_TAG
, 
__VA_ARGS__
)

	)

219 
	#log_a
(...Ë(()0);

	)

221 #i‡
LOG_LVL
 >
ELOG_LVL_ERROR


222 
	#log_e
(...Ë
	`ñog_e
(
LOG_TAG
, 
__VA_ARGS__
)

	)

224 
	#log_e
(...Ë(()0);

	)

226 #i‡
LOG_LVL
 >
ELOG_LVL_WARN


227 
	#log_w
(...Ë
	`ñog_w
(
LOG_TAG
, 
__VA_ARGS__
)

	)

229 
	#log_w
(...Ë(()0);

	)

231 #i‡
LOG_LVL
 >
ELOG_LVL_INFO


232 
	#log_i
(...Ë
	`ñog_i
(
LOG_TAG
, 
__VA_ARGS__
)

	)

234 
	#log_i
(...Ë(()0);

	)

236 #i‡
LOG_LVL
 >
ELOG_LVL_DEBUG


237 
	#log_d
(...Ë
	`ñog_d
(
LOG_TAG
, 
__VA_ARGS__
)

	)

239 
	#log_d
(...Ë(()0);

	)

241 #i‡
LOG_LVL
 >
ELOG_LVL_VERBOSE


242 
	#log_v
(...Ë
	`ñog_v
(
LOG_TAG
, 
__VA_ARGS__
)

	)

244 
	#log_v
(...Ë(()0);

	)

248 #i‡!
deföed
(
as£π
)

249 
	#as£π
 
ELOG_ASSERT


	)

253 
ñog_buf_íabÀd
(
boﬁ
 
íabÀd
);

254 
ñog_Êush
();

257 
ñog_async_íabÀd
(
boﬁ
 
íabÀd
);

258 
size_t
 
ñog_async_gë_log
(*
log
, size_à
size
);

259 
size_t
 
ñog_async_gë_löe_log
(*
log
, size_à
size
);

262 
size_t
 
ñog_°r˝y
(size_à
cur_Àn
, *
d°
, c⁄° *
§c
);

263 
size_t
 
ñog_˝y 
(*
löe
, c⁄° *
log
, size_à
Àn
);

264 *
ñog_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
cou¡
);

266 #ifde‡
__˝lu•lus


	@include_lib/net/log/elog_cfg.h

29 #i‚de‡
_ELOG_CFG_H_


30 
	#_ELOG_CFG_H_


	)

33 
	#ELOG_OUTPUT_ENABLE


	)

35 
	#ELOG_OUTPUT_LVL
 
ELOG_LVL_VERBOSE


	)

37 
	#ELOG_ASSERT_ENABLE


	)

39 
	#ELOG_LINE_BUF_SIZE
 512

	)

41 
	#ELOG_LINE_NUM_MAX_LEN
 5

	)

43 
	#ELOG_FILTER_TAG_MAX_LEN
 30

	)

45 
	#ELOG_FILTER_KW_MAX_LEN
 16

	)

47 
	#ELOG_NEWLINE_SIGN
 ""

	)

53 
	#ELOG_COLOR_ASSERT
 (
F_MAGENTA
 
B_NULL
 
S_NORMAL
)

	)

54 
	#ELOG_COLOR_ERROR
 (
F_RED
 
B_NULL
 
S_NORMAL
)

	)

55 
	#ELOG_COLOR_WARN
 (
F_YELLOW
 
B_NULL
 
S_NORMAL
)

	)

56 
	#ELOG_COLOR_INFO
 (
F_CYAN
 
B_NULL
 
S_NORMAL
)

	)

57 
	#ELOG_COLOR_DEBUG
 (
F_GREEN
 
B_NULL
 
S_NORMAL
)

	)

58 
	#ELOG_COLOR_VERBOSE
 (
F_BLUE
 
B_NULL
 
S_NORMAL
)

	)

62 
	#ELOG_ASYNC_OUTPUT_ENABLE


	)

64 
	#ELOG_ASYNC_OUTPUT_BUF_SIZE
 (
ELOG_LINE_BUF_SIZE
 *2)

	)

68 
	#ELOG_ASYNC_OUTPUT_USING_PTHREAD


	)

	@include_lib/net/lwip/app/cdp/cdp.h

1 #i‚de‡
__CDP_H__


2 
	#__CDP_H__


	)

4 
	~"lwù/sockës.h
"

5 
	~"lwù/√tdb.h
"

6 
	~"lwù.h
"

15 
	#CDP_PREFIX
 "CTP:"

	)

16 
	#CDP_PREFIX_LEN
 4

	)

17 
	#CDP_TOPIC_LEN
 2

	)

18 
	#CDP_TOPIC_CONTENT_LEN
 4

	)

20 
	#CDP_KEEP_ALIVE_TOPIC
 "CTP_KEEP_ALIVE"

	)

21 
	#CDP_KEEP_ALIVE_TOPIC_LEN
 
	`°æí
(
CDP_KEEP_ALIVE_TOPIC
)

	)

23 
	#CDP_KEEP_ALIVE_DEFAULT_TIMEOUT
 (30*1000)

	)

26 
	#CDP_RESERVED_TOPIC
 "CTP_RESERVED_TOPIC"

	)

28 
	ecdp_§v_msg_ty≥
 {

29 
	mCDP_SRV_SET_RECV_THREAD_PRIO_STKSIZE
,

30 
	mCDP_SRV_CLI_PREV_LINK_NOT_CLOSE
,

31 
	mCDP_SRV_CLI_KEEP_ALIVE_TO
,

32 
	mCDP_SRV_RECV_KEEP_ALIVE_MSG
,

33 
	mCDP_SRV_CLI_DISCONNECT
,

34 
	mCDP_SRV_CLI_CONNECTED
,

35 
	mCDP_SRV_RECV_MSG
,

36 
	mCDP_SRV_RECV_MSG_SLICE
,

37 
	mCDP_SRV_RECV_MSG_WITHOUT_LOGIN
,

38 
	mCDP_SRV_RECV_LOGIN_MSG
,

41 
	#MAX_RECV_TOPIC_LEN
 (1*1460)

	)

42 
	#MAX_RECV_TOPIC_CONTENT_LEN_SLICE
 (16*1460)

	)

45 
cdp_§v_öô
(
u16_t
 
p‹t
, (*
cb_func
)(*
˛i
, 
cdp_§v_msg_ty≥
 
ty≥
, *
t›ic
, *
c⁄ã¡
, *
¥iv
), *priv);

46 
	`cdp_§v_unöô
();

47 
	`cdp_§v_£nd
(*
_˛i
, *
t›ic
, *
c⁄ã¡
);

48 
	`cdp_§v_£t_thªad_∑ylﬂd_max_Àn
(
u32
 
max_t›ic_Àn
, u32 
max_c⁄ã¡_¶i˚_Àn
);

49 
u32
 
	`cdp_§v_gë_˛i_˙t
();

50 
	`cdp_§v_£t_thªad_∑ylﬂd_max_Àn
(
u32
 
max_t›ic_Àn
, u32 
max_c⁄ã¡_¶i˚_Àn
);

51 
	`cdp_§v_kìp_Æive_í
(c⁄° *
ªcv
, c⁄° *
£nd
, c⁄° *
∑rm
);

	@include_lib/net/lwip/app/ctp/ctp.h

1 #i‚de‡
__CTP_H__


2 
	#__CTP_H__


	)

4 
	~"lwù/sockës.h
"

5 
	~"lwù/√tdb.h
"

6 
	~"lwù.h
"

8 
	#USE_CTPS
 0

	)

17 
	#CTP_PREFIX
 "CTP:"

	)

18 
	#CTP_PREFIX_LEN
 4

	)

19 
	#CTP_TOPIC_LEN
 2

	)

20 
	#CTP_TOPIC_CONTENT_LEN
 4

	)

22 
	#CTP_KEEP_ALIVE_TOPIC
 "CTP_KEEP_ALIVE"

	)

23 
	#CTP_KEEP_ALIVE_TOPIC_LEN
 
	`°æí
(
CTP_KEEP_ALIVE_TOPIC
)

	)

25 
	#CTP_LOGIN_TOPIC
 "CTP_LOGIN"

	)

26 
	#CTP_LOGIN_TOPIC_LEN
 
	`°æí
(
CTP_LOGIN_TOPIC
)

	)

28 
	#CTP_KEEP_ALIVE_DEFAULT_TIMEOUT
 (30*1000)

	)

31 
	#CTP_RESERVED_TOPIC
 "CTP_RESERVED_TOPIC"

	)

33 
	e˘p_§v_msg_ty≥
 {

34 
	mCTP_SRV_SET_RECV_THREAD_PRIO_STKSIZE
,

35 
	mCTP_SRV_CLI_PREV_LINK_NOT_CLOSE
,

36 
	mCTP_SRV_CLI_KEEP_ALIVE_TO
,

37 
	mCTP_SRV_RECV_KEEP_ALIVE_MSG
,

38 
	mCTP_SRV_CLI_DISCONNECT
,

39 
	mCTP_SRV_CLI_CONNECTED
,

40 
	mCTP_SRV_RECV_MSG
,

41 
	mCTP_SRV_RECV_MSG_SLICE
,

42 
	mCTP_SRV_RECV_MSG_WITHOUT_LOGIN
,

43 
	mCTP_SRV_RECV_LOGIN_MSG
,

46 
	e˘p_˛i_msg_ty≥
 {

47 
	mCTP_CLI_CONNECT_SUCC
,

48 
	mCTP_CLI_CONNECT_FAIL
,

49 
	mCTP_CLI_SEND_TO
,

50 
	mCTP_CLI_RECV_TO
,

51 
	mCTP_CLI_DISCONNECT
,

52 
	mCTP_CLI_RECV_MSG
,

57 
	#MAX_RECV_TOPIC_LEN
 (1*1460)

	)

58 
	#MAX_RECV_TOPIC_CONTENT_LEN_SLICE
 (16*1460)

	)

60 *
˘p_gë_¥am
(
u32
 
∑rm_num
, *
∑rm_li°
);

62 
˘p_§v_öô
(
u16_t
 
p‹t
, (*
cb_func
)(*
˛i
, 
˘p_§v_msg_ty≥
 
ty≥
, *
t›ic
, *
c⁄ã¡
, *
¥iv
), *priv);

63 
	`˘p_§v_kìp_Æive_í
(c⁄° *
ªcv
, c⁄° *
£nd
, c⁄° *
∑rm
);

64 
	`˘p_§v_logö_í
(c⁄° *
logö_ªcv
, c⁄° *
logö_£nd
);

65 
	`˘p_§v_£t_kìp_Æive_timeout
(
u32
 
timeout_£c
);

66 
	`˘p_§v_gë_kìp_Æive_timeout
();

67 
	`˘p_§v_£t_thªad_¥io_°ksize
(
u32
 
¥io
, u32 
°k_size
);

68 
	`˘p_§v_£t_thªad_∑ylﬂd_max_Àn
(
u32
 
max_t›ic_Àn
, u32 
max_c⁄ã¡_¶i˚_Àn
);

69 
	`˘p_§v_unöô
();

70 
	`˘p_§v_£nd
(*
˛i
, *
t›ic
, *
c⁄ã¡
);

71 
	`˘p_§v_£nd_ext
(*
˛i
, *
u£r_pkt
, 
u32
 
pkt_Àn
);

72 
	`˘p_§v_disc⁄√˘_˛i
(*
˛i_hdl
);

73 
	`˘p_§v_disc⁄√˘_Æl_˛i
();

74 
u32
 
	`˘p_§v_gë_˛i_˙t
();

75 
	`˘p_sock_£t_£nd_timeout
(*
˛i
, 
u32
 
mûl£c
);

76 
	`˘p_sock_£t_ªcv_timeout
(*
˛i
, 
u32
 
mûl£c
);

77 
sockaddr_ö
 *
	`˘p_§v_gë_˛i_addr
(*
˛i
);

79 
	`cdp_§v_£nd
(*
˛i
, *
t›ic
, *
c⁄ã¡
);

81 
	`˘p_§v_‰ì_˛i
(*
˛i_hdl
);

82 
sockaddr_ö
 *
	`˘p_§v_gë_fú°_˛i
();

83 
	`˘p_kìp_Æive_föd_dhwaddr_disc⁄√˘
(
ëh_addr
 *
dhwaddr
);

90 
	`˘p_˛i_öô
();

91 
	`˘p_˛i_unöô
();

93 *
	`˘p_˛i_ªg
(
u16_t
 
id
, 
sockaddr_ö
 *
de°_addr
, (*
cb_func
)(*
hdl
, 
˘p_˛i_msg_ty≥
 
ty≥
, c⁄° *
t›ic
, c⁄° *
∑rm_li°
, *
¥iv
), *priv);

96 
	`˘p_˛i_uƒeg
(*
h™dÀ
);

99 
	`˘p_˛i_£nd
(*
h™dÀ
, c⁄° *
t›ic
, c⁄° *
c⁄ã¡
);

101 
sockaddr_ö
 *
	`˘p_˛i_gë_hdl_addr
(*
h™dÀ
);

	@include_lib/net/lwip/app/ddns/DDNS.h

1 #i‚de‡
_DDNS_H


2 
	#_DDNS_H


	)

5 
	~<sig«l.h
>

6 
	~<time.h
>

7 
	~<sys/time.h
>

8 
	~<„©uªs.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/sockë.h
>

11 
	~<sys/io˘l.h
>

12 
	~<√töë/ö.h
>

13 
	~<√t/if_¨p.h
>

14 
	~<î∫o.h
>

15 
	~<f˙é.h
>

16 
	~<˘y≥.h
>

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

20 
	~<°dlib.h
>

21 
	~<√tdb.h
>

22 
	~<sys/∑øm.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/sockë.h
>

25 
	~<√töë/ö.h
>

26 
	~<¨∑/öë.h
>

29 
	~"ty≥def.h
"

30 
	~"sock_≠i.h
"

34 
	#DEBUG
 0

	)

35 
	#DEBUG_VIEW
 1

	)

37 
	#TRACE
 
¥ötf


	)

38 
	#ERROR
 
¥ötf


	)

40 
	#DDNS_REQ_CMD
 0x81

	)

41 
	#DDNS_ACK_CMD
 0x82

	)

43 
	#DDNS_SEND_ACTIVE
 0x01

	)

44 
	#DDNS_SEND_HANDSHAKE
 0x02

	)

45 
	#DDNS_SEND_VERIFY
 0x03

	)

46 
	#DDNS_SEND_START
 0x64

	)

47 
	#DDNS_SEND_ID
 0x65

	)

48 
	#DDNS_SEND_HOSTNAME
 0x66

	)

49 
	#DDNS_SEND_TCPPORT
 0x67

	)

50 
	#DDNS_SEND_HTTPPORT
 0x68

	)

51 
	#DDNS_SEND_FINISH
 0x96

	)

52 
	#DDNS_SEND_QUIT
 0xc8

	)

54 
	#DDNS_VERIFY_MODE
 0x00

	)

55 
	#DDNS_UNKNOWN_ERROR
 0x01

	)

56 
	#DDNS_NO_ID
 0x01

	)

57 
	#DDNS_RECV_HANDSHAKE_OK
 0x00

	)

58 
	#DDNS_RECV_FINISH
 0x00

	)

59 
	#DDNS_RECV_DATA_OK
 0X00

	)

60 
	#DDNS_ACTIVE_OK
 0x00

	)

62 
	#DDNS_CONN
 0x03

63 
	#DATA_HEADER
 0x20

64 

	)

65 
	#DDNS_BUFSIZE
 2048

	)

66 
	#DDNS_CFGSIZE
 1024

	)

67 
	#DDNS_PORT
 7070

	)

69 
	#TCPPORT
 37777

	)

70 
	#HTTPPORT
 80

	)

72 
	#DDNS_MAC_LEN
 17

	)

74 
	#D_FREE
(
p
Ëif(
NULL
 !’)Ë{
	`‰ì
(’));’)=NULL;}

	)

77 #i‡
deföed
(
DVR_LB
)

78 
	#DDNS_CFG_FNAME
 "/m¡/mtd/C⁄fig/ddns-£rvî"

	)

79 
	#DVR_CFG_FNAME
 "/m¡/mtd/C⁄fig/√tw‹k"

	)

82 #i‡
deföed
(
DVR_HB
Ë|| deföed(
DVR_GB
)

83 
	#DDNS_CFG_FNAME
 "/›t/ßv/c⁄fig/ddns-£rvî"

	)

84 
	#DVR_CFG_FNAME
 "/›t/ßv/c⁄fig/√tw‹k"

	)

87 
	#KEEPTIMES
 600

	)

89 
	#DDNS_SLEEP_TIME
 5

	)

92 
	tBYTE
;

93 
	tWORD
;

94 
	tDWORD
;

95 
	tBOOL
;

96 
	tEº‹Code_t
;

98 
	sxSoD©
 {

99 
BYTE
 
	mComm™d
;

100 
BYTE
 
	mRe£rv
[3];

101 
DWORD
 
	mExtLí
;

102 
BYTE
 
	mP¨ams
[24];

103 
BYTE
 
	mExtD©
[64];

106 
	sègDDNS_Clõ¡_Sëup
 {

107 
	mcbSize
;

108 
	m£rvîP‹t
;

109 
WORD
 
	mTCPP‹t
;

110 
WORD
 
	mHTTPP‹t
;

111 *
	m£rvîIp
;

112 *
	mu£∫ame
;

113 *
	m∑ssw‹d
;

114 *
	mddnsName
;

115 *
	mdevi˚Ty≥
;

116 *
	mh¨dw¨eId
;

117 *
	mextInfo
;

118 
	mextSize
;

119 } 
	tDDNS_Clõ¡_Sëup_t
, *
	tpDDNS_Clõ¡_Sëup_t
;

121 
	sègDDNS_Quîy_Sëup
 {

122 
	mcbSize
;

123 *
	m£rvîIp
;

124 
	m£rvîP‹t
;

125 *
	mu£∫ame
;

126 *
	m∑ssw‹d
;

127 } 
	tDDNS_Quîy_Sëup_t
, *
	tpDDNS_Quîy_Sëup_t
;

129 
	sDDNS_Quîy_ExtInfo
 {

130 *
	mdevi˚Ip
;

131 *
	mextInfo
;

132 
	mextSize
;

133 } 
	tDDNS_Quîy_Info_t
, *
	tpDDNS_Quîy_Info_t
;

135 
	eEº‹Code_t
 {

136 
	mDH_OK
 = 0,

137 
	mDH_ERR_OUT_OF_MEMORY
,

138 
	mDH_ERR_BAD_PARAM
,

139 
	mDDNS_ERR_NET_FAILUR
,

140 
	mDDNS_ERR_INVALID_CREDIT
,

141 
	mDDNS_ERR_SESSION_TIMEOUT
,

142 
	mDH_ERR_UNKNOWN
,

145 *
	gddns_buf
 = 
NULL
;

146 
pDDNS_Clõ¡_Sëup_t
 
	gddns_ãmp
 = 
NULL
;

152 
DDNS_InôBuff
();

157 
DDNS_O≥nNë
(*
ddns_ù
, 
WORD
 
p‹t
);

162 
DDNS_GëMac
(*
gëmaˇddr
);

169 
DDNS_Clõ¡_Sëup
(
ègDDNS_Clõ¡_Sëup
 *
pSëup
);

178 
DDNS_GET_CFG
();

185 
DDNS_Clõ¡_Regi°î
();

194 
DDNS_Clõ¡_KìpAlive
();

199 
DDNS_TimeKìph™dÀ
();

204 
DDNS_Clõ¡Regi°î_U¡ûSuc˚ss
();

209 
DDNS_GëCFG_U¡ûSuc˚ss
();

	@include_lib/net/lwip/app/dhcp_srv/dhcp_srv.h

1 #i‚de‡
__DHCP_SRV_H__


2 
	#__DHCP_SRV_H__


	)

4 
dh˝s_öô
();

5 
dh˝s_ªÀa£_ùaddr
(*
hwaddr
);

7 
dh˝s_unöô
();

	@include_lib/net/lwip/app/dtp/dtp.h

1 #i‚de‡
__DTP_H__


2 
	#__DTP_H__


	)

4 
	~"lwù/sockës.h
"

5 
	~"lwù/√tdb.h
"

7 
	edç_˛i_msg_ty≥
 {

8 
	mDTP_CLI_SET_BIND_PORT
,

9 
	mDTP_CLI_SET_CONNECT_TO
,

10 
	mDTP_CLI_CONNECT_SUCC
,

11 
	mDTP_CLI_CONNECT_FAIL
,

12 
	mDTP_CLI_BIND_FAIL
,

13 
	mDTP_CLI_SRV_DISCONNECT
,

14 
	mDTP_CLI_UNREG
,

15 
	mDTP_CLI_RECV_DATA
,

16 
	mDTP_CLI_SEND_DATA
,

17 
	mDTP_CLI_BEFORE_RECV
,

18 
	mDTP_CLI_SEND_TO
,

19 
	mDTP_CLI_RECV_TO
,

22 
	edç_§v_msg_ty≥
 {

23 
	mDTP_SRV_SET_MAX_BACKLOG
,

24 
	mDTP_SRV_CLI_CONNECTED
,

25 
	mDTP_SRV_CLI_DISCONNECT
,

26 
	mDTP_SRV_SRV_DISCONNECT
,

27 
	mDTP_SRV_HDL_CLOSE
,

28 
	mDTP_SRV_RECV_DATA
,

29 
	mDTP_SRV_SEND_DATA
,

30 
	mDTP_SRV_BEFORE_RECV
,

31 
	mDTP_SRV_SEND_TO
,

32 
	mDTP_SRV_RECV_TO
,

35 
	#DTP_NONE
 (1<<0)

	)

36 
	#DTP_WRITE
 (1<<1)

	)

37 
	#DTP_READ
 (1<<2)

	)

38 
	#DTP_CONNECT_NON_BLOCK
 (1<<3)

	)

40 
ölöe
 
dç_˛i_£t_ªcvbuf
(*
hdl
, 
u8
 *
ªcvbuf
, 
u32
 
ªcvbuf_Àn
);

41 
ölöe
 
dç_˛i_£t_ªcv_waô_Æl
(*
hdl
, 
boﬁ
 
íabÀ
);

42 *
dç_˛i_ªg
(
sockaddr_ö
 *
de°_addr
, (*
cb_func
)(*
hdl
, 
dç_˛i_msg_ty≥
 
ty≥
, *
buf
, 
u32
 
Àn
, *
¥iv
), *¥iv, 
dç_mode
);

43 
	`dç_˛i_uƒeg
(*
hdl
);

44 
	`dç_˛i_£nd
(*
hdl
);

45 
	`dç_˛i_£nd_buf
(*
hdl
, *
buf
, 
u32
 
Àn
, 
Êag
);

46 
ölöe
 
	`dç_˛i_£t_ªcv_timeout
(*
hdl
, 
u32
 
mûl£c
);

47 
ölöe
 
	`dç_˛i_ªcv_timeout
(*
hdl
);

48 
ölöe
 
	`dç_˛i_£t_£nd_timeout
(*
hdl
, 
u32
 
mûl£c
);

49 
ölöe
 
	`dç_˛i_£nd_timeout
(*
hdl
);

50 
	`dç_˛i_£t_ªcv_Êag
(*
hdl
, 
Êag
);

51 
	`dç_˛i_£t_£nd_Êag
(*
hdl
, 
Êag
);

52 
	`dç_˛i_ªcv
(*
h™dÀ
, *
buf
, 
u32
 
Àn
, 
Êag
);

53 
	`˘p_˛i_unöô
();

54 
	`dç_˛i_öô
();

55 
	`dç_˛i_£t_c⁄√˘_to
(*
hdl
, 
£c
);

56 
	`dç_˛i_£t_c⁄√˘_öãrvÆ
(*
hdl
, 
£c
);

57 
	`dç_˛i_£t_loˇl_p‹t
(*
hdl
, 
u16
 
p‹t
);

58 
	`dç_˛i_£t_thªad_¥io_°ksize
(
u32
 
¥io
, u32 
°k_size
);

59 
sockaddr_ö
 *
	`dç_˛i_gë_hdl_addr
(*
h™dÀ
);

63 *
	`dç_˛i_gΩ_¸óã
();

64 
	`dç_˛i_gΩ_dñ
(*
§v_gΩ
);

65 
	`dç_˛i_gΩ_add
(*
§v_gΩ
, *
hdl
);

67 
	`dç_˛i_gΩ_c⁄√˘
(*
§v_gΩ
, 
boﬁ
 
waô_com∂ëe
);

68 
	`dç_˛i_gΩ_£nd
(*
§v_gΩ
);

71 
	`dç_§v_öô
();

72 
	`dç_§v_unöô
();

73 
	`dç_§v_£t_£nd_thªad_¥io_°ksize
(*
hdl
, 
u32
 
¥io
, u32 
°k_size
);

74 
	`dç_§v_£t_ªcv_thªad_¥io_°ksize
(*
hdl
, 
u32
 
¥io
, u32 
°k_size
);

75 *
	`dç_§v_ªg
(
u16
 
p‹t
, (*
cb_func
)(*
hdl
, *
˛i
, 
dç_§v_msg_ty≥
 
ty≥
, 
u8
 *
buf
, 
u32
 
Àn
, *
¥iv
), *¥iv, 
dç_mode
);

76 
	`dç_§v_uƒeg
(*
hdl
);

77 
	`dç_§v_£nd
(*
˛i
);

78 
	`dç_§v_£nd_buf
(*
˛i
, *
buf
, 
u32
 
Àn
, 
Êag
);

79 
	`dç_§v_ªcv
(*
˛i
, *
buf
, 
u32
 
Àn
, 
Êag
);

80 
ölöe
 
	`dç_§v_£t_ªcv_timeout
(*
˛i
, 
u32
 
mûl£c
);

81 
ölöe
 
	`dç_§v_ªcv_timeout
(*
˛i
);

82 
ölöe
 
	`dç_§v_£t_£nd_timeout
(*
˛i
, 
u32
 
mûl£c
);

83 
ölöe
 
	`dç_§v_£nd_timeout
(*
˛i
);

84 
	`dç_§v_£t_ªcv_Êag
(*
hdl
, 
Êag
);

85 
	`dç_§v_£t_£nd_Êag
(*
hdl
, 
Êag
);

86 
	`dç_§v_disc⁄√˘_˛i
(*
h™dÀ
, *
˛i
);

87 
	`dç_§v_disc⁄√˘_Æl
(*
h™dÀ
);

88 
	`dç_§v_£t_ªcvbuf
(*
hdl
, 
u8
 *
ªcvbuf
, 
u32
 
ªcvbuf_Àn
);

89 
sockaddr_ö
 *
	`dç_§v_gë_˛i_addr
(*
˛i
);

	@include_lib/net/lwip/app/mssdp/mssdp.h

1 #i‚de‡
__MSSDP_H__


2 
	#__MSSDP_H__


	)

4 
	~"ty≥def.h
"

5 
	~"lwù/sockës.h
"

6 
	~"lwù/√tdb.h
"

13 
	emssdp_ªcv_msg_ty≥
 {

14 
	mMSSDP_SEARCH_MSG
,

15 
	mMSSDP_NOTIFY_MSG
,

18 
mssdp_£t_nŸify_msg
(c⁄° *
nŸify_msg
, 
u32_t
 
nŸify_time
);

19 
mssdp_£t_£¨ch_msg
(c⁄° *
£¨ch_msg
, 
u32_t
 
£¨ch_time
);

20 
mssdp_öô
(c⁄° *
£¨ch_¥efix
, c⁄° *
nŸify_¥efix
, 
u16_t
 
p‹t
, (*
ªcv_func
)(
u32
 
de°_ùaddr
, 
mssdp_ªcv_msg_ty≥
 
ty≥
, *
buf
, *
¥iv
), *priv);

21 
	`mssdp_unöô
();

22 
	`mssdp_£¨ch
();

23 
	`mssdp_nŸify
(
sockaddr_ö
 *
si
);

24 
	`mssdp_£nd_msg
(
sockaddr_ö
 *
si
, *
buf
, 
u32_t
 
buf_Àn
);

25 
	`gë_mssdp_öfo
(c⁄° **
nŸify_¥efix
, *
sockë
, 
u16_t
 *
p‹t
);

	@include_lib/net/lwip/app/ntp/ntp.h

15 #i‚de‡
NTP_H_


16 
	#NTP_H_


	)

19 
	~<time.h
>

27 
	#NTP_DBUG_INFO_ON
 0

	)

29 
	#NTP_CLIENT_THREAD_PRIO
 22

	)

31 
	#NTP_CLIENT_THREAD_STACK_SIZE
 2048

	)

39 
¡p_£t_quîy_öãrvÆ_mö
(
mö
);

47 
¡p_£t_timez⁄e
(
z⁄e
);

55 
¡p_£t_time_cb
((*
cb
)(
tm
 *
t
));

65 
	`¡p_add_ho°_«me
(*
«me
);

74 
	`¡p_ªmove_ho°_«me
(*
«me
);

81 
	`¡p_˛õ¡_öô
();

90 
	`¡p_˛õ¡_°¨t
();

97 
	`¡p_˛õ¡_unöô
();

110 
	`¡p_˛õ¡_gë_time_⁄˚
(c⁄° *
ho°
, 
tm
 *
s_tm
, 
ªcv_to
);

	@include_lib/net/lwip/app/sock_api/sock_api.h

1 #i‚de‡
__SOCK_API_H__


2 
	#__SOCK_API_H__


	)

4 
	~"lwù/sockës.h
"

5 
	~"lwù/√tdb.h
"

6 
	~"os/os_com∑t.h
"

7 
	~"li°.h
"

8 
	~"°rög.h
"

19 
	esock_≠i_msg_ty≥
 {

20 
	mSOCK_SEND_TO
,

21 
	mSOCK_RECV_TO
,

22 
	mSOCK_EVENT_ALWAYS
,

23 
	mSOCK_CONNECT_SUCC
,

24 
	mSOCK_CONNECT_FAIL
,

25 
	mSOCK_UNREG
,

33 
	ssock_hdl
 {

34 
	msock
;

35 (*
	mcb_func
)(
sock_≠i_msg_ty≥
 
	mty≥
, *
	m¥iv
);

36 *
	m¥iv
;

37 
	mc⁄√˘_to
;

38 
	m£nd_to
;

39 
	m£nd_to_Êag
;

40 
	mªcv_to
;

41 
	mªcv_to_Êag
;

42 
OS_MUTEX
 
	m£nd_mtx
;

43 
OS_MUTEX
 
	mªcv_mtx
;

45 
	mquô
;

46 
	mmagic
;

57 
sock_£t_quô
(*
sock_hdl
);

67 
sock_gë_quô
(*
sock_hdl
);

75 
sock_˛r_quô
(*
sock_hdl
);

84 
sock_gë_sockë
(*
sock_hdl
);

98 *
sock_ªg
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
, (*
cb_func
)(
sock_≠i_msg_ty≥
Åy≥, *
¥iv
), *priv);

106 
	`sock_uƒeg
(*
sock_hdl
);

115 
	`sock_£t_ªcv_timeout
(*
sock_hdl
, 
mûl£c
);

124 
	`sock_ªcv_timeout
(*
sock_hdl
);

134 
	`sock_would_block
(*
sock_hdl
);

143 
	`sock_£t_£nd_timeout
(*
sock_hdl
, 
mûl£c
);

152 
	`sock_£nd_timeout
(*
sock_hdl
);

165 
	`sock_ªcv
(*
sock_hdl
, *
buf
, 
Àn
, 
Êag
);

178 
	`sock_£nd
(*
sock_hdl
, c⁄° *
buf
, 
Àn
, 
Êag
);

192 
	`sock_ªcv‰om
(*
sock_hdl
, *
buf
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

206 
	`sock_£ndto
(*
sock_hdl
, c⁄° *
d©a
, 
size_t
 
size
, 
Êags
, c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

214 
	`sock_£t_c⁄√˘_to
(*
sock_hdl
, 
£c
);

226 
	`sock_c⁄√˘
(*
sock_hdl
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

240 
	`sock_£À˘
(*
sock_hdl
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
, 
timevÆ
 *
tv
);

254 *
	`sock_ac˚±
(*
sock_hdl
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
, (*
cb_func
)(
sock_≠i_msg_ty≥
 
ty≥
, *
¥iv
), *priv);

266 
	`sock_böd
(*
sock_hdl
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

279 
	`sock_li°í
(*
sock_hdl
, 
backlog
);

288 
	`sock_gë_îr‹
(*
sock_hdl
);

298 
	`sock_£À˘_rd£t
(*
sock_hdl
);

311 
	`sockë_£t_kì∑live
(*
sock_hdl
, 
kìp_idÀ
, 
kìp_ötv
, 
kìp_˙t
);

321 
	`sock_£t_ªu£addr
(*
sock_hdl
);

337 
	`sock_f˙é
(*
sock_hdl
, 
cmd
, 
vÆ
);

351 
	`sock_gësock›t
(*
sock_hdl
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

365 
	`sock_£tsock›t
(*
sock_hdl
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

381 
	`sock_gësock«me
(*
sock_hdl
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

394 
	`sock_gë≥î«me
(*
sock_hdl
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

	@include_lib/net/lwip/app/udtp/udtp.h

1 #i‚de‡
__UDTP_H__


2 
	#__UDTP_H__


	)

4 
	#UDTP_NONE
 (0)

	)

5 
	#UDTP_WRITE
 (1<<0)

	)

6 
	#UDTP_READ
 (1<<1)

	)

8 
	eudç_msg_ty≥
 {

9 
	mUDTP_SET_THREAD_PRIO_STKSIZE
,

10 
	mUDTP_SEND_DATA
,

11 
	mUDTP_BEFORE_RECV
,

12 
	mUDTP_RECV_DATA
,

13 
	mUDTP_HDL_CLOSE
,

16 
udç_öô
();

17 
udç_unöô
();

18 *
udç_ªg
(
sockaddr_ö
 *
d°_addr
, 
u16
 
li°í_p‹t
, (*
cb_func
)(*
h™dÀ
, sockaddr_ö *d°_addr, 
udç_msg_ty≥
 
ty≥
, 
u8
 *
buf
, 
u32
 
Àn
, *
¥iv
), *¥iv, 
udç_mode
);

19 
	`udç_uƒeg
(*
h™dÀ
);

20 
	`udç_£nd
(*
h™dÀ
);

21 
	`udç_£nd_buf
(*
h™dÀ
, *
buf
, 
u32
 
Àn
, 
Êag
);

22 
	`udç_£t_£nd_thªad_¥io_°ksize
(*
h™dÀ
, 
u32
 
¥io
, u32 
°k_size
);

23 
	`udç_£t_ªcv_thªad_¥io_°ksize
(*
h™dÀ
, 
u32
 
¥io
, u32 
°k_size
);

24 
	`udç_£t_ªcvbuf
(*
h™dÀ
, 
u8
 *
ªcvbuf
, 
u32
 
ªcvbuf_Àn
);

25 
	`udç_£t_ªcv_timeout
(*
h™dÀ
, 
u32
 
mûl£c
);

26 
	`udç_ªcv_timeout
(*
h™dÀ
);

27 
	`udç_ªcv
(*
h™dÀ
, 
u8
 *
buf
, 
u32
 
Àn
, 
Êag
, 
sockaddr_ö
 *
de°_addr
);

	@include_lib/net/lwip/port/arch/cc.h

1 #i‚de‡
_CC_H_


2 
	#_CC_H_


	)

4 
	~"¨ch/˝u.h
"

20 
	#PACK_STRUCT_BEGIN


	)

21 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
__∑cked__
))

23 
	#PACK_STRUCT_END


	)

25 
	#PACK_STRUCT_FIELD
–
x
 ) 
	)
x

27 
	#ALIGN_STRUCT_8_BEGIN


	)

28 
	#ALIGN_STRUCT_8
 
	`ALIGNE
(8)

29 
	#ALIGN_STRUCT_8_END


	)

32 
	#U16_F
 "u"

	)

33 
	#S16_F
 "d"

	)

34 
	#X16_F
 "x"

	)

35 
	#U32_F
 "u"

	)

36 
	#S32_F
 "d"

	)

37 
	#X32_F
 "x"

	)

41 #i‚de‡
LWIP_PLATFORM_ASSERT


42 
	#LWIP_PLATFORM_ASSERT
(
x
) \

44 { 
	`¥ötf
("\n\n\n\n\n\n\n\¿As£πi⁄ \"%s\" faûedáàlöê%d i¿%s\n\n\n\n\n\n\n\n\n", 
x
, 
__LINE__
, 
__FILE__
); \

45 } 0)

	)

48 #i‚de‡
LWIP_PLATFORM_DIAG


49 
	#LWIP_PLATFORM_DIAG
(
x
Ëdÿ{
¥ötf
 x;} 0)

	)

	@include_lib/net/lwip/port/arch/cpu.h

1 #i‚de‡
__CPU_H__


2 
	#__CPU_H__


	)

4 
	#BYTE_ORDER
 
LITTLE_ENDIAN


5 

	)

	@include_lib/net/lwip/port/arch/perf.h

32 #i‚de‡
__PERF_H__


33 
	#__PERF_H__


	)

36 
	#PERF_START


37 
	#PERF_STOP
(
x
)

38 

	)

	@include_lib/net/lwip/port/arch/sys_arch.h

1 #i‚de‡
__ARCH_SYS_ARCH_H__


2 
	#__ARCH_SYS_ARCH_H__


	)

4 
	~"cc.h
"

5 
	~"¨ch.h
"

6 
	~"os/os_≠i.h
"

7 
	~"os/os_˝u.h
"

8 #ifde‡
SYS_ARCH_GLOBALS


9 
	#SYS_ARCH_EXT


	)

11 
	#SYS_ARCH_EXT
 

	)

15 
íãr_lwù_sys_¨ch_¥Ÿe˘
();

16 
exô_lwù_sys_¨ch_¥Ÿe˘
();

17 
öô_lwù_sys_¨ch_¥Ÿe˘
();

20 #i‡ 
OS_CRITICAL_METHOD
 == 3

21 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
	`CPU_SR_ALLOC
()

	)

22 
	#SYS_ARCH_PROTECT
(
Àv
Ë
	`OS_ENTER_CRITICAL
()

	)

24 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`OS_EXIT_CRITICAL
()

	)

36 
	#sys_¨ch_mbox_åy„tch
(
mbox
,
msg
Ë
	`sys_¨ch_mbox_„tch
(mbox,msg,1)

	)

41 
OS_QUEUE
 
	mpQ
;

43 } 
	tTQ_DESCR
;

46 
OS_SEM
 
	tsys_£m_t
;

47 
OS_MUTEX
 
	tsys_muãx_t
;

48 
TQ_DESCR
 
	tsys_mbox_t
;

49 
u32_t
 
	tsys_thªad_t
;

50 
u8_t
 
	tsys_¥Ÿ_t
;

53 
	#SYS_SEM_NULL
 
NULL


	)

55 
	#LWIP_NETCONN_THREAD_SEM_GET
(
LWIP_NETCONN_THREAD_SEM
) \

56 
ucEº
;\

57 
sys_£m_t
 
thªad_£m
;\

58 
ucEº
 = 
	`os_£m_¸óã
 (&
thªad_£m
,0);\

59 if(
ucEº
!=
OS_ERR_NONE
)\

61 
	`LWIP_ASSERT
("LWIP_NETCONN_THREAD_SEM_GET ",
ucEº
 =
OS_ERR_NONE
 );\

62 
LWIP_NETCONN_THREAD_SEM
 = (
sys_£m_t
 *)
NULL
;\

64 
LWIP_NETCONN_THREAD_SEM
 = &
thªad_£m
;\

65 

	)

66 
	#LWIP_NETCONN_THREAD_SEM_ALLOC
()

	)

67 
	#LWIP_NETCONN_THREAD_SEM_FREE
()

	)

	@include_lib/net/lwip/port/lwip.h

1 #i‚de‡
__LW_IP_H


2 
	#__LW_IP_H


	)

3 
	~"lwù/√tif.h
"

4 
	~"lwù/¥Ÿ/ëhî√t.h
"

5 #ifde‡
__˝lu•lus


14 
	sœn_£âög
 {

16 
u8
 
WIRELESS_IP_ADDR0
;

17 
u8
 
WIRELESS_IP_ADDR1
;

18 
u8
 
WIRELESS_IP_ADDR2
;

19 
u8
 
WIRELESS_IP_ADDR3
;

21 
u8
 
WIRELESS_NETMASK0
;

22 
u8
 
WIRELESS_NETMASK1
;

23 
u8
 
WIRELESS_NETMASK2
;

24 
u8
 
WIRELESS_NETMASK3
;

26 
u8
 
WIRELESS_GATEWAY0
;

27 
u8
 
WIRELESS_GATEWAY1
;

28 
u8
 
WIRELESS_GATEWAY2
;

29 
u8
 
WIRELESS_GATEWAY3
;

31 
u8
 
SERVER_IPADDR1
;

32 
u8
 
SERVER_IPADDR2
;

33 
u8
 
SERVER_IPADDR3
;

34 
u8
 
SERVER_IPADDR4
;

36 
u8
 
CLIENT_IPADDR1
;

37 
u8
 
CLIENT_IPADDR2
;

38 
u8
 
CLIENT_IPADDR3
;

39 
u8
 
CLIENT_IPADDR4
;

41 
u8
 
SUB_NET_MASK1
;

42 
u8
 
SUB_NET_MASK2
;

43 
u8
 
SUB_NET_MASK3
;

44 
u8
 
SUB_NET_MASK4
;

47 
	eLWIP_EVENT
 {

48 
LWIP_WIRELESS_DHCP_BOUND_TIMEOUT
,

49 
LWIP_WIRELESS_DHCP_BOUND_SUCC
,

51 
LWIP_WIRE_DHCP_BOUND_TIMEOUT
,

52 
LWIP_WIRE_DHCP_BOUND_SUCC
,

55 #i‚de‡
__LW_IP_C


58 
√tif
 
wúñess_√tif
;

59 
Inô_LwIP
(
u8_t
 
is_wúñess
, u8_à
dh˝
);

60 
gëho°«me
(*
«me
, 
«mñí
);

61 
Gë_IPAddªss
(
is_wúñess
, *
ùaddr
);

62 
lwù_gë_de°_hwaddr
(
u8
 
is_wúñess
, 
ù4_addr_t
 *
ùaddr
, 
ëh_addr
 *
dhwaddr
);

63 
LwIP_Pkt_H™dÀ
();

64 
lwù_£t_cb
((*
cb
)(*, 
LWIP_EVENT
, *), *
¥iv
);

65 
lwù_£t_dh˝_timeout
(
£c
);

66 
gë_√tif_maˇddr_™d_ùaddr
(
ù4_addr_t
 *
ùaddr
, *
mac_addr
, 
cou¡
);

67 
√tif
 *
ù4_rouã2
(c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
);

68 
œn_£âög
 *
gë_œn_£âög_öfo
();

69 
£t_œn_£âög_öfo
(*
¥iv
);

82 #ifde‡
__˝lu•lus


86 
	#NI_NUMERICHOST
 (1<<0)

	)

87 
	#NI_NUMERICSERV
 (1<<1)

	)

	@include_lib/net/lwip/port/lwipopts.h

1 
¶ìp
(
s
);

2 
time_œp£
(*
h™dÀ
, 
time_out
);

3 *
°r_föd
(c⁄° *
°r
, c⁄° *
föd
);

4 
a•rötf
(**
ªt
, c⁄° *
f‹m©
, ...);

5 
OSGëTime
();

6 
√tdev_rx_ªgi°î
((*
fun
)(*
¥iv
, *
d©a
, 
Àn
), *priv);

7 
	`√tdev_gë_mac_addr
(*
mac_addr
);

8 *
	`√tdev_Æloc_ouçut_buf
(**
buf
, 
Àn
);

9 
	`√tdev_£nd_d©a
(*
¥iv
, *
skb
);

10 
î∫o
;

14 
	~<î∫o.h
>

17 
	~"sys/time.h
"

18 
	#LWIP_TIMEVAL_PRIVATE
 0

	)

20 
	#LWIP_SOCKET
 1

	)

21 
	#LWIP_COMPAT_SOCKETS
 1

	)

22 
	#LWIP_NETCONN
 0

	)

23 
	#LWIP_SO_RCVTIMEO
 1

	)

24 
	#LWIP_SO_SNDTIMEO
 1

	)

25 
	#LWIP_SO_SNDRCVTIMEO_NONSTANDARD
 1

	)

31 
	#DEFAULT_ACCEPTMBOX_SIZE
 60

	)

32 
	#DEFAULT_RAW_RECVMBOX_SIZE
 61

	)

33 
	#DEFAULT_UDP_RECVMBOX_SIZE
 62

	)

34 
	#DEFAULT_TCP_RECVMBOX_SIZE
 63

	)

35 
	#TCPIP_MBOX_SIZE
 128

	)

37 
	#MEMP_NUM_TCPIP_MSG_INPKT
 256

	)

38 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

39 
	#MEMP_NUM_NETCONN
 (
MEMP_NUM_TCP_PCB
+
MEMP_NUM_TCP_PCB_LISTEN
+
MEMP_NUM_UDP_PCB
+
MEMP_NUM_RAW_PCB
)

	)

40 
	#MEMP_NUM_NETBUF
 512

	)

42 
	#SYS_LIGHTWEIGHT_PROT
 1

	)

43 
	#NO_SYS
 0

44 
	#NO_SYS_NO_TIMERS
 1

	)

46 
	#LWIP_TCPIP_TIMEOUT
 1

	)

49 
	#ARP_TABLE_SIZE
 8

	)

50 
	#ARP_QUEUEING
 0

	)

51 
	#MEMP_NUM_ARP_QUEUE
 32

	)

58 
	#IP_FORWARD
 0

	)

59 
	#IP_REASSEMBLY
 1

	)

60 
	#IP_FRAG
 1

	)

61 
	#IP_REASS_MAX_PBUFS
 44

	)

65 
	$ù4_rouã2
(
§c
, 
de°
)

69 
	#LWIP_NETCONN_FULLDUPLEX
 1

	)

70 
	#LWIP_NETCONN_SEM_PER_THREAD
 1

	)

72 
	#LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
 1

	)

73 
	#LWIP_RAND
(Ë(
RAND64L
+0xc000)

	)

79 
	#TCP_QUEUE_OOSEQ
 1

	)

80 
	#TCP_MSS
 (1500 - 40Ë

	)

81 
	#TCP_WND
 (44*
TCP_MSS
)

	)

82 
	#TCP_SND_BUF
 (44*
TCP_MSS
)

	)

83 
	#TCP_SND_QUEUELEN
 ((16 * (
TCP_SND_BUF
Ë+ (
TCP_MSS
 - 1))/(TCP_MSS))

	)

84 
	#TCP_LISTEN_BACKLOG
 0

	)

85 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

91 
	#LWIP_RAW
 0

	)

96 
	#MEM_LIBC_MALLOC
 1

	)

97 
	#MEM_ALIGNMENT
 4

	)

99 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
((*)d°,(*)§c,Àn)

	)

100 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
((*)d°,(*)§c,Àn)

	)

102 
	#MEMP_NUM_PBUF
 4

	)

103 
	#MEMP_NUM_UDP_PCB
 32

	)

104 
	#MEMP_NUM_TCP_PCB
 64

	)

105 
	#MEMP_NUM_TCP_PCB_LISTEN
 32

	)

106 
	#MEMP_NUM_TCP_SEG
 
TCP_SND_QUEUELEN


107 
	#MEMP_NUM_SYS_TIMEOUT
 16

	)

110 
	#MEMP_NUM_RAW_PCB
 0

	)

111 
	#MEMP_NUM_REASSDATA
 44

	)

112 
	#MEMP_NUM_FRAG_PBUF
 32

	)

115 
	#PBUF_POOL_SIZE
 200

	)

116 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_ENCAPSULATION_HLEN
+
PBUF_LINK_HLEN
)

	)

121 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_NETBUF_ba£
[] ;

122 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_NETCONN_ba£
[] ;

123 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_PBUF_ba£
[] ;

124 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_NETDB_ba£
[] ;

125 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x")))
memp_mem‹y_REASSDATA_ba£
[] ;

126 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x")))
memp_mem‹y_TCP_PCB_LISTEN_ba£
[] ;

127 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_SYS_TIMEOUT_ba£
[] ;

128 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_UDP_PCB_ba£
[] ;

129 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_TCPIP_MSG_INPKT_ba£
[] ;

130 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_FRAG_PBUF_ba£
[] ;

131 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_TCP_PCB_ba£
[] ;

132 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_PBUF_POOL_ba£
[] ;

133 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_TCPIP_MSG_API_ba£
[] ;

134 
	`__©åibuã__
((
	$Æig√d
(4))Ë
	`__©åibuã__
((
	`£˘i⁄
(".memp_mem‹y_x"))Ë
memp_mem‹y_TCP_SEG_ba£
[] ;

139 
	#MEMP_OVERFLOW_CHECK
 0

140 
	#MEMP_SANITY_CHECK
 0

141 

	)

143 
	#LWIP_SO_RCVBUF
 1

	)

144 
	#RECV_BUFSIZE_DEFAULT
 65535

	)

147 
	#LWIP_TCP
 1

	)

148 
	#TCP_TTL
 255

	)

150 
	#LWIP_TCP_KEEPALIVE
 0

	)

152 
	#SO_REUSE
 1

153 

	)

156 
	#TCP_MSL
 0

157 

	)

159 
	#LWIP_UDP
 1

	)

160 
	#LWIP_UDPLITE
 0

	)

161 
	#UDP_TTL
 255

	)

162 
	#CHECKSUM_GEN_UDP
 0

	)

163 
	#CHECKSUM_CHECK_UDP
 0

	)

166 
	#LWIP_ICMP
 1

	)

167 
	#ICMP_TTL
 255

	)

171 
	#LWIP_IGMP
 1

	)

172 
	#MEMP_NUM_IGMP_GROUP
 2

	)

175 
	#LWIP_DHCP
 1

	)

177 
	#LWIP_AUTOIP
 0

	)

178 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

179 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 20

	)

181 
	#MEMP_NUM_NETDB
 2

	)

182 
	#LWIP_DNS
 1

	)

183 
	#DNS_TABLE_SIZE
 4

	)

184 
	#DNS_MAX_NAME_LENGTH
 256

	)

185 
	#DNS_MAX_SERVERS
 2

	)

186 
	#DNS_LOCAL_HOSTLIST
 1

	)

187 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 1

	)

188 
	#MEMP_NUM_LOCALHOSTLIST
 8

189 
	#LOCAL_WIRELESS_HOST_NAME
 "lwù_wúñess_ho°"

	)

190 
	#LOCAL_WIRE_HOST_NAME
 "lwù_wúe_ho°"

	)

194 
	#LWIP_STATS
 1

	)

196 
	#LWIP_STATS_DISPLAY
 1

	)

197 
	#LINK_STATS
 0

	)

198 
	#ETHARP_STATS
 0

199 
	#IP_STATS
 0

	)

200 
	#IPFRAG_STATS
 0

201 
	#ICMP_STATS
 0

	)

202 
	#IGMP_STATS
 0

203 
	#UDP_STATS
 0

204 
	#TCP_STATS
 0

205 
	#MEM_STATS
 0

206 
	#MEMP_STATS
 (
MEMP_MEM_MALLOC
 =0)

	)

207 
	#SYS_STATS
 0

208 
	#IP6_STATS
 0

	)

209 
	#ICMP6_STATS
 0

	)

210 
	#IP6_FRAG_STATS
 0

	)

211 
	#MLD6_STATS
 0

	)

212 
	#ND6_STATS
 0

	)

213 
	#MIB2_STATS
 0

	)

226 
	#LWIP_DEBUG
 1

	)

228 #ifde‡
LWIP_DEBUG


230 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_ALL


231 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

232 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

233 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

234 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

235 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

236 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

237 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

238 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

239 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

240 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

241 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

242 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

243 
	#MEM_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

244 
	#MEMP_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

245 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

246 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

247 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

248 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

249 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

250 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

251 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

252 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

253 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

254 
	#TCP_RST_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

255 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

256 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

257 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

258 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

259 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

260 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

261 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

262 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

263 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

264 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

265 
	#IP6_DEBUG
 
LWIP_DBG_OFF


	)

267 
	#SMTP_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

268 
	#HTTPD_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

269 
	#HTTPD_DEBUG_TIMING
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

270 
	#SNTP_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

271 
	#RTP_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

272 
	#PING_DEBUG
 (0xffU & ~(
LWIP_DBG_HALT
))

	)

	@include_lib/net/lwip/src/include/lwip/_errno.h

37 #i‚de‡
LWIP_HDR_ERRNO_H


38 
	#LWIP_HDR_ERRNO_H


	)

40 
	~"lwù/›t.h
"

42 #ifde‡
__˝lu•lus


46 #ifde‡
LWIP_PROVIDE_ERRNO


48 
	#EPERM
 1

	)

49 
	#ENOENT
 2

	)

50 
	#ESRCH
 3

	)

51 
	#EINTR
 4

	)

52 
	#EIO
 5

	)

53 
	#ENXIO
 6

	)

54 
	#E2BIG
 7

	)

55 
	#ENOEXEC
 8

	)

56 
	#EBADF
 9

	)

57 
	#ECHILD
 10

	)

58 
	#EAGAIN
 11

	)

59 
	#ENOMEM
 12

	)

60 
	#EACCES
 13

	)

61 
	#EFAULT
 14

	)

62 
	#ENOTBLK
 15

	)

63 
	#EBUSY
 16

	)

64 
	#EEXIST
 17

	)

65 
	#EXDEV
 18

	)

66 
	#ENODEV
 19

	)

67 
	#ENOTDIR
 20

	)

68 
	#EISDIR
 21

	)

69 
	#EINVAL
 22

	)

70 
	#ENFILE
 23

	)

71 
	#EMFILE
 24

	)

72 
	#ENOTTY
 25

	)

73 
	#ETXTBSY
 26

	)

74 
	#EFBIG
 27

	)

75 
	#ENOSPC
 28

	)

76 
	#ESPIPE
 29

	)

77 
	#EROFS
 30

	)

78 
	#EMLINK
 31

	)

79 
	#EPIPE
 32

	)

80 
	#EDOM
 33

	)

81 
	#ERANGE
 34

	)

82 
	#EDEADLK
 35

	)

83 
	#ENAMETOOLONG
 36

	)

84 
	#ENOLCK
 37

	)

85 
	#ENOSYS
 38

	)

86 
	#ENOTEMPTY
 39

	)

87 
	#ELOOP
 40

	)

88 
	#EWOULDBLOCK
 
EAGAIN


	)

89 
	#ENOMSG
 42

	)

90 
	#EIDRM
 43

	)

91 
	#ECHRNG
 44

	)

92 
	#EL2NSYNC
 45

	)

93 
	#EL3HLT
 46

	)

94 
	#EL3RST
 47

	)

95 
	#ELNRNG
 48

	)

96 
	#EUNATCH
 49

	)

97 
	#ENOCSI
 50

	)

98 
	#EL2HLT
 51

	)

99 
	#EBADE
 52

	)

100 
	#EBADR
 53

	)

101 
	#EXFULL
 54

	)

102 
	#ENOANO
 55

	)

103 
	#EBADRQC
 56

	)

104 
	#EBADSLT
 57

	)

106 
	#EDEADLOCK
 
EDEADLK


	)

108 
	#EBFONT
 59

	)

109 
	#ENOSTR
 60

	)

110 
	#ENODATA
 61

	)

111 
	#ETIME
 62

	)

112 
	#ENOSR
 63

	)

113 
	#ENONET
 64

	)

114 
	#ENOPKG
 65

	)

115 
	#EREMOTE
 66

	)

116 
	#ENOLINK
 67

	)

117 
	#EADV
 68

	)

118 
	#ESRMNT
 69

	)

119 
	#ECOMM
 70

	)

120 
	#EPROTO
 71

	)

121 
	#EMULTIHOP
 72

	)

122 
	#EDOTDOT
 73

	)

123 
	#EBADMSG
 74

	)

124 
	#EOVERFLOW
 75

	)

125 
	#ENOTUNIQ
 76

	)

126 
	#EBADFD
 77

	)

127 
	#EREMCHG
 78

	)

128 
	#ELIBACC
 79

	)

129 
	#ELIBBAD
 80

	)

130 
	#ELIBSCN
 81

	)

131 
	#ELIBMAX
 82

	)

132 
	#ELIBEXEC
 83

	)

133 
	#EILSEQ
 84

	)

134 
	#ERESTART
 85

	)

135 
	#ESTRPIPE
 86

	)

136 
	#EUSERS
 87

	)

137 
	#ENOTSOCK
 88

	)

138 
	#EDESTADDRREQ
 89

	)

139 
	#EMSGSIZE
 90

	)

140 
	#EPROTOTYPE
 91

	)

141 
	#ENOPROTOOPT
 92

	)

142 
	#EPROTONOSUPPORT
 93

	)

143 
	#ESOCKTNOSUPPORT
 94

	)

144 
	#EOPNOTSUPP
 95

	)

145 
	#EPFNOSUPPORT
 96

	)

146 
	#EAFNOSUPPORT
 97

	)

147 
	#EADDRINUSE
 98

	)

148 
	#EADDRNOTAVAIL
 99

	)

149 
	#ENETDOWN
 100

	)

150 
	#ENETUNREACH
 101

	)

151 
	#ENETRESET
 102

	)

152 
	#ECONNABORTED
 103

	)

153 
	#ECONNRESET
 104

	)

154 
	#ENOBUFS
 105

	)

155 
	#EISCONN
 106

	)

156 
	#ENOTCONN
 107

	)

157 
	#ESHUTDOWN
 108

	)

158 
	#ETOOMANYREFS
 109

	)

159 
	#ETIMEDOUT
 110

	)

160 
	#ECONNREFUSED
 111

	)

161 
	#EHOSTDOWN
 112

	)

162 
	#EHOSTUNREACH
 113

	)

163 
	#EALREADY
 114

	)

164 
	#EINPROGRESS
 115

	)

165 
	#ESTALE
 116

	)

166 
	#EUCLEAN
 117

	)

167 
	#ENOTNAM
 118

	)

168 
	#ENAVAIL
 119

	)

169 
	#EISNAM
 120

	)

170 
	#EREMOTEIO
 121

	)

171 
	#EDQUOT
 122

	)

173 
	#ENOMEDIUM
 123

	)

174 
	#EMEDIUMTYPE
 124

	)

176 #i‚de‡
î∫o


177 
î∫o
;

183 #ifde‡
LWIP_ERRNO_INCLUDE


184 #ö˛udê
LWIP_ERRNO_INCLUDE


189 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/api.h

37 #i‚de‡
LWIP_HDR_API_H


38 
	#LWIP_HDR_API_H


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_NETCONN
 || 
LWIP_SOCKET


46 
	~"lwù/¨ch.h
"

47 
	~"lwù/√tbuf.h
"

48 
	~"lwù/sys.h
"

49 
	~"lwù/ù_addr.h
"

50 
	~"lwù/îr.h
"

52 #ifde‡
__˝lu•lus


61 
	#NETCONN_NOFLAG
 0x00

	)

62 
	#NETCONN_NOCOPY
 0x00

	)

63 
	#NETCONN_COPY
 0x01

	)

64 
	#NETCONN_MORE
 0x02

	)

65 
	#NETCONN_DONTBLOCK
 0x04

	)

69 
	#NETCONN_FLAG_NON_BLOCKING
 0x02

	)

71 
	#NETCONN_FLAG_IN_NONBLOCKING_CONNECT
 0x04

	)

74 
	#NETCONN_FLAG_CHECK_WRITESPACE
 0x10

	)

75 #i‡
LWIP_IPV6


79 
	#NETCONN_FLAG_IPV6_V6ONLY
 0x20

	)

84 
	#NETCONNTYPE_GROUP
(
t
Ë(—)&0xF0)

	)

85 
	#NETCONNTYPE_DATAGRAM
(
t
Ë(—)&0xE0)

	)

86 #i‡
LWIP_IPV6


87 
	#NETCONN_TYPE_IPV6
 0x08

	)

88 
	#NETCONNTYPE_ISIPV6
(
t
Ë((—)&
NETCONN_TYPE_IPV6
Ë!0)

	)

89 
	#NETCONNTYPE_ISUDPLITE
(
t
Ë((—)&0xF3Ë=
NETCONN_UDPLITE
)

	)

90 
	#NETCONNTYPE_ISUDPNOCHKSUM
(
t
Ë((—)&0xF3Ë=
NETCONN_UDPNOCHKSUM
)

	)

92 
	#NETCONNTYPE_ISIPV6
(
t
Ë(0)

	)

93 
	#NETCONNTYPE_ISUDPLITE
(
t
Ë(—Ë=
NETCONN_UDPLITE
)

	)

94 
	#NETCONNTYPE_ISUDPNOCHKSUM
(
t
Ë(—Ë=
NETCONN_UDPNOCHKSUM
)

	)

100 
	e√tc⁄n_ty≥
 {

101 
NETCONN_INVALID
 = 0,

103 
NETCONN_TCP
 = 0x10,

104 #i‡
LWIP_IPV6


106 
NETCONN_TCP_IPV6
 = 
NETCONN_TCP
 | 
NETCONN_TYPE_IPV6
 ,

109 
NETCONN_UDP
 = 0x20,

111 
NETCONN_UDPLITE
 = 0x21,

113 
NETCONN_UDPNOCHKSUM
 = 0x22,

115 #i‡
LWIP_IPV6


117 
NETCONN_UDP_IPV6
 = 
NETCONN_UDP
 | 
NETCONN_TYPE_IPV6
 ,

119 
NETCONN_UDPLITE_IPV6
 = 
NETCONN_UDPLITE
 | 
NETCONN_TYPE_IPV6
 ,

121 
NETCONN_UDPNOCHKSUM_IPV6
 = 
NETCONN_UDPNOCHKSUM
 | 
NETCONN_TYPE_IPV6
 ,

125 
NETCONN_RAW
 = 0x40

126 #i‡
LWIP_IPV6


128 , 
NETCONN_RAW_IPV6
 = 
NETCONN_RAW
 | 
NETCONN_TYPE_IPV6


134 
	e√tc⁄n_°©e
 {

135 
NETCONN_NONE
,

136 
NETCONN_WRITE
,

137 
NETCONN_LISTEN
,

138 
NETCONN_CONNECT
,

139 
NETCONN_CLOSE


168 
	e√tc⁄n_evt
 {

169 
NETCONN_EVT_RCVPLUS
,

170 
NETCONN_EVT_RCVMINUS
,

171 
NETCONN_EVT_SENDPLUS
,

172 
NETCONN_EVT_SENDMINUS
,

173 
NETCONN_EVT_ERROR


176 #i‡
LWIP_IGMP
 || (
LWIP_IPV6
 && 
LWIP_IPV6_MLD
)

178 
	e√tc⁄n_igmp
 {

179 
NETCONN_JOIN
,

180 
NETCONN_LEAVE


184 #i‡
LWIP_DNS


186 
	#NETCONN_DNS_DEFAULT
 
NETCONN_DNS_IPV4_IPV6


	)

187 
	#NETCONN_DNS_IPV4
 0

	)

188 
	#NETCONN_DNS_IPV6
 1

	)

189 
	#NETCONN_DNS_IPV4_IPV6
 2

	)

190 
	#NETCONN_DNS_IPV6_IPV4
 3

	)

194 
ù_pcb
;

195 
t˝_pcb
;

196 
udp_pcb
;

197 
øw_pcb
;

198 
√tc⁄n
;

199 
≠i_msg
;

202 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

205 
	s√tc⁄n
 {

207 
√tc⁄n_ty≥
 
ty≥
;

209 
√tc⁄n_°©e
 
°©e
;

212 
ù_pcb
 *
ù
;

213 
t˝_pcb
 *
t˝
;

214 
udp_pcb
 *
udp
;

215 
øw_pcb
 *
øw
;

216 } 
pcb
;

218 
îr_t
 
œ°_îr
;

219 #i‡!
LWIP_NETCONN_SEM_PER_THREAD


221 
sys_£m_t
 
›_com∂ëed
;

225 
sys_mbox_t
 
ªcvmbox
;

226 #i‡
LWIP_TCP


229 
sys_mbox_t
 
ac˚±mbox
;

232 #i‡
LWIP_SOCKET


233 
sockë
;

235 #i‡
LWIP_SO_SNDTIMEO


238 
s32_t
 
£nd_timeout
;

240 #i‡
LWIP_SO_RCVTIMEO


243 
ªcv_timeout
;

245 #i‡
LWIP_SO_RCVBUF


248 
ªcv_bufsize
;

252 
ªcv_avaû
;

254 #i‡
LWIP_SO_LINGER


256 
s16_t
 
lögî
;

259 
u8_t
 
Êags
;

260 #i‡
LWIP_TCP


263 
size_t
 
wrôe_off£t
;

267 
≠i_msg
 *
cuºít_msg
;

270 
√tc⁄n_ˇŒback
 
ˇŒback
;

274 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

275 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

276 }

	)

279 
	#NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
Ëdÿ{ i‡((c⁄nË!
NULL
) { \

280 
	`SYS_ARCH_DECL_PROTECT
(
√tc⁄n_£t_ß„_îr_Àv
); \

281 
	`SYS_ARCH_PROTECT
(
√tc⁄n_£t_ß„_îr_Àv
); \

282 i‡(!
	`ERR_IS_FATAL
((
c⁄n
)->
œ°_îr
)) { \

283 (
c⁄n
)->
œ°_îr
 = 
îr
; \

285 
	`SYS_ARCH_UNPROTECT
(
√tc⁄n_£t_ß„_îr_Àv
); \

286 }} 0);

	)

293 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

294 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

295 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

296 
√tc⁄n_ˇŒback
 
ˇŒback
);

297 
îr_t
 
√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
);

299 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

301 
îr_t
 
√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
,

302 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
);

304 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

306 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

308 
îr_t
 
√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, c⁄° 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

309 
îr_t
 
√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, c⁄° 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

310 
îr_t
 
√tc⁄n_disc⁄√˘
(
√tc⁄n
 *
c⁄n
);

311 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

313 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

314 
îr_t
 
√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
, √tc⁄¿**
√w_c⁄n
);

315 
îr_t
 
√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 **
√w_buf
);

316 
îr_t
 
√tc⁄n_ªcv_t˝_pbuf
(
√tc⁄n
 *
c⁄n
, 
pbuf
 **
√w_buf
);

317 
îr_t
 
√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
,

318 c⁄° 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

319 
îr_t
 
√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
);

320 
îr_t
 
√tc⁄n_wrôe_∑πly
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
,

321 
u8_t
 
≠iÊags
, 
size_t
 *
byãs_wrôãn
);

323 
	#√tc⁄n_wrôe
(
c⁄n
, 
d©≠å
, 
size
, 
≠iÊags
) \

324 
	`√tc⁄n_wrôe_∑πly
(
c⁄n
, 
d©≠å
, 
size
, 
≠iÊags
, 
NULL
)

	)

325 
îr_t
 
√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
);

326 
îr_t
 
√tc⁄n_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
shut_rx
, u8_à
shut_tx
);

328 #i‡
LWIP_IGMP
 || (
LWIP_IPV6
 && 
LWIP_IPV6_MLD
)

329 
îr_t
 
√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
, c⁄° 
ù_addr_t
 *
mu…üddr
,

330 c⁄° 
ù_addr_t
 *
√tif_addr
, 
√tc⁄n_igmp
 
joö_‹_Àave
);

332 #i‡
LWIP_DNS


333 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


334 
îr_t
 
√tc⁄n_gëho°by«me_addπy≥
(c⁄° *
«me
, 
ù_addr_t
 *
addr
, 
u8_t
 
dns_addπy≥
);

335 
	#√tc⁄n_gëho°by«me
(
«me
, 
addr
Ë
	`√tc⁄n_gëho°by«me_addπy≥
“ame,áddr, 
NETCONN_DNS_DEFAULT
)

	)

337 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr_t
 *
addr
);

338 
	#√tc⁄n_gëho°by«me_addπy≥
(
«me
, 
addr
, 
dns_addπy≥
Ë
	`√tc⁄n_gëho°by«me
“ame,áddr)

	)

342 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
œ°_îr
)

	)

343 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

346 
	#√tc⁄n_£t_n⁄blockög
(
c⁄n
, 
vÆ
) do { if(val) { \

347 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NON_BLOCKING
; \

349 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NON_BLOCKING
; }} 0)

	)

351 
	#√tc⁄n_is_n⁄blockög
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NON_BLOCKING
Ë!0)

	)

353 #i‡
LWIP_IPV6


357 
	#√tc⁄n_£t_ùv6⁄ly
(
c⁄n
, 
vÆ
) do { if(val) { \

358 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_IPV6_V6ONLY
; \

360 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_IPV6_V6ONLY
; }} 0)

	)

364 
	#√tc⁄n_gë_ùv6⁄ly
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_IPV6_V6ONLY
Ë!0)

	)

367 #i‡
LWIP_SO_SNDTIMEO


369 
	#√tc⁄n_£t_£ndtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
£nd_timeout
 = (timeout))

	)

371 
	#√tc⁄n_gë_£ndtimeout
(
c⁄n
Ë((c⁄n)->
£nd_timeout
)

	)

373 #i‡
LWIP_SO_RCVTIMEO


375 
	#√tc⁄n_£t_ªcvtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
ªcv_timeout
 = (timeout))

	)

377 
	#√tc⁄n_gë_ªcvtimeout
(
c⁄n
Ë((c⁄n)->
ªcv_timeout
)

	)

379 #i‡
LWIP_SO_RCVBUF


381 
	#√tc⁄n_£t_ªcvbufsize
(
c⁄n
, 
ªcvbufsize
Ë((c⁄n)->
ªcv_bufsize
 = (ªcvbufsize))

	)

383 
	#√tc⁄n_gë_ªcvbufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

386 #i‡
LWIP_NETCONN_SEM_PER_THREAD


387 
√tc⁄n_thªad_öô
();

388 
√tc⁄n_thªad_˛ónup
();

390 
	#√tc⁄n_thªad_öô
()

	)

391 
	#√tc⁄n_thªad_˛ónup
()

	)

394 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/arch.h

37 #i‚de‡
LWIP_HDR_ARCH_H


38 
	#LWIP_HDR_ARCH_H


	)

39 
	~"asm/˝u.h
"

40 #i‚de‡
LITTLE_ENDIAN


41 
	#LITTLE_ENDIAN
 1234

	)

44 #i‚de‡
BIG_ENDIAN


45 
	#BIG_ENDIAN
 4321

	)

48 
	~"¨ch/cc.h
"

64 #i‚de‡
BYTE_ORDER


65 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

69 #ifde‡
__DOXYGEN__


70 
	#LWIP_RAND
(Ë((
u32_t
)
	`ønd
())

	)

78 #i‚de‡
LWIP_PLATFORM_DIAG


79 
	#LWIP_PLATFORM_DIAG
(
x
Ëdÿ{
¥ötf
 x;} 0)

	)

80 
	~<°dio.h
>

81 
	~<°dlib.h
>

89 #i‚de‡
LWIP_PLATFORM_ASSERT


90 
	#LWIP_PLATFORM_ASSERT
(
x
Ëdÿ{
	`¥ötf
("Assertion \"%s\" failedátÜine %d in %s\n", \

91 
x
, 
__LINE__
, 
__FILE__
); 
	`fÊush
(
NULL
); 
	`ab‹t
();} 0)

	)

92 
	~<°dio.h
>

93 
	~<°dlib.h
>

100 #i‚de‡
LWIP_NO_STDDEF_H


101 
	#LWIP_NO_STDDEF_H
 0

	)

104 #i‡!
LWIP_NO_STDDEF_H


105 
	~<°ddef.h
>

112 #i‚de‡
LWIP_NO_STDINT_H


113 
	#LWIP_NO_STDINT_H
 0

	)

117 #i‡!
LWIP_NO_STDINT_H


118 
	~<°döt.h
>

119 
uöt8_t
 
	tu8_t
;

120 
öt8_t
 
	ts8_t
;

121 
uöt16_t
 
	tu16_t
;

122 
öt16_t
 
	ts16_t
;

123 
uöt32_t
 
	tu32_t
;

124 
öt32_t
 
	ts32_t
;

125 
uöçå_t
 
	tmem_±r_t
;

132 #i‚de‡
LWIP_NO_INTTYPES_H


133 
	#LWIP_NO_INTTYPES_H
 0

	)

137 #i‡!
LWIP_NO_INTTYPES_H


138 
	~<öây≥s.h
>

139 #i‚de‡
X8_F


140 
	#X8_F
 "02" 
PRIx8


	)

142 #i‚de‡
U16_F


143 
	#U16_F
 
PRIu16


	)

145 #i‚de‡
S16_F


146 
	#S16_F
 
PRId16


	)

148 #i‚de‡
X16_F


149 
	#X16_F
 
PRIx16


	)

151 #i‚de‡
U32_F


152 
	#U32_F
 
PRIu32


	)

154 #i‚de‡
S32_F


155 
	#S32_F
 
PRId32


	)

157 #i‚de‡
X32_F


158 
	#X32_F
 
PRIx32


	)

160 #i‚de‡
SZT_F


161 
	#SZT_F
 
PRIuPTR


	)

169 #i‚de‡
LWIP_NO_LIMITS_H


170 
	#LWIP_NO_LIMITS_H
 0

	)

174 #i‡!
LWIP_NO_LIMITS_H


175 
	~<limôs.h
>

179 #i‚de‡
LWIP_CONST_CAST


180 
	#LWIP_CONST_CAST
(
èrgë_ty≥
, 
vÆ
Ë(—¨gë_ty≥)((
±rdiff_t
)vÆ))

	)

184 #i‚de‡
LWIP_ALIGNMENT_CAST


185 
	#LWIP_ALIGNMENT_CAST
(
èrgë_ty≥
, 
vÆ
Ë
	`LWIP_CONST_CAST
—¨gë_ty≥, vÆ)

	)

191 #i‚de‡
LWIP_PTR_NUMERIC_CAST


192 
	#LWIP_PTR_NUMERIC_CAST
(
èrgë_ty≥
, 
vÆ
Ë
	`LWIP_CONST_CAST
—¨gë_ty≥, vÆ)

	)

205 #i‚de‡
LWIP_DECLARE_MEMORY_ALIGNED


206 
	#LWIP_DECLARE_MEMORY_ALIGNED
(
v¨übÀ_«me
, 
size
Ë
u8_t
 v¨übÀ_«me[
	`LWIP_MEM_ALIGN_BUFFER
(size)]

	)

213 #i‚de‡
LWIP_MEM_ALIGN_SIZE


214 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1UË& ~(MEM_ALIGNMENT-1U))

	)

221 #i‚de‡
LWIP_MEM_ALIGN_BUFFER


222 
	#LWIP_MEM_ALIGN_BUFFER
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1U))

	)

228 #i‚de‡
LWIP_MEM_ALIGN


229 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

232 #ifde‡
__˝lu•lus


241 #i‚de‡
PACK_STRUCT_BEGIN


242 
	#PACK_STRUCT_BEGIN


	)

250 #i‚de‡
PACK_STRUCT_END


251 
	#PACK_STRUCT_END


	)

259 #i‚de‡
PACK_STRUCT_STRUCT


260 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)

261 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

263 
	#PACK_STRUCT_STRUCT


	)

272 #i‚de‡
PACK_STRUCT_FIELD


273 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

281 #i‚de‡
PACK_STRUCT_FLD_8


282 
	#PACK_STRUCT_FLD_8
(
x
Ë
	`PACK_STRUCT_FIELD
(x)

	)

290 #i‚de‡
PACK_STRUCT_FLD_S


291 
	#PACK_STRUCT_FLD_S
(
x
Ë
	`PACK_STRUCT_FIELD
(x)

	)

302 #ifde‡
__DOXYGEN__


303 
	#PACK_STRUCT_USE_INCLUDES


	)

307 #i‚de‡
LWIP_UNUSED_ARG


308 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

315 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/autoip.h

41 #i‚de‡
LWIP_HDR_AUTOIP_H


42 
	#LWIP_HDR_AUTOIP_H


	)

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_IPV4
 && 
LWIP_AUTOIP


48 
	~"lwù/√tif.h
"

50 
	~"lwù/ëh¨p.h
"

52 #ifde‡
__˝lu•lus


57 
	#AUTOIP_TMR_INTERVAL
 100

	)

58 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

61 
	sautoù
 {

63 
ù4_addr_t
 
Œùaddr
;

65 
u8_t
 
°©e
;

67 
u8_t
 
£¡_num
;

69 
u16_t
 
âw
;

71 
u8_t
 
œ°c⁄Êi˘
;

73 
u8_t
 
åõd_Œùaddr
;

77 
autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip);

79 
	#autoù_ªmove_°ru˘
(
√tif
Ëdÿ{ (√tif)->
autoù
 = 
NULL
; } 0)

	)

80 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

81 
îr_t
 
autoù_°›
(
√tif
 *netif);

82 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

83 
autoù_tmr
();

84 
autoù_√tw‹k_ch™ged
(
√tif
 *netif);

85 
u8_t
 
autoù_suµlõd_addªss
(c⁄° 
√tif
 *netif);

88 
u8_t
 
autoù_ac˚±_∑ckë
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
addr
);

90 
	#√tif_autoù_d©a
(
√tif
Ë((
autoù
*)
	`√tif_gë_˛õ¡_d©a
“ëif, 
LWIP_NETIF_CLIENT_DATA_INDEX_AUTOIP
))

	)

92 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/debug.h

37 #i‚de‡
LWIP_HDR_DEBUG_H


38 
	#LWIP_HDR_DEBUG_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/›t.h
"

53 
	#LWIP_DBG_LEVEL_ALL
 0x00

	)

55 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

57 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

59 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

64 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

66 
	#LWIP_DBG_LEVEL_OFF
 
LWIP_DBG_LEVEL_ALL


	)

72 
	#LWIP_DBG_ON
 0x80U

	)

74 
	#LWIP_DBG_OFF
 0x00U

	)

83 
	#LWIP_DBG_TRACE
 0x40U

	)

85 
	#LWIP_DBG_STATE
 0x20U

	)

87 
	#LWIP_DBG_FRESH
 0x10U

	)

89 
	#LWIP_DBG_HALT
 0x08U

	)

107 #ifde‡
__DOXYGEN__


108 
	#LWIP_NOASSERT


	)

109 #unde‡
LWIP_NOASSERT


115 #i‚de‡
LWIP_NOASSERT


116 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if (!(assertion)) { \

117 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); }} 0)

	)

118 #i‚de‡
LWIP_PLATFORM_ASSERT


122 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

125 #i‚de‡
LWIP_ERROR


126 #i‚de‡
LWIP_NOASSERT


127 
	#LWIP_PLATFORM_ERROR
(
mesßge
Ë
	`LWIP_PLATFORM_ASSERT
(mesßge)

	)

128 #ñi‡
deföed
 
LWIP_DEBUG


129 
	#LWIP_PLATFORM_ERROR
(
mesßge
Ë
	`LWIP_PLATFORM_DIAG
((mesßge))

	)

131 
	#LWIP_PLATFORM_ERROR
(
mesßge
)

	)

135 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

136 
	`LWIP_PLATFORM_ERROR
(
mesßge
); 
h™dÀr
;}} 0)

	)

142 #ifde‡
__DOXYGEN__


143 
	#LWIP_DEBUG


	)

144 #unde‡
LWIP_DEBUG


147 #ifde‡
LWIP_DEBUG


148 #i‚de‡
LWIP_PLATFORM_DIAG


151 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

153 ((
debug
Ë& 
LWIP_DBG_ON
) && \

154 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

155 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

156 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

157 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

161 } 0)

	)

164 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@include_lib/net/lwip/src/include/lwip/def.h

37 #i‚de‡
LWIP_HDR_DEF_H


38 
	#LWIP_HDR_DEF_H


	)

41 
	~"lwù/¨ch.h
"

42 
	~"lwù/›t.h
"

43 #i‡
LWIP_PERF


44 
	~"¨ch/≥rf.h
"

46 
	#PERF_START


	)

47 
	#PERF_STOP
(
x
Ë

	)

50 #ifde‡
__˝lu•lus


54 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

55 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

58 
	#LWIP_ARRAYSIZE
(
x
Ë((x)/((x)[0]))

	)

61 
	#LWIP_MAKEU32
(
a
,
b
,
c
,
d
Ë(((
u32_t
)((a) & 0xff) << 24) | \

62 ((
u32_t
)((
b
) & 0xff) << 16) | \

63 ((
u32_t
)((
c
) & 0xff) << 8) | \

64 (
u32_t
)((
d
Ë& 0xff))

	)

66 #i‚de‡
NULL


67 #ifde‡
__˝lu•lus


68 
	#NULL
 0

	)

70 
	#NULL
 ((*)0)

	)

74 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


75 
	#lwù_ht⁄s
(
x
Ë(x)

	)

76 
	#lwù_¡ohs
(
x
Ë(x)

	)

77 
	#lwù_ht⁄l
(
x
Ë(x)

	)

78 
	#lwù_¡ohl
(
x
Ë(x)

	)

79 
	#PP_HTONS
(
x
Ë(x)

	)

80 
	#PP_NTOHS
(
x
Ë(x)

	)

81 
	#PP_HTONL
(
x
Ë(x)

	)

82 
	#PP_NTOHL
(
x
Ë(x)

	)

84 #i‚de‡
lwù_ht⁄s


85 
u16_t
 
lwù_ht⁄s
(u16_à
x
);

87 
	#lwù_¡ohs
(
x
Ë
	`lwù_ht⁄s
(x)

	)

89 #i‚de‡
lwù_ht⁄l


90 
u32_t
 
lwù_ht⁄l
(u32_à
x
);

92 
	#lwù_¡ohl
(
x
Ë
	`lwù_ht⁄l
(x)

	)

97 
	#PP_HTONS
(
x
Ë((((xË& 0x00ffULË<< 8Ë| (((xË& 0xff00ULË>> 8))

	)

98 
	#PP_NTOHS
(
x
Ë
	`PP_HTONS
(x)

	)

99 
	#PP_HTONL
(
x
) ((((x) & 0x000000ffUL) << 24) | \

100 (((
x
) & 0x0000ff00UL) << 8) | \

101 (((
x
) & 0x00ff0000UL) >> 8) | \

102 (((
x
Ë& 0xff000000ULË>> 24))

	)

103 
	#PP_NTOHL
(
x
Ë
	`PP_HTONL
(x)

	)

107 #i‚de‡
LWIP_DONT_PROVIDE_BYTEORDER_FUNCTIONS


108 #unde‡
ht⁄s


109 #unde‡
¡ohs


110 #unde‡
ht⁄l


111 #unde‡
¡ohl


113 
	#ht⁄s
(
x
Ë
	`lwù_ht⁄s
(x)

	)

114 
	#¡ohs
(
x
Ë
	`lwù_¡ohs
(x)

	)

115 
	#ht⁄l
(
x
Ë
	`lwù_ht⁄l
(x)

	)

116 
	#¡ohl
(
x
Ë
	`lwù_¡ohl
(x)

	)

125 #i‚de‡
lwù_ôﬂ


127 
lwù_ôﬂ
(*
ªsu…
, 
size_t
 
bufsize
, 
numbî
);

129 #i‚de‡
lwù_°∫icmp


131 
lwù_°∫icmp
(c⁄° *
°r1
, c⁄° *
°r2
, 
size_t
 
Àn
);

133 #i‚de‡
lwù_°ricmp


135 
lwù_°ricmp
(c⁄° *
°r1
, c⁄° *
°r2
);

137 #i‚de‡
lwù_°∫°r


139 *
lwù_°∫°r
(c⁄° *
buf„r
, c⁄° *
tokí
, 
size_t
 
n
);

142 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/dhcp.h

38 #i‚de‡
LWIP_HDR_DHCP_H


39 
	#LWIP_HDR_DHCP_H


	)

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_DHCP


45 
	~"lwù/√tif.h
"

46 
	~"lwù/udp.h
"

48 #ifde‡
__˝lu•lus


53 
	#DHCP_COARSE_TIMER_SECS
 60

	)

55 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

57 
	#DHCP_FINE_TIMER_MSECS
 500

	)

59 
	#DHCP_BOOT_FILE_LEN
 128U

	)

63 
DHCP_AUTOIP_COOP_STATE_OFF
 = 0,

64 
DHCP_AUTOIP_COOP_STATE_ON
 = 1

65 } 
	tdh˝_autoù_co›_°©e_íum_t
;

67 
	sdh˝
 {

69 
u32_t
 
xid
;

71 
dh˝_msg
 *
msg_ö
;

73 
u8_t
 
pcb_Æloˇãd
;

75 
u8_t
 
°©e
;

77 
u8_t
 
åõs
;

78 #i‡
LWIP_DHCP_AUTOIP_COOP


79 
u8_t
 
autoù_co›_°©e
;

81 
u8_t
 
sub√t_mask_giví
;

83 
pbuf
 *
p_out
;

84 
dh˝_msg
 *
msg_out
;

85 
u16_t
 
›ti⁄s_out_Àn
;

86 
u16_t
 
ªque°_timeout
;

87 
u16_t
 
t1_timeout
;

88 
u16_t
 
t2_timeout
;

89 
u16_t
 
t1_ª√w_time
;

90 
u16_t
 
t2_ªböd_time
;

91 
u16_t
 
Àa£_u£d
;

92 
u16_t
 
t0_timeout
;

93 
ù_addr_t
 
£rvî_ù_addr
;

94 
ù4_addr_t
 
of„ªd_ù_addr
;

95 
ù4_addr_t
 
of„ªd_¢_mask
;

96 
ù4_addr_t
 
of„ªd_gw_addr
;

98 
u32_t
 
of„ªd_t0_Àa£
;

99 
u32_t
 
of„ªd_t1_ª√w
;

100 
u32_t
 
of„ªd_t2_ªböd
;

101 #i‡
LWIP_DHCP_BOOTP_FILE


102 
ù4_addr_t
 
of„ªd_si_addr
;

103 
boŸ_fûe_«me
[
DHCP_BOOT_FILE_LEN
];

108 
dh˝_£t_°ru˘
(
√tif
 *√tif, 
dh˝
 *dhcp);

110 
	#dh˝_ªmove_°ru˘
(
√tif
Ë
	`√tif_£t_˛õ¡_d©a
“ëif, 
LWIP_NETIF_CLIENT_DATA_INDEX_DHCP
, 
NULL
)

	)

111 
dh˝_˛ónup
(
√tif
 *netif);

112 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

113 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

114 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

115 
dh˝_°›
(
√tif
 *netif);

116 
dh˝_öf‹m
(
√tif
 *netif);

117 
dh˝_√tw‹k_ch™ged
(
√tif
 *netif);

118 #i‡
DHCP_DOES_ARP_CHECK


119 
dh˝_¨p_ª∂y
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
addr
);

121 
u8_t
 
dh˝_suµlõd_addªss
(c⁄° 
√tif
 *netif);

123 
dh˝_cﬂr£_tmr
();

125 
dh˝_föe_tmr
();

127 #i‡
LWIP_DHCP_GET_NTP_SRV


131 
dh˝_£t_¡p_£rvîs
(
u8_t
 
num_¡p_£rvîs
, c⁄° 
ù4_addr_t
 *
¡p_£rvî_addrs
);

134 
	#√tif_dh˝_d©a
(
√tif
Ë((
dh˝
*)
	`√tif_gë_˛õ¡_d©a
“ëif, 
LWIP_NETIF_CLIENT_DATA_INDEX_DHCP
))

	)

136 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/dhcp6.h

43 #i‚de‡
LWIP_HDR_IP6_DHCP6_H


44 
	#LWIP_HDR_IP6_DHCP6_H


	)

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_IPV6_DHCP6


51 
	sdh˝6
 {

	@include_lib/net/lwip/src/include/lwip/dns.h

39 #i‚de‡
LWIP_HDR_DNS_H


40 
	#LWIP_HDR_DNS_H


	)

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_DNS


46 
	~"lwù/ù_addr.h
"

48 #ifde‡
__˝lu•lus


53 
	#DNS_TMR_INTERVAL
 1000

	)

56 
	#LWIP_DNS_ADDRTYPE_IPV4
 0

	)

57 
	#LWIP_DNS_ADDRTYPE_IPV6
 1

	)

58 
	#LWIP_DNS_ADDRTYPE_IPV4_IPV6
 2

	)

59 
	#LWIP_DNS_ADDRTYPE_IPV6_IPV4
 3

	)

60 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


61 #i‚de‡
LWIP_DNS_ADDRTYPE_DEFAULT


62 
	#LWIP_DNS_ADDRTYPE_DEFAULT
 
LWIP_DNS_ADDRTYPE_IPV4_IPV6


	)

64 #ñi‡
LWIP_IPV4


65 
	#LWIP_DNS_ADDRTYPE_DEFAULT
 
LWIP_DNS_ADDRTYPE_IPV4


	)

67 
	#LWIP_DNS_ADDRTYPE_DEFAULT
 
LWIP_DNS_ADDRTYPE_IPV6


	)

70 #i‡
DNS_LOCAL_HOSTLIST


72 
	sloˇl_ho°li°_íåy
 {

74 c⁄° *
«me
;

76 
ù_addr_t
 
addr
;

77 
loˇl_ho°li°_íåy
 *
√xt
;

79 
	#DNS_LOCAL_HOSTLIST_ELEM
(
«me
, 
addr_öô
Ë{«me,áddr_öô, 
NULL
}

	)

80 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


81 #i‚de‡
DNS_LOCAL_HOSTLIST_MAX_NAMELEN


82 
	#DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 
DNS_MAX_NAME_LENGTH


	)

84 
	#LOCALHOSTLIST_ELEM_SIZE
 (((
loˇl_ho°li°_íåy
Ë+ 
DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 + 1))

	)

88 #i‡
LWIP_IPV4


89 c⁄° 
ù_addr_t
 
dns_mquîy_v4group
;

91 #i‡
LWIP_IPV6


92 c⁄° 
ù_addr_t
 
dns_mquîy_v6group
;

102 (*
	gdns_found_ˇŒback
)(c⁄° *
	t«me
, c⁄° 
	tù_addr_t
 *
	tùaddr
, *
	tˇŒback_¨g
);

104 
dns_öô
();

105 
dns_tmr
();

106 
dns_£t£rvî
(
u8_t
 
numdns
, c⁄° 
ù_addr_t
 *
dns£rvî
);

107 c⁄° 
ù_addr_t
 *
dns_gë£rvî
(
u8_t
 
numdns
);

108 
îr_t
 
dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
,

109 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

110 
îr_t
 
dns_gëho°by«me_addπy≥
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
,

111 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
,

112 
u8_t
 
dns_addπy≥
);

115 #i‡
DNS_LOCAL_HOSTLIST


116 
size_t
 
dns_loˇl_ôî©e
(
dns_found_ˇŒback
 
ôî©‹_‚
, *
ôî©‹_¨g
);

117 
îr_t
 
dns_loˇl_lookup
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
, 
u8_t
 
dns_addπy≥
);

118 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


119 
dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

120 
îr_t
 
dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

124 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/err.h

36 #i‚de‡
LWIP_HDR_ERR_H


37 
	#LWIP_HDR_ERR_H


	)

39 
	~"lwù/›t.h
"

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


54 #ifde‡
LWIP_ERR_T


55 
LWIP_ERR_T
 
	tîr_t
;

57 
s8_t
 
	tîr_t
;

63 
	gERR_OK
 = 0,

65 
	gERR_MEM
 = -1,

67 
	gERR_BUF
 = -2,

69 
	gERR_TIMEOUT
 = -3,

71 
	gERR_RTE
 = -4,

73 
	gERR_INPROGRESS
 = -5,

75 
	gERR_VAL
 = -6,

77 
	gERR_WOULDBLOCK
 = -7,

79 
	gERR_USE
 = -8,

81 
	gERR_ALREADY
 = -9,

83 
	gERR_ISCONN
 = -10,

85 
	gERR_CONN
 = -11,

87 
	gERR_IF
 = -12,

90 
	gERR_ABRT
 = -13,

92 
	gERR_RST
 = -14,

94 
	gERR_CLSD
 = -15,

96 
	gERR_ARG
 = -16

97 } 
	tîr_íum_t
;

99 
	#ERR_IS_FATAL
(
e
Ë(”Ë<
ERR_ABRT
)

	)

105 #ifde‡
LWIP_DEBUG


106 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

108 
	#lwù_°ªº
(
x
Ë""

	)

111 #i‡!
NO_SYS


112 
îr_to_î∫o
(
îr_t
 
îr
);

115 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/etharp.h

42 #i‚de‡
LWIP_HDR_NETIF_ETHARP_H


43 
	#LWIP_HDR_NETIF_ETHARP_H


	)

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


49 
	~"lwù/pbuf.h
"

50 
	~"lwù/ù4_addr.h
"

51 
	~"lwù/√tif.h
"

52 
	~"lwù/ù4.h
"

53 
	~"lwù/¥Ÿ/ëhî√t.h
"

55 #ifde‡
__˝lu•lus


59 #i‡
LWIP_IPV4
 && 
LWIP_ARP


61 
	~"lwù/¥Ÿ/ëh¨p.h
"

64 
	#ARP_TMR_INTERVAL
 1000

	)

66 #i‡
ARP_QUEUEING


70 
	sëh¨p_q_íåy
 {

71 
ëh¨p_q_íåy
 *
√xt
;

72 
pbuf
 *
p
;

76 
	#ëh¨p_öô
(Ë

	)

77 
ëh¨p_tmr
();

78 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
,

79 
ëh_addr
 **
ëh_ªt
, c⁄° 
ù4_addr_t
 **
ù_ªt
);

80 
u8_t
 
ëh¨p_gë_íåy
(u8_à
i
, 
ù4_addr_t
 **
ùaddr
, 
√tif
 **√tif, 
ëh_addr
 **
ëh_ªt
);

81 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, c⁄° 
ù4_addr_t
 *
ùaddr
);

82 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
, 
pbuf
 *
q
);

83 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
);

88 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), 
	`√tif_ù4_addr
“ëif))

	)

89 
ëh¨p_˛ónup_√tif
(
√tif
 *netif);

91 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


92 
îr_t
 
ëh¨p_add_°©ic_íåy
(c⁄° 
ù4_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
);

93 
îr_t
 
ëh¨p_ªmove_°©ic_íåy
(c⁄° 
ù4_addr_t
 *
ùaddr
);

98 
ëh¨p_öput
(
pbuf
 *
p
, 
√tif
 *netif);

100 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ethip6.h

42 #i‚de‡
LWIP_HDR_ETHIP6_H


43 
	#LWIP_HDR_ETHIP6_H


	)

45 
	~"lwù/›t.h
"

47 #i‡
LWIP_IPV6
 && 
LWIP_ETHERNET


49 
	~"lwù/pbuf.h
"

50 
	~"lwù/ù6.h
"

51 
	~"lwù/ù6_addr.h
"

52 
	~"lwù/√tif.h
"

55 #ifde‡
__˝lu•lus


60 
îr_t
 
ëhù6_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, c⁄° 
ù6_addr_t
 *
ù6addr
);

62 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/icmp.h

37 #i‚de‡
LWIP_HDR_ICMP_H


38 
	#LWIP_HDR_ICMP_H


	)

40 
	~"lwù/›t.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù_addr.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/¥Ÿ/icmp.h
"

46 #i‡
LWIP_IPV6
 && 
LWIP_ICMP6


47 
	~"lwù/icmp6.h
"

50 #ifde‡
__˝lu•lus


55 
	eicmp_dur_ty≥
 {

57 
ICMP_DUR_NET
 = 0,

59 
ICMP_DUR_HOST
 = 1,

61 
ICMP_DUR_PROTO
 = 2,

63 
ICMP_DUR_PORT
 = 3,

65 
ICMP_DUR_FRAG
 = 4,

67 
ICMP_DUR_SR
 = 5

71 
	eicmp_ã_ty≥
 {

73 
ICMP_TE_TTL
 = 0,

75 
ICMP_TE_FRAG
 = 1

78 #i‡
LWIP_IPV4
 && 
LWIP_ICMP


80 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

81 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

82 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

86 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


87 #i‡
LWIP_ICMP
 && 
LWIP_ICMP6


88 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
) ((isipv6) ? \

89 
	`icmp6_de°_uƒóch
(
pbuf
, 
ICMP6_DUR_PORT
) : \

90 
	`icmp_de°_uƒóch
(
pbuf
, 
ICMP_DUR_PORT
))

	)

91 #ñi‡
LWIP_ICMP


92 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
Ëdo{ if(!(isùv6)Ë{ 
	`icmp_de°_uƒóch
’buf, 
ICMP_DUR_PORT
);}}0)

	)

93 #ñi‡
LWIP_ICMP6


94 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
Ëdo{ if(isùv6Ë{ 
	`icmp6_de°_uƒóch
’buf, 
ICMP6_DUR_PORT
);}}0)

	)

96 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
)

	)

98 #ñi‡
LWIP_IPV6
 && 
LWIP_ICMP6


99 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
Ë
	`icmp6_de°_uƒóch
’buf, 
ICMP6_DUR_PORT
)

	)

100 #ñi‡
LWIP_IPV4
 && 
LWIP_ICMP


101 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
Ë
	`icmp_de°_uƒóch
’buf, 
ICMP_DUR_PORT
)

	)

103 
	#icmp_p‹t_uƒóch
(
isùv6
, 
pbuf
)

	)

106 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/icmp6.h

41 #i‚de‡
LWIP_HDR_ICMP6_H


42 
	#LWIP_HDR_ICMP6_H


	)

44 
	~"lwù/›t.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù6_addr.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/¥Ÿ/icmp6.h
"

50 #ifde‡
__˝lu•lus


54 #i‡
LWIP_ICMP6
 && 
LWIP_IPV6


56 
icmp6_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

57 
icmp6_de°_uƒóch
(
pbuf
 *
p
, 
icmp6_dur_code
 
c
);

58 
icmp6_∑ckë_too_big
(
pbuf
 *
p
, 
u32_t
 
mtu
);

59 
icmp6_time_ex˚eded
(
pbuf
 *
p
, 
icmp6_ã_code
 
c
);

60 
icmp6_∑øm_¥obÀm
(
pbuf
 *
p
, 
icmp6_µ_code
 
c
, 
u32_t
 
poöãr
);

65 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/igmp.h

40 #i‚de‡
LWIP_HDR_IGMP_H


41 
	#LWIP_HDR_IGMP_H


	)

43 
	~"lwù/›t.h
"

44 
	~"lwù/ù_addr.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/pbuf.h
"

48 #i‡
LWIP_IPV4
 && 
LWIP_IGMP


50 #ifde‡
__˝lu•lus


55 
	#IGMP_TMR_INTERVAL
 100

	)

56 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

57 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

60 
	#IGMP_DEL_MAC_FILTER
 
NETIF_DEL_MAC_FILTER


	)

61 
	#IGMP_ADD_MAC_FILTER
 
NETIF_ADD_MAC_FILTER


	)

74 
	sigmp_group
 {

76 
igmp_group
 *
√xt
;

78 
ù4_addr_t
 
group_addªss
;

80 
u8_t
 
œ°_ªp‹ãr_Êag
;

82 
u8_t
 
group_°©e
;

84 
u16_t
 
timî
;

86 
u8_t
 
u£
;

90 
igmp_öô
();

91 
îr_t
 
igmp_°¨t
(
√tif
 *netif);

92 
îr_t
 
igmp_°›
(
√tif
 *netif);

93 
igmp_ªp‹t_groups
(
√tif
 *netif);

94 
igmp_group
 *
igmp_lookf‹_group
(
√tif
 *
iÂ
, c⁄° 
ù4_addr_t
 *
addr
);

95 
igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, c⁄° 
ù4_addr_t
 *
de°
);

96 
îr_t
 
igmp_joögroup
(c⁄° 
ù4_addr_t
 *
iÁddr
, c⁄° ip4_addr_à*
grou∑ddr
);

97 
îr_t
 
igmp_joögroup_√tif
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
grou∑ddr
);

98 
îr_t
 
igmp_Àavegroup
(c⁄° 
ù4_addr_t
 *
iÁddr
, c⁄° ip4_addr_à*
grou∑ddr
);

99 
îr_t
 
igmp_Àavegroup_√tif
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
grou∑ddr
);

100 
igmp_tmr
();

107 
	#√tif_igmp_d©a
(
√tif
Ë((
igmp_group
 *)
	`√tif_gë_˛õ¡_d©a
“ëif, 
LWIP_NETIF_CLIENT_DATA_INDEX_IGMP
))

	)

109 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/inet.h

40 #i‚de‡
LWIP_HDR_INET_H


41 
	#LWIP_HDR_INET_H


	)

43 
	~"lwù/›t.h
"

44 
	~"lwù/def.h
"

45 
	~"lwù/ù_addr.h
"

46 
	~"lwù/ù6_addr.h
"

48 #ifde‡
__˝lu•lus


54 #i‡!
deföed
(
ö_addr_t
Ë&& !deföed(
IN_ADDR_T_DEFINED
)

55 
u32_t
 
	tö_addr_t
;

58 
	sö_addr
 {

59 
ö_addr_t
 
	gs_addr
;

62 
	sö6_addr
 {

64 
u32_t
 
	gu32_addr
[4];

65 
u8_t
 
	gu8_addr
[16];

66 } 
	gun
;

67 
	#s6_addr
 
un
.
u8_addr


	)

71 
	#INADDR_NONE
 
IPADDR_NONE


	)

73 
	#INADDR_LOOPBACK
 
IPADDR_LOOPBACK


	)

75 
	#INADDR_ANY
 
IPADDR_ANY


	)

77 
	#INADDR_BROADCAST
 
IPADDR_BROADCAST


	)

81 
	#IN6ADDR_ANY_INIT
 {{{0,0,0,0}}}

	)

84 
	#IN6ADDR_LOOPBACK_INIT
 {{{0,0,0,
	`PP_HTONL
(1)}}}

	)

86 c⁄° 
ö6_addr
 
ö6addr_™y
;

92 
	#IN_CLASSA
(
a
Ë
	`IP_CLASSA
◊)

	)

93 
	#IN_CLASSA_NET
 
IP_CLASSA_NET


	)

94 
	#IN_CLASSA_NSHIFT
 
IP_CLASSA_NSHIFT


	)

95 
	#IN_CLASSA_HOST
 
IP_CLASSA_HOST


	)

96 
	#IN_CLASSA_MAX
 
IP_CLASSA_MAX


	)

98 
	#IN_CLASSB
(
b
Ë
	`IP_CLASSB
(b)

	)

99 
	#IN_CLASSB_NET
 
IP_CLASSB_NET


	)

100 
	#IN_CLASSB_NSHIFT
 
IP_CLASSB_NSHIFT


	)

101 
	#IN_CLASSB_HOST
 
IP_CLASSB_HOST


	)

102 
	#IN_CLASSB_MAX
 
IP_CLASSB_MAX


	)

104 
	#IN_CLASSC
(
c
Ë
	`IP_CLASSC
(c)

	)

105 
	#IN_CLASSC_NET
 
IP_CLASSC_NET


	)

106 
	#IN_CLASSC_NSHIFT
 
IP_CLASSC_NSHIFT


	)

107 
	#IN_CLASSC_HOST
 
IP_CLASSC_HOST


	)

108 
	#IN_CLASSC_MAX
 
IP_CLASSC_MAX


	)

110 
	#IN_CLASSD
(
d
Ë
	`IP_CLASSD
(d)

	)

111 
	#IN_CLASSD_NET
 
IP_CLASSD_NET


	)

112 
	#IN_CLASSD_NSHIFT
 
IP_CLASSD_NSHIFT


	)

113 
	#IN_CLASSD_HOST
 
IP_CLASSD_HOST


	)

114 
	#IN_CLASSD_MAX
 
IP_CLASSD_MAX


	)

116 
	#IN_MULTICAST
(
a
Ë
	`IP_MULTICAST
◊)

	)

118 
	#IN_EXPERIMENTAL
(
a
Ë
	`IP_EXPERIMENTAL
◊)

	)

119 
	#IN_BADCLASS
(
a
Ë
	`IP_BADCLASS
◊)

	)

121 
	#IN_LOOPBACKNET
 
IP_LOOPBACKNET


	)

124 #i‚de‡
INET_ADDRSTRLEN


125 
	#INET_ADDRSTRLEN
 
IP4ADDR_STRLEN_MAX


	)

127 #i‡
LWIP_IPV6


128 #i‚de‡
INET6_ADDRSTRLEN


129 
	#INET6_ADDRSTRLEN
 
IP6ADDR_STRLEN_MAX


	)

133 #i‡
LWIP_IPV4


135 
	#öë_addr_‰om_ù4addr
(
èrgë_öaddr
, 
sour˚_ùaddr
Ë(—¨gë_öaddr)->
s_addr
 = 
	`ù4_addr_gë_u32
(sour˚_ùaddr))

	)

136 
	#öë_addr_to_ù4addr
(
èrgë_ùaddr
, 
sour˚_öaddr
Ë(
	`ù4_addr_£t_u32
—¨gë_ùaddr, (sour˚_öaddr)->
s_addr
))

	)

138 
	#öë_addr_to_ù4addr_p
(
èrgë_ù4addr_p
, 
sour˚_öaddr
Ë(—¨gë_ù4addr_pË(
ù4_addr_t
*)&((sour˚_öaddr)->
s_addr
))

	)

141 
	#öë_addr
(
˝
Ë
	`ùaddr_addr
(˝)

	)

142 
	#öë_©⁄
(
˝
, 
addr
Ë
	`ù4addr_©⁄
(˝, (
ù4_addr_t
*Ôddr)

	)

143 
	#öë_¡ﬂ
(
addr
Ë
	`ù4addr_¡ﬂ
((c⁄° 
ù4_addr_t
*)&◊ddr))

	)

144 
	#öë_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë
	`ù4addr_¡ﬂ_r
((c⁄° 
ù4_addr_t
*)&◊ddr), buf, buÊí)

	)

148 #i‡
LWIP_IPV6


149 
	#öë6_addr_‰om_ù6addr
(
èrgë_ö6addr
, 
sour˚_ù6addr
Ë{—¨gë_ö6addr)->
un
.
u32_addr
[0] = (sour˚_ù6addr)->
addr
[0]; \

150 (
èrgë_ö6addr
)->
un
.
u32_addr
[1] = (
sour˚_ù6addr
)->
addr
[1]; \

151 (
èrgë_ö6addr
)->
un
.
u32_addr
[2] = (
sour˚_ù6addr
)->
addr
[2]; \

152 (
èrgë_ö6addr
)->
un
.
u32_addr
[3] = (
sour˚_ù6addr
)->
addr
[3];}

	)

153 
	#öë6_addr_to_ù6addr
(
èrgë_ù6addr
, 
sour˚_ö6addr
Ë{—¨gë_ù6addr)->
addr
[0] = (sour˚_ö6addr)->
un
.
u32_addr
[0]; \

154 (
èrgë_ù6addr
)->
addr
[1] = (
sour˚_ö6addr
)->
un
.
u32_addr
[1]; \

155 (
èrgë_ù6addr
)->
addr
[2] = (
sour˚_ö6addr
)->
un
.
u32_addr
[2]; \

156 (
èrgë_ù6addr
)->
addr
[3] = (
sour˚_ö6addr
)->
un
.
u32_addr
[3];}

	)

158 
	#öë6_addr_to_ù6addr_p
(
èrgë_ù6addr_p
, 
sour˚_ö6addr
Ë(—¨gë_ù6addr_pË(
ù6_addr_t
*)(sour˚_ö6addr))

	)

161 
	#öë6_©⁄
(
˝
, 
addr
Ë
	`ù6addr_©⁄
(˝, (
ù6_addr_t
*Ôddr)

	)

162 
	#öë6_¡ﬂ
(
addr
Ë
	`ù6addr_¡ﬂ
((c⁄° 
ù6_addr_t
*)&◊ddr))

	)

163 
	#öë6_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë
	`ù6addr_¡ﬂ_r
((c⁄° 
ù6_addr_t
*)&◊ddr), buf, buÊí)

	)

168 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/inet_chksum.h

37 #i‚de‡
LWIP_HDR_INET_CHKSUM_H


38 
	#LWIP_HDR_INET_CHKSUM_H


	)

40 
	~"lwù/›t.h
"

42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

46 #i‚de‡
SWAP_BYTES_IN_WORD


47 
	#SWAP_BYTES_IN_WORD
(
w
Ë(((wË& 0xffË<< 8Ë| (((wË& 0xff00Ë>> 8)

	)

51 #i‚de‡
FOLD_U32T


52 
	#FOLD_U32T
(
u
Ë(((uË>> 16Ë+ ((uË& 0x0000ffffUL))

	)

55 #i‡
LWIP_CHECKSUM_ON_COPY


58 #i‚de‡
LWIP_CHKSUM_COPY


59 
	#LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
Ë
	`lwù_chksum_c›y
(d°, src,Üí)

	)

60 #i‚de‡
LWIP_CHKSUM_COPY_ALGORITHM


61 
	#LWIP_CHKSUM_COPY_ALGORITHM
 1

	)

64 
	#LWIP_CHKSUM_COPY_ALGORITHM
 0

	)

67 
	#LWIP_CHKSUM_COPY_ALGORITHM
 0

	)

70 #ifde‡
__˝lu•lus


74 
u16_t
 
öë_chksum
(c⁄° *
d©≠å
, u16_à
Àn
);

75 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

76 #i‡
LWIP_CHKSUM_COPY_ALGORITHM


77 
u16_t
 
lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, u16_à
Àn
);

80 #i‡
LWIP_IPV4


81 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
, u16_à
¥Ÿo_Àn
,

82 c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
);

83 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
,

84 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
);

87 #i‡
LWIP_IPV6


88 
u16_t
 
ù6_chksum_p£udo
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
, u16_à
¥Ÿo_Àn
,

89 c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
);

90 
u16_t
 
ù6_chksum_p£udo_∑πül
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
, u16_à
¥Ÿo_Àn
,

91 
u16_t
 
chksum_Àn
, c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
);

95 
u16_t
 
ù_chksum_p£udo
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
, u16_à
¥Ÿo_Àn
,

96 c⁄° 
ù_addr_t
 *
§c
, c⁄° ip_addr_à*
de°
);

97 
u16_t
 
ù_chksum_p£udo_∑πül
(
pbuf
 *
p
, 
u8_t
 
¥Ÿo
, u16_à
¥Ÿo_Àn
,

98 
u16_t
 
chksum_Àn
, c⁄° 
ù_addr_t
 *
§c
, c⁄° ip_addr_à*
de°
);

100 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/init.h

37 #i‚de‡
LWIP_HDR_INIT_H


38 
	#LWIP_HDR_INIT_H


	)

40 
	~"lwù/›t.h
"

42 #ifde‡
__˝lu•lus


53 
	#LWIP_VERSION_MAJOR
 2

	)

55 
	#LWIP_VERSION_MINOR
 0

	)

57 
	#LWIP_VERSION_REVISION
 3

	)

61 
	#LWIP_VERSION_RC
 
LWIP_RC_RELEASE


	)

64 
	#LWIP_RC_RELEASE
 255

	)

66 
	#LWIP_RC_DEVELOPMENT
 0

	)

68 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

69 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

70 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

73 
	#LWIP_VERSTR2
(
x
Ë#x

	)

74 
	#LWIP_VERSTR
(
x
Ë
	`LWIP_VERSTR2
(x)

	)

75 #i‡
LWIP_VERSION_IS_RELEASE


76 
	#LWIP_VERSION_STRING_SUFFIX
 ""

	)

77 #ñi‡
LWIP_VERSION_IS_DEVELOPMENT


78 
	#LWIP_VERSION_STRING_SUFFIX
 "d"

	)

80 
	#LWIP_VERSION_STRING_SUFFIX
 "rc" 
	`LWIP_VERSTR
(
LWIP_VERSION_RC
)

	)

84 
	#LWIP_VERSION
 (((
u32_t
)
LWIP_VERSION_MAJOR
Ë<< 24 | ((u32_t)
LWIP_VERSION_MINOR
) << 16 | \

85 ((
u32_t
)
LWIP_VERSION_REVISION
Ë<< 8 | ((u32_t)
LWIP_VERSION_RC
))

	)

87 
	#LWIP_VERSION_STRING
 
	`LWIP_VERSTR
(
LWIP_VERSION_MAJOR
Ë"." LWIP_VERSTR(
LWIP_VERSION_MINOR
Ë"." LWIP_VERSTR(
LWIP_VERSION_REVISION
Ë
LWIP_VERSION_STRING_SUFFIX


	)

94 
lwù_öô
();

96 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip.h

37 #i‚de‡
LWIP_HDR_IP_H


38 
	#LWIP_HDR_IP_H


	)

40 
	~"lwù/›t.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/pbuf.h
"

44 
	~"lwù/ù_addr.h
"

45 
	~"lwù/îr.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/ù4.h
"

48 
	~"lwù/ù6.h
"

49 
	~"lwù/¥Ÿ/ù.h
"

51 #ifde‡
__˝lu•lus


58 
	#LWIP_IP_HDRINCL
 
NULL


	)

62 #i‚de‡
LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX


63 
	#LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX
(
p
Ë
	`LWIP_ASSERT
("p->ª‡=1", (p)->
ªf
 =1)

	)

66 #i‡
LWIP_NETIF_HWADDRHINT


67 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

69 
	#IP_PCB_ADDRHINT


	)

76 
	#IP_PCB
 \

78 
ù_addr_t
 
loˇl_ù
; \

79 
ù_addr_t
 
ªmŸe_ù
; \

81 
u8_t
 
so_›ti⁄s
; \

83 
u8_t
 
tos
; \

85 
u8_t
 
âl
 \

87 
IP_PCB_ADDRHINT


	)

89 
	sù_pcb
 {

91 
IP_PCB
;

97 
	#SOF_REUSEADDR
 0x04U

	)

98 
	#SOF_KEEPALIVE
 0x08U

	)

99 
	#SOF_BROADCAST
 0x20U

	)

102 
	#SOF_INHERITED
 (
SOF_REUSEADDR
|
SOF_KEEPALIVE
)

	)

105 
	sù_globÆs
 {

107 
√tif
 *
cuºít_√tif
;

109 
√tif
 *
cuºít_öput_√tif
;

110 #i‡
LWIP_IPV4


112 
ù_hdr
 *
cuºít_ù4_hódî
;

114 #i‡
LWIP_IPV6


116 
ù6_hdr
 *
cuºít_ù6_hódî
;

119 
u16_t
 
cuºít_ù_hódî_tŸ_Àn
;

121 
ù_addr_t
 
cuºít_ùhdr_§c
;

123 
ù_addr_t
 
cuºít_ùhdr_de°
;

125 
ù_globÆs
 
ù_d©a
;

132 
	#ù_cuºít_√tif
(Ë(
ù_d©a
.
cuºít_√tif
)

	)

136 
	#ù_cuºít_öput_√tif
(Ë(
ù_d©a
.
cuºít_öput_√tif
)

	)

138 
	#ù_cuºít_hódî_tŸ_Àn
(Ë(
ù_d©a
.
cuºít_ù_hódî_tŸ_Àn
)

	)

140 
	#ù_cuºít_§c_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_§c
)

	)

142 
	#ù_cuºít_de°_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_de°
)

	)

144 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


148 
	#ù4_cuºít_hódî
(Ë((c⁄° 
ù_hdr
*)(
ù_d©a
.
cuºít_ù4_hódî
))

	)

152 
	#ù6_cuºít_hódî
(Ë((c⁄° 
ù6_hdr
*)(
ù_d©a
.
cuºít_ù6_hódî
))

	)

154 
	#ù_cuºít_is_v6
(Ë(
	`ù6_cuºít_hódî
(Ë!
NULL
)

	)

156 
	#ù6_cuºít_§c_addr
(Ë(
	`ù_2_ù6
(&
ù_d©a
.
cuºít_ùhdr_§c
))

	)

158 
	#ù6_cuºít_de°_addr
(Ë(
	`ù_2_ù6
(&
ù_d©a
.
cuºít_ùhdr_de°
))

	)

160 
	#ù_cuºít_hódî_¥Ÿo
(Ë(
	`ù_cuºít_is_v6
() ? \

161 
	`IP6H_NEXTH
(
	`ù6_cuºít_hódî
()) :\

162 
	`IPH_PROTO
(
	`ù4_cuºít_hódî
()))

	)

164 
	#ù_√xt_hódî_±r
(Ë((c⁄° *)((
	`ù_cuºít_is_v6
() ? \

165 (c⁄° 
u8_t
*)
	`ù6_cuºít_hódî
(Ë: (c⁄° u8_t*)
	`ù4_cuºít_hódî
()Ë+ 
	`ù_cuºít_hódî_tŸ_Àn
()))

	)

168 
	#ù4_cuºít_§c_addr
(Ë(
	`ù_2_ù4
(&
ù_d©a
.
cuºít_ùhdr_§c
))

	)

170 
	#ù4_cuºít_de°_addr
(Ë(
	`ù_2_ù4
(&
ù_d©a
.
cuºít_ùhdr_de°
))

	)

172 #ñi‡
LWIP_IPV4


177 
	#ù4_cuºít_hódî
(Ë((c⁄° 
ù_hdr
*)(
ù_d©a
.
cuºít_ù4_hódî
))

	)

179 
	#ù_cuºít_is_v6
(Ë0

	)

181 
	#ù_cuºít_hódî_¥Ÿo
(Ë
	`IPH_PROTO
(
	`ù4_cuºít_hódî
())

	)

183 
	#ù_√xt_hódî_±r
(Ë((c⁄° *)((c⁄° 
u8_t
*)
	`ù4_cuºít_hódî
(Ë+ 
	`ù_cuºít_hódî_tŸ_Àn
()))

	)

185 
	#ù4_cuºít_§c_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_§c
)

	)

187 
	#ù4_cuºít_de°_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_de°
)

	)

189 #ñi‡
LWIP_IPV6


194 
	#ù6_cuºít_hódî
(Ë((c⁄° 
ù6_hdr
*)(
ù_d©a
.
cuºít_ù6_hódî
))

	)

196 
	#ù_cuºít_is_v6
(Ë1

	)

198 
	#ù_cuºít_hódî_¥Ÿo
(Ë
	`IP6H_NEXTH
(
	`ù6_cuºít_hódî
())

	)

200 
	#ù_√xt_hódî_±r
(Ë((c⁄° *)((c⁄° 
u8_t
*)
	`ù6_cuºít_hódî
()))

	)

202 
	#ù6_cuºít_§c_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_§c
)

	)

204 
	#ù6_cuºít_de°_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_de°
)

	)

209 
	#ù_cuºít_§c_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_§c
)

	)

211 
	#ù_cuºít_de°_addr
(Ë(&
ù_d©a
.
cuºít_ùhdr_de°
)

	)

214 
	#ù_gë_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 & (›t))

	)

216 
	#ù_£t_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 |(›t))

	)

218 
	#ù_ª£t_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 &~(›t))

	)

220 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


225 
	#ù_ouçut
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
) \

226 (
	`IP_IS_V6
(
de°
) ? \

227 
	`ù6_ouçut
(
p
, 
	`ù_2_ù6
(
§c
), ip_2_ù6(
de°
), 
âl
, 
tos
, 
¥Ÿo
) : \

228 
	`ù4_ouçut
(
p
, 
	`ù_2_ù4
(
§c
), ip_2_ù4(
de°
), 
âl
, 
tos
, 
¥Ÿo
))

	)

233 
	#ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

234 (
	`IP_IS_V6
(
de°
) ? \

235 
	`ù6_ouçut_if
(
p
, 
	`ù_2_ù6
(
§c
), ip_2_ù6(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) : \

236 
	`ù4_ouçut_if
(
p
, 
	`ù_2_ù4
(
§c
), ip_2_ù4(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
√tif
))

	)

241 
	#ù_ouçut_if_§c
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

242 (
	`IP_IS_V6
(
de°
) ? \

243 
	`ù6_ouçut_if_§c
(
p
, 
	`ù_2_ù6
(
§c
), ip_2_ù6(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) : \

244 
	`ù4_ouçut_if_§c
(
p
, 
	`ù_2_ù4
(
§c
), ip_2_ù4(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
√tif
))

	)

246 
	#ù_ouçut_höãd
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
) \

247 (
	`IP_IS_V6
(
de°
) ? \

248 
	`ù6_ouçut_höãd
(
p
, 
	`ù_2_ù6
(
§c
), ip_2_ù6(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
) : \

249 
	`ù4_ouçut_höãd
(
p
, 
	`ù_2_ù4
(
§c
), ip_2_ù4(
de°
), 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
))

	)

254 
	#ù_rouã
(
§c
, 
de°
) \

255 (
	`IP_IS_V6
(
de°
) ? \

256 
	`ù6_rouã
(
	`ù_2_ù6
(
§c
), ip_2_ù6(
de°
)) : \

257 
	`ù4_rouã_§c
(
	`ù_2_ù4
(
de°
), ip_2_ù4(
§c
)))

	)

262 
	#ù_√tif_gë_loˇl_ù
(
√tif
, 
de°
Ë(
	`IP_IS_V6
(dest) ? \

263 
	`ù6_√tif_gë_loˇl_ù
(
√tif
, 
	`ù_2_ù6
(
de°
)) : \

264 
	`ù4_√tif_gë_loˇl_ù
(
√tif
))

	)

265 
	#ù_debug_¥öt
(
is_ùv6
, 
p
Ë((is_ùv6Ë? 
	`ù6_debug_¥öt
’Ë: 
	`ù4_debug_¥öt
’))

	)

267 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

269 #ñi‡
LWIP_IPV4


271 
	#ù_ouçut
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
) \

272 
	`ù4_ouçut
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
)

	)

273 
	#ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

274 
	`ù4_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
)

	)

275 
	#ù_ouçut_if_§c
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

276 
	`ù4_ouçut_if_§c
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
)

	)

277 
	#ù_ouçut_höãd
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
) \

278 
	`ù4_ouçut_höãd
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
)

	)

279 
	#ù_rouã
(
§c
, 
de°
) \

280 
	`ù4_rouã_§c
(
de°
, 
§c
)

	)

281 
	#ù_√tif_gë_loˇl_ù
(
√tif
, 
de°
) \

282 
	`ù4_√tif_gë_loˇl_ù
(
√tif
)

	)

283 
	#ù_debug_¥öt
(
is_ùv6
, 
p
Ë
	`ù4_debug_¥öt
’)

	)

285 
	#ù_öput
 
ù4_öput


	)

287 #ñi‡
LWIP_IPV6


289 
	#ù_ouçut
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
) \

290 
	`ù6_ouçut
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
)

	)

291 
	#ù_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

292 
	`ù6_ouçut_if
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
)

	)

293 
	#ù_ouçut_if_§c
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
) \

294 
	`ù6_ouçut_if_§c
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
√tif
)

	)

295 
	#ù_ouçut_höãd
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
) \

296 
	`ù6_ouçut_höãd
(
p
, 
§c
, 
de°
, 
âl
, 
tos
, 
¥Ÿo
, 
addr_höt
)

	)

297 
	#ù_rouã
(
§c
, 
de°
) \

298 
	`ù6_rouã
(
§c
, 
de°
)

	)

299 
	#ù_√tif_gë_loˇl_ù
(
√tif
, 
de°
) \

300 
	`ù6_√tif_gë_loˇl_ù
(
√tif
, 
de°
)

	)

301 
	#ù_debug_¥öt
(
is_ùv6
, 
p
Ë
	`ù6_debug_¥öt
’)

	)

303 
	#ù_öput
 
ù6_öput


	)

307 
	#ù_rouã_gë_loˇl_ù
(
§c
, 
de°
, 
√tif
, 
ùaddr
) do { \

308 (
√tif
Ë
	`ù_rouã
(
§c
, 
de°
); \

309 (
ùaddr
Ë
	`ù_√tif_gë_loˇl_ù
(
√tif
, 
de°
); \

310 }0)

	)

312 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip4.h

37 #i‚de‡
LWIP_HDR_IP4_H


38 
	#LWIP_HDR_IP4_H


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_IPV4


44 
	~"lwù/def.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù4_addr.h
"

47 
	~"lwù/îr.h
"

48 
	~"lwù/√tif.h
"

49 
	~"lwù/¥Ÿ/ù4.h
"

51 #ifde‡
__˝lu•lus


55 #ifde‡
LWIP_HOOK_IP4_ROUTE_SRC


56 
	#LWIP_IPV4_SRC_ROUTING
 1

	)

58 
	#LWIP_IPV4_SRC_ROUTING
 0

	)

62 
	#IP_OPTIONS_SEND
 (
LWIP_IPV4
 && 
LWIP_IGMP
)

	)

64 
	#ù_öô
(Ë

	)

65 
√tif
 *
ù4_rouã
(c⁄° 
ù4_addr_t
 *
de°
);

66 #i‡
LWIP_IPV4_SRC_ROUTING


67 
√tif
 *
ù4_rouã_§c
(c⁄° 
ù4_addr_t
 *
de°
, c⁄° ip4_addr_à*
§c
);

69 
	#ù4_rouã_§c
(
de°
, 
§c
Ë
	`ù4_rouã
(de°)

	)

71 
îr_t
 
ù4_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

72 
îr_t
 
ù4_ouçut
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

73 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

74 
îr_t
 
ù4_ouçut_if
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

75 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *netif);

76 
îr_t
 
ù4_ouçut_if_§c
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

77 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *netif);

78 #i‡
LWIP_NETIF_HWADDRHINT


79 
îr_t
 
ù4_ouçut_höãd
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

80 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

82 #i‡
IP_OPTIONS_SEND


83 
îr_t
 
ù4_ouçut_if_›t
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

84 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

85 
u16_t
 
›éí
);

86 
îr_t
 
ù4_ouçut_if_›t_§c
(
pbuf
 *
p
, c⁄° 
ù4_addr_t
 *
§c
, c⁄° ip4_addr_à*
de°
,

87 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

88 
u16_t
 
›éí
);

91 #i‡
LWIP_MULTICAST_TX_OPTIONS


92 
ù4_£t_deÁu…_mu…iˇ°_√tif
(
√tif
 *
deÁu…_mu…iˇ°_√tif
);

95 
	#ù4_√tif_gë_loˇl_ù
(
√tif
Ë((“ëifË!
NULL
Ë? 
	`√tif_ù_addr4
“ëifË: NULL)

	)

97 #i‡
IP_DEBUG


98 
ù4_debug_¥öt
(
pbuf
 *
p
);

100 
	#ù4_debug_¥öt
(
p
)

	)

103 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip4_addr.h

37 #i‚de‡
LWIP_HDR_IP4_ADDR_H


38 
	#LWIP_HDR_IP4_ADDR_H


	)

40 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

43 #i‡
LWIP_IPV4


45 #ifde‡
__˝lu•lus


51 
	sù4_addr
 {

52 
u32_t
 
addr
;

57 
ù4_addr
 
	tù4_addr_t
;

63 #ifde‡
PACK_STRUCT_USE_INCLUDES


64 
	~"¨ch/bp°ru˘.h
"

66 
PACK_STRUCT_BEGIN


67 
	sù4_addr2
 {

68 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

69 } 
PACK_STRUCT_STRUCT
;

70 
PACK_STRUCT_END


71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/ï°ru˘.h
"

76 
√tif
;

79 
	#IPADDR_NONE
 ((
u32_t
)0xffffffffUL)

	)

81 
	#IPADDR_LOOPBACK
 ((
u32_t
)0x7f000001UL)

	)

83 
	#IPADDR_ANY
 ((
u32_t
)0x00000000UL)

	)

85 
	#IPADDR_BROADCAST
 ((
u32_t
)0xffffffffUL)

	)

91 
	#IP_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

92 
	#IP_CLASSA_NET
 0xff000000

	)

93 
	#IP_CLASSA_NSHIFT
 24

	)

94 
	#IP_CLASSA_HOST
 (0xfffffff‡& ~
IP_CLASSA_NET
)

	)

95 
	#IP_CLASSA_MAX
 128

	)

97 
	#IP_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

98 
	#IP_CLASSB_NET
 0xffff0000

	)

99 
	#IP_CLASSB_NSHIFT
 16

	)

100 
	#IP_CLASSB_HOST
 (0xfffffff‡& ~
IP_CLASSB_NET
)

	)

101 
	#IP_CLASSB_MAX
 65536

	)

103 
	#IP_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

104 
	#IP_CLASSC_NET
 0xffffff00

	)

105 
	#IP_CLASSC_NSHIFT
 8

	)

106 
	#IP_CLASSC_HOST
 (0xfffffff‡& ~
IP_CLASSC_NET
)

	)

108 
	#IP_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

109 
	#IP_CLASSD_NET
 0xf0000000

	)

110 
	#IP_CLASSD_NSHIFT
 28

	)

111 
	#IP_CLASSD_HOST
 0x0ffffff‡

	)

112 
	#IP_MULTICAST
(
a
Ë
	`IP_CLASSD
◊)

	)

114 
	#IP_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

115 
	#IP_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

117 
	#IP_LOOPBACKNET
 127

	)

120 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
Ë(ùaddr)->
addr
 = 
	`PP_HTONL
(
	`LWIP_MAKEU32
◊,b,c,d))

	)

125 #i‚de‡
IPADDR2_COPY


126 
	#IPADDR2_COPY
(
de°
, 
§c
Ë
	`SMEMCPY
(de°, src, (
ù4_addr_t
))

	)

130 
	#ù4_addr_c›y
(
de°
, 
§c
Ë((de°).
addr
 = (§c).addr)

	)

132 
	#ù4_addr_£t
(
de°
, 
§c
Ë((de°)->
addr
 = \

133 ((
§c
Ë=
NULL
 ? 0 : \

134 (
§c
)->
addr
))

	)

136 
	#ù4_addr_£t_zîo
(
ùaddr
Ë((ùaddr)->
addr
 = 0)

	)

138 
	#ù4_addr_£t_™y
(
ùaddr
Ë((ùaddr)->
addr
 = 
IPADDR_ANY
)

	)

140 
	#ù4_addr_£t_lo›back
(
ùaddr
Ë((ùaddr)->
addr
 = 
	`PP_HTONL
(
IPADDR_LOOPBACK
))

	)

142 
	#ù4_addr_i¶o›back
(
ùaddr
Ë(((ùaddr)->
addr
 & 
	`PP_HTONL
(
IP_CLASSA_NET
)Ë=PP_HTONL(((
u32_t
)
IP_LOOPBACKNET
Ë<< 24))

	)

145 
	#ù4_addr_£t_ht⁄
(
de°
, 
§c
Ë((de°)->
addr
 = \

146 ((
§c
Ë=
NULL
 ? 0:\

147 
	`lwù_ht⁄l
((
§c
)->
addr
)))

	)

149 
	#ù4_addr_£t_u32
(
de°_ùaddr
, 
§c_u32
Ë((de°_ùaddr)->
addr
 = (§c_u32))

	)

151 
	#ù4_addr_gë_u32
(
§c_ùaddr
Ë((§c_ùaddr)->
addr
)

	)

154 
	#ù4_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
√tmask
Ëdÿ{ (—¨gë)->
addr
 = ((ho°)->addrË& (“ëmask)->addr)); } 0)

	)

164 
	#ù4_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

165 (
mask
)->
addr
) == \

166 ((
addr2
)->
addr
 & \

167 (
mask
)->
addr
))

	)

168 
	#ù4_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

170 
	#ù4_addr_ißny_vÆ
(
addr1
Ë(◊ddr1).
addr
 =
IPADDR_ANY
)

	)

171 
	#ù4_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || 
	`ù4_addr_ißny_vÆ
(*◊ddr1)))

	)

173 
	#ù4_addr_isbrﬂdˇ°
(
addr1
, 
√tif
Ë
	`ù4_addr_isbrﬂdˇ°_u32
(◊ddr1)->
addr
,Çëif)

	)

174 
u8_t
 
ù4_addr_isbrﬂdˇ°_u32
(
u32_t
 
addr
, c⁄° 
√tif
 *netif);

176 
	#ù_addr_√tmask_vÆid
(
√tmask
Ë
	`ù4_addr_√tmask_vÆid
(“ëmask)->
addr
)

	)

177 
u8_t
 
ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
);

179 
	#ù4_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xf0000000UL)Ë=PP_HTONL(0xe0000000UL))

	)

181 
	#ù4_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xffff0000UL)Ë=PP_HTONL(0xa9„0000UL))

	)

183 
	#ù4_addr_debug_¥öt_∑πs
(
debug
, 
a
, 
b
, 
c
, 
d
) \

184 
	`LWIP_DEBUGF
(
debug
, ("%" 
U16_F
 ".%" U16_F ".%" U16_F ".%" U16_F, 
a
, 
b
, 
c
, 
d
))

	)

185 
	#ù4_addr_debug_¥öt
(
debug
, 
ùaddr
) \

186 
	`ù4_addr_debug_¥öt_∑πs
(
debug
, \

187 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`ù4_addr1_16
(ipaddr) : 0), \

188 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`ù4_addr2_16
(ipaddr) : 0), \

189 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`ù4_addr3_16
(ipaddr) : 0), \

190 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`ù4_addr4_16
(ùaddrË: 0))

	)

191 
	#ù4_addr_debug_¥öt_vÆ
(
debug
, 
ùaddr
) \

192 
	`ù4_addr_debug_¥öt_∑πs
(
debug
, \

193 
	`ù4_addr1_16
(&(
ùaddr
)), \

194 
	`ù4_addr2_16
(&(
ùaddr
)), \

195 
	`ù4_addr3_16
(&(
ùaddr
)), \

196 
	`ù4_addr4_16
(&(
ùaddr
)))

	)

199 
	#ù4_addr1
(
ùaddr
Ë(((c⁄° 
u8_t
*)(&(ùaddr)->
addr
))[0])

	)

200 
	#ù4_addr2
(
ùaddr
Ë(((c⁄° 
u8_t
*)(&(ùaddr)->
addr
))[1])

	)

201 
	#ù4_addr3
(
ùaddr
Ë(((c⁄° 
u8_t
*)(&(ùaddr)->
addr
))[2])

	)

202 
	#ù4_addr4
(
ùaddr
Ë(((c⁄° 
u8_t
*)(&(ùaddr)->
addr
))[3])

	)

205 
	#ù4_addr1_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr1
(ùaddr))

	)

206 
	#ù4_addr2_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr2
(ùaddr))

	)

207 
	#ù4_addr3_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr3
(ùaddr))

	)

208 
	#ù4_addr4_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr4
(ùaddr))

	)

210 
	#IP4ADDR_STRLEN_MAX
 16

	)

213 
	#ù_¡ﬂ
(
ùaddr
Ë
	`ùaddr_¡ﬂ
(ùaddr)

	)

215 
u32_t
 
ùaddr_addr
(c⁄° *
˝
);

216 
ù4addr_©⁄
(c⁄° *
˝
, 
ù4_addr_t
 *
addr
);

218 *
ù4addr_¡ﬂ
(c⁄° 
ù4_addr_t
 *
addr
);

219 *
ù4addr_¡ﬂ_r
(c⁄° 
ù4_addr_t
 *
addr
, *
buf
, 
buÊí
);

221 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip4_frag.h

38 #i‚de‡
LWIP_HDR_IP4_FRAG_H


39 
	#LWIP_HDR_IP4_FRAG_H


	)

41 
	~"lwù/›t.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/pbuf.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù_addr.h
"

46 
	~"lwù/ù.h
"

48 #i‡
LWIP_IPV4


50 #ifde‡
__˝lu•lus


54 #i‡
IP_REASSEMBLY


56 
	#IP_TMR_INTERVAL
 1000

	)

61 
	sù_ªassd©a
 {

62 
ù_ªassd©a
 *
√xt
;

63 
pbuf
 *
p
;

64 
ù_hdr
 
ùhdr
;

65 
u16_t
 
d©agøm_Àn
;

66 
u8_t
 
Êags
;

67 
u8_t
 
timî
;

70 
ù_ªass_öô
();

71 
ù_ªass_tmr
();

72 
pbuf
 *
ù4_ªass
(pbu‡*
p
);

75 #i‡
IP_FRAG


76 #i‡!
LWIP_NETIF_TX_SINGLE_PBUF


77 #i‚de‡
LWIP_PBUF_CUSTOM_REF_DEFINED


78 
	#LWIP_PBUF_CUSTOM_REF_DEFINED


	)

82 
	spbuf_cu°om_ªf
 {

84 
pbuf_cu°om
 
	mpc
;

86 
pbuf
 *
	m‹igöÆ
;

91 
îr_t
 
ù4_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
de°
);

94 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip6.h

41 #i‚de‡
LWIP_HDR_IP6_H


42 
	#LWIP_HDR_IP6_H


	)

44 
	~"lwù/›t.h
"

46 #i‡
LWIP_IPV6


48 
	~"lwù/ù6_addr.h
"

49 
	~"lwù/¥Ÿ/ù6.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/pbuf.h
"

52 
	~"lwù/√tif.h
"

54 
	~"lwù/îr.h
"

56 #ifde‡
__˝lu•lus


60 
√tif
 *
ù6_rouã
(c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
);

61 c⁄° 
ù_addr_t
 *
ù6_£À˘_sour˚_addªss
(
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
de°
);

62 
îr_t
 
ù6_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

63 
îr_t
 
ù6_ouçut
(
pbuf
 *
p
, c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
,

64 
u8_t
 
hl
, u8_à
tc
, u8_à
√xth
);

65 
îr_t
 
ù6_ouçut_if
(
pbuf
 *
p
, c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
,

66 
u8_t
 
hl
, u8_à
tc
, u8_à
√xth
, 
√tif
 *netif);

67 
îr_t
 
ù6_ouçut_if_§c
(
pbuf
 *
p
, c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
,

68 
u8_t
 
hl
, u8_à
tc
, u8_à
√xth
, 
√tif
 *netif);

69 #i‡
LWIP_NETIF_HWADDRHINT


70 
îr_t
 
ù6_ouçut_höãd
(
pbuf
 *
p
, c⁄° 
ù6_addr_t
 *
§c
, c⁄° ip6_addr_à*
de°
,

71 
u8_t
 
hl
, u8_à
tc
, u8_à
√xth
, u8_à*
addr_höt
);

73 #i‡
LWIP_IPV6_MLD


74 
îr_t
 
ù6_›ti⁄s_add_hbh_ø
(
pbuf
 *
p
, 
u8_t
 
√xth
, u8_à
vÆue
);

77 
	#ù6_√tif_gë_loˇl_ù
(
√tif
, 
de°
Ë((“ëifË!
NULL
) ? \

78 
	`ù6_£À˘_sour˚_addªss
(
√tif
, 
de°
Ë: 
NULL
)

	)

80 #i‡
IP6_DEBUG


81 
ù6_debug_¥öt
(
pbuf
 *
p
);

83 
	#ù6_debug_¥öt
(
p
)

	)

87 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip6_addr.h

42 #i‚de‡
LWIP_HDR_IP6_ADDR_H


43 
	#LWIP_HDR_IP6_ADDR_H


	)

45 
	~"lwù/›t.h
"

46 
	~"def.h
"

48 #i‡
LWIP_IPV6


51 #ifde‡
__˝lu•lus


58 
	sù6_addr
 {

59 
u32_t
 
addr
[4];

63 
ù6_addr
 
	tù6_addr_t
;

66 
	#IP6_ADDR_PART
(
ù6addr
, 
ödex
, 
a
,
b
,
c
,
d
) \

67 (
ù6addr
)->
addr
[
ödex
] = 
	`PP_HTONL
(
	`LWIP_MAKEU32
(
a
,
b
,
c
,
d
))

	)

71 
	#IP6_ADDR
(
ù6addr
, 
idx0
, 
idx1
, 
idx2
, 
idx3
) do { \

72 (
ù6addr
)->
addr
[0] = 
idx0
; \

73 (
ù6addr
)->
addr
[1] = 
idx1
; \

74 (
ù6addr
)->
addr
[2] = 
idx2
; \

75 (
ù6addr
)->
addr
[3] = 
idx3
; } 0)

	)

78 
	#IP6_ADDR_BLOCK1
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[0]Ë>> 16Ë& 0xffff))

	)

80 
	#IP6_ADDR_BLOCK2
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[0])Ë& 0xffff))

	)

82 
	#IP6_ADDR_BLOCK3
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[1]Ë>> 16Ë& 0xffff))

	)

84 
	#IP6_ADDR_BLOCK4
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[1])Ë& 0xffff))

	)

86 
	#IP6_ADDR_BLOCK5
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[2]Ë>> 16Ë& 0xffff))

	)

88 
	#IP6_ADDR_BLOCK6
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[2])Ë& 0xffff))

	)

90 
	#IP6_ADDR_BLOCK7
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[3]Ë>> 16Ë& 0xffff))

	)

92 
	#IP6_ADDR_BLOCK8
(
ù6addr
Ë((
u16_t
)((
	`lwù_ht⁄l
((ù6addr)->
addr
[3])Ë& 0xffff))

	)

95 
	#ù6_addr_c›y
(
de°
, 
§c
Ëdo{(de°).
addr
[0] = (src).addr[0]; \

96 (
de°
).
addr
[1] = (
§c
).addr[1]; \

97 (
de°
).
addr
[2] = (
§c
).addr[2]; \

98 (
de°
).
addr
[3] = (
§c
).addr[3];}0)

	)

100 
	#ù6_addr_£t
(
de°
, 
§c
Ëdo{(de°)->
addr
[0] = (§cË=
NULL
 ? 0 : (src)->addr[0]; \

101 (
de°
)->
addr
[1] = (
§c
Ë=
NULL
 ? 0 : (src)->addr[1]; \

102 (
de°
)->
addr
[2] = (
§c
Ë=
NULL
 ? 0 : (src)->addr[2]; \

103 (
de°
)->
addr
[3] = (
§c
Ë=
NULL
 ? 0 : (§c)->addr[3];}0)

	)

106 
	#ù6_addr_£t_zîo
(
ù6addr
Ëdo{(ù6addr)->
addr
[0] = 0; \

107 (
ù6addr
)->
addr
[1] = 0; \

108 (
ù6addr
)->
addr
[2] = 0; \

109 (
ù6addr
)->
addr
[3] = 0;}0)

	)

112 
	#ù6_addr_£t_™y
(
ù6addr
Ë
	`ù6_addr_£t_zîo
(ù6addr)

	)

114 
	#ù6_addr_£t_lo›back
(
ù6addr
Ëdo{(ù6addr)->
addr
[0] = 0; \

115 (
ù6addr
)->
addr
[1] = 0; \

116 (
ù6addr
)->
addr
[2] = 0; \

117 (
ù6addr
)->
addr
[3] = 
	`PP_HTONL
(0x00000001UL);}0)

	)

120 
	#ù6_addr_£t_ht⁄
(
de°
, 
§c
Ëdo{(de°)->
addr
[0] = (§cË=
NULL
 ? 0 : 
	`lwù_ht⁄l
((src)->addr[0]); \

121 (
de°
)->
addr
[1] = (
§c
Ë=
NULL
 ? 0 : 
	`lwù_ht⁄l
((src)->addr[1]); \

122 (
de°
)->
addr
[2] = (
§c
Ë=
NULL
 ? 0 : 
	`lwù_ht⁄l
((src)->addr[2]); \

123 (
de°
)->
addr
[3] = (
§c
Ë=
NULL
 ? 0 : 
	`lwù_ht⁄l
((§c)->addr[3]);}0)

	)

133 
	#ù6_addr_√tcmp
(
addr1
, 
addr2
Ë((◊ddr1)->
addr
[0] == (addr2)->addr[0]) && \

134 ((
addr1
)->
addr
[1] =(
addr2
)->addr[1]))

	)

136 
	#ù6_addr_cmp
(
addr1
, 
addr2
Ë((◊ddr1)->
addr
[0] == (addr2)->addr[0]) && \

137 ((
addr1
)->
addr
[1] =(
addr2
)->addr[1]) && \

138 ((
addr1
)->
addr
[2] =(
addr2
)->addr[2]) && \

139 ((
addr1
)->
addr
[3] =(
addr2
)->addr[3]))

	)

141 
	#ù6_gë_sub√t_id
(
ù6addr
Ë(
	`lwù_ht⁄l
((ù6addr)->
addr
[2]Ë& 0x0000ffffUL)

	)

143 
	#ù6_addr_ißny_vÆ
(
ù6addr
Ë(((ù6addr).
addr
[0] == 0) && \

144 ((
ù6addr
).
addr
[1] == 0) && \

145 ((
ù6addr
).
addr
[2] == 0) && \

146 ((
ù6addr
).
addr
[3] =0))

	)

147 
	#ù6_addr_ißny
(
ù6addr
Ë(((ù6addrË=
NULL
Ë|| 
	`ù6_addr_ißny_vÆ
(*(ù6addr)))

	)

149 
	#ù6_addr_i¶o›back
(
ù6addr
Ë(((ù6addr)->
addr
[0] == 0UL) && \

150 ((
ù6addr
)->
addr
[1] == 0UL) && \

151 ((
ù6addr
)->
addr
[2] == 0UL) && \

152 ((
ù6addr
)->
addr
[3] =
	`PP_HTONL
(0x00000001UL)))

	)

154 
	#ù6_addr_isglobÆ
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xe0000000UL)Ë=PP_HTONL(0x20000000UL))

	)

156 
	#ù6_addr_i¶ökloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xffc00000UL)Ë=PP_HTONL(0x„800000UL))

	)

158 
	#ù6_addr_issôñoˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xffc00000UL)Ë=PP_HTONL(0x„c00000UL))

	)

160 
	#ù6_addr_isuniquñoˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0x„000000UL)Ë=PP_HTONL(0xfc000000UL))

	)

162 
	#ù6_addr_isùv4m≠≥dùv6
(
ù6addr
Ë(((ù6addr)->
addr
[0] =0Ë&& ((ù6addr)->addr[1] =0Ë&& (((ù6addr)->addr[2]Ë=
	`PP_HTONL
(0x0000FFFFUL)))

	)

164 
	#ù6_addr_ismu…iˇ°
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff000000UL)Ë=PP_HTONL(0xff000000UL))

	)

165 
	#ù6_addr_mu…iˇ°_å™sõ¡_Êag
(
ù6addr
Ë((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0x00100000UL))

	)

166 
	#ù6_addr_mu…iˇ°_¥efix_Êag
(
ù6addr
Ë((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0x00200000UL))

	)

167 
	#ù6_addr_mu…iˇ°_ªndezvous_Êag
(
ù6addr
Ë((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0x00400000UL))

	)

168 
	#ù6_addr_mu…iˇ°_sc›e
(
ù6addr
Ë((
	`lwù_ht⁄l
((ù6addr)->
addr
[0]Ë>> 16Ë& 0xf)

	)

169 
	#IP6_MULTICAST_SCOPE_RESERVED
 0x0

	)

170 
	#IP6_MULTICAST_SCOPE_RESERVED0
 0x0

	)

171 
	#IP6_MULTICAST_SCOPE_INTERFACE_LOCAL
 0x1

	)

172 
	#IP6_MULTICAST_SCOPE_LINK_LOCAL
 0x2

	)

173 
	#IP6_MULTICAST_SCOPE_RESERVED3
 0x3

	)

174 
	#IP6_MULTICAST_SCOPE_ADMIN_LOCAL
 0x4

	)

175 
	#IP6_MULTICAST_SCOPE_SITE_LOCAL
 0x5

	)

176 
	#IP6_MULTICAST_SCOPE_ORGANIZATION_LOCAL
 0x8

	)

177 
	#IP6_MULTICAST_SCOPE_GLOBAL
 0xe

	)

178 
	#IP6_MULTICAST_SCOPE_RESERVEDF
 0xf

	)

179 
	#ù6_addr_ismu…iˇ°_iÊoˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff010000UL))

	)

180 
	#ù6_addr_ismu…iˇ°_lökloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff020000UL))

	)

181 
	#ù6_addr_ismu…iˇ°_admöloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff040000UL))

	)

182 
	#ù6_addr_ismu…iˇ°_sôñoˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff050000UL))

	)

183 
	#ù6_addr_ismu…iˇ°_‹gloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff080000UL))

	)

184 
	#ù6_addr_ismu…iˇ°_globÆ
(
ù6addr
Ë(((ù6addr)->
addr
[0] & 
	`PP_HTONL
(0xff8f0000UL)Ë=PP_HTONL(0xff0e0000UL))

	)

187 
	#ù6_addr_ißŒnodes_iÊoˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] =
	`PP_HTONL
(0xff010000UL)) && \

188 ((
ù6addr
)->
addr
[1] == 0UL) && \

189 ((
ù6addr
)->
addr
[2] == 0UL) && \

190 ((
ù6addr
)->
addr
[3] =
	`PP_HTONL
(0x00000001UL)))

	)

192 
	#ù6_addr_ißŒnodes_lökloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] =
	`PP_HTONL
(0xff020000UL)) && \

193 ((
ù6addr
)->
addr
[1] == 0UL) && \

194 ((
ù6addr
)->
addr
[2] == 0UL) && \

195 ((
ù6addr
)->
addr
[3] =
	`PP_HTONL
(0x00000001UL)))

	)

196 
	#ù6_addr_£t_Æ odes_lökloˇl
(
ù6addr
Ëdo{(ù6addr)->
addr
[0] = 
	`PP_HTONL
(0xff020000UL); \

197 (
ù6addr
)->
addr
[1] = 0; \

198 (
ù6addr
)->
addr
[2] = 0; \

199 (
ù6addr
)->
addr
[3] = 
	`PP_HTONL
(0x00000001UL);}0)

	)

201 
	#ù6_addr_ißŒrouãrs_lökloˇl
(
ù6addr
Ë(((ù6addr)->
addr
[0] =
	`PP_HTONL
(0xff020000UL)) && \

202 ((
ù6addr
)->
addr
[1] == 0UL) && \

203 ((
ù6addr
)->
addr
[2] == 0UL) && \

204 ((
ù6addr
)->
addr
[3] =
	`PP_HTONL
(0x00000002UL)))

	)

205 
	#ù6_addr_£t_ÆÃouãrs_lökloˇl
(
ù6addr
Ëdo{(ù6addr)->
addr
[0] = 
	`PP_HTONL
(0xff020000UL); \

206 (
ù6addr
)->
addr
[1] = 0; \

207 (
ù6addr
)->
addr
[2] = 0; \

208 (
ù6addr
)->
addr
[3] = 
	`PP_HTONL
(0x00000002UL);}0)

	)

210 
	#ù6_addr_issﬁicôednode
(
ù6addr
Ë–((ù6addr)->
addr
[0] =
	`PP_HTONL
(0xff020000UL)) && \

211 ((
ù6addr
)->
addr
[2] =
	`PP_HTONL
(0x00000001UL)) && \

212 (((
ù6addr
)->
addr
[3] & 
	`PP_HTONL
(0xff000000UL)Ë=PP_HTONL(0xff000000UL)Ë)

	)

214 
	#ù6_addr_£t_sﬁicôednode
(
ù6addr
, 
if_id
Ëdo{(ù6addr)->
addr
[0] = 
	`PP_HTONL
(0xff020000UL); \

215 (
ù6addr
)->
addr
[1] = 0; \

216 (
ù6addr
)->
addr
[2] = 
	`PP_HTONL
(0x00000001UL); \

217 (
ù6addr
)->
addr
[3] = (
	`PP_HTONL
(0xff000000ULË| (
if_id
));}0)

	)

219 
	#ù6_addr_cmp_sﬁicôednode
(
ù6addr
, 
¢_addr
Ë(((ù6addr)->
addr
[0] =
	`PP_HTONL
(0xff020000UL)) && \

220 ((
ù6addr
)->
addr
[1] == 0) && \

221 ((
ù6addr
)->
addr
[2] =
	`PP_HTONL
(0x00000001UL)) && \

222 ((
ù6addr
)->
addr
[3] =(
	`PP_HTONL
(0xff000000ULË| (
¢_addr
)->addr[3])))

	)

225 
	#IP6_ADDR_INVALID
 0x00

	)

226 
	#IP6_ADDR_TENTATIVE
 0x08

	)

227 
	#IP6_ADDR_TENTATIVE_1
 0x09

	)

228 
	#IP6_ADDR_TENTATIVE_2
 0x0®

	)

229 
	#IP6_ADDR_TENTATIVE_3
 0x0b

	)

230 
	#IP6_ADDR_TENTATIVE_4
 0x0¯

	)

231 
	#IP6_ADDR_TENTATIVE_5
 0x0d

	)

232 
	#IP6_ADDR_TENTATIVE_6
 0x0ê

	)

233 
	#IP6_ADDR_TENTATIVE_7
 0x0‡

	)

234 
	#IP6_ADDR_VALID
 0x10

	)

235 
	#IP6_ADDR_PREFERRED
 0x30

	)

236 
	#IP6_ADDR_DEPRECATED
 0x10

	)

238 
	#IP6_ADDR_TENTATIVE_COUNT_MASK
 0x07

	)

240 
	#ù6_addr_isövÆid
(
addr_°©e
Ë◊ddr_°©ê=
IP6_ADDR_INVALID
)

	)

241 
	#ù6_addr_i°íètive
(
addr_°©e
Ë◊ddr_°©ê& 
IP6_ADDR_TENTATIVE
)

	)

242 
	#ù6_addr_isvÆid
(
addr_°©e
Ë◊ddr_°©ê& 
IP6_ADDR_VALID
Ë

	)

243 
	#ù6_addr_i•ª„ºed
(
addr_°©e
Ë◊ddr_°©ê=
IP6_ADDR_PREFERRED
)

	)

244 
	#ù6_addr_isdïªˇãd
(
addr_°©e
Ë◊ddr_°©ê=
IP6_ADDR_DEPRECATED
)

	)

246 
	#ù6_addr_debug_¥öt_∑πs
(
debug
, 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
) \

247 
	`LWIP_DEBUGF
(
debug
, ("%" 
X16_F
 ":%" X16_F ":%" X16_F ":%" X16_F ":%" X16_F ":%" X16_F ":%" X16_F ":%" X16_F, \

248 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
))

	)

249 
	#ù6_addr_debug_¥öt
(
debug
, 
ùaddr
) \

250 
	`ù6_addr_debug_¥öt_∑πs
(
debug
, \

251 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK1
(ipaddr) : 0), \

252 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK2
(ipaddr) : 0), \

253 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK3
(ipaddr) : 0), \

254 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK4
(ipaddr) : 0), \

255 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK5
(ipaddr) : 0), \

256 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK6
(ipaddr) : 0), \

257 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK7
(ipaddr) : 0), \

258 (
u16_t
)((
ùaddr
Ë!
NULL
 ? 
	`IP6_ADDR_BLOCK8
(ùaddrË: 0))

	)

259 
	#ù6_addr_debug_¥öt_vÆ
(
debug
, 
ùaddr
) \

260 
	`ù6_addr_debug_¥öt_∑πs
(
debug
, \

261 
	`IP6_ADDR_BLOCK1
(&(
ùaddr
)), \

262 
	`IP6_ADDR_BLOCK2
(&(
ùaddr
)), \

263 
	`IP6_ADDR_BLOCK3
(&(
ùaddr
)), \

264 
	`IP6_ADDR_BLOCK4
(&(
ùaddr
)), \

265 
	`IP6_ADDR_BLOCK5
(&(
ùaddr
)), \

266 
	`IP6_ADDR_BLOCK6
(&(
ùaddr
)), \

267 
	`IP6_ADDR_BLOCK7
(&(
ùaddr
)), \

268 
	`IP6_ADDR_BLOCK8
(&(
ùaddr
)))

	)

270 
	#IP6ADDR_STRLEN_MAX
 46

	)

272 
ù6addr_©⁄
(c⁄° *
˝
, 
ù6_addr_t
 *
addr
);

274 *
ù6addr_¡ﬂ
(c⁄° 
ù6_addr_t
 *
addr
);

275 *
ù6addr_¡ﬂ_r
(c⁄° 
ù6_addr_t
 *
addr
, *
buf
, 
buÊí
);

279 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip6_frag.h

41 #i‚de‡
LWIP_HDR_IP6_FRAG_H


42 
	#LWIP_HDR_IP6_FRAG_H


	)

44 
	~"lwù/›t.h
"

45 
	~"lwù/pbuf.h
"

46 
	~"lwù/ù6_addr.h
"

47 
	~"lwù/ù6.h
"

48 
	~"lwù/√tif.h
"

50 #ifde‡
__˝lu•lus


55 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_REASS


60 #i‚de‡
IPV6_FRAG_COPYHEADER


61 
	#IPV6_FRAG_COPYHEADER
 0

	)

65 
	#IP6_REASS_TMR_INTERVAL
 1000

	)

69 #i‡
IPV6_FRAG_COPYHEADER


70 
	#IPV6_FRAG_HDRPTR


	)

71 
	#IPV6_FRAG_HDRREF
(
hdr
Ë(&(hdr))

	)

73 
	#IPV6_FRAG_HDRPTR
 *

	)

74 
	#IPV6_FRAG_HDRREF
(
hdr
Ë(hdr)

	)

80 
	sù6_ªassd©a
 {

81 
ù6_ªassd©a
 *
√xt
;

82 
pbuf
 *
p
;

83 
ù6_hdr
 
IPV6_FRAG_HDRPTR
 
ùhdr
;

84 
u32_t
 
idítifiˇti⁄
;

85 
u16_t
 
d©agøm_Àn
;

86 
u8_t
 
√xth
;

87 
u8_t
 
timî
;

90 
	#ù6_ªass_öô
(Ë

	)

91 
ù6_ªass_tmr
();

92 
pbuf
 *
ù6_ªass
(pbu‡*
p
);

96 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_FRAG


98 #i‚de‡
LWIP_PBUF_CUSTOM_REF_DEFINED


99 
	#LWIP_PBUF_CUSTOM_REF_DEFINED


	)

103 
	spbuf_cu°om_ªf
 {

105 
pbuf_cu°om
 
	gpc
;

107 
pbuf
 *
	g‹igöÆ
;

111 
îr_t
 
ù6_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
de°
);

116 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/ip_addr.h

37 #i‚de‡
LWIP_HDR_IP_ADDR_H


38 
	#LWIP_HDR_IP_ADDR_H


	)

40 
	~"lwù/›t.h
"

41 
	~"lwù/def.h
"

43 
	~"lwù/ù4_addr.h
"

44 
	~"lwù/ù6_addr.h
"

46 #ifde‡
__˝lu•lus


54 
	elwù_ù_addr_ty≥
 {

56 
IPADDR_TYPE_V4
 = 0U,

58 
IPADDR_TYPE_V6
 = 6U,

60 
IPADDR_TYPE_ANY
 = 46U

63 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


69 
	sù_addr
 {

71 
ù6_addr_t
 
ù6
;

72 
ù4_addr_t
 
ù4
;

73 } 
u_addr
;

75 
u8_t
 
ty≥
;

76 } 
	tù_addr_t
;

78 c⁄° 
ù_addr_t
 
ù_addr_™y_ty≥
;

81 
	#IPADDR4_INIT
(
u32vÆ
Ë{ { { { u32vÆ, 0ul, 0ul, 0u»} } }, 
IPADDR_TYPE_V4
 }

	)

83 
	#IPADDR4_INIT_BYTES
(
a
,
b
,
c
,
d
Ë
	`IPADDR4_INIT
(
	`PP_HTONL
(
	`LWIP_MAKEU32
◊,b,c,d)))

	)

85 
	#IPADDR6_INIT
(
a
, 
b
, 
c
, 
d
Ë{ { { {á, b, c, d } } }, 
IPADDR_TYPE_V6
 }

	)

87 
	#IPADDR6_INIT_HOST
(
a
, 
b
, 
c
, 
d
Ë{ { { { 
	`PP_HTONL
◊), PP_HTONL(b), PP_HTONL(c), PP_HTONL(dË} } }, 
IPADDR_TYPE_V6
 }

	)

90 
	#IP_IS_ANY_TYPE_VAL
(
ùaddr
Ë(
	`IP_GET_TYPE
(&ùaddrË=
IPADDR_TYPE_ANY
)

	)

92 
	#IPADDR_ANY_TYPE_INIT
 { { { { 0ul, 0ul, 0ul, 0u»} } }, 
IPADDR_TYPE_ANY
 }

	)

95 
	#IP_IS_V4_VAL
(
ùaddr
Ë(
	`IP_GET_TYPE
(&ùaddrË=
IPADDR_TYPE_V4
)

	)

97 
	#IP_IS_V6_VAL
(
ùaddr
Ë(
	`IP_GET_TYPE
(&ùaddrË=
IPADDR_TYPE_V6
)

	)

99 
	#IP_IS_V4
(
ùaddr
Ë(((ùaddrË=
NULL
Ë|| 
	`IP_IS_V4_VAL
(*(ùaddr)))

	)

101 
	#IP_IS_V6
(
ùaddr
Ë(((ùaddrË!
NULL
Ë&& 
	`IP_IS_V6_VAL
(*(ùaddr)))

	)

103 
	#IP_SET_TYPE_VAL
(
ùaddr
, 
ùty≥
Ëdÿ{ (ùaddr).
ty≥
 = (ùty≥); }0)

	)

104 
	#IP_SET_TYPE
(
ùaddr
, 
ùty≥
Ëdÿ{ if((ùaddrË!
NULL
Ë{ 
	`IP_SET_TYPE_VAL
(*(ùaddr), i±y≥); }}0)

	)

105 
	#IP_GET_TYPE
(
ùaddr
Ë((ùaddr)->
ty≥
)

	)

107 
	#IP_ADDR_PCB_VERSION_MATCH_EXACT
(
pcb
, 
ùaddr
Ë(
	`IP_GET_TYPE
(&pcb->
loˇl_ù
Ë=IP_GET_TYPE(ùaddr))

	)

108 
	#IP_ADDR_PCB_VERSION_MATCH
(
pcb
, 
ùaddr
Ë(
	`IP_IS_ANY_TYPE_VAL
’cb->
loˇl_ù
Ë|| 
	`IP_ADDR_PCB_VERSION_MATCH_EXACT
’cb, i∑ddr))

	)

113 
	#ù_2_ù6
(
ùaddr
Ë(&((ùaddr)->
u_addr
.
ù6
))

	)

117 
	#ù_2_ù4
(
ùaddr
Ë(&((ùaddr)->
u_addr
.
ù4
))

	)

120 
	#IP_ADDR4
(
ùaddr
,
a
,
b
,
c
,
d
Ëdÿ{ 
	`IP4_ADDR
(
	`ù_2_ù4
(ipaddr),a,b,c,d); \

121 
	`IP_SET_TYPE_VAL
(*(
ùaddr
), 
IPADDR_TYPE_V4
); } 0)

	)

123 
	#IP_ADDR6
(
ùaddr
,
i0
,
i1
,
i2
,
i3
Ëdÿ{ 
	`IP6_ADDR
(
	`ù_2_ù6
(ipaddr),i0,i1,i2,i3); \

124 
	`IP_SET_TYPE_VAL
(*(
ùaddr
), 
IPADDR_TYPE_V6
); } 0)

	)

126 
	#IP_ADDR6_HOST
(
ùaddr
,
i0
,
i1
,
i2
,
i3
Ë
	`IP_ADDR6
(ùaddr,
	`PP_HTONL
(i0),PP_HTONL(i1),PP_HTONL(i2),PP_HTONL(i3))

	)

129 
	#ù_addr_c›y
(
de°
, 
§c
Ëdo{ 
	`IP_SET_TYPE_VAL
(de°, 
	`IP_GET_TYPE
(&§c)); if(
	`IP_IS_V6_VAL
(src)){ \

130 
	`ù6_addr_c›y
(*
	`ù_2_ù6
(&(
de°
)), *ù_2_ù6(&(
§c
))); }{ \

131 
	`ù4_addr_c›y
(*
	`ù_2_ù4
(&(
de°
)), *ù_2_ù4(&(
§c
))); }}0)

	)

133 
	#ù_addr_c›y_‰om_ù6
(
de°
, 
§c
) do{ \

134 
	`ù6_addr_c›y
(*
	`ù_2_ù6
(&(
de°
)), 
§c
); 
	`IP_SET_TYPE_VAL
(de°, 
IPADDR_TYPE_V6
); }0)

	)

136 
	#ù_addr_c›y_‰om_ù4
(
de°
, 
§c
) do{ \

137 
	`ù4_addr_c›y
(*
	`ù_2_ù4
(&(
de°
)), 
§c
); 
	`IP_SET_TYPE_VAL
(de°, 
IPADDR_TYPE_V4
); }0)

	)

139 
	#ù_addr_£t_ù4_u32
(
ùaddr
, 
vÆ
Ëdo{if(ùaddr){
	`ù4_addr_£t_u32
(
	`ù_2_ù4
(ipaddr), val); \

140 
	`IP_SET_TYPE
(
ùaddr
, 
IPADDR_TYPE_V4
); }}0)

	)

142 
	#ù_addr_gë_ù4_u32
(
ùaddr
Ë(((ùaddrË&& 
	`IP_IS_V4
(ipaddr)) ? \

143 
	`ù4_addr_gë_u32
(
	`ù_2_ù4
(
ùaddr
)Ë: 0)

	)

145 
	#ù_addr_£t
(
de°
, 
§c
Ëdo{ 
	`IP_SET_TYPE
(de°, 
	`IP_GET_TYPE
(§c)); if(
	`IP_IS_V6
(src)){ \

146 
	`ù6_addr_£t
(
	`ù_2_ù6
(
de°
), ip_2_ù6(
§c
)); }{ \

147 
	`ù4_addr_£t
(
	`ù_2_ù4
(
de°
), ip_2_ù4(
§c
)); }}0)

	)

149 
	#ù_addr_£t_ùaddr
(
de°
, 
§c
Ë
	`ù_addr_£t
(de°, src)

	)

151 
	#ù_addr_£t_zîo
(
ùaddr
) do{ \

152 
	`ù6_addr_£t_zîo
(
	`ù_2_ù6
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 0); }0)

	)

154 
	#ù_addr_£t_zîo_ù4
(
ùaddr
) do{ \

155 
	`ù6_addr_£t_zîo
(
	`ù_2_ù6
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V4
); }0)

	)

157 
	#ù_addr_£t_zîo_ù6
(
ùaddr
) do{ \

158 
	`ù6_addr_£t_zîo
(
	`ù_2_ù6
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V6
); }0)

	)

160 
	#ù_addr_£t_™y
(
is_ùv6
, 
ùaddr
) do{if(is_ipv6){ \

161 
	`ù6_addr_£t_™y
(
	`ù_2_ù6
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V6
); }{ \

162 
	`ù4_addr_£t_™y
(
	`ù_2_ù4
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V4
); }}0)

	)

164 
	#ù_addr_£t_lo›back
(
is_ùv6
, 
ùaddr
) do{if(is_ipv6){ \

165 
	`ù6_addr_£t_lo›back
(
	`ù_2_ù6
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V6
); }{ \

166 
	`ù4_addr_£t_lo›back
(
	`ù_2_ù4
(
ùaddr
)); 
	`IP_SET_TYPE
(ùaddr, 
IPADDR_TYPE_V4
); }}0)

	)

168 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ëdo{if(
	`IP_IS_V6
(src)){ \

169 
	`ù6_addr_£t_ht⁄
(
	`ù_2_ù6
(
ùaddr
), (
§c
)); 
	`IP_SET_TYPE
(
de°
, 
IPADDR_TYPE_V6
); }{ \

170 
	`ù4_addr_£t_ht⁄
(
	`ù_2_ù4
(
ùaddr
), (
§c
)); 
	`IP_SET_TYPE
(
de°
, 
IPADDR_TYPE_V4
); }}0)

	)

172 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
√tmask
Ëdo{if(
	`IP_IS_V6
(host)){ \

173 
	`ù4_addr_£t_zîo
(
	`ù_2_ù4
(
èrgë
)); 
	`IP_SET_TYPE
—¨gë, 
IPADDR_TYPE_V6
); } { \

174 
	`ù4_addr_gë_√tw‹k
(
	`ù_2_ù4
(
èrgë
), ip_2_ù4(
ho°
), ip_2_ù4(
√tmask
)); 
	`IP_SET_TYPE
—¨gë, 
IPADDR_TYPE_V4
); }}0)

	)

176 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((
	`IP_IS_V6
(addr1) && IP_IS_V6(addr2)) ? \

178 
	`ù4_addr_√tcmp
(
	`ù_2_ù4
(
addr1
), ip_2_ù4(
addr2
), 
mask
))

	)

180 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë((
	`IP_GET_TYPE
◊ddr1Ë!IP_GET_TYPE◊ddr2)Ë? 0 : (
	`IP_IS_V6_VAL
(*(addr1)) ? \

181 
	`ù6_addr_cmp
(
	`ù_2_ù6
(
addr1
), ip_2_ù6(
addr2
)) : \

182 
	`ù4_addr_cmp
(
	`ù_2_ù4
(
addr1
), ip_2_ù4(
addr2
))))

	)

184 
	#ù_addr_ißny
(
ùaddr
Ë((
	`IP_IS_V6
(ipaddr)) ? \

185 
	`ù6_addr_ißny
(
	`ù_2_ù6
(
ùaddr
)) : \

186 
	`ù4_addr_ißny
(
	`ù_2_ù4
(
ùaddr
)))

	)

188 
	#ù_addr_ißny_vÆ
(
ùaddr
Ë((
	`IP_IS_V6_VAL
(ipaddr)) ? \

189 
	`ù6_addr_ißny_vÆ
(*
	`ù_2_ù6
(&(
ùaddr
))) : \

190 
	`ù4_addr_ißny_vÆ
(*
	`ù_2_ù4
(&(
ùaddr
))))

	)

192 
	#ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
Ë((
	`IP_IS_V6
(ipaddr)) ? \

194 
	`ù4_addr_isbrﬂdˇ°
(
	`ù_2_ù4
(
ùaddr
), 
√tif
))

	)

196 
	#ù_addr_ismu…iˇ°
(
ùaddr
Ë((
	`IP_IS_V6
(ipaddr)) ? \

197 
	`ù6_addr_ismu…iˇ°
(
	`ù_2_ù6
(
ùaddr
)) : \

198 
	`ù4_addr_ismu…iˇ°
(
	`ù_2_ù4
(
ùaddr
)))

	)

200 
	#ù_addr_i¶o›back
(
ùaddr
Ë((
	`IP_IS_V6
(ipaddr)) ? \

201 
	`ù6_addr_i¶o›back
(
	`ù_2_ù6
(
ùaddr
)) : \

202 
	`ù4_addr_i¶o›back
(
	`ù_2_ù4
(
ùaddr
)))

	)

204 
	#ù_addr_i¶ökloˇl
(
ùaddr
Ë((
	`IP_IS_V6
(ipaddr)) ? \

205 
	`ù6_addr_i¶ökloˇl
(
	`ù_2_ù6
(
ùaddr
)) : \

206 
	`ù4_addr_i¶ökloˇl
(
	`ù_2_ù4
(
ùaddr
)))

	)

207 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
Ëdÿ{ if(
	`IP_IS_V6
(ipaddr)) { \

208 
	`ù6_addr_debug_¥öt
(
debug
, 
	`ù_2_ù6
(
ùaddr
)); } { \

209 
	`ù4_addr_debug_¥öt
(
debug
, 
	`ù_2_ù4
(
ùaddr
)); }}0)

	)

210 
	#ù_addr_debug_¥öt_vÆ
(
debug
, 
ùaddr
Ëdÿ{ if(
	`IP_IS_V6_VAL
(ipaddr)) { \

211 
	`ù6_addr_debug_¥öt_vÆ
(
debug
, *
	`ù_2_ù6
(&(
ùaddr
))); } { \

212 
	`ù4_addr_debug_¥öt_vÆ
(
debug
, *
	`ù_2_ù4
(&(
ùaddr
))); }}0)

	)

214 
	#ùaddr_¡ﬂ
(
addr
Ë((◊ddrË=
NULL
) ? "NULL" : \

215 ((
	`IP_IS_V6
(
addr
)Ë? 
	`ù6addr_¡ﬂ
(
	`ù_2_ù6
◊ddr)Ë: 
	`ù4addr_¡ﬂ
(
	`ù_2_ù4
◊ddr))))

	)

217 
	#ùaddr_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë((◊ddrË=
NULL
) ? "NULL" : \

218 ((
	`IP_IS_V6
(
addr
)Ë? 
	`ù6addr_¡ﬂ_r
(
	`ù_2_ù6
◊ddr), 
buf
, 
buÊí
Ë: 
	`ù4addr_¡ﬂ_r
(
	`ù_2_ù4
◊ddr), buf, buÊí)))

	)

219 
ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
);

222 
	#IPADDR_STRLEN_MAX
 
IP6ADDR_STRLEN_MAX


	)

225 
	#ù4_2_ùv4_m≠≥d_ùv6
(
ù6addr
, 
ù4addr
) do { \

226 (
ù6addr
)->
addr
[3] = (
ù4addr
)->addr; \

227 (
ù6addr
)->
addr
[2] = 
	`PP_HTONL
(0x0000FFFFUL); \

228 (
ù6addr
)->
addr
[1] = 0; \

229 (
ù6addr
)->
addr
[0] = 0; } 0);

	)

232 
	#unm≠_ùv4_m≠≥d_ùv6
(
ù4addr
, 
ù6addr
) \

233 (
ù4addr
)->
addr
 = (
ù6addr
)->addr[3];

	)

235 
	#IP46_ADDR_ANY
(
ty≥
Ë((—y≥Ë=
IPADDR_TYPE_V6
)? 
IP6_ADDR_ANY
 : 
IP4_ADDR_ANY
)

	)

239 
	#IP_ADDR_PCB_VERSION_MATCH
(
addr
, 
pcb
Ë1

	)

240 
	#IP_ADDR_PCB_VERSION_MATCH_EXACT
(
pcb
, 
ùaddr
Ë1

	)

242 #i‡
LWIP_IPV4


244 
ù4_addr_t
 
	tù_addr_t
;

245 
	#IPADDR4_INIT
(
u32vÆ
Ë{ u32vÆ }

	)

246 
	#IPADDR4_INIT_BYTES
(
a
,
b
,
c
,
d
Ë
	`IPADDR4_INIT
(
	`PP_HTONL
(
	`LWIP_MAKEU32
◊,b,c,d)))

	)

247 
	#IP_IS_V4_VAL
(
ùaddr
Ë1

	)

248 
	#IP_IS_V6_VAL
(
ùaddr
Ë0

	)

249 
	#IP_IS_V4
(
ùaddr
Ë1

	)

250 
	#IP_IS_V6
(
ùaddr
Ë0

	)

251 
	#IP_IS_ANY_TYPE_VAL
(
ùaddr
Ë0

	)

252 
	#IP_SET_TYPE_VAL
(
ùaddr
, 
ùty≥
)

	)

253 
	#IP_SET_TYPE
(
ùaddr
, 
ùty≥
)

	)

254 
	#IP_GET_TYPE
(
ùaddr
Ë
IPADDR_TYPE_V4


	)

255 
	#ù_2_ù4
(
ùaddr
Ë(ùaddr)

	)

256 
	#IP_ADDR4
(
ùaddr
,
a
,
b
,
c
,
d
Ë
	`IP4_ADDR
(ùaddr,a,b,c,d)

	)

258 
	#ù_addr_c›y
(
de°
, 
§c
Ë
	`ù4_addr_c›y
(de°, src)

	)

259 
	#ù_addr_c›y_‰om_ù4
(
de°
, 
§c
Ë
	`ù4_addr_c›y
(de°, src)

	)

260 
	#ù_addr_£t_ù4_u32
(
ùaddr
, 
vÆ
Ë
	`ù4_addr_£t_u32
(
	`ù_2_ù4
(ùaddr), vÆ)

	)

261 
	#ù_addr_gë_ù4_u32
(
ùaddr
Ë
	`ù4_addr_gë_u32
(
	`ù_2_ù4
(ùaddr))

	)

262 
	#ù_addr_£t
(
de°
, 
§c
Ë
	`ù4_addr_£t
(de°, src)

	)

263 
	#ù_addr_£t_ùaddr
(
de°
, 
§c
Ë
	`ù4_addr_£t
(de°, src)

	)

264 
	#ù_addr_£t_zîo
(
ùaddr
Ë
	`ù4_addr_£t_zîo
(ùaddr)

	)

265 
	#ù_addr_£t_zîo_ù4
(
ùaddr
Ë
	`ù4_addr_£t_zîo
(ùaddr)

	)

266 
	#ù_addr_£t_™y
(
is_ùv6
, 
ùaddr
Ë
	`ù4_addr_£t_™y
(ùaddr)

	)

267 
	#ù_addr_£t_lo›back
(
is_ùv6
, 
ùaddr
Ë
	`ù4_addr_£t_lo›back
(ùaddr)

	)

268 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ë
	`ù4_addr_£t_ht⁄
(de°, src)

	)

269 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
mask
Ë
	`ù4_addr_gë_√tw‹k
—¨gë, ho°, mask)

	)

270 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë
	`ù4_addr_√tcmp
◊ddr1,áddr2, mask)

	)

271 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë
	`ù4_addr_cmp
◊ddr1,áddr2)

	)

272 
	#ù_addr_ißny
(
ùaddr
Ë
	`ù4_addr_ißny
(ùaddr)

	)

273 
	#ù_addr_ißny_vÆ
(
ùaddr
Ë
	`ù4_addr_ißny_vÆ
(ùaddr)

	)

274 
	#ù_addr_i¶o›back
(
ùaddr
Ë
	`ù4_addr_i¶o›back
(ùaddr)

	)

275 
	#ù_addr_i¶ökloˇl
(
ùaddr
Ë
	`ù4_addr_i¶ökloˇl
(ùaddr)

	)

276 
	#ù_addr_isbrﬂdˇ°
(
addr
, 
√tif
Ë
	`ù4_addr_isbrﬂdˇ°
◊ddr,Çëif)

	)

277 
	#ù_addr_ismu…iˇ°
(
ùaddr
Ë
	`ù4_addr_ismu…iˇ°
(ùaddr)

	)

278 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
Ë
	`ù4_addr_debug_¥öt
(debug, i∑ddr)

	)

279 
	#ù_addr_debug_¥öt_vÆ
(
debug
, 
ùaddr
Ë
	`ù4_addr_debug_¥öt_vÆ
(debug, i∑ddr)

	)

280 
	#ùaddr_¡ﬂ
(
ùaddr
Ë
	`ù4addr_¡ﬂ
(ùaddr)

	)

281 
	#ùaddr_¡ﬂ_r
(
ùaddr
, 
buf
, 
buÊí
Ë
	`ù4addr_¡ﬂ_r
(ùaddr, buf, buÊí)

	)

282 
	#ùaddr_©⁄
(
˝
, 
addr
Ë
	`ù4addr_©⁄
(˝,áddr)

	)

284 
	#IPADDR_STRLEN_MAX
 
IP4ADDR_STRLEN_MAX


	)

286 
	#IP46_ADDR_ANY
(
ty≥
Ë(
IP4_ADDR_ANY
)

	)

290 
ù6_addr_t
 
	tù_addr_t
;

291 
	#IPADDR6_INIT
(
a
, 
b
, 
c
, 
d
Ë{ {á, b, c, d } }

	)

292 
	#IPADDR6_INIT_HOST
(
a
, 
b
, 
c
, 
d
Ë{ { 
	`PP_HTONL
◊), PP_HTONL(b), PP_HTONL(c), PP_HTONL(dË} }

	)

293 
	#IP_IS_V4_VAL
(
ùaddr
Ë0

	)

294 
	#IP_IS_V6_VAL
(
ùaddr
Ë1

	)

295 
	#IP_IS_V4
(
ùaddr
Ë0

	)

296 
	#IP_IS_V6
(
ùaddr
Ë1

	)

297 
	#IP_IS_ANY_TYPE_VAL
(
ùaddr
Ë0

	)

298 
	#IP_SET_TYPE_VAL
(
ùaddr
, 
ùty≥
)

	)

299 
	#IP_SET_TYPE
(
ùaddr
, 
ùty≥
)

	)

300 
	#IP_GET_TYPE
(
ùaddr
Ë
IPADDR_TYPE_V6


	)

301 
	#ù_2_ù6
(
ùaddr
Ë(ùaddr)

	)

302 
	#IP_ADDR6
(
ùaddr
,
i0
,
i1
,
i2
,
i3
Ë
	`IP6_ADDR
(ùaddr,i0,i1,i2,i3)

	)

303 
	#IP_ADDR6_HOST
(
ùaddr
,
i0
,
i1
,
i2
,
i3
Ë
	`IP_ADDR6
(ùaddr,
	`PP_HTONL
(i0),PP_HTONL(i1),PP_HTONL(i2),PP_HTONL(i3))

	)

305 
	#ù_addr_c›y
(
de°
, 
§c
Ë
	`ù6_addr_c›y
(de°, src)

	)

306 
	#ù_addr_c›y_‰om_ù6
(
de°
, 
§c
Ë
	`ù6_addr_c›y
(de°, src)

	)

307 
	#ù_addr_£t
(
de°
, 
§c
Ë
	`ù6_addr_£t
(de°, src)

	)

308 
	#ù_addr_£t_ùaddr
(
de°
, 
§c
Ë
	`ù6_addr_£t
(de°, src)

	)

309 
	#ù_addr_£t_zîo
(
ùaddr
Ë
	`ù6_addr_£t_zîo
(ùaddr)

	)

310 
	#ù_addr_£t_zîo_ù6
(
ùaddr
Ë
	`ù6_addr_£t_zîo
(ùaddr)

	)

311 
	#ù_addr_£t_™y
(
is_ùv6
, 
ùaddr
Ë
	`ù6_addr_£t_™y
(ùaddr)

	)

312 
	#ù_addr_£t_lo›back
(
is_ùv6
, 
ùaddr
Ë
	`ù6_addr_£t_lo›back
(ùaddr)

	)

313 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ë
	`ù6_addr_£t_ht⁄
(de°, src)

	)

314 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
mask
Ë
	`ù6_addr_£t_zîo
—¨gë)

	)

315 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë0

	)

316 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë
	`ù6_addr_cmp
◊ddr1,áddr2)

	)

317 
	#ù_addr_ißny
(
ùaddr
Ë
	`ù6_addr_ißny
(ùaddr)

	)

318 
	#ù_addr_ißny_vÆ
(
ùaddr
Ë
	`ù6_addr_ißny_vÆ
(ùaddr)

	)

319 
	#ù_addr_i¶o›back
(
ùaddr
Ë
	`ù6_addr_i¶o›back
(ùaddr)

	)

320 
	#ù_addr_i¶ökloˇl
(
ùaddr
Ë
	`ù6_addr_i¶ökloˇl
(ùaddr)

	)

321 
	#ù_addr_isbrﬂdˇ°
(
addr
, 
√tif
Ë0

	)

322 
	#ù_addr_ismu…iˇ°
(
ùaddr
Ë
	`ù6_addr_ismu…iˇ°
(ùaddr)

	)

323 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
Ë
	`ù6_addr_debug_¥öt
(debug, i∑ddr)

	)

324 
	#ù_addr_debug_¥öt_vÆ
(
debug
, 
ùaddr
Ë
	`ù6_addr_debug_¥öt_vÆ
(debug, i∑ddr)

	)

325 
	#ùaddr_¡ﬂ
(
ùaddr
Ë
	`ù6addr_¡ﬂ
(ùaddr)

	)

326 
	#ùaddr_¡ﬂ_r
(
ùaddr
, 
buf
, 
buÊí
Ë
	`ù6addr_¡ﬂ_r
(ùaddr, buf, buÊí)

	)

327 
	#ùaddr_©⁄
(
˝
, 
addr
Ë
	`ù6addr_©⁄
(˝,áddr)

	)

329 
	#IPADDR_STRLEN_MAX
 
IP6ADDR_STRLEN_MAX


	)

331 
	#IP46_ADDR_ANY
(
ty≥
Ë(
IP6_ADDR_ANY
)

	)

336 #i‡
LWIP_IPV4


338 c⁄° 
ù_addr_t
 
ù_addr_™y
;

339 c⁄° 
ù_addr_t
 
ù_addr_brﬂdˇ°
;

351 
	#IP_ADDR_ANY
 
IP4_ADDR_ANY


	)

357 
	#IP4_ADDR_ANY
 (&
ù_addr_™y
)

	)

363 
	#IP4_ADDR_ANY4
 (
	`ù_2_ù4
(&
ù_addr_™y
))

	)

366 
	#IP_ADDR_BROADCAST
 (&
ù_addr_brﬂdˇ°
)

	)

368 
	#IP4_ADDR_BROADCAST
 (
	`ù_2_ù4
(&
ù_addr_brﬂdˇ°
))

	)

372 #i‡
LWIP_IPV6


374 c⁄° 
ù_addr_t
 
ù6_addr_™y
;

381 
	#IP6_ADDR_ANY
 (&
ù6_addr_™y
)

	)

387 
	#IP6_ADDR_ANY6
 (
	`ù_2_ù6
(&
ù6_addr_™y
))

	)

389 #i‡!
LWIP_IPV4


391 
	#IP_ADDR_ANY
 
IP6_ADDR_ANY


	)

396 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


398 
	#IP_ANY_TYPE
 (&
ù_addr_™y_ty≥
)

	)

400 
	#IP_ANY_TYPE
 
IP_ADDR_ANY


	)

403 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/mem.h

37 #i‚de‡
LWIP_HDR_MEM_H


38 
	#LWIP_HDR_MEM_H


	)

40 
	~"lwù/›t.h
"

42 #ifde‡
__˝lu•lus


46 #i‡
MEM_LIBC_MALLOC


48 
	~"lwù/¨ch.h
"

50 
size_t
 
	tmem_size_t
;

51 
	#MEM_SIZE_F
 
SZT_F


	)

53 #ñi‡
MEM_USE_POOLS


55 
u16_t
 
	tmem_size_t
;

56 
	#MEM_SIZE_F
 
U16_F


	)

63 #i‡
MEM_SIZE
 > 64000L

64 
u32_t
 
	tmem_size_t
;

65 
	#MEM_SIZE_F
 
U32_F


	)

67 
u16_t
 
	tmem_size_t
;

68 
	#MEM_SIZE_F
 
U16_F


	)

72 
mem_öô
();

73 *
mem_åim
(*
mem
, 
mem_size_t
 
size
);

74 *
mem_mÆloc
(
mem_size_t
 
size
);

75 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

76 
mem_‰ì
(*
mem
);

78 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/memp.h

38 #i‚de‡
LWIP_HDR_MEMP_H


39 
	#LWIP_HDR_MEMP_H


	)

41 
	~"lwù/›t.h
"

43 #ifde‡
__˝lu•lus


48 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

49 
	~"lwù/¥iv/memp_°d.h
"

53 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

54 
	~"lwù/¥iv/memp_°d.h
"

55 
MEMP_MAX


56 } 
	tmemp_t
;

58 
	~"lwù/¥iv/memp_¥iv.h
"

59 
	~"lwù/°©s.h
"

61 c⁄° 
memp_desc
 *c⁄° 
memp_poﬁs
[
MEMP_MAX
];

67 
	#LWIP_MEMPOOL_PROTOTYPE
(
«me
Ëc⁄° 
memp_desc
 
memp_
 ## 
	)
name

69 #i‡
MEMP_MEM_MALLOC


71 
	#LWIP_MEMPOOL_DECLARE
(
«me
,
num
,
size
,
desc
) \

72 
	`LWIP_MEMPOOL_DECLARE_STATS_INSTANCE
(
memp_°©s_
 ## 
«me
) \

73 c⁄° 
memp_desc
 
memp_
 ## 
«me
 = { \

74 
	`DECLARE_LWIP_MEMPOOL_DESC
(
desc
) \

75 
	`LWIP_MEMPOOL_DECLARE_STATS_REFERENCE
(
memp_°©s_
 ## 
«me
) \

76 
	`LWIP_MEM_ALIGN_SIZE
(
size
) \

77 };

	)

95 
	#LWIP_MEMPOOL_DECLARE
(
«me
,
num
,
size
,
desc
) \

96 
	`LWIP_DECLARE_MEMORY_ALIGNED
(
memp_mem‹y_
 ## 
«me
 ## 
_ba£
, ((
num
Ë* (
MEMP_SIZE
 + 
	`MEMP_ALIGN_SIZE
(
size
)))); \

98 
	`LWIP_MEMPOOL_DECLARE_STATS_INSTANCE
(
memp_°©s_
 ## 
«me
) \

100 
memp
 *
memp_èb_
 ## 
«me
; \

102 c⁄° 
memp_desc
 
memp_
 ## 
«me
 = { \

103 
	`DECLARE_LWIP_MEMPOOL_DESC
(
desc
) \

104 
	`LWIP_MEMPOOL_DECLARE_STATS_REFERENCE
(
memp_°©s_
 ## 
«me
) \

105 
	`LWIP_MEM_ALIGN_SIZE
(
size
), \

106 (
num
), \

107 
memp_mem‹y_
 ## 
«me
 ## 
_ba£
, \

108 &
memp_èb_
 ## 
«me
 \

109 };

	)

117 
	#LWIP_MEMPOOL_INIT
(
«me
Ë
	`memp_öô_poﬁ
(&
memp_
 ##Çame)

	)

122 
	#LWIP_MEMPOOL_ALLOC
(
«me
Ë
	`memp_mÆloc_poﬁ
(&
memp_
 ##Çame)

	)

127 
	#LWIP_MEMPOOL_FREE
(
«me
, 
x
Ë
	`memp_‰ì_poﬁ
(&
memp_
 ##Çame, (x))

	)

129 #i‡
MEM_USE_POOLS


132 
	smemp_mÆloc_hñ≥r
 {

133 
memp_t
 
	gpoﬁƒ
;

134 #i‡
MEMP_OVERFLOW_CHECK
 || (
LWIP_STATS
 && 
MEM_STATS
)

135 
u16_t
 
	gsize
;

140 
memp_öô
();

142 #i‡
MEMP_OVERFLOW_CHECK


143 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° *
fûe
, c⁄° 
löe
);

144 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

146 *
memp_mÆloc
(
memp_t
 
ty≥
);

148 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

150 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/mld6.h

43 #i‚de‡
LWIP_HDR_MLD6_H


44 
	#LWIP_HDR_MLD6_H


	)

46 
	~"lwù/›t.h
"

48 #i‡
LWIP_IPV6_MLD
 && 
LWIP_IPV6


50 
	~"lwù/pbuf.h
"

51 
	~"lwù/√tif.h
"

53 #ifde‡
__˝lu•lus


58 
	smld_group
 {

60 
mld_group
 *
√xt
;

62 
ù6_addr_t
 
group_addªss
;

64 
u8_t
 
œ°_ªp‹ãr_Êag
;

66 
u8_t
 
group_°©e
;

68 
u16_t
 
timî
;

70 
u8_t
 
u£
;

73 
	#MLD6_TMR_INTERVAL
 100

	)

75 
îr_t
 
mld6_°›
(
√tif
 *netif);

76 
mld6_ªp‹t_groups
(
√tif
 *netif);

77 
mld6_tmr
();

78 
mld_group
 *
mld6_lookf‹_group
(
√tif
 *
iÂ
, c⁄° 
ù6_addr_t
 *
addr
);

79 
mld6_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

80 
îr_t
 
mld6_joögroup
(c⁄° 
ù6_addr_t
 *
§ˇddr
, c⁄° ip6_addr_à*
grou∑ddr
);

81 
îr_t
 
mld6_joögroup_√tif
(
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
grou∑ddr
);

82 
îr_t
 
mld6_Àavegroup
(c⁄° 
ù6_addr_t
 *
§ˇddr
, c⁄° ip6_addr_à*
grou∑ddr
);

83 
îr_t
 
mld6_Àavegroup_√tif
(
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
grou∑ddr
);

91 
	#√tif_mld6_d©a
(
√tif
Ë((
mld_group
 *)
	`√tif_gë_˛õ¡_d©a
“ëif, 
LWIP_NETIF_CLIENT_DATA_INDEX_MLD6
))

	)

93 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/nd6.h

44 #i‚de‡
LWIP_HDR_ND6_H


45 
	#LWIP_HDR_ND6_H


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_IPV6


51 
	~"lwù/ù6_addr.h
"

52 
	~"lwù/îr.h
"

54 #ifde‡
__˝lu•lus


59 
	#ND6_TMR_INTERVAL
 1000

	)

61 
pbuf
;

62 
√tif
;

64 
nd6_tmr
();

65 
nd6_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

66 
nd6_˛ór_de°ö©i⁄_ˇche
();

67 
√tif
 *
nd6_föd_rouã
(c⁄° 
ù6_addr_t
 *
ù6addr
);

68 
îr_t
 
nd6_gë_√xt_h›_addr_‹_queue
(
√tif
 *√tif, 
pbuf
 *
q
, c⁄° 
ù6_addr_t
 *
ù6addr
, c⁄° 
u8_t
 **
hwaddΩ
);

69 
u16_t
 
nd6_gë_de°ö©i⁄_mtu
(c⁄° 
ù6_addr_t
 *
ù6addr
, 
√tif
 *netif);

70 #i‡
LWIP_ND6_TCP_REACHABILITY_HINTS


71 
nd6_ªachabûôy_höt
(c⁄° 
ù6_addr_t
 *
ù6addr
);

73 
nd6_˛ónup_√tif
(
√tif
 *netif);

74 #i‡
LWIP_IPV6_MLD


75 
nd6_adju°_mld_membîshù
(
√tif
 *√tif, 
s8_t
 
addr_idx
, 
u8_t
 
√w_°©e
);

78 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/netbuf.h

37 #i‚de‡
LWIP_HDR_NETBUF_H


38 
	#LWIP_HDR_NETBUF_H


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_NETCONN
 || 
LWIP_SOCKET


46 
	~"lwù/pbuf.h
"

47 
	~"lwù/ù_addr.h
"

48 
	~"lwù/ù6_addr.h
"

50 #ifde‡
__˝lu•lus


55 
	#NETBUF_FLAG_DESTADDR
 0x01

	)

57 
	#NETBUF_FLAG_CHKSUM
 0x02

	)

60 
	s√tbuf
 {

61 
pbuf
 *
p
, *
±r
;

62 
ù_addr_t
 
addr
;

63 
u16_t
 
p‹t
;

64 #i‡
LWIP_NETBUF_RECVINFO
 || 
LWIP_CHECKSUM_ON_COPY


65 #i‡
LWIP_CHECKSUM_ON_COPY


66 
u8_t
 
Êags
;

68 
u16_t
 
t›‹t_chksum
;

69 #i‡
LWIP_NETBUF_RECVINFO


70 
ù_addr_t
 
tﬂddr
;

76 
√tbuf
 *
√tbuf_√w
();

77 
√tbuf_dñëe
(
√tbuf
 *
buf
);

78 *
√tbuf_Æloc
(
√tbuf
 *
buf
, 
u16_t
 
size
);

79 
√tbuf_‰ì
(
√tbuf
 *
buf
);

80 
îr_t
 
√tbuf_ªf
(
√tbuf
 *
buf
,

81 c⁄° *
d©≠å
, 
u16_t
 
size
);

82 
√tbuf_chaö
(
√tbuf
 *
hód
, √tbu‡*
èû
);

84 
îr_t
 
√tbuf_d©a
(
√tbuf
 *
buf
,

85 **
d©≠å
, 
u16_t
 *
Àn
);

86 
s8_t
 
√tbuf_√xt
(
√tbuf
 *
buf
);

87 
√tbuf_fú°
(
√tbuf
 *
buf
);

90 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

91 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

92 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

93 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

94 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

95 
	#√tbuf_‰omaddr
(
buf
Ë(&((buf)->
addr
))

	)

96 
	#√tbuf_£t_‰omaddr
(
buf
, 
‰omaddr
Ë
	`ù_addr_£t
(&((buf)->
addr
), fromaddr)

	)

97 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

98 #i‡
LWIP_NETBUF_RECVINFO


99 
	#√tbuf_de°addr
(
buf
Ë(&((buf)->
tﬂddr
))

	)

100 
	#√tbuf_£t_de°addr
(
buf
, 
de°addr
Ë
	`ù_addr_£t
(&((buf)->
tﬂddr
), de°addr)

	)

101 #i‡
LWIP_CHECKSUM_ON_COPY


102 
	#√tbuf_de°p‹t
(
buf
Ë(((buf)->
Êags
 & 
NETBUF_FLAG_DESTADDR
Ë? (buf)->
t›‹t_chksum
 : 0)

	)

104 
	#√tbuf_de°p‹t
(
buf
Ë((buf)->
t›‹t_chksum
)

	)

107 #i‡
LWIP_CHECKSUM_ON_COPY


108 
	#√tbuf_£t_chksum
(
buf
, 
chksum
Ëdÿ{ (buf)->
Êags
 = 
NETBUF_FLAG_CHKSUM
; \

109 (
buf
)->
t›‹t_chksum
 = 
chksum
; } 0)

	)

112 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/netdb.h

34 #i‚de‡
LWIP_HDR_NETDB_H


35 
	#LWIP_HDR_NETDB_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


41 
	~"lwù/¨ch.h
"

42 
	~"lwù/öë.h
"

43 
	~"lwù/sockës.h
"

45 #ifde‡
__˝lu•lus


50 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


51 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

54 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


55 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

58 #i‚de‡
LWIP_DNS_API_DEFINE_FLAGS


59 
	#LWIP_DNS_API_DEFINE_FLAGS
 1

	)

62 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


63 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

66 #i‡
LWIP_DNS_API_DEFINE_ERRORS


68 
	#EAI_NONAME
 200

	)

69 
	#EAI_SERVICE
 201

	)

70 
	#EAI_FAIL
 202

	)

71 
	#EAI_MEMORY
 203

	)

72 
	#EAI_FAMILY
 204

	)

74 
	#HOST_NOT_FOUND
 210

	)

75 
	#NO_DATA
 211

	)

76 
	#NO_RECOVERY
 212

	)

77 
	#TRY_AGAIN
 213

	)

80 #i‡
LWIP_DNS_API_DEFINE_FLAGS


82 
	#AI_PASSIVE
 0x01

	)

83 
	#AI_CANONNAME
 0x02

	)

84 
	#AI_NUMERICHOST
 0x04

	)

85 
	#AI_NUMERICSERV
 0x08

	)

86 
	#AI_V4MAPPED
 0x10

	)

87 
	#AI_ALL
 0x20

	)

88 
	#AI_ADDRCONFIG
 0x40

	)

91 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


92 
	sho°ít
 {

93 *
h_«me
;

94 **
h_Æü£s
;

96 
h_addπy≥
;

97 
h_Àngth
;

98 **
h_addr_li°
;

100 
	#h_addr
 
h_addr_li°
[0]

	)

103 
	saddröfo
 {

104 
	mai_Êags
;

105 
	mai_Ámûy
;

106 
	mai_sockty≥
;

107 
	mai_¥Ÿocﬁ
;

108 
sockÀn_t
 
	mai_addæí
;

109 
sockaddr
 *
	mai_addr
;

110 *
	mai_ˇn⁄«me
;

111 
addröfo
 *
	mai_√xt
;

115 
	#NETDB_ELEM_SIZE
 ((
addröfo
Ë+ (
sockaddr_°‹age
Ë+ 
DNS_MAX_NAME_LENGTH
 + 1)

	)

117 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


119 
h_î∫o
;

122 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

123 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

124 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

125 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

126 
lwù_gëaddröfo
(c⁄° *
nodíame
,

127 c⁄° *
£rv«me
,

128 c⁄° 
addröfo
 *
höts
,

129 
addröfo
 **
ªs
);

131 #i‡
LWIP_COMPAT_SOCKETS


133 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

135 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

136 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

138 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
◊ddröfo)

	)

140 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

141 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

144 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/netif.h

37 #i‚de‡
LWIP_HDR_NETIF_H


38 
	#LWIP_HDR_NETIF_H


	)

40 
	~"lwù/›t.h
"

42 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

44 
	~"lwù/îr.h
"

46 
	~"lwù/ù_addr.h
"

48 
	~"lwù/def.h
"

49 
	~"lwù/pbuf.h
"

50 
	~"lwù/°©s.h
"

52 #ifde‡
__˝lu•lus


62 #i‚de‡
NETIF_MAX_HWADDR_LEN


63 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

78 
	#NETIF_FLAG_UP
 0x01U

	)

81 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

87 
	#NETIF_FLAG_LINK_UP
 0x04U

	)

91 
	#NETIF_FLAG_ETHARP
 0x08U

	)

95 
	#NETIF_FLAG_ETHERNET
 0x10U

	)

98 
	#NETIF_FLAG_IGMP
 0x20U

	)

101 
	#NETIF_FLAG_MLD6
 0x40U

	)

107 
	elwù_öã∫Æ_√tif_˛õ¡_d©a_ödex
 {

108 #i‡
LWIP_DHCP


109 
LWIP_NETIF_CLIENT_DATA_INDEX_DHCP
,

111 #i‡
LWIP_AUTOIP


112 
LWIP_NETIF_CLIENT_DATA_INDEX_AUTOIP
,

114 #i‡
LWIP_IGMP


115 
LWIP_NETIF_CLIENT_DATA_INDEX_IGMP
,

117 #i‡
LWIP_IPV6_MLD


118 
LWIP_NETIF_CLIENT_DATA_INDEX_MLD6
,

120 
LWIP_NETIF_CLIENT_DATA_INDEX_MAX


123 #i‡
LWIP_CHECKSUM_CTRL_PER_NETIF


124 
	#NETIF_CHECKSUM_GEN_IP
 0x0001

	)

125 
	#NETIF_CHECKSUM_GEN_UDP
 0x0002

	)

126 
	#NETIF_CHECKSUM_GEN_TCP
 0x0004

	)

127 
	#NETIF_CHECKSUM_GEN_ICMP
 0x0008

	)

128 
	#NETIF_CHECKSUM_GEN_ICMP6
 0x0010

	)

129 
	#NETIF_CHECKSUM_CHECK_IP
 0x0100

	)

130 
	#NETIF_CHECKSUM_CHECK_UDP
 0x0200

	)

131 
	#NETIF_CHECKSUM_CHECK_TCP
 0x0400

	)

132 
	#NETIF_CHECKSUM_CHECK_ICMP
 0x0800

	)

133 
	#NETIF_CHECKSUM_CHECK_ICMP6
 0x1000

	)

134 
	#NETIF_CHECKSUM_ENABLE_ALL
 0xFFFF

	)

135 
	#NETIF_CHECKSUM_DISABLE_ALL
 0x0000

	)

138 
√tif
;

142 
	e√tif_mac_fûãr_a˘i⁄
 {

144 
NETIF_DEL_MAC_FILTER
 = 0,

146 
NETIF_ADD_MAC_FILTER
 = 1

154 
îr_t
 (*
	t√tif_öô_‚
)(
	t√tif
 *netif);

161 
îr_t
 (*
	t√tif_öput_‚
)(
	tpbuf
 *
	tp
, 
	t√tif
 *
	töp
);

163 #i‡
LWIP_IPV4


172 
îr_t
 (*
	t√tif_ouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
,

173 c⁄° 
	tù4_addr_t
 *
	tùaddr
);

176 #i‡
LWIP_IPV6


185 
îr_t
 (*
	t√tif_ouçut_ù6_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
,

186 c⁄° 
	tù6_addr_t
 *
	tùaddr
);

195 
îr_t
 (*
	t√tif_lökouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
);

197 (*
√tif_°©us_ˇŒback_‚
)(
	t√tif
 *netif);

198 #i‡
LWIP_IPV4
 && 
LWIP_IGMP


200 
îr_t
 (*
	t√tif_igmp_mac_fûãr_‚
)(
	t√tif
 *netif,

201 c⁄° 
	tù4_addr_t
 *
	tgroup
, 
	t√tif_mac_fûãr_a˘i⁄
 
	ta˘i⁄
);

203 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_MLD


205 
îr_t
 (*
	t√tif_mld_mac_fûãr_‚
)(
	t√tif
 *netif,

206 c⁄° 
	tù6_addr_t
 *
	tgroup
, 
	t√tif_mac_fûãr_a˘i⁄
 
	ta˘i⁄
);

209 #i‡
LWIP_DHCP
 || 
LWIP_AUTOIP
 || 
LWIP_IGMP
 || 
LWIP_IPV6_MLD
 || (
LWIP_NUM_NETIF_CLIENT_DATA
 > 0)

210 
u8_t
 
√tif_Æloc_˛õ¡_d©a_id
();

214 
	#√tif_£t_˛õ¡_d©a
(
√tif
, 
id
, 
d©a
Ë
	`√tif_gë_˛õ¡_d©a
“ëif, idË(d©a)

	)

218 
	#√tif_gë_˛õ¡_d©a
(
√tif
, 
id
Ë“ëif)->
˛õ¡_d©a
[(id)]

	)

224 
	s√tif
 {

226 
√tif
 *
√xt
;

228 #i‡
LWIP_IPV4


230 
ù_addr_t
 
ù_addr
;

231 
ù_addr_t
 
√tmask
;

232 
ù_addr_t
 
gw
;

234 #i‡
LWIP_IPV6


236 
ù_addr_t
 
ù6_addr
[
LWIP_IPV6_NUM_ADDRESSES
];

239 
u8_t
 
ù6_addr_°©e
[
LWIP_IPV6_NUM_ADDRESSES
];

243 
√tif_öput_‚
 
öput
;

244 #i‡
LWIP_IPV4


249 
√tif_ouçut_‚
 
ouçut
;

254 
√tif_lökouçut_‚
 
lökouçut
;

255 #i‡
LWIP_IPV6


260 
√tif_ouçut_ù6_‚
 
ouçut_ù6
;

262 #i‡
LWIP_NETIF_STATUS_CALLBACK


265 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
;

267 #i‡
LWIP_NETIF_LINK_CALLBACK


270 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
;

272 #i‡
LWIP_NETIF_REMOVE_CALLBACK


274 
√tif_°©us_ˇŒback_‚
 
ªmove_ˇŒback
;

278 *
°©e
;

279 #ifde‡
√tif_gë_˛õ¡_d©a


280 *
˛õ¡_d©a
[
LWIP_NETIF_CLIENT_DATA_INDEX_MAX
 + 
LWIP_NUM_NETIF_CLIENT_DATA
];

282 #i‡
LWIP_IPV6_AUTOCONFIG


284 
u8_t
 
ù6_autoc⁄fig_íabÀd
;

286 #i‡
LWIP_IPV6_SEND_ROUTER_SOLICIT


288 
u8_t
 
rs_cou¡
;

290 #i‡
LWIP_NETIF_HOSTNAME


292 c⁄° *
ho°«me
;

294 #i‡
LWIP_CHECKSUM_CTRL_PER_NETIF


295 
u16_t
 
chksum_Êags
;

298 
u16_t
 
mtu
;

300 
u8_t
 
hwaddr_Àn
;

302 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

304 
u8_t
 
Êags
;

306 
«me
[2];

308 
u8_t
 
num
;

309 #i‡
MIB2_STATS


311 
u8_t
 
lök_ty≥
;

313 
u32_t
 
lök_•ìd
;

315 
u32_t
 
ts
;

317 
°©s_mib2_√tif_˘rs
 
mib2_cou¡îs
;

319 #i‡
LWIP_IPV4
 && 
LWIP_IGMP


322 
√tif_igmp_mac_fûãr_‚
 
igmp_mac_fûãr
;

324 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_MLD


327 
√tif_mld_mac_fûãr_‚
 
mld_mac_fûãr
;

329 #i‡
LWIP_NETIF_HWADDRHINT


330 
u8_t
 *
addr_höt
;

332 #i‡
ENABLE_LOOPBACK


334 
pbuf
 *
lo›_fú°
;

335 
pbuf
 *
lo›_œ°
;

336 #i‡
LWIP_LOOPBACK_MAX_PBUFS


337 
u16_t
 
lo›_˙t_cuºít
;

342 #i‡
LWIP_CHECKSUM_CTRL_PER_NETIF


343 
	#NETIF_SET_CHECKSUM_CTRL
(
√tif
, 
chksumÊags
) do { \

344 (
√tif
)->
chksum_Êags
 = 
chksumÊags
; } 0)

	)

345 
	#IF__NETIF_CHECKSUM_ENABLED
(
√tif
, 
chksumÊag
Ëi‡((“ëifË=
NULL
Ë|| ((“ëif)->
chksum_Êags
 & (chksumÊag)Ë!0))

	)

347 
	#NETIF_SET_CHECKSUM_CTRL
(
√tif
, 
chksumÊags
)

	)

348 
	#IF__NETIF_CHECKSUM_ENABLED
(
√tif
, 
chksumÊag
)

	)

352 
√tif
 *
√tif_li°
;

354 
√tif
 *
√tif_deÁu…
;

356 
√tif_öô
();

358 
√tif
 *
√tif_add
(netif *netif,

359 #i‡
LWIP_IPV4


360 c⁄° 
ù4_addr_t
 *
ùaddr
, c⁄° ip4_addr_à*
√tmask
, c⁄° ip4_addr_à*
gw
,

362 *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
);

363 #i‡
LWIP_IPV4


364 
√tif_£t_addr
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
, c⁄° ip4_addr_à*
√tmask
,

365 c⁄° 
ù4_addr_t
 *
gw
);

367 
√tif_ªmove
(
√tif
 *netif);

373 
√tif
 *
√tif_föd
(c⁄° *
«me
);

375 
√tif_£t_deÁu…
(
√tif
 *netif);

377 #i‡
LWIP_IPV4


378 
√tif_£t_ùaddr
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
);

379 
√tif_£t_√tmask
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
√tmask
);

380 
√tif_£t_gw
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
gw
);

382 
	#√tif_ù4_addr
(
√tif
Ë((c⁄° 
ù4_addr_t
*)
	`ù_2_ù4
(&(“ëif)->
ù_addr
)))

	)

384 
	#√tif_ù4_√tmask
(
√tif
Ë((c⁄° 
ù4_addr_t
*)
	`ù_2_ù4
(&(“ëif)->
√tmask
)))

	)

386 
	#√tif_ù4_gw
(
√tif
Ë((c⁄° 
ù4_addr_t
*)
	`ù_2_ù4
(&(“ëif)->
gw
)))

	)

388 
	#√tif_ù_addr4
(
√tif
Ë((c⁄° 
ù_addr_t
*)&(“ëif)->
ù_addr
))

	)

390 
	#√tif_ù_√tmask4
(
√tif
Ë((c⁄° 
ù_addr_t
*)&(“ëif)->
√tmask
))

	)

392 
	#√tif_ù_gw4
(
√tif
Ë((c⁄° 
ù_addr_t
*)&(“ëif)->
gw
))

	)

395 
√tif_£t_up
(
√tif
 *netif);

396 
√tif_£t_down
(
√tif
 *netif);

400 
	#√tif_is_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

402 #i‡
LWIP_NETIF_STATUS_CALLBACK


403 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
);

405 #i‡
LWIP_NETIF_REMOVE_CALLBACK


406 
√tif_£t_ªmove_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
ªmove_ˇŒback
);

409 
√tif_£t_lök_up
(
√tif
 *netif);

410 
√tif_£t_lök_down
(
√tif
 *netif);

412 
	#√tif_is_lök_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_LINK_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

414 #i‡
LWIP_NETIF_LINK_CALLBACK


415 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
);

418 #i‡
LWIP_NETIF_HOSTNAME


420 
	#√tif_£t_ho°«me
(
√tif
, 
«me
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
ho°«me
 =Çame; }}0)

	)

422 
	#√tif_gë_ho°«me
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
ho°«me
Ë: NULL)

	)

425 #i‡
LWIP_IGMP


427 
	#√tif_£t_igmp_mac_fûãr
(
√tif
, 
fun˘i⁄
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
igmp_mac_fûãr
 = fun˘i⁄; }}0)

	)

428 
	#√tif_gë_igmp_mac_fûãr
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
igmp_mac_fûãr
Ë: NULL)

	)

431 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_MLD


433 
	#√tif_£t_mld_mac_fûãr
(
√tif
, 
fun˘i⁄
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
mld_mac_fûãr
 = fun˘i⁄; }}0)

	)

434 
	#√tif_gë_mld_mac_fûãr
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
mld_mac_fûãr
Ë: NULL)

	)

435 
	#√tif_mld_mac_fûãr
(
√tif
, 
addr
, 
a˘i⁄
Ëdÿ{ if(“ëifË&& (√tif)->
mld_mac_fûãr
Ë{ (√tif)->
	`mld_mac_fûãr
(“ëif), (addr), (a˘i⁄)); }}0)

	)

438 #i‡
ENABLE_LOOPBACK


439 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
);

440 
√tif_pﬁl
(
√tif
 *netif);

441 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


442 
√tif_pﬁl_Æl
();

446 
îr_t
 
√tif_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

448 #i‡
LWIP_IPV6


450 
	#√tif_ù_addr6
(
√tif
, 
i
Ë((c⁄° 
ù_addr_t
*)(&(“ëif)->
ù6_addr
[i])))

	)

452 
	#√tif_ù6_addr
(
√tif
, 
i
Ë((c⁄° 
ù6_addr_t
*)
	`ù_2_ù6
(&(“ëif)->
ù6_addr
[i])))

	)

453 
√tif_ù6_addr_£t
(
√tif
 *√tif, 
s8_t
 
addr_idx
, c⁄° 
ù6_addr_t
 *
addr6
);

454 
√tif_ù6_addr_£t_∑πs
(
√tif
 *√tif, 
s8_t
 
addr_idx
, 
u32_t
 
i0
, u32_à
i1
, u32_à
i2
, u32_à
i3
);

455 
	#√tif_ù6_addr_°©e
(
√tif
, 
i
Ë(“ëif)->
ù6_addr_°©e
[i])

	)

456 
√tif_ù6_addr_£t_°©e
(
√tif
 *√tif, 
s8_t
 
addr_idx
, 
u8_t
 
°©e
);

457 
s8_t
 
√tif_gë_ù6_addr_m©ch
(
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
ù6addr
);

458 
√tif_¸óã_ù6_lökloˇl_addªss
(
√tif
 *√tif, 
u8_t
 
‰om_mac_48bô
);

459 
îr_t
 
√tif_add_ù6_addªss
(
√tif
 *√tif, c⁄° 
ù6_addr_t
 *
ù6addr
, 
s8_t
 *
cho£n_idx
);

460 
	#√tif_£t_ù6_autoc⁄fig_íabÀd
(
√tif
, 
a˘i⁄
Ëdÿ{ if“ëifË{ (√tif)->
ù6_autoc⁄fig_íabÀd
 = (a˘i⁄); }}0)

	)

463 #i‡
LWIP_NETIF_HWADDRHINT


464 
	#NETIF_SET_HWADDRHINT
(
√tif
, 
höt
Ë(“ëif)->
addr_höt
 = (höt))

	)

466 
	#NETIF_SET_HWADDRHINT
(
√tif
, 
höt
)

	)

469 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/netifapi.h

32 #i‚de‡
LWIP_HDR_NETIFAPI_H


33 
	#LWIP_HDR_NETIFAPI_H


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETIF_API


39 
	~"lwù/sys.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/dh˝.h
"

42 
	~"lwù/autoù.h
"

43 
	~"lwù/¥iv/t˝ù_¥iv.h
"

45 #ifde‡
__˝lu•lus


49 #i‡
LWIP_MPU_COMPATIBLE


50 
	#NETIFAPI_IPADDR_DEF
(
ty≥
, 
m
Ëty≥ 
	)
m

52 
	#NETIFAPI_IPADDR_DEF
(
ty≥
, 
m
Ëc⁄°Åy≥ * 
	)
m

55 (*
√tiÁpi_void_‚
)(
	t√tif
 *netif);

56 
îr_t
 (*
	t√tiÁpi_îπ_‚
)(
	t√tif
 *netif);

58 
	s√tiÁpi_msg
 {

59 
t˝ù_≠i_ˇŒ_d©a
 
ˇŒ
;

60 
√tif
 *netif;

63 #i‡
LWIP_IPV4


64 
NETIFAPI_IPADDR_DEF
(
ù4_addr_t
, 
ùaddr
);

65 
NETIFAPI_IPADDR_DEF
(
ù4_addr_t
, 
√tmask
);

66 
NETIFAPI_IPADDR_DEF
(
ù4_addr_t
, 
gw
);

68 *
°©e
;

69 
√tif_öô_‚
 
öô
;

70 
√tif_öput_‚
 
öput
;

71 } 
add
;

73 
√tiÁpi_void_‚
 
voidfunc
;

74 
√tiÁpi_îπ_‚
 
îπfunc
;

75 } 
comm⁄
;

76 } 
msg
;

81 
îr_t
 
√tiÁpi_√tif_add
(
√tif
 *netif,

82 #i‡
LWIP_IPV4


83 c⁄° 
ù4_addr_t
 *
ùaddr
, c⁄° ip4_addr_à*
√tmask
, c⁄° ip4_addr_à*
gw
,

85 *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
);

87 #i‡
LWIP_IPV4


88 
îr_t
 
√tiÁpi_√tif_£t_addr
(
√tif
 *√tif, c⁄° 
ù4_addr_t
 *
ùaddr
,

89 c⁄° 
ù4_addr_t
 *
√tmask
, c⁄° ip4_addr_à*
gw
);

92 
îr_t
 
√tiÁpi_√tif_comm⁄
(
√tif
 *√tif, 
√tiÁpi_void_‚
 
voidfunc
,

93 
√tiÁpi_îπ_‚
 
îπfunc
);

96 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

98 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

100 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

102 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

104 
	#√tiÁpi_√tif_£t_lök_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_lök_up
, 
NULL
)

	)

106 
	#√tiÁpi_√tif_£t_lök_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_lök_down
, 
NULL
)

	)

114 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

116 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

118 
	#√tiÁpi_dh˝_öf‹m
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_öf‹m
, 
NULL
)

	)

120 
	#√tiÁpi_dh˝_ª√w
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_ª√w
)

	)

122 
	#√tiÁpi_dh˝_ªÀa£
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_ªÀa£
)

	)

130 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

132 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

134 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/opt.h

44 #i‡!
deföed
 
LWIP_HDR_OPT_H


45 
	#LWIP_HDR_OPT_H


	)

51 
	~"lwù›ts.h
"

52 
	~"lwù/debug.h
"

88 #i‡!
deföed
 
NO_SYS
 || deföed 
__DOXYGEN__


89 
	#NO_SYS
 0

	)

105 #i‡!
deföed
 
LWIP_TIMERS
 || deföed 
__DOXYGEN__


106 #ifde‡
NO_SYS_NO_TIMERS


107 
	#LWIP_TIMERS
 (!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

	)

109 
	#LWIP_TIMERS
 1

	)

120 #i‡!
deföed
 
LWIP_TIMERS_CUSTOM
 || deföed 
__DOXYGEN__


121 
	#LWIP_TIMERS_CUSTOM
 0

	)

136 #i‡!
deföed
 
MEMCPY
 || deföed 
__DOXYGEN__


137 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

144 #i‡!
deföed
 
SMEMCPY
 || deföed 
__DOXYGEN__


145 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

168 #i‡!
deföed
 
LWIP_MPU_COMPATIBLE
 || deföed 
__DOXYGEN__


169 
	#LWIP_MPU_COMPATIBLE
 0

	)

180 #i‡!
deföed
 
LWIP_TCPIP_CORE_LOCKING
 || deföed 
__DOXYGEN__


181 
	#LWIP_TCPIP_CORE_LOCKING
 1

	)

192 #i‡!
deföed
 
LWIP_TCPIP_CORE_LOCKING_INPUT
 || deföed 
__DOXYGEN__


193 
	#LWIP_TCPIP_CORE_LOCKING_INPUT
 0

	)

203 #i‡!
deföed
 
SYS_LIGHTWEIGHT_PROT
 || deföed 
__DOXYGEN__


204 
	#SYS_LIGHTWEIGHT_PROT
 1

	)

225 #i‡!
deföed
 
MEM_LIBC_MALLOC
 || deföed 
__DOXYGEN__


226 
	#MEM_LIBC_MALLOC
 0

	)

238 #i‡!
deföed
 
MEMP_MEM_MALLOC
 || deföed 
__DOXYGEN__


239 
	#MEMP_MEM_MALLOC
 0

	)

247 #i‡!
deföed
 
MEM_ALIGNMENT
 || deföed 
__DOXYGEN__


248 
	#MEM_ALIGNMENT
 1

	)

255 #i‡!
deföed
 
MEM_SIZE
 || deföed 
__DOXYGEN__


256 
	#MEM_SIZE
 1600

	)

268 #i‡!
deföed
 
MEMP_OVERFLOW_CHECK
 || deföed 
__DOXYGEN__


269 
	#MEMP_OVERFLOW_CHECK
 0

	)

276 #i‡!
deföed
 
MEMP_SANITY_CHECK
 || deföed 
__DOXYGEN__


277 
	#MEMP_SANITY_CHECK
 0

	)

286 #i‡!
deföed
 
MEM_USE_POOLS
 || deföed 
__DOXYGEN__


287 
	#MEM_USE_POOLS
 0

	)

294 #i‡!
deföed
 
MEM_USE_POOLS_TRY_BIGGER_POOL
 || deföed 
__DOXYGEN__


295 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

304 #i‡!
deföed
 
MEMP_USE_CUSTOM_POOLS
 || deföed 
__DOXYGEN__


305 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

326 #i‡!
deföed
 
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 || deföed 
__DOXYGEN__


327 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

348 #i‡!
deföed
 
MEMP_NUM_PBUF
 || deföed 
__DOXYGEN__


349 
	#MEMP_NUM_PBUF
 16

	)

356 #i‡!
deföed
 
MEMP_NUM_RAW_PCB
 || deföed 
__DOXYGEN__


357 
	#MEMP_NUM_RAW_PCB
 4

	)

365 #i‡!
deföed
 
MEMP_NUM_UDP_PCB
 || deföed 
__DOXYGEN__


366 
	#MEMP_NUM_UDP_PCB
 4

	)

373 #i‡!
deföed
 
MEMP_NUM_TCP_PCB
 || deföed 
__DOXYGEN__


374 
	#MEMP_NUM_TCP_PCB
 5

	)

381 #i‡!
deföed
 
MEMP_NUM_TCP_PCB_LISTEN
 || deföed 
__DOXYGEN__


382 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

389 #i‡!
deföed
 
MEMP_NUM_TCP_SEG
 || deföed 
__DOXYGEN__


390 
	#MEMP_NUM_TCP_SEG
 16

	)

397 #i‡!
deföed
 
MEMP_NUM_REASSDATA
 || deföed 
__DOXYGEN__


398 
	#MEMP_NUM_REASSDATA
 5

	)

408 #i‡!
deföed
 
MEMP_NUM_FRAG_PBUF
 || deföed 
__DOXYGEN__


409 
	#MEMP_NUM_FRAG_PBUF
 15

	)

418 #i‡!
deföed
 
MEMP_NUM_ARP_QUEUE
 || deföed 
__DOXYGEN__


419 
	#MEMP_NUM_ARP_QUEUE
 30

	)

428 #i‡!
deföed
 
MEMP_NUM_IGMP_GROUP
 || deföed 
__DOXYGEN__


429 
	#MEMP_NUM_IGMP_GROUP
 8

	)

437 #i‡!
deföed
 
MEMP_NUM_SYS_TIMEOUT
 || deföed 
__DOXYGEN__


438 
	#MEMP_NUM_SYS_TIMEOUT
 (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + (
PPP_SUPPORT
*6*
MEMP_NUM_PPP_PCB
Ë+ (
LWIP_IPV6
 ? (1 + 
LWIP_IPV6_REASS
 + 
LWIP_IPV6_MLD
Ë: 0))

	)

445 #i‡!
deföed
 
MEMP_NUM_NETBUF
 || deföed 
__DOXYGEN__


446 
	#MEMP_NUM_NETBUF
 2

	)

453 #i‡!
deföed
 
MEMP_NUM_NETCONN
 || deföed 
__DOXYGEN__


454 
	#MEMP_NUM_NETCONN
 4

	)

462 #i‡!
deföed
 
MEMP_NUM_TCPIP_MSG_API
 || deföed 
__DOXYGEN__


463 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

471 #i‡!
deföed
 
MEMP_NUM_TCPIP_MSG_INPKT
 || deföed 
__DOXYGEN__


472 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

479 #i‡!
deföed
 
MEMP_NUM_NETDB
 || deföed 
__DOXYGEN__


480 
	#MEMP_NUM_NETDB
 1

	)

487 #i‡!
deföed
 
MEMP_NUM_LOCALHOSTLIST
 || deföed 
__DOXYGEN__


488 
	#MEMP_NUM_LOCALHOSTLIST
 1

	)

494 #i‡!
deföed
 
PBUF_POOL_SIZE
 || deföed 
__DOXYGEN__


495 
	#PBUF_POOL_SIZE
 16

	)

501 #i‡!
deföed
 
MEMP_NUM_API_MSG
 || deföed 
__DOXYGEN__


502 
	#MEMP_NUM_API_MSG
 
MEMP_NUM_TCPIP_MSG_API


	)

507 #i‡!
deföed
 
MEMP_NUM_DNS_API_MSG
 || deföed 
__DOXYGEN__


508 
	#MEMP_NUM_DNS_API_MSG
 
MEMP_NUM_TCPIP_MSG_API


	)

514 #i‡!
deföed
 
MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA
 || deföed 
__DOXYGEN__


515 
	#MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA
 
MEMP_NUM_TCPIP_MSG_API


	)

521 #i‡!
deföed
 
MEMP_NUM_NETIFAPI_MSG
 || deföed 
__DOXYGEN__


522 
	#MEMP_NUM_NETIFAPI_MSG
 
MEMP_NUM_TCPIP_MSG_API


	)

541 #i‡!
deföed
 
LWIP_ARP
 || deföed 
__DOXYGEN__


542 
	#LWIP_ARP
 1

	)

548 #i‡!
deföed
 
ARP_TABLE_SIZE
 || deföed 
__DOXYGEN__


549 
	#ARP_TABLE_SIZE
 10

	)

556 #i‡!
deföed
 
ARP_MAXAGE
 || deföed 
__DOXYGEN__


557 
	#ARP_MAXAGE
 300

	)

567 #i‡!
deföed
 
ARP_QUEUEING
 || deföed 
__DOXYGEN__


568 
	#ARP_QUEUEING
 0

	)

575 #i‡!
deföed
 
ARP_QUEUE_LEN
 || deföed 
__DOXYGEN__


576 
	#ARP_QUEUE_LEN
 3

	)

589 #i‡!
deföed
 
ETHARP_SUPPORT_VLAN
 || deföed 
__DOXYGEN__


590 
	#ETHARP_SUPPORT_VLAN
 0

	)

595 #i‡!
deföed
 
LWIP_ETHERNET
 || deföed 
__DOXYGEN__


596 
	#LWIP_ETHERNET
 
LWIP_ARP


	)

604 #i‡!
deföed
 
ETH_PAD_SIZE
 || deföed 
__DOXYGEN__


605 
	#ETH_PAD_SIZE
 0

	)

611 #i‡!
deföed
 
ETHARP_SUPPORT_STATIC_ENTRIES
 || deföed 
__DOXYGEN__


612 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 0

	)

619 #i‡!
deföed
 
ETHARP_TABLE_MATCH_NETIF
 || deföed 
__DOXYGEN__


620 
	#ETHARP_TABLE_MATCH_NETIF
 0

	)

639 #i‡!
deföed
 
LWIP_IPV4
 || deföed 
__DOXYGEN__


640 
	#LWIP_IPV4
 1

	)

648 #i‡!
deföed
 
IP_FORWARD
 || deföed 
__DOXYGEN__


649 
	#IP_FORWARD
 0

	)

657 #i‡!
deföed
 
IP_REASSEMBLY
 || deföed 
__DOXYGEN__


658 
	#IP_REASSEMBLY
 1

	)

666 #i‡!
deföed
 
IP_FRAG
 || deföed 
__DOXYGEN__


667 
	#IP_FRAG
 1

	)

670 #i‡!
LWIP_IPV4


672 #unde‡
IP_FORWARD


673 
	#IP_FORWARD
 0

	)

674 #unde‡
IP_REASSEMBLY


675 
	#IP_REASSEMBLY
 0

	)

676 #unde‡
IP_FRAG


677 
	#IP_FRAG
 0

	)

685 #i‡!
deföed
 
IP_OPTIONS_ALLOWED
 || deföed 
__DOXYGEN__


686 
	#IP_OPTIONS_ALLOWED
 1

	)

694 #i‡!
deföed
 
IP_REASS_MAXAGE
 || deföed 
__DOXYGEN__


695 
	#IP_REASS_MAXAGE
 3

	)

704 #i‡!
deföed
 
IP_REASS_MAX_PBUFS
 || deföed 
__DOXYGEN__


705 
	#IP_REASS_MAX_PBUFS
 10

	)

711 #i‡!
deföed
 
IP_DEFAULT_TTL
 || deföed 
__DOXYGEN__


712 
	#IP_DEFAULT_TTL
 255

	)

720 #i‡!
deföed
 
IP_SOF_BROADCAST
 || deföed 
__DOXYGEN__


721 
	#IP_SOF_BROADCAST
 0

	)

728 #i‡!
deföed
 
IP_SOF_BROADCAST_RECV
 || deföed 
__DOXYGEN__


729 
	#IP_SOF_BROADCAST_RECV
 0

	)

739 #i‡!
deföed
 
IP_FORWARD_ALLOW_TX_ON_RX_NETIF
 || deföed 
__DOXYGEN__


740 
	#IP_FORWARD_ALLOW_TX_ON_RX_NETIF
 0

	)

748 #i‡!
deföed
 
LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
 || deföed 
__DOXYGEN__


749 
	#LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
 0

	)

769 #i‡!
deföed
 
LWIP_ICMP
 || deföed 
__DOXYGEN__


770 
	#LWIP_ICMP
 1

	)

776 #i‡!
deföed
 
ICMP_TTL
 || deföed 
__DOXYGEN__


777 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

783 #i‡!
deföed
 
LWIP_BROADCAST_PING
 || deföed 
__DOXYGEN__


784 
	#LWIP_BROADCAST_PING
 0

	)

790 #i‡!
deföed
 
LWIP_MULTICAST_PING
 || deföed 
__DOXYGEN__


791 
	#LWIP_MULTICAST_PING
 0

	)

810 #i‡!
deföed
 
LWIP_RAW
 || deföed 
__DOXYGEN__


811 
	#LWIP_RAW
 0

	)

817 #i‡!
deföed
 
RAW_TTL
 || deföed 
__DOXYGEN__


818 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

837 #i‡!
deföed
 
LWIP_DHCP
 || deföed 
__DOXYGEN__


838 
	#LWIP_DHCP
 0

	)

840 #i‡!
LWIP_IPV4


842 #unde‡
LWIP_DHCP


843 
	#LWIP_DHCP
 0

	)

849 #i‡!
deföed
 
DHCP_DOES_ARP_CHECK
 || deföed 
__DOXYGEN__


850 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

859 #i‡!
deföed
 
LWIP_DHCP_CHECK_LINK_UP


860 
	#LWIP_DHCP_CHECK_LINK_UP
 0

	)

866 #i‡!
deföed
 
LWIP_DHCP_BOOTP_FILE
 || deföed 
__DOXYGEN__


867 
	#LWIP_DHCP_BOOTP_FILE
 0

	)

875 #i‡!
deföed
 
LWIP_DHCP_GET_NTP_SRV
 || deföed 
__DOXYGEN__


876 
	#LWIP_DHCP_GET_NTP_SRV
 0

	)

882 #i‡!
deföed
 
LWIP_DHCP_MAX_NTP_SERVERS
 || deföed 
__DOXYGEN__


883 
	#LWIP_DHCP_MAX_NTP_SERVERS
 1

	)

891 #i‡!
deföed
 
LWIP_DHCP_MAX_DNS_SERVERS
 || deföed 
__DOXYGEN__


892 
	#LWIP_DHCP_MAX_DNS_SERVERS
 
DNS_MAX_SERVERS


	)

911 #i‡!
deföed
 
LWIP_AUTOIP
 || deföed 
__DOXYGEN__


912 
	#LWIP_AUTOIP
 0

	)

914 #i‡!
LWIP_IPV4


916 #unde‡
LWIP_AUTOIP


917 
	#LWIP_AUTOIP
 0

	)

924 #i‡!
deföed
 
LWIP_DHCP_AUTOIP_COOP
 || deföed 
__DOXYGEN__


925 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

935 #i‡!
deföed
 
LWIP_DHCP_AUTOIP_COOP_TRIES
 || deföed 
__DOXYGEN__


936 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

957 #i‡!
deföed
 
LWIP_MIB2_CALLBACKS
 || deföed 
__DOXYGEN__


958 
	#LWIP_MIB2_CALLBACKS
 0

	)

977 #i‡!
deföed
 
LWIP_IGMP
 || deföed 
__DOXYGEN__


978 
	#LWIP_IGMP
 0

	)

980 #i‡!
LWIP_IPV4


981 #unde‡
LWIP_IGMP


982 
	#LWIP_IGMP
 0

	)

989 #i‡!
deföed
 
LWIP_MULTICAST_TX_OPTIONS
 || deföed 
__DOXYGEN__


990 
	#LWIP_MULTICAST_TX_OPTIONS
 (
LWIP_IGMP
 && 
LWIP_UDP
)

	)

1010 #i‡!
deföed
 
LWIP_DNS
 || deföed 
__DOXYGEN__


1011 
	#LWIP_DNS
 0

	)

1015 #i‡!
deföed
 
DNS_TABLE_SIZE
 || deföed 
__DOXYGEN__


1016 
	#DNS_TABLE_SIZE
 4

	)

1020 #i‡!
deföed
 
DNS_MAX_NAME_LENGTH
 || deföed 
__DOXYGEN__


1021 
	#DNS_MAX_NAME_LENGTH
 256

	)

1028 #i‡!
deföed
 
DNS_MAX_SERVERS
 || deföed 
__DOXYGEN__


1029 
	#DNS_MAX_SERVERS
 2

	)

1033 #i‡!
deföed
 
DNS_DOES_NAME_CHECK
 || deföed 
__DOXYGEN__


1034 
	#DNS_DOES_NAME_CHECK
 1

	)

1041 #i‡!
deföed
 
LWIP_DNS_SECURE
 || deföed 
__DOXYGEN__


1042 
	#LWIP_DNS_SECURE
 (
LWIP_DNS_SECURE_RAND_XID
 | 
LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING
 | 
LWIP_DNS_SECURE_RAND_SRC_PORT
)

	)

1046 
	#LWIP_DNS_SECURE_RAND_XID
 1

	)

1047 
	#LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING
 2

	)

1048 
	#LWIP_DNS_SECURE_RAND_SRC_PORT
 4

	)

1058 #i‡!
deföed
 
DNS_LOCAL_HOSTLIST
 || deföed 
__DOXYGEN__


1059 
	#DNS_LOCAL_HOSTLIST
 0

	)

1064 #i‡!
deföed
 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 || deföed 
__DOXYGEN__


1065 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

1070 #i‡!
deföed
 
LWIP_DNS_SUPPORT_MDNS_QUERIES
 || deföed 
__DOXYGEN__


1071 
	#LWIP_DNS_SUPPORT_MDNS_QUERIES
 0

	)

1090 #i‡!
deföed
 
LWIP_UDP
 || deföed 
__DOXYGEN__


1091 
	#LWIP_UDP
 1

	)

1097 #i‡!
deföed
 
LWIP_UDPLITE
 || deföed 
__DOXYGEN__


1098 
	#LWIP_UDPLITE
 0

	)

1104 #i‡!
deföed
 
UDP_TTL
 || deföed 
__DOXYGEN__


1105 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

1111 #i‡!
deföed
 
LWIP_NETBUF_RECVINFO
 || deföed 
__DOXYGEN__


1112 
	#LWIP_NETBUF_RECVINFO
 0

	)

1131 #i‡!
deföed
 
LWIP_TCP
 || deföed 
__DOXYGEN__


1132 
	#LWIP_TCP
 1

	)

1138 #i‡!
deföed
 
TCP_TTL
 || deföed 
__DOXYGEN__


1139 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

1149 #i‡!
deföed
 
TCP_WND
 || deföed 
__DOXYGEN__


1150 
	#TCP_WND
 (4 * 
TCP_MSS
)

	)

1156 #i‡!
deföed
 
TCP_MAXRTX
 || deföed 
__DOXYGEN__


1157 
	#TCP_MAXRTX
 12

	)

1163 #i‡!
deföed
 
TCP_SYNMAXRTX
 || deföed 
__DOXYGEN__


1164 
	#TCP_SYNMAXRTX
 6

	)

1171 #i‡!
deföed
 
TCP_QUEUE_OOSEQ
 || deföed 
__DOXYGEN__


1172 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

1182 #i‡!
deföed
 
TCP_MSS
 || deföed 
__DOXYGEN__


1183 
	#TCP_MSS
 536

	)

1194 #i‡!
deföed
 
TCP_CALCULATE_EFF_SEND_MSS
 || deföed 
__DOXYGEN__


1195 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

1203 #i‡!
deföed
 
TCP_SND_BUF
 || deföed 
__DOXYGEN__


1204 
	#TCP_SND_BUF
 (2 * 
TCP_MSS
)

	)

1211 #i‡!
deföed
 
TCP_SND_QUEUELEN
 || deföed 
__DOXYGEN__


1212 
	#TCP_SND_QUEUELEN
 ((4 * (
TCP_SND_BUF
Ë+ (
TCP_MSS
 - 1))/(TCP_MSS))

	)

1220 #i‡!
deföed
 
TCP_SNDLOWAT
 || deföed 
__DOXYGEN__


1221 
	#TCP_SNDLOWAT
 
	`LWIP_MIN
(
	`LWIP_MAX
(((
TCP_SND_BUF
)/2), (2 * 
TCP_MSS
Ë+ 1), (TCP_SND_BUFË- 1)

	)

1229 #i‡!
deföed
 
TCP_SNDQUEUELOWAT
 || deföed 
__DOXYGEN__


1230 
	#TCP_SNDQUEUELOWAT
 
	`LWIP_MAX
(((
TCP_SND_QUEUELEN
)/2), 5)

	)

1237 #i‡!
deföed
 
TCP_OOSEQ_MAX_BYTES
 || deföed 
__DOXYGEN__


1238 
	#TCP_OOSEQ_MAX_BYTES
 0

	)

1245 #i‡!
deföed
 
TCP_OOSEQ_MAX_PBUFS
 || deföed 
__DOXYGEN__


1246 
	#TCP_OOSEQ_MAX_PBUFS
 0

	)

1252 #i‡!
deföed
 
TCP_LISTEN_BACKLOG
 || deföed 
__DOXYGEN__


1253 
	#TCP_LISTEN_BACKLOG
 0

	)

1261 #i‡!
deföed
 
TCP_DEFAULT_LISTEN_BACKLOG
 || deföed 
__DOXYGEN__


1262 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

1279 #i‡!
deföed
 
TCP_OVERSIZE
 || deföed 
__DOXYGEN__


1280 
	#TCP_OVERSIZE
 
TCP_MSS


	)

1289 #i‡!
deföed
 
LWIP_TCP_TIMESTAMPS
 || deföed 
__DOXYGEN__


1290 
	#LWIP_TCP_TIMESTAMPS
 0

	)

1297 #i‡!
deföed
 
TCP_WND_UPDATE_THRESHOLD
 || deföed 
__DOXYGEN__


1298 
	#TCP_WND_UPDATE_THRESHOLD
 
	`LWIP_MIN
((
TCP_WND
 / 4), (
TCP_MSS
 * 4))

	)

1308 #i‡!
deföed
(
LWIP_EVENT_API
Ë&& !deföed(
LWIP_CALLBACK_API
Ë|| deföed 
__DOXYGEN__


1309 
	#LWIP_EVENT_API
 0

	)

1310 
	#LWIP_CALLBACK_API
 1

	)

1312 #i‚de‡
LWIP_EVENT_API


1313 
	#LWIP_EVENT_API
 0

	)

1315 #i‚de‡
LWIP_CALLBACK_API


1316 
	#LWIP_CALLBACK_API
 0

	)

1328 #i‡!
deföed
 
LWIP_WND_SCALE
 || deföed 
__DOXYGEN__


1329 
	#LWIP_WND_SCALE
 0

	)

1330 
	#TCP_RCV_SCALE
 0

	)

1351 #i‡!
deföed
 
PBUF_LINK_HLEN
 || deföed 
__DOXYGEN__


1352 #i‡
deföed
 
LWIP_HOOK_VLAN_SET
 && !deföed 
__DOXYGEN__


1353 
	#PBUF_LINK_HLEN
 (18 + 
ETH_PAD_SIZE
)

	)

1355 
	#PBUF_LINK_HLEN
 (14 + 
ETH_PAD_SIZE
)

	)

1363 #i‡!
deföed
 
PBUF_LINK_ENCAPSULATION_HLEN
 || deföed 
__DOXYGEN__


1364 
	#PBUF_LINK_ENCAPSULATION_HLEN
 0u

	)

1372 #i‡!
deföed
 
PBUF_POOL_BUFSIZE
 || deföed 
__DOXYGEN__


1373 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_ENCAPSULATION_HLEN
+
PBUF_LINK_HLEN
)

	)

1393 #i‡!
deföed
 
LWIP_NETIF_HOSTNAME
 || deföed 
__DOXYGEN__


1394 
	#LWIP_NETIF_HOSTNAME
 0

	)

1400 #i‡!
deföed
 
LWIP_NETIF_API
 || deföed 
__DOXYGEN__


1401 
	#LWIP_NETIF_API
 0

	)

1408 #i‡!
deföed
 
LWIP_NETIF_STATUS_CALLBACK
 || deföed 
__DOXYGEN__


1409 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

1416 #i‡!
deföed
 
LWIP_NETIF_LINK_CALLBACK
 || deföed 
__DOXYGEN__


1417 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

1424 #i‡!
deföed
 
LWIP_NETIF_REMOVE_CALLBACK
 || deföed 
__DOXYGEN__


1425 
	#LWIP_NETIF_REMOVE_CALLBACK
 0

	)

1435 #i‡!
deföed
 
LWIP_NETIF_HWADDRHINT
 || deföed 
__DOXYGEN__


1436 
	#LWIP_NETIF_HWADDRHINT
 0

	)

1448 #i‡!
deföed
 
LWIP_NETIF_TX_SINGLE_PBUF
 || deföed 
__DOXYGEN__


1449 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

1456 #i‡!
deföed
 
LWIP_NUM_NETIF_CLIENT_DATA
 || deföed 
__DOXYGEN__


1457 
	#LWIP_NUM_NETIF_CLIENT_DATA
 0

	)

1478 #i‡!
deföed
 
LWIP_HAVE_LOOPIF
 || deföed 
__DOXYGEN__


1479 
	#LWIP_HAVE_LOOPIF
 
LWIP_NETIF_LOOPBACK


	)

1485 #i‡!
deföed
 
LWIP_LOOPIF_MULTICAST
 || deföed 
__DOXYGEN__


1486 
	#LWIP_LOOPIF_MULTICAST
 0

	)

1493 #i‡!
deföed
 
LWIP_NETIF_LOOPBACK
 || deföed 
__DOXYGEN__


1494 
	#LWIP_NETIF_LOOPBACK
 0

	)

1501 #i‡!
deföed
 
LWIP_LOOPBACK_MAX_PBUFS
 || deföed 
__DOXYGEN__


1502 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

1518 #i‡!
deföed
 
LWIP_NETIF_LOOPBACK_MULTITHREADING
 || deföed 
__DOXYGEN__


1519 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

1538 #i‡!
deföed
 
TCPIP_THREAD_NAME
 || deföed 
__DOXYGEN__


1539 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1547 #i‡!
deföed
 
TCPIP_THREAD_STACKSIZE
 || deföed 
__DOXYGEN__


1548 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1556 #i‡!
deföed
 
TCPIP_THREAD_PRIO
 || deföed 
__DOXYGEN__


1557 
	#TCPIP_THREAD_PRIO
 1

	)

1565 #i‡!
deföed
 
TCPIP_MBOX_SIZE
 || deföed 
__DOXYGEN__


1566 
	#TCPIP_MBOX_SIZE
 0

	)

1573 #i‡!
deföed
 
LWIP_TCPIP_THREAD_ALIVE
 || deföed 
__DOXYGEN__


1574 
	#LWIP_TCPIP_THREAD_ALIVE
()

	)

1580 #i‡!
deföed
 
SLIPIF_THREAD_NAME
 || deföed 
__DOXYGEN__


1581 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1589 #i‡!
deföed
 
SLIPIF_THREAD_STACKSIZE
 || deföed 
__DOXYGEN__


1590 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1598 #i‡!
deföed
 
SLIPIF_THREAD_PRIO
 || deföed 
__DOXYGEN__


1599 
	#SLIPIF_THREAD_PRIO
 1

	)

1605 #i‡!
deföed
 
DEFAULT_THREAD_NAME
 || deföed 
__DOXYGEN__


1606 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1614 #i‡!
deföed
 
DEFAULT_THREAD_STACKSIZE
 || deföed 
__DOXYGEN__


1615 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1623 #i‡!
deföed
 
DEFAULT_THREAD_PRIO
 || deföed 
__DOXYGEN__


1624 
	#DEFAULT_THREAD_PRIO
 1

	)

1632 #i‡!
deföed
 
DEFAULT_RAW_RECVMBOX_SIZE
 || deföed 
__DOXYGEN__


1633 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1641 #i‡!
deföed
 
DEFAULT_UDP_RECVMBOX_SIZE
 || deföed 
__DOXYGEN__


1642 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1650 #i‡!
deföed
 
DEFAULT_TCP_RECVMBOX_SIZE
 || deföed 
__DOXYGEN__


1651 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1659 #i‡!
deföed
 
DEFAULT_ACCEPTMBOX_SIZE
 || deföed 
__DOXYGEN__


1660 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1679 #i‡!
deföed
 
LWIP_NETCONN
 || deföed 
__DOXYGEN__


1680 
	#LWIP_NETCONN
 1

	)

1686 #i‡!
deföed
 
LWIP_TCPIP_TIMEOUT
 || deföed 
__DOXYGEN__


1687 
	#LWIP_TCPIP_TIMEOUT
 0

	)

1700 #i‡!
deföed
 
LWIP_NETCONN_SEM_PER_THREAD
 || deföed 
__DOXYGEN__


1701 
	#LWIP_NETCONN_SEM_PER_THREAD
 0

	)

1712 #i‡!
deföed
 
LWIP_NETCONN_FULLDUPLEX
 || deföed 
__DOXYGEN__


1713 
	#LWIP_NETCONN_FULLDUPLEX
 0

	)

1732 #i‡!
deföed
 
LWIP_SOCKET
 || deföed 
__DOXYGEN__


1733 
	#LWIP_SOCKET
 1

	)

1739 #i‡!
deföed
 
LWIP_SOCKET_SET_ERRNO
 || deföed 
__DOXYGEN__


1740 
	#LWIP_SOCKET_SET_ERRNO
 1

	)

1749 #i‡!
deföed
 
LWIP_COMPAT_SOCKETS
 || deföed 
__DOXYGEN__


1750 
	#LWIP_COMPAT_SOCKETS
 1

	)

1758 #i‡!
deföed
 
LWIP_POSIX_SOCKETS_IO_NAMES
 || deföed 
__DOXYGEN__


1759 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1769 #i‡!
deföed
 
LWIP_SOCKET_OFFSET
 || deföed 
__DOXYGEN__


1770 
	#LWIP_SOCKET_OFFSET
 0

	)

1778 #i‡!
deföed
 
LWIP_TCP_KEEPALIVE
 || deföed 
__DOXYGEN__


1779 
	#LWIP_TCP_KEEPALIVE
 0

	)

1786 #i‡!
deföed
 
LWIP_SO_SNDTIMEO
 || deföed 
__DOXYGEN__


1787 
	#LWIP_SO_SNDTIMEO
 0

	)

1794 #i‡!
deföed
 
LWIP_SO_RCVTIMEO
 || deföed 
__DOXYGEN__


1795 
	#LWIP_SO_RCVTIMEO
 0

	)

1802 #i‡!
deföed
 
LWIP_SO_SNDRCVTIMEO_NONSTANDARD
 || deföed 
__DOXYGEN__


1803 
	#LWIP_SO_SNDRCVTIMEO_NONSTANDARD
 0

	)

1809 #i‡!
deföed
 
LWIP_SO_RCVBUF
 || deföed 
__DOXYGEN__


1810 
	#LWIP_SO_RCVBUF
 0

	)

1816 #i‡!
deföed
 
LWIP_SO_LINGER
 || deföed 
__DOXYGEN__


1817 
	#LWIP_SO_LINGER
 0

	)

1823 #i‡!
deföed
 
RECV_BUFSIZE_DEFAULT
 || deföed 
__DOXYGEN__


1824 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1830 #i‡!
deföed
 
LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT
 || deföed 
__DOXYGEN__


1831 
	#LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT
 20000

	)

1837 #i‡!
deföed
 
SO_REUSE
 || deföed 
__DOXYGEN__


1838 
	#SO_REUSE
 0

	)

1846 #i‡!
deföed
 
SO_REUSE_RXTOALL
 || deföed 
__DOXYGEN__


1847 
	#SO_REUSE_RXTOALL
 0

	)

1858 #i‡!
deföed
 
LWIP_FIONREAD_LINUXMODE
 || deföed 
__DOXYGEN__


1859 
	#LWIP_FIONREAD_LINUXMODE
 0

	)

1878 #i‡!
deföed
 
LWIP_STATS
 || deföed 
__DOXYGEN__


1879 
	#LWIP_STATS
 1

	)

1882 #i‡
LWIP_STATS


1887 #i‡!
deföed
 
LWIP_STATS_DISPLAY
 || deföed 
__DOXYGEN__


1888 
	#LWIP_STATS_DISPLAY
 0

	)

1894 #i‡!
deföed
 
LINK_STATS
 || deföed 
__DOXYGEN__


1895 
	#LINK_STATS
 1

	)

1901 #i‡!
deföed
 
ETHARP_STATS
 || deföed 
__DOXYGEN__


1902 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1908 #i‡!
deföed
 
IP_STATS
 || deföed 
__DOXYGEN__


1909 
	#IP_STATS
 1

	)

1916 #i‡!
deföed
 
IPFRAG_STATS
 || deföed 
__DOXYGEN__


1917 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1923 #i‡!
deföed
 
ICMP_STATS
 || deföed 
__DOXYGEN__


1924 
	#ICMP_STATS
 1

	)

1930 #i‡!
deföed
 
IGMP_STATS
 || deföed 
__DOXYGEN__


1931 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1938 #i‡!
deföed
 
UDP_STATS
 || deföed 
__DOXYGEN__


1939 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1946 #i‡!
deföed
 
TCP_STATS
 || deföed 
__DOXYGEN__


1947 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1953 #i‡!
deföed
 
MEM_STATS
 || deföed 
__DOXYGEN__


1954 
	#MEM_STATS
 ((
MEM_LIBC_MALLOC
 =0Ë&& (
MEM_USE_POOLS
 =0))

	)

1960 #i‡!
deföed
 
MEMP_STATS
 || deföed 
__DOXYGEN__


1961 
	#MEMP_STATS
 (
MEMP_MEM_MALLOC
 =0)

	)

1967 #i‡!
deföed
 
SYS_STATS
 || deföed 
__DOXYGEN__


1968 
	#SYS_STATS
 (
NO_SYS
 =0)

	)

1974 #i‡!
deföed
 
IP6_STATS
 || deföed 
__DOXYGEN__


1975 
	#IP6_STATS
 (
LWIP_IPV6
)

	)

1981 #i‡!
deföed
 
ICMP6_STATS
 || deföed 
__DOXYGEN__


1982 
	#ICMP6_STATS
 (
LWIP_IPV6
 && 
LWIP_ICMP6
)

	)

1988 #i‡!
deföed
 
IP6_FRAG_STATS
 || deföed 
__DOXYGEN__


1989 
	#IP6_FRAG_STATS
 (
LWIP_IPV6
 && (
LWIP_IPV6_FRAG
 || 
LWIP_IPV6_REASS
))

	)

1995 #i‡!
deföed
 
MLD6_STATS
 || deföed 
__DOXYGEN__


1996 
	#MLD6_STATS
 (
LWIP_IPV6
 && 
LWIP_IPV6_MLD
)

	)

2002 #i‡!
deföed
 
ND6_STATS
 || deföed 
__DOXYGEN__


2003 
	#ND6_STATS
 (
LWIP_IPV6
)

	)

2009 #i‡!
deföed
 
MIB2_STATS
 || deföed 
__DOXYGEN__


2010 
	#MIB2_STATS
 0

	)

2015 
	#LINK_STATS
 0

	)

2016 
	#ETHARP_STATS
 0

	)

2017 
	#IP_STATS
 0

	)

2018 
	#IPFRAG_STATS
 0

	)

2019 
	#ICMP_STATS
 0

	)

2020 
	#IGMP_STATS
 0

	)

2021 
	#UDP_STATS
 0

	)

2022 
	#TCP_STATS
 0

	)

2023 
	#MEM_STATS
 0

	)

2024 
	#MEMP_STATS
 0

	)

2025 
	#SYS_STATS
 0

	)

2026 
	#LWIP_STATS_DISPLAY
 0

	)

2027 
	#IP6_STATS
 0

	)

2028 
	#ICMP6_STATS
 0

	)

2029 
	#IP6_FRAG_STATS
 0

	)

2030 
	#MLD6_STATS
 0

	)

2031 
	#ND6_STATS
 0

	)

2032 
	#MIB2_STATS
 0

	)

2054 #i‡!
deföed
 
LWIP_CHECKSUM_CTRL_PER_NETIF
 || deföed 
__DOXYGEN__


2055 
	#LWIP_CHECKSUM_CTRL_PER_NETIF
 0

	)

2061 #i‡!
deföed
 
CHECKSUM_GEN_IP
 || deföed 
__DOXYGEN__


2062 
	#CHECKSUM_GEN_IP
 1

	)

2068 #i‡!
deföed
 
CHECKSUM_GEN_UDP
 || deföed 
__DOXYGEN__


2069 
	#CHECKSUM_GEN_UDP
 1

	)

2075 #i‡!
deföed
 
CHECKSUM_GEN_TCP
 || deföed 
__DOXYGEN__


2076 
	#CHECKSUM_GEN_TCP
 1

	)

2082 #i‡!
deföed
 
CHECKSUM_GEN_ICMP
 || deföed 
__DOXYGEN__


2083 
	#CHECKSUM_GEN_ICMP
 1

	)

2089 #i‡!
deföed
 
CHECKSUM_GEN_ICMP6
 || deföed 
__DOXYGEN__


2090 
	#CHECKSUM_GEN_ICMP6
 1

	)

2096 #i‡!
deföed
 
CHECKSUM_CHECK_IP
 || deföed 
__DOXYGEN__


2097 
	#CHECKSUM_CHECK_IP
 1

	)

2103 #i‡!
deföed
 
CHECKSUM_CHECK_UDP
 || deföed 
__DOXYGEN__


2104 
	#CHECKSUM_CHECK_UDP
 1

	)

2110 #i‡!
deföed
 
CHECKSUM_CHECK_TCP
 || deföed 
__DOXYGEN__


2111 
	#CHECKSUM_CHECK_TCP
 1

	)

2117 #i‡!
deföed
 
CHECKSUM_CHECK_ICMP
 || deföed 
__DOXYGEN__


2118 
	#CHECKSUM_CHECK_ICMP
 1

	)

2124 #i‡!
deföed
 
CHECKSUM_CHECK_ICMP6
 || deföed 
__DOXYGEN__


2125 
	#CHECKSUM_CHECK_ICMP6
 1

	)

2132 #i‡!
deföed
 
LWIP_CHECKSUM_ON_COPY
 || deföed 
__DOXYGEN__


2133 
	#LWIP_CHECKSUM_ON_COPY
 0

	)

2152 #i‡!
deföed
 
LWIP_IPV6
 || deföed 
__DOXYGEN__


2153 
	#LWIP_IPV6
 0

	)

2159 #i‡!
deföed
 
LWIP_IPV6_NUM_ADDRESSES
 || deföed 
__DOXYGEN__


2160 
	#LWIP_IPV6_NUM_ADDRESSES
 3

	)

2166 #i‡!
deföed
 
LWIP_IPV6_FORWARD
 || deföed 
__DOXYGEN__


2167 
	#LWIP_IPV6_FORWARD
 0

	)

2173 #i‡!
deföed
 
LWIP_IPV6_FRAG
 || deföed 
__DOXYGEN__


2174 
	#LWIP_IPV6_FRAG
 0

	)

2180 #i‡!
deföed
 
LWIP_IPV6_REASS
 || deföed 
__DOXYGEN__


2181 
	#LWIP_IPV6_REASS
 (
LWIP_IPV6
)

	)

2188 #i‡!
deföed
 
LWIP_IPV6_SEND_ROUTER_SOLICIT
 || deföed 
__DOXYGEN__


2189 
	#LWIP_IPV6_SEND_ROUTER_SOLICIT
 1

	)

2195 #i‡!
deföed
 
LWIP_IPV6_AUTOCONFIG
 || deföed 
__DOXYGEN__


2196 
	#LWIP_IPV6_AUTOCONFIG
 (
LWIP_IPV6
)

	)

2202 #i‡!
deföed
 
LWIP_IPV6_DUP_DETECT_ATTEMPTS
 || deföed 
__DOXYGEN__


2203 
	#LWIP_IPV6_DUP_DETECT_ATTEMPTS
 1

	)

2217 #i‡!
deföed
 
LWIP_ICMP6
 || deföed 
__DOXYGEN__


2218 
	#LWIP_ICMP6
 (
LWIP_IPV6
)

	)

2225 #i‡!
deföed
 
LWIP_ICMP6_DATASIZE
 || deföed 
__DOXYGEN__


2226 
	#LWIP_ICMP6_DATASIZE
 8

	)

2232 #i‡!
deföed
 
LWIP_ICMP6_HL
 || deföed 
__DOXYGEN__


2233 
	#LWIP_ICMP6_HL
 255

	)

2249 #i‡!
deföed
 
LWIP_IPV6_MLD
 || deföed 
__DOXYGEN__


2250 
	#LWIP_IPV6_MLD
 (
LWIP_IPV6
)

	)

2259 #i‡!
deföed
 
MEMP_NUM_MLD6_GROUP
 || deföed 
__DOXYGEN__


2260 
	#MEMP_NUM_MLD6_GROUP
 4

	)

2275 #i‡!
deföed
 
LWIP_ND6_QUEUEING
 || deföed 
__DOXYGEN__


2276 
	#LWIP_ND6_QUEUEING
 (
LWIP_IPV6
)

	)

2282 #i‡!
deföed
 
MEMP_NUM_ND6_QUEUE
 || deföed 
__DOXYGEN__


2283 
	#MEMP_NUM_ND6_QUEUE
 20

	)

2289 #i‡!
deföed
 
LWIP_ND6_NUM_NEIGHBORS
 || deföed 
__DOXYGEN__


2290 
	#LWIP_ND6_NUM_NEIGHBORS
 10

	)

2296 #i‡!
deföed
 
LWIP_ND6_NUM_DESTINATIONS
 || deföed 
__DOXYGEN__


2297 
	#LWIP_ND6_NUM_DESTINATIONS
 10

	)

2303 #i‡!
deföed
 
LWIP_ND6_NUM_PREFIXES
 || deföed 
__DOXYGEN__


2304 
	#LWIP_ND6_NUM_PREFIXES
 5

	)

2310 #i‡!
deföed
 
LWIP_ND6_NUM_ROUTERS
 || deföed 
__DOXYGEN__


2311 
	#LWIP_ND6_NUM_ROUTERS
 3

	)

2318 #i‡!
deföed
 
LWIP_ND6_MAX_MULTICAST_SOLICIT
 || deföed 
__DOXYGEN__


2319 
	#LWIP_ND6_MAX_MULTICAST_SOLICIT
 3

	)

2326 #i‡!
deföed
 
LWIP_ND6_MAX_UNICAST_SOLICIT
 || deföed 
__DOXYGEN__


2327 
	#LWIP_ND6_MAX_UNICAST_SOLICIT
 3

	)

2333 #i‡!
deföed
 
LWIP_ND6_MAX_ANYCAST_DELAY_TIME
 || deföed 
__DOXYGEN__


2334 
	#LWIP_ND6_MAX_ANYCAST_DELAY_TIME
 1000

	)

2340 #i‡!
deföed
 
LWIP_ND6_MAX_NEIGHBOR_ADVERTISEMENT
 || deföed 
__DOXYGEN__


2341 
	#LWIP_ND6_MAX_NEIGHBOR_ADVERTISEMENT
 3

	)

2348 #i‡!
deföed
 
LWIP_ND6_REACHABLE_TIME
 || deföed 
__DOXYGEN__


2349 
	#LWIP_ND6_REACHABLE_TIME
 30000

	)

2355 #i‡!
deföed
 
LWIP_ND6_RETRANS_TIMER
 || deföed 
__DOXYGEN__


2356 
	#LWIP_ND6_RETRANS_TIMER
 1000

	)

2363 #i‡!
deföed
 
LWIP_ND6_DELAY_FIRST_PROBE_TIME
 || deföed 
__DOXYGEN__


2364 
	#LWIP_ND6_DELAY_FIRST_PROBE_TIME
 5000

	)

2371 #i‡!
deföed
 
LWIP_ND6_ALLOW_RA_UPDATES
 || deföed 
__DOXYGEN__


2372 
	#LWIP_ND6_ALLOW_RA_UPDATES
 1

	)

2380 #i‡!
deföed
 
LWIP_ND6_TCP_REACHABILITY_HINTS
 || deföed 
__DOXYGEN__


2381 
	#LWIP_ND6_TCP_REACHABILITY_HINTS
 1

	)

2389 #i‡!
deföed
 
LWIP_ND6_RDNSS_MAX_DNS_SERVERS
 || deföed 
__DOXYGEN__


2390 
	#LWIP_ND6_RDNSS_MAX_DNS_SERVERS
 0

	)

2399 #i‡!
deföed
 
LWIP_IPV6_DHCP6
 || deföed 
__DOXYGEN__


2400 
	#LWIP_IPV6_DHCP6
 0

	)

2421 #ifde‡
__DOXYGEN__


2422 
	#LWIP_HOOK_FILENAME
 "∑th/to/my/lwù_hooks.h"

	)

2444 #ifde‡
__DOXYGEN__


2445 
	#LWIP_HOOK_TCP_ISN
(
loˇl_ù
, 
loˇl_p‹t
, 
ªmŸe_ù
, 
ªmŸe_p‹t
)

	)

2459 #ifde‡
__DOXYGEN__


2460 
	#LWIP_HOOK_IP4_INPUT
(
pbuf
, 
öput_√tif
)

	)

2470 #ifde‡
__DOXYGEN__


2471 
	#LWIP_HOOK_IP4_ROUTE
()

	)

2478 #ifde‡
__DOXYGEN__


2479 
	#LWIP_HOOK_IP4_ROUTE_SRC
(
de°
, 
§c
)

	)

2494 #ifde‡
__DOXYGEN__


2495 
	#LWIP_HOOK_ETHARP_GET_GW
(
√tif
, 
de°
)

	)

2509 #ifde‡
__DOXYGEN__


2510 
	#LWIP_HOOK_IP6_INPUT
(
pbuf
, 
öput_√tif
)

	)

2521 #ifde‡
__DOXYGEN__


2522 
	#LWIP_HOOK_IP6_ROUTE
(
§c
, 
de°
)

	)

2537 #ifde‡
__DOXYGEN__


2538 
	#LWIP_HOOK_ND6_GET_GW
(
√tif
, 
de°
)

	)

2551 #ifde‡
__DOXYGEN__


2552 
	#LWIP_HOOK_VLAN_CHECK
(
√tif
, 
ëh_hdr
, 
vœn_hdr
)

	)

2573 #ifde‡
__DOXYGEN__


2574 
	#LWIP_HOOK_VLAN_SET
(
√tif
, 
p
, 
§c
, 
d°
, 
ëh_ty≥
)

	)

2581 #ifde‡
__DOXYGEN__


2582 
	#LWIP_HOOK_MEMP_AVAILABLE
(
memp_t_ty≥
)

	)

2591 #ifde‡
__DOXYGEN__


2592 
	#LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
(
pbuf
, 
√tif
)

	)

2614 #i‡!
deföed
 
LWIP_DBG_MIN_LEVEL
 || deföed 
__DOXYGEN__


2615 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_ALL


	)

2623 #i‡!
deföed
 
LWIP_DBG_TYPES_ON
 || deföed 
__DOXYGEN__


2624 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

2630 #i‡!
deföed
 
ETHARP_DEBUG
 || deföed 
__DOXYGEN__


2631 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

2637 #i‡!
deföed
 
NETIF_DEBUG
 || deföed 
__DOXYGEN__


2638 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

2644 #i‡!
deföed
 
PBUF_DEBUG
 || deföed 
__DOXYGEN__


2645 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

2651 #i‡!
deföed
 
API_LIB_DEBUG
 || deföed 
__DOXYGEN__


2652 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

2658 #i‡!
deföed
 
API_MSG_DEBUG
 || deföed 
__DOXYGEN__


2659 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

2665 #i‡!
deföed
 
SOCKETS_DEBUG
 || deföed 
__DOXYGEN__


2666 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

2672 #i‡!
deföed
 
ICMP_DEBUG
 || deföed 
__DOXYGEN__


2673 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

2679 #i‡!
deföed
 
IGMP_DEBUG
 || deföed 
__DOXYGEN__


2680 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

2686 #i‡!
deföed
 
INET_DEBUG
 || deföed 
__DOXYGEN__


2687 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

2693 #i‡!
deföed
 
IP_DEBUG
 || deföed 
__DOXYGEN__


2694 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

2700 #i‡!
deföed
 
IP_REASS_DEBUG
 || deföed 
__DOXYGEN__


2701 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

2707 #i‡!
deföed
 
RAW_DEBUG
 || deföed 
__DOXYGEN__


2708 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

2714 #i‡!
deföed
 
MEM_DEBUG
 || deföed 
__DOXYGEN__


2715 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

2721 #i‡!
deföed
 
MEMP_DEBUG
 || deföed 
__DOXYGEN__


2722 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

2728 #i‡!
deföed
 
SYS_DEBUG
 || deföed 
__DOXYGEN__


2729 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

2735 #i‡!
deföed
 
TIMERS_DEBUG
 || deföed 
__DOXYGEN__


2736 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

2742 #i‡!
deföed
 
TCP_DEBUG
 || deföed 
__DOXYGEN__


2743 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

2749 #i‡!
deföed
 
TCP_INPUT_DEBUG
 || deföed 
__DOXYGEN__


2750 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

2756 #i‡!
deföed
 
TCP_FR_DEBUG
 || deföed 
__DOXYGEN__


2757 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

2764 #i‡!
deföed
 
TCP_RTO_DEBUG
 || deföed 
__DOXYGEN__


2765 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

2771 #i‡!
deföed
 
TCP_CWND_DEBUG
 || deföed 
__DOXYGEN__


2772 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

2778 #i‡!
deföed
 
TCP_WND_DEBUG
 || deföed 
__DOXYGEN__


2779 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

2785 #i‡!
deföed
 
TCP_OUTPUT_DEBUG
 || deföed 
__DOXYGEN__


2786 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

2792 #i‡!
deföed
 
TCP_RST_DEBUG
 || deföed 
__DOXYGEN__


2793 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

2799 #i‡!
deföed
 
TCP_QLEN_DEBUG
 || deföed 
__DOXYGEN__


2800 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

2806 #i‡!
deföed
 
UDP_DEBUG
 || deföed 
__DOXYGEN__


2807 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

2813 #i‡!
deföed
 
TCPIP_DEBUG
 || deföed 
__DOXYGEN__


2814 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

2820 #i‡!
deföed
 
SLIP_DEBUG
 || deföed 
__DOXYGEN__


2821 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

2827 #i‡!
deföed
 
DHCP_DEBUG
 || deföed 
__DOXYGEN__


2828 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

2834 #i‡!
deföed
 
AUTOIP_DEBUG
 || deföed 
__DOXYGEN__


2835 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

2841 #i‡!
deföed
 
DNS_DEBUG
 || deföed 
__DOXYGEN__


2842 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

2848 #i‡!
deföed
 
IP6_DEBUG
 || deföed 
__DOXYGEN__


2849 
	#IP6_DEBUG
 
LWIP_DBG_OFF


	)

2869 #i‡!
deföed
 
LWIP_PERF
 || deföed 
__DOXYGEN__


2870 
	#LWIP_PERF
 0

	)

	@include_lib/net/lwip/src/include/lwip/pbuf.h

38 #i‚de‡
LWIP_HDR_PBUF_H


39 
	#LWIP_HDR_PBUF_H


	)

41 
	~"lwù/›t.h
"

42 
	~"lwù/îr.h
"

44 #ifde‡
__˝lu•lus


54 #i‚de‡
LWIP_SUPPORT_CUSTOM_PBUF


55 
	#LWIP_SUPPORT_CUSTOM_PBUF
 ((
IP_FRAG
 && !
LWIP_NETIF_TX_SINGLE_PBUF
Ë|| (
LWIP_IPV6
 && 
LWIP_IPV6_FRAG
))

	)

61 
	#PBUF_TRANSPORT_HLEN
 20

	)

62 #i‡
LWIP_IPV6


63 
	#PBUF_IP_HLEN
 40

	)

65 
	#PBUF_IP_HLEN
 20

	)

76 
PBUF_TRANSPORT
,

80 
PBUF_IP
,

85 
PBUF_LINK
,

91 
PBUF_RAW_TX
,

94 
PBUF_RAW


95 } 
	tpbuf_œyî
;

108 
PBUF_RAM
,

112 
PBUF_ROM
,

116 
PBUF_REF
,

123 
PBUF_POOL


124 } 
	tpbuf_ty≥
;

128 
	#PBUF_FLAG_PUSH
 0x01U

	)

131 
	#PBUF_FLAG_IS_CUSTOM
 0x02U

	)

133 
	#PBUF_FLAG_MCASTLOOP
 0x04U

	)

135 
	#PBUF_FLAG_LLBCAST
 0x08U

	)

137 
	#PBUF_FLAG_LLMCAST
 0x10U

	)

139 
	#PBUF_FLAG_TCP_FIN
 0x20U

	)

142 
	spbuf
 {

144 
pbuf
 *
√xt
;

147 *
∑ylﬂd
;

156 
u16_t
 
tŸ_Àn
;

159 
u16_t
 
Àn
;

162 
u8_t
 
ty≥
;

165 
u8_t
 
Êags
;

172 
u16_t
 
ªf
;

180 
	spbuf_rom
 {

182 
pbuf
 *
√xt
;

185 c⁄° *
∑ylﬂd
;

188 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


190 (*
pbuf_‰ì_cu°om_‚
)(
	tpbuf
 *
	tp
);

193 
	spbuf_cu°om
 {

195 
pbuf
Öbuf;

197 
pbuf_‰ì_cu°om_‚
 
cu°om_‰ì_fun˘i⁄
;

202 #i‚de‡
PBUF_POOL_FREE_OOSEQ


203 
	#PBUF_POOL_FREE_OOSEQ
 1

	)

205 #i‡
LWIP_TCP
 && 
TCP_QUEUE_OOSEQ
 && 
NO_SYS
 && 
PBUF_POOL_FREE_OOSEQ


206 vﬁ©ûê
u8_t
 
pbuf_‰ì_oo£q_≥ndög
;

207 
pbuf_‰ì_oo£q
();

211 
	#PBUF_CHECK_FREE_OOSEQ
(Ëdÿ{ if(
pbuf_‰ì_oo£q_≥ndög
) { \

214 
	`pbuf_‰ì_oo£q
(); }}0)

	)

217 
	#PBUF_CHECK_FREE_OOSEQ
()

	)

221 
	#pbuf_öô
()

	)

223 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
);

224 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


225 
pbuf
 *
pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
,

226 
pbuf_cu°om
 *
p
, *
∑ylﬂd_mem
,

227 
u16_t
 
∑ylﬂd_mem_Àn
);

229 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

230 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

231 
u8_t
 
pbuf_hódî_f‹˚
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

232 
pbuf_ªf
(
pbuf
 *
p
);

233 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

234 
u16_t
 
pbuf_˛í
(c⁄° 
pbuf
 *
p
);

235 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

236 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

237 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

238 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, c⁄° pbu‡*
p_‰om
);

239 
u16_t
 
pbuf_c›y_∑πül
(c⁄° 
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

240 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

241 
îr_t
 
pbuf_èke_©
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
, u16_à
off£t
);

242 
pbuf
 *
pbuf_skù
(pbu‡*
ö
, 
u16_t
 
ö_off£t
, u16_à*
out_off£t
);

243 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

244 #i‡
LWIP_CHECKSUM_ON_COPY


245 
îr_t
 
pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

246 
u16_t
 
Àn
, u16_à*
chksum
);

248 #i‡
LWIP_TCP
 && 
TCP_QUEUE_OOSEQ
 && 
LWIP_WND_SCALE


249 
pbuf_•lô_64k
(
pbuf
 *
p
, pbu‡**
ª°
);

252 
u8_t
 
pbuf_gë_©
(c⁄° 
pbuf
 *
p
, 
u16_t
 
off£t
);

253 
pbuf_åy_gë_©
(c⁄° 
pbuf
 *
p
, 
u16_t
 
off£t
);

254 
pbuf_put_©
(
pbuf
 *
p
, 
u16_t
 
off£t
, 
u8_t
 
d©a
);

255 
u16_t
 
pbuf_memcmp
(c⁄° 
pbuf
 *
p
, u16_à
off£t
, c⁄° *
s2
, u16_à
n
);

256 
u16_t
 
pbuf_memföd
(c⁄° 
pbuf
 *
p
, c⁄° *
mem
, u16_à
mem_Àn
, u16_à
°¨t_off£t
);

257 
u16_t
 
pbuf_°r°r
(c⁄° 
pbuf
 *
p
, c⁄° *
sub°r
);

259 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/priv/api_msg.h

37 #i‚de‡
LWIP_HDR_API_MSG_H


38 
	#LWIP_HDR_API_MSG_H


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_NETCONN
 || 
LWIP_SOCKET


46 
	~"lwù/¨ch.h
"

47 
	~"lwù/ù_addr.h
"

48 
	~"lwù/îr.h
"

49 
	~"lwù/sys.h
"

50 
	~"lwù/igmp.h
"

51 
	~"lwù/≠i.h
"

52 
	~"lwù/¥iv/t˝ù_¥iv.h
"

54 #ifde‡
__˝lu•lus


58 #i‡
LWIP_MPU_COMPATIBLE


59 #i‡
LWIP_NETCONN_SEM_PER_THREAD


60 
	#API_MSG_M_DEF_SEM
(
m
Ë*
	)
m

62 
	#API_MSG_M_DEF_SEM
(
m
Ë
	`API_MSG_M_DEF
(m)

	)

65 
	#API_MSG_M_DEF_SEM
(
m
Ë
	`API_MSG_M_DEF
(m)

	)

69 
	#NETCONN_SHUT_RD
 1

	)

70 
	#NETCONN_SHUT_WR
 2

	)

71 
	#NETCONN_SHUT_RDWR
 (
NETCONN_SHUT_RD
 | 
NETCONN_SHUT_WR
)

	)

79 
	s≠i_msg
 {

82 
√tc⁄n
 *
c⁄n
;

84 
îr_t
 
îr
;

88 
√tbuf
 *
b
;

91 
u8_t
 
¥Ÿo
;

92 } 
n
;

95 
API_MSG_M_DEF_C
(
ù_addr_t
, 
ùaddr
);

96 
u16_t
 
p‹t
;

97 } 
bc
;

100 
ù_addr_t
 
API_MSG_M_DEF
(
ùaddr
);

101 
u16_t
 
API_MSG_M_DEF
(
p‹t
);

102 
u8_t
 
loˇl
;

103 } 
ad
;

106 c⁄° *
d©≠å
;

107 
size_t
 
Àn
;

108 
u8_t
 
≠iÊags
;

109 #i‡
LWIP_SO_SNDTIMEO


110 
u32_t
 
time_°¨ãd
;

112 } 
w
;

115 
u32_t
 
Àn
;

116 } 
r
;

117 #i‡
LWIP_TCP


120 
u8_t
 
shut
;

121 #i‡
LWIP_SO_SNDTIMEO
 || 
LWIP_SO_LINGER


122 
u32_t
 
time_°¨ãd
;

124 
u8_t
 
pﬁls_À·
;

126 } 
sd
;

128 #i‡
LWIP_IGMP
 || (
LWIP_IPV6
 && 
LWIP_IPV6_MLD
)

131 
API_MSG_M_DEF_C
(
ù_addr_t
, 
mu…üddr
);

132 
API_MSG_M_DEF_C
(
ù_addr_t
, 
√tif_addr
);

133 
√tc⁄n_igmp
 
joö_‹_Àave
;

134 } 
jl
;

136 #i‡
TCP_LISTEN_BACKLOG


138 
u8_t
 
backlog
;

139 } 
lb
;

141 } 
msg
;

142 #i‡
LWIP_NETCONN_SEM_PER_THREAD


143 
sys_£m_t
 *
›_com∂ëed_£m
;

147 #i‡
LWIP_NETCONN_SEM_PER_THREAD


148 
	#LWIP_API_MSG_SEM
(
msg
Ë((msg)->
›_com∂ëed_£m
)

	)

150 
	#LWIP_API_MSG_SEM
(
msg
Ë(&(msg)->
c⁄n
->
›_com∂ëed
)

	)

154 #i‡
LWIP_DNS


159 
	sdns_≠i_msg
 {

161 #i‡
LWIP_MPU_COMPATIBLE


162 
«me
[
DNS_MAX_NAME_LENGTH
];

164 c⁄° *
«me
;

167 
ù_addr_t
 
API_MSG_M_DEF
(
addr
);

168 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


170 
u8_t
 
dns_addπy≥
;

174 
sys_£m_t
 
API_MSG_M_DEF_SEM
(
£m
);

176 
îr_t
 
API_MSG_M_DEF
(
îr
);

180 #i‡
LWIP_TCP


181 
u8_t
 
√tc⁄n_ab‹ãd
;

184 
lwù_√tc⁄n_do_√wc⁄n
(*
m
);

185 
lwù_√tc⁄n_do_dñc⁄n
(*
m
);

186 
lwù_√tc⁄n_do_böd
(*
m
);

187 
lwù_√tc⁄n_do_c⁄√˘
(*
m
);

188 
lwù_√tc⁄n_do_disc⁄√˘
(*
m
);

189 
lwù_√tc⁄n_do_li°í
(*
m
);

190 
lwù_√tc⁄n_do_£nd
(*
m
);

191 
lwù_√tc⁄n_do_ªcv
(*
m
);

192 #i‡
TCP_LISTEN_BACKLOG


193 
lwù_√tc⁄n_do_ac˚±ed
(*
m
);

195 
lwù_√tc⁄n_do_wrôe
(*
m
);

196 
lwù_√tc⁄n_do_gëaddr
(*
m
);

197 
lwù_√tc⁄n_do_˛o£
(*
m
);

198 
lwù_√tc⁄n_do_shutdown
(*
m
);

199 #i‡
LWIP_IGMP
 || (
LWIP_IPV6
 && 
LWIP_IPV6_MLD
)

200 
lwù_√tc⁄n_do_joö_Àave_group
(*
m
);

203 #i‡
LWIP_DNS


204 
lwù_√tc⁄n_do_gëho°by«me
(*
¨g
);

207 
√tc⁄n
 *
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

208 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

210 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/priv/memp_priv.h

38 #i‚de‡
LWIP_HDR_MEMP_PRIV_H


39 
	#LWIP_HDR_MEMP_PRIV_H


	)

41 
	~"lwù/›t.h
"

43 #ifde‡
__˝lu•lus


47 
	~"lwù/mem.h
"

49 #i‡
MEMP_OVERFLOW_CHECK


58 #i‚de‡
MEMP_SANITY_REGION_BEFORE


59 
	#MEMP_SANITY_REGION_BEFORE
 16

	)

61 #i‡
MEMP_SANITY_REGION_BEFORE
 > 0

62 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_BEFORE
)

	)

64 
	#MEMP_SANITY_REGION_BEFORE_ALIGNED
 0

	)

66 #i‚de‡
MEMP_SANITY_REGION_AFTER


67 
	#MEMP_SANITY_REGION_AFTER
 16

	)

69 #i‡
MEMP_SANITY_REGION_AFTER
 > 0

70 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 
	`LWIP_MEM_ALIGN_SIZE
(
MEMP_SANITY_REGION_AFTER
)

	)

72 
	#MEMP_SANITY_REGION_AFTER_ALIGNED
 0

	)

76 
	#MEMP_SIZE
 (
	`LWIP_MEM_ALIGN_SIZE
((
memp
)Ë+ 
MEMP_SANITY_REGION_BEFORE_ALIGNED
)

	)

77 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(xË+ 
MEMP_SANITY_REGION_AFTER_ALIGNED
)

	)

85 
	#MEMP_SIZE
 0

	)

86 
	#MEMP_ALIGN_SIZE
(
x
Ë(
	`LWIP_MEM_ALIGN_SIZE
(x))

	)

90 #i‡!
MEMP_MEM_MALLOC
 || 
MEMP_OVERFLOW_CHECK


91 
	smemp
 {

92 
memp
 *
√xt
;

93 #i‡
MEMP_OVERFLOW_CHECK


94 c⁄° *
fûe
;

95 
löe
;

100 #i‡
MEM_USE_POOLS
 && 
MEMP_USE_CUSTOM_POOLS


105 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

106 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

107 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

108 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

109 
	#LWIP_MALLOC_MEMPOOL_END


	)

110 
	~"lwù/¥iv/memp_°d.h
"

114 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

115 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

116 
	#LWIP_MALLOC_MEMPOOL_START


	)

117 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

118 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

119 
	~"lwù/¥iv/memp_°d.h
"

121 } 
	tmemp_poﬁ_hñ≥r_t
;

125 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

126 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

130 
	smemp_desc
 {

131 #i‡
deföed
(
LWIP_DEBUG
Ë|| 
MEMP_OVERFLOW_CHECK
 || 
LWIP_STATS_DISPLAY


133 c⁄° *
desc
;

135 #i‡
MEMP_STATS


137 
°©s_mem
 *
°©s
;

141 
u16_t
 
size
;

143 #i‡!
MEMP_MEM_MALLOC


145 
u16_t
 
num
;

148 
u8_t
 *
ba£
;

151 
memp
 **
èb
;

155 #i‡
deföed
(
LWIP_DEBUG
Ë|| 
MEMP_OVERFLOW_CHECK
 || 
LWIP_STATS_DISPLAY


156 
	#DECLARE_LWIP_MEMPOOL_DESC
(
desc
Ë(desc),

	)

158 
	#DECLARE_LWIP_MEMPOOL_DESC
(
desc
)

	)

161 #i‡
MEMP_STATS


162 
	#LWIP_MEMPOOL_DECLARE_STATS_INSTANCE
(
«me
Ë
°©s_mem
Çame;

	)

163 
	#LWIP_MEMPOOL_DECLARE_STATS_REFERENCE
(
«me
Ë&«me,

	)

165 
	#LWIP_MEMPOOL_DECLARE_STATS_INSTANCE
(
«me
)

	)

166 
	#LWIP_MEMPOOL_DECLARE_STATS_REFERENCE
(
«me
)

	)

169 
memp_öô_poﬁ
(c⁄° 
memp_desc
 *
desc
);

171 #i‡
MEMP_OVERFLOW_CHECK


172 *
memp_mÆloc_poﬁ_‚
(c⁄° 
memp_desc
 *
desc
, c⁄° *
fûe
, c⁄° 
löe
);

173 
	#memp_mÆloc_poﬁ
(
d
Ë
	`memp_mÆloc_poﬁ_‚
((d), 
__FILE__
, 
__LINE__
)

	)

175 *
memp_mÆloc_poﬁ
(c⁄° 
memp_desc
 *
desc
);

177 
memp_‰ì_poﬁ
(c⁄° 
memp_desc
 *
desc
, *
mem
);

179 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/priv/memp_std.h

20 #i‚de‡
LWIP_MALLOC_MEMPOOL


23 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ 
	`LWIP_MEM_ALIGN_SIZE
((
memp_mÆloc_hñ≥r
))), "MALLOC_"#size)

	)

24 
	#LWIP_MALLOC_MEMPOOL_START


	)

25 
	#LWIP_MALLOC_MEMPOOL_END


	)

28 #i‚de‡
LWIP_PBUF_MEMPOOL


31 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

41 #i‡
LWIP_RAW


42 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

45 #i‡
LWIP_UDP


46 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

49 #i‡
LWIP_TCP


50 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

51 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

52 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

55 #i‡
LWIP_IPV4
 && 
IP_REASSEMBLY


56 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

58 #i‡(
IP_FRAG
 && !
LWIP_NETIF_TX_SINGLE_PBUF
Ë|| (
LWIP_IPV6
 && 
LWIP_IPV6_FRAG
)

59 
LWIP_MEMPOOL
(
FRAG_PBUF
, 
MEMP_NUM_FRAG_PBUF
, (
pbuf_cu°om_ªf
), "FRAG_PBUF")

62 #i‡
LWIP_NETCONN
 || 
LWIP_SOCKET


63 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

64 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

67 #i‡
NO_SYS
==0

68 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

69 #i‡
LWIP_MPU_COMPATIBLE


70 
LWIP_MEMPOOL
(
API_MSG
, 
MEMP_NUM_API_MSG
, (
≠i_msg
), "API_MSG")

71 #i‡
LWIP_DNS


72 
LWIP_MEMPOOL
(
DNS_API_MSG
, 
MEMP_NUM_DNS_API_MSG
, (
dns_≠i_msg
), "DNS_API_MSG")

74 #i‡
LWIP_SOCKET
 && !
LWIP_TCPIP_CORE_LOCKING


75 
LWIP_MEMPOOL
(
SOCKET_SETGETSOCKOPT_DATA
, 
MEMP_NUM_SOCKET_SETGETSOCKOPT_DATA
, (
lwù_£tgësock›t_d©a
), "SOCKET_SETGETSOCKOPT_DATA")

77 #i‡
LWIP_NETIF_API


78 
LWIP_MEMPOOL
(
NETIFAPI_MSG
, 
MEMP_NUM_NETIFAPI_MSG
, (
√tiÁpi_msg
), "NETIFAPI_MSG")

81 #i‡!
LWIP_TCPIP_CORE_LOCKING_INPUT


82 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
, 
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

86 #i‡
LWIP_IPV4
 && 
LWIP_ARP
 && 
ARP_QUEUEING


87 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

90 #i‡
LWIP_IGMP


91 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

94 #i‡
LWIP_TIMERS
 && !
LWIP_TIMERS_CUSTOM


95 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

98 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


99 
LWIP_MEMPOOL
(
NETDB
, 
MEMP_NUM_NETDB
, 
NETDB_ELEM_SIZE
, "NETDB")

101 #i‡
LWIP_DNS
 && 
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


102 
LWIP_MEMPOOL
(
LOCALHOSTLIST
, 
MEMP_NUM_LOCALHOSTLIST
, 
LOCALHOSTLIST_ELEM_SIZE
, "LOCALHOSTLIST")

105 #i‡
LWIP_IPV6
 && 
LWIP_ND6_QUEUEING


106 
LWIP_MEMPOOL
(
ND6_QUEUE
, 
MEMP_NUM_ND6_QUEUE
, (
nd6_q_íåy
), "ND6_QUEUE")

109 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_REASS


110 
LWIP_MEMPOOL
(
IP6_REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù6_ªassd©a
), "IP6_REASSDATA")

113 #i‡
LWIP_IPV6
 && 
LWIP_IPV6_MLD


114 
LWIP_MEMPOOL
(
MLD6_GROUP
, 
MEMP_NUM_MLD6_GROUP
, (
mld_group
), "MLD6_GROUP")

126 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

127 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

134 #i‡
MEMP_USE_CUSTOM_POOLS


135 
	~"lwùpoﬁs.h
"

142 #unde‡
LWIP_MEMPOOL


143 #unde‡
LWIP_MALLOC_MEMPOOL


144 #unde‡
LWIP_MALLOC_MEMPOOL_START


145 #unde‡
LWIP_MALLOC_MEMPOOL_END


146 #unde‡
LWIP_PBUF_MEMPOOL


	@include_lib/net/lwip/src/include/lwip/priv/nd6_priv.h

44 #i‚de‡
LWIP_HDR_ND6_PRIV_H


45 
	#LWIP_HDR_ND6_PRIV_H


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_IPV6


51 
	~"lwù/pbuf.h
"

52 
	~"lwù/ù6_addr.h
"

53 
	~"lwù/√tif.h
"

56 #ifde‡
__˝lu•lus


60 #i‡
LWIP_ND6_QUEUEING


64 
	snd6_q_íåy
 {

65 
nd6_q_íåy
 *
√xt
;

66 
pbuf
 *
p
;

71 
	snd6_√ighb‹_ˇche_íåy
 {

72 
ù6_addr_t
 
	g√xt_h›_addªss
;

73 
√tif
 *
	g√tif
;

74 
u8_t
 
	gŒaddr
[
NETIF_MAX_HWADDR_LEN
];

76 #i‡
LWIP_ND6_QUEUEING


78 
nd6_q_íåy
 *
	gq
;

81 
pbuf
 *
	gq
;

83 
u8_t
 
	g°©e
;

84 
u8_t
 
	gi§ouãr
;

86 
u32_t
 
	gªachabÀ_time
;

87 
u32_t
 
	gdñay_time
;

88 
u32_t
 
	g¥obes_£¡
;

89 
u32_t
 
	g°Æe_time
;

90 } 
	gcou¡î
;

93 
	snd6_de°ö©i⁄_ˇche_íåy
 {

94 
ù6_addr_t
 
	gde°ö©i⁄_addr
;

95 
ù6_addr_t
 
	g√xt_h›_addr
;

96 
u16_t
 
	gpmtu
;

97 
u32_t
 
	gage
;

100 
	snd6_¥efix_li°_íåy
 {

101 
ù6_addr_t
 
	g¥efix
;

102 
√tif
 *
	g√tif
;

103 
u32_t
 
	gövÆid©i⁄_timî
;

104 #i‡
LWIP_IPV6_AUTOCONFIG


105 
u8_t
 
	gÊags
;

106 
	#ND6_PREFIX_AUTOCONFIG_AUTONOMOUS
 0x01

	)

107 
	#ND6_PREFIX_AUTOCONFIG_ADDRESS_GENERATED
 0x02

	)

108 
	#ND6_PREFIX_AUTOCONFIG_ADDRESS_DUPLICATE
 0x04

	)

112 
	snd6_rouãr_li°_íåy
 {

113 
nd6_√ighb‹_ˇche_íåy
 *
	g√ighb‹_íåy
;

114 
u32_t
 
	gövÆid©i⁄_timî
;

115 
u8_t
 
	gÊags
;

118 
	end6_√ighb‹_ˇche_íåy_°©e
 {

119 
	gND6_NO_ENTRY
 = 0,

120 
	gND6_INCOMPLETE
,

121 
	gND6_REACHABLE
,

122 
	gND6_STALE
,

123 
	gND6_DELAY
,

124 
	gND6_PROBE


129 
nd6_√ighb‹_ˇche_íåy
 
√ighb‹_ˇche
[];

130 
nd6_de°ö©i⁄_ˇche_íåy
 
de°ö©i⁄_ˇche
[];

131 
nd6_¥efix_li°_íåy
 
¥efix_li°
[];

132 
nd6_rouãr_li°_íåy
 
deÁu…_rouãr_li°
[];

135 
u32_t
 
ªachabÀ_time
;

136 
u32_t
 
ªå™s_timî
;

138 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/priv/tcp_priv.h

37 #i‚de‡
LWIP_HDR_TCP_PRIV_H


38 
	#LWIP_HDR_TCP_PRIV_H


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_TCP


44 
	~"lwù/t˝.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/ù.h
"

48 
	~"lwù/icmp.h
"

49 
	~"lwù/îr.h
"

50 
	~"lwù/ù6.h
"

51 
	~"lwù/ù6_addr.h
"

52 
	~"lwù/¥Ÿ/t˝.h
"

54 #ifde‡
__˝lu•lus


61 
t˝_öô
();

62 
t˝_tmr
();

67 
t˝_¶owtmr
();

68 
t˝_Á°tmr
();

74 
t˝_txnow
();

77 
t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

79 
t˝_pcb
 *
t˝_Æloc
(
u8_t
 
¥io
);

80 
t˝_ab™d⁄
(
t˝_pcb
 *
pcb
, 
ª£t
);

81 
îr_t
 
t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
);

82 
t˝_ªxmô
(
t˝_pcb
 *
pcb
);

83 
t˝_ªxmô_πo
(
t˝_pcb
 *
pcb
);

84 
t˝_ªxmô_Á°
(
t˝_pcb
 *
pcb
);

85 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

86 
îr_t
 
t˝_¥o˚ss_ªfu£d_d©a
(
t˝_pcb
 *
pcb
);

97 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

98 ((
çcb
)->
Êags
 & (
TF_NODELAY
 | 
TF_INFR
)) || \

99 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

100 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) || \

101 ((
	`t˝_¢dbuf
(
çcb
Ë=0Ë|| (
	`t˝_¢dqueuñí
—pcbË>
TCP_SND_QUEUELEN
)) \

102 Ë? 1 : 0)

	)

103 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

106 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë< 0)

	)

107 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë<0)

	)

108 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë> 0)

	)

109 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë>0)

	)

112 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

114 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

116 #i‚de‡
TCP_TMR_INTERVAL


117 
	#TCP_TMR_INTERVAL
 250

	)

120 #i‚de‡
TCP_FAST_INTERVAL


121 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

124 #i‚de‡
TCP_SLOW_INTERVAL


125 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

128 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

129 
	#TCP_SYN_RCVD_TIMEOUT
 20000

130 

	)

131 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

133 #i‚de‡
TCP_MSL


134 
	#TCP_MSL
 60000UL

	)

138 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


139 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

142 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


143 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

146 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


147 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

150 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

152 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + (((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& (
TCP_FIN
 | 
TCP_SYN
)Ë!0Ë? 1U : 0U))

	)

156 
	#TF_RESET
 (
u8_t
)0x08U

	)

157 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

158 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

161 #i‡
LWIP_EVENT_API


163 
	#TCP_EVENT_ACCEPT
(
Õcb
,
pcb
,
¨g
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(arg, (pcb),\

164 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

165 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

166 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

167 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

168 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

169 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

170 
LWIP_EVENT_RECV
, 
NULL
, 0, 
ERR_OK
)

	)

171 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

172 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

173 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëdÿ{ i‡(’cb)->
°©e
 !
SYN_RCVD
) { \

174 
ªt
 = 
	`lwù_t˝_evít
((
pcb
)->
ˇŒback_¨g
, (pcb), 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
); \

176 
ªt
 = 
ERR_ARG
; } } 0)

	)

177 
	#TCP_EVENT_ERR
(
œ°_°©e
,
îrf
,
¨g
,
îr
Ëdÿ{ i‡÷a°_°©ê!
SYN_RCVD
) { \

178 
	`lwù_t˝_evít
((
¨g
), 
NULL
, 
LWIP_EVENT_ERR
, NULL, 0, (
îr
)); } } 0)

	)

182 
	#TCP_EVENT_ACCEPT
(
Õcb
,
pcb
,
¨g
,
îr
,
ªt
) \

184 if((
Õcb
)->
ac˚±
 !
NULL
) \

185 (
ªt
Ë(
Õcb
)->
	`ac˚±
((
¨g
),(
pcb
),(
îr
)); \

186 (
ªt
Ë
ERR_ARG
; \

187 } 0)

	)

189 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

191 if((
pcb
)->
£¡
 !
NULL
) \

192 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

193 (
ªt
Ë
ERR_OK
; \

194 } 0)

	)

196 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

198 if((
pcb
)->
ªcv
 !
NULL
) { \

199 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
));\

201 (
ªt
Ë
	`t˝_ªcv_nuŒ
(
NULL
, (
pcb
), (
p
), (
îr
)); \

203 } 0)

	)

205 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
) \

207 if(((
pcb
)->
ªcv
 !
NULL
)) { \

208 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),
NULL
,
ERR_OK
);\

210 (
ªt
Ë
ERR_OK
; \

212 } 0)

	)

214 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

216 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

217 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

218 (
ªt
Ë
ERR_OK
; \

219 } 0)

	)

221 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

223 if((
pcb
)->
pﬁl
 !
NULL
) \

224 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

225 (
ªt
Ë
ERR_OK
; \

226 } 0)

	)

228 
	#TCP_EVENT_ERR
(
œ°_°©e
,
îrf
,
¨g
,
îr
) \

230 
	`LWIP_UNUSED_ARG
(
œ°_°©e
); \

231 if((
îrf
Ë!
NULL
) \

232 (
îrf
)((
¨g
),(
îr
)); \

233 } 0)

	)

238 #i‡
TCP_OVERSIZE
 && 
deföed
(
LWIP_DEBUG
)

239 
	#TCP_OVERSIZE_DBGCHECK
 1

	)

241 
	#TCP_OVERSIZE_DBGCHECK
 0

	)

245 
	#TCP_CHECKSUM_ON_COPY
 (
LWIP_CHECKSUM_ON_COPY
 && 
CHECKSUM_GEN_TCP
)

	)

248 
	st˝_£g
 {

249 
t˝_£g
 *
√xt
;

250 
pbuf
 *
p
;

251 
u16_t
 
Àn
;

252 #i‡
TCP_OVERSIZE_DBGCHECK


253 
u16_t
 
ovîsize_À·
;

257 #i‡
TCP_CHECKSUM_ON_COPY


258 
u16_t
 
chksum
;

259 
u8_t
 
chksum_sw≠≥d
;

261 
u8_t
 
Êags
;

262 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

263 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

264 
	#TF_SEG_DATA_CHECKSUMMED
 (
u8_t
)0x04U

	)

266 
	#TF_SEG_OPTS_WND_SCALE
 (
u8_t
)0x08U

	)

267 
t˝_hdr
 *
t˝hdr
;

270 
	#LWIP_TCP_OPT_EOL
 0

	)

271 
	#LWIP_TCP_OPT_NOP
 1

	)

272 
	#LWIP_TCP_OPT_MSS
 2

	)

273 
	#LWIP_TCP_OPT_WS
 3

	)

274 
	#LWIP_TCP_OPT_TS
 8

	)

276 
	#LWIP_TCP_OPT_LEN_MSS
 4

	)

277 #i‡
LWIP_TCP_TIMESTAMPS


278 
	#LWIP_TCP_OPT_LEN_TS
 10

	)

279 
	#LWIP_TCP_OPT_LEN_TS_OUT
 12

	)

281 
	#LWIP_TCP_OPT_LEN_TS_OUT
 0

	)

283 #i‡
LWIP_WND_SCALE


284 
	#LWIP_TCP_OPT_LEN_WS
 3

	)

285 
	#LWIP_TCP_OPT_LEN_WS_OUT
 4

	)

287 
	#LWIP_TCP_OPT_LEN_WS_OUT
 0

	)

290 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

291 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 
LWIP_TCP_OPT_LEN_MSS
 : 0) + \

292 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 
LWIP_TCP_OPT_LEN_TS_OUT
 : 0) + \

293 (
Êags
 & 
TF_SEG_OPTS_WND_SCALE
 ? 
LWIP_TCP_OPT_LEN_WS_OUT
 : 0)

	)

296 
	#TCP_BUILD_MSS_OPTION
(
mss
Ë
	`lwù_ht⁄l
(0x02040000 | ((mssË& 0xFFFF))

	)

298 #i‡
LWIP_WND_SCALE


299 
	#TCPWNDSIZE_F
 
U32_F


	)

300 
	#TCPWND_MAX
 0xFFFFFFFFU

	)

301 
	#TCPWND_CHECK16
(
x
Ë
	`LWIP_ASSERT
("wödow sizê> 0xFFFF", (xË<0xFFFF)

	)

302 
	#TCPWND_MIN16
(
x
Ë((
u16_t
)
	`LWIP_MIN
((x), 0xFFFF))

	)

304 
	#TCPWNDSIZE_F
 
U16_F


	)

305 
	#TCPWND_MAX
 0xFFFFU

	)

306 
	#TCPWND_CHECK16
(
x
)

	)

307 
	#TCPWND_MIN16
(
x
Ë
	)
x

311 
t˝_pcb
 *
t˝_öput_pcb
;

312 
u32_t
 
t˝_ticks
;

313 
u8_t
 
t˝_a˘ive_pcbs_ch™ged
;

316 
	ut˝_li°í_pcbs_t
 {

317 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

318 
t˝_pcb
 *
	gpcbs
;

320 
t˝_pcb
 *
t˝_bound_pcbs
;

321 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

322 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

325 
t˝_pcb
 *
t˝_tw_pcbs
;

327 
	#NUM_TCP_PCB_LISTS_NO_TIME_WAIT
 3

	)

328 
	#NUM_TCP_PCB_LISTS
 4

	)

329 
t˝_pcb
 **c⁄° 
t˝_pcb_li°s
[
NUM_TCP_PCB_LISTS
];

339 #i‚de‡
TCP_DEBUG_PCB_LISTS


340 
	#TCP_DEBUG_PCB_LISTS
 0

	)

342 #i‡
TCP_DEBUG_PCB_LISTS


343 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

344 
t˝_pcb
 *
t˝_tmp_pcb
; \

345 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", (
≈cb
), (≈cb)->
loˇl_p‹t
)); \

346 
t˝_tmp_pcb
 = *(
pcbs
); \

347 
t˝_tmp_pcb
 !
NULL
; \

348 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

349 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !(
≈cb
)); \

351 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", ((
pcbs
Ë=&
t˝_bound_pcbs
Ë|| ((
≈cb
)->
°©e
 !
CLOSED
)); \

352 (
≈cb
)->
√xt
 = *(
pcbs
); \

353 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", (
≈cb
)->
√xt
 != (npcb)); \

354 *(
pcbs
Ë(
≈cb
); \

355 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

356 
	`t˝_timî_√eded
(); \

357 } 0)

	)

358 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

359 
t˝_pcb
 *
t˝_tmp_pcb
; \

360 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *(
pcbs
Ë!
NULL
); \

361 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

362 if(*(
pcbs
Ë=(
≈cb
)) { \

363 *(
pcbs
Ë(*pcbs)->
√xt
; \

364 } 
t˝_tmp_pcb
 = *(
pcbs
);Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

365 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

366 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

370 (
≈cb
)->
√xt
 = 
NULL
; \

371 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

372 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

373 } 0)

	)

377 
	#TCP_REG
(
pcbs
, 
≈cb
) \

379 (
≈cb
)->
√xt
 = *
pcbs
; \

380 *(
pcbs
Ë(
≈cb
); \

381 
	`t˝_timî_√eded
(); \

382 } 0)

	)

384 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

386 if(*(
pcbs
Ë=(
≈cb
)) { \

387 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

390 
t˝_pcb
 *
t˝_tmp_pcb
; \

391 
t˝_tmp_pcb
 = *
pcbs
; \

392 
t˝_tmp_pcb
 !
NULL
; \

393 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

394 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

395 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

400 (
≈cb
)->
√xt
 = 
NULL
; \

401 } 0)

	)

405 
	#TCP_REG_ACTIVE
(
≈cb
) \

407 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
); \

408 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

409 } 0)

	)

411 
	#TCP_RMV_ACTIVE
(
≈cb
) \

413 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
≈cb
); \

414 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

415 } 0)

	)

417 
	#TCP_PCB_REMOVE_ACTIVE
(
pcb
) \

419 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
); \

420 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

421 } 0)

	)

425 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

426 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

427 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

429 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

430 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

431 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

433 
	#t˝_ack
(
pcb
) \

435 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

436 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

437 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

440 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

442 } 0)

	)

444 
	#t˝_ack_now
(
pcb
) \

446 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

447 } 0)

	)

449 
îr_t
 
t˝_£nd_fö
(
t˝_pcb
 *
pcb
);

450 
îr_t
 
t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

452 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

454 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

455 c⁄° 
ù_addr_t
 *
loˇl_ù
, c⁄° ip_addr_à*
ªmŸe_ù
,

456 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

458 
u32_t
 
t˝_√xt_iss
(
t˝_pcb
 *
pcb
);

460 
îr_t
 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

461 
îr_t
 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

462 
t˝_åiggî_öput_pcb_˛o£
();

464 #i‡
TCP_CALCULATE_EFF_SEND_MSS


465 
u16_t
 
t˝_eff_£nd_mss_im∂
(u16_à
£ndmss
, c⁄° 
ù_addr_t
 *
de°


466 #i‡
LWIP_IPV6
 || 
LWIP_IPV4_SRC_ROUTING


467 , c⁄° 
ù_addr_t
 *
§c


470 #i‡
LWIP_IPV6
 || 
LWIP_IPV4_SRC_ROUTING


471 
	#t˝_eff_£nd_mss
(
£ndmss
, 
§c
, 
de°
Ë
	`t˝_eff_£nd_mss_im∂
(£ndmss, de°, src)

	)

473 
	#t˝_eff_£nd_mss
(
£ndmss
, 
§c
, 
de°
Ë
	`t˝_eff_£nd_mss_im∂
(£ndmss, de°)

	)

477 #i‡
LWIP_CALLBACK_API


478 
îr_t
 
t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

481 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


482 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

483 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

484 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

485 
t˝_debug_¥öt_pcbs
();

486 
s16_t
 
t˝_pcbs_ß√
();

488 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

489 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

490 
	#t˝_debug_¥öt_°©e
(
s
)

	)

491 
	#t˝_debug_¥öt_pcbs
()

	)

492 
	#t˝_pcbs_ß√
(Ë1

	)

497 
t˝_timî_√eded
();

499 
t˝_√tif_ù_addr_ch™ged
(c⁄° 
ù_addr_t
 *
ﬁd_addr
, c⁄° ip_addr_à*
√w_addr
);

501 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/priv/tcpip_priv.h

37 #i‚de‡
LWIP_HDR_TCPIP_PRIV_H


38 
	#LWIP_HDR_TCPIP_PRIV_H


	)

40 
	~"lwù/›t.h
"

42 #i‡!
NO_SYS


44 
	~"lwù/t˝ù.h
"

45 
	~"lwù/sys.h
"

46 
	~"lwù/timeouts.h
"

48 #ifde‡
__˝lu•lus


52 
pbuf
;

53 
√tif
;

55 #i‡
LWIP_MPU_COMPATIBLE


56 
	#API_VAR_REF
(
«me
Ë(*“ame))

	)

57 
	#API_VAR_DECLARE
(
ty≥
, 
«me
Ëty≥ * 
	)
name

58 
	#API_VAR_ALLOC
(
ty≥
, 
poﬁ
, 
«me
, 
îr‹vÆ
) do { \

59 
«me
 = (
ty≥
 *)
	`memp_mÆloc
(
poﬁ
); \

60 i‡(
«me
 =
NULL
) { \

61  
îr‹vÆ
; \

63 } 0)

	)

64 
	#API_VAR_ALLOC_POOL
(
ty≥
, 
poﬁ
, 
«me
, 
îr‹vÆ
) do { \

65 
«me
 = (
ty≥
 *)
	`LWIP_MEMPOOL_ALLOC
(
poﬁ
); \

66 i‡(
«me
 =
NULL
) { \

67  
îr‹vÆ
; \

69 } 0)

	)

70 
	#API_VAR_FREE
(
poﬁ
, 
«me
Ë
	`memp_‰ì
’oﬁ,Çame)

	)

71 
	#API_VAR_FREE_POOL
(
poﬁ
, 
«me
Ë
	`LWIP_MEMPOOL_FREE
’oﬁ,Çame)

	)

72 
	#API_EXPR_REF
(
ex¥
Ë(&”x¥))

	)

73 #i‡
LWIP_NETCONN_SEM_PER_THREAD


74 
	#API_EXPR_REF_SEM
(
ex¥
Ë”x¥)

	)

76 
	#API_EXPR_REF_SEM
(
ex¥
Ë
	`API_EXPR_REF
”x¥)

	)

78 
	#API_EXPR_DEREF
(
ex¥
Ë
	)
expr

79 
	#API_MSG_M_DEF
(
m
Ë
	)
m

80 
	#API_MSG_M_DEF_C
(
t
, 
m
Ëà
	)
m

82 
	#API_VAR_REF
(
«me
Ë
	)
name

83 
	#API_VAR_DECLARE
(
ty≥
, 
«me
Ëty≥ 
	)
name

84 
	#API_VAR_ALLOC
(
ty≥
, 
poﬁ
, 
«me
, 
îr‹vÆ
)

	)

85 
	#API_VAR_ALLOC_POOL
(
ty≥
, 
poﬁ
, 
«me
, 
îr‹vÆ
)

	)

86 
	#API_VAR_FREE
(
poﬁ
, 
«me
)

	)

87 
	#API_VAR_FREE_POOL
(
poﬁ
, 
«me
)

	)

88 
	#API_EXPR_REF
(
ex¥
Ë
	)
expr

89 
	#API_EXPR_REF_SEM
(
ex¥
Ë
	`API_EXPR_REF
”x¥)

	)

90 
	#API_EXPR_DEREF
(
ex¥
Ë(*”x¥))

	)

91 
	#API_MSG_M_DEF
(
m
Ë*
	)
m

92 
	#API_MSG_M_DEF_C
(
t
, 
m
Ëc⁄°Å * 
	)
m

95 
îr_t
 
t˝ù_£nd_msg_waô_£m
(
t˝ù_ˇŒback_‚
 
‚
, *
≠imsg
, 
sys_£m_t
 *
£m
);

97 
	st˝ù_≠i_ˇŒ_d©a
 {

98 #i‡!
LWIP_TCPIP_CORE_LOCKING


99 
îr_t
 
îr
;

100 #i‡!
LWIP_NETCONN_SEM_PER_THREAD


101 
sys_£m_t
 
£m
;

104 
u8_t
 
dummy
;

107 
îr_t
 (*
	tt˝ù_≠i_ˇŒ_‚
)(
	tt˝ù_≠i_ˇŒ_d©a
 *
	tˇŒ
);

108 
îr_t
 
t˝ù_≠i_ˇŒ
(
t˝ù_≠i_ˇŒ_‚
 
‚
, 
t˝ù_≠i_ˇŒ_d©a
 *
ˇŒ
);

110 
	et˝ù_msg_ty≥
 {

111 
TCPIP_MSG_API
,

112 
TCPIP_MSG_API_CALL
,

113 
TCPIP_MSG_INPKT
,

114 #i‡
LWIP_TCPIP_TIMEOUT
 && 
LWIP_TIMERS


115 
TCPIP_MSG_TIMEOUT
,

116 
TCPIP_MSG_UNTIMEOUT
,

118 
TCPIP_MSG_CALLBACK
,

119 
TCPIP_MSG_CALLBACK_STATIC


122 
	st˝ù_msg
 {

123 
t˝ù_msg_ty≥
 
ty≥
;

126 
t˝ù_ˇŒback_‚
 
fun˘i⁄
;

127 *
msg
;

128 } 
≠i_msg
;

130 
t˝ù_≠i_ˇŒ_‚
 
fun˘i⁄
;

131 
t˝ù_≠i_ˇŒ_d©a
 *
¨g
;

132 
sys_£m_t
 *
£m
;

133 } 
≠i_ˇŒ
;

135 
pbuf
 *
p
;

136 
√tif
 *netif;

137 
√tif_öput_‚
 
öput_‚
;

138 } 
öp
;

140 
t˝ù_ˇŒback_‚
 
fun˘i⁄
;

141 *
˘x
;

142 } 
cb
;

143 #i‡
LWIP_TCPIP_TIMEOUT
 && 
LWIP_TIMERS


145 
u32_t
 
m£cs
;

146 
sys_timeout_h™dÀr
 
h
;

147 *
¨g
;

148 } 
tmo
;

150 } 
msg
;

153 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/autoip.h

40 #i‚de‡
LWIP_HDR_PROT_AUTOIP_H


41 
	#LWIP_HDR_PROT_AUTOIP_H


	)

43 #ifde‡
__˝lu•lus


48 
	#AUTOIP_NET
 0xA9FE0000

	)

50 
	#AUTOIP_RANGE_START
 (
AUTOIP_NET
 | 0x0100)

	)

52 
	#AUTOIP_RANGE_END
 (
AUTOIP_NET
 | 0xFEFF)

	)

55 
	#PROBE_WAIT
 1

	)

56 
	#PROBE_MIN
 1

	)

57 
	#PROBE_MAX
 2

	)

58 
	#PROBE_NUM
 3

	)

59 
	#ANNOUNCE_NUM
 2

	)

60 
	#ANNOUNCE_INTERVAL
 2

	)

61 
	#ANNOUNCE_WAIT
 2

	)

62 
	#MAX_CONFLICTS
 10

	)

63 
	#RATE_LIMIT_INTERVAL
 60

	)

64 
	#DEFEND_INTERVAL
 10

	)

68 
AUTOIP_STATE_OFF
 = 0,

69 
AUTOIP_STATE_PROBING
 = 1,

70 
AUTOIP_STATE_ANNOUNCING
 = 2,

71 
AUTOIP_STATE_BOUND
 = 3

72 } 
	tautoù_°©e_íum_t
;

74 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/dhcp.h

38 #i‚de‡
LWIP_HDR_PROT_DHCP_H


39 
	#LWIP_HDR_PROT_DHCP_H


	)

41 
	~"lwù/›t.h
"

43 #ifde‡
__˝lu•lus


47 
	#DHCP_CLIENT_PORT
 68

	)

48 
	#DHCP_SERVER_PORT
 67

	)

52 
	#DHCP_CHADDR_LEN
 16U

	)

53 
	#DHCP_SNAME_OFS
 44U

	)

54 
	#DHCP_SNAME_LEN
 64U

	)

55 
	#DHCP_FILE_OFS
 108U

	)

56 
	#DHCP_FILE_LEN
 128U

	)

57 
	#DHCP_MSG_LEN
 236U

	)

58 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_LEN
 + 4UË

	)

60 #ifde‡
PACK_STRUCT_USE_INCLUDES


61 
	~"¨ch/bp°ru˘.h
"

63 
PACK_STRUCT_BEGIN


65 
	sdh˝_msg
 {

66 
PACK_STRUCT_FLD_8
(
u8_t
 
›
);

67 
PACK_STRUCT_FLD_8
(
u8_t
 
hty≥
);

68 
PACK_STRUCT_FLD_8
(
u8_t
 
hÀn
);

69 
PACK_STRUCT_FLD_8
(
u8_t
 
h›s
);

70 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

71 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

72 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

73 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
cüddr
);

74 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
yüddr
);

75 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
süddr
);

76 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
güddr
);

77 
PACK_STRUCT_FLD_8
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

78 
PACK_STRUCT_FLD_8
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

79 
PACK_STRUCT_FLD_8
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

80 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

81 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

83 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

84 #unde‡
DHCP_OPTIONS_LEN


87 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

89 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

91 
PACK_STRUCT_FLD_8
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

101 
DHCP_STATE_OFF
 = 0,

102 
DHCP_STATE_REQUESTING
 = 1,

103 
DHCP_STATE_INIT
 = 2,

104 
DHCP_STATE_REBOOTING
 = 3,

105 
DHCP_STATE_REBINDING
 = 4,

106 
DHCP_STATE_RENEWING
 = 5,

107 
DHCP_STATE_SELECTING
 = 6,

108 
DHCP_STATE_INFORMING
 = 7,

109 
DHCP_STATE_CHECKING
 = 8,

110 
DHCP_STATE_PERMANENT
 = 9,

111 
DHCP_STATE_BOUND
 = 10,

112 
DHCP_STATE_RELEASING
 = 11,

113 
DHCP_STATE_BACKING_OFF
 = 12

114 } 
	tdh˝_°©e_íum_t
;

117 
	#DHCP_BOOTREQUEST
 1

	)

118 
	#DHCP_BOOTREPLY
 2

	)

121 
	#DHCP_DISCOVER
 1

	)

122 
	#DHCP_OFFER
 2

	)

123 
	#DHCP_REQUEST
 3

	)

124 
	#DHCP_DECLINE
 4

	)

125 
	#DHCP_ACK
 5

	)

126 
	#DHCP_NAK
 6

	)

127 
	#DHCP_RELEASE
 7

	)

128 
	#DHCP_INFORM
 8

	)

131 
	#DHCP_HTYPE_ETH
 1

	)

133 
	#DHCP_MAGIC_COOKIE
 0x63825363UL

	)

138 
	#DHCP_OPTION_PAD
 0

	)

139 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

140 
	#DHCP_OPTION_ROUTER
 3

	)

141 
	#DHCP_OPTION_DNS_SERVER
 6

	)

142 
	#DHCP_OPTION_HOSTNAME
 12

	)

143 
	#DHCP_OPTION_IP_TTL
 23

	)

144 
	#DHCP_OPTION_MTU
 26

	)

145 
	#DHCP_OPTION_BROADCAST
 28

	)

146 
	#DHCP_OPTION_TCP_TTL
 37

	)

147 
	#DHCP_OPTION_NTP
 42

	)

148 
	#DHCP_OPTION_END
 255

	)

151 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

152 
	#DHCP_OPTION_LEASE_TIME
 51

	)

153 
	#DHCP_OPTION_OVERLOAD
 52

	)

155 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

156 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

158 
	#DHCP_OPTION_SERVER_ID
 54

	)

159 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

161 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

162 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

164 
	#DHCP_OPTION_T1
 58

	)

165 
	#DHCP_OPTION_T2
 59

	)

166 
	#DHCP_OPTION_US
 60

	)

167 
	#DHCP_OPTION_CLIENT_ID
 61

	)

168 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

169 
	#DHCP_OPTION_BOOTFILE
 67

	)

172 
	#DHCP_OVERLOAD_NONE
 0

	)

173 
	#DHCP_OVERLOAD_FILE
 1

	)

174 
	#DHCP_OVERLOAD_SNAME
 2

	)

175 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

178 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/dns.h

40 #i‚de‡
LWIP_HDR_PROT_DNS_H


41 
	#LWIP_HDR_PROT_DNS_H


	)

43 
	~"lwù/¨ch.h
"

45 #ifde‡
__˝lu•lus


50 #i‚de‡
DNS_SERVER_PORT


51 
	#DNS_SERVER_PORT
 53

	)

55 
	#DNS_RRTYPE_A
 1

	)

56 
	#DNS_RRTYPE_NS
 2

	)

57 
	#DNS_RRTYPE_MD
 3

	)

58 
	#DNS_RRTYPE_MF
 4

	)

59 
	#DNS_RRTYPE_CNAME
 5

	)

60 
	#DNS_RRTYPE_SOA
 6

	)

61 
	#DNS_RRTYPE_MB
 7

	)

62 
	#DNS_RRTYPE_MG
 8

	)

63 
	#DNS_RRTYPE_MR
 9

	)

64 
	#DNS_RRTYPE_NULL
 10

	)

65 
	#DNS_RRTYPE_WKS
 11

	)

66 
	#DNS_RRTYPE_PTR
 12

	)

67 
	#DNS_RRTYPE_HINFO
 13

	)

68 
	#DNS_RRTYPE_MINFO
 14

	)

69 
	#DNS_RRTYPE_MX
 15

	)

70 
	#DNS_RRTYPE_TXT
 16

	)

71 
	#DNS_RRTYPE_AAAA
 28

	)

72 
	#DNS_RRTYPE_SRV
 33

	)

73 
	#DNS_RRTYPE_ANY
 255

	)

76 
	#DNS_RRCLASS_IN
 1

	)

77 
	#DNS_RRCLASS_CS
 2

	)

78 
	#DNS_RRCLASS_CH
 3

	)

79 
	#DNS_RRCLASS_HS
 4

	)

80 
	#DNS_RRCLASS_ANY
 255

	)

81 
	#DNS_RRCLASS_FLUSH
 0x800

	)

84 
	#DNS_FLAG1_RESPONSE
 0x80

	)

85 
	#DNS_FLAG1_OPCODE_STATUS
 0x10

	)

86 
	#DNS_FLAG1_OPCODE_INVERSE
 0x08

	)

87 
	#DNS_FLAG1_OPCODE_STANDARD
 0x00

	)

88 
	#DNS_FLAG1_AUTHORATIVE
 0x04

	)

89 
	#DNS_FLAG1_TRUNC
 0x02

	)

90 
	#DNS_FLAG1_RD
 0x01

	)

91 
	#DNS_FLAG2_RA
 0x80

	)

92 
	#DNS_FLAG2_ERR_MASK
 0x0f

	)

93 
	#DNS_FLAG2_ERR_NONE
 0x00

	)

94 
	#DNS_FLAG2_ERR_NAME
 0x03

	)

96 
	#DNS_HDR_GET_OPCODE
(
hdr
Ë((((hdr)->
Êags1
Ë>> 3Ë& 0xF)

	)

98 #ifde‡
PACK_STRUCT_USE_INCLUDES


99 
	~"¨ch/bp°ru˘.h
"

101 
PACK_STRUCT_BEGIN


103 
	sdns_hdr
 {

104 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

105 
PACK_STRUCT_FLD_8
(
u8_t
 
Êags1
);

106 
PACK_STRUCT_FLD_8
(
u8_t
 
Êags2
);

107 
PACK_STRUCT_FIELD
(
u16_t
 
numque°i⁄s
);

108 
PACK_STRUCT_FIELD
(
u16_t
 
num™swîs
);

109 
PACK_STRUCT_FIELD
(
u16_t
 
numauthº
);

110 
PACK_STRUCT_FIELD
(
u16_t
 
numexå¨r
);

111 } 
PACK_STRUCT_STRUCT
;

112 
PACK_STRUCT_END


113 #ifde‡
PACK_STRUCT_USE_INCLUDES


114 
	~"¨ch/ï°ru˘.h
"

116 
	#SIZEOF_DNS_HDR
 12

	)

122 #i‚de‡
DNS_MQUERY_PORT


123 
	#DNS_MQUERY_PORT
 5353

	)

127 #i‚de‡
DNS_MQUERY_IPV4_GROUP_INIT


128 
	#DNS_MQUERY_IPV4_GROUP_INIT
 
	`IPADDR4_INIT_BYTES
(224,0,0,251)

	)

132 #i‚de‡
DNS_MQUERY_IPV6_GROUP_INIT


133 
	#DNS_MQUERY_IPV6_GROUP_INIT
 
	`IPADDR6_INIT_HOST
(0xFF020000,0,0,0xFB)

	)

136 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/etharp.h

37 #i‚de‡
LWIP_HDR_PROT_ETHARP_H


38 
	#LWIP_HDR_PROT_ETHARP_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/¥Ÿ/ëhî√t.h
"

42 
	~"lwù/ù4_addr.h
"

44 #ifde‡
__˝lu•lus


48 #i‚de‡
ETHARP_HWADDR_LEN


49 
	#ETHARP_HWADDR_LEN
 
ETH_HWADDR_LEN


	)

52 #ifde‡
PACK_STRUCT_USE_INCLUDES


53 
	~"¨ch/bp°ru˘.h
"

55 
PACK_STRUCT_BEGIN


57 
	sëh¨p_hdr
 {

58 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

60 
PACK_STRUCT_FLD_8
(
u8_t
 
hwÀn
);

61 
PACK_STRUCT_FLD_8
(
u8_t
 
¥Ÿﬁí
);

62 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

63 
PACK_STRUCT_FLD_S
(
ëh_addr
 
shwaddr
);

64 
PACK_STRUCT_FLD_S
(
ù4_addr2
 
sùaddr
);

65 
PACK_STRUCT_FLD_S
(
ëh_addr
 
dhwaddr
);

66 
PACK_STRUCT_FLD_S
(
ù4_addr2
 
dùaddr
);

67 } 
PACK_STRUCT_STRUCT
;

68 
PACK_STRUCT_END


69 #ifde‡
PACK_STRUCT_USE_INCLUDES


70 
	~"¨ch/ï°ru˘.h
"

73 
	#SIZEOF_ETHARP_HDR
 28

	)

76 
	eëh¨p_hwty≥
 {

77 
HWTYPE_ETHERNET
 = 1

82 
	eëh¨p_›code
 {

83 
ARP_REQUEST
 = 1,

84 
ARP_REPLY
 = 2

87 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/ethernet.h

37 #i‚de‡
LWIP_HDR_PROT_ETHERNET_H


38 
	#LWIP_HDR_PROT_ETHERNET_H


	)

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


46 #i‚de‡
ETH_HWADDR_LEN


47 #ifde‡
ETHARP_HWADDR_LEN


48 
	#ETH_HWADDR_LEN
 
ETHARP_HWADDR_LEN


	)

50 
	#ETH_HWADDR_LEN
 6

	)

54 #ifde‡
PACK_STRUCT_USE_INCLUDES


55 
	~"¨ch/bp°ru˘.h
"

57 
PACK_STRUCT_BEGIN


58 
	sëh_addr
 {

59 
PACK_STRUCT_FLD_8
(
u8_t
 
addr
[
ETH_HWADDR_LEN
]);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 #ifde‡
PACK_STRUCT_USE_INCLUDES


67 
	~"¨ch/bp°ru˘.h
"

69 
PACK_STRUCT_BEGIN


71 
	sëh_hdr
 {

72 #i‡
ETH_PAD_SIZE


73 
PACK_STRUCT_FLD_8
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

75 
PACK_STRUCT_FLD_S
(
ëh_addr
 
de°
);

76 
PACK_STRUCT_FLD_S
(
ëh_addr
 
§c
);

77 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

78 } 
PACK_STRUCT_STRUCT
;

79 
PACK_STRUCT_END


80 #ifde‡
PACK_STRUCT_USE_INCLUDES


81 
	~"¨ch/ï°ru˘.h
"

84 
	#SIZEOF_ETH_HDR
 (14 + 
ETH_PAD_SIZE
)

	)

86 #ifde‡
PACK_STRUCT_USE_INCLUDES


87 
	~"¨ch/bp°ru˘.h
"

89 
PACK_STRUCT_BEGIN


93 
	sëh_vœn_hdr
 {

94 
PACK_STRUCT_FIELD
(
u16_t
 
¥io_vid
);

95 
PACK_STRUCT_FIELD
(
u16_t
 
çid
);

96 } 
PACK_STRUCT_STRUCT
;

97 
PACK_STRUCT_END


98 #ifde‡
PACK_STRUCT_USE_INCLUDES


99 
	~"¨ch/ï°ru˘.h
"

102 
	#SIZEOF_VLAN_HDR
 4

	)

103 
	#VLAN_ID
(
vœn_hdr
Ë(
	`lwù_ht⁄s
((vœn_hdr)->
¥io_vid
Ë& 0xFFF)

	)

108 
	eëh_ty≥
 {

110 
ETHTYPE_IP
 = 0x0800U,

112 
ETHTYPE_ARP
 = 0x0806U,

114 
ETHTYPE_WOL
 = 0x0842U,

116 
ETHTYPE_RARP
 = 0x8035U,

118 
ETHTYPE_VLAN
 = 0x8100U,

120 
ETHTYPE_IPV6
 = 0x86DDU,

122 
ETHTYPE_PPPOEDISC
 = 0x8863U,

124 
ETHTYPE_PPPOE
 = 0x8864U,

126 
ETHTYPE_JUMBO
 = 0x8870U,

128 
ETHTYPE_PROFINET
 = 0x8892U,

130 
ETHTYPE_ETHERCAT
 = 0x88A4U,

132 
ETHTYPE_LLDP
 = 0x88CCU,

134 
ETHTYPE_SERCOS
 = 0x88CDU,

136 
ETHTYPE_MRP
 = 0x88E3U,

138 
ETHTYPE_PTP
 = 0x88F7U,

140 
ETHTYPE_QINQ
 = 0x9100U

144 
	#LL_IP4_MULTICAST_ADDR_0
 0x01

	)

145 
	#LL_IP4_MULTICAST_ADDR_1
 0x00

	)

146 
	#LL_IP4_MULTICAST_ADDR_2
 0x5e

	)

149 
	#LL_IP6_MULTICAST_ADDR_0
 0x33

	)

150 
	#LL_IP6_MULTICAST_ADDR_1
 0x33

	)

154 #i‚de‡
ETHADDR32_COPY


155 
	#ETHADDR32_COPY
(
d°
, 
§c
Ë
	`SMEMCPY
(d°, src, 
ETH_HWADDR_LEN
)

	)

160 #i‚de‡
ETHADDR16_COPY


161 
	#ETHADDR16_COPY
(
d°
, 
§c
Ë
	`SMEMCPY
(d°, src, 
ETH_HWADDR_LEN
)

	)

164 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETH_HWADDR_LEN
Ë=0)

	)

166 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/icmp.h

37 #i‚de‡
LWIP_HDR_PROT_ICMP_H


38 
	#LWIP_HDR_PROT_ICMP_H


	)

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP_ER
 0

	)

47 
	#ICMP_DUR
 3

	)

48 
	#ICMP_SQ
 4

	)

49 
	#ICMP_RD
 5

	)

50 
	#ICMP_ECHO
 8

	)

51 
	#ICMP_TE
 11

	)

52 
	#ICMP_PP
 12

	)

53 
	#ICMP_TS
 13

	)

54 
	#ICMP_TSR
 14

	)

55 
	#ICMP_IRQ
 15

	)

56 
	#ICMP_IR
 16

	)

57 
	#ICMP_AM
 17

	)

58 
	#ICMP_AMR
 18

	)

60 #ifde‡
PACK_STRUCT_USE_INCLUDES


61 
	~"¨ch/bp°ru˘.h
"

68 
PACK_STRUCT_BEGIN


69 
	sicmp_echo_hdr
 {

70 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

71 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

72 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

73 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

74 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

75 } 
PACK_STRUCT_STRUCT
;

76 
PACK_STRUCT_END


77 #ifde‡
PACK_STRUCT_USE_INCLUDES


78 
	~"¨ch/ï°ru˘.h
"

82 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

83 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

84 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

85 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

87 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/icmp6.h

37 #i‚de‡
LWIP_HDR_PROT_ICMP6_H


38 
	#LWIP_HDR_PROT_ICMP6_H


	)

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


47 
	eicmp6_ty≥
 {

49 
ICMP6_TYPE_DUR
 = 1,

51 
ICMP6_TYPE_PTB
 = 2,

53 
ICMP6_TYPE_TE
 = 3,

55 
ICMP6_TYPE_PP
 = 4,

57 
ICMP6_TYPE_PE1
 = 100,

59 
ICMP6_TYPE_PE2
 = 101,

61 
ICMP6_TYPE_RSV_ERR
 = 127,

64 
ICMP6_TYPE_EREQ
 = 128,

66 
ICMP6_TYPE_EREP
 = 129,

68 
ICMP6_TYPE_MLQ
 = 130,

70 
ICMP6_TYPE_MLR
 = 131,

72 
ICMP6_TYPE_MLD
 = 132,

74 
ICMP6_TYPE_RS
 = 133,

76 
ICMP6_TYPE_RA
 = 134,

78 
ICMP6_TYPE_NS
 = 135,

80 
ICMP6_TYPE_NA
 = 136,

82 
ICMP6_TYPE_RD
 = 137,

84 
ICMP6_TYPE_MRA
 = 151,

86 
ICMP6_TYPE_MRS
 = 152,

88 
ICMP6_TYPE_MRT
 = 153,

90 
ICMP6_TYPE_PE3
 = 200,

92 
ICMP6_TYPE_PE4
 = 201,

94 
ICMP6_TYPE_RSV_INF
 = 255

98 
	eicmp6_dur_code
 {

100 
ICMP6_DUR_NO_ROUTE
 = 0,

102 
ICMP6_DUR_PROHIBITED
 = 1,

104 
ICMP6_DUR_SCOPE
 = 2,

106 
ICMP6_DUR_ADDRESS
 = 3,

108 
ICMP6_DUR_PORT
 = 4,

110 
ICMP6_DUR_POLICY
 = 5,

112 
ICMP6_DUR_REJECT_ROUTE
 = 6

116 
	eicmp6_ã_code
 {

118 
ICMP6_TE_HL
 = 0,

120 
ICMP6_TE_FRAG
 = 1

124 
	eicmp6_µ_code
 {

126 
ICMP6_PP_FIELD
 = 0,

128 
ICMP6_PP_HEADER
 = 1,

130 
ICMP6_PP_OPTION
 = 2

134 #ifde‡
PACK_STRUCT_USE_INCLUDES


135 
	~"¨ch/bp°ru˘.h
"

137 
PACK_STRUCT_BEGIN


138 
	sicmp6_hdr
 {

139 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

140 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

141 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

142 
PACK_STRUCT_FIELD
(
u32_t
 
d©a
);

143 } 
PACK_STRUCT_STRUCT
;

144 
PACK_STRUCT_END


145 #ifde‡
PACK_STRUCT_USE_INCLUDES


146 
	~"¨ch/ï°ru˘.h
"

150 #ifde‡
PACK_STRUCT_USE_INCLUDES


151 
	~"¨ch/bp°ru˘.h
"

153 
PACK_STRUCT_BEGIN


154 
	sicmp6_echo_hdr
 {

155 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

156 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

157 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

158 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

159 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

160 } 
PACK_STRUCT_STRUCT
;

161 
PACK_STRUCT_END


162 #ifde‡
PACK_STRUCT_USE_INCLUDES


163 
	~"¨ch/ï°ru˘.h
"

166 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/igmp.h

37 #i‚de‡
LWIP_HDR_PROT_IGMP_H


38 
	#LWIP_HDR_PROT_IGMP_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/ù4_addr.h
"

43 #ifde‡
__˝lu•lus


50 
	#IGMP_TTL
 1

	)

51 
	#IGMP_MINLEN
 8

	)

52 
	#ROUTER_ALERT
 0x9404U

	)

53 
	#ROUTER_ALERTLEN
 4

	)

58 
	#IGMP_MEMB_QUERY
 0x11

	)

59 
	#IGMP_V1_MEMB_REPORT
 0x12

	)

60 
	#IGMP_V2_MEMB_REPORT
 0x16

	)

61 
	#IGMP_LEAVE_GROUP
 0x17

	)

64 
	#IGMP_GROUP_NON_MEMBER
 0

	)

65 
	#IGMP_GROUP_DELAYING_MEMBER
 1

	)

66 
	#IGMP_GROUP_IDLE_MEMBER
 2

	)

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sigmp_msg
 {

76 
PACK_STRUCT_FLD_8
(
u8_t
 
igmp_msgty≥
);

77 
PACK_STRUCT_FLD_8
(
u8_t
 
igmp_maxª•
);

78 
PACK_STRUCT_FIELD
(
u16_t
 
igmp_checksum
);

79 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
igmp_group_addªss
);

80 } 
PACK_STRUCT_STRUCT
;

81 
PACK_STRUCT_END


82 #ifde‡
PACK_STRUCT_USE_INCLUDES


83 
	~"¨ch/ï°ru˘.h
"

86 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/ip.h

37 #i‚de‡
LWIP_HDR_PROT_IP_H


38 
	#LWIP_HDR_PROT_IP_H


	)

40 
	~"lwù/¨ch.h
"

42 
	#IP_PROTO_ICMP
 1

	)

43 
	#IP_PROTO_IGMP
 2

	)

44 
	#IP_PROTO_UDP
 17

	)

45 
	#IP_PROTO_UDPLITE
 136

	)

46 
	#IP_PROTO_TCP
 6

	)

49 
	#IP_HDR_GET_VERSION
(
±r
Ë((*(
u8_t
*)’å)Ë>> 4)

	)

	@include_lib/net/lwip/src/include/lwip/prot/ip4.h

37 #i‚de‡
LWIP_HDR_PROT_IP4_H


38 
	#LWIP_HDR_PROT_IP4_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/ù4_addr.h
"

43 #ifde‡
__˝lu•lus


49 #ifde‡
PACK_STRUCT_USE_INCLUDES


50 
	~"¨ch/bp°ru˘.h
"

52 
PACK_STRUCT_BEGIN


53 
	sù4_addr_∑cked
 {

54 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

55 } 
PACK_STRUCT_STRUCT
;

56 
PACK_STRUCT_END


57 #ifde‡
PACK_STRUCT_USE_INCLUDES


58 
	~"¨ch/ï°ru˘.h
"

61 
ù4_addr_∑cked
 
	tù4_addr_p_t
;

64 
	#IP_HLEN
 20

	)

66 #ifde‡
PACK_STRUCT_USE_INCLUDES


67 
	~"¨ch/bp°ru˘.h
"

69 
PACK_STRUCT_BEGIN


71 
	sù_hdr
 {

73 
PACK_STRUCT_FLD_8
(
u8_t
 
_v_hl
);

75 
PACK_STRUCT_FLD_8
(
u8_t
 
_tos
);

77 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

79 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

82 
	#IP_RF
 0x8000U

	)

83 
	#IP_DF
 0x4000U

	)

84 
	#IP_MF
 0x2000U

	)

85 
	#IP_OFFMASK
 0x1fffU

	)

87 
PACK_STRUCT_FLD_8
(
u8_t
 
_âl
);

89 
PACK_STRUCT_FLD_8
(
u8_t
 
_¥Ÿo
);

91 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

93 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
§c
);

94 
PACK_STRUCT_FLD_S
(
ù4_addr_p_t
 
de°
);

95 } 
PACK_STRUCT_STRUCT
;

96 
PACK_STRUCT_END


97 #ifde‡
PACK_STRUCT_USE_INCLUDES


98 
	~"¨ch/ï°ru˘.h
"

102 
	#IPH_V
(
hdr
Ë((hdr)->
_v_hl
 >> 4)

	)

103 
	#IPH_HL
(
hdr
Ë((hdr)->
_v_hl
 & 0x0f)

	)

104 
	#IPH_TOS
(
hdr
Ë((hdr)->
_tos
)

	)

105 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

106 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

107 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

108 
	#IPH_TTL
(
hdr
Ë((hdr)->
_âl
)

	)

109 
	#IPH_PROTO
(
hdr
Ë((hdr)->
_¥Ÿo
)

	)

110 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

113 
	#IPH_VHL_SET
(
hdr
, 
v
, 
hl
Ë(hdr)->
_v_hl
 = (
u8_t
)((((vË<< 4Ë| (hl)))

	)

114 
	#IPH_TOS_SET
(
hdr
, 
tos
Ë(hdr)->
_tos
 = (tos)

	)

115 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

116 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

117 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

118 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl
 = (
u8_t
)—é)

	)

119 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_¥Ÿo
 = (
u8_t
)’rŸo)

	)

120 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

123 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/ip6.h

37 #i‚de‡
LWIP_HDR_PROT_IP6_H


38 
	#LWIP_HDR_PROT_IP6_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/ù6_addr.h
"

43 #ifde‡
__˝lu•lus


49 #ifde‡
PACK_STRUCT_USE_INCLUDES


50 
	~"¨ch/bp°ru˘.h
"

52 
PACK_STRUCT_BEGIN


53 
	sù6_addr_∑cked
 {

54 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

55 } 
PACK_STRUCT_STRUCT
;

56 
PACK_STRUCT_END


57 #ifde‡
PACK_STRUCT_USE_INCLUDES


58 
	~"¨ch/ï°ru˘.h
"

60 
ù6_addr_∑cked
 
	tù6_addr_p_t
;

62 
	#IP6_HLEN
 40

	)

64 
	#IP6_NEXTH_HOPBYHOP
 0

	)

65 
	#IP6_NEXTH_TCP
 6

	)

66 
	#IP6_NEXTH_UDP
 17

	)

67 
	#IP6_NEXTH_ENCAPS
 41

	)

68 
	#IP6_NEXTH_ROUTING
 43

	)

69 
	#IP6_NEXTH_FRAGMENT
 44

	)

70 
	#IP6_NEXTH_ICMP6
 58

	)

71 
	#IP6_NEXTH_NONE
 59

	)

72 
	#IP6_NEXTH_DESTOPTS
 60

	)

73 
	#IP6_NEXTH_UDPLITE
 136

	)

76 #ifde‡
PACK_STRUCT_USE_INCLUDES


77 
	~"¨ch/bp°ru˘.h
"

79 
PACK_STRUCT_BEGIN


80 
	sù6_hdr
 {

82 
PACK_STRUCT_FIELD
(
u32_t
 
_v_tc_Ê
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
_∂í
);

86 
PACK_STRUCT_FLD_8
(
u8_t
 
_√xth
);

88 
PACK_STRUCT_FLD_8
(
u8_t
 
_h›lim
);

90 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
§c
);

91 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
de°
);

92 } 
PACK_STRUCT_STRUCT
;

93 
PACK_STRUCT_END


94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/ï°ru˘.h
"

99 
	#IP6_HBH_HLEN
 8

	)

100 
	#IP6_PAD1_OPTION
 0

	)

101 
	#IP6_PADN_ALERT_OPTION
 1

	)

102 
	#IP6_ROUTER_ALERT_OPTION
 5

	)

103 
	#IP6_ROUTER_ALERT_VALUE_MLD
 0

	)

104 #ifde‡
PACK_STRUCT_USE_INCLUDES


105 
	~"¨ch/bp°ru˘.h
"

107 
PACK_STRUCT_BEGIN


108 
	sù6_hbh_hdr
 {

110 
PACK_STRUCT_FLD_8
(
u8_t
 
_√xth
);

112 
PACK_STRUCT_FLD_8
(
u8_t
 
_hÀn
);

114 
PACK_STRUCT_FLD_8
(
u8_t
 
_ø_›t_ty≥
);

116 
PACK_STRUCT_FLD_8
(
u8_t
 
_ø_›t_dÀn
);

118 
PACK_STRUCT_FIELD
(
u16_t
 
_ø_›t_d©a
);

120 
PACK_STRUCT_FLD_8
(
u8_t
 
_∑dn_›t_ty≥
);

122 
PACK_STRUCT_FLD_8
(
u8_t
 
_∑dn_›t_dÀn
);

123 } 
PACK_STRUCT_STRUCT
;

124 
PACK_STRUCT_END


125 #ifde‡
PACK_STRUCT_USE_INCLUDES


126 
	~"¨ch/ï°ru˘.h
"

130 
	#IP6_FRAG_HLEN
 8

	)

131 
	#IP6_FRAG_OFFSET_MASK
 0xfff8

	)

132 
	#IP6_FRAG_MORE_FLAG
 0x0001

	)

133 #ifde‡
PACK_STRUCT_USE_INCLUDES


134 
	~"¨ch/bp°ru˘.h
"

136 
PACK_STRUCT_BEGIN


137 
	sù6_‰ag_hdr
 {

139 
PACK_STRUCT_FLD_8
(
u8_t
 
_√xth
);

141 
PACK_STRUCT_FLD_8
(
u8_t
 
ª£rved
);

143 
PACK_STRUCT_FIELD
(
u16_t
 
_‰agmít_off£t
);

145 
PACK_STRUCT_FIELD
(
u32_t
 
_idítifiˇti⁄
);

146 } 
PACK_STRUCT_STRUCT
;

147 
PACK_STRUCT_END


148 #ifde‡
PACK_STRUCT_USE_INCLUDES


149 
	~"¨ch/ï°ru˘.h
"

152 
	#IP6H_V
(
hdr
Ë((
	`lwù_¡ohl
((hdr)->
_v_tc_Ê
Ë>> 28Ë& 0x0f)

	)

153 
	#IP6H_TC
(
hdr
Ë((
	`lwù_¡ohl
((hdr)->
_v_tc_Ê
Ë>> 20Ë& 0xff)

	)

154 
	#IP6H_FL
(
hdr
Ë(
	`lwù_¡ohl
((hdr)->
_v_tc_Ê
Ë& 0x000fffff)

	)

155 
	#IP6H_PLEN
(
hdr
Ë(
	`lwù_¡ohs
((hdr)->
_∂í
))

	)

156 
	#IP6H_NEXTH
(
hdr
Ë((hdr)->
_√xth
)

	)

157 
	#IP6H_NEXTH_P
(
hdr
Ë((
u8_t
 *)(hdrË+ 6)

	)

158 
	#IP6H_HOPLIM
(
hdr
Ë((hdr)->
_h›lim
)

	)

160 
	#IP6H_VTCFL_SET
(
hdr
, 
v
, 
tc
, 
Ê
Ë(hdr)->
_v_tc_Ê
 = (
	`lwù_ht⁄l
((((
u32_t
)(v)Ë<< 28Ë| (((u32_t)—c)Ë<< 20Ë| (Ê)))

	)

161 
	#IP6H_PLEN_SET
(
hdr
, 
∂í
Ë(hdr)->
_∂í
 = 
	`lwù_ht⁄s
’Àn)

	)

162 
	#IP6H_NEXTH_SET
(
hdr
, 
√xth
Ë(hdr)->
_√xth
 = (√xth)

	)

163 
	#IP6H_HOPLIM_SET
(
hdr
, 
hl
Ë(hdr)->
_h›lim
 = (
u8_t
)(hl)

	)

165 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/mld6.h

37 #i‚de‡
LWIP_HDR_PROT_MLD6_H


38 
	#LWIP_HDR_PROT_MLD6_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/¥Ÿ/ù6.h
"

43 #ifde‡
__˝lu•lus


48 #ifde‡
PACK_STRUCT_USE_INCLUDES


49 
	~"¨ch/bp°ru˘.h
"

51 
PACK_STRUCT_BEGIN


52 
	smld_hódî
 {

53 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

54 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

55 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

56 
PACK_STRUCT_FIELD
(
u16_t
 
max_ª•_dñay
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
ª£rved
);

58 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
mu…iˇ°_addªss
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/nd6.h

37 #i‚de‡
LWIP_HDR_PROT_ND6_H


38 
	#LWIP_HDR_PROT_ND6_H


	)

40 
	~"lwù/¨ch.h
"

41 
	~"lwù/ù6_addr.h
"

42 
	~"lwù/¥Ÿ/ù6.h
"

44 #ifde‡
__˝lu•lus


49 #ifde‡
PACK_STRUCT_USE_INCLUDES


50 
	~"¨ch/bp°ru˘.h
"

52 
PACK_STRUCT_BEGIN


53 
	sns_hódî
 {

54 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

55 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

56 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

57 
PACK_STRUCT_FIELD
(
u32_t
 
ª£rved
);

58 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
èrgë_addªss
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/bp°ru˘.h
"

70 
PACK_STRUCT_BEGIN


71 
	s«_hódî
 {

72 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

73 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

74 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

75 
PACK_STRUCT_FLD_8
(
u8_t
 
Êags
);

76 
PACK_STRUCT_FLD_8
(
u8_t
 
ª£rved
[3]);

77 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
èrgë_addªss
);

79 } 
PACK_STRUCT_STRUCT
;

80 
PACK_STRUCT_END


81 #ifde‡
PACK_STRUCT_USE_INCLUDES


82 
	~"¨ch/ï°ru˘.h
"

84 
	#ND6_FLAG_ROUTER
 (0x80)

	)

85 
	#ND6_FLAG_SOLICITED
 (0x40)

	)

86 
	#ND6_FLAG_OVERRIDE
 (0x20)

	)

89 #ifde‡
PACK_STRUCT_USE_INCLUDES


90 
	~"¨ch/bp°ru˘.h
"

92 
PACK_STRUCT_BEGIN


93 
	srs_hódî
 {

94 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

95 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

96 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

97 
PACK_STRUCT_FIELD
(
u32_t
 
ª£rved
);

99 } 
PACK_STRUCT_STRUCT
;

100 
PACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

106 
	#ND6_RA_FLAG_MANAGED_ADDR_CONFIG
 (0x80)

	)

107 
	#ND6_RA_FLAG_OTHER_CONFIG
 (0x40)

	)

108 
	#ND6_RA_FLAG_HOME_AGENT
 (0x20)

	)

109 
	#ND6_RA_PREFERENCE_MASK
 (0x18)

	)

110 
	#ND6_RA_PREFERENCE_HIGH
 (0x08)

	)

111 
	#ND6_RA_PREFERENCE_MEDIUM
 (0x00)

	)

112 
	#ND6_RA_PREFERENCE_LOW
 (0x18)

	)

113 
	#ND6_RA_PREFERENCE_DISABLED
 (0x10)

	)

114 #ifde‡
PACK_STRUCT_USE_INCLUDES


115 
	~"¨ch/bp°ru˘.h
"

117 
PACK_STRUCT_BEGIN


118 
	sø_hódî
 {

119 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

120 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

121 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

122 
PACK_STRUCT_FLD_8
(
u8_t
 
cuºít_h›_limô
);

123 
PACK_STRUCT_FLD_8
(
u8_t
 
Êags
);

124 
PACK_STRUCT_FIELD
(
u16_t
 
rouãr_li„time
);

125 
PACK_STRUCT_FIELD
(
u32_t
 
ªachabÀ_time
);

126 
PACK_STRUCT_FIELD
(
u32_t
 
ªå™s_timî
);

128 } 
PACK_STRUCT_STRUCT
;

129 
PACK_STRUCT_END


130 #ifde‡
PACK_STRUCT_USE_INCLUDES


131 
	~"¨ch/ï°ru˘.h
"

135 #ifde‡
PACK_STRUCT_USE_INCLUDES


136 
	~"¨ch/bp°ru˘.h
"

138 
PACK_STRUCT_BEGIN


139 
	sªdúe˘_hódî
 {

140 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

141 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

142 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

143 
PACK_STRUCT_FIELD
(
u32_t
 
ª£rved
);

144 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
èrgë_addªss
);

145 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
de°ö©i⁄_addªss
);

147 } 
PACK_STRUCT_STRUCT
;

148 
PACK_STRUCT_END


149 #ifde‡
PACK_STRUCT_USE_INCLUDES


150 
	~"¨ch/ï°ru˘.h
"

154 
	#ND6_OPTION_TYPE_SOURCE_LLADDR
 (0x01)

	)

155 
	#ND6_OPTION_TYPE_TARGET_LLADDR
 (0x02)

	)

156 #ifde‡
PACK_STRUCT_USE_INCLUDES


157 
	~"¨ch/bp°ru˘.h
"

159 
PACK_STRUCT_BEGIN


160 
	sŒaddr_›ti⁄
 {

161 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

162 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

163 
PACK_STRUCT_FLD_8
(
u8_t
 
addr
[
NETIF_MAX_HWADDR_LEN
]);

164 } 
PACK_STRUCT_STRUCT
;

165 
PACK_STRUCT_END


166 #ifde‡
PACK_STRUCT_USE_INCLUDES


167 
	~"¨ch/ï°ru˘.h
"

171 
	#ND6_OPTION_TYPE_PREFIX_INFO
 (0x03)

	)

172 
	#ND6_PREFIX_FLAG_ON_LINK
 (0x80)

	)

173 
	#ND6_PREFIX_FLAG_AUTONOMOUS
 (0x40)

	)

174 
	#ND6_PREFIX_FLAG_ROUTER_ADDRESS
 (0x20)

	)

175 
	#ND6_PREFIX_FLAG_SITE_PREFIX
 (0x10)

	)

176 #ifde‡
PACK_STRUCT_USE_INCLUDES


177 
	~"¨ch/bp°ru˘.h
"

179 
PACK_STRUCT_BEGIN


180 
	s¥efix_›ti⁄
 {

181 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

182 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

183 
PACK_STRUCT_FLD_8
(
u8_t
 
¥efix_Àngth
);

184 
PACK_STRUCT_FLD_8
(
u8_t
 
Êags
);

185 
PACK_STRUCT_FIELD
(
u32_t
 
vÆid_li„time
);

186 
PACK_STRUCT_FIELD
(
u32_t
 
¥e„ºed_li„time
);

187 
PACK_STRUCT_FLD_8
(
u8_t
 
ª£rved2
[3]);

188 
PACK_STRUCT_FLD_8
(
u8_t
 
sôe_¥efix_Àngth
);

189 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
¥efix
);

190 } 
PACK_STRUCT_STRUCT
;

191 
PACK_STRUCT_END


192 #ifde‡
PACK_STRUCT_USE_INCLUDES


193 
	~"¨ch/ï°ru˘.h
"

197 
	#ND6_OPTION_TYPE_REDIR_HDR
 (0x04)

	)

198 #ifde‡
PACK_STRUCT_USE_INCLUDES


199 
	~"¨ch/bp°ru˘.h
"

201 
PACK_STRUCT_BEGIN


202 
	sªdúe˘ed_hódî_›ti⁄
 {

203 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

204 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

205 
PACK_STRUCT_FLD_8
(
u8_t
 
ª£rved
[6]);

208 } 
PACK_STRUCT_STRUCT
;

209 
PACK_STRUCT_END


210 #ifde‡
PACK_STRUCT_USE_INCLUDES


211 
	~"¨ch/ï°ru˘.h
"

215 
	#ND6_OPTION_TYPE_MTU
 (0x05)

	)

216 #ifde‡
PACK_STRUCT_USE_INCLUDES


217 
	~"¨ch/bp°ru˘.h
"

219 
PACK_STRUCT_BEGIN


220 
	smtu_›ti⁄
 {

221 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

222 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

223 
PACK_STRUCT_FIELD
(
u16_t
 
ª£rved
);

224 
PACK_STRUCT_FIELD
(
u32_t
 
mtu
);

225 } 
PACK_STRUCT_STRUCT
;

226 
PACK_STRUCT_END


227 #ifde‡
PACK_STRUCT_USE_INCLUDES


228 
	~"¨ch/ï°ru˘.h
"

232 
	#ND6_OPTION_TYPE_ROUTE_INFO
 (24)

	)

233 #ifde‡
PACK_STRUCT_USE_INCLUDES


234 
	~"¨ch/bp°ru˘.h
"

236 
PACK_STRUCT_BEGIN


237 
	srouã_›ti⁄
 {

238 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

239 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

240 
PACK_STRUCT_FLD_8
(
u8_t
 
¥efix_Àngth
);

241 
PACK_STRUCT_FLD_8
(
u8_t
 
¥e„ªn˚
);

242 
PACK_STRUCT_FIELD
(
u32_t
 
rouã_li„time
);

243 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
¥efix
);

244 } 
PACK_STRUCT_STRUCT
;

245 
PACK_STRUCT_END


246 #ifde‡
PACK_STRUCT_USE_INCLUDES


247 
	~"¨ch/ï°ru˘.h
"

251 #i‡
LWIP_ND6_RDNSS_MAX_DNS_SERVERS


252 
	#LWIP_RDNSS_OPTION_MAX_SERVERS
 
LWIP_ND6_RDNSS_MAX_DNS_SERVERS


	)

254 
	#LWIP_RDNSS_OPTION_MAX_SERVERS
 1

	)

256 
	#ND6_OPTION_TYPE_RDNSS
 (25)

	)

257 #ifde‡
PACK_STRUCT_USE_INCLUDES


258 
	~"¨ch/bp°ru˘.h
"

260 
PACK_STRUCT_BEGIN


261 
	srdnss_›ti⁄
 {

262 
PACK_STRUCT_FLD_8
(
u8_t
 
ty≥
);

263 
PACK_STRUCT_FLD_8
(
u8_t
 
Àngth
);

264 
PACK_STRUCT_FIELD
(
u16_t
 
ª£rved
);

265 
PACK_STRUCT_FIELD
(
u32_t
 
li„time
);

266 
PACK_STRUCT_FLD_S
(
ù6_addr_p_t
 
rdnss_addªss
[
LWIP_RDNSS_OPTION_MAX_SERVERS
]);

267 } 
PACK_STRUCT_STRUCT
;

268 
PACK_STRUCT_END


269 #ifde‡
PACK_STRUCT_USE_INCLUDES


270 
	~"¨ch/ï°ru˘.h
"

273 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/tcp.h

37 #i‚de‡
LWIP_HDR_PROT_TCP_H


38 
	#LWIP_HDR_PROT_TCP_H


	)

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


47 
	#TCP_HLEN
 20

	)

52 #ifde‡
PACK_STRUCT_USE_INCLUDES


53 
	~"¨ch/bp°ru˘.h
"

55 
PACK_STRUCT_BEGIN


56 
	st˝_hdr
 {

57 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

59 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

60 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

61 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

62 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

63 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

64 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

72 
	#TCP_FIN
 0x01U

	)

73 
	#TCP_SYN
 0x02U

	)

74 
	#TCP_RST
 0x04U

	)

75 
	#TCP_PSH
 0x08U

	)

76 
	#TCP_ACK
 0x10U

	)

77 
	#TCP_URG
 0x20U

	)

78 
	#TCP_ECE
 0x40U

	)

79 
	#TCP_CWR
 0x80U

	)

81 
	#TCP_FLAGS
 0x3fU

	)

83 
	#TCPH_HDRLEN
(
phdr
Ë((
u16_t
)(
	`lwù_¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12))

	)

84 
	#TCPH_FLAGS
(
phdr
Ë((
u16_t
)(
	`lwù_¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
))

	)

86 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`lwù_ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

87 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = ((’hdr)->_hdæí_rsvd_Êag†& 
	`PP_HTONS
(~
TCP_FLAGS
)Ë| 
	`lwù_ht⁄s
(Êags))

	)

88 
	#TCPH_HDRLEN_FLAGS_SET
(
phdr
, 
Àn
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = (
u16_t
)(
	`lwù_ht⁄s
((u16_t)(÷íË<< 12Ë| (Êags)))

	)

90 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = (’hdr)->_hdæí_rsvd_Êag†| 
	`lwù_ht⁄s
(Êags))

	)

91 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = (’hdr)->_hdæí_rsvd_Êag†& ~
	`lwù_ht⁄s
(Êags))

	)

93 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/prot/udp.h

37 #i‚de‡
LWIP_HDR_PROT_UDP_H


38 
	#LWIP_HDR_PROT_UDP_H


	)

40 
	~"lwù/¨ch.h
"

42 #ifde‡
__˝lu•lus


46 
	#UDP_HLEN
 8

	)

49 #ifde‡
PACK_STRUCT_USE_INCLUDES


50 
	~"¨ch/bp°ru˘.h
"

52 
PACK_STRUCT_BEGIN


53 
	sudp_hdr
 {

54 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

55 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

56 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

58 } 
PACK_STRUCT_STRUCT
;

59 
PACK_STRUCT_END


60 #ifde‡
PACK_STRUCT_USE_INCLUDES


61 
	~"¨ch/ï°ru˘.h
"

64 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/raw.h

38 #i‚de‡
LWIP_HDR_RAW_H


39 
	#LWIP_HDR_RAW_H


	)

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_RAW


45 
	~"lwù/pbuf.h
"

46 
	~"lwù/def.h
"

47 
	~"lwù/ù.h
"

48 
	~"lwù/ù_addr.h
"

49 
	~"lwù/ù6_addr.h
"

51 #ifde‡
__˝lu•lus


55 
øw_pcb
;

67 
u8_t
 (*
	tøw_ªcv_‚
)(*
	t¨g
, 
	tøw_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

68 c⁄° 
	tù_addr_t
 *
	taddr
);

71 
	søw_pcb
 {

73 
IP_PCB
;

75 
øw_pcb
 *
√xt
;

77 
u8_t
 
¥Ÿocﬁ
;

80 
øw_ªcv_‚
 
ªcv
;

82 *
ªcv_¨g
;

83 #i‡
LWIP_IPV6


85 
u16_t
 
chksum_off£t
;

86 
u8_t
 
chksum_ªqd
;

92 
øw_pcb
 *
øw_√w
(
u8_t
 
¥Ÿo
);

93 
øw_pcb
 *
øw_√w_ù_ty≥
(
u8_t
 
ty≥
, u8_à
¥Ÿo
);

94 
øw_ªmove
(
øw_pcb
 *
pcb
);

95 
îr_t
 
øw_böd
(
øw_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
);

96 
îr_t
 
øw_c⁄√˘
(
øw_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
);

98 
îr_t
 
øw_£ndto
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
, c⁄° 
ù_addr_t
 *
ùaddr
);

99 
îr_t
 
øw_£nd
(
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

101 
øw_ªcv
(
øw_pcb
 *
pcb
, 
øw_ªcv_‚
 
ªcv
, *
ªcv_¨g
);

104 
u8_t
 
øw_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

105 
	#øw_öô
(Ë

	)

107 
øw_√tif_ù_addr_ch™ged
(c⁄° 
ù_addr_t
 *
ﬁd_addr
, c⁄° ip_addr_à*
√w_addr
);

110 
	#øw_√w_ù6
(
¥Ÿo
Ë
	`øw_√w_ù_ty≥
(
IPADDR_TYPE_V6
,ÖrŸo)

	)

112 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/sio.h

35 #i‚de‡
SIO_H


36 
	#SIO_H


	)

38 
	~"lwù/¨ch.h
"

39 
	~"lwù/›t.h
"

41 #ifde‡
__˝lu•lus


47 #i‚de‡
__sio_fd_t_deföed


48 *
	tsio_fd_t
;

54 #i‚de‡
sio_›í


61 
sio_fd_t
 
sio_›í
(
u8_t
 
devnum
);

64 #i‚de‡
sio_£nd


73 
sio_£nd
(
u8_t
 
c
, 
sio_fd_t
 
fd
);

76 #i‚de‡
sio_ªcv


84 
u8_t
 
sio_ªcv
(
sio_fd_t
 
fd
);

87 #i‚de‡
sio_ªad


99 
u32_t
 
sio_ªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

102 #i‚de‡
sio_åyªad


112 
u32_t
 
sio_åyªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

115 #i‚de‡
sio_wrôe


126 
u32_t
 
sio_wrôe
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

129 #i‚de‡
sio_ªad_ab‹t


135 
sio_ªad_ab‹t
(
sio_fd_t
 
fd
);

138 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/snmp.h

37 #i‚de‡
LWIP_HDR_SNMP_H


38 
	#LWIP_HDR_SNMP_H


	)

40 
	~"lwù/›t.h
"

41 
	~"lwù/ù_addr.h
"

43 #ifde‡
__˝lu•lus


47 
udp_pcb
;

48 
√tif
;

56 #i‡
MIB2_STATS


61 
	e¢mp_ifTy≥
 {

62 
¢mp_ifTy≥_Ÿhî
 = 1,

63 
¢mp_ifTy≥_ªguœr1822
,

64 
¢mp_ifTy≥_hdh1822
,

65 
¢mp_ifTy≥_ddn_x25
,

66 
¢mp_ifTy≥_rfc877_x25
,

67 
¢mp_ifTy≥_ëhî√t_csmacd
,

68 
¢mp_ifTy≥_iso88023_csmacd
,

69 
¢mp_ifTy≥_iso88024_tokíBus
,

70 
¢mp_ifTy≥_iso88025_tokíRög
,

71 
¢mp_ifTy≥_iso88026_m™
,

72 
¢mp_ifTy≥_°¨L™
,

73 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

74 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

75 
¢mp_ifTy≥_hy≥rch™√l
,

76 
¢mp_ifTy≥_fddi
,

77 
¢mp_ifTy≥_œpb
,

78 
¢mp_ifTy≥_sdlc
,

79 
¢mp_ifTy≥_ds1
,

80 
¢mp_ifTy≥_e1
,

81 
¢mp_ifTy≥_basicISDN
,

82 
¢mp_ifTy≥_¥im¨yISDN
,

83 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

84 
¢mp_ifTy≥_µp
,

85 
¢mp_ifTy≥_so·w¨eLo›back
,

86 
¢mp_ifTy≥_e⁄
,

87 
¢mp_ifTy≥_ëhî√t_3Mbô
,

88 
¢mp_ifTy≥_nsù
,

89 
¢mp_ifTy≥_¶ù
,

90 
¢mp_ifTy≥_u…ø
,

91 
¢mp_ifTy≥_ds3
,

92 
¢mp_ifTy≥_sù
,

93 
¢mp_ifTy≥_‰ame_ªœy


97 #i‚de‡
MIB2_COPY_SYSUPTIME_TO


98 
	#MIB2_COPY_SYSUPTIME_TO
(
±rToVÆ
Ë(*’åToVÆË(
	`sys_now
(Ë/ 10))

	)

105 
	#MIB2_STATS_NETIF_INC
(
n
, 
x
Ëdÿ{ ++“)->
mib2_cou¡îs
.x; } 0)

	)

110 
	#MIB2_STATS_NETIF_ADD
(
n
, 
x
, 
vÆ
Ëdÿ{ (n)->
mib2_cou¡îs
.x +(vÆ); } 0)

	)

119 
	#MIB2_INIT_NETIF
(
√tif
, 
ty≥
, 
•ìd
) do { \

120 (
√tif
)->
lök_ty≥
 = (
ty≥
); \

121 (
√tif
)->
lök_•ìd
 = (
•ìd
);\

122 (
√tif
)->
ts
 = 0; \

123 (
√tif
)->
mib2_cou¡îs
.
iföo˘ës
 = 0; \

124 (
√tif
)->
mib2_cou¡îs
.
iföuˇ°pkts
 = 0; \

125 (
√tif
)->
mib2_cou¡îs
.
ifönuˇ°pkts
 = 0; \

126 (
√tif
)->
mib2_cou¡îs
.
ifödisˇrds
 = 0; \

127 (
√tif
)->
mib2_cou¡îs
.
iföîr‹s
 = 0; \

128 (
√tif
)->
mib2_cou¡îs
.
iföunknow≈rŸos
 = 0; \

129 (
√tif
)->
mib2_cou¡îs
.
ifouto˘ës
 = 0; \

130 (
√tif
)->
mib2_cou¡îs
.
ifoutuˇ°pkts
 = 0; \

131 (
√tif
)->
mib2_cou¡îs
.
ifouäuˇ°pkts
 = 0; \

132 (
√tif
)->
mib2_cou¡îs
.
ifoutdisˇrds
 = 0; \

133 (
√tif
)->
mib2_cou¡îs
.
ifouãº‹s
 = 0; } 0)

	)

135 #i‚de‡
MIB2_COPY_SYSUPTIME_TO


136 
	#MIB2_COPY_SYSUPTIME_TO
(
±rToVÆ
)

	)

138 
	#MIB2_INIT_NETIF
(
√tif
, 
ty≥
, 
•ìd
)

	)

139 
	#MIB2_STATS_NETIF_INC
(
n
, 
x
)

	)

140 
	#MIB2_STATS_NETIF_ADD
(
n
, 
x
, 
vÆ
)

	)

144 #i‡
LWIP_MIB2_CALLBACKS


146 
mib2_√tif_added
(
√tif
 *
ni
);

147 
mib2_√tif_ªmoved
(
√tif
 *
ni
);

149 #i‡
LWIP_IPV4
 && 
LWIP_ARP


151 
mib2_add_¨p_íåy
(
√tif
 *
ni
, 
ù4_addr_t
 *
ù
);

152 
mib2_ªmove_¨p_íåy
(
√tif
 *
ni
, 
ù4_addr_t
 *
ù
);

154 
	#mib2_add_¨p_íåy
(
ni
,
ù
)

	)

155 
	#mib2_ªmove_¨p_íåy
(
ni
,
ù
)

	)

159 #i‡
LWIP_IPV4


160 
mib2_add_ù4
(
√tif
 *
ni
);

161 
mib2_ªmove_ù4
(
√tif
 *
ni
);

162 
mib2_add_rouã_ù4
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

163 
mib2_ªmove_rouã_ù4
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

167 #i‡
LWIP_UDP


168 
mib2_udp_böd
(
udp_pcb
 *
pcb
);

169 
mib2_udp_unböd
(
udp_pcb
 *
pcb
);

177 
	#mib2_√tif_added
(
ni
)

	)

178 
	#mib2_√tif_ªmoved
(
ni
)

	)

181 
	#mib2_add_¨p_íåy
(
ni
,
ù
)

	)

182 
	#mib2_ªmove_¨p_íåy
(
ni
,
ù
)

	)

185 
	#mib2_add_ù4
(
ni
)

	)

186 
	#mib2_ªmove_ù4
(
ni
)

	)

187 
	#mib2_add_rouã_ù4
(
dÊt
, 
ni
)

	)

188 
	#mib2_ªmove_rouã_ù4
(
dÊt
, 
ni
)

	)

191 
	#mib2_udp_böd
(
pcb
)

	)

192 
	#mib2_udp_unböd
(
pcb
)

	)

196 
	#NETIF_INIT_SNMP
 
MIB2_INIT_NETIF


	)

197 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
Ë
	`MIB2_STATS_NETIF_ADD
“i, 
iföo˘ës
, vÆue)

	)

198 
	#¢mp_öc_iföuˇ°pkts
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
iföuˇ°pkts
)

	)

199 
	#¢mp_öc_ifönuˇ°pkts
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifönuˇ°pkts
)

	)

200 
	#¢mp_öc_ifödisˇrds
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifödisˇrds
)

	)

201 
	#¢mp_öc_iföîr‹s
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
iföîr‹s
)

	)

202 
	#¢mp_öc_iföunknow≈rŸos
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
iföunknow≈rŸos
)

	)

203 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
Ë
	`MIB2_STATS_NETIF_ADD
“i, 
ifouto˘ës
, vÆue)

	)

204 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifoutuˇ°pkts
)

	)

205 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifouäuˇ°pkts
)

	)

206 
	#¢mp_öc_ifoutdisˇrds
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifoutdisˇrds
)

	)

207 
	#¢mp_öc_ifouãº‹s
(
ni
Ë
	`MIB2_STATS_NETIF_INC
“i, 
ifouãº‹s
)

	)

209 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/sockets.h

39 #i‚de‡
LWIP_HDR_SOCKETS_H


40 
	#LWIP_HDR_SOCKETS_H


	)

42 
	~"lwù/›t.h
"

44 #i‡
LWIP_SOCKET


46 
	~"lwù/ù_addr.h
"

47 
	~"lwù/îr.h
"

48 
	~"lwù/öë.h
"

49 
	~"lwù/_î∫o.h
"

51 #ifde‡
__˝lu•lus


57 #i‡!
deföed
(
ß_Ámûy_t
Ë&& !deföed(
SA_FAMILY_T_DEFINED
)

58 
u8_t
 
	tß_Ámûy_t
;

62 #i‡!
deföed
(
ö_p‹t_t
Ë&& !deföed(
IN_PORT_T_DEFINED
)

63 
u16_t
 
	tö_p‹t_t
;

66 #i‡
LWIP_IPV4


68 
	ssockaddr_ö
 {

69 
u8_t
 
	msö_Àn
;

70 
ß_Ámûy_t
 
	msö_Ámûy
;

71 
ö_p‹t_t
 
	msö_p‹t
;

72 
ö_addr
 
	msö_addr
;

73 
	#SIN_ZERO_LEN
 8

	)

74 
	msö_zîo
[
SIN_ZERO_LEN
];

78 #i‡
LWIP_IPV6


79 
	ssockaddr_ö6
 {

80 
u8_t
 
	msö6_Àn
;

81 
ß_Ámûy_t
 
	msö6_Ámûy
;

82 
ö_p‹t_t
 
	msö6_p‹t
;

83 
u32_t
 
	msö6_Êowöfo
;

84 
ö6_addr
 
	msö6_addr
;

85 
u32_t
 
	msö6_sc›e_id
;

89 
	ssockaddr
 {

90 
u8_t
 
	gß_Àn
;

91 
ß_Ámûy_t
 
	gß_Ámûy
;

92 
	gß_d©a
[14];

95 
	ssockaddr_°‹age
 {

96 
u8_t
 
	gs2_Àn
;

97 
ß_Ámûy_t
 
	gss_Ámûy
;

98 
	gs2_d©a1
[2];

99 
u32_t
 
	gs2_d©a2
[3];

100 #i‡
LWIP_IPV6


101 
u32_t
 
	gs2_d©a3
[3];

107 #i‡!
deföed
(
sockÀn_t
Ë&& !deföed(
SOCKLEN_T_DEFINED
)

108 
u32_t
 
	tsockÀn_t
;

111 
	glwù_sock
;

113 #i‡!
LWIP_TCPIP_CORE_LOCKING


115 
	#LWIP_SETGETSOCKOPT_MAXOPTLEN
 16

	)

119 
	slwù_£tgësock›t_d©a
 {

121 
	gs
;

123 
	gÀvñ
;

125 
	g›äame
;

128 #i‡
LWIP_MPU_COMPATIBLE


129 
u8_t
 
	g›tvÆ
[
LWIP_SETGETSOCKOPT_MAXOPTLEN
];

132 *
	gp
;

133 c⁄° *
	gpc
;

134 } 
	g›tvÆ
;

137 
sockÀn_t
 
	g›éí
;

139 
îr_t
 
	gîr
;

141 *
	gcom∂ëed_£m
;

145 #i‡!
deföed
(
iovec
)

146 
	siovec
 {

147 *
	giov_ba£
;

148 
size_t
 
	giov_Àn
;

152 
	smsghdr
 {

153 *
	gmsg_«me
;

154 
sockÀn_t
 
	gmsg_«mñí
;

155 
iovec
 *
	gmsg_iov
;

156 
	gmsg_iovÀn
;

157 *
	gmsg_c⁄åﬁ
;

158 
sockÀn_t
 
	gmsg_c⁄åﬁÀn
;

159 
	gmsg_Êags
;

163 
	#SOCK_STREAM
 1

	)

164 
	#SOCK_DGRAM
 2

	)

165 
	#SOCK_RAW
 3

	)

170 
	#SO_REUSEADDR
 0x0004

	)

171 
	#SO_KEEPALIVE
 0x0008

	)

172 
	#SO_BROADCAST
 0x0020

	)

178 
	#SO_DEBUG
 0x0001

	)

179 
	#SO_ACCEPTCONN
 0x0002

	)

180 
	#SO_DONTROUTE
 0x0010

	)

181 
	#SO_USELOOPBACK
 0x0040

	)

182 
	#SO_LINGER
 0x0080

	)

183 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

184 
	#SO_OOBINLINE
 0x0100

	)

185 
	#SO_REUSEPORT
 0x0200

	)

186 
	#SO_SNDBUF
 0x1001

	)

187 
	#SO_RCVBUF
 0x1002

	)

188 
	#SO_SNDLOWAT
 0x1003

	)

189 
	#SO_RCVLOWAT
 0x1004

	)

190 
	#SO_SNDTIMEO
 0x1005

	)

191 
	#SO_RCVTIMEO
 0x1006

	)

192 
	#SO_ERROR
 0x1007

	)

193 
	#SO_TYPE
 0x1008

	)

194 
	#SO_CONTIMEO
 0x1009

	)

195 
	#SO_NO_CHECK
 0x100®

	)

201 
	slögî
 {

202 
	gl_⁄off
;

203 
	gl_lögî
;

209 
	#SOL_SOCKET
 0xff‡

	)

212 
	#AF_UNSPEC
 0

	)

213 
	#AF_INET
 2

	)

214 #i‡
LWIP_IPV6


215 
	#AF_INET6
 10

	)

217 
	#AF_INET6
 
AF_UNSPEC


	)

219 
	#PF_INET
 
AF_INET


	)

220 
	#PF_INET6
 
AF_INET6


	)

221 
	#PF_UNSPEC
 
AF_UNSPEC


	)

223 
	#IPPROTO_IP
 0

	)

224 
	#IPPROTO_ICMP
 1

	)

225 
	#IPPROTO_TCP
 6

	)

226 
	#IPPROTO_UDP
 17

	)

227 #i‡
LWIP_IPV6


228 
	#IPPROTO_IPV6
 41

	)

229 
	#IPPROTO_ICMPV6
 58

	)

231 
	#IPPROTO_UDPLITE
 136

	)

232 
	#IPPROTO_RAW
 255

	)

235 
	#MSG_PEEK
 0x01

	)

236 
	#MSG_WAITALL
 0x02

	)

237 
	#MSG_OOB
 0x04

	)

238 
	#MSG_DONTWAIT
 0x08

	)

239 
	#MSG_MORE
 0x10

	)

245 
	#IP_TOS
 1

	)

246 
	#IP_TTL
 2

	)

248 #i‡
LWIP_TCP


252 
	#TCP_NODELAY
 0x01

	)

253 
	#TCP_KEEPALIVE
 0x02

	)

254 
	#TCP_KEEPIDLE
 0x03

	)

255 
	#TCP_KEEPINTVL
 0x04

	)

256 
	#TCP_KEEPCNT
 0x05

	)

259 #i‡
LWIP_IPV6


263 
	#IPV6_CHECKSUM
 7

	)

264 
	#IPV6_V6ONLY
 27

	)

267 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


271 
	#UDPLITE_SEND_CSCOV
 0x01

	)

272 
	#UDPLITE_RECV_CSCOV
 0x02

	)

276 #i‡
LWIP_MULTICAST_TX_OPTIONS


280 
	#IP_MULTICAST_TTL
 5

	)

281 
	#IP_MULTICAST_IF
 6

	)

282 
	#IP_MULTICAST_LOOP
 7

	)

285 #i‡
LWIP_IGMP


289 
	#IP_ADD_MEMBERSHIP
 3

	)

290 
	#IP_DROP_MEMBERSHIP
 4

	)

292 
	sù_mªq
 {

293 
ö_addr
 
	gimr_mu…üddr
;

294 
ö_addr
 
	gimr_öãrÁ˚
;

295 } 
	tù_mªq
;

314 
	#IPTOS_TOS_MASK
 0x1E

	)

315 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

316 
	#IPTOS_LOWDELAY
 0x10

	)

317 
	#IPTOS_THROUGHPUT
 0x08

	)

318 
	#IPTOS_RELIABILITY
 0x04

	)

319 
	#IPTOS_LOWCOST
 0x02

	)

320 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

331 
	#IPTOS_PREC_MASK
 0xe0

	)

332 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

333 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

334 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

335 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

336 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

337 
	#IPTOS_PREC_FLASH
 0x60

	)

338 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

339 
	#IPTOS_PREC_PRIORITY
 0x20

	)

340 
	#IPTOS_PREC_ROUTINE
 0x00

	)

353 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

354 
	#IOCPARM_MASK_LWIP
 0x7fU

	)

355 
	#IOC_VOID_LWIP
 0x20000000UL

	)

356 
	#IOC_OUT_LWIP
 0x40000000UL

	)

357 
	#IOC_IN_LWIP
 0x80000000UL

	)

358 
	#IOC_INOUT_LWIP
 (
IOC_IN_LWIP
|
IOC_OUT_LWIP
)

	)

361 
	#_IO_LWIP
(
x
,
y
Ë(
IOC_VOID_LWIP
|((x)<<8)|(y))

	)

363 
	#_IOR_LWIP
(
x
,
y
,
t
Ë(
IOC_OUT_LWIP
|((()—)&
IOCPARM_MASK_LWIP
)<<16)|((x)<<8)|(y))

	)

365 
	#_IOW_LWIP
(
x
,
y
,
t
Ë(
IOC_IN_LWIP
|((()—)&
IOCPARM_MASK_LWIP
)<<16)|((x)<<8)|(y))

	)

368 #i‚de‡
FIONREAD


369 
	#FIONREAD
 
	`_IOR_LWIP
('f', 127, Ë

	)

371 #i‚de‡
FIONBIO


372 
	#FIONBIO
 
	`_IOW_LWIP
('f', 126, Ë

	)

376 #i‚de‡
SIOCSHIWAT


377 
	#SIOCSHIWAT
 
	`_IOW_LWIP
('s', 0, Ë

	)

378 
	#SIOCGHIWAT
 
	`_IOR_LWIP
('s', 1, Ë

	)

379 
	#SIOCSLOWAT
 
	`_IOW_LWIP
('s', 2, Ë

	)

380 
	#SIOCGLOWAT
 
	`_IOR_LWIP
('s', 3, Ë

	)

381 
	#SIOCATMARK
 
	`_IOR_LWIP
('s', 7, Ë

	)

385 #i‚de‡
F_GETFL


386 
	#F_GETFL
 3

	)

388 #i‚de‡
F_SETFL


389 
	#F_SETFL
 4

	)

394 #i‚de‡
O_NONBLOCK


395 
	#O_NONBLOCK
 1

	)

397 #i‚de‡
O_NDELAY


398 
	#O_NDELAY
 1

	)

401 #i‚de‡
SHUT_RD


402 
	#SHUT_RD
 0

	)

403 
	#SHUT_WR
 1

	)

404 
	#SHUT_RDWR
 2

	)

408 #i‚de‡
FD_SET


409 #unde‡
FD_SETSIZE


411 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

412 
	#FDSETSAFESET
(
n
, 
code
) do { \

413 i‡(((
n
Ë- 
LWIP_SOCKET_OFFSET
 < 
MEMP_NUM_NETCONN
) && ((()(n) - LWIP_SOCKET_OFFSET) >= 0)) { \

414 
code
; }} 0)

	)

415 
	#FDSETSAFEGET
(
n
, 
code
Ë((“Ë- 
LWIP_SOCKET_OFFSET
 < 
MEMP_NUM_NETCONN
) && ((()(n) - LWIP_SOCKET_OFFSET) >= 0) ?\

416 (
code
Ë: 0)

	)

417 
	#FD_SET
(
n
, 
p
Ë
	`FDSETSAFESET
“, (p)->
fd_bôs
[(“)-
LWIP_SOCKET_OFFSET
)/8] |(1 << ((“)-LWIP_SOCKET_OFFSETË& 7)))

	)

418 
	#FD_CLR
(
n
, 
p
Ë
	`FDSETSAFESET
“, (p)->
fd_bôs
[(“)-
LWIP_SOCKET_OFFSET
)/8] &~(1 << ((“)-LWIP_SOCKET_OFFSETË& 7)))

	)

419 
	#FD_ISSET
(
n
,
p
Ë
	`FDSETSAFEGET
“, (p)->
fd_bôs
[(“)-
LWIP_SOCKET_OFFSET
)/8] & (1 << ((“)-LWIP_SOCKET_OFFSETË& 7)))

	)

420 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’), 0, (*’)))

	)

422 
	sfd_£t
 {

423 
	gfd_bôs
 [(
FD_SETSIZE
 + 7) / 8];

424 } 
	tfd_£t
;

426 #ñi‡
LWIP_SOCKET_OFFSET


427 #îr‹ 
LWIP_SOCKET_OFFSET
 
d€s
 
nŸ
 
w‹k
 
wôh
 
exã∫Æ
 
FD_SET
!

428 #ñi‡
FD_SETSIZE
 < 
MEMP_NUM_NETCONN


434 #i‚de‡
LWIP_TIMEVAL_PRIVATE


435 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

438 #i‡
LWIP_TIMEVAL_PRIVATE


439 
	stimevÆ
 {

440 
	gtv_£c
;

441 
	gtv_u£c
;

445 
	#lwù_sockë_öô
(Ë

	)

446 
lwù_sockë_thªad_öô
();

447 
lwù_sockë_thªad_˛ónup
();

449 #i‡
LWIP_COMPAT_SOCKETS
 == 2

451 
	#lwù_ac˚±
 
ac˚±


	)

452 
	#lwù_böd
 
böd


	)

453 
	#lwù_shutdown
 
shutdown


	)

454 
	#lwù_gë≥î«me
 
gë≥î«me


	)

455 
	#lwù_gësock«me
 
gësock«me


	)

456 
	#lwù_£tsock›t
 
£tsock›t


	)

457 
	#lwù_gësock›t
 
gësock›t


	)

458 
	#lwù_˛o£
 
˛o£sockë


	)

459 
	#lwù_c⁄√˘
 
c⁄√˘


	)

460 
	#lwù_li°í
 
li°í


	)

461 
	#lwù_ªcv
 
ªcv


	)

462 
	#lwù_ªcv‰om
 
ªcv‰om


	)

463 
	#lwù_£nd
 
£nd


	)

464 
	#lwù_£ndmsg
 
£ndmsg


	)

465 
	#lwù_£ndto
 
£ndto


	)

466 
	#lwù_sockë
 
sockë


	)

467 
	#lwù_£À˘
 
£À˘


	)

468 
	#lwù_io˘lsockë
 
io˘l


	)

470 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


471 
	#lwù_ªad
 
ªad


	)

472 
	#lwù_wrôe
 
wrôe


	)

473 
	#lwù_wrôev
 
wrôev


	)

474 #unde‡
lwù_˛o£


475 
	#lwù_˛o£
 
˛o£


	)

476 
	#˛o£sockë
(
s
Ë
	`˛o£
(s)

	)

477 
	#lwù_f˙é
 
f˙é


	)

478 
	#lwù_io˘l
 
io˘l


	)

482 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

483 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

484 
lwù_shutdown
(
s
, 
how
);

485 
lwù_gë≥î«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

486 
lwù_gësock«me
(
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

487 
lwù_gësock›t
(
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

488 
lwù_£tsock›t
(
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

489 
lwù_˛o£
(
s
);

490 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

491 
lwù_li°í
(
s
, 
backlog
);

492 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

493 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

494 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

495 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

496 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

497 
lwù_£ndmsg
(
s
, c⁄° 
msghdr
 *
mesßge
, 
Êags
);

498 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

499 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

500 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

501 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

502 
lwù_wrôev
(
s
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

503 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

504 
timevÆ
 *
timeout
);

505 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

506 
lwù_f˙é
(
s
, 
cmd
, 
vÆ
);

508 #i‡
LWIP_COMPAT_SOCKETS


509 #i‡
LWIP_COMPAT_SOCKETS
 != 2

511 
	#ac˚±
(
s
,
addr
,
addæí
Ë
	`lwù_ac˚±
(s,addr,addæí)

	)

513 
	#böd
(
s
,
«me
,
«mñí
Ë
	`lwù_böd
(s,«me,«mñí)

	)

515 
	#shutdown
(
s
,
how
Ë
	`lwù_shutdown
(s,how)

	)

517 
	#gë≥î«me
(
s
,
«me
,
«mñí
Ë
	`lwù_gë≥î«me
(s,«me,«mñí)

	)

519 
	#gësock«me
(
s
,
«me
,
«mñí
Ë
	`lwù_gësock«me
(s,«me,«mñí)

	)

521 
	#£tsock›t
(
s
,
Àvñ
,
›äame
,
›vÆ
,
›éí
Ë
	`lwù_£tsock›t
(s,Àvñ,›äame,›vÆ,›éí)

	)

523 
	#gësock›t
(
s
,
Àvñ
,
›äame
,
›vÆ
,
›éí
Ë
	`lwù_gësock›t
(s,Àvñ,›äame,›vÆ,›éí)

	)

525 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

527 
	#c⁄√˘
(
s
,
«me
,
«mñí
Ë
	`lwù_c⁄√˘
(s,«me,«mñí)

	)

529 
	#li°í
(
s
,
backlog
Ë
	`lwù_li°í
(s,backlog)

	)

531 
	#ªcv
(
s
,
mem
,
Àn
,
Êags
Ë
	`lwù_ªcv
(s,mem,Àn,Êags)

	)

533 
	#ªcv‰om
(
s
,
mem
,
Àn
,
Êags
,
‰om
,
‰omÀn
Ë
	`lwù_ªcv‰om
(s,mem,Àn,Êags,‰om,‰omÀn)

	)

535 
	#£nd
(
s
,
d©≠å
,
size
,
Êags
Ë
	`lwù_£nd
(s,d©≠å,size,Êags)

	)

537 
	#£ndmsg
(
s
,
mesßge
,
Êags
Ë
	`lwù_£ndmsg
(s,mesßge,Êags)

	)

539 
	#£ndto
(
s
,
d©≠å
,
size
,
Êags
,
to
,
tﬁí
Ë
	`lwù_£ndto
(s,d©≠å,size,Êags,to,tﬁí)

	)

541 
	#sockë
(
domaö
,
ty≥
,
¥Ÿocﬁ
Ë
	`lwù_sockë
(domaö,ty≥,¥Ÿocﬁ)

	)

543 
	#£À˘
(
maxfdp1
,
ªad£t
,
wrôe£t
,
ex˚±£t
,
timeout
Ë
	`lwù_£À˘
(maxfdp1,ªad£t,wrôe£t,ex˚±£t,timeout)

	)

545 
	#io˘lsockë
(
s
,
cmd
,
¨gp
Ë
	`lwù_io˘l
(s,cmd,¨gp)

	)

547 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


549 
	#ªad
(
s
,
mem
,
Àn
Ë
	`lwù_ªad
(s,mem,Àn)

	)

551 
	#wrôe
(
s
,
d©≠å
,
Àn
Ë
	`lwù_wrôe
(s,d©≠å,Àn)

	)

553 
	#wrôev
(
s
,
iov
,
iov˙t
Ë
	`lwù_wrôev
(s,iov,iov˙t)

	)

555 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

557 
	#f˙é
(
s
,
cmd
,
vÆ
Ë
	`lwù_f˙é
(s,cmd,vÆ)

	)

559 
	#io˘l
(
s
,
cmd
,
¨gp
Ë
	`lwù_io˘l
(s,cmd,¨gp)

	)

563 #i‡
LWIP_IPV4
 && 
LWIP_IPV6


565 
	#öë_¡›
(
af
,
§c
,
d°
,
size
) \

566 (((
af
Ë=
AF_INET6
Ë? 
	`ù6addr_¡ﬂ_r
((c⁄° 
ù6_addr_t
*)(
§c
),(
d°
),(
size
)) \

567 : (((
af
Ë=
AF_INET
Ë? 
	`ù4addr_¡ﬂ_r
((c⁄° 
ù4_addr_t
*)(
§c
),(
d°
),(
size
)Ë: 
NULL
))

	)

569 
	#öë_±⁄
(
af
,
§c
,
d°
) \

570 (((
af
Ë=
AF_INET6
Ë? 
	`ù6addr_©⁄
((
§c
),(
ù6_addr_t
*)(
d°
)) \

571 : (((
af
Ë=
AF_INET
Ë? 
	`ù4addr_©⁄
((
§c
),(
ù4_addr_t
*)(
d°
)Ë: 0))

	)

572 #ñi‡
LWIP_IPV4


573 
	#öë_¡›
(
af
,
§c
,
d°
,
size
) \

574 (((
af
Ë=
AF_INET
Ë? 
	`ù4addr_¡ﬂ_r
((c⁄° 
ù4_addr_t
*)(
§c
),(
d°
),(
size
)Ë: 
NULL
)

	)

575 
	#öë_±⁄
(
af
,
§c
,
d°
) \

576 (((
af
Ë=
AF_INET
Ë? 
	`ù4addr_©⁄
((
§c
),(
ù4_addr_t
*)(
d°
)Ë: 0)

	)

578 
	#öë_¡›
(
af
,
§c
,
d°
,
size
) \

579 (((
af
Ë=
AF_INET6
Ë? 
	`ù6addr_¡ﬂ_r
((c⁄° 
ù6_addr_t
*)(
§c
),(
d°
),(
size
)Ë: 
NULL
)

	)

580 
	#öë_±⁄
(
af
,
§c
,
d°
) \

581 (((
af
Ë=
AF_INET6
Ë? 
	`ù6addr_©⁄
((
§c
),(
ù6_addr_t
*)(
d°
)Ë: 0)

	)

586 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/stats.h

37 #i‚de‡
LWIP_HDR_STATS_H


38 
	#LWIP_HDR_STATS_H


	)

40 
	~"lwù/›t.h
"

42 
	~"lwù/mem.h
"

43 
	~"lwù/memp.h
"

45 #ifde‡
__˝lu•lus


49 #i‡
LWIP_STATS


51 #i‚de‡
LWIP_STATS_LARGE


52 
	#LWIP_STATS_LARGE
 0

	)

55 #i‡
LWIP_STATS_LARGE


56 
	#STAT_COUNTER
 
u32_t


	)

57 
	#STAT_COUNTER_F
 
U32_F


	)

59 
	#STAT_COUNTER
 
u16_t


	)

60 
	#STAT_COUNTER_F
 
U16_F


	)

64 
	s°©s_¥Ÿo
 {

65 
STAT_COUNTER
 
xmô
;

66 
STAT_COUNTER
 
ªcv
;

67 
STAT_COUNTER
 
fw
;

68 
STAT_COUNTER
 
dr›
;

69 
STAT_COUNTER
 
chkîr
;

70 
STAT_COUNTER
 
À√º
;

71 
STAT_COUNTER
 
memîr
;

72 
STAT_COUNTER
 
πîr
;

73 
STAT_COUNTER
 
¥Ÿîr
;

74 
STAT_COUNTER
 
›ãº
;

75 
STAT_COUNTER
 
îr
;

76 
STAT_COUNTER
 
ˇchehô
;

80 
	s°©s_igmp
 {

81 
STAT_COUNTER
 
	mxmô
;

82 
STAT_COUNTER
 
	mªcv
;

83 
STAT_COUNTER
 
	mdr›
;

84 
STAT_COUNTER
 
	mchkîr
;

85 
STAT_COUNTER
 
	mÀ√º
;

86 
STAT_COUNTER
 
	mmemîr
;

87 
STAT_COUNTER
 
	m¥Ÿîr
;

88 
STAT_COUNTER
 
	mrx_v1
;

89 
STAT_COUNTER
 
	mrx_group
;

90 
STAT_COUNTER
 
	mrx_gíîÆ
;

91 
STAT_COUNTER
 
	mrx_ªp‹t
;

92 
STAT_COUNTER
 
	mtx_joö
;

93 
STAT_COUNTER
 
	mtx_Àave
;

94 
STAT_COUNTER
 
	mtx_ªp‹t
;

98 
	s°©s_mem
 {

99 #i‡
deföed
(
LWIP_DEBUG
Ë|| 
LWIP_STATS_DISPLAY


100 c⁄° *
	m«me
;

102 
STAT_COUNTER
 
	mîr
;

103 
mem_size_t
 
	mavaû
;

104 
mem_size_t
 
	mu£d
;

105 
mem_size_t
 
	mmax
;

106 
STAT_COUNTER
 
	mûÀgÆ
;

110 
	s°©s_sy£Àm
 {

111 
STAT_COUNTER
 
	mu£d
;

112 
STAT_COUNTER
 
	mmax
;

113 
STAT_COUNTER
 
	mîr
;

117 
	s°©s_sys
 {

118 
°©s_sy£Àm
 
	m£m
;

119 
°©s_sy£Àm
 
	mmuãx
;

120 
°©s_sy£Àm
 
	mmbox
;

124 
	s°©s_mib2
 {

126 
u32_t
 
	mùöhdªº‹s
;

127 
u32_t
 
	mùöaddªº‹s
;

128 
u32_t
 
	mùöunknow≈rŸos
;

129 
u32_t
 
	mùödisˇrds
;

130 
u32_t
 
	mùödñivîs
;

131 
u32_t
 
	mùouåeque°s
;

132 
u32_t
 
	mùoutdisˇrds
;

133 
u32_t
 
	mùouä‹ouãs
;

134 
u32_t
 
	mùªasmoks
;

135 
u32_t
 
	mùªasmÁûs
;

136 
u32_t
 
	mù‰agoks
;

137 
u32_t
 
	mù‰agÁûs
;

138 
u32_t
 
	mù‰ag¸óãs
;

139 
u32_t
 
	mùªasmªqds
;

140 
u32_t
 
	mùf‹wd©agøms
;

141 
u32_t
 
	mùöª˚ives
;

144 
u32_t
 
	mt˝a˘ive›ís
;

145 
u32_t
 
	mt˝∑ssive›ís
;

146 
u32_t
 
	mt˝©ãm±Áûs
;

147 
u32_t
 
	mt˝e°abª£ts
;

148 
u32_t
 
	mt˝out£gs
;

149 
u32_t
 
	mt˝ªå™s£gs
;

150 
u32_t
 
	mt˝ö£gs
;

151 
u32_t
 
	mt˝öîrs
;

152 
u32_t
 
	mt˝ouå°s
;

155 
u32_t
 
	mudpöd©agøms
;

156 
u32_t
 
	mud≤›‹ts
;

157 
u32_t
 
	mudpöîr‹s
;

158 
u32_t
 
	mudpoutd©agøms
;

161 
u32_t
 
	micmpömsgs
;

162 
u32_t
 
	micmpöîr‹s
;

163 
u32_t
 
	micmpöde°uƒóchs
;

164 
u32_t
 
	micmpötimìxcds
;

165 
u32_t
 
	micmpö∑rm¥obs
;

166 
u32_t
 
	micmpö§cquíchs
;

167 
u32_t
 
	micmpöªdúe˘s
;

168 
u32_t
 
	micmpöechos
;

169 
u32_t
 
	micmpöech‹ïs
;

170 
u32_t
 
	micmpötime°amps
;

171 
u32_t
 
	micmpötime°am¥ïs
;

172 
u32_t
 
	micmpöaddrmasks
;

173 
u32_t
 
	micmpöaddrmaskªps
;

174 
u32_t
 
	micmpoutmsgs
;

175 
u32_t
 
	micmpouãº‹s
;

176 
u32_t
 
	micmpoutde°uƒóchs
;

177 
u32_t
 
	micmpouâimìxcds
;

178 
u32_t
 
	micmpouãchos
;

179 
u32_t
 
	micmpouãch‹ïs
;

186 
	s°©s_mib2_√tif_˘rs
 {

188 
u32_t
 
	miföo˘ës
;

191 
u32_t
 
	miföuˇ°pkts
;

194 
u32_t
 
	mifönuˇ°pkts
;

198 
u32_t
 
	mifödisˇrds
;

203 
u32_t
 
	miföîr‹s
;

210 
u32_t
 
	miföunknow≈rŸos
;

212 
u32_t
 
	mifouto˘ës
;

216 
u32_t
 
	mifoutuˇ°pkts
;

220 
u32_t
 
	mifouäuˇ°pkts
;

224 
u32_t
 
	mifoutdisˇrds
;

228 
u32_t
 
	mifouãº‹s
;

232 
	s°©s_
 {

233 #i‡
LINK_STATS


235 
°©s_¥Ÿo
 
	mlök
;

237 #i‡
ETHARP_STATS


239 
°©s_¥Ÿo
 
	mëh¨p
;

241 #i‡
IPFRAG_STATS


243 
°©s_¥Ÿo
 
	mù_‰ag
;

245 #i‡
IP_STATS


247 
°©s_¥Ÿo
 
	mù
;

249 #i‡
ICMP_STATS


251 
°©s_¥Ÿo
 
	micmp
;

253 #i‡
IGMP_STATS


255 
°©s_igmp
 
	migmp
;

257 #i‡
UDP_STATS


259 
°©s_¥Ÿo
 
	mudp
;

261 #i‡
TCP_STATS


263 
°©s_¥Ÿo
 
	mt˝
;

265 #i‡
MEM_STATS


267 
°©s_mem
 
	mmem
;

269 #i‡
MEMP_STATS


271 
°©s_mem
 *
	mmemp
[
MEMP_MAX
];

273 #i‡
SYS_STATS


275 
°©s_sys
 
	msys
;

277 #i‡
IP6_STATS


279 
°©s_¥Ÿo
 
	mù6
;

281 #i‡
ICMP6_STATS


283 
°©s_¥Ÿo
 
	micmp6
;

285 #i‡
IP6_FRAG_STATS


287 
°©s_¥Ÿo
 
	mù6_‰ag
;

289 #i‡
MLD6_STATS


291 
°©s_igmp
 
	mmld6
;

293 #i‡
ND6_STATS


295 
°©s_¥Ÿo
 
	mnd6
;

297 #i‡
MIB2_STATS


299 
°©s_mib2
 
	mmib2
;

304 
°©s_
 
lwù_°©s
;

307 
°©s_öô
();

309 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

310 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

311 
	#STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.x.
u£d
 += y; \

312 i‡(
lwù_°©s
.
x
.
max
 <Üwù_°©s.x.
u£d
) { \

313 
lwù_°©s
.
x
.
max
 =Üwù_°©s.x.
u£d
; \

315 } 0)

	)

316 
	#STATS_GET
(
x
Ë
lwù_°©s
.
	)
x

318 
	#°©s_öô
()

	)

319 
	#STATS_INC
(
x
)

	)

320 
	#STATS_DEC
(
x
)

	)

321 
	#STATS_INC_USED
(
x
)

	)

324 #i‡
TCP_STATS


325 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

326 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

328 
	#TCP_STATS_INC
(
x
)

	)

329 
	#TCP_STATS_DISPLAY
()

	)

332 #i‡
UDP_STATS


333 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

334 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

336 
	#UDP_STATS_INC
(
x
)

	)

337 
	#UDP_STATS_DISPLAY
()

	)

340 #i‡
ICMP_STATS


341 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

342 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

344 
	#ICMP_STATS_INC
(
x
)

	)

345 
	#ICMP_STATS_DISPLAY
()

	)

348 #i‡
IGMP_STATS


349 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

350 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
, "IGMP")

	)

352 
	#IGMP_STATS_INC
(
x
)

	)

353 
	#IGMP_STATS_DISPLAY
()

	)

356 #i‡
IP_STATS


357 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

358 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

360 
	#IP_STATS_INC
(
x
)

	)

361 
	#IP_STATS_DISPLAY
()

	)

364 #i‡
IPFRAG_STATS


365 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

366 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

368 
	#IPFRAG_STATS_INC
(
x
)

	)

369 
	#IPFRAG_STATS_DISPLAY
()

	)

372 #i‡
ETHARP_STATS


373 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

374 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

376 
	#ETHARP_STATS_INC
(
x
)

	)

377 
	#ETHARP_STATS_DISPLAY
()

	)

380 #i‡
LINK_STATS


381 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

382 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

384 
	#LINK_STATS_INC
(
x
)

	)

385 
	#LINK_STATS_DISPLAY
()

	)

388 #i‡
MEM_STATS


389 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

390 
	#MEM_STATS_INC
(
x
Ë
	`SYS_ARCH_INC
(
lwù_°©s
.
mem
.x, 1)

	)

391 
	#MEM_STATS_INC_USED
(
x
, 
y
Ë
	`SYS_ARCH_INC
(
lwù_°©s
.
mem
.x, y)

	)

392 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
	`SYS_ARCH_DEC
(
lwù_°©s
.
mem
.x, y)

	)

393 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

395 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

396 
	#MEM_STATS_INC
(
x
)

	)

397 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

398 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

399 
	#MEM_STATS_DISPLAY
()

	)

402 #i‡
MEMP_STATS


403 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i]->x)

	)

404 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(
lwù_°©s
.
memp
[i], i)

	)

405 
	#MEMP_STATS_GET
(
x
, 
i
Ë
	`STATS_GET
(
memp
[i]->x)

	)

407 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

408 
	#MEMP_STATS_DISPLAY
(
i
)

	)

409 
	#MEMP_STATS_GET
(
x
, 
i
Ë0

	)

412 #i‡
SYS_STATS


413 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

414 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

415 
	#SYS_STATS_INC_USED
(
x
Ë
	`STATS_INC_USED
(
sys
.x, 1)

	)

416 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

418 
	#SYS_STATS_INC
(
x
)

	)

419 
	#SYS_STATS_DEC
(
x
)

	)

420 
	#SYS_STATS_INC_USED
(
x
)

	)

421 
	#SYS_STATS_DISPLAY
()

	)

424 #i‡
IP6_STATS


425 
	#IP6_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

426 
	#IP6_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù6
, "IPv6")

	)

428 
	#IP6_STATS_INC
(
x
)

	)

429 
	#IP6_STATS_DISPLAY
()

	)

432 #i‡
ICMP6_STATS


433 
	#ICMP6_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

434 
	#ICMP6_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp6
, "ICMPv6")

	)

436 
	#ICMP6_STATS_INC
(
x
)

	)

437 
	#ICMP6_STATS_DISPLAY
()

	)

440 #i‡
IP6_FRAG_STATS


441 
	#IP6_FRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

442 
	#IP6_FRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù6_‰ag
, "IPv6 FRAG")

	)

444 
	#IP6_FRAG_STATS_INC
(
x
)

	)

445 
	#IP6_FRAG_STATS_DISPLAY
()

	)

448 #i‡
MLD6_STATS


449 
	#MLD6_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

450 
	#MLD6_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
mld6
, "MLDv1")

	)

452 
	#MLD6_STATS_INC
(
x
)

	)

453 
	#MLD6_STATS_DISPLAY
()

	)

456 #i‡
ND6_STATS


457 
	#ND6_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

458 
	#ND6_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
nd6
, "ND")

	)

460 
	#ND6_STATS_INC
(
x
)

	)

461 
	#ND6_STATS_DISPLAY
()

	)

464 #i‡
MIB2_STATS


465 
	#MIB2_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

467 
	#MIB2_STATS_INC
(
x
)

	)

471 #i‡
LWIP_STATS_DISPLAY


472 
°©s_di•œy
();

473 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, c⁄° *
«me
);

474 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
, c⁄° *
«me
);

475 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, c⁄° *
«me
);

476 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

477 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

479 
	#°©s_di•œy
()

	)

480 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

481 
	#°©s_di•œy_igmp
(
igmp
, 
«me
)

	)

482 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

483 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

484 
	#°©s_di•œy_sys
(
sys
)

	)

487 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/sys.h

37 #i‚de‡
LWIP_HDR_SYS_H


38 
	#LWIP_HDR_SYS_H


	)

40 
	~"lwù/›t.h
"

42 #ifde‡
__˝lu•lus


46 #i‡
NO_SYS


50 
u8_t
 
	tsys_£m_t
;

51 
u8_t
 
	tsys_muãx_t
;

52 
u8_t
 
	tsys_mbox_t
;

54 
	#sys_£m_√w
(
s
, 
c
Ë
ERR_OK


	)

55 
	#sys_£m_sig«l
(
s
)

	)

56 
	#sys_£m_waô
(
s
)

	)

57 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

58 
	#sys_£m_‰ì
(
s
)

	)

59 
	#sys_£m_vÆid
(
s
Ë0

	)

60 
	#sys_£m_vÆid_vÆ
(
s
Ë0

	)

61 
	#sys_£m_£t_övÆid
(
s
)

	)

62 
	#sys_£m_£t_övÆid_vÆ
(
s
)

	)

63 
	#sys_muãx_√w
(
mu
Ë
ERR_OK


	)

64 
	#sys_muãx_lock
(
mu
)

	)

65 
	#sys_muãx_u∆ock
(
mu
)

	)

66 
	#sys_muãx_‰ì
(
mu
)

	)

67 
	#sys_muãx_vÆid
(
mu
Ë0

	)

68 
	#sys_muãx_£t_övÆid
(
mu
)

	)

69 
	#sys_mbox_√w
(
m
, 
s
Ë
ERR_OK


	)

70 
	#sys_mbox_„tch
(
m
,
d
)

	)

71 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

72 
	#sys_mbox_po°
(
m
,
d
)

	)

73 
	#sys_mbox_åypo°
(
m
,
d
)

	)

74 
	#sys_mbox_‰ì
(
m
)

	)

75 
	#sys_mbox_vÆid
(
m
)

	)

76 
	#sys_mbox_vÆid_vÆ
(
m
)

	)

77 
	#sys_mbox_£t_övÆid
(
m
)

	)

78 
	#sys_mbox_£t_övÆid_vÆ
(
m
)

	)

80 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

82 
	#sys_m¶ìp
(
t
)

	)

87 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

92 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

94 
	~"lwù/îr.h
"

95 
	~"¨ch/sys_¨ch.h
"

98 (*
	tlwù_thªad_‚
)(*
	t¨g
);

107 #i‚de‡
LWIP_COMPAT_MUTEX


108 
	#LWIP_COMPAT_MUTEX
 0

	)

111 #i‡
LWIP_COMPAT_MUTEX


113 
	#sys_muãx_t
 
sys_£m_t


	)

114 
	#sys_muãx_√w
(
muãx
Ë
	`sys_£m_√w
(muãx, 1)

	)

115 
	#sys_muãx_lock
(
muãx
Ë
	`sys_£m_waô
(muãx)

	)

116 
	#sys_muãx_u∆ock
(
muãx
Ë
	`sys_£m_sig«l
(muãx)

	)

117 
	#sys_muãx_‰ì
(
muãx
Ë
	`sys_£m_‰ì
(muãx)

	)

118 
	#sys_muãx_vÆid
(
muãx
Ë
	`sys_£m_vÆid
(muãx)

	)

119 
	#sys_muãx_£t_övÆid
(
muãx
Ë
	`sys_£m_£t_övÆid
(muãx)

	)

131 
îr_t
 
	`sys_muãx_√w
(
sys_muãx_t
 *
muãx
);

137 
	`sys_muãx_lock
(
sys_muãx_t
 *
muãx
);

143 
	`sys_muãx_u∆ock
(
sys_muãx_t
 *
muãx
);

149 
	`sys_muãx_‰ì
(
sys_muãx_t
 *
muãx
);

150 #i‚de‡
sys_muãx_vÆid


155 
	`sys_muãx_vÆid
(
sys_muãx_t
 *
muãx
);

157 #i‚de‡
sys_muãx_£t_övÆid


162 
	`sys_muãx_£t_övÆid
(
sys_muãx_t
 *
muãx
);

175 
îr_t
 
	`sys_£m_√w
(
sys_£m_t
 *
£m
, 
u8_t
 
cou¡
);

181 
	`sys_£m_sig«l
(
sys_£m_t
 *
£m
);

190 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 *
£m
, u32_à
timeout
);

196 
	`sys_£m_‰ì
(
sys_£m_t
 *
£m
);

198 
	#sys_£m_waô
(
£m
Ë
	`sys_¨ch_£m_waô
(£m, 0)

	)

199 #i‚de‡
sys_£m_vÆid


204 
	`sys_£m_vÆid
(
sys_£m_t
 *
£m
);

206 #i‚de‡
sys_£m_£t_övÆid


211 
	`sys_£m_£t_övÆid
(
sys_£m_t
 *
£m
);

213 #i‚de‡
sys_£m_vÆid_vÆ


217 
	#sys_£m_vÆid_vÆ
(
£m
Ë
	`sys_£m_vÆid
(&(£m))

	)

219 #i‚de‡
sys_£m_£t_övÆid_vÆ


223 
	#sys_£m_£t_övÆid_vÆ
(
£m
Ë
	`sys_£m_£t_övÆid
(&(£m))

	)

226 #i‚de‡
sys_m¶ìp


231 
	`sys_m¶ìp
(
u32_t
 
ms
);

243 
îr_t
 
	`sys_mbox_√w
(
sys_mbox_t
 *
mbox
, 
size
);

251 
	`sys_mbox_po°
(
sys_mbox_t
 *
mbox
, *
msg
);

258 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 *
mbox
, *
msg
);

269 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
, u32_à
timeout
);

271 #i‚de‡
sys_¨ch_mbox_åy„tch


280 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

285 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

291 
	`sys_mbox_‰ì
(
sys_mbox_t
 *
mbox
);

292 
	#sys_mbox_„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_„tch
(mbox, msg, 0)

	)

293 #i‚de‡
sys_mbox_vÆid


298 
	`sys_mbox_vÆid
(
sys_mbox_t
 *
mbox
);

300 #i‚de‡
sys_mbox_£t_övÆid


305 
	`sys_mbox_£t_övÆid
(
sys_mbox_t
 *
mbox
);

307 #i‚de‡
sys_mbox_vÆid_vÆ


311 
	#sys_mbox_vÆid_vÆ
(
mbox
Ë
	`sys_mbox_vÆid
(&(mbox))

	)

313 #i‚de‡
sys_mbox_£t_övÆid_vÆ


317 
	#sys_mbox_£t_övÆid_vÆ
(
mbox
Ë
	`sys_mbox_£t_övÆid
(&(mbox))

	)

331 
sys_thªad_t
 
	`sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
thªad
, *
¨g
, 
°acksize
, 
¥io
);

336 
	`sys_öô
();

338 #i‚de‡
sys_jiffõs


342 
u32_t
 
	`sys_jiffõs
();

350 
u32_t
 
	`sys_now
();

357 #i‚de‡
SYS_ARCH_PROTECT


363 #i‡
SYS_LIGHTWEIGHT_PROT


372 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

384 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

395 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

396 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

397 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

401 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

402 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

403 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

414 #i‚de‡
SYS_ARCH_INC


415 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

416 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

417 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

418 
v¨
 +
vÆ
; \

419 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

420 } 0)

	)

423 #i‚de‡
SYS_ARCH_DEC


424 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

425 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

426 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

427 
v¨
 -
vÆ
; \

428 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

429 } 0)

	)

432 #i‚de‡
SYS_ARCH_GET


433 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

434 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

435 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

436 
ªt
 = 
v¨
; \

437 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

438 } 0)

	)

441 #i‚de‡
SYS_ARCH_SET


442 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

443 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

444 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

445 
v¨
 = 
vÆ
; \

446 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

447 } 0)

	)

451 #ifde‡
__˝lu•lus


452 
	}
}

	@include_lib/net/lwip/src/include/lwip/tcp.h

38 #i‚de‡
LWIP_HDR_TCP_H


39 
	#LWIP_HDR_TCP_H


	)

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_TCP


45 
	~"lwù/mem.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/ù.h
"

48 
	~"lwù/icmp.h
"

49 
	~"lwù/îr.h
"

50 
	~"lwù/ù6.h
"

51 
	~"lwù/ù6_addr.h
"

53 #ifde‡
__˝lu•lus


57 
t˝_pcb
;

68 
îr_t
 (*
	tt˝_ac˚±_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	t√wpcb
, 
	tîr_t
 
	tîr
);

80 
îr_t
 (*
	tt˝_ªcv_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

81 
	tpbuf
 *
	tp
, 
	tîr_t
 
	tîr
);

94 
îr_t
 (*
	tt˝_£¡_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

95 
	tu16_t
 
	tÀn
);

106 
îr_t
 (*
	tt˝_pﬁl_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
);

118 (*
t˝_îr_‚
)(*
	t¨g
, 
	tîr_t
 
	tîr
);

132 
îr_t
 (*
	tt˝_c⁄√˘ed_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
, 
	tîr_t
 
	tîr
);

134 #i‡
LWIP_WND_SCALE


135 
	#RCV_WND_SCALE
(
pcb
, 
wnd
Ë(((wndË>> (pcb)->
rcv_sˇÀ
))

	)

136 
	#SND_WND_SCALE
(
pcb
, 
wnd
Ë(((wndË<< (pcb)->
¢d_sˇÀ
))

	)

137 
	#TCPWND16
(
x
Ë((
u16_t
)
	`LWIP_MIN
((x), 0xFFFF))

	)

138 
	#TCP_WND_MAX
(
pcb
Ë((
t˝wnd_size_t
)((’cb)->
Êags
 & 
TF_WND_SCALE
Ë? 
TCP_WND
 : 
	`TCPWND16
(TCP_WND)))

	)

139 
u32_t
 
	tt˝wnd_size_t
;

141 
	#RCV_WND_SCALE
(
pcb
, 
wnd
Ë(wnd)

	)

142 
	#SND_WND_SCALE
(
pcb
, 
wnd
Ë(wnd)

	)

143 
	#TCPWND16
(
x
Ë(x)

	)

144 
	#TCP_WND_MAX
(
pcb
Ë
TCP_WND


	)

145 
u16_t
 
	tt˝wnd_size_t
;

148 #i‡
LWIP_WND_SCALE
 || 
TCP_LISTEN_BACKLOG
 || 
LWIP_TCP_TIMESTAMPS


149 
u16_t
 
	tt˝Êags_t
;

151 
u8_t
 
	tt˝Êags_t
;

154 
	et˝_°©e
 {

155 
CLOSED
 = 0,

156 
LISTEN
 = 1,

157 
SYN_SENT
 = 2,

158 
SYN_RCVD
 = 3,

159 
ESTABLISHED
 = 4,

160 
FIN_WAIT_1
 = 5,

161 
FIN_WAIT_2
 = 6,

162 
CLOSE_WAIT
 = 7,

163 
CLOSING
 = 8,

164 
LAST_ACK
 = 9,

165 
TIME_WAIT
 = 10

171 
	#TCP_PCB_COMMON
(
ty≥
) \

172 
ty≥
 *
√xt
; \

173 *
ˇŒback_¨g
; \

174 
t˝_°©e
 
°©e
; \

175 
u8_t
 
¥io
; \

177 
u16_t
 
loˇl_p‹t


	)

181 
	st˝_pcb_li°í
 {

183 
IP_PCB
;

185 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

187 #i‡
LWIP_CALLBACK_API


189 
t˝_ac˚±_‚
 
ac˚±
;

192 #i‡
TCP_LISTEN_BACKLOG


193 
u8_t
 
backlog
;

194 
u8_t
 
ac˚±s_≥ndög
;

200 
	st˝_pcb
 {

202 
IP_PCB
;

204 
TCP_PCB_COMMON
(
t˝_pcb
);

207 
u16_t
 
ªmŸe_p‹t
;

209 
t˝Êags_t
 
Êags
;

210 
	#TF_ACK_DELAY
 0x01U

	)

211 
	#TF_ACK_NOW
 0x02U

	)

212 
	#TF_INFR
 0x04U

	)

213 
	#TF_CLOSEPEND
 0x08U

	)

214 
	#TF_RXCLOSED
 0x10U

	)

215 
	#TF_FIN
 0x20U

	)

216 
	#TF_NODELAY
 0x40U

	)

217 
	#TF_NAGLEMEMERR
 0x80U

	)

218 #i‡
LWIP_WND_SCALE


219 
	#TF_WND_SCALE
 0x0100U

	)

221 #i‡
TCP_LISTEN_BACKLOG


222 
	#TF_BACKLOGPEND
 0x0200U

	)

224 #i‡
LWIP_TCP_TIMESTAMPS


225 
	#TF_TIMESTAMP
 0x0400U

	)

232 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

233 
u8_t
 
œ°_timî
;

234 
u32_t
 
tmr
;

237 
u32_t
 
rcv_nxt
;

238 
t˝wnd_size_t
 
rcv_wnd
;

239 
t˝wnd_size_t
 
rcv_™n_wnd
;

240 
u32_t
 
rcv_™n_right_edge
;

243 
s16_t
 
πime
;

245 
u16_t
 
mss
;

248 
u32_t
 
πã°
;

249 
u32_t
 
π£q
;

250 
s16_t
 
ß
, 
sv
;

252 
s16_t
 
πo
;

253 
u8_t
 
ƒtx
;

256 
u8_t
 
du∑cks
;

257 
u32_t
 
œ°ack
;

260 
t˝wnd_size_t
 
cwnd
;

261 
t˝wnd_size_t
 
s°hªsh
;

264 
u32_t
 
¢d_nxt
;

265 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

267 
u32_t
 
¢d_lbb
;

268 
t˝wnd_size_t
 
¢d_wnd
;

269 
t˝wnd_size_t
 
¢d_wnd_max
;

271 
t˝wnd_size_t
 
¢d_buf
;

272 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffffU-3)

	)

273 
u16_t
 
¢d_queuñí
;

275 #i‡
TCP_OVERSIZE


277 
u16_t
 
un£¡_ovîsize
;

281 
t˝_£g
 *
un£¡
;

282 
t˝_£g
 *
u«cked
;

283 #i‡
TCP_QUEUE_OOSEQ


284 
t˝_£g
 *
oo£q
;

287 
pbuf
 *
ªfu£d_d©a
;

289 #i‡
LWIP_CALLBACK_API
 || 
TCP_LISTEN_BACKLOG


290 
t˝_pcb_li°í
 *
li°íî
;

293 #i‡
LWIP_CALLBACK_API


295 
t˝_£¡_‚
 
£¡
;

297 
t˝_ªcv_‚
 
ªcv
;

299 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
;

301 
t˝_pﬁl_‚
 
pﬁl
;

303 
t˝_îr_‚
 
îrf
;

306 #i‡
LWIP_TCP_TIMESTAMPS


307 
u32_t
 
ts_œ°ack£¡
;

308 
u32_t
 
ts_ª˚¡
;

312 
u32_t
 
kìp_idÀ
;

313 #i‡
LWIP_TCP_KEEPALIVE


314 
u32_t
 
kìp_ötvl
;

315 
u32_t
 
kìp_˙t
;

319 
u8_t
 
≥rsi°_˙t
;

321 
u8_t
 
≥rsi°_backoff
;

324 
u8_t
 
kìp_˙t_£¡
;

326 #i‡
LWIP_WND_SCALE


327 
u8_t
 
¢d_sˇÀ
;

328 
u8_t
 
rcv_sˇÀ
;

332 #i‡
LWIP_EVENT_API


334 
	elwù_evít
 {

335 
LWIP_EVENT_ACCEPT
,

336 
LWIP_EVENT_SENT
,

337 
LWIP_EVENT_RECV
,

338 
LWIP_EVENT_CONNECTED
,

339 
LWIP_EVENT_POLL
,

340 
LWIP_EVENT_ERR


343 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

344 
lwù_evít
,

345 
pbuf
 *
p
,

346 
u16_t
 
size
,

347 
îr_t
 
îr
);

352 
t˝_pcb
 *
t˝_√w
();

353 
t˝_pcb
 *
t˝_√w_ù_ty≥
(
u8_t
 
ty≥
);

355 
t˝_¨g
(
t˝_pcb
 *
pcb
, *
¨g
);

356 #i‡
LWIP_CALLBACK_API


357 
t˝_ªcv
(
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
);

358 
t˝_£¡
(
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
);

359 
t˝_îr
(
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
);

360 
t˝_ac˚±
(
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
);

362 
t˝_pﬁl
(
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
);

364 #i‡
LWIP_TCP_TIMESTAMPS


365 
	#t˝_mss
(
pcb
Ë((’cb)->
Êags
 & 
TF_TIMESTAMP
Ë? (’cb)->
mss
 - 12Ë: (pcb)->mss)

	)

367 
	#t˝_mss
(
pcb
Ë(’cb)->
mss
)

	)

369 
	#t˝_¢dbuf
(
pcb
Ë(
	`TCPWND16
(’cb)->
¢d_buf
))

	)

370 
	#t˝_¢dqueuñí
(
pcb
Ë(’cb)->
¢d_queuñí
)

	)

372 
	#t˝_«gÀ_dißbÀ
(
pcb
Ë(’cb)->
Êags
 |
TF_NODELAY
)

	)

374 
	#t˝_«gÀ_íabÀ
(
pcb
Ë(’cb)->
Êags
 = (
t˝Êags_t
)(’cb)->Êag†& ~
TF_NODELAY
))

	)

376 
	#t˝_«gÀ_dißbÀd
(
pcb
Ë((’cb)->
Êags
 & 
TF_NODELAY
Ë!0)

	)

378 #i‡
TCP_LISTEN_BACKLOG


379 
	#t˝_backlog_£t
(
pcb
, 
√w_backlog
) do { \

380 
	`LWIP_ASSERT
("pcb->°©ê=LISTEN (ˇŒed f‹ wr⁄gÖcb?)", (
pcb
)->
°©e
 =
LISTEN
); \

381 ((
t˝_pcb_li°í
 *)(
pcb
))->
backlog
 = ((
√w_backlog
Ë? (√w_backlogË: 1); } 0)

	)

382 
t˝_backlog_dñayed
(
t˝_pcb
 *
pcb
);

383 
t˝_backlog_ac˚±ed
(
t˝_pcb
 *
pcb
);

385 
	#t˝_backlog_£t
(
pcb
, 
√w_backlog
)

	)

386 
	#t˝_backlog_dñayed
(
pcb
)

	)

387 
	#t˝_backlog_ac˚±ed
(
pcb
)

	)

389 
	#t˝_ac˚±ed
(
pcb
Ë

	)

391 
t˝_ªcved
(
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

392 
îr_t
 
t˝_böd
(
t˝_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
,

393 
u16_t
 
p‹t
);

394 
îr_t
 
t˝_c⁄√˘
(
t˝_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
,

395 
u16_t
 
p‹t
, 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
);

397 
t˝_pcb
 *
t˝_li°í_wôh_backlog_™d_îr
(t˝_pcb *
pcb
, 
u8_t
 
backlog
, 
îr_t
 *
îr
);

398 
t˝_pcb
 *
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

400 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

402 
t˝_ab‹t
(
t˝_pcb
 *
pcb
);

403 
îr_t
 
t˝_˛o£
(
t˝_pcb
 *
pcb
);

404 
îr_t
 
t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
);

407 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

408 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

410 
îr_t
 
t˝_wrôe
(
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

411 
u8_t
 
≠iÊags
);

413 
t˝_£çrio
(
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

415 
	#TCP_PRIO_MIN
 1

	)

416 
	#TCP_PRIO_NORMAL
 64

	)

417 
	#TCP_PRIO_MAX
 127

	)

419 
îr_t
 
t˝_ouçut
(
t˝_pcb
 *
pcb
);

422 c⁄° *
t˝_debug_°©e_°r
(
t˝_°©e
 
s
);

425 
	#t˝_√w_ù6
(Ë
	`t˝_√w_ù_ty≥
(
IPADDR_TYPE_V6
)

	)

427 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/tcpip.h

37 #i‚de‡
LWIP_HDR_TCPIP_H


38 
	#LWIP_HDR_TCPIP_H


	)

40 
	~"lwù/›t.h
"

42 #i‡!
NO_SYS


44 
	~"lwù/îr.h
"

45 
	~"lwù/timeouts.h
"

46 
	~"lwù/√tif.h
"

48 #ifde‡
__˝lu•lus


52 #i‡
LWIP_TCPIP_CORE_LOCKING


54 
sys_muãx_t
 
lock_t˝ù_c‹e
;

56 
	#LOCK_TCPIP_CORE
(Ë
	`sys_muãx_lock
(&
lock_t˝ù_c‹e
)

	)

58 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_muãx_u∆ock
(&
lock_t˝ù_c‹e
)

	)

60 
	#LOCK_TCPIP_CORE
()

	)

61 
	#UNLOCK_TCPIP_CORE
()

	)

64 
	gpbuf
;

65 
	g√tif
;

68 (*
	gt˝ù_öô_d⁄e_‚
)(*
	t¨g
);

70 (*
	gt˝ù_ˇŒback_‚
)(*
	t˘x
);

73 
	gt˝ù_ˇŒback_msg
;

75 
t˝ù_öô
(
t˝ù_öô_d⁄e_‚
 
t˝ù_öô_d⁄e
, *
¨g
);

77 
îr_t
 
t˝ù_öpkt
(
pbuf
 *
p
, 
√tif
 *
öp
, 
√tif_öput_‚
 
öput_‚
);

78 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

80 
îr_t
 
t˝ù_ˇŒback_wôh_block
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
, 
u8_t
 
block
);

85 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

87 
t˝ù_ˇŒback_msg
 *
t˝ù_ˇŒbackmsg_√w
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
);

88 
t˝ù_ˇŒbackmsg_dñëe
(
t˝ù_ˇŒback_msg
 *
msg
);

89 
îr_t
 
t˝ù_åyˇŒback
(
t˝ù_ˇŒback_msg
 *
msg
);

92 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

93 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

95 #i‡
LWIP_TCPIP_TIMEOUT
 && 
LWIP_TIMERS


96 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

97 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

100 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/timeouts.h

38 #i‚de‡
LWIP_HDR_TIMEOUTS_H


39 
	#LWIP_HDR_TIMEOUTS_H


	)

41 
	~"lwù/›t.h
"

42 
	~"lwù/îr.h
"

43 #i‡!
NO_SYS


44 
	~"lwù/sys.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
LWIP_DEBUG_TIMERNAMES


52 #ifde‡
LWIP_DEBUG


53 
	#LWIP_DEBUG_TIMERNAMES
 
SYS_DEBUG


	)

55 
	#LWIP_DEBUG_TIMERNAMES
 0

	)

61 (* 
lwù_cy˛ic_timî_h™dÀr
)();

65 
	slwù_cy˛ic_timî
 {

66 
u32_t
 
öãrvÆ_ms
;

67 
lwù_cy˛ic_timî_h™dÀr
 
h™dÀr
;

68 #i‡
LWIP_DEBUG_TIMERNAMES


69 c⁄° *
h™dÀr_«me
;

75 c⁄° 
lwù_cy˛ic_timî
 
lwù_cy˛ic_timîs
[];

77 #i‡
LWIP_TIMERS


84 (* 
	gsys_timeout_h™dÀr
)(*
	t¨g
);

86 
	ssys_timeo
 {

87 
sys_timeo
 *
	g√xt
;

88 
u32_t
 
	gtime
;

89 
sys_timeout_h™dÀr
 
	gh
;

90 *
	g¨g
;

91 #i‡
LWIP_DEBUG_TIMERNAMES


92 c⁄° *
	gh™dÀr_«me
;

96 
sys_timeouts_öô
();

98 #i‡
LWIP_DEBUG_TIMERNAMES


99 
sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° *
h™dÀr_«me
);

100 
	#sys_timeout
(
m£cs
, 
h™dÀr
, 
¨g
Ë
	`sys_timeout_debug
(m£cs, h™dÀr,árg, #h™dÀr)

	)

102 
sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

105 
sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

106 
sys_ª°¨t_timeouts
();

107 #i‡
NO_SYS


108 
sys_check_timeouts
();

109 
u32_t
 
sys_timeouts_¶ì±ime
();

111 
sys_timeouts_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

117 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/lwip/udp.h

38 #i‚de‡
LWIP_HDR_UDP_H


39 
	#LWIP_HDR_UDP_H


	)

41 
	~"lwù/›t.h
"

43 #i‡
LWIP_UDP


45 
	~"lwù/pbuf.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/ù_addr.h
"

48 
	~"lwù/ù.h
"

49 
	~"lwù/ù6_addr.h
"

50 
	~"lwù/¥Ÿ/udp.h
"

52 #ifde‡
__˝lu•lus


56 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

57 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

58 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

59 
	#UDP_FLAGS_MULTICAST_LOOP
 0x08U

	)

61 
udp_pcb
;

77 (*
udp_ªcv_‚
)(*
	t¨g
, 
	tudp_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

78 c⁄° 
	tù_addr_t
 *
	taddr
, 
	tu16_t
 
	tp‹t
);

81 
	sudp_pcb
 {

83 
IP_PCB
;

87 
udp_pcb
 *
√xt
;

89 
u8_t
 
Êags
;

91 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

93 #i‡
LWIP_MULTICAST_TX_OPTIONS


95 
ù_addr_t
 
mu…iˇ°_ù
;

97 
u8_t
 
mˇ°_âl
;

100 #i‡
LWIP_UDPLITE


102 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

106 
udp_ªcv_‚
 
ªcv
;

108 *
ªcv_¨g
;

111 
udp_pcb
 *
udp_pcbs
;

115 
udp_pcb
 *
udp_√w
();

116 
udp_pcb
 *
udp_√w_ù_ty≥
(
u8_t
 
ty≥
);

117 
udp_ªmove
(
udp_pcb
 *
pcb
);

118 
îr_t
 
udp_böd
(
udp_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
,

119 
u16_t
 
p‹t
);

120 
îr_t
 
udp_c⁄√˘
(
udp_pcb
 *
pcb
, c⁄° 
ù_addr_t
 *
ùaddr
,

121 
u16_t
 
p‹t
);

122 
udp_disc⁄√˘
(
udp_pcb
 *
pcb
);

123 
udp_ªcv
(
udp_pcb
 *
pcb
, 
udp_ªcv_‚
 
ªcv
,

124 *
ªcv_¨g
);

125 
îr_t
 
udp_£ndto_if
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

126 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

127 
√tif
 *netif);

128 
îr_t
 
udp_£ndto_if_§c
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

129 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

130 
√tif
 *√tif, c⁄° 
ù_addr_t
 *
§c_ù
);

131 
îr_t
 
udp_£ndto
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

132 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

133 
îr_t
 
udp_£nd
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

135 #i‡
LWIP_CHECKSUM_ON_COPY
 && 
CHECKSUM_GEN_UDP


136 
îr_t
 
udp_£ndto_if_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

137 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

138 
√tif
 *√tif, 
u8_t
 
have_chksum
,

139 
u16_t
 
chksum
);

140 
îr_t
 
udp_£ndto_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

141 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

142 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

143 
îr_t
 
udp_£nd_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

144 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

145 
îr_t
 
udp_£ndto_if_§c_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

146 c⁄° 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
, 
√tif
 *netif,

147 
u8_t
 
have_chksum
, 
u16_t
 
chksum
, c⁄° 
ù_addr_t
 *
§c_ù
);

150 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

151 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

154 
udp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

156 
udp_öô
();

159 
	#udp_√w_ù6
(Ë
	`udp_√w_ù_ty≥
(
IPADDR_TYPE_V6
)

	)

161 #i‡
LWIP_MULTICAST_TX_OPTIONS


162 
	#udp_£t_mu…iˇ°_√tif_addr
(
pcb
, 
ù4addr
Ë
	`ù_addr_c›y_‰om_ù4
(’cb)->
mu…iˇ°_ù
, *(ù4addr))

	)

163 
	#udp_gë_mu…iˇ°_√tif_addr
(
pcb
Ë
	`ù_2_ù4
(&’cb)->
mu…iˇ°_ù
)

	)

164 
	#udp_£t_mu…iˇ°_âl
(
pcb
, 
vÆue
Ëdÿ{ (pcb)->
mˇ°_âl
 = vÆue; } 0)

	)

165 
	#udp_gë_mu…iˇ°_âl
(
pcb
Ë(’cb)->
mˇ°_âl
)

	)

168 #i‡
UDP_DEBUG


169 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

171 
	#udp_debug_¥öt
(
udphdr
)

	)

174 
udp_√tif_ù_addr_ch™ged
(c⁄° 
ù_addr_t
 *
ﬁd_addr
, c⁄° ip_addr_à*
√w_addr
);

176 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/etharp.h

2 
	~"lwù/ëh¨p.h
"

3 
	~"√tif/ëhî√t.h
"

	@include_lib/net/lwip/src/include/netif/ethernet.h

41 #i‚de‡
LWIP_HDR_NETIF_ETHERNET_H


42 
	#LWIP_HDR_NETIF_ETHERNET_H


	)

44 
	~"lwù/›t.h
"

46 
	~"lwù/pbuf.h
"

47 
	~"lwù/√tif.h
"

48 
	~"lwù/¥Ÿ/ëhî√t.h
"

50 #ifde‡
__˝lu•lus


54 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


62 #i‚de‡
LWIP_ARP_FILTER_NETIF


63 
	#LWIP_ARP_FILTER_NETIF
 0

	)

66 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

67 
îr_t
 
ëhî√t_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, c⁄° 
ëh_addr
 *
§c
, c⁄° ëh_add∏*
d°
, 
u16_t
 
ëh_ty≥
);

69 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

73 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/lowpan6.h

42 #i‚de‡
LWIP_HDR_LOWPAN6_H


43 
	#LWIP_HDR_LOWPAN6_H


	)

45 
	~"√tif/low∑n6_›ts.h
"

47 #i‡
LWIP_IPV6
 && 
LWIP_6LOWPAN


49 
	~"lwù/pbuf.h
"

50 
	~"lwù/ù.h
"

51 
	~"lwù/ù_addr.h
"

52 
	~"lwù/√tif.h
"

54 #ifde‡
__˝lu•lus


59 
	#LOWPAN6_TMR_INTERVAL
 1000

	)

61 
low∑n6_tmr
();

63 
îr_t
 
low∑n6_£t_c⁄ãxt
(
u8_t
 
ödex
, c⁄° 
ù6_addr_t
 *
c⁄ãxt
);

64 
îr_t
 
low∑n6_£t_sh‹t_addr
(
u8_t
 
addr_high
, u8_à
addr_low
);

66 #i‡
LWIP_IPV4


67 
îr_t
 
low∑n4_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, c⁄° 
ù4_addr_t
 *
ùaddr
);

69 
îr_t
 
low∑n6_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, c⁄° 
ù6_addr_t
 *
ù6addr
);

70 
îr_t
 
low∑n6_öput
(
pbuf
 *
p
, 
√tif
 *netif);

71 
îr_t
 
low∑n6_if_öô
(
√tif
 *netif);

74 
îr_t
 
low∑n6_£t_∑n_id
(
u16_t
 
∑n_id
);

76 #i‡!
NO_SYS


77 
îr_t
 
t˝ù_6low∑n_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

80 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/lowpan6_opts.h

41 #i‚de‡
LWIP_HDR_LOWPAN6_OPTS_H


42 
	#LWIP_HDR_LOWPAN6_OPTS_H


	)

44 
	~"lwù/›t.h
"

46 #i‚de‡
LWIP_6LOWPAN


47 
	#LWIP_6LOWPAN
 0

	)

50 #i‚de‡
LWIP_6LOWPAN_NUM_CONTEXTS


51 
	#LWIP_6LOWPAN_NUM_CONTEXTS
 10

	)

54 #i‚de‡
LWIP_6LOWPAN_INFER_SHORT_ADDRESS


55 
	#LWIP_6LOWPAN_INFER_SHORT_ADDRESS
 1

	)

58 #i‚de‡
LWIP_6LOWPAN_IPHC


59 
	#LWIP_6LOWPAN_IPHC
 1

	)

62 #i‚de‡
LWIP_6LOWPAN_HW_CRC


63 
	#LWIP_6LOWPAN_HW_CRC
 1

	)

66 #i‚de‡
LOWPAN6_DEBUG


67 
	#LOWPAN6_DEBUG
 
LWIP_DBG_OFF


	)

	@include_lib/net/lwip/src/include/netif/ppp/ccp.h

33 
	~"√tif/µp/µp_›ts.h
"

34 #i‡
PPP_SUPPORT
 && 
CCP_SUPPORT


36 #i‚de‡
CCP_H


37 
	#CCP_H


	)

43 
	#CCP_CONFREQ
 1

	)

44 
	#CCP_CONFACK
 2

	)

45 
	#CCP_TERMREQ
 5

	)

46 
	#CCP_TERMACK
 6

	)

47 
	#CCP_RESETREQ
 14

	)

48 
	#CCP_RESETACK
 15

	)

54 
	#CCP_MAX_OPTION_LENGTH
 32

	)

60 
	#CCP_CODE
(
dp
Ë((dp)[0])

	)

61 
	#CCP_ID
(
dp
Ë((dp)[1])

	)

62 
	#CCP_LENGTH
(
dp
Ë(((dp)[2] << 8Ë+ (dp)[3])

	)

63 
	#CCP_HDRLEN
 4

	)

65 
	#CCP_OPT_CODE
(
dp
Ë((dp)[0])

	)

66 
	#CCP_OPT_LENGTH
(
dp
Ë((dp)[1])

	)

67 
	#CCP_OPT_MINLEN
 2

	)

69 #i‡
BSDCOMPRESS_SUPPORT


74 
	#CI_BSD_COMPRESS
 21

	)

75 
	#CILEN_BSD_COMPRESS
 3

	)

78 
	#BSD_NBITS
(
x
Ë((xË& 0x1FË

	)

79 
	#BSD_VERSION
(
x
Ë((xË>> 5Ë

	)

80 
	#BSD_CURRENT_VERSION
 1

	)

81 
	#BSD_MAKE_OPT
(
v
, 
n
Ë(((vË<< 5Ë| (n))

	)

83 
	#BSD_MIN_BITS
 9

	)

84 
	#BSD_MAX_BITS
 15

	)

87 #i‡
DEFLATE_SUPPORT


92 
	#CI_DEFLATE
 26

	)

93 
	#CI_DEFLATE_DRAFT
 24

	)

94 
	#CILEN_DEFLATE
 4

	)

96 
	#DEFLATE_MIN_SIZE
 9

	)

97 
	#DEFLATE_MAX_SIZE
 15

	)

98 
	#DEFLATE_METHOD_VAL
 8

	)

99 
	#DEFLATE_SIZE
(
x
Ë(((xË>> 4Ë+ 8)

	)

100 
	#DEFLATE_METHOD
(
x
Ë((xË& 0x0F)

	)

101 
	#DEFLATE_MAKE_OPT
(
w
Ë((((wË- 8Ë<< 4Ë+ 
DEFLATE_METHOD_VAL
)

	)

102 
	#DEFLATE_CHK_SEQUENCE
 0

	)

105 #i‡
MPPE_SUPPORT


110 
	#CI_MPPE
 18

	)

111 
	#CILEN_MPPE
 6

	)

114 #i‡
PREDICTOR_SUPPORT


119 
	#CI_PREDICTOR_1
 1

	)

120 
	#CILEN_PREDICTOR_1
 2

	)

121 
	#CI_PREDICTOR_2
 2

	)

122 
	#CILEN_PREDICTOR_2
 2

	)

125 
	sc˝_›ti⁄s
 {

126 #i‡
DEFLATE_SUPPORT


127 
	mdeÊ©e
 : 1;

128 
	mdeÊ©e_c‹ª˘
 : 1;

129 
	mdeÊ©e_dø·
 : 1;

131 #i‡
BSDCOMPRESS_SUPPORT


132 
	mbsd_com¥ess
 : 1;

134 #i‡
PREDICTOR_SUPPORT


135 
	m¥edi˘‹_1
 : 1;

136 
	m¥edi˘‹_2
 : 1;

139 #i‡
MPPE_SUPPORT


140 
u8_t
 
	mmµe
;

142 #i‡
BSDCOMPRESS_SUPPORT


143 
u_sh‹t
 
	mbsd_bôs
;

145 #i‡
DEFLATE_SUPPORT


146 
u_sh‹t
 
	mdeÊ©e_size
;

148 
u8_t
 
	mmëhod
;

149 } 
	tc˝_›ti⁄s
;

151 c⁄° 
¥Ÿít
 
c˝_¥Ÿít
;

153 
c˝_ª£åeque°
(
µp_pcb
 *
pcb
);

	@include_lib/net/lwip/src/include/netif/ppp/chap-md5.h

31 
	~"√tif/µp/µp_›ts.h
"

32 #i‡
PPP_SUPPORT
 && 
CHAP_SUPPORT


34 c⁄° 
ch≠_dige°_ty≥
 
md5_dige°
;

	@include_lib/net/lwip/src/include/netif/ppp/chap-new.h

31 
	~"√tif/µp/µp_›ts.h
"

32 #i‡
PPP_SUPPORT
 && 
CHAP_SUPPORT


34 #i‚de‡
CHAP_H


35 
	#CHAP_H


	)

37 
	~"µp.h
"

42 
	#CHAP_HDRLEN
 4

	)

47 
	#CHAP_CHALLENGE
 1

	)

48 
	#CHAP_RESPONSE
 2

	)

49 
	#CHAP_SUCCESS
 3

	)

50 
	#CHAP_FAILURE
 4

	)

55 
	#CHAP_MD5
 5

	)

56 #i‡
MSCHAP_SUPPORT


57 
	#CHAP_MICROSOFT
 0x80

	)

58 
	#CHAP_MICROSOFT_V2
 0x81

	)

64 
	#MAX_CHALLENGE_LEN
 64

	)

65 
	#MAX_RESPONSE_LEN
 64

	)

71 
	#CHAL_MAX_PKTLEN
 (
PPP_HDRLEN
 + 
CHAP_HDRLEN
 + 4 + 
MAX_CHALLENGE_LEN
 + 
MAXNAMELEN
)

	)

72 
	#RESP_MAX_PKTLEN
 (
PPP_HDRLEN
 + 
CHAP_HDRLEN
 + 4 + 
MAX_RESPONSE_LEN
 + 
MAXNAMELEN
)

	)

75 #i‡
MSCHAP_SUPPORT


76 
	#MDTYPE_MICROSOFT_V2
 0x1

	)

77 
	#MDTYPE_MICROSOFT
 0x2

	)

79 
	#MDTYPE_MD5
 0x4

	)

80 
	#MDTYPE_NONE
 0

	)

82 #i‡
MSCHAP_SUPPORT


84 
	#CHAP_DIGEST
(
mdty≥
) \

85 ((
mdty≥
Ë& 
MDTYPE_MD5
)? 
CHAP_MD5
: \

86 ((
mdty≥
Ë& 
MDTYPE_MICROSOFT_V2
)? 
CHAP_MICROSOFT_V2
: \

87 ((
mdty≥
Ë& 
MDTYPE_MICROSOFT
)? 
CHAP_MICROSOFT
: \

88 0

	)

90 
	#CHAP_DIGEST
(
mdty≥
) \

91 ((
mdty≥
Ë& 
MDTYPE_MD5
)? 
CHAP_MD5
: \

92 0

	)

96 
	#CHAP_MDTYPE
(
mdty≥
Ë((mdty≥Ë^ ((mdty≥Ë- 1)Ë& (mdty≥)

	)

99 #i‡
MSCHAP_SUPPORT


100 
	#CHAP_MDTYPE_D
(
dige°
) \

101 ((
dige°
Ë=
CHAP_MICROSOFT_V2
)? 
MDTYPE_MICROSOFT_V2
: \

102 ((
dige°
Ë=
CHAP_MICROSOFT
)? 
MDTYPE_MICROSOFT
: \

103 ((
dige°
Ë=
CHAP_MD5
)? 
MDTYPE_MD5
: \

104 0

	)

106 
	#CHAP_MDTYPE_D
(
dige°
) \

107 ((
dige°
Ë=
CHAP_MD5
)? 
MDTYPE_MD5
: \

108 0

	)

112 #i‡
MSCHAP_SUPPORT


113 
	#CHAP_CANDIGEST
(
mdty≥
, 
dige°
) \

114 ((
dige°
Ë=
CHAP_MICROSOFT_V2
)? (
mdty≥
Ë& 
MDTYPE_MICROSOFT_V2
: \

115 ((
dige°
Ë=
CHAP_MICROSOFT
)? (
mdty≥
Ë& 
MDTYPE_MICROSOFT
: \

116 ((
dige°
Ë=
CHAP_MD5
)? (
mdty≥
Ë& 
MDTYPE_MD5
: \

117 0

	)

119 
	#CHAP_CANDIGEST
(
mdty≥
, 
dige°
) \

120 ((
dige°
Ë=
CHAP_MD5
)? (
mdty≥
Ë& 
MDTYPE_MD5
: \

121 0

	)

127 
	sch≠_dige°_ty≥
 {

128 
	mcode
;

130 #i‡
PPP_SERVER


135 (*
	mgíî©e_chÆÀnge
)(
µp_pcb
 *
	mpcb
, *
	mchÆÀnge
);

136 (*
	mvîify_ª•⁄£
)(
µp_pcb
 *
	mpcb
, 
	mid
, c⁄° *
	m«me
,

137 c⁄° *
	m£¸ë
, 
	m£¸ë_Àn
,

138 c⁄° *
	mchÆÀnge
, c⁄° *
	mª•⁄£
,

139 *
	mmesßge
, 
	mmesßge_•a˚
);

141 (*
	mmake_ª•⁄£
)(
µp_pcb
 *
	mpcb
, *
	mª•⁄£
, 
	mid
, c⁄° *
	mour_«me
,

142 c⁄° *
	mchÆÀnge
, c⁄° *
	m£¸ë
, 
	m£¸ë_Àn
,

143 *
	m¥iv
);

144 (*
	mcheck_suc˚ss
)(
µp_pcb
 *
	mpcb
, *
	mpkt
, 
	mÀn
, *
	m¥iv
);

145 (*
	mh™dÀ_Áûuª
)(
µp_pcb
 *
	mpcb
, *
	mpkt
, 
	mÀn
);

151 #i‡
CHAP_SUPPORT


152 
	sch≠_˛õ¡_°©e
 {

153 
u8_t
 
	mÊags
;

154 c⁄° *
	m«me
;

155 c⁄° 
ch≠_dige°_ty≥
 *
	mdige°
;

156 
	m¥iv
[64];

157 } 
	tch≠_˛õ¡_°©e
;

159 #i‡
PPP_SERVER


160 
	sch≠_£rvî_°©e
 {

161 
u8_t
 
	mÊags
;

162 
u8_t
 
	mid
;

163 c⁄° *
	m«me
;

164 c⁄° 
ch≠_dige°_ty≥
 *
	mdige°
;

165 
	mchÆÀnge_xmôs
;

166 
	mchÆÀnge_pkéí
;

167 
	mchÆÀnge
[
CHAL_MAX_PKTLEN
];

168 } 
	tch≠_£rvî_°©e
;

174 (*
ch≠_vîify_hook
)(*
«me
, *
ou∫ame
, 
id
,

175 c⁄° 
ch≠_dige°_ty≥
 *
dige°
,

176 *
chÆÀnge
, *
ª•⁄£
,

177 *
mesßge
, 
mesßge_•a˚
);

180 #i‡
PPP_SERVER


182 
	`ch≠_auth_≥î
(
µp_pcb
 *
pcb
, c⁄° *
our_«me
, 
dige°_code
);

186 
	`ch≠_auth_wôh_≥î
(
µp_pcb
 *
pcb
, c⁄° *
our_«me
, 
dige°_code
);

189 c⁄° 
¥Ÿít
 
ch≠_¥Ÿít
;

	@include_lib/net/lwip/src/include/netif/ppp/chap_ms.h

33 
	~"√tif/µp/µp_›ts.h
"

34 #i‡
PPP_SUPPORT
 && 
MSCHAP_SUPPORT


36 #i‚de‡
CHAPMS_INCLUDE


37 
	#CHAPMS_INCLUDE


	)

39 c⁄° 
ch≠_dige°_ty≥
 
ch≠ms_dige°
;

40 c⁄° 
ch≠_dige°_ty≥
 
ch≠ms2_dige°
;

	@include_lib/net/lwip/src/include/netif/ppp/eap.h

23 
	~"√tif/µp/µp_›ts.h
"

24 #i‡
PPP_SUPPORT
 && 
EAP_SUPPORT


26 #i‚de‡
PPP_EAP_H


27 
	#PPP_EAP_H


	)

29 
	~"µp.h
"

31 #ifdef 
__˝lu•lus


38 
	#EAP_HEADERLEN
 4

	)

42 
	#EAP_REQUEST
 1

	)

43 
	#EAP_RESPONSE
 2

	)

44 
	#EAP_SUCCESS
 3

	)

45 
	#EAP_FAILURE
 4

	)

48 
	#EAPT_IDENTITY
 1

	)

49 
	#EAPT_NOTIFICATION
 2

	)

50 
	#EAPT_NAK
 3

	)

51 
	#EAPT_MD5CHAP
 4

	)

52 
	#EAPT_OTP
 5

	)

53 
	#EAPT_TOKEN
 6

	)

55 
	#EAPT_RSA
 9

	)

56 
	#EAPT_DSS
 10

	)

57 
	#EAPT_KEA
 11

	)

58 
	#EAPT_KEA_VALIDATE
 12

	)

59 
	#EAPT_TLS
 13

	)

60 
	#EAPT_DEFENDER
 14

	)

61 
	#EAPT_W2K
 15

	)

62 
	#EAPT_ARCOT
 16

	)

63 
	#EAPT_CISCOWIRELESS
 17

	)

64 
	#EAPT_NOKIACARD
 18

	)

65 
	#EAPT_SRP
 19

	)

69 
	#EAPSRP_CHALLENGE
 1

	)

70 
	#EAPSRP_CKEY
 1

	)

71 
	#EAPSRP_SKEY
 2

	)

72 
	#EAPSRP_CVALIDATOR
 2

	)

73 
	#EAPSRP_SVALIDATOR
 3

	)

74 
	#EAPSRP_ACK
 3

	)

75 
	#EAPSRP_LWRECHALLENGE
 4

	)

77 
	#SRPVAL_EBIT
 0x00000001

	)

79 
	#SRP_PSEUDO_ID
 "p£udo_"

	)

80 
	#SRP_PSEUDO_LEN
 7

	)

82 
	#MD5_SIGNATURE_SIZE
 16

	)

83 
	#EAP_MIN_CHALLENGE_LENGTH
 17

	)

84 
	#EAP_MAX_CHALLENGE_LENGTH
 24

	)

85 
	#EAP_MIN_MAX_POWER_OF_TWO_CHALLENGE_LENGTH
 3

	)

87 
	#EAP_STATES
 \

89 "SRP1", "SRP2", "SRP3", "MD5ChÆl", "O≥n", "SRP4", "BadAuth"

	)

91 
	#óp_˛õ¡_a˘ive
(
pcb
Ë(’cb)->
óp
.
es_˛õ¡
.
ó_°©e
 =
ópLi°í
)

	)

92 #i‡
PPP_SERVER


93 
	#óp_£rvî_a˘ive
(
pcb
) \

94 ((
pcb
)->
óp
.
es_£rvî
.
ó_°©e
 >
ópIdítify
 && \

95 (
pcb
)->
óp
.
es_£rvî
.
ó_°©e
 <
ópMD5ChÆl
)

	)

101 
	eóp_°©e_code
 {

102 
ópInôül
 = 0,

103 
ópPídög
,

104 
ópClo£d
,

105 
ópLi°í
,

106 
ópIdítify
,

107 
ópSRP1
,

108 
ópSRP2
,

109 
ópSRP3
,

110 
ópMD5ChÆl
,

111 
ópO≥n
,

112 
ópSRP4
,

113 
ópBadAuth


116 
	sóp_auth
 {

117 c⁄° *
ó_«me
;

118 
ó_≥î
[
MAXNAMELEN
 + 1];

119 *
ó_£ssi⁄
;

120 
u_ch¨
 *
ó_skey
;

121 
u_sh‹t
 
ó_«mñí
;

122 
u_sh‹t
 
ó_≥îÀn
;

123 
óp_°©e_code
 
ó_°©e
;

124 
u_ch¨
 
ó_id
;

125 
u_ch¨
 
ó_ªque°s
;

126 
u_ch¨
 
ó_ª•⁄£s
;

127 
u_ch¨
 
ó_ty≥
;

128 
u32_t
 
ó_keyÊags
;

131 #i‚de‡
EAP_MAX_CHALLENGE_LENGTH


132 
	#EAP_MAX_CHALLENGE_LENGTH
 24

	)

134 
	sóp_°©e
 {

135 
óp_auth
 
es_˛õ¡
;

136 #i‡
PPP_SERVER


137 
óp_auth
 
es_£rvî
;

139 
es_ßvedtime
;

140 
es_ªchÆÀnge
;

141 
es_lwªchÆÀnge
;

142 
u8_t
 
es_u£p£udo
;

143 
es_u£dp£udo
;

144 
es_chÆÀn
;

145 
u_ch¨
 
es_chÆÀnge
[
EAP_MAX_CHALLENGE_LENGTH
];

146 } 
	tóp_°©e
;

152 
	#EAP_DEFTIMEOUT
 3

	)

153 
	#EAP_DEFTRANSMITS
 10

	)

154 
	#EAP_DEFREQTIME
 20

	)

155 
	#EAP_DEFALLOWREQ
 20

	)

158 
óp_authwôh≥î
(
µp_pcb
 *
pcb
, c⁄° *
loˇ ame
);

159 
óp_auth≥î
(
µp_pcb
 *
pcb
, c⁄° *
loˇ ame
);

161 c⁄° 
¥Ÿít
 
óp_¥Ÿít
;

163 #ifdef 
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/ecp.h

34 
	~"√tif/µp/µp_›ts.h
"

35 #i‡
PPP_SUPPORT
 && 
ECP_SUPPORT


37 
	se˝_›ti⁄s
 {

38 
boﬁ
 
	mªquúed
;

39 
	mí˘y≥
;

40 } 
	te˝_›ti⁄s
;

42 
fsm
 
e˝_fsm
[];

43 
e˝_›ti⁄s
 
e˝_w™t›ti⁄s
[];

44 
e˝_›ti⁄s
 
e˝_gŸ›ti⁄s
[];

45 
e˝_›ti⁄s
 
e˝_Ælow›ti⁄s
[];

46 
e˝_›ti⁄s
 
e˝_his›ti⁄s
[];

48 c⁄° 
¥Ÿít
 
e˝_¥Ÿít
;

	@include_lib/net/lwip/src/include/netif/ppp/eui64.h

38 
	~"√tif/µp/µp_›ts.h
"

39 #i‡
PPP_SUPPORT
 && 
PPP_IPV6_SUPPORT


41 #i‚de‡
EUI64_H


42 
	#EUI64_H


	)

50 
u8_t
 
	me8
[8];

51 
u16_t
 
	me16
[4];

52 
u32_t
 
	me32
[2];

53 } 
	teui64_t
;

55 
	#eui64_iszîo
(
e
Ë((”).
e32
[0] | (e).e32[1]Ë=0)

	)

56 
	#eui64_equÆs
(
e
, 
o
Ë((”).
e32
[0] == (o).e32[0]) && \

57 ((
e
).
e32
[1] =(
o
).e32[1]))

	)

58 
	#eui64_zîo
(
e
Ë”).
e32
[0] = (e).e32[1] = 0;

	)

60 
	#eui64_c›y
(
s
, 
d
Ë
	`mem˝y
(&(d), &(s), (
eui64_t
))

	)

62 
	#eui64_magic
(
e
) do { \

63 (
e
).
e32
[0] = 
	`magic
(); \

64 (
e
).
e32
[1] = 
	`magic
(); \

65 (
e
).
e8
[0] &= ~2; \

66 } 0)

	)

67 
	#eui64_magic_nz
(
x
) do { \

68 
	`eui64_magic
(
x
); \

69 } 
	`eui64_iszîo
(
x
))

	)

70 
	#eui64_magic_√
(
x
, 
y
) do { \

71 
	`eui64_magic
(
x
); \

72 } 
	`eui64_equÆs
(
x
, 
y
))

	)

74 
	#eui64_gë
(
Œ
, 
˝
) do { \

75 
	`eui64_c›y
((*
˝
), (
Œ
)); \

76 (
˝
Ë+(
eui64_t
); \

77 } 0)

	)

79 
	#eui64_put
(
Œ
, 
˝
) do { \

80 
	`eui64_c›y
((
Œ
), (*
˝
)); \

81 (
˝
Ë+(
eui64_t
); \

82 } 0)

	)

84 
	#eui64_£t32
(
e
, 
l
) do { \

85 (
e
).
e32
[0] = 0; \

86 (
e
).
e32
[1] = 
	`lwù_ht⁄l
(
l
); \

87 } 0)

	)

88 
	#eui64_£éo32
(
e
, 
l
Ë
	`eui64_£t32
”,Ü)

	)

90 *
eui64_¡ﬂ
(
eui64_t
);

	@include_lib/net/lwip/src/include/netif/ppp/fsm.h

45 
	~"√tif/µp/µp_›ts.h
"

46 #i‡
PPP_SUPPORT


48 #i‚de‡
FSM_H


49 
	#FSM_H


	)

51 
	~"µp.h
"

56 
	#HEADERLEN
 4

	)

62 
	#CONFREQ
 1

	)

63 
	#CONFACK
 2

	)

64 
	#CONFNAK
 3

	)

65 
	#CONFREJ
 4

	)

66 
	#TERMREQ
 5

	)

67 
	#TERMACK
 6

	)

68 
	#CODEREJ
 7

	)

74 
	sfsm
 {

75 
µp_pcb
 *
	mpcb
;

76 c⁄° 
fsm_ˇŒbacks
 *
	mˇŒbacks
;

77 c⁄° *
	mãrm_ªas⁄
;

78 
u8_t
 
	m£í_ack
;

80 
u16_t
 
	m¥Ÿocﬁ
;

81 
u8_t
 
	m°©e
;

82 
u8_t
 
	mÊags
;

83 
u8_t
 
	mid
;

84 
u8_t
 
	mªqid
;

85 
u8_t
 
	mªå™smôs
;

86 
u8_t
 
	m«klo›s
;

87 
u8_t
 
	m∫aklo›s
;

88 
u8_t
 
	mmax«klo›s
;

90 
u8_t
 
	mãrm_ªas⁄_Àn
;

91 } 
	tfsm
;

94 
	sfsm_ˇŒbacks
 {

95 (*
	mª£tci
)

96 (
	mfsm
 *);

97 (*
	mcûí
)

98 (
	mfsm
 *);

99 (*
	maddci
)

100 (
	mfsm
 *, 
	mu_ch¨
 *, *);

101 (*
	mackci
)

102 (
	mfsm
 *, 
	mu_ch¨
 *, );

103 (*
	m«kci
)

104 (
	mfsm
 *, 
	mu_ch¨
 *, , );

105 (*
	mªjci
)

106 (
	mfsm
 *, 
	mu_ch¨
 *, );

107 (*
	mªqci
)

108 (
	mfsm
 *, 
	mu_ch¨
 *, *, );

109 (*
	mup
)

110 (
	mfsm
 *);

111 (*
	mdown
)

112 (
	mfsm
 *);

113 (*
	m°¨tög
)

114 (
	mfsm
 *);

115 (*
	mföished
)

116 (
	mfsm
 *);

117 (*
	m¥Ÿªje˘
)

119 (*
	mªå™smô
)

120 (
	mfsm
 *);

121 (*
	mextcode
)

122 (
	mfsm
 *, , , 
	mu_ch¨
 *, );

123 c⁄° *
	m¥Ÿo_«me
;

124 } 
	tfsm_ˇŒbacks
;

130 
	#PPP_FSM_INITIAL
 0

	)

131 
	#PPP_FSM_STARTING
 1

	)

132 
	#PPP_FSM_CLOSED
 2

	)

133 
	#PPP_FSM_STOPPED
 3

	)

134 
	#PPP_FSM_CLOSING
 4

	)

135 
	#PPP_FSM_STOPPING
 5

	)

136 
	#PPP_FSM_REQSENT
 6

	)

137 
	#PPP_FSM_ACKRCVD
 7

	)

138 
	#PPP_FSM_ACKSENT
 8

	)

139 
	#PPP_FSM_OPENED
 9

	)

145 
	#OPT_PASSIVE
 1

	)

146 
	#OPT_RESTART
 2

	)

147 
	#OPT_SILENT
 4

	)

154 
	#DEFTIMEOUT
 3

	)

155 
	#DEFMAXTERMREQS
 2

	)

156 
	#DEFMAXCONFREQS
 10

	)

157 
	#DEFMAXNAKLOOPS
 5

	)

164 
fsm_öô
(
fsm
 *
f
);

165 
fsm_lowîup
(
fsm
 *
f
);

166 
fsm_lowîdown
(
fsm
 *
f
);

167 
fsm_›í
(
fsm
 *
f
);

168 
fsm_˛o£
(
fsm
 *
f
, c⁄° *
ªas⁄
);

169 
fsm_öput
(
fsm
 *
f
, 
u_ch¨
 *
ö∑ckë
, 
l
);

170 
fsm_¥Ÿªje˘
(
fsm
 *
f
);

171 
fsm_sd©a
(
fsm
 *
f
, 
u_ch¨
 
code
, u_ch¨ 
id
, c⁄° u_ch¨ *
d©a
, 
d©Æí
);

	@include_lib/net/lwip/src/include/netif/ppp/ipcp.h

45 
	~"√tif/µp/µp_›ts.h
"

46 #i‡
PPP_SUPPORT
 && 
PPP_IPV4_SUPPORT


48 #i‚de‡
IPCP_H


49 
	#IPCP_H


	)

54 
	#CI_ADDRS
 1

	)

55 #i‡
VJ_SUPPORT


56 
	#CI_COMPRESSTYPE
 2

	)

58 
	#CI_ADDR
 3

	)

60 #i‡
LWIP_DNS


61 
	#CI_MS_DNS1
 129

	)

62 
	#CI_MS_DNS2
 131

	)

65 
	#CI_MS_WINS1
 130

	)

66 
	#CI_MS_WINS2
 132

	)

69 #i‡
VJ_SUPPORT


70 
	#MAX_STATES
 16

	)

72 
	#IPCP_VJMODE_OLD
 1

	)

73 
	#IPCP_VJMODE_RFC1172
 2

	)

74 
	#IPCP_VJMODE_RFC1332
 3

	)

77 
	#IPCP_VJ_COMP
 0x002d

	)

78 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

82 
	sù˝_›ti⁄s
 {

83 
	m√g_addr
 : 1;

84 
	mﬁd_addrs
 : 1;

85 
	mªq_addr
 : 1;

87 
	mdeÁu…_rouã
 : 1;

88 
	mª∂a˚_deÁu…_rouã
 : 1;

91 
	m¥oxy_¨p
 : 1;

93 #i‡
VJ_SUPPORT


94 
	m√g_vj
 : 1;

95 
	mﬁd_vj
 : 1;

96 
	mcÊag
 : 1;

98 
	mac˚±_loˇl
 : 1;

99 
	mac˚±_ªmŸe
 : 1;

100 #i‡
LWIP_DNS


101 
	mªq_dns1
 : 1;

102 
	mªq_dns2
 : 1;

105 
u32_t
 
	mouøddr
, 
	mhißddr
;

106 #i‡
LWIP_DNS


107 
u32_t
 
	mdnßddr
[2];

110 
u32_t
 
	mwößddr
[2];

113 #i‡
VJ_SUPPORT


114 
u16_t
 
	mvj_¥Ÿocﬁ
;

115 
u8_t
 
	mmax¶Ÿödex
;

117 } 
	tù˝_›ti⁄s
;

120 *
ù_¡ﬂ
(
u32_t
);

123 c⁄° 
¥Ÿít
 
ù˝_¥Ÿít
;

	@include_lib/net/lwip/src/include/netif/ppp/ipv6cp.h

141 
	~"√tif/µp/µp_›ts.h
"

142 #i‡
PPP_SUPPORT
 && 
PPP_IPV6_SUPPORT


144 #i‚de‡
IPV6CP_H


145 
	#IPV6CP_H


	)

147 
	~"eui64.h
"

152 
	#CI_IFACEID
 1

	)

153 #ifde‡
IPV6CP_COMP


154 
	#CI_COMPRESSTYPE
 2

	)

160 
	sùv6˝_›ti⁄s
 {

161 
	m√g_iÁ˚id
 : 1;

162 
	mªq_iÁ˚id
 : 1;

163 
	mac˚±_loˇl
 : 1;

164 
	m›t_loˇl
 : 1;

165 
	m›t_ªmŸe
 : 1;

166 
	mu£_ù
 : 1;

168 
	mu£_≥rsi°ít
 : 1;

170 #ifde‡
IPV6CP_COMP


171 
	m√g_vj
 : 1;

174 #ifde‡
IPV6CP_COMP


175 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

177 
eui64_t
 
	mourid
, 
	mhisid
;

178 } 
	tùv6˝_›ti⁄s
;

180 c⁄° 
¥Ÿít
 
ùv6˝_¥Ÿít
;

	@include_lib/net/lwip/src/include/netif/ppp/lcp.h

45 
	~"√tif/µp/µp_›ts.h
"

46 #i‡
PPP_SUPPORT


48 #i‚de‡
LCP_H


49 
	#LCP_H


	)

51 
	~"µp.h
"

56 
	#CI_VENDOR
 0

	)

57 
	#CI_MRU
 1

	)

58 
	#CI_ASYNCMAP
 2

	)

59 
	#CI_AUTHTYPE
 3

	)

60 
	#CI_QUALITY
 4

	)

61 
	#CI_MAGICNUMBER
 5

	)

62 
	#CI_PCOMPRESSION
 7

	)

63 
	#CI_ACCOMPRESSION
 8

	)

64 
	#CI_FCSALTERN
 9

	)

65 
	#CI_SDP
 10

	)

66 
	#CI_NUMBERED
 11

	)

67 
	#CI_CALLBACK
 13

	)

68 
	#CI_MRRU
 17

	)

69 
	#CI_SSNHF
 18

	)

70 
	#CI_EPDISC
 19

	)

71 
	#CI_MPPLUS
 22

	)

72 
	#CI_LDISC
 23

	)

73 
	#CI_LCPAUTH
 24

	)

74 
	#CI_COBS
 25

	)

75 
	#CI_PREFELIS
 26

	)

76 
	#CI_MPHDRFMT
 27

	)

77 
	#CI_I18N
 28

	)

78 
	#CI_SDL
 29

	)

83 
	#PROTREJ
 8

	)

84 
	#ECHOREQ
 9

	)

85 
	#ECHOREP
 10

	)

86 
	#DISCREQ
 11

	)

87 
	#IDENTIF
 12

	)

88 
	#TIMEREM
 13

	)

91 
	#CBCP_OPT
 6

	)

94 
	#DEFMRU
 1500

	)

95 
	#MINMRU
 128

	)

96 
	#MAXMRU
 16384

	)

100 
	#MAX_ENDP_LEN
 20

	)

101 
	sïdisc
 {

102 
	m˛ass_
;

103 
	mÀngth
;

104 
	mvÆue
[
MAX_ENDP_LEN
];

110 
	sl˝_›ti⁄s
 {

111 
	m∑ssive
 : 1;

112 
	msûít
 : 1;

114 
	mª°¨t
 : 1;

116 
	m√g_mru
 : 1;

117 
	m√g_asyncm≠
 : 1;

118 #i‡
PAP_SUPPORT


119 
	m√g_u∑p
 : 1;

121 #i‡
CHAP_SUPPORT


122 
	m√g_ch≠
 : 1;

124 #i‡
EAP_SUPPORT


125 
	m√g_óp
 : 1;

127 
	m√g_magi˙umbî
 : 1;

128 
	m√g_pcom¥essi⁄
 : 1;

129 
	m√g_accom¥essi⁄
 : 1;

130 #i‡
LQR_SUPPORT


131 
	m√g_lqr
 : 1;

133 
	m√g_cb˝
 : 1;

134 #ifde‡
HAVE_MULTILINK


135 
	m√g_mºu
 : 1;

137 
	m√g_s¢hf
 : 1;

138 
	m√g_ídpoöt
 : 1;

140 
u16_t
 
	mmru
;

141 #ifde‡
HAVE_MULTILINK


142 
u16_t
 
	mmºu
;

144 #i‡
CHAP_SUPPORT


145 
u8_t
 
	mch≠_mdty≥
;

147 
u32_t
 
	masyncm≠
;

148 
u32_t
 
	mmagi˙umbî
;

149 
u8_t
 
	mnumlo›s
;

150 #i‡
LQR_SUPPORT


151 
u32_t
 
	mlqr_≥riod
;

153 
ïdisc
 
	mídpoöt
;

154 } 
	tl˝_›ti⁄s
;

156 
l˝_›í
(
µp_pcb
 *
pcb
);

157 
l˝_˛o£
(
µp_pcb
 *
pcb
, c⁄° *
ªas⁄
);

158 
l˝_lowîup
(
µp_pcb
 *
pcb
);

159 
l˝_lowîdown
(
µp_pcb
 *
pcb
);

160 
l˝_•rŸªj
(
µp_pcb
 *
pcb
, 
u_ch¨
 *
p
, 
Àn
);

162 c⁄° 
¥Ÿít
 
l˝_¥Ÿít
;

167 
	#DEFLOOPBACKFAIL
 10

	)

	@include_lib/net/lwip/src/include/netif/ppp/magic.h

77 
	~"√tif/µp/µp_›ts.h
"

78 #i‡
PPP_SUPPORT


80 #i‚de‡
MAGIC_H


81 
	#MAGIC_H


	)

90 
magic_öô
();

96 
magic_øndomize
();

101 
u32_t
 
magic
();

113 
magic_øndom_byãs
(*
buf
, 
u32_t
 
buf_Àn
);

118 
u32_t
 
magic_pow
(
u8_t
 
pow
);

	@include_lib/net/lwip/src/include/netif/ppp/mppe.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
PPP_SUPPORT
 && 
MPPE_SUPPORT


39 #i‚de‡
MPPE_H


40 
	#MPPE_H


	)

42 
	~"√tif/µp/µp¸y±.h
"

44 
	#MPPE_PAD
 4

	)

45 
	#MPPE_MAX_KEY_LEN
 16

	)

48 
	#MPPE_OPT_40
 0x01

	)

49 
	#MPPE_OPT_128
 0x02

	)

50 
	#MPPE_OPT_STATEFUL
 0x04

	)

52 
	#MPPE_OPT_56
 0x08

	)

53 
	#MPPE_OPT_MPPC
 0x10

	)

54 
	#MPPE_OPT_D
 0x20

	)

55 
	#MPPE_OPT_UNSUPPORTED
 (
MPPE_OPT_56
|
MPPE_OPT_MPPC
|
MPPE_OPT_D
)

	)

56 
	#MPPE_OPT_UNKNOWN
 0x40

	)

65 
	#MPPE_C_BIT
 0x01

	)

66 
	#MPPE_D_BIT
 0x10

	)

67 
	#MPPE_L_BIT
 0x20

	)

68 
	#MPPE_S_BIT
 0x40

	)

69 
	#MPPE_M_BIT
 0x80

	)

70 
	#MPPE_H_BIT
 0x01

	)

73 
	#MPPE_ALL_BITS
 (
MPPE_D_BIT
|
MPPE_L_BIT
|
MPPE_S_BIT
|
MPPE_M_BIT
|
MPPE_H_BIT
)

	)

76 
	#MPPE_OPTS_TO_CI
(
›ts
, 
ci
) \

78 
u_ch¨
 *
±r
 = 
ci
; \

81 i‡(
›ts
 & 
MPPE_OPT_STATEFUL
) \

82 *
±r
++ = 0x0; \

84 *
±r
++ = 
MPPE_H_BIT
; \

85 *
±r
++ = 0; \

86 *
±r
++ = 0; \

89 *
±r
 = 0; \

90 i‡(
›ts
 & 
MPPE_OPT_128
) \

91 *
±r
 |
MPPE_S_BIT
; \

92 i‡(
›ts
 & 
MPPE_OPT_40
) \

93 *
±r
 |
MPPE_L_BIT
; \

95 }  0)

	)

98 
	#MPPE_CI_TO_OPTS
(
ci
, 
›ts
) \

100 c⁄° 
u_ch¨
 *
±r
 = 
ci
; \

102 
›ts
 = 0; \

105 i‡(!(
±r
[0] & 
MPPE_H_BIT
)) \

106 
›ts
 |
MPPE_OPT_STATEFUL
; \

109 i‡(
±r
[3] & 
MPPE_S_BIT
) \

110 
›ts
 |
MPPE_OPT_128
; \

111 i‡(
±r
[3] & 
MPPE_L_BIT
) \

112 
›ts
 |
MPPE_OPT_40
; \

115 i‡(
±r
[3] & 
MPPE_M_BIT
) \

116 
›ts
 |
MPPE_OPT_56
; \

117 i‡(
±r
[3] & 
MPPE_D_BIT
) \

118 
›ts
 |
MPPE_OPT_D
; \

119 i‡(
±r
[3] & 
MPPE_C_BIT
) \

120 
›ts
 |
MPPE_OPT_MPPC
; \

123 i‡(
±r
[0] & ~
MPPE_H_BIT
) \

124 
›ts
 |
MPPE_OPT_UNKNOWN
; \

125 i‡(
±r
[1] ||Ötr[2]) \

126 
›ts
 |
MPPE_OPT_UNKNOWN
; \

127 i‡(
±r
[3] & ~
MPPE_ALL_BITS
) \

128 
›ts
 |
MPPE_OPT_UNKNOWN
; \

129 }  0)

	)

132 
	#SHA1_PAD_SIZE
 40

	)

134 c⁄° 
u8_t
 
	gmµe_sha1_∑d1
[
SHA1_PAD_SIZE
] = {

140 c⁄° 
u8_t
 
	gmµe_sha1_∑d2
[
SHA1_PAD_SIZE
] = {

150 
	sµp_mµe_°©e
 {

151 
lwù_¨c4_c⁄ãxt
 
	m¨c4
;

152 
u8_t
 
	mma°î_key
[
MPPE_MAX_KEY_LEN
];

153 
u8_t
 
	m£ssi⁄_key
[
MPPE_MAX_KEY_LEN
];

154 
u8_t
 
	mkeyÀn
;

158 
u8_t
 
	mbôs
;

159 
u16_t
 
	mccou¡
;

160 
u16_t
 
	mßnôy_îr‹s
;

161 
	m°©eful
 : 1;

162 
	mdisˇrd
 : 1;

163 } 
	tµp_mµe_°©e
;

165 
mµe_£t_key
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
, 
u8_t
 *
key
);

166 
mµe_öô
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
, 
u8_t
 
›ti⁄s
);

167 
mµe_comp_ª£t
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
);

168 
îr_t
 
mµe_com¥ess
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
, 
pbuf
 **
pb
, 
u16_t
 
¥Ÿocﬁ
);

169 
mµe_decomp_ª£t
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
);

170 
îr_t
 
mµe_decom¥ess
(
µp_pcb
 *
pcb
, 
µp_mµe_°©e
 *
°©e
, 
pbuf
 **
pb
);

	@include_lib/net/lwip/src/include/netif/ppp/polarssl/arc4.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
LWIP_INCLUDED_POLARSSL_ARC4


39 #i‚de‡
LWIP_INCLUDED_POLARSSL_ARC4_H


40 
	#LWIP_INCLUDED_POLARSSL_ARC4_H


	)

46 
	mx
;

47 
	my
;

48 
	mm
[256];

50 
	t¨c4_c⁄ãxt
;

52 #ifde‡
__˝lu•lus


63 
¨c4_£tup
(
¨c4_c⁄ãxt
 *
˘x
, *
key
, 
keyÀn
);

72 
¨c4_¸y±
(
¨c4_c⁄ãxt
 *
˘x
, *
buf
, 
buÊí
);

74 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/polarssl/des.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
LWIP_INCLUDED_POLARSSL_DES


39 #i‚de‡
LWIP_INCLUDED_POLARSSL_DES_H


40 
	#LWIP_INCLUDED_POLARSSL_DES_H


	)

42 
	#DES_ENCRYPT
 1

	)

43 
	#DES_DECRYPT
 0

	)

49 
	mmode
;

50 
	msk
[32];

52 
	tdes_c⁄ãxt
;

54 #ifde‡
__˝lu•lus


64 
des_£tkey_íc
(
des_c⁄ãxt
 *
˘x
, 
key
[8]);

72 
des_£tkey_dec
(
des_c⁄ãxt
 *
˘x
, 
key
[8]);

81 
des_¸y±_ecb
(
des_c⁄ãxt
 *
˘x
,

82 c⁄° 
öput
[8],

83 
ouçut
[8]);

85 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/polarssl/md4.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
LWIP_INCLUDED_POLARSSL_MD4


39 #i‚de‡
LWIP_INCLUDED_POLARSSL_MD4_H


40 
	#LWIP_INCLUDED_POLARSSL_MD4_H


	)

46 
	mtŸÆ
[2];

47 
	m°©e
[4];

48 
	mbuf„r
[64];

50 
	tmd4_c⁄ãxt
;

52 #ifde‡
__˝lu•lus


61 
md4_°¨ts
(
md4_c⁄ãxt
 *
˘x
);

70 
md4_upd©e
(
md4_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
ûí
);

78 
md4_föish
(
md4_c⁄ãxt
 *
˘x
, 
ouçut
[16]);

87 
md4
(*
öput
, 
ûí
, 
ouçut
[16]);

90 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/polarssl/md5.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
LWIP_INCLUDED_POLARSSL_MD5


39 #i‚de‡
LWIP_INCLUDED_POLARSSL_MD5_H


40 
	#LWIP_INCLUDED_POLARSSL_MD5_H


	)

46 
	mtŸÆ
[2];

47 
	m°©e
[4];

48 
	mbuf„r
[64];

50 
	tmd5_c⁄ãxt
;

52 #ifde‡
__˝lu•lus


61 
md5_°¨ts
(
md5_c⁄ãxt
 *
˘x
);

70 
md5_upd©e
(
md5_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
ûí
);

78 
md5_föish
(
md5_c⁄ãxt
 *
˘x
, 
ouçut
[16]);

87 
md5
(*
öput
, 
ûí
, 
ouçut
[16]);

89 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/polarssl/sha1.h

36 
	~"√tif/µp/µp_›ts.h
"

37 #i‡
LWIP_INCLUDED_POLARSSL_SHA1


39 #i‚de‡
LWIP_INCLUDED_POLARSSL_SHA1_H


40 
	#LWIP_INCLUDED_POLARSSL_SHA1_H


	)

46 
	mtŸÆ
[2];

47 
	m°©e
[5];

48 
	mbuf„r
[64];

50 
	tsha1_c⁄ãxt
;

52 #ifde‡
__˝lu•lus


61 
sha1_°¨ts
(
sha1_c⁄ãxt
 *
˘x
);

70 
sha1_upd©e
(
sha1_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
ûí
);

78 
sha1_föish
(
sha1_c⁄ãxt
 *
˘x
, 
ouçut
[20]);

87 
sha1
(*
öput
, 
ûí
, 
ouçut
[20]);

89 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/ppp.h

34 
	~"√tif/µp/µp_›ts.h
"

35 #i‡
PPP_SUPPORT


37 #i‚de‡
PPP_H


38 
	#PPP_H


	)

40 
	~"lwù/def.h
"

41 
	~"lwù/°©s.h
"

42 
	~"lwù/mem.h
"

43 
	~"lwù/√tif.h
"

44 
	~"lwù/sys.h
"

45 
	~"lwù/timeouts.h
"

46 #i‡
PPP_IPV6_SUPPORT


47 
	~"lwù/ù6_addr.h
"

51 #i‚de‡
PPP_OPTIONS


52 
	#PPP_OPTIONS
 0

	)

55 #i‚de‡
PPP_NOTIFY


56 
	#PPP_NOTIFY
 0

	)

59 #i‚de‡
PPP_REMOTENAME


60 
	#PPP_REMOTENAME
 0

	)

63 #i‚de‡
PPP_IDLETIMELIMIT


64 
	#PPP_IDLETIMELIMIT
 0

	)

67 #i‚de‡
PPP_LCP_ADAPTIVE


68 
	#PPP_LCP_ADAPTIVE
 0

	)

71 #i‚de‡
PPP_MAXCONNECT


72 
	#PPP_MAXCONNECT
 0

	)

75 #i‚de‡
PPP_ALLOWED_ADDRS


76 
	#PPP_ALLOWED_ADDRS
 0

	)

79 #i‚de‡
PPP_PROTOCOLNAME


80 
	#PPP_PROTOCOLNAME
 0

	)

83 #i‚de‡
PPP_STATS_SUPPORT


84 
	#PPP_STATS_SUPPORT
 0

	)

87 #i‚de‡
DEFLATE_SUPPORT


88 
	#DEFLATE_SUPPORT
 0

	)

91 #i‚de‡
BSDCOMPRESS_SUPPORT


92 
	#BSDCOMPRESS_SUPPORT
 0

	)

95 #i‚de‡
PREDICTOR_SUPPORT


96 
	#PREDICTOR_SUPPORT
 0

	)

106 
	#PPP_HDRLEN
 4

	)

107 
	#PPP_FCSLEN
 2

	)

112 
	#PPP_PHASE_DEAD
 0

	)

113 
	#PPP_PHASE_MASTER
 1

	)

114 
	#PPP_PHASE_HOLDOFF
 2

	)

115 
	#PPP_PHASE_INITIALIZE
 3

	)

116 
	#PPP_PHASE_SERIALCONN
 4

	)

117 
	#PPP_PHASE_DORMANT
 5

	)

118 
	#PPP_PHASE_ESTABLISH
 6

	)

119 
	#PPP_PHASE_AUTHENTICATE
 7

	)

120 
	#PPP_PHASE_CALLBACK
 8

	)

121 
	#PPP_PHASE_NETWORK
 9

	)

122 
	#PPP_PHASE_RUNNING
 10

	)

123 
	#PPP_PHASE_TERMINATE
 11

	)

124 
	#PPP_PHASE_DISCONNECT
 12

	)

127 
	#PPPERR_NONE
 0

	)

128 
	#PPPERR_PARAM
 1

	)

129 
	#PPPERR_OPEN
 2

	)

130 
	#PPPERR_DEVICE
 3

	)

131 
	#PPPERR_ALLOC
 4

	)

132 
	#PPPERR_USER
 5

	)

133 
	#PPPERR_CONNECT
 6

	)

134 
	#PPPERR_AUTHFAIL
 7

	)

135 
	#PPPERR_PROTOCOL
 8

	)

136 
	#PPPERR_PEERDEAD
 9

	)

137 
	#PPPERR_IDLETIMEOUT
 10

	)

138 
	#PPPERR_CONNECTTIME
 11

	)

139 
	#PPPERR_LOOPBACK
 12

	)

142 
	#PPP_AUTH_SUPPORT
 (
PAP_SUPPORT
 || 
CHAP_SUPPORT
 || 
EAP_SUPPORT
)

	)

154 
µp_pcb_s
 
	tµp_pcb
;

157 #i‚de‡
__u_ch¨_deföed


158 
	tu_l⁄g
;

159 
	tu_öt
;

160 
	tu_sh‹t
;

161 
	tu_ch¨
;

164 
	~"fsm.h
"

165 
	~"l˝.h
"

166 #i‡
CCP_SUPPORT


167 
	~"c˝.h
"

169 #i‡
MPPE_SUPPORT


170 
	~"mµe.h
"

172 #i‡
PPP_IPV4_SUPPORT


173 
	~"ù˝.h
"

175 #i‡
PPP_IPV6_SUPPORT


176 
	~"ùv6˝.h
"

178 #i‡
PAP_SUPPORT


179 
	~"u∑p.h
"

181 #i‡
CHAP_SUPPORT


182 
	~"ch≠-√w.h
"

184 #i‡
EAP_SUPPORT


185 
	~"óp.h
"

187 #i‡
VJ_SUPPORT


188 
	~"vj.h
"

192 (*
	tµp_lök_°©us_cb_‚
)(
	tµp_pcb
 *
	tpcb
, 
	tîr_code
, *
	t˘x
);

197 
	sµp_£âögs_s
 {

199 #i‡
PPP_SERVER
 && 
PPP_AUTH_SUPPORT


200 
auth_ªquúed
 : 1;

201 
nuŒ_logö
 : 1;

203 #i‡
PPP_REMOTENAME


204 
ex∂icô_ªmŸe
 : 1;

206 #i‡
PAP_SUPPORT


207 
ªfu£_∑p
 : 1;

209 #i‡
CHAP_SUPPORT


210 
ªfu£_ch≠
 : 1;

212 #i‡
MSCHAP_SUPPORT


213 
ªfu£_msch≠
 : 1;

214 
ªfu£_msch≠_v2
 : 1;

216 #i‡
EAP_SUPPORT


217 
ªfu£_óp
 : 1;

219 #i‡
LWIP_DNS


220 
u£≥îdns
 : 1;

222 
≥rsi°
 : 1;

223 #i‡
PRINTPKT_SUPPORT


224 
hide_∑ssw‹d
 : 1;

226 
n‹emŸeù
 : 1;

227 
œx_ªcv
 : 1;

228 
n€ndpoöt
 : 1;

229 #i‡
PPP_LCP_ADAPTIVE


230 
l˝_echo_ad≠tive
 : 1;

232 #i‡
MPPE_SUPPORT


233 
ªquúe_mµe
 : 1;

234 
ªfu£_mµe_40
 : 1;

235 
ªfu£_mµe_128
 : 1;

236 
ªfu£_mµe_°©eful
 : 1;

239 
u16_t
 
li°í_time
;

241 #i‡
PPP_IDLETIMELIMIT


242 
u16_t
 
idÀ_time_limô
;

244 #i‡
PPP_MAXCONNECT


245 
u32_t
 
maxc⁄√˘
;

248 #i‡
PPP_AUTH_SUPPORT


250 c⁄° *
u£r
;

251 c⁄° *
∑sswd
;

252 #i‡
PPP_REMOTENAME


253 
ªmŸe_«me
[
MAXNAMELEN
 + 1];

256 #i‡
PAP_SUPPORT


257 
u8_t
 
∑p_timeout_time
;

258 
u8_t
 
∑p_max_å™smôs
;

259 #i‡
PPP_SERVER


260 
u8_t
 
∑p_ªq_timeout
;

264 #i‡
CHAP_SUPPORT


265 
u8_t
 
ch≠_timeout_time
;

266 
u8_t
 
ch≠_max_å™smôs
;

267 #i‡
PPP_SERVER


268 
u8_t
 
ch≠_ªchÆÀnge_time
;

272 #i‡
EAP_SUPPORT


273 
u8_t
 
óp_ªq_time
;

274 
u8_t
 
óp_Ælow_ªq
;

275 #i‡
PPP_SERVER


276 
u8_t
 
óp_timeout_time
;

277 
u8_t
 
óp_max_å™smôs
;

283 
u8_t
 
fsm_timeout_time
;

284 
u8_t
 
fsm_max_c⁄f_ªq_å™smôs
;

285 
u8_t
 
fsm_max_ãrm_å™smôs
;

286 
u8_t
 
fsm_max_«k_lo›s
;

288 
u8_t
 
l˝_lo›backÁû
;

290 
u8_t
 
l˝_echo_öãrvÆ
;

291 
u8_t
 
l˝_echo_Áûs
;

293 } 
	tµp_£âögs
;

295 #i‡
PPP_SERVER


296 
	sµp_addrs
 {

297 #i‡
PPP_IPV4_SUPPORT


298 
ù4_addr_t
 
our_ùaddr
, 
his_ùaddr
, 
√tmask
;

299 #i‡
LWIP_DNS


300 
ù4_addr_t
 
dns1
, 
dns2
;

303 #i‡
PPP_IPV6_SUPPORT


304 
ù6_addr_t
 
our6_ùaddr
, 
his6_ùaddr
;

312 
	sµp_pcb_s
 {

313 
µp_£âögs
 
£âögs
;

314 c⁄° 
lök_ˇŒbacks
 *
lök_cb
;

315 *
lök_˘x_cb
;

316 (*
lök_°©us_cb
)(
µp_pcb
 *
pcb
, 
îr_code
, *
˘x
);

317 #i‡
PPP_NOTIFY_PHASE


318 (*
nŸify_pha£_cb
)(
µp_pcb
 *
pcb
, 
u8_t
 
pha£
, *
˘x
);

320 *
˘x_cb
;

321 
√tif
 *netif;

322 
u8_t
 
pha£
;

323 
u8_t
 
îr_code
;

326 #i‡
PPP_IPV4_SUPPORT


327 
ask_f‹_loˇl
 : 1;

328 
ù˝_is_›í
 : 1;

329 
ù˝_is_up
 : 1;

330 
if4_up
 : 1;

332 
¥oxy_¨p_£t
 : 1;

335 #i‡
PPP_IPV6_SUPPORT


336 
ùv6˝_is_up
 : 1;

337 
if6_up
 : 1;

339 
l˝_echo_timî_ru¬ög
 : 1;

340 #i‡
VJ_SUPPORT


341 
vj_íabÀd
 : 1;

343 #i‡
CCP_SUPPORT


344 
c˝_Æl_ªje˘ed
 : 1;

346 #i‡
MPPE_SUPPORT


347 
mµe_keys_£t
 : 1;

350 #i‡
PPP_AUTH_SUPPORT


352 #i‡
PPP_SERVER
 && 
	`deföed
(
HAVE_MULTILINK
)

353 
≥î_auth«me
[
MAXNAMELEN
 + 1];

355 
u16_t
 
auth_≥ndög
;

356 
u16_t
 
auth_d⁄e
;

358 #i‡
PAP_SUPPORT


359 
u∑p_°©e
 
u∑p
;

362 #i‡
CHAP_SUPPORT


363 
ch≠_˛õ¡_°©e
 
ch≠_˛õ¡
;

364 #i‡
PPP_SERVER


365 
ch≠_£rvî_°©e
 
ch≠_£rvî
;

369 #i‡
EAP_SUPPORT


370 
óp_°©e
 
óp
;

374 
fsm
 
l˝_fsm
;

375 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
;

376 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
;

377 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
;

378 
l˝_›ti⁄s
 
l˝_his›ti⁄s
;

379 
u16_t
 
≥î_mru
;

380 
u8_t
 
l˝_echos_≥ndög
;

381 
u8_t
 
l˝_echo_numbî
;

383 
u8_t
 
num_≈_›í
;

384 
u8_t
 
num_≈_up
;

386 #i‡
VJ_SUPPORT


387 
vjcom¥ess
 
vj_comp
;

390 #i‡
CCP_SUPPORT


391 
fsm
 
c˝_fsm
;

392 
c˝_›ti⁄s
 
c˝_w™t›ti⁄s
;

393 
c˝_›ti⁄s
 
c˝_gŸ›ti⁄s
;

394 
c˝_›ti⁄s
 
c˝_Ælow›ti⁄s
;

395 
c˝_›ti⁄s
 
c˝_his›ti⁄s
;

396 
u8_t
 
c˝_loˇl°©e
;

397 
u8_t
 
c˝_ª˚ive_mëhod
;

398 
u8_t
 
c˝_å™smô_mëhod
;

399 #i‡
MPPE_SUPPORT


400 
µp_mµe_°©e
 
mµe_comp
;

401 
µp_mµe_°©e
 
mµe_decomp
;

405 #i‡
PPP_IPV4_SUPPORT


406 
fsm
 
ù˝_fsm
;

407 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
;

408 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
;

409 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
;

410 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
;

413 #i‡
PPP_IPV6_SUPPORT


414 
fsm
 
ùv6˝_fsm
;

415 
ùv6˝_›ti⁄s
 
ùv6˝_w™t›ti⁄s
;

416 
ùv6˝_›ti⁄s
 
ùv6˝_gŸ›ti⁄s
;

417 
ùv6˝_›ti⁄s
 
ùv6˝_Ælow›ti⁄s
;

418 
ùv6˝_›ti⁄s
 
ùv6˝_his›ti⁄s
;

431 #i‡
PPP_AUTH_SUPPORT


455 
	#PPPAUTHTYPE_NONE
 0x00

	)

456 
	#PPPAUTHTYPE_PAP
 0x01

	)

457 
	#PPPAUTHTYPE_CHAP
 0x02

	)

458 
	#PPPAUTHTYPE_MSCHAP
 0x04

	)

459 
	#PPPAUTHTYPE_MSCHAP_V2
 0x08

	)

460 
	#PPPAUTHTYPE_EAP
 0x10

	)

461 
	#PPPAUTHTYPE_ANY
 0xff

	)

462 
	`µp_£t_auth
(
µp_pcb
 *
pcb
, 
u8_t
 
authty≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

469 
	#µp_£t_auth_ªquúed
(
µp
, 
boﬁvÆ
Ë’µ->
£âögs
.
auth_ªquúed
 = boﬁvÆ)

	)

472 #i‡
PPP_IPV4_SUPPORT


479 
	#µp_£t_ù˝_ouøddr
(
µp
, 
addr
Ëdÿ{Öµ->
ù˝_w™t›ti⁄s
.
ouøddr
 = 
	`ù4_addr_gë_u32
(addr); \

480 
µp
->
ask_f‹_loˇl
 =Öµ->
ù˝_w™t›ti⁄s
.
ouøddr
 !0; 
	}
} 0)

	)

481 
	#µp_£t_ù˝_hißddr
(
µp
, 
addr
Ë’µ->
ù˝_w™t›ti⁄s
.
hißddr
 = 
	`ù4_addr_gë_u32
◊ddr))

	)

482 #i‡
LWIP_DNS


489 
	#µp_£t_ù˝_dnßddr
(
µp
, 
ödex
, 
addr
Ë’µ->
ù˝_Ælow›ti⁄s
.
dnßddr
[ödex] = 
	`ù4_addr_gë_u32
◊ddr))

	)

497 
	#µp_£t_u£≥îdns
(
µp
, 
boﬁvÆ
Ë’µ->
£âögs
.
u£≥îdns
 = boﬁvÆ)

	)

501 #i‡
MPPE_SUPPORT


503 
	#PPP_MPPE_DISABLE
 0x00

	)

505 
	#PPP_MPPE_ENABLE
 0x01

	)

507 
	#PPP_MPPE_ALLOW_STATEFUL
 0x02

	)

509 
	#PPP_MPPE_REFUSE_40
 0x04

	)

511 
	#PPP_MPPE_REFUSE_128
 0x08

	)

517 
µp_£t_mµe
(
µp_pcb
 *
pcb
, 
u8_t
 
Êags
);

527 
	#µp_£t_li°í_time
(
µp
, 
ötvÆ
Ë’µ->
£âögs
.
li°í_time
 = i¡vÆ)

	)

535 
	#µp_£t_∑ssive
(
µp
, 
boﬁvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
∑ssive
 = boﬁvÆ)

	)

543 
	#µp_£t_sûít
(
µp
, 
boﬁvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
sûít
 = boﬁvÆ)

	)

551 
	#µp_£t_√g_pcomp
(
µp
, 
boﬁvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
√g_pcom¥essi⁄
 = \

552 
µp
->
l˝_Ælow›ti⁄s
.
√g_pcom¥essi⁄
 = 
boﬁvÆ
)

	)

560 
	#µp_£t_√g_accomp
(
µp
, 
boﬁvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
√g_accom¥essi⁄
 = \

561 
µp
->
l˝_Ælow›ti⁄s
.
√g_accom¥essi⁄
 = 
boﬁvÆ
)

	)

569 
	#µp_£t_√g_asyncm≠
(
µp
, 
boﬁvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
√g_asyncm≠
 = \

570 
µp
->
l˝_Ælow›ti⁄s
.
√g_asyncm≠
 = 
boﬁvÆ
)

	)

583 
	#µp_£t_asyncm≠
(
µp
, 
ötvÆ
Ë’µ->
l˝_w™t›ti⁄s
.
asyncm≠
 = i¡vÆ)

	)

589 
	#µp_£t_deÁu…
(
µp
Ë
	`√tif_£t_deÁu…
’µ->
√tif
)

	)

591 #i‡
PPP_NOTIFY_PHASE


598 (*
	tµp_nŸify_pha£_cb_‚
)(
	tµp_pcb
 *
	tpcb
, 
	tu8_t
 
	tpha£
, *
	t˘x
);

599 
	`µp_£t_nŸify_pha£_ˇŒback
(
µp_pcb
 *
pcb
, 
µp_nŸify_pha£_cb_‚
 
nŸify_pha£_cb
);

613 
îr_t
 
	`µp_c⁄√˘
(
µp_pcb
 *
pcb
, 
u16_t
 
hﬁdoff
);

615 #i‡
PPP_SERVER


624 
îr_t
 
	`µp_li°í
(
µp_pcb
 *
pcb
);

638 
îr_t
 
	`µp_˛o£
(
µp_pcb
 *
pcb
, 
u8_t
 
noˇºõr
);

650 
îr_t
 
	`µp_‰ì
(
µp_pcb
 *
pcb
);

658 
	#PPPCTLG_UPSTATUS
 0

	)

664 
	#PPPCTLG_ERRCODE
 1

	)

669 
	#PPPCTLG_FD
 2

	)

675 
îr_t
 
	`µp_io˘l
(
µp_pcb
 *
pcb
, 
u8_t
 
cmd
, *
¨g
);

678 
	#µp_√tif
(
µp
Ë’µ->
√tif
)

	)

681 
	#µp_£t_√tif_°©usˇŒback
(
µp
, 
°©us_cb
) \

682 
	`√tif_£t_°©us_ˇŒback
(
µp
->
√tif
, 
°©us_cb
);

	)

685 
	#µp_£t_√tif_lökˇŒback
(
µp
, 
lök_cb
) \

686 
	`√tif_£t_lök_ˇŒback
(
µp
->
√tif
, 
lök_cb
);

	)

	@include_lib/net/lwip/src/include/netif/ppp/ppp_impl.h

33 #i‚de‡
LWIP_HDR_PPP_IMPL_H


34 
	#LWIP_HDR_PPP_IMPL_H


	)

36 
	~"√tif/µp/µp_›ts.h
"

38 #i‡
PPP_SUPPORT


40 #ifde‡
PPP_INCLUDE_SETTINGS_HEADER


41 
	~"µp_£âögs.h
"

44 
	~<°dio.h
>

45 
	~<°d¨g.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

49 
	~"lwù/√tif.h
"

50 
	~"lwù/def.h
"

51 
	~"lwù/timeouts.h
"

53 
	~"µp.h
"

54 
	~"µpdebug.h
"

62 #i‡
PPP_USE_PBUF_RAM


63 
	#PPP_CTRL_PBUF_TYPE
 
PBUF_RAM


	)

64 
	#PPP_CTRL_PBUF_MAX_SIZE
 512

	)

66 
	#PPP_CTRL_PBUF_TYPE
 
PBUF_POOL


	)

67 
	#PPP_CTRL_PBUF_MAX_SIZE
 
PBUF_POOL_BUFSIZE


	)

73 
	#PPP_ADDRESS
(
p
Ë(((
u_ch¨
 *)’))[0])

	)

74 
	#PPP_CONTROL
(
p
Ë(((
u_ch¨
 *)’))[1])

	)

75 
	#PPP_PROTOCOL
(
p
Ë((((
u_ch¨
 *)’))[2] << 8Ë+ ((u_ch¨ *)’))[3])

	)

80 
	#PPP_ALLSTATIONS
 0xf‡

	)

81 
	#PPP_UI
 0x03

	)

82 
	#PPP_FLAG
 0x7ê

	)

83 
	#PPP_ESCAPE
 0x7d

	)

84 
	#PPP_TRANS
 0x20

	)

89 
	#PPP_IP
 0x21

	)

91 
	#PPP_AT
 0x29

	)

92 
	#PPP_IPX
 0x2b

	)

94 #i‡
VJ_SUPPORT


95 
	#PPP_VJC_COMP
 0x2d

	)

96 
	#PPP_VJC_UNCOMP
 0x2‡

	)

98 #i‡
PPP_IPV6_SUPPORT


99 
	#PPP_IPV6
 0x57

	)

101 #i‡
CCP_SUPPORT


102 
	#PPP_COMP
 0xfd

	)

104 
	#PPP_IPCP
 0x8021

	)

106 
	#PPP_ATCP
 0x8029

	)

107 
	#PPP_IPXCP
 0x802b

	)

109 #i‡
PPP_IPV6_SUPPORT


110 
	#PPP_IPV6CP
 0x8057

	)

112 #i‡
CCP_SUPPORT


113 
	#PPP_CCP
 0x80fd

	)

115 #i‡
ECP_SUPPORT


116 
	#PPP_ECP
 0x8053

	)

118 
	#PPP_LCP
 0xc021

	)

119 #i‡
PAP_SUPPORT


120 
	#PPP_PAP
 0xc023

	)

122 #i‡
LQR_SUPPORT


123 
	#PPP_LQR
 0xc025

	)

125 #i‡
CHAP_SUPPORT


126 
	#PPP_CHAP
 0xc223

	)

128 #i‡
CBCP_SUPPORT


129 
	#PPP_CBCP
 0xc029

	)

131 #i‡
EAP_SUPPORT


132 
	#PPP_EAP
 0xc227

	)

139 
	slök_ˇŒbacks
 {

141 (*
	mc⁄√˘
)(
µp_pcb
 *
	mpcb
, *
	m˘x
);

142 #i‡
PPP_SERVER


144 (*
	mli°í
)(
µp_pcb
 *
	mpcb
, *
	m˘x
);

147 (*
	mdisc⁄√˘
)(
µp_pcb
 *
	mpcb
, *
	m˘x
);

149 
îr_t
 (*
‰ì
)(
µp_pcb
 *
	mpcb
, *
	m˘x
);

151 
îr_t
 (*
wrôe
)(
µp_pcb
 *
	mpcb
, *
	m˘x
, 
pbuf
 *
	mp
);

153 
îr_t
 (*
√tif_ouçut
)(
µp_pcb
 *
	mpcb
, *
	m˘x
, 
pbuf
 *
	mp
, 
u_sh‹t
 
	m¥Ÿocﬁ
);

155 (*
	m£nd_c⁄fig
)(
µp_pcb
 *
	mpcb
, *
	m˘x
, 
u32_t
 
	maccm
, 
	mpcomp
, 
	maccomp
);

157 (*
	mªcv_c⁄fig
)(
µp_pcb
 *
	mpcb
, *
	m˘x
, 
u32_t
 
	maccm
, 
	mpcomp
, 
	maccomp
);

163 
	eNPmode
 {

164 
	mNPMODE_PASS
,

165 
	mNPMODE_DROP
,

166 
	mNPMODE_ERROR
,

167 
	mNPMODE_QUEUE


173 #i‡
PPP_STATS_SUPPORT


174 
	sµp°©
 {

175 
	mµp_ibyãs
;

176 
	mµp_ùackës
;

177 
	mµp_õº‹s
;

178 
	mµp_obyãs
;

179 
	mµp_›ackës
;

180 
	mµp_€º‹s
;

183 #i‡
VJ_SUPPORT


184 
	svj°©
 {

185 
	mvjs_∑ckës
;

186 
	mvjs_com¥es£d
;

187 
	mvjs_£¨ches
;

188 
	mvjs_mis£s
;

189 
	mvjs_uncom¥es£dö
;

190 
	mvjs_com¥es£dö
;

191 
	mvjs_îr‹ö
;

192 
	mvjs_tos£d
;

196 
	sµp_°©s
 {

197 
µp°©
 
	mp
;

198 #i‡
VJ_SUPPORT


199 
vj°©
 
	mvj
;

203 #i‡
CCP_SUPPORT


204 
	scomp°©
 {

205 
	munc_byãs
;

206 
	munc_∑ckës
;

207 
	mcomp_byãs
;

208 
	mcomp_∑ckës
;

209 
	möc_byãs
;

210 
	möc_∑ckës
;

211 
	møtio
;

214 
	sµp_comp_°©s
 {

215 
comp°©
 
	mc
;

216 
comp°©
 
	md
;

222 #i‡
PPP_IDLETIMELIMIT


227 
	sµp_idÀ
 {

228 
time_t
 
	mxmô_idÀ
;

229 
time_t
 
	mªcv_idÀ
;

234 
	#EPD_NULL
 0

	)

235 
	#EPD_LOCAL
 1

	)

236 
	#EPD_IP
 2

	)

237 
	#EPD_MAC
 3

	)

238 
	#EPD_MAGIC
 4

	)

239 
	#EPD_PHONENUM
 5

	)

244 #ifde‡
HAVE_MULTILINK


245 
u8_t
 
mu…ûök
;

246 
u8_t
 
doög_mu…ûök
;

247 
u8_t
 
mu…ûök_ma°î
;

248 
u8_t
 
bundÀ_eof
;

249 
u8_t
 
bundÀ_ãrmö©ög
;

252 #ifde‡
MAXOCTETS


253 
maxo˘ës
;

254 
maxo˘ës_dú
;

259 
maxo˘ës_timeout
;

260 
	#PPP_OCTETS_DIRECTION_SUM
 0

	)

261 
	#PPP_OCTETS_DIRECTION_IN
 1

	)

262 
	#PPP_OCTETS_DIRECTION_OUT
 2

	)

263 
	#PPP_OCTETS_DIRECTION_MAXOVERAL
 3

	)

265 
	#PPP_OCTETS_DIRECTION_MAXSESSION
 4

	)

271 
	#PPP_DATAINPUT
 0

	)

277 
	s¥Ÿít
 {

278 
u_sh‹t
 
	m¥Ÿocﬁ
;

280 (*
	möô
)(
µp_pcb
 *
	mpcb
);

282 (*
	möput
)(
µp_pcb
 *
	mpcb
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

284 (*
	m¥Ÿªj
)(
µp_pcb
 *
	mpcb
);

286 (*
	mlowîup
)(
µp_pcb
 *
	mpcb
);

288 (*
	mlowîdown
)(
µp_pcb
 *
	mpcb
);

290 (*
	m›í
)(
µp_pcb
 *
	mpcb
);

292 (*
	m˛o£
)(
µp_pcb
 *
	mpcb
, c⁄° *
	mªas⁄
);

293 #i‡
PRINTPKT_SUPPORT


295 (*
	m¥öçkt
)(c⁄° 
u_ch¨
 *
	mpkt
, 
	mÀn
,

296 (*
	m¥öãr
)(*, const *, ...),

297 *
	m¨g
);

299 #i‡
PPP_DATAINPUT


301 (*
	md©aöput
)(
µp_pcb
 *
	mpcb
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

303 #i‡
PRINTPKT_SUPPORT


304 c⁄° *
	m«me
;

305 c⁄° *
	md©a_«me
;

307 #i‡
PPP_OPTIONS


308 
›ti⁄_t
 *
	m›ti⁄s
;

310 (*
	mcheck_›ti⁄s
)();

312 #i‡
DEMAND_SUPPORT


314 (*
	mdem™d_c⁄f
)(
	munô
);

316 (*
	ma˘ive_pkt
)(
u_ch¨
 *
	mpkt
, 
	mÀn
);

321 c⁄° 
¥Ÿít
 *c⁄° 
¥Ÿocﬁs
[];

325 #i‡
PAP_SUPPORT


326 
	#PAP_WITHPEER
 0x1

	)

327 
	#PAP_PEER
 0x2

	)

329 #i‡
CHAP_SUPPORT


330 
	#CHAP_WITHPEER
 0x4

	)

331 
	#CHAP_PEER
 0x8

	)

333 #i‡
EAP_SUPPORT


334 
	#EAP_WITHPEER
 0x10

	)

335 
	#EAP_PEER
 0x20

	)

339 #i‡
CHAP_SUPPORT


340 
	#CHAP_MD5_WITHPEER
 0x40

	)

341 
	#CHAP_MD5_PEER
 0x80

	)

342 #i‡
MSCHAP_SUPPORT


343 
	#CHAP_MS_SHIFT
 8

	)

344 
	#CHAP_MS_WITHPEER
 0x100

	)

345 
	#CHAP_MS_PEER
 0x200

	)

346 
	#CHAP_MS2_WITHPEER
 0x400

	)

347 
	#CHAP_MS2_PEER
 0x800

	)

352 #i‡
CHAP_SUPPORT


354 #i‡
MSCHAP_SUPPORT


355 
	#CHAP_MDTYPE_SUPPORTED
 (
MDTYPE_MICROSOFT_V2
 | 
MDTYPE_MICROSOFT
 | 
MDTYPE_MD5
)

	)

357 
	#CHAP_MDTYPE_SUPPORTED
 (
MDTYPE_MD5
)

	)

361 
	#CHAP_MDTYPE_SUPPORTED
 (
MDTYPE_NONE
)

	)

364 #i‡
PPP_STATS_SUPPORT


368 
	sµpd_°©s
 {

369 
	mbyãs_ö
;

370 
	mbyãs_out
;

371 
	mpkts_ö
;

372 
	mpkts_out
;

387 
µp_öô
();

394 
µp_pcb
 *
µp_√w
(
√tif
 *
µpif
, c⁄° 
lök_ˇŒbacks
 *
ˇŒbacks
, *
lök_˘x_cb
,

395 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

398 
µp_°¨t
(
µp_pcb
 *
pcb
);

401 
µp_lök_Áûed
(
µp_pcb
 *
pcb
);

404 
µp_lök_íd
(
µp_pcb
 *
pcb
);

407 
µp_öput
(
µp_pcb
 *
pcb
, 
pbuf
 *
pb
);

410 
pbuf
 *
µp_sögÀbuf
(pbu‡*
p
);

418 
îr_t
 
µp_wrôe
(
µp_pcb
 *
pcb
, 
pbuf
 *
p
);

421 
µp_lök_ãrmö©ed
(
µp_pcb
 *
pcb
);

423 
√w_pha£
(
µp_pcb
 *
pcb
, 
p
);

425 
µp_£nd_c⁄fig
(
µp_pcb
 *
pcb
, 
mtu
, 
u32_t
 
accm
, 
pcomp
, 
accomp
);

426 
µp_ªcv_c⁄fig
(
µp_pcb
 *
pcb
, 
mru
, 
u32_t
 
accm
, 
pcomp
, 
accomp
);

428 #i‡
PPP_IPV4_SUPPORT


429 
siÁddr
(
µp_pcb
 *
pcb
, 
u32_t
 
our_adr
, u32_à
his_adr
, u32_à
√tmask
);

430 
ciÁddr
(
µp_pcb
 *
pcb
, 
u32_t
 
our_adr
, u32_à
his_adr
);

432 
siÂroxy¨p
(
µp_pcb
 *
pcb
, 
u32_t
 
his_adr
);

433 
ciÂroxy¨p
(
µp_pcb
 *
pcb
, 
u32_t
 
his_adr
);

435 #i‡
LWIP_DNS


436 
sdns
(
µp_pcb
 *
pcb
, 
u32_t
 
ns1
, u32_à
ns2
);

437 
cdns
(
µp_pcb
 *
pcb
, 
u32_t
 
ns1
, u32_à
ns2
);

439 #i‡
VJ_SUPPORT


440 
sifvjcomp
(
µp_pcb
 *
pcb
, 
vjcomp
, 
cidcomp
, 
maxcid
);

442 
sifup
(
µp_pcb
 *
pcb
);

443 
sifdown
(
µp_pcb
 *
pcb
);

444 
u32_t
 
gë_mask
(u32_à
addr
);

447 #i‡
PPP_IPV6_SUPPORT


448 
sif6addr
(
µp_pcb
 *
pcb
, 
eui64_t
 
our_eui64
,Éui64_à
his_eui64
);

449 
cif6addr
(
µp_pcb
 *
pcb
, 
eui64_t
 
our_eui64
,Éui64_à
his_eui64
);

450 
sif6up
(
µp_pcb
 *
pcb
);

451 
sif6down
(
µp_pcb
 *
pcb
);

454 #i‡
DEMAND_SUPPORT


455 
si‚pmode
(
µp_pcb
 *
pcb
, 
¥Ÿo
, 
NPmode
 
mode
);

458 
√tif_£t_mtu
(
µp_pcb
 *
pcb
, 
mtu
);

459 
√tif_gë_mtu
(
µp_pcb
 *
pcb
);

461 #i‡
CCP_SUPPORT


463 
c˝_ã°
(
µp_pcb
 *
pcb
, 
u_ch¨
 *
›t_±r
, 
›t_Àn
, 
f‹_å™smô
);

465 
c˝_£t
(
µp_pcb
 *
pcb
, 
u8_t
 
is›í
, u8_à
isup
, u8_à
ª˚ive_mëhod
, u8_à
å™smô_mëhod
);

466 
c˝_ª£t_comp
(
µp_pcb
 *
pcb
);

467 
c˝_ª£t_decomp
(
µp_pcb
 *
pcb
);

469 
c˝_Áèl_îr‹
(
µp_pcb
 *
pcb
);

473 #i‡
PPP_IDLETIMELIMIT


474 
gë_idÀ_time
(
µp_pcb
 *
pcb
, 
µp_idÀ
 *
ù
);

477 #i‡
DEMAND_SUPPORT


478 
gë_lo›_ouçut
();

482 #i‡
PPP_PROTOCOLNAME


483 c⁄° *
¥Ÿocﬁ_«me
(
¥Ÿo
);

487 #i‡
PPP_STATS_SUPPORT


488 
¥öt_lök_°©s
();

489 
ª£t_lök_°©s
(
u
);

490 
upd©e_lök_°©s
(
u
);

501 
	#GETCHAR
(
c
, 
˝
) { \

502 (
c
Ë*(
˝
)++; \

503 }

	)

504 
	#PUTCHAR
(
c
, 
˝
) { \

505 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

506 }

	)

507 
	#GETSHORT
(
s
, 
˝
) { \

508 (
s
Ë*(
˝
)++ << 8; \

509 (
s
Ë|*(
˝
)++; \

510 }

	)

511 
	#PUTSHORT
(
s
, 
˝
) { \

512 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

513 *(
˝
)++ = (
u_ch¨
Ë(
s
); \

514 }

	)

515 
	#GETLONG
(
l
, 
˝
) { \

516 (
l
Ë*(
˝
)++ << 8; \

517 (
l
Ë|*(
˝
)++; (l) <<= 8; \

518 (
l
Ë|*(
˝
)++; (l) <<= 8; \

519 (
l
Ë|*(
˝
)++; \

520 }

	)

521 
	#PUTLONG
(
l
, 
˝
) { \

522 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

523 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

524 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

525 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

526 }

	)

528 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

529 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

534 
	#TIMEOUT
(
f
, 
a
, 
t
Ëdÿ{ 
	`sys_u¡imeout
((f), (a)); 
	`sys_timeout
(—)*1000, (f), (a)); } 0)

	)

535 
	#TIMEOUTMS
(
f
, 
a
, 
t
Ëdÿ{ 
	`sys_u¡imeout
((f), (a)); 
	`sys_timeout
(—), (f), (a)); } 0)

	)

536 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

538 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

539 
	#BCMP
(
s1
, 
s2
, 
l
Ë
	`memcmp
(s1, s2,Ü)

	)

541 
	#PRINTMSG
(
m
, 
l
Ë{ 
	`µp_öfo
("RemŸêmesßge: %0.*v",Ü, m); }

	)

546 
	#MAKEHEADER
(
p
, 
t
) { \

547 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

548 
	`PUTCHAR
(
PPP_UI
, 
p
); \

549 
	`PUTSHORT
(
t
, 
p
); }

	)

552 
lök_ªquúed
(
µp_pcb
 *
pcb
);

553 
lök_ãrmö©ed
(
µp_pcb
 *
pcb
);

554 
lök_down
(
µp_pcb
 *
pcb
);

555 
uµî_œyîs_down
(
µp_pcb
 *
pcb
);

556 
lök_e°ablished
(
µp_pcb
 *
pcb
);

557 
°¨t_√tw‹ks
(
µp_pcb
 *
pcb
);

558 
c⁄töue_√tw‹ks
(
µp_pcb
 *
pcb
);

559 #i‡
PPP_AUTH_SUPPORT


560 #i‡
PPP_SERVER


561 
auth_check_∑sswd
(
µp_pcb
 *
pcb
, *
au£r
, 
u£æí
, *
≠asswd
, 
∑sswdÀn
, c⁄° **
msg
, *
msgÀn
);

563 
auth_≥î_Áû
(
µp_pcb
 *
pcb
, 
¥Ÿocﬁ
);

565 
auth_≥î_suc˚ss
(
µp_pcb
 *
pcb
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
, c⁄° *
«me
, 
«mñí
);

568 
auth_wôh≥î_Áû
(
µp_pcb
 *
pcb
, 
¥Ÿocﬁ
);

570 
auth_wôh≥î_suc˚ss
(
µp_pcb
 *
pcb
, 
¥Ÿocﬁ
, 
¥Ÿ_Êav‹
);

573 
≈_up
(
µp_pcb
 *
pcb
, 
¥Ÿo
);

574 
≈_down
(
µp_pcb
 *
pcb
, 
¥Ÿo
);

575 
≈_föished
(
µp_pcb
 *
pcb
, 
¥Ÿo
);

576 #i‡
PPP_AUTH_SUPPORT


577 
gë_£¸ë
(
µp_pcb
 *
pcb
, c⁄° *
˛õ¡
, c⁄° *
£rvî
, *
£¸ë
, *
£¸ë_Àn
, 
am_£rvî
);

585 #i‡
DEMAND_SUPPORT


586 
dem™d_c⁄f
();

587 
dem™d_block
();

588 
dem™d_unblock
();

589 
dem™d_disˇrd
();

590 
dem™d_ªxmô
(, 
u32_t
);

591 
lo›_ch¨s
(*, );

592 
lo›_‰ame
(*, );

596 #ifde‡
HAVE_MULTILINK


597 
mp_check_›ti⁄s
();

598 
mp_joö_bundÀ
();

599 
mp_exô_bundÀ
();

600 
mp_bundÀ_ãrmö©ed
();

601 *
ïdisc_to_°r
(
ïdisc
 *);

602 
°r_to_ïdisc
(
ïdisc
 *, *);

604 
	#mp_bundÀ_ãrmö©ed
(Ë

	)

605 
	#mp_exô_bundÀ
(Ë

	)

606 
	#doög_mu…ûök
 0

	)

607 
	#mu…ûök_ma°î
 0

	)

611 
µp_¥öt_°rög
(c⁄° 
u_ch¨
 *
p
, 
Àn
, (*
¥öãr
)(*, c⁄° *, ...), *
¨g
);

612 
	`µp_¶¥ötf
(*
buf
, 
buÊí
, c⁄° *
fmt
, ...);

613 
	`µp_v¶¥ötf
(*
buf
, 
buÊí
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

614 
size_t
 
	`µp_°æ˝y
(*
de°
, c⁄° *
§c
, size_à
Àn
);

615 
size_t
 
	`µp_°æˇt
(*
de°
, c⁄° *
§c
, size_à
Àn
);

616 
	`µp_dbglog
(c⁄° *
fmt
, ...);

617 
	`µp_öfo
(c⁄° *
fmt
, ...);

618 
	`µp_nŸi˚
(c⁄° *
fmt
, ...);

619 
	`µp_w¨n
(c⁄° *
fmt
, ...);

620 
	`µp_îr‹
(c⁄° *
fmt
, ...);

621 
	`µp_Áèl
(c⁄° *
fmt
, ...);

622 #i‡
PRINTPKT_SUPPORT


623 
	`µp_dump_∑ckë
(
µp_pcb
 *
pcb
, c⁄° *
èg
, *
p
, 
Àn
);

	@include_lib/net/lwip/src/include/netif/ppp/ppp_opts.h

28 #i‚de‡
LWIP_PPP_OPTS_H


29 
	#LWIP_PPP_OPTS_H


	)

31 
	~"lwù/›t.h
"

36 #i‚de‡
PPP_SUPPORT


37 
	#PPP_SUPPORT
 0

	)

43 #i‚de‡
PPPOE_SUPPORT


44 
	#PPPOE_SUPPORT
 0

	)

50 #i‚de‡
PPPOL2TP_SUPPORT


51 
	#PPPOL2TP_SUPPORT
 0

	)

57 #i‚de‡
PPPOL2TP_AUTH_SUPPORT


58 
	#PPPOL2TP_AUTH_SUPPORT
 
PPPOL2TP_SUPPORT


	)

64 #i‚de‡
PPPOS_SUPPORT


65 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

71 #i‚de‡
LWIP_PPP_API


72 
	#LWIP_PPP_API
 (
PPP_SUPPORT
 && (
NO_SYS
 =0))

	)

79 #i‚de‡
MEMP_NUM_PPP_PCB


80 
	#MEMP_NUM_PPP_PCB
 1

	)

83 #i‡
PPP_SUPPORT


89 #i‚de‡
MEMP_NUM_PPPOS_INTERFACES


90 
	#MEMP_NUM_PPPOS_INTERFACES
 
MEMP_NUM_PPP_PCB


	)

97 #i‚de‡
MEMP_NUM_PPPOE_INTERFACES


98 
	#MEMP_NUM_PPPOE_INTERFACES
 1

	)

105 #i‚de‡
MEMP_NUM_PPPOL2TP_INTERFACES


106 
	#MEMP_NUM_PPPOL2TP_INTERFACES
 1

	)

112 #i‚de‡
MEMP_NUM_PPP_API_MSG


113 
	#MEMP_NUM_PPP_API_MSG
 5

	)

119 #i‚de‡
PPP_DEBUG


120 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

128 #i‚de‡
PPP_INPROC_IRQ_SAFE


129 
	#PPP_INPROC_IRQ_SAFE
 0

	)

137 #i‚de‡
PRINTPKT_SUPPORT


138 
	#PRINTPKT_SUPPORT
 0

	)

144 #i‚de‡
PPP_IPV4_SUPPORT


145 
	#PPP_IPV4_SUPPORT
 (
LWIP_IPV4
)

	)

151 #i‚de‡
PPP_IPV6_SUPPORT


152 
	#PPP_IPV6_SUPPORT
 (
LWIP_IPV6
)

	)

164 #i‚de‡
PPP_NOTIFY_PHASE


165 
	#PPP_NOTIFY_PHASE
 0

	)

178 #i‚de‡
PPP_USE_PBUF_RAM


179 
	#PPP_USE_PBUF_RAM
 0

	)

185 #i‚de‡
PPP_FCS_TABLE


186 
	#PPP_FCS_TABLE
 1

	)

192 #i‚de‡
PAP_SUPPORT


193 
	#PAP_SUPPORT
 0

	)

199 #i‚de‡
CHAP_SUPPORT


200 
	#CHAP_SUPPORT
 0

	)

206 #i‚de‡
MSCHAP_SUPPORT


207 
	#MSCHAP_SUPPORT
 0

	)

209 #i‡
MSCHAP_SUPPORT


211 #unde‡
CHAP_SUPPORT


212 
	#CHAP_SUPPORT
 1

	)

218 #i‚de‡
EAP_SUPPORT


219 
	#EAP_SUPPORT
 0

	)

225 #i‚de‡
CCP_SUPPORT


226 
	#CCP_SUPPORT
 0

	)

232 #i‚de‡
MPPE_SUPPORT


233 
	#MPPE_SUPPORT
 0

	)

235 #i‡
MPPE_SUPPORT


237 #unde‡
CCP_SUPPORT


238 
	#CCP_SUPPORT
 1

	)

240 #unde‡
MSCHAP_SUPPORT


241 
	#MSCHAP_SUPPORT
 1

	)

243 #unde‡
CHAP_SUPPORT


244 
	#CHAP_SUPPORT
 1

	)

250 #i‚de‡
CBCP_SUPPORT


251 
	#CBCP_SUPPORT
 0

	)

257 #i‚de‡
ECP_SUPPORT


258 
	#ECP_SUPPORT
 0

	)

264 #i‚de‡
DEMAND_SUPPORT


265 
	#DEMAND_SUPPORT
 0

	)

271 #i‚de‡
LQR_SUPPORT


272 
	#LQR_SUPPORT
 0

	)

280 #i‚de‡
PPP_SERVER


281 
	#PPP_SERVER
 0

	)

284 #i‡
PPP_SERVER


288 #i‚de‡
PPP_OUR_NAME


289 
	#PPP_OUR_NAME
 "lwIP"

	)

296 #i‚de‡
VJ_SUPPORT


297 
	#VJ_SUPPORT
 1

	)

300 #i‡!
PPPOS_SUPPORT
 || !
PPP_IPV4_SUPPORT
 || !
LWIP_TCP


301 #unde‡
VJ_SUPPORT


302 
	#VJ_SUPPORT
 0

	)

309 #i‚de‡
PPP_MD5_RANDM


310 
	#PPP_MD5_RANDM
 (
CHAP_SUPPORT
 || 
EAP_SUPPORT
 || 
PPPOL2TP_AUTH_SUPPORT
)

	)

338 #i‚de‡
LWIP_USE_EXTERNAL_POLARSSL


339 
	#LWIP_USE_EXTERNAL_POLARSSL
 0

	)

345 #i‚de‡
LWIP_USE_EXTERNAL_MBEDTLS


346 
	#LWIP_USE_EXTERNAL_MBEDTLS
 0

	)

356 #i‚de‡
FSM_DEFTIMEOUT


357 
	#FSM_DEFTIMEOUT
 6

	)

363 #i‚de‡
FSM_DEFMAXTERMREQS


364 
	#FSM_DEFMAXTERMREQS
 2

	)

370 #i‚de‡
FSM_DEFMAXCONFREQS


371 
	#FSM_DEFMAXCONFREQS
 10

	)

377 #i‚de‡
FSM_DEFMAXNAKLOOPS


378 
	#FSM_DEFMAXNAKLOOPS
 5

	)

384 #i‚de‡
UPAP_DEFTIMEOUT


385 
	#UPAP_DEFTIMEOUT
 6

	)

391 #i‚de‡
UPAP_DEFTRANSMITS


392 
	#UPAP_DEFTRANSMITS
 10

	)

395 #i‡
PPP_SERVER


399 #i‚de‡
UPAP_DEFREQTIME


400 
	#UPAP_DEFREQTIME
 30

	)

407 #i‚de‡
CHAP_DEFTIMEOUT


408 
	#CHAP_DEFTIMEOUT
 6

	)

414 #i‚de‡
CHAP_DEFTRANSMITS


415 
	#CHAP_DEFTRANSMITS
 10

	)

418 #i‡
PPP_SERVER


422 #i‚de‡
CHAP_DEFRECHALLENGETIME


423 
	#CHAP_DEFRECHALLENGETIME
 0

	)

430 #i‚de‡
EAP_DEFREQTIME


431 
	#EAP_DEFREQTIME
 6

	)

437 #i‚de‡
EAP_DEFALLOWREQ


438 
	#EAP_DEFALLOWREQ
 10

	)

441 #i‡
PPP_SERVER


445 #i‚de‡
EAP_DEFTIMEOUT


446 
	#EAP_DEFTIMEOUT
 6

	)

452 #i‚de‡
EAP_DEFTRANSMITS


453 
	#EAP_DEFTRANSMITS
 10

	)

461 #i‚de‡
LCP_DEFLOOPBACKFAIL


462 
	#LCP_DEFLOOPBACKFAIL
 10

	)

468 #i‚de‡
LCP_ECHOINTERVAL


469 
	#LCP_ECHOINTERVAL
 0

	)

475 #i‚de‡
LCP_MAXECHOFAILS


476 
	#LCP_MAXECHOFAILS
 3

	)

482 #i‚de‡
PPP_MAXIDLEFLAG


483 
	#PPP_MAXIDLEFLAG
 100

	)

493 #i‚de‡
PPP_MRU


494 
	#PPP_MRU
 1500

	)

500 #i‚de‡
PPP_DEFMRU


501 
	#PPP_DEFMRU
 1500

	)

507 #i‚de‡
PPP_MAXMRU


508 
	#PPP_MAXMRU
 1500

	)

514 #i‚de‡
PPP_MINMRU


515 
	#PPP_MINMRU
 128

	)

523 #i‡
PPPOL2TP_SUPPORT


524 #i‚de‡
PPPOL2TP_DEFMRU


525 
	#PPPOL2TP_DEFMRU
 1450

	)

532 #i‚de‡
MAXNAMELEN


533 
	#MAXNAMELEN
 256

	)

539 #i‚de‡
MAXSECRETLEN


540 
	#MAXSECRETLEN
 256

	)

548 #i‡!
LWIP_USE_EXTERNAL_POLARSSL
 && !
LWIP_USE_EXTERNAL_MBEDTLS


551 #i‡
CHAP_SUPPORT
 || 
EAP_SUPPORT
 || 
PPPOL2TP_AUTH_SUPPORT
 || 
PPP_MD5_RANDM


552 
	#LWIP_INCLUDED_POLARSSL_MD5
 1

	)

555 #i‡
MSCHAP_SUPPORT


558 
	#LWIP_INCLUDED_POLARSSL_MD4
 1

	)

560 
	#LWIP_INCLUDED_POLARSSL_SHA1
 1

	)

562 
	#LWIP_INCLUDED_POLARSSL_DES
 1

	)

565 #i‡
MPPE_SUPPORT


567 
	#LWIP_INCLUDED_POLARSSL_ARC4
 1

	)

575 #i‚de‡
LWIP_INCLUDED_POLARSSL_MD4


576 
	#LWIP_INCLUDED_POLARSSL_MD4
 0

	)

578 #i‚de‡
LWIP_INCLUDED_POLARSSL_MD5


579 
	#LWIP_INCLUDED_POLARSSL_MD5
 0

	)

581 #i‚de‡
LWIP_INCLUDED_POLARSSL_SHA1


582 
	#LWIP_INCLUDED_POLARSSL_SHA1
 0

	)

584 #i‚de‡
LWIP_INCLUDED_POLARSSL_DES


585 
	#LWIP_INCLUDED_POLARSSL_DES
 0

	)

587 #i‚de‡
LWIP_INCLUDED_POLARSSL_ARC4


588 
	#LWIP_INCLUDED_POLARSSL_ARC4
 0

	)

	@include_lib/net/lwip/src/include/netif/ppp/pppapi.h

28 #i‚de‡
LWIP_PPPAPI_H


29 
	#LWIP_PPPAPI_H


	)

31 
	~"√tif/µp/µp_›ts.h
"

33 #i‡
LWIP_PPP_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/¥iv/t˝ù_¥iv.h
"

38 
	~"√tif/µp/µp.h
"

39 #i‡
PPPOS_SUPPORT


40 
	~"√tif/µp/µpos.h
"

43 #ifde‡
__˝lu•lus


47 
	sµ∑pi_msg_msg
 {

48 
µp_pcb
 *
µp
;

50 #i‡
PPP_NOTIFY_PHASE


52 
µp_nŸify_pha£_cb_‚
 
nŸify_pha£_cb
;

53 } 
£äŸifypha£cb
;

55 #i‡
PPPOS_SUPPORT


57 
√tif
 *
µpif
;

58 
µpos_ouçut_cb_‚
 
ouçut_cb
;

59 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
;

60 *
˘x_cb
;

61 } 
£rül¸óã
;

63 #i‡
PPPOE_SUPPORT


65 
√tif
 *
µpif
;

66 
√tif
 *
ëhif
;

67 c⁄° *
£rvi˚_«me
;

68 c⁄° *
c⁄˚¡øt‹_«me
;

69 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
;

70 *
˘x_cb
;

71 } 
ëhî√t¸óã
;

73 #i‡
PPPOL2TP_SUPPORT


75 
√tif
 *
µpif
;

76 
√tif
 *netif;

77 
API_MSG_M_DEF_C
(
ù_addr_t
, 
ùaddr
);

78 
u16_t
 
p‹t
;

79 #i‡
PPPOL2TP_AUTH_SUPPORT


80 c⁄° 
u8_t
 *
£¸ë
;

81 
u8_t
 
£¸ë_Àn
;

83 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
;

84 *
˘x_cb
;

85 } 
l2ç¸óã
;

88 
u16_t
 
hﬁdoff
;

89 } 
c⁄√˘
;

91 
u8_t
 
noˇºõr
;

92 } 
˛o£
;

94 
u8_t
 
cmd
;

95 *
¨g
;

96 } 
io˘l
;

97 } 
msg
;

100 
	sµ∑pi_msg
 {

101 
t˝ù_≠i_ˇŒ_d©a
 
ˇŒ
;

102 
µ∑pi_msg_msg
 
msg
;

106 
îr_t
 
µ∑pi_£t_deÁu…
(
µp_pcb
 *
pcb
);

107 #i‡
PPP_NOTIFY_PHASE


108 
îr_t
 
µ∑pi_£t_nŸify_pha£_ˇŒback
(
µp_pcb
 *
pcb
, 
µp_nŸify_pha£_cb_‚
 
nŸify_pha£_cb
);

110 #i‡
PPPOS_SUPPORT


111 
µp_pcb
 *
µ∑pi_µpos_¸óã
(
√tif
 *
µpif
, 
µpos_ouçut_cb_‚
 
ouçut_cb
, 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

113 #i‡
PPPOE_SUPPORT


114 
µp_pcb
 *
µ∑pi_µp€_¸óã
(
√tif
 *
µpif
, √ti‡*
ëhif
, c⁄° *
£rvi˚_«me
,

115 c⁄° *
c⁄˚¡øt‹_«me
, 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
,

116 *
˘x_cb
);

118 #i‡
PPPOL2TP_SUPPORT


119 
µp_pcb
 *
µ∑pi_µpﬁ2ç_¸óã
(
√tif
 *
µpif
, √ti‡*√tif, 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
,

120 c⁄° 
u8_t
 *
£¸ë
, u8_à
£¸ë_Àn
,

121 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

123 
îr_t
 
µ∑pi_c⁄√˘
(
µp_pcb
 *
pcb
, 
u16_t
 
hﬁdoff
);

124 #i‡
PPP_SERVER


125 
îr_t
 
µ∑pi_li°í
(
µp_pcb
 *
pcb
);

127 
îr_t
 
µ∑pi_˛o£
(
µp_pcb
 *
pcb
, 
u8_t
 
noˇºõr
);

128 
îr_t
 
µ∑pi_‰ì
(
µp_pcb
 *
pcb
);

129 
îr_t
 
µ∑pi_io˘l
(
µp_pcb
 *
pcb
, 
u8_t
 
cmd
, *
¨g
);

131 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/netif/ppp/pppcrypt.h

33 
	~"√tif/µp/µp_›ts.h
"

34 #i‡
PPP_SUPPORT


38 #i‚de‡
PPPCRYPT_H


39 
	#PPPCRYPT_H


	)

45 
	~"lwù/¨ch.h
"

50 #i‡!
LWIP_USE_EXTERNAL_MBEDTLS


52 
	~"√tif/µp/pﬁ¨s¶/md4.h
"

53 
	#lwù_md4_c⁄ãxt
 
md4_c⁄ãxt


	)

54 
	#lwù_md4_öô
(
c⁄ãxt
)

	)

55 
	#lwù_md4_°¨ts
 
md4_°¨ts


	)

56 
	#lwù_md4_upd©e
 
md4_upd©e


	)

57 
	#lwù_md4_föish
 
md4_föish


	)

58 
	#lwù_md4_‰ì
(
c⁄ãxt
)

	)

60 
	~"√tif/µp/pﬁ¨s¶/md5.h
"

61 
	#lwù_md5_c⁄ãxt
 
md5_c⁄ãxt


	)

62 
	#lwù_md5_öô
(
c⁄ãxt
)

	)

63 
	#lwù_md5_°¨ts
 
md5_°¨ts


	)

64 
	#lwù_md5_upd©e
 
md5_upd©e


	)

65 
	#lwù_md5_föish
 
md5_föish


	)

66 
	#lwù_md5_‰ì
(
c⁄ãxt
)

	)

68 
	~"√tif/µp/pﬁ¨s¶/sha1.h
"

69 
	#lwù_sha1_c⁄ãxt
 
sha1_c⁄ãxt


	)

70 
	#lwù_sha1_öô
(
c⁄ãxt
)

	)

71 
	#lwù_sha1_°¨ts
 
sha1_°¨ts


	)

72 
	#lwù_sha1_upd©e
 
sha1_upd©e


	)

73 
	#lwù_sha1_föish
 
sha1_föish


	)

74 
	#lwù_sha1_‰ì
(
c⁄ãxt
)

	)

76 
	~"√tif/µp/pﬁ¨s¶/des.h
"

77 
	#lwù_des_c⁄ãxt
 
des_c⁄ãxt


	)

78 
	#lwù_des_öô
(
c⁄ãxt
)

	)

79 
	#lwù_des_£tkey_íc
 
des_£tkey_íc


	)

80 
	#lwù_des_¸y±_ecb
 
des_¸y±_ecb


	)

81 
	#lwù_des_‰ì
(
c⁄ãxt
)

	)

83 
	~"√tif/µp/pﬁ¨s¶/¨c4.h
"

84 
	#lwù_¨c4_c⁄ãxt
 
¨c4_c⁄ãxt


	)

85 
	#lwù_¨c4_öô
(
c⁄ãxt
)

	)

86 
	#lwù_¨c4_£tup
 
¨c4_£tup


	)

87 
	#lwù_¨c4_¸y±
 
¨c4_¸y±


	)

88 
	#lwù_¨c4_‰ì
(
c⁄ãxt
)

	)

95 #i‡
LWIP_USE_EXTERNAL_MBEDTLS


97 
	#lwù_md4_c⁄ãxt
 
mbedés_md4_c⁄ãxt


	)

98 
	#lwù_md4_öô
 
mbedés_md4_öô


	)

99 
	#lwù_md4_°¨ts
 
mbedés_md4_°¨ts


	)

100 
	#lwù_md4_upd©e
 
mbedés_md4_upd©e


	)

101 
	#lwù_md4_föish
 
mbedés_md4_föish


	)

102 
	#lwù_md4_‰ì
 
mbedés_md4_‰ì


	)

104 
	#lwù_md5_c⁄ãxt
 
mbedés_md5_c⁄ãxt


	)

105 
	#lwù_md5_öô
 
mbedés_md5_öô


	)

106 
	#lwù_md5_°¨ts
 
mbedés_md5_°¨ts


	)

107 
	#lwù_md5_upd©e
 
mbedés_md5_upd©e


	)

108 
	#lwù_md5_föish
 
mbedés_md5_föish


	)

109 
	#lwù_md5_‰ì
 
mbedés_md5_‰ì


	)

111 
	#lwù_sha1_c⁄ãxt
 
mbedés_sha1_c⁄ãxt


	)

112 
	#lwù_sha1_öô
 
mbedés_sha1_öô


	)

113 
	#lwù_sha1_°¨ts
 
mbedés_sha1_°¨ts


	)

114 
	#lwù_sha1_upd©e
 
mbedés_sha1_upd©e


	)

115 
	#lwù_sha1_föish
 
mbedés_sha1_föish


	)

116 
	#lwù_sha1_‰ì
 
mbedés_sha1_‰ì


	)

118 
	#lwù_des_c⁄ãxt
 
mbedés_des_c⁄ãxt


	)

119 
	#lwù_des_öô
 
mbedés_des_öô


	)

120 
	#lwù_des_£tkey_íc
 
mbedés_des_£tkey_íc


	)

121 
	#lwù_des_¸y±_ecb
 
mbedés_des_¸y±_ecb


	)

122 
	#lwù_des_‰ì
 
mbedés_des_‰ì


	)

124 
	#lwù_¨c4_c⁄ãxt
 
mbedés_¨c4_c⁄ãxt


	)

125 
	#lwù_¨c4_öô
 
mbedés_¨c4_öô


	)

126 
	#lwù_¨c4_£tup
 
mbedés_¨c4_£tup


	)

127 
	#lwù_¨c4_¸y±
(
c⁄ãxt
, 
buf„r
, 
Àngth
Ë
	`mbedés_¨c4_¸y±
(c⁄ãxt,Üígth, buf„r, buf„r)

	)

128 
	#lwù_¨c4_‰ì
 
mbedés_¨c4_‰ì


	)

132 
µp¸y±_56_to_64_bô_key
(
u_ch¨
 *
key
, u_ch¨ *
des_key
);

	@include_lib/net/lwip/src/include/netif/ppp/pppdebug.h

37 
	~"√tif/µp/µp_›ts.h
"

38 #i‡
PPP_SUPPORT


40 #i‚de‡
PPPDEBUG_H


41 
	#PPPDEBUG_H


	)

44 
	#LOG_CRITICAL
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

45 
	#LOG_ERR
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

46 
	#LOG_NOTICE
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

47 
	#LOG_WARNING
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

48 
	#LOG_INFO
 (
PPP_DEBUG
)

	)

49 
	#LOG_DETAIL
 (
PPP_DEBUG
)

	)

50 
	#LOG_DEBUG
 (
PPP_DEBUG
)

	)

52 #i‡
PPP_DEBUG


54 
	#MAINDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

55 
	#SYSDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

56 
	#FSMDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

57 
	#LCPDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

58 
	#IPCPDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

59 
	#IPV6CPDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

60 
	#UPAPDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

61 
	#CHAPDEBUG
(
a
Ë
	`LWIP_DEBUGF
(
LWIP_DBG_LEVEL_WARNING
,á)

	)

62 
	#PPPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

66 
	#MAINDEBUG
(
a
)

	)

67 
	#SYSDEBUG
(
a
)

	)

68 
	#FSMDEBUG
(
a
)

	)

69 
	#LCPDEBUG
(
a
)

	)

70 
	#IPCPDEBUG
(
a
)

	)

71 
	#IPV6CPDEBUG
(
a
)

	)

72 
	#UPAPDEBUG
(
a
)

	)

73 
	#CHAPDEBUG
(
a
)

	)

74 
	#PPPDEBUG
(
a
, 
b
)

	)

	@include_lib/net/lwip/src/include/netif/ppp/pppoe.h

70 
	~"√tif/µp/µp_›ts.h
"

71 #i‡
PPP_SUPPORT
 && 
PPPOE_SUPPORT


73 #i‚de‡
PPP_OE_H


74 
	#PPP_OE_H


	)

76 
	~"µp.h
"

77 
	~"lwù/ëh¨p.h
"

79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/bp°ru˘.h
"

82 
PACK_STRUCT_BEGIN


83 
	sµp€hdr
 {

84 
PACK_STRUCT_FLD_8
(
u8_t
 
vîty≥
);

85 
PACK_STRUCT_FLD_8
(
u8_t
 
code
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

88 } 
	gPACK_STRUCT_STRUCT
;

89 
	gPACK_STRUCT_END


90 #ifde‡
PACK_STRUCT_USE_INCLUDES


91 
	~"¨ch/ï°ru˘.h
"

94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/bp°ru˘.h
"

97 
PACK_STRUCT_BEGIN


98 
	sµp€èg
 {

99 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

100 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

101 } 
	gPACK_STRUCT_STRUCT
;

102 
	gPACK_STRUCT_END


103 #ifde‡
PACK_STRUCT_USE_INCLUDES


104 
	~"¨ch/ï°ru˘.h
"

108 
	#PPPOE_STATE_INITIAL
 0

	)

109 
	#PPPOE_STATE_PADI_SENT
 1

	)

110 
	#PPPOE_STATE_PADR_SENT
 2

	)

111 
	#PPPOE_STATE_SESSION
 3

	)

113 
	#PPPOE_STATE_PADO_SENT
 1

	)

115 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

116 
	#PPPOE_VERTYPE
 0x11

	)

118 
	#PPPOE_TAG_EOL
 0x0000

	)

119 
	#PPPOE_TAG_SNAME
 0x0101

	)

120 
	#PPPOE_TAG_ACNAME
 0x0102

	)

121 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

122 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

123 
	#PPPOE_TAG_VENDOR
 0x0105

	)

124 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

125 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

126 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

127 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

129 
	#PPPOE_CODE_PADI
 0x09

	)

130 
	#PPPOE_CODE_PADO
 0x07

	)

131 
	#PPPOE_CODE_PADR
 0x19

	)

132 
	#PPPOE_CODE_PADS
 0x65

	)

133 
	#PPPOE_CODE_PADT
 0xA7

	)

135 #i‚de‡
PPPOE_MAX_AC_COOKIE_LEN


136 
	#PPPOE_MAX_AC_COOKIE_LEN
 64

	)

139 
	sµp€_so·c
 {

140 
µp€_so·c
 *
	m√xt
;

141 
√tif
 *
	msc_ëhif
;

142 
µp_pcb
 *
	mpcb
;

144 
ëh_addr
 
	msc_de°
;

145 
u16_t
 
	msc_£ssi⁄
;

146 
u8_t
 
	msc_°©e
;

148 #ifde‡
PPPOE_TODO


149 
u8_t
 *
	msc_£rvi˚_«me
;

150 
u8_t
 *
	msc_c⁄˚¡øt‹_«me
;

152 
u8_t
 
	msc_ac_cookõ
[
PPPOE_MAX_AC_COOKIE_LEN
];

153 
u8_t
 
	msc_ac_cookõ_Àn
;

154 #ifde‡
PPPOE_SERVER


155 
u8_t
 *
	msc_hunique
;

156 
u8_t
 
	msc_hunique_Àn
;

158 
u8_t
 
	msc_∑di_ªåõd
;

159 
u8_t
 
	msc_∑dr_ªåõd
;

163 
	#µp€_öô
(Ë

	)

165 
µp_pcb
 *
µp€_¸óã
(
√tif
 *
µpif
,

166 
√tif
 *
ëhif
,

167 c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
,

168 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

174 
µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

175 
µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

	@include_lib/net/lwip/src/include/netif/ppp/pppol2tp.h

34 
	~"√tif/µp/µp_›ts.h
"

35 #i‡
PPP_SUPPORT
 && 
PPPOL2TP_SUPPORT


37 #i‚de‡
PPPOL2TP_H


38 
	#PPPOL2TP_H


	)

40 
	~"µp.h
"

43 
	#PPPOL2TP_CONTROL_TIMEOUT
 (5*1000Ë

	)

44 
	#PPPOL2TP_SLOW_RETRY
 (60*1000Ë

	)

46 
	#PPPOL2TP_MAXSCCRQ
 4

	)

47 
	#PPPOL2TP_MAXICRQ
 4

	)

48 
	#PPPOL2TP_MAXICCN
 4

	)

51 
	#PPPOL2TP_HEADERFLAG_CONTROL
 0x8000

	)

52 
	#PPPOL2TP_HEADERFLAG_LENGTH
 0x4000

	)

53 
	#PPPOL2TP_HEADERFLAG_SEQUENCE
 0x0800

	)

54 
	#PPPOL2TP_HEADERFLAG_OFFSET
 0x0200

	)

55 
	#PPPOL2TP_HEADERFLAG_PRIORITY
 0x0100

	)

56 
	#PPPOL2TP_HEADERFLAG_VERSION
 0x0002

	)

59 
	#PPPOL2TP_HEADERFLAG_CONTROL_MANDATORY
 (
PPPOL2TP_HEADERFLAG_CONTROL
|
PPPOL2TP_HEADERFLAG_LENGTH
|
PPPOL2TP_HEADERFLAG_SEQUENCE
|
PPPOL2TP_HEADERFLAG_VERSION
)

	)

61 
	#PPPOL2TP_HEADERFLAG_CONTROL_FORBIDDEN
 (
PPPOL2TP_HEADERFLAG_OFFSET
|
PPPOL2TP_HEADERFLAG_PRIORITY
)

	)

64 
	#PPPOL2TP_HEADERFLAG_DATA_MANDATORY
 (
PPPOL2TP_HEADERFLAG_VERSION
)

	)

67 
	#PPPOL2TP_AVPHEADERFLAG_MANDATORY
 0x8000

	)

68 
	#PPPOL2TP_AVPHEADERFLAG_HIDDEN
 0x4000

	)

69 
	#PPPOL2TP_AVPHEADERFLAG_LENGTHMASK
 0x03ff

	)

72 
	#PPPOL2TP_AVPTYPE_MESSAGE
 0

	)

75 
	#PPPOL2TP_MESSAGETYPE_SCCRQ
 1

	)

76 
	#PPPOL2TP_MESSAGETYPE_SCCRP
 2

	)

77 
	#PPPOL2TP_MESSAGETYPE_SCCCN
 3

	)

78 
	#PPPOL2TP_MESSAGETYPE_STOPCCN
 4

	)

79 
	#PPPOL2TP_MESSAGETYPE_HELLO
 6

	)

81 
	#PPPOL2TP_MESSAGETYPE_OCRQ
 7

	)

82 
	#PPPOL2TP_MESSAGETYPE_OCRP
 8

	)

83 
	#PPPOL2TP_MESSAGETYPE_OCCN
 9

	)

84 
	#PPPOL2TP_MESSAGETYPE_ICRQ
 10

	)

85 
	#PPPOL2TP_MESSAGETYPE_ICRP
 11

	)

86 
	#PPPOL2TP_MESSAGETYPE_ICCN
 12

	)

87 
	#PPPOL2TP_MESSAGETYPE_CDN
 14

	)

89 
	#PPPOL2TP_MESSAGETYPE_WEN
 15

	)

91 
	#PPPOL2TP_MESSAGETYPE_SLI
 16

	)

94 
	#PPPOL2TP_AVPTYPE_RESULTCODE
 1

	)

95 
	#PPPOL2TP_RESULTCODE
 1

	)

98 
	#PPPOL2TP_AVPTYPE_VERSION
 2

	)

99 
	#PPPOL2TP_VERSION
 0x0100

	)

102 
	#PPPOL2TP_AVPTYPE_FRAMINGCAPABILITIES
 3

	)

103 
	#PPPOL2TP_FRAMINGCAPABILITIES
 0x00000003

	)

106 
	#PPPOL2TP_AVPTYPE_BEARERCAPABILITIES
 4

	)

107 
	#PPPOL2TP_BEARERCAPABILITIES
 0x00000003

	)

110 
	#PPPOL2TP_AVPTYPE_TIEBREAKER
 5

	)

113 
	#PPPOL2TP_AVPTYPE_HOSTNAME
 7

	)

114 
	#PPPOL2TP_HOSTNAME
 "lwIP"

	)

117 
	#PPPOL2TP_AVPTYPE_VENDORNAME
 8

	)

118 
	#PPPOL2TP_VENDORNAME
 "lwIP"

	)

121 
	#PPPOL2TP_AVPTYPE_TUNNELID
 9

	)

124 
	#PPPOL2TP_AVPTYPE_RECEIVEWINDOWSIZE
 10

	)

125 
	#PPPOL2TP_RECEIVEWINDOWSIZE
 8

	)

128 
	#PPPOL2TP_AVPTYPE_CHALLENGE
 11

	)

131 
	#PPPOL2TP_AVPTYPE_CAUSECODE
 12

	)

134 
	#PPPOL2TP_AVPTYPE_CHALLENGERESPONSE
 13

	)

135 
	#PPPOL2TP_AVPTYPE_CHALLENGERESPONSE_SIZE
 16

	)

138 
	#PPPOL2TP_AVPTYPE_SESSIONID
 14

	)

141 
	#PPPOL2TP_AVPTYPE_CALLSERIALNUMBER
 15

	)

144 
	#PPPOL2TP_AVPTYPE_FRAMINGTYPE
 19

	)

145 
	#PPPOL2TP_FRAMINGTYPE
 0x00000001

	)

148 
	#PPPOL2TP_AVPTYPE_TXCONNECTSPEED
 24

	)

149 
	#PPPOL2TP_TXCONNECTSPEED
 100000000

	)

152 
	#PPPOL2TP_STATE_INITIAL
 0

	)

153 
	#PPPOL2TP_STATE_SCCRQ_SENT
 1

	)

154 
	#PPPOL2TP_STATE_ICRQ_SENT
 2

	)

155 
	#PPPOL2TP_STATE_ICCN_SENT
 3

	)

156 
	#PPPOL2TP_STATE_DATA
 4

	)

158 
	#PPPOL2TP_OUTPUT_DATA_HEADER_LEN
 6

	)

163 
µpﬁ2ç_pcb_s
 
	tµpﬁ2ç_pcb
;

164 
	sµpﬁ2ç_pcb_s
 {

165 
µp_pcb
 *
	mµp
;

166 
u8_t
 
	mpha£
;

167 
udp_pcb
 *
	mudp
;

168 
√tif
 *
	m√tif
;

169 
ù_addr_t
 
	mªmŸe_ù
;

170 
u16_t
 
	mªmŸe_p‹t
;

171 #i‡
PPPOL2TP_AUTH_SUPPORT


172 c⁄° 
u8_t
 *
	m£¸ë
;

173 
u8_t
 
	m£¸ë_Àn
;

174 
u8_t
 
	m£¸ë_rv
[16];

175 
u8_t
 
	mchÆÀnge_hash
[16];

176 
u8_t
 
	m£nd_chÆÀnge
;

179 
u16_t
 
	mtu¬ñ_p‹t
;

180 
u16_t
 
	mour_ns
;

181 
u16_t
 
	m≥î_ƒ
;

182 
u16_t
 
	m≥î_ns
;

183 
u16_t
 
	msour˚_tu¬ñ_id
;

184 
u16_t
 
	mªmŸe_tu¬ñ_id
;

185 
u16_t
 
	msour˚_£ssi⁄_id
;

186 
u16_t
 
	mªmŸe_£ssi⁄_id
;

188 
u8_t
 
	msc¸q_ªåõd
;

189 
u8_t
 
	mi¸q_ªåõd
;

190 
u8_t
 
	mic˙_ªåõd
;

195 
µp_pcb
 *
µpﬁ2ç_¸óã
(
√tif
 *
µpif
,

196 
√tif
 *√tif, c⁄° 
ù_addr_t
 *
ùaddr
, 
u16_t
 
p‹t
,

197 c⁄° 
u8_t
 *
£¸ë
, u8_à
£¸ë_Àn
,

198 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

	@include_lib/net/lwip/src/include/netif/ppp/pppos.h

34 
	~"√tif/µp/µp_›ts.h
"

35 #i‡
PPP_SUPPORT
 && 
PPPOS_SUPPORT


37 #i‚de‡
PPPOS_H


38 
	#PPPOS_H


	)

40 
	~"lwù/sys.h
"

42 
	~"µp.h
"

43 
	~"vj.h
"

48 
	mPDIDLE
 = 0,

49 
	mPDSTART
,

50 
	mPDADDRESS
,

51 
	mPDCONTROL
,

52 
	mPDPROTOCOL1
,

53 
	mPDPROTOCOL2
,

54 
	mPDDATA


58 
	$u32_t
 (*
	tµpos_ouçut_cb_‚
)(
	tµp_pcb
 *
	tpcb
, 
	tu8_t
 *
	td©a
, 
	tu32_t
 
	tÀn
, *
	t˘x
);

63 
u8_t
 
	text_accm
[32];

68 
µpos_pcb_s
 
	tµpos_pcb
;

69 
	sµpos_pcb_s
 {

71 
µp_pcb
 *
µp
;

72 
µpos_ouçut_cb_‚
 
ouçut_cb
;

79 
u32_t
 
œ°_xmô
;

80 
ext_accm
 
out_accm
;

83 
›í
 : 1;

84 
pcomp
 : 1;

85 
accomp
 : 1;

88 
ext_accm
 
ö_accm
;

89 
pbuf
 *
ö_hód
, *
ö_èû
;

90 
u16_t
 
ö_¥Ÿocﬁ
;

91 
u16_t
 
ö_fcs
;

92 
u8_t
 
ö_°©e
;

93 
u8_t
 
ö_esˇ≥d
;

97 
µp_pcb
 *
	`µpos_¸óã
(
√tif
 *
µpif
, 
µpos_ouçut_cb_‚
 
ouçut_cb
,

98 
µp_lök_°©us_cb_‚
 
lök_°©us_cb
, *
˘x_cb
);

100 #i‡!
NO_SYS
 && !
PPP_INPROC_IRQ_SAFE


102 
îr_t
 
	`µpos_öput_t˝ù
(
µp_pcb
 *
µp
, 
u8_t
 *
s
, 
l
);

106 
	`µpos_öput
(
µp_pcb
 *
µp
, 
u8_t
 *
d©a
, 
Àn
);

113 #i‡!
NO_SYS
 && !
PPP_INPROC_IRQ_SAFE


114 
îr_t
 
	`µpos_öput_sys
(
pbuf
 *
p
, 
√tif
 *
öp
);

	@include_lib/net/lwip/src/include/netif/ppp/upap.h

45 
	~"√tif/µp/µp_›ts.h
"

46 #i‡
PPP_SUPPORT
 && 
PAP_SUPPORT


48 #i‚de‡
UPAP_H


49 
	#UPAP_H


	)

51 
	~"µp.h
"

56 
	#UPAP_HEADERLEN
 4

	)

62 
	#UPAP_AUTHREQ
 1

	)

63 
	#UPAP_AUTHACK
 2

	)

64 
	#UPAP_AUTHNAK
 3

	)

70 
	#UPAPCS_INITIAL
 0

	)

71 
	#UPAPCS_CLOSED
 1

	)

72 
	#UPAPCS_PENDING
 2

	)

73 
	#UPAPCS_AUTHREQ
 3

	)

74 
	#UPAPCS_OPEN
 4

	)

75 
	#UPAPCS_BADAUTH
 5

	)

80 
	#UPAPSS_INITIAL
 0

	)

81 
	#UPAPSS_CLOSED
 1

	)

82 
	#UPAPSS_PENDING
 2

	)

83 
	#UPAPSS_LISTEN
 3

	)

84 
	#UPAPSS_OPEN
 4

	)

85 
	#UPAPSS_BADAUTH
 5

	)

92 
	#UPAP_DEFTIMEOUT
 3

	)

93 
	#UPAP_DEFREQTIME
 30

	)

99 #i‡
PAP_SUPPORT


100 
	su∑p_°©e
 {

101 c⁄° *
	mus_u£r
;

102 
u8_t
 
	mus_u£æí
;

103 c⁄° *
	mus_∑sswd
;

104 
u8_t
 
	mus_∑sswdÀn
;

105 
u8_t
 
	mus_˛õ¡°©e
;

106 #i‡
PPP_SERVER


107 
u8_t
 
	mus_£rvî°©e
;

109 
u8_t
 
	mus_id
;

110 
u8_t
 
	mus_å™smôs
;

111 } 
	tu∑p_°©e
;

115 
u∑p_authwôh≥î
(
µp_pcb
 *
pcb
, c⁄° *
u£r
, c⁄° *
∑ssw‹d
);

116 #i‡
PPP_SERVER


117 
u∑p_auth≥î
(
µp_pcb
 *
pcb
);

120 c⁄° 
¥Ÿít
 
∑p_¥Ÿít
;

	@include_lib/net/lwip/src/include/netif/ppp/vj.h

25 
	~"√tif/µp/µp_›ts.h
"

26 #i‡
PPP_SUPPORT
 && 
VJ_SUPPORT


28 #i‚de‡
VJ_H


29 
	#VJ_H


	)

31 
	~"lwù/ù.h
"

32 
	~"lwù/¥iv/t˝_¥iv.h
"

34 
	#MAX_SLOTS
 16

	)

35 
	#MAX_HDR
 128

	)

81 
	#TYPE_IP
 0x40

	)

82 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

83 
	#TYPE_COMPRESSED_TCP
 0x80

	)

84 
	#TYPE_ERROR
 0x00

	)

87 
	#NEW_C
 0x40

	)

88 
	#NEW_I
 0x20

	)

89 
	#NEW_S
 0x08

	)

90 
	#NEW_A
 0x04

	)

91 
	#NEW_W
 0x02

	)

92 
	#NEW_U
 0x01

	)

95 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

96 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

97 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

99 
	#TCP_PUSH_BIT
 0x10

	)

108 
	sc°©e
 {

109 
c°©e
 *
	mcs_√xt
;

110 
u16_t
 
	mcs_hÀn
;

111 
u8_t
 
	mcs_id
;

112 
u8_t
 
	mcs_fûÀr
;

114 
	mcsu_hdr
[
MAX_HDR
];

115 
ù_hdr
 
	mcsu_ù
;

116 } 
	mvjcs_u
;

118 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

119 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

122 
	svj°©
 {

123 
u32_t
 
	mvjs_∑ckës
;

124 
u32_t
 
	mvjs_com¥es£d
;

125 
u32_t
 
	mvjs_£¨ches
;

126 
u32_t
 
	mvjs_mis£s
;

127 
u32_t
 
	mvjs_uncom¥es£dö
;

128 
u32_t
 
	mvjs_com¥es£dö
;

129 
u32_t
 
	mvjs_îr‹ö
;

130 
u32_t
 
	mvjs_tos£d
;

136 
	svjcom¥ess
 {

137 
c°©e
 *
	mœ°_cs
;

138 
u8_t
 
	mœ°_ªcv
;

139 
u8_t
 
	mœ°_xmô
;

140 
u16_t
 
	mÊags
;

141 
u8_t
 
	mmaxSlŸIndex
;

142 
u8_t
 
	mcom¥essSlŸ
;

143 #i‡
LINK_STATS


144 
vj°©
 
	m°©s
;

146 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

147 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

151 
	#VJF_TOSS
 1U

	)

153 
vj_com¥ess_öô
(
vjcom¥ess
 *
comp
);

154 
u8_t
 
vj_com¥ess_t˝
(
vjcom¥ess
 *
comp
, 
pbuf
 **
pb
);

155 
vj_uncom¥ess_îr
(
vjcom¥ess
 *
comp
);

156 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

157 
vj_uncom¥ess_t˝
(
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@include_lib/net/lwip/src/include/netif/slipif.h

40 #i‚de‡
LWIP_HDR_NETIF_SLIPIF_H


41 
	#LWIP_HDR_NETIF_SLIPIF_H


	)

43 
	~"lwù/›t.h
"

44 
	~"lwù/√tif.h
"

49 #i‚de‡
SLIP_USE_RX_THREAD


50 
	#SLIP_USE_RX_THREAD
 !
NO_SYS


	)

58 #i‚de‡
SLIP_RX_FROM_ISR


59 
	#SLIP_RX_FROM_ISR
 0

	)

66 #i‚de‡
SLIP_RX_QUEUE


67 
	#SLIP_RX_QUEUE
 
SLIP_RX_FROM_ISR


	)

70 #ifde‡
__˝lu•lus


74 
îr_t
 
¶ùif_öô
(
√tif
 *netif);

75 
¶ùif_pﬁl
(
√tif
 *netif);

76 #i‡
SLIP_RX_FROM_ISR


77 
¶ùif_¥o˚ss_rxqueue
(
√tif
 *netif);

78 
¶ùif_ª˚ived_byã
(
√tif
 *√tif, 
u8_t
 
d©a
);

79 
¶ùif_ª˚ived_byãs
(
√tif
 *√tif, 
u8_t
 *
d©a
, u8_à
Àn
);

82 #ifde‡
__˝lu•lus


	@include_lib/net/lwip/src/include/posix/errno.h

33 
	~"lwù/_î∫o.h
"

	@include_lib/net/lwip/src/include/posix/netdb.h

33 
	~"lwù/√tdb.h
"

	@include_lib/net/lwip/src/include/posix/sys/socket.h

33 
	~"lwù/sockës.h
"

	@include_lib/net/mbedtls/aes.h

23 #i‚de‡
MBEDTLS_AES_H


24 
	#MBEDTLS_AES_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

36 
	#MBEDTLS_AES_ENCRYPT
 1

	)

37 
	#MBEDTLS_AES_DECRYPT
 0

	)

39 
	#MBEDTLS_ERR_AES_INVALID_KEY_LENGTH
 -0x0020

	)

40 
	#MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH
 -0x0022

	)

42 #i‡!
deföed
(
MBEDTLS_AES_ALT
)

46 #ifde‡
__˝lu•lus


59 
ƒ
;

60 
uöt32_t
 *
rk
;

61 
uöt32_t
 
buf
[68];

63 #ifde‡
MBEDTLS_AES_SETKEY_ENC_ALT


64 
´s_íc_key
[32];

66 #ifde‡
MBEDTLS_AES_SETKEY_DEC_ALT


67 
´s_dec_key
[32];

71 
	tmbedés_´s_c⁄ãxt
;

78 
mbedés_´s_öô
(
mbedés_´s_c⁄ãxt
 *
˘x
);

85 
mbedés_´s_‰ì
(
mbedés_´s_c⁄ãxt
 *
˘x
);

96 
mbedés_´s_£tkey_íc
(
mbedés_´s_c⁄ãxt
 *
˘x
, c⁄° *
key
,

97 
keybôs
);

108 
mbedés_´s_£tkey_dec
(
mbedés_´s_c⁄ãxt
 *
˘x
, c⁄° *
key
,

109 
keybôs
);

121 
mbedés_´s_¸y±_ecb
(
mbedés_´s_c⁄ãxt
 *
˘x
,

122 
mode
,

123 c⁄° 
öput
[16],

124 
ouçut
[16]);

126 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

149 
mbedés_´s_¸y±_cbc
(
mbedés_´s_c⁄ãxt
 *
˘x
,

150 
mode
,

151 
size_t
 
Àngth
,

152 
iv
[16],

153 c⁄° *
öput
,

154 *
ouçut
);

157 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CFB
)

183 
mbedés_´s_¸y±_cfb128
(
mbedés_´s_c⁄ãxt
 *
˘x
,

184 
mode
,

185 
size_t
 
Àngth
,

186 
size_t
 *
iv_off
,

187 
iv
[16],

188 c⁄° *
öput
,

189 *
ouçut
);

215 
mbedés_´s_¸y±_cfb8
(
mbedés_´s_c⁄ãxt
 *
˘x
,

216 
mode
,

217 
size_t
 
Àngth
,

218 
iv
[16],

219 c⁄° *
öput
,

220 *
ouçut
);

223 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CTR
)

246 
mbedés_´s_¸y±_˘r
(
mbedés_´s_c⁄ãxt
 *
˘x
,

247 
size_t
 
Àngth
,

248 
size_t
 *
nc_off
,

249 
n⁄˚_cou¡î
[16],

250 
°ªam_block
[16],

251 c⁄° *
öput
,

252 *
ouçut
);

264 
mbedés_´s_í¸y±
(
mbedés_´s_c⁄ãxt
 *
˘x
,

265 c⁄° 
öput
[16],

266 
ouçut
[16]);

277 
mbedés_´s_de¸y±
(
mbedés_´s_c⁄ãxt
 *
˘x
,

278 c⁄° 
öput
[16],

279 
ouçut
[16]);

281 #ifde‡
__˝lu•lus


286 
	~"´s_Æt.h
"

289 #ifde‡
__˝lu•lus


298 
mbedés_´s_£lf_ã°
(
vîbo£
);

300 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/aesni.h

23 #i‚de‡
MBEDTLS_AESNI_H


24 
	#MBEDTLS_AESNI_H


	)

26 
	~"´s.h
"

28 
	#MBEDTLS_AESNI_AES
 0x02000000u

	)

29 
	#MBEDTLS_AESNI_CLMUL
 0x00000002u

	)

31 #i‡
deföed
(
MBEDTLS_HAVE_ASM
Ë&& deföed(
__GNUC__
) && \

32 –
deföed
(
__amd64__
Ë|| deföed(
__x86_64__
) ) && \

33 ! 
	$deföed
(
MBEDTLS_HAVE_X86_64
)

34 
	#MBEDTLS_HAVE_X86_64


	)

37 #i‡
	`deföed
(
MBEDTLS_HAVE_X86_64
)

39 #ifde‡
__˝lu•lus


51 
	`mbedés_´¢i_has_suµ‹t
(
wh©
);

63 
	`mbedés_´¢i_¸y±_ecb
(
mbedés_´s_c⁄ãxt
 *
˘x
,

64 
mode
,

65 c⁄° 
öput
[16],

66 
ouçut
[16]);

78 
	`mbedés_´¢i_gcm_mu…
(
c
[16],

79 c⁄° 
a
[16],

80 c⁄° 
b
[16]);

89 
	`mbedés_´¢i_övî£_key
(*
övkey
,

90 c⁄° *
fwdkey
, 
ƒ
);

101 
	`mbedés_´¢i_£tkey_íc
(*
rk
,

102 c⁄° *
key
,

103 
size_t
 
bôs
);

105 #ifde‡
__˝lu•lus


106 
	}
}

	@include_lib/net/mbedtls/arc4.h

23 #i‚de‡
MBEDTLS_ARC4_H


24 
	#MBEDTLS_ARC4_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

34 #i‡!
deföed
(
MBEDTLS_ARC4_ALT
)

38 #ifde‡
__˝lu•lus


46 
x
;

47 
y
;

48 
m
[256];

50 
	tmbedés_¨c4_c⁄ãxt
;

57 
mbedés_¨c4_öô
(
mbedés_¨c4_c⁄ãxt
 *
˘x
);

64 
mbedés_¨c4_‰ì
(
mbedés_¨c4_c⁄ãxt
 *
˘x
);

73 
mbedés_¨c4_£tup
(
mbedés_¨c4_c⁄ãxt
 *
˘x
, c⁄° *
key
,

74 
keyÀn
);

86 
mbedés_¨c4_¸y±
(
mbedés_¨c4_c⁄ãxt
 *
˘x
, 
size_t
 
Àngth
, c⁄° *
öput
,

87 *
ouçut
);

89 #ifde‡
__˝lu•lus


94 
	~"¨c4_Æt.h
"

97 #ifde‡
__˝lu•lus


106 
mbedés_¨c4_£lf_ã°
(
vîbo£
);

108 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/asn1.h

23 #i‚de‡
MBEDTLS_ASN1_H


24 
	#MBEDTLS_ASN1_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

34 #i‡
deföed
(
MBEDTLS_BIGNUM_C
)

35 
	~"bignum.h
"

50 
	#MBEDTLS_ERR_ASN1_OUT_OF_DATA
 -0x0060

	)

51 
	#MBEDTLS_ERR_ASN1_UNEXPECTED_TAG
 -0x0062

	)

52 
	#MBEDTLS_ERR_ASN1_INVALID_LENGTH
 -0x0064

	)

53 
	#MBEDTLS_ERR_ASN1_LENGTH_MISMATCH
 -0x0066

	)

54 
	#MBEDTLS_ERR_ASN1_INVALID_DATA
 -0x0068

	)

55 
	#MBEDTLS_ERR_ASN1_ALLOC_FAILED
 -0x006A

	)

56 
	#MBEDTLS_ERR_ASN1_BUF_TOO_SMALL
 -0x006C

	)

71 
	#MBEDTLS_ASN1_BOOLEAN
 0x01

	)

72 
	#MBEDTLS_ASN1_INTEGER
 0x02

	)

73 
	#MBEDTLS_ASN1_BIT_STRING
 0x03

	)

74 
	#MBEDTLS_ASN1_OCTET_STRING
 0x04

	)

75 
	#MBEDTLS_ASN1_NULL
 0x05

	)

76 
	#MBEDTLS_ASN1_OID
 0x06

	)

77 
	#MBEDTLS_ASN1_UTF8_STRING
 0x0C

	)

78 
	#MBEDTLS_ASN1_SEQUENCE
 0x10

	)

79 
	#MBEDTLS_ASN1_SET
 0x11

	)

80 
	#MBEDTLS_ASN1_PRINTABLE_STRING
 0x13

	)

81 
	#MBEDTLS_ASN1_T61_STRING
 0x14

	)

82 
	#MBEDTLS_ASN1_IA5_STRING
 0x16

	)

83 
	#MBEDTLS_ASN1_UTC_TIME
 0x17

	)

84 
	#MBEDTLS_ASN1_GENERALIZED_TIME
 0x18

	)

85 
	#MBEDTLS_ASN1_UNIVERSAL_STRING
 0x1C

	)

86 
	#MBEDTLS_ASN1_BMP_STRING
 0x1E

	)

87 
	#MBEDTLS_ASN1_PRIMITIVE
 0x00

	)

88 
	#MBEDTLS_ASN1_CONSTRUCTED
 0x20

	)

89 
	#MBEDTLS_ASN1_CONTEXT_SPECIFIC
 0x80

	)

94 
	#MBEDTLS_OID_SIZE
(
x
Ë((xË- 1)

	)

102 
	#MBEDTLS_OID_CMP
(
oid_°r
, 
oid_buf
) \

103 ––
	`MBEDTLS_OID_SIZE
(
oid_°r
Ë!(
oid_buf
)->
Àn
 ) || \

104 
	`memcmp
–(
oid_°r
), (
oid_buf
)->
p
, (oid_buf)->
Àn
Ë!0 )

	)

106 #ifde‡
__˝lu•lus


118 
	smbedés_a¢1_buf
 {

119 
èg
;

120 
size_t
 
Àn
;

121 *
p
;

123 
	tmbedés_a¢1_buf
;

128 
	smbedés_a¢1_bô°rög
 {

129 
size_t
 
Àn
;

130 
unu£d_bôs
;

131 *
p
;

133 
	tmbedés_a¢1_bô°rög
;

138 
	smbedés_a¢1_£quí˚
 {

139 
mbedés_a¢1_buf
 
buf
;

140 
mbedés_a¢1_£quí˚
 *
√xt
;

142 
	tmbedés_a¢1_£quí˚
;

147 
	smbedés_a¢1_«med_d©a
 {

148 
mbedés_a¢1_buf
 
oid
;

149 
mbedés_a¢1_buf
 
vÆ
;

150 
mbedés_a¢1_«med_d©a
 *
√xt
;

151 
√xt_mîged
;

153 
	tmbedés_a¢1_«med_d©a
;

167 
mbedés_a¢1_gë_Àn
(**
p
,

168 c⁄° *
íd
,

169 
size_t
 *
Àn
);

183 
mbedés_a¢1_gë_èg
(**
p
,

184 c⁄° *
íd
,

185 
size_t
 *
Àn
, 
èg
);

197 
mbedés_a¢1_gë_boﬁ
(**
p
,

198 c⁄° *
íd
,

199 *
vÆ
);

211 
mbedés_a¢1_gë_öt
(**
p
,

212 c⁄° *
íd
,

213 *
vÆ
);

225 
mbedés_a¢1_gë_bô°rög
(**
p
, c⁄° *
íd
,

226 
mbedés_a¢1_bô°rög
 *
bs
);

239 
mbedés_a¢1_gë_bô°rög_nuŒ
(**
p
, c⁄° *
íd
,

240 
size_t
 *
Àn
);

253 
mbedés_a¢1_gë_£quí˚_of
(**
p
,

254 c⁄° *
íd
,

255 
mbedés_a¢1_£quí˚
 *
cur
,

256 
èg
);

258 #i‡
deföed
(
MBEDTLS_BIGNUM_C
)

269 
mbedés_a¢1_gë_mpi
(**
p
,

270 c⁄° *
íd
,

271 
mbedés_mpi
 *
X
);

286 
mbedés_a¢1_gë_Æg
(**
p
,

287 c⁄° *
íd
,

288 
mbedés_a¢1_buf
 *
Æg
, mbedés_a¢1_bu‡*
∑øms
);

302 
mbedés_a¢1_gë_Æg_nuŒ
(**
p
,

303 c⁄° *
íd
,

304 
mbedés_a¢1_buf
 *
Æg
);

316 
mbedés_a¢1_«med_d©a
 *
mbedés_a¢1_föd_«med_d©a
(mbedés_a¢1_«med_d©®*
li°
,

317 c⁄° *
oid
, 
size_t
 
Àn
);

324 
mbedés_a¢1_‰ì_«med_d©a
(
mbedés_a¢1_«med_d©a
 *
íåy
);

332 
mbedés_a¢1_‰ì_«med_d©a_li°
(
mbedés_a¢1_«med_d©a
 **
hód
);

334 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/asn1write.h

23 #i‚de‡
MBEDTLS_ASN1_WRITE_H


24 
	#MBEDTLS_ASN1_WRITE_H


	)

26 
	~"a¢1.h
"

28 
	#MBEDTLS_ASN1_CHK_ADD
(
g
, 
f
Ëdÿ{ if––
ªt
 = f ) < 0 ) (Ñet ); \

29 
g
 +
ªt
; }  0 )

	)

31 #ifde‡
__˝lu•lus


45 
mbedés_a¢1_wrôe_Àn
(**
p
, *
°¨t
, 
size_t
 
Àn
);

57 
mbedés_a¢1_wrôe_èg
(**
p
, *
°¨t
,

58 
èg
);

71 
mbedés_a¢1_wrôe_øw_buf„r
(**
p
, *
°¨t
,

72 c⁄° *
buf
, 
size_t
 
size
);

74 #i‡
deföed
(
MBEDTLS_BIGNUM_C
)

85 
mbedés_a¢1_wrôe_mpi
(**
p
, *
°¨t
, c⁄° 
mbedés_mpi
 *
X
);

97 
mbedés_a¢1_wrôe_nuŒ
(**
p
, *
°¨t
);

110 
mbedés_a¢1_wrôe_oid
(**
p
, *
°¨t
,

111 c⁄° *
oid
, 
size_t
 
oid_Àn
);

126 
mbedés_a¢1_wrôe_Æg‹ôhm_idítifõr
(**
p
, *
°¨t
,

127 c⁄° *
oid
, 
size_t
 
oid_Àn
,

128 
size_t
 
∑r_Àn
);

140 
mbedés_a¢1_wrôe_boﬁ
(**
p
, *
°¨t
, 
boﬁón
);

152 
mbedés_a¢1_wrôe_öt
(**
p
, *
°¨t
, 
vÆ
);

166 
mbedés_a¢1_wrôe_¥öèbÀ_°rög
(**
p
, *
°¨t
,

167 c⁄° *
ãxt
, 
size_t
 
ãxt_Àn
);

181 
mbedés_a¢1_wrôe_ü5_°rög
(**
p
, *
°¨t
,

182 c⁄° *
ãxt
, 
size_t
 
ãxt_Àn
);

196 
mbedés_a¢1_wrôe_bô°rög
(**
p
, *
°¨t
,

197 c⁄° *
buf
, 
size_t
 
bôs
);

211 
mbedés_a¢1_wrôe_o˘ë_°rög
(**
p
, *
°¨t
,

212 c⁄° *
buf
, 
size_t
 
size
);

230 
mbedés_a¢1_«med_d©a
 *
mbedés_a¢1_°‹e_«med_d©a
(mbedés_a¢1_«med_d©®**
li°
,

231 c⁄° *
oid
, 
size_t
 
oid_Àn
,

232 c⁄° *
vÆ
,

233 
size_t
 
vÆ_Àn
);

235 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/base64.h

23 #i‚de‡
MBEDTLS_BASE64_H


24 
	#MBEDTLS_BASE64_H


	)

26 
	~<°ddef.h
>

28 
	#MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL
 -0x002A

	)

29 
	#MBEDTLS_ERR_BASE64_INVALID_CHARACTER
 -0x002C

	)

31 #ifde‡
__˝lu•lus


54 
mbedés_ba£64_ícode
(*
d°
, 
size_t
 
dÀn
, size_à*
ﬁí
,

55 c⁄° *
§c
, 
size_t
 
¶í
);

74 
mbedés_ba£64_decode
(*
d°
, 
size_t
 
dÀn
, size_à*
ﬁí
,

75 c⁄° *
§c
, 
size_t
 
¶í
);

82 
mbedés_ba£64_£lf_ã°
(
vîbo£
);

84 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/bignum.h

23 #i‚de‡
MBEDTLS_BIGNUM_H


24 
	#MBEDTLS_BIGNUM_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡
deföed
(
MBEDTLS_FS_IO
)

36 
	~<°dio.h
>

39 
	#MBEDTLS_ERR_MPI_FILE_IO_ERROR
 -0x0002

	)

40 
	#MBEDTLS_ERR_MPI_BAD_INPUT_DATA
 -0x0004

	)

41 
	#MBEDTLS_ERR_MPI_INVALID_CHARACTER
 -0x0006

	)

42 
	#MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL
 -0x0008

	)

43 
	#MBEDTLS_ERR_MPI_NEGATIVE_VALUE
 -0x000A

	)

44 
	#MBEDTLS_ERR_MPI_DIVISION_BY_ZERO
 -0x000C

	)

45 
	#MBEDTLS_ERR_MPI_NOT_ACCEPTABLE
 -0x000E

	)

46 
	#MBEDTLS_ERR_MPI_ALLOC_FAILED
 -0x0010

	)

48 
	#MBEDTLS_MPI_CHK
(
f
Ëdÿ{ if––
ªt
 = f ) !0 ) 
˛ónup
; }  0 )

	)

53 
	#MBEDTLS_MPI_MAX_LIMBS
 10000

	)

55 #i‡!
deföed
(
MBEDTLS_MPI_WINDOW_SIZE
)

65 
	#MBEDTLS_MPI_WINDOW_SIZE
 6

	)

68 #i‡!
deföed
(
MBEDTLS_MPI_MAX_SIZE
)

76 
	#MBEDTLS_MPI_MAX_SIZE
 1024

	)

79 
	#MBEDTLS_MPI_MAX_BITS
 ( 8 * 
MBEDTLS_MPI_MAX_SIZE
 )

	)

99 
	#MBEDTLS_MPI_MAX_BITS_SCALE100
 ( 100 * 
MBEDTLS_MPI_MAX_BITS
 )

	)

100 
	#MBEDTLS_LN_2_DIV_LN_10_SCALE100
 332

	)

101 
	#MBEDTLS_MPI_RW_BUFFER_SIZE
 ( ((
MBEDTLS_MPI_MAX_BITS_SCALE100
 + 
MBEDTLS_LN_2_DIV_LN_10_SCALE100
 - 1Ë/ MBEDTLS_LN_2_DIV_LN_10_SCALE100Ë+ 10 + 6 )

	)

109 #i‡–! 
deföed
(
MBEDTLS_HAVE_INT32
) && \

110 
deföed
(
_MSC_VER
Ë&& 
	$deföed
(
_M_AMD64
) )

111 
	#MBEDTLS_HAVE_INT64


	)

112 
öt64_t
 
	tmbedés_mpi_söt
;

113 
uöt64_t
 
	tmbedés_mpi_uöt
;

115 #i‡–! 
	`deföed
(
MBEDTLS_HAVE_INT32
) && \

116 
	`deföed
(
__GNUC__
) && ( \

117 
	`deföed
(
__amd64__
Ë|| deföed(
__x86_64__
) || \

118 
	`deföed
(
__µc64__
Ë|| deföed(
__powîpc64__
) || \

119 
	`deföed
(
__ü64__
Ë|| deföed(
__Æpha__
) || \

120 (
	`deföed
(
__•¨c__
Ë&& deföed(
__¨ch64__
)) || \

121 
	`deföed
(
__s390x__
Ë|| 
	$deföed
(
__mùs64
) ) )

122 
	#MBEDTLS_HAVE_INT64


	)

123 
öt64_t
 
	tmbedés_mpi_söt
;

124 
uöt64_t
 
	tmbedés_mpi_uöt
;

126 
	tmbedés_t_udbl
 
	t__©åibuã__
((
	tmode
(
	tTI
)));

127 
	#MBEDTLS_HAVE_UDBL


	)

129 
	#MBEDTLS_HAVE_INT32


	)

130 
öt32_t
 
	tmbedés_mpi_söt
;

131 
uöt32_t
 
	tmbedés_mpi_uöt
;

132 
uöt64_t
 
	tmbedés_t_udbl
;

133 
	#MBEDTLS_HAVE_UDBL


	)

137 #ifde‡
__˝lu•lus


145 
s
;

146 
size_t
 
n
;

147 
mbedés_mpi_uöt
 *
p
;

149 
	tmbedés_mpi
;

158 
	`mbedés_mpi_öô
(
mbedés_mpi
 *
X
);

165 
	`mbedés_mpi_‰ì
(
mbedés_mpi
 *
X
);

176 
	`mbedés_mpi_grow
(
mbedés_mpi
 *
X
, 
size_t
 
nblimbs
);

187 
	`mbedés_mpi_shrök
(
mbedés_mpi
 *
X
, 
size_t
 
nblimbs
);

198 
	`mbedés_mpi_c›y
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
Y
);

206 
	`mbedés_mpi_sw≠
(
mbedés_mpi
 *
X
, mbedés_mpò*
Y
);

225 
	`mbedés_mpi_ß„_c⁄d_assign
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
Y
, 
assign
);

244 
	`mbedés_mpi_ß„_c⁄d_sw≠
(
mbedés_mpi
 *
X
, mbedés_mpò*
Y
, 
assign
);

255 
	`mbedés_mpi_l£t
(
mbedés_mpi
 *
X
, 
mbedés_mpi_söt
 
z
);

265 
	`mbedés_mpi_gë_bô
(c⁄° 
mbedés_mpi
 *
X
, 
size_t
 
pos
);

281 
	`mbedés_mpi_£t_bô
(
mbedés_mpi
 *
X
, 
size_t
 
pos
, 
vÆ
);

291 
size_t
 
	`mbedés_mpi_lsb
(c⁄° 
mbedés_mpi
 *
X
);

301 
size_t
 
	`mbedés_mpi_bôÀn
(c⁄° 
mbedés_mpi
 *
X
);

308 
size_t
 
	`mbedés_mpi_size
(c⁄° 
mbedés_mpi
 *
X
);

319 
	`mbedés_mpi_ªad_°rög
(
mbedés_mpi
 *
X
, 
ødix
, c⁄° *
s
);

337 
	`mbedés_mpi_wrôe_°rög
(c⁄° 
mbedés_mpi
 *
X
, 
ødix
,

338 *
buf
, 
size_t
 
buÊí
, size_à*
ﬁí
);

340 #i‡
	`deföed
(
MBEDTLS_FS_IO
)

352 
	`mbedés_mpi_ªad_fûe
(
mbedés_mpi
 *
X
, 
ødix
, 
FILE
 *
fö
);

366 
	`mbedés_mpi_wrôe_fûe
(c⁄° *
p
, c⁄° 
mbedés_mpi
 *
X
, 
ødix
, 
FILE
 *
fout
);

379 
	`mbedés_mpi_ªad_bö¨y
(
mbedés_mpi
 *
X
, c⁄° *
buf
, 
size_t
 
buÊí
);

393 
	`mbedés_mpi_wrôe_bö¨y
(c⁄° 
mbedés_mpi
 *
X
, *
buf
, 
size_t
 
buÊí
);

404 
	`mbedés_mpi_shi·_l
(
mbedés_mpi
 *
X
, 
size_t
 
cou¡
);

415 
	`mbedés_mpi_shi·_r
(
mbedés_mpi
 *
X
, 
size_t
 
cou¡
);

427 
	`mbedés_mpi_cmp_abs
(c⁄° 
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
Y
);

439 
	`mbedés_mpi_cmp_mpi
(c⁄° 
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
Y
);

451 
	`mbedés_mpi_cmp_öt
(c⁄° 
mbedés_mpi
 *
X
, 
mbedés_mpi_söt
 
z
);

463 
	`mbedés_mpi_add_abs
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

475 
	`mbedés_mpi_sub_abs
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

487 
	`mbedés_mpi_add_mpi
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

499 
	`mbedés_mpi_sub_mpi
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

511 
	`mbedés_mpi_add_öt
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, 
mbedés_mpi_söt
 
b
);

523 
	`mbedés_mpi_sub_öt
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, 
mbedés_mpi_söt
 
b
);

535 
	`mbedés_mpi_mul_mpi
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

549 
	`mbedés_mpi_mul_öt
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, 
mbedés_mpi_uöt
 
b
);

565 
	`mbedés_mpi_div_mpi
(
mbedés_mpi
 *
Q
, mbedés_mpò*
R
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

581 
	`mbedés_mpi_div_öt
(
mbedés_mpi
 *
Q
, mbedés_mpò*
R
, c⁄° mbedés_mpò*
A
, 
mbedés_mpi_söt
 
b
);

595 
	`mbedés_mpi_mod_mpi
(
mbedés_mpi
 *
R
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

609 
	`mbedés_mpi_mod_öt
(
mbedés_mpi_uöt
 *
r
, c⁄° 
mbedés_mpi
 *
A
, 
mbedés_mpi_söt
 
b
);

629 
	`mbedés_mpi_exp_mod
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
E
, c⁄° mbedés_mpò*
N
, mbedés_mpò*
_RR
);

642 
	`mbedés_mpi_fûl_øndom
(
mbedés_mpi
 *
X
, 
size_t
 
size
,

643 (*
f_∫g
)(*, *, 
size_t
),

644 *
p_∫g
);

656 
	`mbedés_mpi_gcd
(
mbedés_mpi
 *
G
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
B
);

670 
	`mbedés_mpi_öv_mod
(
mbedés_mpi
 *
X
, c⁄° mbedés_mpò*
A
, c⁄° mbedés_mpò*
N
);

683 
	`mbedés_mpi_is_¥ime
(c⁄° 
mbedés_mpi
 *
X
,

684 (*
f_∫g
)(*, *, 
size_t
),

685 *
p_∫g
);

701 
	`mbedés_mpi_gí_¥ime
(
mbedés_mpi
 *
X
, 
size_t
 
nbôs
, 
dh_Êag
,

702 (*
f_∫g
)(*, *, 
size_t
),

703 *
p_∫g
);

710 
	`mbedés_mpi_£lf_ã°
(
vîbo£
);

712 #ifde‡
__˝lu•lus


713 
	}
}

	@include_lib/net/mbedtls/blowfish.h

23 #i‚de‡
MBEDTLS_BLOWFISH_H


24 
	#MBEDTLS_BLOWFISH_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 
	#MBEDTLS_BLOWFISH_ENCRYPT
 1

	)

36 
	#MBEDTLS_BLOWFISH_DECRYPT
 0

	)

37 
	#MBEDTLS_BLOWFISH_MAX_KEY_BITS
 448

	)

38 
	#MBEDTLS_BLOWFISH_MIN_KEY_BITS
 32

	)

39 
	#MBEDTLS_BLOWFISH_ROUNDS
 16

	)

40 
	#MBEDTLS_BLOWFISH_BLOCKSIZE
 8

	)

42 
	#MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH
 -0x0016

	)

43 
	#MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH
 -0x0018

	)

45 #i‡!
deföed
(
MBEDTLS_BLOWFISH_ALT
)

49 #ifde‡
__˝lu•lus


57 
uöt32_t
 
P
[
MBEDTLS_BLOWFISH_ROUNDS
 + 2];

58 
uöt32_t
 
S
[4][256];

60 
	tmbedés_blowfish_c⁄ãxt
;

67 
mbedés_blowfish_öô
(
mbedés_blowfish_c⁄ãxt
 *
˘x
);

74 
mbedés_blowfish_‰ì
(
mbedés_blowfish_c⁄ãxt
 *
˘x
);

85 
mbedés_blowfish_£tkey
(
mbedés_blowfish_c⁄ãxt
 *
˘x
, c⁄° *
key
,

86 
keybôs
);

98 
mbedés_blowfish_¸y±_ecb
(
mbedés_blowfish_c⁄ãxt
 *
˘x
,

99 
mode
,

100 c⁄° 
öput
[
MBEDTLS_BLOWFISH_BLOCKSIZE
],

101 
ouçut
[
MBEDTLS_BLOWFISH_BLOCKSIZE
]);

103 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

127 
mbedés_blowfish_¸y±_cbc
(
mbedés_blowfish_c⁄ãxt
 *
˘x
,

128 
mode
,

129 
size_t
 
Àngth
,

130 
iv
[
MBEDTLS_BLOWFISH_BLOCKSIZE
],

131 c⁄° *
öput
,

132 *
ouçut
);

135 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CFB
)

157 
mbedés_blowfish_¸y±_cfb64
(
mbedés_blowfish_c⁄ãxt
 *
˘x
,

158 
mode
,

159 
size_t
 
Àngth
,

160 
size_t
 *
iv_off
,

161 
iv
[
MBEDTLS_BLOWFISH_BLOCKSIZE
],

162 c⁄° *
öput
,

163 *
ouçut
);

166 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CTR
)

185 
mbedés_blowfish_¸y±_˘r
(
mbedés_blowfish_c⁄ãxt
 *
˘x
,

186 
size_t
 
Àngth
,

187 
size_t
 *
nc_off
,

188 
n⁄˚_cou¡î
[
MBEDTLS_BLOWFISH_BLOCKSIZE
],

189 
°ªam_block
[
MBEDTLS_BLOWFISH_BLOCKSIZE
],

190 c⁄° *
öput
,

191 *
ouçut
);

194 #ifde‡
__˝lu•lus


199 
	~"blowfish_Æt.h
"

	@include_lib/net/mbedtls/bn_mul.h

37 #i‚de‡
MBEDTLS_BN_MUL_H


38 
	#MBEDTLS_BN_MUL_H


	)

40 
	~"bignum.h
"

42 #i‡
deföed
(
MBEDTLS_HAVE_ASM
)

44 #i‚de‡
asm


45 
	#asm
 
__asm


	)

49 #i‡
deföed
(
__GNUC__
) && \

50 –!
deföed
(
__ARMCC_VERSION
Ë|| 
	g__ARMCC_VERSION
 >= 6000000 )

51 #i‡
deföed
(
__i386__
)

53 
	#MULADDC_INIT
 \

54 
	`asm
( \

59 "mov» %8, %%ebx \n\t"

	)

61 
	#MULADDC_CORE
 \

69 "°o¶ \n\t"

	)

71 #i‡
deföed
(
MBEDTLS_HAVE_SSE2
)

73 
	#MULADDC_HUIT
 \

134 "movd %%mm1, %%ecx \n\t"

	)

136 
	#MULADDC_STOP
 \

142 : "=m" (
t
), "=m" (
c
), "=m" (
d
), "=m" (
s
) \

143 : "m" (
t
), "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

145 );

	)

149 
	#MULADDC_STOP
 \

154 : "=m" (
t
), "=m" (
c
), "=m" (
d
), "=m" (
s
) \

155 : "m" (
t
), "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

157 );

	)

161 #i‡
deföed
(
__amd64__
Ë|| deföed (
__x86_64__
)

163 
	#MULADDC_INIT
 \

164 
	`asm
( \

165 "x‹q %%r8, %%r8 \n\t"

	)

167 
	#MULADDC_CORE
 \

177 "addq $8, %%rdò \n\t"

	)

179 
	#MULADDC_STOP
 \

180 : "+c" (
c
), "+D" (
d
), "+S" (
s
) \

181 : "b" (
b
) \

183 );

	)

187 #i‡
deföed
(
__mc68020__
Ë|| deföed(
__m˝u32__
)

189 
	#MULADDC_INIT
 \

190 
	`asm
( \

195 "moveq #0, %%d0 \n\t"

	)

197 
	#MULADDC_CORE
 \

204 "addx» %%d4, %%d3 \n\t"

	)

206 
	#MULADDC_STOP
 \

210 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

211 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

213 );

	)

215 
	#MULADDC_HUIT
 \

256 "addx» %%d0, %%d3 \n\t"

	)

260 #i‡
deföed
(
__powîpc64__
Ë|| deföed(
__µc64__
)

262 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

264 
	#MULADDC_INIT
 \

265 
	`asm
( \

272 "addi¯Ñ5,Ñ5, 0 \n\t"

	)

274 
	#MULADDC_CORE
 \

282 "°duÑ8, 8‘4Ë \n\t"

	)

284 
	#MULADDC_STOP
 \

291 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

292 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

294 );

	)

299 
	#MULADDC_INIT
 \

300 
	`asm
( \

307 "addi¯ %%r5, %%r5, 0 \n\t"

	)

309 
	#MULADDC_CORE
 \

317 "°du %%r8, 8(%%r4Ë \n\t"

	)

319 
	#MULADDC_STOP
 \

326 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

327 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

329 );

	)

333 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__µc__
)

335 #i‡
deföed
(
__MACH__
Ë&& deföed(
__APPLE__
)

337 
	#MULADDC_INIT
 \

338 
	`asm
( \

345 "addi¯Ñ5,Ñ5, 0 \n\t"

	)

347 
	#MULADDC_CORE
 \

355 "°wuÑ8, 4‘4Ë \n\t"

	)

357 
	#MULADDC_STOP
 \

364 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

365 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

367 );

	)

371 
	#MULADDC_INIT
 \

372 
	`asm
( \

379 "addi¯ %%r5, %%r5, 0 \n\t"

	)

381 
	#MULADDC_CORE
 \

389 "°wu %%r8, 4(%%r4Ë \n\t"

	)

391 
	#MULADDC_STOP
 \

398 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

399 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

401 );

	)

411 #i‡0 && 
deföed
(
__•¨c__
)

412 #i‡
deföed
(
__•¨c64__
)

414 
	#MULADDC_INIT
 \

415 
	`asm
( \

419 "ld %6, %%o3 \n\t"

	)

421 
	#MULADDC_CORE
 \

432 "ö¯ 4, %%o1 \n\t"

	)

434 
	#MULADDC_STOP
 \

438 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

439 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

442 );

	)

446 
	#MULADDC_INIT
 \

447 
	`asm
( \

451 "ld %6, %%o3 \n\t"

	)

453 
	#MULADDC_CORE
 \

464 "ö¯ 4, %%o1 \n\t"

	)

466 
	#MULADDC_STOP
 \

470 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

471 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

474 );

	)

479 #i‡
deföed
(
__mi¸obœze__
Ë|| deföed(
mi¸obœze
)

481 
	#MULADDC_INIT
 \

482 
	`asm
( \

488 "b§lòr6,Ñ6, 16 \n\t"

	)

490 
	#MULADDC_CORE
 \

515 "addòÑ4,Ñ4, 4 \n\t"

	)

517 
	#MULADDC_STOP
 \

521 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

522 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

525 );

	)

529 #i‡
deföed
(
__åic‹e__
)

531 
	#MULADDC_INIT
 \

532 
	`asm
( \

537 "x‹ %%d5, %%d5 \n\t"

	)

539 
	#MULADDC_CORE
 \

546 "°.w [%%a3+], %%d2 \n\t"

	)

548 
	#MULADDC_STOP
 \

552 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

553 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

555 );

	)

571 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__OPTIMIZE__
)

572 
	#MULADDC_CANNOT_USE_R7


	)

575 #i‡
deföed
(
__¨m__
Ë&& !deföed(
MULADDC_CANNOT_USE_R7
)

577 #i‡
deföed
(
__thumb__
Ë&& !deföed(
__thumb2__
)

579 
	#MULADDC_INIT
 \

580 
	`asm
( \

589 "movÑ8,Ñ7 \n\t"

	)

591 
	#MULADDC_CORE
 \

620 "°müÑ1!, {r4} \n\t"

	)

622 
	#MULADDC_STOP
 \

626 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

627 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

630 );

	)

634 
	#MULADDC_INIT
 \

635 
	`asm
( \

639 "ld∏Ñ3, %6 \n\t"

	)

641 
	#MULADDC_CORE
 \

648 "°∏Ñ7, [r1], #4 \n\t"

	)

650 
	#MULADDC_STOP
 \

654 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

655 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

658 );

	)

664 #i‡
deföed
(
__Æpha__
)

666 
	#MULADDC_INIT
 \

667 
	`asm
( \

671 "ldq $4, %6 \n\t"

	)

673 
	#MULADDC_CORE
 \

686 "addq $5, $3, $3 \n\t"

	)

688 
	#MULADDC_STOP
 \

692 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

693 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

695 );

	)

698 #i‡
deföed
(
__mùs__
Ë&& !deföed(
__mùs64
)

700 
	#MULADDC_INIT
 \

701 
	`asm
( \

705 "lw $13, %6 \n\t"

	)

707 
	#MULADDC_CORE
 \

721 "addò $11, $11, 4 \n\t"

	)

723 
	#MULADDC_STOP
 \

727 : "=m" (
c
), "=m" (
d
), "=m" (
s
) \

728 : "m" (
s
), "m" (
d
), "m" (
c
), "m" (
b
) \

730 );

	)

735 #i‡(
deföed
(
_MSC_VER
Ë&& deföed(
_M_IX86
)Ë|| deföed(
__WATCOMC__
)

737 
	#MULADDC_INIT
 \

738 
__asm
 
mov
 
esi
, 
s
 \

739 
__asm
 
mov
 
edi
, 
d
 \

740 
__asm
 
mov
 
ecx
, 
c
 \

741 
__asm
 
mov
 
ebx
, 
b


	)

743 
	#MULADDC_CORE
 \

744 
__asm
 
lodsd
 \

745 
__asm
 
mul
 
ebx
 \

746 
__asm
 
add
 
óx
, 
ecx
 \

747 
__asm
 
adc
 
edx
, 0 \

748 
__asm
 
add
 
óx
, [
edi
] \

749 
__asm
 
adc
 
edx
, 0 \

750 
__asm
 
mov
 
ecx
, 
edx
 \

751 
__asm
 
°osd


	)

753 #i‡
deföed
(
MBEDTLS_HAVE_SSE2
)

755 
	#EMIT
 
__asm
 
_emô


	)

757 
	#MULADDC_HUIT
 \

758 
EMIT
 0x0F EMIT 0x6E EMIT 0xC9 \

759 
EMIT
 0x0F EMIT 0x6E EMIT 0xC3 \

760 
EMIT
 0x0F EMIT 0x6E EMIT 0x1F \

761 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCB \

762 
EMIT
 0x0F EMIT 0x6E EMIT 0x16 \

763 
EMIT
 0x0F EMIT 0xF4 EMIT 0xD0 \

764 
EMIT
 0x0F EMIT 0x6E EMIT 0x66 EMIT 0x04 \

765 
EMIT
 0x0F EMIT 0xF4 EMIT 0xE0 \

766 
EMIT
 0x0F EMIT 0x6E EMIT 0x76 EMIT 0x08 \

767 
EMIT
 0x0F EMIT 0xF4 EMIT 0xF0 \

768 
EMIT
 0x0F EMIT 0x6E EMIT 0x7E EMIT 0x0C \

769 
EMIT
 0x0F EMIT 0xF4 EMIT 0xF8 \

770 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCA \

771 
EMIT
 0x0F EMIT 0x6E EMIT 0x5F EMIT 0x04 \

772 
EMIT
 0x0F EMIT 0xD4 EMIT 0xDC \

773 
EMIT
 0x0F EMIT 0x6E EMIT 0x6F EMIT 0x08 \

774 
EMIT
 0x0F EMIT 0xD4 EMIT 0xEE \

775 
EMIT
 0x0F EMIT 0x6E EMIT 0x67 EMIT 0x0C \

776 
EMIT
 0x0F EMIT 0xD4 EMIT 0xFC \

777 
EMIT
 0x0F EMIT 0x7E EMIT 0x0F \

778 
EMIT
 0x0F EMIT 0x6E EMIT 0x56 EMIT 0x10 \

779 
EMIT
 0x0F EMIT 0xF4 EMIT 0xD0 \

780 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

781 
EMIT
 0x0F EMIT 0x6E EMIT 0x66 EMIT 0x14 \

782 
EMIT
 0x0F EMIT 0xF4 EMIT 0xE0 \

783 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCB \

784 
EMIT
 0x0F EMIT 0x6E EMIT 0x76 EMIT 0x18 \

785 
EMIT
 0x0F EMIT 0xF4 EMIT 0xF0 \

786 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x04 \

787 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

788 
EMIT
 0x0F EMIT 0x6E EMIT 0x5E EMIT 0x1C \

789 
EMIT
 0x0F EMIT 0xF4 EMIT 0xD8 \

790 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCD \

791 
EMIT
 0x0F EMIT 0x6E EMIT 0x6F EMIT 0x10 \

792 
EMIT
 0x0F EMIT 0xD4 EMIT 0xD5 \

793 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x08 \

794 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

795 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCF \

796 
EMIT
 0x0F EMIT 0x6E EMIT 0x6F EMIT 0x14 \

797 
EMIT
 0x0F EMIT 0xD4 EMIT 0xE5 \

798 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x0C \

799 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

800 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCA \

801 
EMIT
 0x0F EMIT 0x6E EMIT 0x6F EMIT 0x18 \

802 
EMIT
 0x0F EMIT 0xD4 EMIT 0xF5 \

803 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x10 \

804 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

805 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCC \

806 
EMIT
 0x0F EMIT 0x6E EMIT 0x6F EMIT 0x1C \

807 
EMIT
 0x0F EMIT 0xD4 EMIT 0xDD \

808 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x14 \

809 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

810 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCE \

811 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x18 \

812 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

813 
EMIT
 0x0F EMIT 0xD4 EMIT 0xCB \

814 
EMIT
 0x0F EMIT 0x7E EMIT 0x4F EMIT 0x1C \

815 
EMIT
 0x83 EMIT 0xC7 EMIT 0x20 \

816 
EMIT
 0x83 EMIT 0xC6 EMIT 0x20 \

817 
EMIT
 0x0F EMIT 0x73 EMIT 0xD1 EMIT 0x20 \

818 
EMIT
 0x0F EMIT 0x7E EMIT 0xC9

	)

820 
	#MULADDC_STOP
 \

821 
EMIT
 0x0F EMIT 0x77 \

822 
__asm
 
mov
 
c
, 
ecx
 \

823 
__asm
 
mov
 
d
, 
edi
 \

824 
__asm
 
mov
 
s
, 
esi
 \

825 

	)

828 
	#MULADDC_STOP
 \

829 
__asm
 
mov
 
c
, 
ecx
 \

830 
__asm
 
mov
 
d
, 
edi
 \

831 
__asm
 
mov
 
s
, 
esi
 \

832 

	)

838 #i‡!
deföed
(
MULADDC_CORE
)

839 #i‡
deföed
(
MBEDTLS_HAVE_UDBL
)

841 
	#MULADDC_INIT
 \

843 
mbedés_t_udbl
 
r
; \

844 
mbedés_mpi_uöt
 
r0
, 
r1
;

	)

846 
	#MULADDC_CORE
 \

847 
r
 = *(
s
++Ë* (
mbedés_t_udbl
Ë
b
; \

848 
r0
 = (
mbedés_mpi_uöt
Ë
r
; \

849 
r1
 = (
mbedés_mpi_uöt
)–
r
 >> 
biL
 ); \

850 
r0
 +
c
; 
r1
 += (r0 < c); \

851 
r0
 +*
d
; 
r1
 += (r0 < *d); \

852 
c
 = 
r1
; *(
d
++Ë
r0
;

	)

854 
	#MULADDC_STOP
 \

855 }

	)

858 
	#MULADDC_INIT
 \

860 
mbedés_mpi_uöt
 
s0
, 
s1
, 
b0
, 
b1
; \

861 
mbedés_mpi_uöt
 
r0
, 
r1
, 
rx
, 
ry
; \

862 
b0
 = ( 
b
 << 
biH
 ) >> biH; \

863 
b1
 = ( 
b
 >> 
biH
 );

	)

865 
	#MULADDC_CORE
 \

866 
s0
 = ( *
s
 << 
biH
 ) >> biH; \

867 
s1
 = ( *
s
 >> 
biH
 ); s++; \

868 
rx
 = 
s0
 * 
b1
; 
r0
 = s0 * 
b0
; \

869 
ry
 = 
s1
 * 
b0
; 
r1
 = s1 * 
b1
; \

870 
r1
 +–
rx
 >> 
biH
 ); \

871 
r1
 +–
ry
 >> 
biH
 ); \

872 
rx
 <<
biH
; 
ry
 <<= biH; \

873 
r0
 +
rx
; 
r1
 += (r0 <Ñx); \

874 
r0
 +
ry
; 
r1
 += (r0 <Ñy); \

875 
r0
 +
c
; 
r1
 += (r0 < c); \

876 
r0
 +*
d
; 
r1
 += (r0 < *d); \

877 
c
 = 
r1
; *(
d
++Ë
r0
;

	)

879 
	#MULADDC_STOP
 \

880 }

	)

	@include_lib/net/mbedtls/camellia.h

23 #i‚de‡
MBEDTLS_CAMELLIA_H


24 
	#MBEDTLS_CAMELLIA_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 
	#MBEDTLS_CAMELLIA_ENCRYPT
 1

	)

36 
	#MBEDTLS_CAMELLIA_DECRYPT
 0

	)

38 
	#MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH
 -0x0024

	)

39 
	#MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH
 -0x0026

	)

41 #i‡!
deföed
(
MBEDTLS_CAMELLIA_ALT
)

45 #ifde‡
__˝lu•lus


53 
ƒ
;

54 
uöt32_t
 
rk
[68];

56 
	tmbedés_ˇmñlü_c⁄ãxt
;

63 
mbedés_ˇmñlü_öô
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
);

70 
mbedés_ˇmñlü_‰ì
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
);

81 
mbedés_ˇmñlü_£tkey_íc
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
, c⁄° *
key
,

82 
keybôs
);

93 
mbedés_ˇmñlü_£tkey_dec
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
, c⁄° *
key
,

94 
keybôs
);

106 
mbedés_ˇmñlü_¸y±_ecb
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
,

107 
mode
,

108 c⁄° 
öput
[16],

109 
ouçut
[16]);

111 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

135 
mbedés_ˇmñlü_¸y±_cbc
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
,

136 
mode
,

137 
size_t
 
Àngth
,

138 
iv
[16],

139 c⁄° *
öput
,

140 *
ouçut
);

143 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CFB
)

170 
mbedés_ˇmñlü_¸y±_cfb128
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
,

171 
mode
,

172 
size_t
 
Àngth
,

173 
size_t
 *
iv_off
,

174 
iv
[16],

175 c⁄° *
öput
,

176 *
ouçut
);

179 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CTR
)

202 
mbedés_ˇmñlü_¸y±_˘r
(
mbedés_ˇmñlü_c⁄ãxt
 *
˘x
,

203 
size_t
 
Àngth
,

204 
size_t
 *
nc_off
,

205 
n⁄˚_cou¡î
[16],

206 
°ªam_block
[16],

207 c⁄° *
öput
,

208 *
ouçut
);

211 #ifde‡
__˝lu•lus


216 
	~"ˇmñlü_Æt.h
"

219 #ifde‡
__˝lu•lus


228 
mbedés_ˇmñlü_£lf_ã°
(
vîbo£
);

230 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ccm.h

23 #i‚de‡
MBEDTLS_CCM_H


24 
	#MBEDTLS_CCM_H


	)

26 
	~"cùhî.h
"

28 
	#MBEDTLS_ERR_CCM_BAD_INPUT
 -0x000D

	)

29 
	#MBEDTLS_ERR_CCM_AUTH_FAILED
 -0x000F

	)

31 #ifde‡
__˝lu•lus


39 
mbedés_cùhî_c⁄ãxt_t
 
cùhî_˘x
;

41 
	tmbedés_ccm_c⁄ãxt
;

50 
mbedés_ccm_öô
(
mbedés_ccm_c⁄ãxt
 *
˘x
);

62 
mbedés_ccm_£tkey
(
mbedés_ccm_c⁄ãxt
 *
˘x
,

63 
mbedés_cùhî_id_t
 
cùhî
,

64 c⁄° *
key
,

65 
keybôs
);

72 
mbedés_ccm_‰ì
(
mbedés_ccm_c⁄ãxt
 *
˘x
);

99 
mbedés_ccm_í¸y±_™d_èg
(
mbedés_ccm_c⁄ãxt
 *
˘x
, 
size_t
 
Àngth
,

100 c⁄° *
iv
, 
size_t
 
iv_Àn
,

101 c⁄° *
add
, 
size_t
 
add_Àn
,

102 c⁄° *
öput
, *
ouçut
,

103 *
èg
, 
size_t
 
èg_Àn
);

122 
mbedés_ccm_auth_de¸y±
(
mbedés_ccm_c⁄ãxt
 *
˘x
, 
size_t
 
Àngth
,

123 c⁄° *
iv
, 
size_t
 
iv_Àn
,

124 c⁄° *
add
, 
size_t
 
add_Àn
,

125 c⁄° *
öput
, *
ouçut
,

126 c⁄° *
èg
, 
size_t
 
èg_Àn
);

128 #i‡
deföed
(
MBEDTLS_SELF_TEST
Ë&& deföed(
MBEDTLS_AES_C
)

134 
mbedés_ccm_£lf_ã°
(
vîbo£
);

137 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/certs.h

23 #i‚de‡
MBEDTLS_CERTS_H


24 
	#MBEDTLS_CERTS_H


	)

26 
	~<°ddef.h
>

28 #ifde‡
__˝lu•lus


32 #i‡
deföed
(
MBEDTLS_PEM_PARSE_C
)

34 c⁄° 
mbedés_ã°_ˇs_≥m
[];

35 c⁄° 
size_t
 
mbedés_ã°_ˇs_≥m_Àn
;

39 c⁄° *
mbedés_ã°_ˇs
[];

40 c⁄° 
size_t
 
mbedés_ã°_ˇs_Àn
[];

46 c⁄° *
mbedés_ã°_ˇ_¸t
;

47 c⁄° 
size_t
 
mbedés_ã°_ˇ_¸t_Àn
;

48 c⁄° *
mbedés_ã°_ˇ_key
;

49 c⁄° 
size_t
 
mbedés_ã°_ˇ_key_Àn
;

50 c⁄° *
mbedés_ã°_ˇ_pwd
;

51 c⁄° 
size_t
 
mbedés_ã°_ˇ_pwd_Àn
;

52 c⁄° *
mbedés_ã°_§v_¸t
;

53 c⁄° 
size_t
 
mbedés_ã°_§v_¸t_Àn
;

54 c⁄° *
mbedés_ã°_§v_key
;

55 c⁄° 
size_t
 
mbedés_ã°_§v_key_Àn
;

56 c⁄° *
mbedés_ã°_˛i_¸t
;

57 c⁄° 
size_t
 
mbedés_ã°_˛i_¸t_Àn
;

58 c⁄° *
mbedés_ã°_˛i_key
;

59 c⁄° 
size_t
 
mbedés_ã°_˛i_key_Àn
;

61 #i‡
deföed
(
MBEDTLS_ECDSA_C
)

62 c⁄° 
mbedés_ã°_ˇ_¸t_ec
[];

63 c⁄° 
size_t
 
mbedés_ã°_ˇ_¸t_ec_Àn
;

64 c⁄° 
mbedés_ã°_ˇ_key_ec
[];

65 c⁄° 
size_t
 
mbedés_ã°_ˇ_key_ec_Àn
;

66 c⁄° 
mbedés_ã°_ˇ_pwd_ec
[];

67 c⁄° 
size_t
 
mbedés_ã°_ˇ_pwd_ec_Àn
;

68 c⁄° 
mbedés_ã°_§v_¸t_ec
[];

69 c⁄° 
size_t
 
mbedés_ã°_§v_¸t_ec_Àn
;

70 c⁄° 
mbedés_ã°_§v_key_ec
[];

71 c⁄° 
size_t
 
mbedés_ã°_§v_key_ec_Àn
;

72 c⁄° 
mbedés_ã°_˛i_¸t_ec
[];

73 c⁄° 
size_t
 
mbedés_ã°_˛i_¸t_ec_Àn
;

74 c⁄° 
mbedés_ã°_˛i_key_ec
[];

75 c⁄° 
size_t
 
mbedés_ã°_˛i_key_ec_Àn
;

78 #i‡
deföed
(
MBEDTLS_RSA_C
)

79 c⁄° 
mbedés_ã°_ˇ_¸t_rß
[];

80 c⁄° 
size_t
 
mbedés_ã°_ˇ_¸t_rß_Àn
;

81 c⁄° 
mbedés_ã°_ˇ_key_rß
[];

82 c⁄° 
size_t
 
mbedés_ã°_ˇ_key_rß_Àn
;

83 c⁄° 
mbedés_ã°_ˇ_pwd_rß
[];

84 c⁄° 
size_t
 
mbedés_ã°_ˇ_pwd_rß_Àn
;

85 c⁄° 
mbedés_ã°_§v_¸t_rß
[];

86 c⁄° 
size_t
 
mbedés_ã°_§v_¸t_rß_Àn
;

87 c⁄° 
mbedés_ã°_§v_key_rß
[];

88 c⁄° 
size_t
 
mbedés_ã°_§v_key_rß_Àn
;

89 c⁄° 
mbedés_ã°_˛i_¸t_rß
[];

90 c⁄° 
size_t
 
mbedés_ã°_˛i_¸t_rß_Àn
;

91 c⁄° 
mbedés_ã°_˛i_key_rß
[];

92 c⁄° 
size_t
 
mbedés_ã°_˛i_key_rß_Àn
;

95 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/check_config.h

29 #i‚de‡
MBEDTLS_CHECK_CONFIG_H


30 
	#MBEDTLS_CHECK_CONFIG_H


	)

36 
	~<limôs.h
>

37 #i‡
CHAR_BIT
 != 8

41 #i‡
deföed
(
_WIN32
)

42 #i‡!
deföed
(
MBEDTLS_PLATFORM_C
)

48 #i‡!
deföed
(
MBEDTLS_PLATFORM_SNPRINTF_ALT
) && \

49 !
	$deföed
(
MBEDTLS_PLATFORM_SNPRINTF_MACRO
)

50 
	#MBEDTLS_PLATFORM_SNPRINTF_ALT


	)

54 #i‡
	`deföed
(
TARGET_LIKE_MBED
) && \

55 –
	`deföed
(
MBEDTLS_NET_C
Ë|| 
	$deföed
(
MBEDTLS_TIMING_C
) )

59 #i‡
	`deföed
(
MBEDTLS_DEPRECATED_WARNING
) && \

60 !
	`deföed
(
__GNUC__
Ë&& !
	$deföed
(
__˛™g__
)

64 #i‡
	`deföed
(
MBEDTLS_HAVE_TIME_DATE
Ë&& !deföed(
MBEDTLS_HAVE_TIME
)

68 #i‡
	`deföed
(
MBEDTLS_AESNI_C
Ë&& !deföed(
MBEDTLS_HAVE_ASM
)

72 #i‡
	`deföed
(
MBEDTLS_CTR_DRBG_C
Ë&& !deföed(
MBEDTLS_AES_C
)

76 #i‡
	`deföed
(
MBEDTLS_DHM_C
Ë&& !deföed(
MBEDTLS_BIGNUM_C
)

80 #i‡
	`deföed
(
MBEDTLS_ECDH_C
Ë&& !deföed(
MBEDTLS_ECP_C
)

84 #i‡
	`deföed
(
MBEDTLS_ECDSA_C
) && \

85 –!
	`deföed
(
MBEDTLS_ECP_C
) || \

86 !
	`deföed
(
MBEDTLS_ASN1_PARSE_C
) || \

87 !
	$deföed
(
MBEDTLS_ASN1_WRITE_C
) )

91 #i‡
	`deföed
(
MBEDTLS_ECJPAKE_C
) && \

92 –!
	`deföed
(
MBEDTLS_ECP_C
Ë|| !
	$deföed
(
MBEDTLS_MD_C
) )

96 #i‡
	`deföed
(
MBEDTLS_ECDSA_DETERMINISTIC
Ë&& !deföed(
MBEDTLS_HMAC_DRBG_C
)

100 #i‡
	`deföed
(
MBEDTLS_ECP_C
Ë&& ( !deföed(
MBEDTLS_BIGNUM_C
) || ( \

101 !
	`deföed
(
MBEDTLS_ECP_DP_SECP192R1_ENABLED
) && \

102 !
	`deföed
(
MBEDTLS_ECP_DP_SECP224R1_ENABLED
) && \

103 !
	`deföed
(
MBEDTLS_ECP_DP_SECP256R1_ENABLED
) && \

104 !
	`deföed
(
MBEDTLS_ECP_DP_SECP384R1_ENABLED
) && \

105 !
	`deföed
(
MBEDTLS_ECP_DP_SECP521R1_ENABLED
) && \

106 !
	`deföed
(
MBEDTLS_ECP_DP_BP256R1_ENABLED
) && \

107 !
	`deföed
(
MBEDTLS_ECP_DP_BP384R1_ENABLED
) && \

108 !
	`deföed
(
MBEDTLS_ECP_DP_BP512R1_ENABLED
) && \

109 !
	`deföed
(
MBEDTLS_ECP_DP_SECP192K1_ENABLED
) && \

110 !
	`deföed
(
MBEDTLS_ECP_DP_SECP224K1_ENABLED
) && \

111 !
	$deföed
(
MBEDTLS_ECP_DP_SECP256K1_ENABLED
) ) )

115 #i‡
	`deföed
(
MBEDTLS_ENTROPY_C
Ë&& (!deföed(
MBEDTLS_SHA512_C
) && \

116 !
	$deföed
(
MBEDTLS_SHA256_C
))

119 #i‡
	`deföed
(
MBEDTLS_ENTROPY_C
Ë&& deföed(
MBEDTLS_SHA512_C
) && \

120 
	`deföed
(
MBEDTLS_CTR_DRBG_ENTROPY_LEN
) && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 64)

123 #i‡
	`deföed
(
MBEDTLS_ENTROPY_C
) && \

124 –!
	`deföed
(
MBEDTLS_SHA512_C
Ë|| deföed(
MBEDTLS_ENTROPY_FORCE_SHA256
) ) \

125 && 
	`deföed
(
MBEDTLS_CTR_DRBG_ENTROPY_LEN
) && (MBEDTLS_CTR_DRBG_ENTROPY_LEN > 32)

128 #i‡
	`deföed
(
MBEDTLS_ENTROPY_C
) && \

129 
	`deföed
(
MBEDTLS_ENTROPY_FORCE_SHA256
Ë&& !
	$deföed
(
MBEDTLS_SHA256_C
)

133 #i‡
	`deföed
(
MBEDTLS_TEST_NULL_ENTROPY
) && \

134 –!
	`deföed
(
MBEDTLS_ENTROPY_C
Ë|| !
	$deföed
(
MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES
) )

137 #i‡
	`deföed
(
MBEDTLS_TEST_NULL_ENTROPY
) && \

138 –
	`deföed
(
MBEDTLS_ENTROPY_NV_SEED
Ë|| deföed(
MBEDTLS_ENTROPY_HARDWARE_ALT
) || \

139 
	$deföed
(
MBEDTLS_HAVEGE_C
) )

143 #i‡
	`deföed
(
MBEDTLS_GCM_C
) && ( \

144 !
	`deföed
(
MBEDTLS_AES_C
Ë&& !
	$deföed
(
MBEDTLS_CAMELLIA_C
) )

148 #i‡
	`deföed
(
MBEDTLS_HAVEGE_C
Ë&& !deföed(
MBEDTLS_TIMING_C
)

152 #i‡
	`deföed
(
MBEDTLS_HMAC_DRBG_C
Ë&& !deföed(
MBEDTLS_MD_C
)

156 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
) && \

157 –!
	`deföed
(
MBEDTLS_ECDH_C
Ë|| !
	$deföed
(
MBEDTLS_X509_CRT_PARSE_C
) )

161 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
) && \

162 –!
	`deföed
(
MBEDTLS_ECDH_C
Ë|| !
	$deföed
(
MBEDTLS_X509_CRT_PARSE_C
) )

166 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
Ë&& !deföed(
MBEDTLS_DHM_C
)

170 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
) && \

171 !
	$deföed
(
MBEDTLS_ECDH_C
)

175 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
) && \

176 –!
	`deföed
(
MBEDTLS_DHM_C
Ë|| !deföed(
MBEDTLS_RSA_C
) || \

177 !
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
Ë|| !
	$deföed
(
MBEDTLS_PKCS1_V15
) )

181 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
) && \

182 –!
	`deföed
(
MBEDTLS_ECDH_C
Ë|| !deföed(
MBEDTLS_RSA_C
) || \

183 !
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
Ë|| !
	$deföed
(
MBEDTLS_PKCS1_V15
) )

187 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
) && \

188 –!
	`deföed
(
MBEDTLS_ECDH_C
Ë|| !deföed(
MBEDTLS_ECDSA_C
) || \

189 !
	$deföed
(
MBEDTLS_X509_CRT_PARSE_C
) )

193 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
) && \

194 –!
	`deföed
(
MBEDTLS_RSA_C
Ë|| !deföed(
MBEDTLS_X509_CRT_PARSE_C
) || \

195 !
	$deföed
(
MBEDTLS_PKCS1_V15
) )

199 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
) && \

200 –!
	`deföed
(
MBEDTLS_RSA_C
Ë|| !deföed(
MBEDTLS_X509_CRT_PARSE_C
) || \

201 !
	$deföed
(
MBEDTLS_PKCS1_V15
) )

205 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
) && \

206 –!
	`deföed
(
MBEDTLS_ECJPAKE_C
Ë|| !deföed(
MBEDTLS_SHA256_C
) || \

207 !
	$deföed
(
MBEDTLS_ECP_DP_SECP256R1_ENABLED
) )

211 #i‡
	`deföed
(
MBEDTLS_MEMORY_BUFFER_ALLOC_C
) && \

212 –!
	`deföed
(
MBEDTLS_PLATFORM_C
Ë|| !
	$deföed
(
MBEDTLS_PLATFORM_MEMORY
) )

216 #i‡
	`deföed
(
MBEDTLS_PADLOCK_C
Ë&& !deföed(
MBEDTLS_HAVE_ASM
)

220 #i‡
	`deföed
(
MBEDTLS_PEM_PARSE_C
Ë&& !deföed(
MBEDTLS_BASE64_C
)

224 #i‡
	`deföed
(
MBEDTLS_PEM_WRITE_C
Ë&& !deföed(
MBEDTLS_BASE64_C
)

228 #i‡
	`deföed
(
MBEDTLS_PK_C
) && \

229 –!
	`deföed
(
MBEDTLS_RSA_C
Ë&& !
	$deföed
(
MBEDTLS_ECP_C
) )

233 #i‡
	`deföed
(
MBEDTLS_PK_PARSE_C
Ë&& !deföed(
MBEDTLS_PK_C
)

237 #i‡
	`deföed
(
MBEDTLS_PK_WRITE_C
Ë&& !deföed(
MBEDTLS_PK_C
)

241 #i‡
	`deföed
(
MBEDTLS_PKCS11_C
Ë&& !deföed(
MBEDTLS_PK_C
)

245 #i‡
	`deföed
(
MBEDTLS_PLATFORM_EXIT_ALT
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

249 #i‡
	`deföed
(
MBEDTLS_PLATFORM_EXIT_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

253 #i‡
	`deföed
(
MBEDTLS_PLATFORM_EXIT_MACRO
) &&\

254 –
	`deföed
(
MBEDTLS_PLATFORM_STD_EXIT
) ||\

255 
	$deföed
(
MBEDTLS_PLATFORM_EXIT_ALT
) )

259 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FPRINTF_ALT
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

263 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FPRINTF_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

267 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FPRINTF_MACRO
) &&\

268 –
	`deföed
(
MBEDTLS_PLATFORM_STD_FPRINTF
) ||\

269 
	$deföed
(
MBEDTLS_PLATFORM_FPRINTF_ALT
) )

273 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FREE_MACRO
) &&\

274 –!
	`deföed
(
MBEDTLS_PLATFORM_C
Ë|| !
	$deföed
(
MBEDTLS_PLATFORM_MEMORY
) )

278 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FREE_MACRO
) &&\

279 
	$deföed
(
MBEDTLS_PLATFORM_STD_FREE
)

283 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FREE_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_CALLOC_MACRO
)

287 #i‡
	`deföed
(
MBEDTLS_PLATFORM_CALLOC_MACRO
) &&\

288 –!
	`deföed
(
MBEDTLS_PLATFORM_C
Ë|| !
	$deföed
(
MBEDTLS_PLATFORM_MEMORY
) )

292 #i‡
	`deföed
(
MBEDTLS_PLATFORM_CALLOC_MACRO
) &&\

293 
	$deföed
(
MBEDTLS_PLATFORM_STD_CALLOC
)

297 #i‡
	`deföed
(
MBEDTLS_PLATFORM_CALLOC_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_FREE_MACRO
)

301 #i‡
	`deföed
(
MBEDTLS_PLATFORM_MEMORY
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

305 #i‡
	`deföed
(
MBEDTLS_PLATFORM_PRINTF_ALT
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

309 #i‡
	`deföed
(
MBEDTLS_PLATFORM_PRINTF_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

313 #i‡
	`deföed
(
MBEDTLS_PLATFORM_PRINTF_MACRO
) &&\

314 –
	`deföed
(
MBEDTLS_PLATFORM_STD_PRINTF
) ||\

315 
	$deföed
(
MBEDTLS_PLATFORM_PRINTF_ALT
) )

319 #i‡
	`deföed
(
MBEDTLS_PLATFORM_SNPRINTF_ALT
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

323 #i‡
	`deföed
(
MBEDTLS_PLATFORM_SNPRINTF_MACRO
Ë&& !deföed(
MBEDTLS_PLATFORM_C
)

327 #i‡
	`deföed
(
MBEDTLS_PLATFORM_SNPRINTF_MACRO
) &&\

328 –
	`deföed
(
MBEDTLS_PLATFORM_STD_SNPRINTF
) ||\

329 
	$deföed
(
MBEDTLS_PLATFORM_SNPRINTF_ALT
) )

333 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_MEM_HDR
) &&\

334 !
	$deföed
(
MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
)

338 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_CALLOC
Ë&& !deföed(
MBEDTLS_PLATFORM_MEMORY
)

342 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_CALLOC
Ë&& !deföed(
MBEDTLS_PLATFORM_MEMORY
)

346 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_FREE
Ë&& !deföed(
MBEDTLS_PLATFORM_MEMORY
)

350 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_EXIT
) &&\

351 !
	$deföed
(
MBEDTLS_PLATFORM_EXIT_ALT
)

355 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_FPRINTF
) &&\

356 !
	$deföed
(
MBEDTLS_PLATFORM_FPRINTF_ALT
)

360 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_PRINTF
) &&\

361 !
	$deföed
(
MBEDTLS_PLATFORM_PRINTF_ALT
)

365 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_SNPRINTF
) &&\

366 !
	$deföed
(
MBEDTLS_PLATFORM_SNPRINTF_ALT
)

370 #i‡
	`deföed
(
MBEDTLS_ENTROPY_NV_SEED
) &&\

371 –!
	`deföed
(
MBEDTLS_PLATFORM_C
Ë|| !
	$deföed
(
MBEDTLS_ENTROPY_C
) )

375 #i‡
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
) &&\

376 !
	$deföed
(
MBEDTLS_ENTROPY_NV_SEED
)

380 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_READ
) &&\

381 !
	$deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
)

385 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_WRITE
) &&\

386 !
	$deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
)

390 #i‡
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_READ_MACRO
) &&\

391 –
	`deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_READ
) ||\

392 
	$deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
) )

396 #i‡
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO
) &&\

397 –
	`deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_WRITE
) ||\

398 
	$deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
) )

402 #i‡
	`deföed
(
MBEDTLS_RSA_C
Ë&& ( !deföed(
MBEDTLS_BIGNUM_C
) || \

403 !
	$deföed
(
MBEDTLS_OID_C
) )

407 #i‡
	`deföed
(
MBEDTLS_RSA_C
Ë&& ( !deföed(
MBEDTLS_PKCS1_V21
) && \

408 !
	$deföed
(
MBEDTLS_PKCS1_V15
) )

412 #i‡
	`deföed
(
MBEDTLS_X509_RSASSA_PSS_SUPPORT
) && \

413 –!
	`deföed
(
MBEDTLS_RSA_C
Ë|| !
	$deföed
(
MBEDTLS_PKCS1_V21
) )

417 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
Ë&& ( !deföed(
MBEDTLS_MD5_C
) || \

418 !
	$deföed
(
MBEDTLS_SHA1_C
) )

422 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
Ë&& ( !deföed(
MBEDTLS_MD5_C
) || \

423 !
	$deföed
(
MBEDTLS_SHA1_C
) )

427 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
Ë&& ( !deföed(
MBEDTLS_MD5_C
) || \

428 !
	$deföed
(
MBEDTLS_SHA1_C
) )

432 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
Ë&& ( !deföed(
MBEDTLS_SHA1_C
) && \

433 !
	`deföed
(
MBEDTLS_SHA256_C
Ë&& !
	$deföed
(
MBEDTLS_SHA512_C
) )

437 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
) && \

438 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
) && \

439 !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

443 #i‡
	`deföed
(
MBEDTLS_SSL_CLI_C
Ë&& !deföed(
MBEDTLS_SSL_TLS_C
)

447 #i‡
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë&& ( !deföed(
MBEDTLS_CIPHER_C
) || \

448 !
	$deföed
(
MBEDTLS_MD_C
) )

452 #i‡
	`deföed
(
MBEDTLS_SSL_SRV_C
Ë&& !deföed(
MBEDTLS_SSL_TLS_C
)

456 #i‡
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë&& (!deföed(
MBEDTLS_SSL_PROTO_SSL3
) && \

457 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
Ë&& !deföed(
MBEDTLS_SSL_PROTO_TLS1_1
) && \

458 !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
))

462 #i‡
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë&& (deföed(
MBEDTLS_SSL_PROTO_SSL3
) && \

463 
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
Ë&& !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1
))

467 #i‡
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë&& (deföed(
MBEDTLS_SSL_PROTO_TLS1
) && \

468 
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
Ë&& !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
))

472 #i‡
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë&& (deföed(
MBEDTLS_SSL_PROTO_SSL3
) && \

473 
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
Ë&& (!deföed(
MBEDTLS_SSL_PROTO_TLS1
) || \

474 !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
)))

478 #i‡
	`deföed
(
MBEDTLS_SSL_DTLS_HELLO_VERIFY
Ë&& !deföed(
MBEDTLS_SSL_PROTO_DTLS
)

482 #i‡
	`deföed
(
MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
) && \

483 !
	$deföed
(
MBEDTLS_SSL_DTLS_HELLO_VERIFY
)

487 #i‡
	`deföed
(
MBEDTLS_SSL_DTLS_ANTI_REPLAY
) && \

488 –!
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë|| !
	$deföed
(
MBEDTLS_SSL_PROTO_DTLS
) )

492 #i‡
	`deföed
(
MBEDTLS_SSL_DTLS_BADMAC_LIMIT
) && \

493 –!
	`deföed
(
MBEDTLS_SSL_TLS_C
Ë|| !
	$deföed
(
MBEDTLS_SSL_PROTO_DTLS
) )

497 #i‡
	`deföed
(
MBEDTLS_SSL_ENCRYPT_THEN_MAC
) && \

498 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
) && \

499 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
) && \

500 !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

504 #i‡
	`deföed
(
MBEDTLS_SSL_EXTENDED_MASTER_SECRET
) && \

505 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
) && \

506 !
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
) && \

507 !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

511 #i‡
	`deföed
(
MBEDTLS_SSL_TICKET_C
Ë&& !deföed(
MBEDTLS_CIPHER_C
)

515 #i‡
	`deföed
(
MBEDTLS_SSL_CBC_RECORD_SPLITTING
) && \

516 !
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
Ë&& !
	$deföed
(
MBEDTLS_SSL_PROTO_TLS1
)

520 #i‡
	`deföed
(
MBEDTLS_SSL_SERVER_NAME_INDICATION
) && \

521 !
	$deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

525 #i‡
	`deföed
(
MBEDTLS_THREADING_PTHREAD
)

526 #i‡!
	`deföed
(
MBEDTLS_THREADING_C
Ë|| deföed(
MBEDTLS_THREADING_IMPL
)

529 
	#MBEDTLS_THREADING_IMPL


	)

532 #i‡
	`deföed
(
MBEDTLS_THREADING_ALT
)

533 #i‡!
	`deföed
(
MBEDTLS_THREADING_C
Ë|| deföed(
MBEDTLS_THREADING_IMPL
)

536 
	#MBEDTLS_THREADING_IMPL


	)

539 #i‡
	`deföed
(
MBEDTLS_THREADING_C
Ë&& !deföed(
MBEDTLS_THREADING_IMPL
)

542 #unde‡
MBEDTLS_THREADING_IMPL


544 #i‡
	`deföed
(
MBEDTLS_VERSION_FEATURES
Ë&& !deföed(
MBEDTLS_VERSION_C
)

548 #i‡
	`deföed
(
MBEDTLS_X509_USE_C
Ë&& ( !deföed(
MBEDTLS_BIGNUM_C
) || \

549 !
	`deföed
(
MBEDTLS_OID_C
Ë|| !deföed(
MBEDTLS_ASN1_PARSE_C
) || \

550 !
	$deföed
(
MBEDTLS_PK_PARSE_C
) )

554 #i‡
	`deföed
(
MBEDTLS_X509_CREATE_C
Ë&& ( !deföed(
MBEDTLS_BIGNUM_C
) || \

555 !
	`deföed
(
MBEDTLS_OID_C
Ë|| !deföed(
MBEDTLS_ASN1_WRITE_C
) || \

556 !
	$deföed
(
MBEDTLS_PK_WRITE_C
) )

560 #i‡
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
Ë&& ( !deföed(
MBEDTLS_X509_USE_C
) )

564 #i‡
	`deföed
(
MBEDTLS_X509_CRL_PARSE_C
Ë&& ( !deföed(
MBEDTLS_X509_USE_C
) )

568 #i‡
	`deföed
(
MBEDTLS_X509_CSR_PARSE_C
Ë&& ( !deföed(
MBEDTLS_X509_USE_C
) )

572 #i‡
	`deföed
(
MBEDTLS_X509_CRT_WRITE_C
Ë&& ( !deföed(
MBEDTLS_X509_CREATE_C
) )

576 #i‡
	`deföed
(
MBEDTLS_X509_CSR_WRITE_C
Ë&& ( !deföed(
MBEDTLS_X509_CREATE_C
) )

585 
	tmbedés_iso_c_f‹bids_em±y_å™¶©i⁄_unôs
;

	@include_lib/net/mbedtls/cipher.h

26 #i‚de‡
MBEDTLS_CIPHER_H


27 
	#MBEDTLS_CIPHER_H


	)

29 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

30 
	~"mbedés/mbedés_c⁄fig.h
"

32 #ö˛udê
MBEDTLS_CONFIG_FILE


35 
	~<°ddef.h
>

37 #i‡
deföed
(
MBEDTLS_GCM_C
Ë|| deföed(
MBEDTLS_CCM_C
)

38 
	#MBEDTLS_CIPHER_MODE_AEAD


	)

41 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

42 
	#MBEDTLS_CIPHER_MODE_WITH_PADDING


	)

45 #i‡
deföed
(
MBEDTLS_ARC4_C
)

46 
	#MBEDTLS_CIPHER_MODE_STREAM


	)

49 #i‡–
deföed
(
__ARMCC_VERSION
Ë|| deföed(
_MSC_VER
) ) && \

50 !
deföed
(
ölöe
Ë&& !
	$deföed
(
__˝lu•lus
)

51 
	#ölöe
 
__ölöe


	)

54 
	#MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE
 -0x6080

	)

55 
	#MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA
 -0x6100

	)

56 
	#MBEDTLS_ERR_CIPHER_ALLOC_FAILED
 -0x6180

	)

57 
	#MBEDTLS_ERR_CIPHER_INVALID_PADDING
 -0x6200

	)

58 
	#MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED
 -0x6280

	)

59 
	#MBEDTLS_ERR_CIPHER_AUTH_FAILED
 -0x6300

	)

60 
	#MBEDTLS_ERR_CIPHER_INVALID_CONTEXT
 -0x6380

	)

62 
	#MBEDTLS_CIPHER_VARIABLE_IV_LEN
 0x01

	)

63 
	#MBEDTLS_CIPHER_VARIABLE_KEY_LEN
 0x02

	)

65 #ifde‡
__˝lu•lus


70 
MBEDTLS_CIPHER_ID_NONE
 = 0,

71 
MBEDTLS_CIPHER_ID_NULL
,

72 
MBEDTLS_CIPHER_ID_AES
,

73 
MBEDTLS_CIPHER_ID_DES
,

74 
MBEDTLS_CIPHER_ID_3DES
,

75 
MBEDTLS_CIPHER_ID_CAMELLIA
,

76 
MBEDTLS_CIPHER_ID_BLOWFISH
,

77 
MBEDTLS_CIPHER_ID_ARC4
,

78 } 
	tmbedés_cùhî_id_t
;

81 
MBEDTLS_CIPHER_NONE
 = 0,

82 
MBEDTLS_CIPHER_NULL
,

83 
MBEDTLS_CIPHER_AES_128_ECB
,

84 
MBEDTLS_CIPHER_AES_192_ECB
,

85 
MBEDTLS_CIPHER_AES_256_ECB
,

86 
MBEDTLS_CIPHER_AES_128_CBC
,

87 
MBEDTLS_CIPHER_AES_192_CBC
,

88 
MBEDTLS_CIPHER_AES_256_CBC
,

89 
MBEDTLS_CIPHER_AES_128_CFB128
,

90 
MBEDTLS_CIPHER_AES_192_CFB128
,

91 
MBEDTLS_CIPHER_AES_256_CFB128
,

92 
MBEDTLS_CIPHER_AES_128_CTR
,

93 
MBEDTLS_CIPHER_AES_192_CTR
,

94 
MBEDTLS_CIPHER_AES_256_CTR
,

95 
MBEDTLS_CIPHER_AES_128_GCM
,

96 
MBEDTLS_CIPHER_AES_192_GCM
,

97 
MBEDTLS_CIPHER_AES_256_GCM
,

98 
MBEDTLS_CIPHER_CAMELLIA_128_ECB
,

99 
MBEDTLS_CIPHER_CAMELLIA_192_ECB
,

100 
MBEDTLS_CIPHER_CAMELLIA_256_ECB
,

101 
MBEDTLS_CIPHER_CAMELLIA_128_CBC
,

102 
MBEDTLS_CIPHER_CAMELLIA_192_CBC
,

103 
MBEDTLS_CIPHER_CAMELLIA_256_CBC
,

104 
MBEDTLS_CIPHER_CAMELLIA_128_CFB128
,

105 
MBEDTLS_CIPHER_CAMELLIA_192_CFB128
,

106 
MBEDTLS_CIPHER_CAMELLIA_256_CFB128
,

107 
MBEDTLS_CIPHER_CAMELLIA_128_CTR
,

108 
MBEDTLS_CIPHER_CAMELLIA_192_CTR
,

109 
MBEDTLS_CIPHER_CAMELLIA_256_CTR
,

110 
MBEDTLS_CIPHER_CAMELLIA_128_GCM
,

111 
MBEDTLS_CIPHER_CAMELLIA_192_GCM
,

112 
MBEDTLS_CIPHER_CAMELLIA_256_GCM
,

113 
MBEDTLS_CIPHER_DES_ECB
,

114 
MBEDTLS_CIPHER_DES_CBC
,

115 
MBEDTLS_CIPHER_DES_EDE_ECB
,

116 
MBEDTLS_CIPHER_DES_EDE_CBC
,

117 
MBEDTLS_CIPHER_DES_EDE3_ECB
,

118 
MBEDTLS_CIPHER_DES_EDE3_CBC
,

119 
MBEDTLS_CIPHER_BLOWFISH_ECB
,

120 
MBEDTLS_CIPHER_BLOWFISH_CBC
,

121 
MBEDTLS_CIPHER_BLOWFISH_CFB64
,

122 
MBEDTLS_CIPHER_BLOWFISH_CTR
,

123 
MBEDTLS_CIPHER_ARC4_128
,

124 
MBEDTLS_CIPHER_AES_128_CCM
,

125 
MBEDTLS_CIPHER_AES_192_CCM
,

126 
MBEDTLS_CIPHER_AES_256_CCM
,

127 
MBEDTLS_CIPHER_CAMELLIA_128_CCM
,

128 
MBEDTLS_CIPHER_CAMELLIA_192_CCM
,

129 
MBEDTLS_CIPHER_CAMELLIA_256_CCM
,

130 } 
	tmbedés_cùhî_ty≥_t
;

133 
MBEDTLS_MODE_NONE
 = 0,

134 
MBEDTLS_MODE_ECB
,

135 
MBEDTLS_MODE_CBC
,

136 
MBEDTLS_MODE_CFB
,

137 
MBEDTLS_MODE_OFB
,

138 
MBEDTLS_MODE_CTR
,

139 
MBEDTLS_MODE_GCM
,

140 
MBEDTLS_MODE_STREAM
,

141 
MBEDTLS_MODE_CCM
,

142 } 
	tmbedés_cùhî_mode_t
;

145 
MBEDTLS_PADDING_PKCS7
 = 0,

146 
MBEDTLS_PADDING_ONE_AND_ZEROS
,

147 
MBEDTLS_PADDING_ZEROS_AND_LEN
,

148 
MBEDTLS_PADDING_ZEROS
,

149 
MBEDTLS_PADDING_NONE
,

150 } 
	tmbedés_cùhî_∑ddög_t
;

153 
MBEDTLS_OPERATION_NONE
 = -1,

154 
MBEDTLS_DECRYPT
 = 0,

155 
MBEDTLS_ENCRYPT
,

156 } 
	tmbedés_›î©i⁄_t
;

160 
MBEDTLS_KEY_LENGTH_NONE
 = 0,

162 
MBEDTLS_KEY_LENGTH_DES
 = 64,

164 
MBEDTLS_KEY_LENGTH_DES_EDE
 = 128,

166 
MBEDTLS_KEY_LENGTH_DES_EDE3
 = 192,

170 
	#MBEDTLS_MAX_IV_LENGTH
 16

	)

172 
	#MBEDTLS_MAX_BLOCK_LENGTH
 16

	)

177 
mbedés_cùhî_ba£_t
 
	tmbedés_cùhî_ba£_t
;

184 
mbedés_cùhî_ty≥_t
 
ty≥
;

187 
mbedés_cùhî_mode_t
 
mode
;

191 
key_bôÀn
;

194 c⁄° *
«me
;

198 
iv_size
;

201 
Êags
;

204 
block_size
;

207 c⁄° 
mbedés_cùhî_ba£_t
 *
ba£
;

209 } 
	tmbedés_cùhî_öfo_t
;

216 c⁄° 
mbedés_cùhî_öfo_t
 *
cùhî_öfo
;

219 
key_bôÀn
;

222 
mbedés_›î©i⁄_t
 
›î©i⁄
;

224 #i‡
	`deföed
(
MBEDTLS_CIPHER_MODE_WITH_PADDING
)

226 (*
add_∑ddög
)(*
ouçut
, 
size_t
 
ﬁí
, size_à
d©a_Àn
);

227 (*
gë_∑ddög
)(*
öput
, 
size_t
 
ûí
, size_à*
d©a_Àn
);

231 
u≈ro˚s£d_d©a
[
MBEDTLS_MAX_BLOCK_LENGTH
];

234 
size_t
 
u≈ro˚s£d_Àn
;

237 
iv
[
MBEDTLS_MAX_IV_LENGTH
];

240 
size_t
 
iv_size
;

243 *
cùhî_˘x
;

244 } 
	tmbedés_cùhî_c⁄ãxt_t
;

252 c⁄° *
	`mbedés_cùhî_li°
();

263 c⁄° 
mbedés_cùhî_öfo_t
 *
	`mbedés_cùhî_öfo_‰om_°rög
(c⁄° *
cùhî_«me
);

274 c⁄° 
mbedés_cùhî_öfo_t
 *
	`mbedés_cùhî_öfo_‰om_ty≥
(c⁄° 
mbedés_cùhî_ty≥_t
 
cùhî_ty≥
);

288 c⁄° 
mbedés_cùhî_öfo_t
 *
	`mbedés_cùhî_öfo_‰om_vÆues
(c⁄° 
mbedés_cùhî_id_t
 
cùhî_id
,

289 
key_bôÀn
,

290 c⁄° 
mbedés_cùhî_mode_t
 
mode
);

295 
	`mbedés_cùhî_öô
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
);

302 
	`mbedés_cùhî_‰ì
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
);

320 
	`mbedés_cùhî_£tup
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
, c⁄° 
mbedés_cùhî_öfo_t
 *
cùhî_öfo
);

330 
ölöe
 
	`mbedés_cùhî_gë_block_size
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

332 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

336  
˘x
->
cùhî_öfo
->
block_size
;

348 
ölöe
 
mbedés_cùhî_mode_t
 
	`mbedés_cùhî_gë_cùhî_mode
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

350 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

351  
MBEDTLS_MODE_NONE
;

354  
˘x
->
cùhî_öfo
->
mode
;

366 
ölöe
 
	`mbedés_cùhî_gë_iv_size
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

368 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

372 i‡(
˘x
->
iv_size
 != 0) {

373  (Ë
˘x
->
iv_size
;

376  (Ë
˘x
->
cùhî_öfo
->
iv_size
;

387 
ölöe
 
mbedés_cùhî_ty≥_t
 
	`mbedés_cùhî_gë_ty≥
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

389 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

390  
MBEDTLS_CIPHER_NONE
;

393  
˘x
->
cùhî_öfo
->
ty≥
;

403 
ölöe
 c⁄° *
	`mbedés_cùhî_gë_«me
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

405 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

409  
˘x
->
cùhî_öfo
->
«me
;

421 
ölöe
 
	`mbedés_cùhî_gë_key_bôÀn
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

423 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

424  
MBEDTLS_KEY_LENGTH_NONE
;

427  (Ë
˘x
->
cùhî_öfo
->
key_bôÀn
;

439 
ölöe
 
mbedés_›î©i⁄_t
 
	`mbedés_cùhî_gë_›î©i⁄
(c⁄° 
mbedés_cùhî_c⁄ãxt_t
 *
˘x
)

441 i‡(
NULL
 =
˘x
 || NULL =˘x->
cùhî_öfo
) {

442  
MBEDTLS_OPERATION_NONE
;

445  
˘x
->
›î©i⁄
;

463 
	`mbedés_cùhî_£tkey
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
, c⁄° *
key
,

464 
key_bôÀn
, c⁄° 
mbedés_›î©i⁄_t
 
›î©i⁄
);

466 #i‡
	`deföed
(
MBEDTLS_CIPHER_MODE_WITH_PADDING
)

479 
	`mbedés_cùhî_£t_∑ddög_mode
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
, 
mbedés_cùhî_∑ddög_t
 
mode
);

495 
	`mbedés_cùhî_£t_iv
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

496 c⁄° *
iv
, 
size_t
 
iv_Àn
);

506 
	`mbedés_cùhî_ª£t
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
);

508 #i‡
	`deföed
(
MBEDTLS_GCM_C
)

520 
	`mbedés_cùhî_upd©e_ad
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

521 c⁄° *
ad
, 
size_t
 
ad_Àn
);

553 
	`mbedés_cùhî_upd©e
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
, c⁄° *
öput
,

554 
size_t
 
ûí
, *
ouçut
, size_à*
ﬁí
);

573 
	`mbedés_cùhî_föish
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

574 *
ouçut
, 
size_t
 *
ﬁí
);

576 #i‡
	`deföed
(
MBEDTLS_GCM_C
)

588 
	`mbedés_cùhî_wrôe_èg
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

589 *
èg
, 
size_t
 
èg_Àn
);

602 
	`mbedés_cùhî_check_èg
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

603 c⁄° *
èg
, 
size_t
 
èg_Àn
);

633 
	`mbedés_cùhî_¸y±
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

634 c⁄° *
iv
, 
size_t
 
iv_Àn
,

635 c⁄° *
öput
, 
size_t
 
ûí
,

636 *
ouçut
, 
size_t
 *
ﬁí
);

638 #i‡
	`deföed
(
MBEDTLS_CIPHER_MODE_AEAD
)

661 
	`mbedés_cùhî_auth_í¸y±
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

662 c⁄° *
iv
, 
size_t
 
iv_Àn
,

663 c⁄° *
ad
, 
size_t
 
ad_Àn
,

664 c⁄° *
öput
, 
size_t
 
ûí
,

665 *
ouçut
, 
size_t
 *
ﬁí
,

666 *
èg
, 
size_t
 
èg_Àn
);

695 
	`mbedés_cùhî_auth_de¸y±
(
mbedés_cùhî_c⁄ãxt_t
 *
˘x
,

696 c⁄° *
iv
, 
size_t
 
iv_Àn
,

697 c⁄° *
ad
, 
size_t
 
ad_Àn
,

698 c⁄° *
öput
, 
size_t
 
ûí
,

699 *
ouçut
, 
size_t
 *
ﬁí
,

700 c⁄° *
èg
, 
size_t
 
èg_Àn
);

703 #ifde‡
__˝lu•lus


704 
	}
}

	@include_lib/net/mbedtls/cipher_internal.h

25 #i‚de‡
MBEDTLS_CIPHER_WRAP_H


26 
	#MBEDTLS_CIPHER_WRAP_H


	)

28 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

29 
	~"mbedés/mbedés_c⁄fig.h
"

31 #ö˛udê
MBEDTLS_CONFIG_FILE


34 
	~"cùhî.h
"

36 #ifde‡
__˝lu•lus


43 
	smbedés_cùhî_ba£_t
 {

45 
mbedés_cùhî_id_t
 
cùhî
;

48 (*
ecb_func
)(*
˘x
, 
mbedés_›î©i⁄_t
 
mode
,

49 c⁄° *
öput
, *
ouçut
);

51 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

53 (*
cbc_func
)(*
˘x
, 
mbedés_›î©i⁄_t
 
mode
, 
size_t
 
Àngth
,

54 *
iv
, c⁄° *
öput
,

55 *
ouçut
);

58 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CFB
)

60 (*
cfb_func
)(*
˘x
, 
mbedés_›î©i⁄_t
 
mode
, 
size_t
 
Àngth
, size_à*
iv_off
,

61 *
iv
, c⁄° *
öput
,

62 *
ouçut
);

65 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CTR
)

67 (*
˘r_func
)(*
˘x
, 
size_t
 
Àngth
, size_à*
nc_off
,

68 *
n⁄˚_cou¡î
, *
°ªam_block
,

69 c⁄° *
öput
, *
ouçut
);

72 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_STREAM
)

74 (*
°ªam_func
)(*
˘x
, 
size_t
 
Àngth
,

75 c⁄° *
öput
, *
ouçut
);

79 (*
£tkey_íc_func
)(*
˘x
, c⁄° *
key
,

80 
key_bôÀn
);

83 (*
£tkey_dec_func
)(*
˘x
, c⁄° *
key
,

84 
key_bôÀn
);

87 *(*
˘x_Æloc_func
)();

90 (*
˘x_‰ì_func
)(*
˘x
);

95 
mbedés_cùhî_ty≥_t
 
ty≥
;

96 c⁄° 
mbedés_cùhî_öfo_t
 *
öfo
;

97 } 
	tmbedés_cùhî_deföôi⁄_t
;

99 c⁄° 
mbedés_cùhî_deföôi⁄_t
 
mbedés_cùhî_deföôi⁄s
[];

101 
mbedés_cùhî_suµ‹ãd
[];

103 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/compat-1.3.h

27 #i‡! 
deföed
(
MBEDTLS_DEPRECATED_REMOVED
)

29 #i‡
deföed
(
MBEDTLS_DEPRECATED_WARNING
)

33 #i‚de‡
MBEDTLS_COMPAT13_H


34 
	#MBEDTLS_COMPAT13_H


	)

39 #i‡
deföed
 
MBEDTLS_AESNI_C


40 
	#POLARSSL_AESNI_C
 
MBEDTLS_AESNI_C


	)

42 #i‡
deföed
 
MBEDTLS_AES_ALT


43 
	#POLARSSL_AES_ALT
 
MBEDTLS_AES_ALT


	)

45 #i‡
deföed
 
MBEDTLS_AES_C


46 
	#POLARSSL_AES_C
 
MBEDTLS_AES_C


	)

48 #i‡
deföed
 
MBEDTLS_AES_ROM_TABLES


49 
	#POLARSSL_AES_ROM_TABLES
 
MBEDTLS_AES_ROM_TABLES


	)

51 #i‡
deföed
 
MBEDTLS_ARC4_ALT


52 
	#POLARSSL_ARC4_ALT
 
MBEDTLS_ARC4_ALT


	)

54 #i‡
deföed
 
MBEDTLS_ARC4_C


55 
	#POLARSSL_ARC4_C
 
MBEDTLS_ARC4_C


	)

57 #i‡
deföed
 
MBEDTLS_ASN1_PARSE_C


58 
	#POLARSSL_ASN1_PARSE_C
 
MBEDTLS_ASN1_PARSE_C


	)

60 #i‡
deföed
 
MBEDTLS_ASN1_WRITE_C


61 
	#POLARSSL_ASN1_WRITE_C
 
MBEDTLS_ASN1_WRITE_C


	)

63 #i‡
deföed
 
MBEDTLS_BASE64_C


64 
	#POLARSSL_BASE64_C
 
MBEDTLS_BASE64_C


	)

66 #i‡
deföed
 
MBEDTLS_BIGNUM_C


67 
	#POLARSSL_BIGNUM_C
 
MBEDTLS_BIGNUM_C


	)

69 #i‡
deföed
 
MBEDTLS_BLOWFISH_ALT


70 
	#POLARSSL_BLOWFISH_ALT
 
MBEDTLS_BLOWFISH_ALT


	)

72 #i‡
deföed
 
MBEDTLS_BLOWFISH_C


73 
	#POLARSSL_BLOWFISH_C
 
MBEDTLS_BLOWFISH_C


	)

75 #i‡
deföed
 
MBEDTLS_CAMELLIA_ALT


76 
	#POLARSSL_CAMELLIA_ALT
 
MBEDTLS_CAMELLIA_ALT


	)

78 #i‡
deföed
 
MBEDTLS_CAMELLIA_C


79 
	#POLARSSL_CAMELLIA_C
 
MBEDTLS_CAMELLIA_C


	)

81 #i‡
deföed
 
MBEDTLS_CAMELLIA_SMALL_MEMORY


82 
	#POLARSSL_CAMELLIA_SMALL_MEMORY
 
MBEDTLS_CAMELLIA_SMALL_MEMORY


	)

84 #i‡
deföed
 
MBEDTLS_CCM_C


85 
	#POLARSSL_CCM_C
 
MBEDTLS_CCM_C


	)

87 #i‡
deföed
 
MBEDTLS_CERTS_C


88 
	#POLARSSL_CERTS_C
 
MBEDTLS_CERTS_C


	)

90 #i‡
deföed
 
MBEDTLS_CIPHER_C


91 
	#POLARSSL_CIPHER_C
 
MBEDTLS_CIPHER_C


	)

93 #i‡
deföed
 
MBEDTLS_CIPHER_MODE_CBC


94 
	#POLARSSL_CIPHER_MODE_CBC
 
MBEDTLS_CIPHER_MODE_CBC


	)

96 #i‡
deföed
 
MBEDTLS_CIPHER_MODE_CFB


97 
	#POLARSSL_CIPHER_MODE_CFB
 
MBEDTLS_CIPHER_MODE_CFB


	)

99 #i‡
deföed
 
MBEDTLS_CIPHER_MODE_CTR


100 
	#POLARSSL_CIPHER_MODE_CTR
 
MBEDTLS_CIPHER_MODE_CTR


	)

102 #i‡
deföed
 
MBEDTLS_CIPHER_NULL_CIPHER


103 
	#POLARSSL_CIPHER_NULL_CIPHER
 
MBEDTLS_CIPHER_NULL_CIPHER


	)

105 #i‡
deföed
 
MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS


106 
	#POLARSSL_CIPHER_PADDING_ONE_AND_ZEROS
 
MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS


	)

108 #i‡
deföed
 
MBEDTLS_CIPHER_PADDING_PKCS7


109 
	#POLARSSL_CIPHER_PADDING_PKCS7
 
MBEDTLS_CIPHER_PADDING_PKCS7


	)

111 #i‡
deföed
 
MBEDTLS_CIPHER_PADDING_ZEROS


112 
	#POLARSSL_CIPHER_PADDING_ZEROS
 
MBEDTLS_CIPHER_PADDING_ZEROS


	)

114 #i‡
deföed
 
MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN


115 
	#POLARSSL_CIPHER_PADDING_ZEROS_AND_LEN
 
MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN


	)

117 #i‡
deföed
 
MBEDTLS_CTR_DRBG_C


118 
	#POLARSSL_CTR_DRBG_C
 
MBEDTLS_CTR_DRBG_C


	)

120 #i‡
deföed
 
MBEDTLS_DEBUG_C


121 
	#POLARSSL_DEBUG_C
 
MBEDTLS_DEBUG_C


	)

123 #i‡
deföed
 
MBEDTLS_DEPRECATED_REMOVED


124 
	#POLARSSL_DEPRECATED_REMOVED
 
MBEDTLS_DEPRECATED_REMOVED


	)

126 #i‡
deföed
 
MBEDTLS_DEPRECATED_WARNING


127 
	#POLARSSL_DEPRECATED_WARNING
 
MBEDTLS_DEPRECATED_WARNING


	)

129 #i‡
deföed
 
MBEDTLS_DES_ALT


130 
	#POLARSSL_DES_ALT
 
MBEDTLS_DES_ALT


	)

132 #i‡
deföed
 
MBEDTLS_DES_C


133 
	#POLARSSL_DES_C
 
MBEDTLS_DES_C


	)

135 #i‡
deföed
 
MBEDTLS_DHM_C


136 
	#POLARSSL_DHM_C
 
MBEDTLS_DHM_C


	)

138 #i‡
deföed
 
MBEDTLS_ECDH_C


139 
	#POLARSSL_ECDH_C
 
MBEDTLS_ECDH_C


	)

141 #i‡
deföed
 
MBEDTLS_ECDSA_C


142 
	#POLARSSL_ECDSA_C
 
MBEDTLS_ECDSA_C


	)

144 #i‡
deföed
 
MBEDTLS_ECDSA_DETERMINISTIC


145 
	#POLARSSL_ECDSA_DETERMINISTIC
 
MBEDTLS_ECDSA_DETERMINISTIC


	)

147 #i‡
deföed
 
MBEDTLS_ECP_C


148 
	#POLARSSL_ECP_C
 
MBEDTLS_ECP_C


	)

150 #i‡
deföed
 
MBEDTLS_ECP_DP_BP256R1_ENABLED


151 
	#POLARSSL_ECP_DP_BP256R1_ENABLED
 
MBEDTLS_ECP_DP_BP256R1_ENABLED


	)

153 #i‡
deföed
 
MBEDTLS_ECP_DP_BP384R1_ENABLED


154 
	#POLARSSL_ECP_DP_BP384R1_ENABLED
 
MBEDTLS_ECP_DP_BP384R1_ENABLED


	)

156 #i‡
deföed
 
MBEDTLS_ECP_DP_BP512R1_ENABLED


157 
	#POLARSSL_ECP_DP_BP512R1_ENABLED
 
MBEDTLS_ECP_DP_BP512R1_ENABLED


	)

159 #i‡
deföed
 
MBEDTLS_ECP_DP_CURVE25519_ENABLED


160 
	#POLARSSL_ECP_DP_M255_ENABLED
 
MBEDTLS_ECP_DP_CURVE25519_ENABLED


	)

162 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP192K1_ENABLED


163 
	#POLARSSL_ECP_DP_SECP192K1_ENABLED
 
MBEDTLS_ECP_DP_SECP192K1_ENABLED


	)

165 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP192R1_ENABLED


166 
	#POLARSSL_ECP_DP_SECP192R1_ENABLED
 
MBEDTLS_ECP_DP_SECP192R1_ENABLED


	)

168 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP224K1_ENABLED


169 
	#POLARSSL_ECP_DP_SECP224K1_ENABLED
 
MBEDTLS_ECP_DP_SECP224K1_ENABLED


	)

171 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP224R1_ENABLED


172 
	#POLARSSL_ECP_DP_SECP224R1_ENABLED
 
MBEDTLS_ECP_DP_SECP224R1_ENABLED


	)

174 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP256K1_ENABLED


175 
	#POLARSSL_ECP_DP_SECP256K1_ENABLED
 
MBEDTLS_ECP_DP_SECP256K1_ENABLED


	)

177 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP256R1_ENABLED


178 
	#POLARSSL_ECP_DP_SECP256R1_ENABLED
 
MBEDTLS_ECP_DP_SECP256R1_ENABLED


	)

180 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP384R1_ENABLED


181 
	#POLARSSL_ECP_DP_SECP384R1_ENABLED
 
MBEDTLS_ECP_DP_SECP384R1_ENABLED


	)

183 #i‡
deföed
 
MBEDTLS_ECP_DP_SECP521R1_ENABLED


184 
	#POLARSSL_ECP_DP_SECP521R1_ENABLED
 
MBEDTLS_ECP_DP_SECP521R1_ENABLED


	)

186 #i‡
deföed
 
MBEDTLS_ECP_FIXED_POINT_OPTIM


187 
	#POLARSSL_ECP_FIXED_POINT_OPTIM
 
MBEDTLS_ECP_FIXED_POINT_OPTIM


	)

189 #i‡
deföed
 
MBEDTLS_ECP_MAX_BITS


190 
	#POLARSSL_ECP_MAX_BITS
 
MBEDTLS_ECP_MAX_BITS


	)

192 #i‡
deföed
 
MBEDTLS_ECP_NIST_OPTIM


193 
	#POLARSSL_ECP_NIST_OPTIM
 
MBEDTLS_ECP_NIST_OPTIM


	)

195 #i‡
deföed
 
MBEDTLS_ECP_WINDOW_SIZE


196 
	#POLARSSL_ECP_WINDOW_SIZE
 
MBEDTLS_ECP_WINDOW_SIZE


	)

198 #i‡
deföed
 
MBEDTLS_ENABLE_WEAK_CIPHERSUITES


199 
	#POLARSSL_ENABLE_WEAK_CIPHERSUITES
 
MBEDTLS_ENABLE_WEAK_CIPHERSUITES


	)

201 #i‡
deföed
 
MBEDTLS_ENTROPY_C


202 
	#POLARSSL_ENTROPY_C
 
MBEDTLS_ENTROPY_C


	)

204 #i‡
deföed
 
MBEDTLS_ENTROPY_FORCE_SHA256


205 
	#POLARSSL_ENTROPY_FORCE_SHA256
 
MBEDTLS_ENTROPY_FORCE_SHA256


	)

207 #i‡
deföed
 
MBEDTLS_ERROR_C


208 
	#POLARSSL_ERROR_C
 
MBEDTLS_ERROR_C


	)

210 #i‡
deföed
 
MBEDTLS_ERROR_STRERROR_BC


211 
	#POLARSSL_ERROR_STRERROR_BC
 
MBEDTLS_ERROR_STRERROR_BC


	)

213 #i‡
deföed
 
MBEDTLS_ERROR_STRERROR_DUMMY


214 
	#POLARSSL_ERROR_STRERROR_DUMMY
 
MBEDTLS_ERROR_STRERROR_DUMMY


	)

216 #i‡
deföed
 
MBEDTLS_FS_IO


217 
	#POLARSSL_FS_IO
 
MBEDTLS_FS_IO


	)

219 #i‡
deföed
 
MBEDTLS_GCM_C


220 
	#POLARSSL_GCM_C
 
MBEDTLS_GCM_C


	)

222 #i‡
deföed
 
MBEDTLS_GENPRIME


223 
	#POLARSSL_GENPRIME
 
MBEDTLS_GENPRIME


	)

225 #i‡
deföed
 
MBEDTLS_HAVEGE_C


226 
	#POLARSSL_HAVEGE_C
 
MBEDTLS_HAVEGE_C


	)

228 #i‡
deföed
 
MBEDTLS_HAVE_ASM


229 
	#POLARSSL_HAVE_ASM
 
MBEDTLS_HAVE_ASM


	)

231 #i‡
deföed
 
MBEDTLS_HAVE_SSE2


232 
	#POLARSSL_HAVE_SSE2
 
MBEDTLS_HAVE_SSE2


	)

234 #i‡
deföed
 
MBEDTLS_HAVE_TIME


235 
	#POLARSSL_HAVE_TIME
 
MBEDTLS_HAVE_TIME


	)

237 #i‡
deföed
 
MBEDTLS_HMAC_DRBG_C


238 
	#POLARSSL_HMAC_DRBG_C
 
MBEDTLS_HMAC_DRBG_C


	)

240 #i‡
deföed
 
MBEDTLS_HMAC_DRBG_MAX_INPUT


241 
	#POLARSSL_HMAC_DRBG_MAX_INPUT
 
MBEDTLS_HMAC_DRBG_MAX_INPUT


	)

243 #i‡
deföed
 
MBEDTLS_HMAC_DRBG_MAX_REQUEST


244 
	#POLARSSL_HMAC_DRBG_MAX_REQUEST
 
MBEDTLS_HMAC_DRBG_MAX_REQUEST


	)

246 #i‡
deföed
 
MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT


247 
	#POLARSSL_HMAC_DRBG_MAX_SEED_INPUT
 
MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT


	)

249 #i‡
deföed
 
MBEDTLS_HMAC_DRBG_RESEED_INTERVAL


250 
	#POLARSSL_HMAC_DRBG_RESEED_INTERVAL
 
MBEDTLS_HMAC_DRBG_RESEED_INTERVAL


	)

252 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED


253 
	#POLARSSL_KEY_EXCHANGE_DHE_PSK_ENABLED
 
MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED


	)

255 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED


256 
	#POLARSSL_KEY_EXCHANGE_DHE_RSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED


	)

258 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


259 
	#POLARSSL_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


	)

261 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED


262 
	#POLARSSL_KEY_EXCHANGE_ECDHE_PSK_ENABLED
 
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED


	)

264 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED


265 
	#POLARSSL_KEY_EXCHANGE_ECDHE_RSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED


	)

267 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED


268 
	#POLARSSL_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED


	)

270 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED


271 
	#POLARSSL_KEY_EXCHANGE_ECDH_RSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED


	)

273 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


274 
	#POLARSSL_KEY_EXCHANGE_PSK_ENABLED
 
MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


	)

276 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


277 
	#POLARSSL_KEY_EXCHANGE_RSA_ENABLED
 
MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


	)

279 #i‡
deföed
 
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED


280 
	#POLARSSL_KEY_EXCHANGE_RSA_PSK_ENABLED
 
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED


	)

282 #i‡
deföed
 
MBEDTLS_MD2_ALT


283 
	#POLARSSL_MD2_ALT
 
MBEDTLS_MD2_ALT


	)

285 #i‡
deföed
 
MBEDTLS_MD2_C


286 
	#POLARSSL_MD2_C
 
MBEDTLS_MD2_C


	)

288 #i‡
deföed
 
MBEDTLS_MD2_PROCESS_ALT


289 
	#POLARSSL_MD2_PROCESS_ALT
 
MBEDTLS_MD2_PROCESS_ALT


	)

291 #i‡
deföed
 
MBEDTLS_MD4_ALT


292 
	#POLARSSL_MD4_ALT
 
MBEDTLS_MD4_ALT


	)

294 #i‡
deföed
 
MBEDTLS_MD4_C


295 
	#POLARSSL_MD4_C
 
MBEDTLS_MD4_C


	)

297 #i‡
deföed
 
MBEDTLS_MD4_PROCESS_ALT


298 
	#POLARSSL_MD4_PROCESS_ALT
 
MBEDTLS_MD4_PROCESS_ALT


	)

300 #i‡
deföed
 
MBEDTLS_MD5_ALT


301 
	#POLARSSL_MD5_ALT
 
MBEDTLS_MD5_ALT


	)

303 #i‡
deföed
 
MBEDTLS_MD5_C


304 
	#POLARSSL_MD5_C
 
MBEDTLS_MD5_C


	)

306 #i‡
deföed
 
MBEDTLS_MD5_PROCESS_ALT


307 
	#POLARSSL_MD5_PROCESS_ALT
 
MBEDTLS_MD5_PROCESS_ALT


	)

309 #i‡
deföed
 
MBEDTLS_MD_C


310 
	#POLARSSL_MD_C
 
MBEDTLS_MD_C


	)

312 #i‡
deföed
 
MBEDTLS_MEMORY_ALIGN_MULTIPLE


313 
	#POLARSSL_MEMORY_ALIGN_MULTIPLE
 
MBEDTLS_MEMORY_ALIGN_MULTIPLE


	)

315 #i‡
deföed
 
MBEDTLS_MEMORY_BACKTRACE


316 
	#POLARSSL_MEMORY_BACKTRACE
 
MBEDTLS_MEMORY_BACKTRACE


	)

318 #i‡
deföed
 
MBEDTLS_MEMORY_BUFFER_ALLOC_C


319 
	#POLARSSL_MEMORY_BUFFER_ALLOC_C
 
MBEDTLS_MEMORY_BUFFER_ALLOC_C


	)

321 #i‡
deföed
 
MBEDTLS_MEMORY_C


322 
	#POLARSSL_MEMORY_C
 
MBEDTLS_MEMORY_C


	)

324 #i‡
deföed
 
MBEDTLS_MEMORY_DEBUG


325 
	#POLARSSL_MEMORY_DEBUG
 
MBEDTLS_MEMORY_DEBUG


	)

327 #i‡
deföed
 
MBEDTLS_MPI_MAX_SIZE


328 
	#POLARSSL_MPI_MAX_SIZE
 
MBEDTLS_MPI_MAX_SIZE


	)

330 #i‡
deföed
 
MBEDTLS_MPI_WINDOW_SIZE


331 
	#POLARSSL_MPI_WINDOW_SIZE
 
MBEDTLS_MPI_WINDOW_SIZE


	)

333 #i‡
deföed
 
MBEDTLS_NET_C


334 
	#POLARSSL_NET_C
 
MBEDTLS_NET_C


	)

336 #i‡
deföed
 
MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES


337 
	#POLARSSL_NO_DEFAULT_ENTROPY_SOURCES
 
MBEDTLS_NO_DEFAULT_ENTROPY_SOURCES


	)

339 #i‡
deföed
 
MBEDTLS_NO_PLATFORM_ENTROPY


340 
	#POLARSSL_NO_PLATFORM_ENTROPY
 
MBEDTLS_NO_PLATFORM_ENTROPY


	)

342 #i‡
deföed
 
MBEDTLS_OID_C


343 
	#POLARSSL_OID_C
 
MBEDTLS_OID_C


	)

345 #i‡
deföed
 
MBEDTLS_PADLOCK_C


346 
	#POLARSSL_PADLOCK_C
 
MBEDTLS_PADLOCK_C


	)

348 #i‡
deföed
 
MBEDTLS_PBKDF2_C


349 
	#POLARSSL_PBKDF2_C
 
MBEDTLS_PBKDF2_C


	)

351 #i‡
deföed
 
MBEDTLS_PEM_PARSE_C


352 
	#POLARSSL_PEM_PARSE_C
 
MBEDTLS_PEM_PARSE_C


	)

354 #i‡
deföed
 
MBEDTLS_PEM_WRITE_C


355 
	#POLARSSL_PEM_WRITE_C
 
MBEDTLS_PEM_WRITE_C


	)

357 #i‡
deföed
 
MBEDTLS_PKCS11_C


358 
	#POLARSSL_PKCS11_C
 
MBEDTLS_PKCS11_C


	)

360 #i‡
deföed
 
MBEDTLS_PKCS12_C


361 
	#POLARSSL_PKCS12_C
 
MBEDTLS_PKCS12_C


	)

363 #i‡
deföed
 
MBEDTLS_PKCS1_V15


364 
	#POLARSSL_PKCS1_V15
 
MBEDTLS_PKCS1_V15


	)

366 #i‡
deföed
 
MBEDTLS_PKCS1_V21


367 
	#POLARSSL_PKCS1_V21
 
MBEDTLS_PKCS1_V21


	)

369 #i‡
deföed
 
MBEDTLS_PKCS5_C


370 
	#POLARSSL_PKCS5_C
 
MBEDTLS_PKCS5_C


	)

372 #i‡
deföed
 
MBEDTLS_PK_C


373 
	#POLARSSL_PK_C
 
MBEDTLS_PK_C


	)

375 #i‡
deföed
 
MBEDTLS_PK_PARSE_C


376 
	#POLARSSL_PK_PARSE_C
 
MBEDTLS_PK_PARSE_C


	)

378 #i‡
deföed
 
MBEDTLS_PK_PARSE_EC_EXTENDED


379 
	#POLARSSL_PK_PARSE_EC_EXTENDED
 
MBEDTLS_PK_PARSE_EC_EXTENDED


	)

381 #i‡
deföed
 
MBEDTLS_PK_RSA_ALT_SUPPORT


382 
	#POLARSSL_PK_RSA_ALT_SUPPORT
 
MBEDTLS_PK_RSA_ALT_SUPPORT


	)

384 #i‡
deföed
 
MBEDTLS_PK_WRITE_C


385 
	#POLARSSL_PK_WRITE_C
 
MBEDTLS_PK_WRITE_C


	)

387 #i‡
deföed
 
MBEDTLS_PLATFORM_C


388 
	#POLARSSL_PLATFORM_C
 
MBEDTLS_PLATFORM_C


	)

390 #i‡
deföed
 
MBEDTLS_PLATFORM_EXIT_ALT


391 
	#POLARSSL_PLATFORM_EXIT_ALT
 
MBEDTLS_PLATFORM_EXIT_ALT


	)

393 #i‡
deföed
 
MBEDTLS_PLATFORM_EXIT_MACRO


394 
	#POLARSSL_PLATFORM_EXIT_MACRO
 
MBEDTLS_PLATFORM_EXIT_MACRO


	)

396 #i‡
deföed
 
MBEDTLS_PLATFORM_FPRINTF_ALT


397 
	#POLARSSL_PLATFORM_FPRINTF_ALT
 
MBEDTLS_PLATFORM_FPRINTF_ALT


	)

399 #i‡
deföed
 
MBEDTLS_PLATFORM_FPRINTF_MACRO


400 
	#POLARSSL_PLATFORM_FPRINTF_MACRO
 
MBEDTLS_PLATFORM_FPRINTF_MACRO


	)

402 #i‡
deföed
 
MBEDTLS_PLATFORM_FREE_MACRO


403 
	#POLARSSL_PLATFORM_FREE_MACRO
 
MBEDTLS_PLATFORM_FREE_MACRO


	)

405 #i‡
deföed
 
MBEDTLS_PLATFORM_MEMORY


406 
	#POLARSSL_PLATFORM_MEMORY
 
MBEDTLS_PLATFORM_MEMORY


	)

408 #i‡
deföed
 
MBEDTLS_PLATFORM_NO_STD_FUNCTIONS


409 
	#POLARSSL_PLATFORM_NO_STD_FUNCTIONS
 
MBEDTLS_PLATFORM_NO_STD_FUNCTIONS


	)

411 #i‡
deföed
 
MBEDTLS_PLATFORM_PRINTF_ALT


412 
	#POLARSSL_PLATFORM_PRINTF_ALT
 
MBEDTLS_PLATFORM_PRINTF_ALT


	)

414 #i‡
deföed
 
MBEDTLS_PLATFORM_PRINTF_MACRO


415 
	#POLARSSL_PLATFORM_PRINTF_MACRO
 
MBEDTLS_PLATFORM_PRINTF_MACRO


	)

417 #i‡
deföed
 
MBEDTLS_PLATFORM_SNPRINTF_ALT


418 
	#POLARSSL_PLATFORM_SNPRINTF_ALT
 
MBEDTLS_PLATFORM_SNPRINTF_ALT


	)

420 #i‡
deföed
 
MBEDTLS_PLATFORM_SNPRINTF_MACRO


421 
	#POLARSSL_PLATFORM_SNPRINTF_MACRO
 
MBEDTLS_PLATFORM_SNPRINTF_MACRO


	)

423 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_EXIT


424 
	#POLARSSL_PLATFORM_STD_EXIT
 
MBEDTLS_PLATFORM_STD_EXIT


	)

426 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_FPRINTF


427 
	#POLARSSL_PLATFORM_STD_FPRINTF
 
MBEDTLS_PLATFORM_STD_FPRINTF


	)

429 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_FREE


430 
	#POLARSSL_PLATFORM_STD_FREE
 
MBEDTLS_PLATFORM_STD_FREE


	)

432 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_MALLOC


433 
	#POLARSSL_PLATFORM_STD_MALLOC
 
MBEDTLS_PLATFORM_STD_MALLOC


	)

435 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_MEM_HDR


436 
	#POLARSSL_PLATFORM_STD_MEM_HDR
 
MBEDTLS_PLATFORM_STD_MEM_HDR


	)

438 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_PRINTF


439 
	#POLARSSL_PLATFORM_STD_PRINTF
 
MBEDTLS_PLATFORM_STD_PRINTF


	)

441 #i‡
deföed
 
MBEDTLS_PLATFORM_STD_SNPRINTF


442 
	#POLARSSL_PLATFORM_STD_SNPRINTF
 
MBEDTLS_PLATFORM_STD_SNPRINTF


	)

444 #i‡
deföed
 
MBEDTLS_PSK_MAX_LEN


445 
	#POLARSSL_PSK_MAX_LEN
 
MBEDTLS_PSK_MAX_LEN


	)

447 #i‡
deföed
 
MBEDTLS_REMOVE_ARC4_CIPHERSUITES


448 
	#POLARSSL_REMOVE_ARC4_CIPHERSUITES
 
MBEDTLS_REMOVE_ARC4_CIPHERSUITES


	)

450 #i‡
deföed
 
MBEDTLS_RIPEMD160_ALT


451 
	#POLARSSL_RIPEMD160_ALT
 
MBEDTLS_RIPEMD160_ALT


	)

453 #i‡
deföed
 
MBEDTLS_RIPEMD160_C


454 
	#POLARSSL_RIPEMD160_C
 
MBEDTLS_RIPEMD160_C


	)

456 #i‡
deföed
 
MBEDTLS_RIPEMD160_PROCESS_ALT


457 
	#POLARSSL_RIPEMD160_PROCESS_ALT
 
MBEDTLS_RIPEMD160_PROCESS_ALT


	)

459 #i‡
deföed
 
MBEDTLS_RSA_C


460 
	#POLARSSL_RSA_C
 
MBEDTLS_RSA_C


	)

462 #i‡
deföed
 
MBEDTLS_RSA_NO_CRT


463 
	#POLARSSL_RSA_NO_CRT
 
MBEDTLS_RSA_NO_CRT


	)

465 #i‡
deföed
 
MBEDTLS_SELF_TEST


466 
	#POLARSSL_SELF_TEST
 
MBEDTLS_SELF_TEST


	)

468 #i‡
deföed
 
MBEDTLS_SHA1_ALT


469 
	#POLARSSL_SHA1_ALT
 
MBEDTLS_SHA1_ALT


	)

471 #i‡
deföed
 
MBEDTLS_SHA1_C


472 
	#POLARSSL_SHA1_C
 
MBEDTLS_SHA1_C


	)

474 #i‡
deföed
 
MBEDTLS_SHA1_PROCESS_ALT


475 
	#POLARSSL_SHA1_PROCESS_ALT
 
MBEDTLS_SHA1_PROCESS_ALT


	)

477 #i‡
deföed
 
MBEDTLS_SHA256_ALT


478 
	#POLARSSL_SHA256_ALT
 
MBEDTLS_SHA256_ALT


	)

480 #i‡
deföed
 
MBEDTLS_SHA256_C


481 
	#POLARSSL_SHA256_C
 
MBEDTLS_SHA256_C


	)

483 #i‡
deföed
 
MBEDTLS_SHA256_PROCESS_ALT


484 
	#POLARSSL_SHA256_PROCESS_ALT
 
MBEDTLS_SHA256_PROCESS_ALT


	)

486 #i‡
deföed
 
MBEDTLS_SHA512_ALT


487 
	#POLARSSL_SHA512_ALT
 
MBEDTLS_SHA512_ALT


	)

489 #i‡
deföed
 
MBEDTLS_SHA512_C


490 
	#POLARSSL_SHA512_C
 
MBEDTLS_SHA512_C


	)

492 #i‡
deföed
 
MBEDTLS_SHA512_PROCESS_ALT


493 
	#POLARSSL_SHA512_PROCESS_ALT
 
MBEDTLS_SHA512_PROCESS_ALT


	)

495 #i‡
deföed
 
MBEDTLS_SSL_AEAD_RANDOM_IV


496 
	#POLARSSL_SSL_AEAD_RANDOM_IV
 
MBEDTLS_SSL_AEAD_RANDOM_IV


	)

498 #i‡
deföed
 
MBEDTLS_SSL_ALERT_MESSAGES


499 
	#POLARSSL_SSL_ALERT_MESSAGES
 
MBEDTLS_SSL_ALERT_MESSAGES


	)

501 #i‡
deföed
 
MBEDTLS_SSL_ALL_ALERT_MESSAGES


502 
	#POLARSSL_SSL_ALL_ALERT_MESSAGES
 
MBEDTLS_SSL_ALL_ALERT_MESSAGES


	)

504 #i‡
deföed
 
MBEDTLS_SSL_ALPN


505 
	#POLARSSL_SSL_ALPN
 
MBEDTLS_SSL_ALPN


	)

507 #i‡
deföed
 
MBEDTLS_SSL_CACHE_C


508 
	#POLARSSL_SSL_CACHE_C
 
MBEDTLS_SSL_CACHE_C


	)

510 #i‡
deföed
 
MBEDTLS_SSL_CBC_RECORD_SPLITTING


511 
	#POLARSSL_SSL_CBC_RECORD_SPLITTING
 
MBEDTLS_SSL_CBC_RECORD_SPLITTING


	)

513 #i‡
deföed
 
MBEDTLS_SSL_CLI_C


514 
	#POLARSSL_SSL_CLI_C
 
MBEDTLS_SSL_CLI_C


	)

516 #i‡
deföed
 
MBEDTLS_SSL_COOKIE_C


517 
	#POLARSSL_SSL_COOKIE_C
 
MBEDTLS_SSL_COOKIE_C


	)

519 #i‡
deföed
 
MBEDTLS_SSL_COOKIE_TIMEOUT


520 
	#POLARSSL_SSL_COOKIE_TIMEOUT
 
MBEDTLS_SSL_COOKIE_TIMEOUT


	)

522 #i‡
deföed
 
MBEDTLS_SSL_DEBUG_ALL


523 
	#POLARSSL_SSL_DEBUG_ALL
 
MBEDTLS_SSL_DEBUG_ALL


	)

525 #i‡
deföed
 
MBEDTLS_SSL_DISABLE_RENEGOTIATION


526 
	#POLARSSL_SSL_DISABLE_RENEGOTIATION
 
MBEDTLS_SSL_DISABLE_RENEGOTIATION


	)

528 #i‡
deföed
 
MBEDTLS_SSL_DTLS_ANTI_REPLAY


529 
	#POLARSSL_SSL_DTLS_ANTI_REPLAY
 
MBEDTLS_SSL_DTLS_ANTI_REPLAY


	)

531 #i‡
deföed
 
MBEDTLS_SSL_DTLS_BADMAC_LIMIT


532 
	#POLARSSL_SSL_DTLS_BADMAC_LIMIT
 
MBEDTLS_SSL_DTLS_BADMAC_LIMIT


	)

534 #i‡
deföed
 
MBEDTLS_SSL_DTLS_HELLO_VERIFY


535 
	#POLARSSL_SSL_DTLS_HELLO_VERIFY
 
MBEDTLS_SSL_DTLS_HELLO_VERIFY


	)

537 #i‡
deföed
 
MBEDTLS_SSL_ENCRYPT_THEN_MAC


538 
	#POLARSSL_SSL_ENCRYPT_THEN_MAC
 
MBEDTLS_SSL_ENCRYPT_THEN_MAC


	)

540 #i‡
deföed
 
MBEDTLS_SSL_EXTENDED_MASTER_SECRET


541 
	#POLARSSL_SSL_EXTENDED_MASTER_SECRET
 
MBEDTLS_SSL_EXTENDED_MASTER_SECRET


	)

543 #i‡
deföed
 
MBEDTLS_SSL_FALLBACK_SCSV


544 
	#POLARSSL_SSL_FALLBACK_SCSV
 
MBEDTLS_SSL_FALLBACK_SCSV


	)

546 #i‡
deföed
 
MBEDTLS_SSL_HW_RECORD_ACCEL


547 
	#POLARSSL_SSL_HW_RECORD_ACCEL
 
MBEDTLS_SSL_HW_RECORD_ACCEL


	)

549 #i‡
deföed
 
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH


550 
	#POLARSSL_SSL_MAX_FRAGMENT_LENGTH
 
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH


	)

552 #i‡
deföed
 
MBEDTLS_SSL_PROTO_DTLS


553 
	#POLARSSL_SSL_PROTO_DTLS
 
MBEDTLS_SSL_PROTO_DTLS


	)

555 #i‡
deföed
 
MBEDTLS_SSL_PROTO_SSL3


556 
	#POLARSSL_SSL_PROTO_SSL3
 
MBEDTLS_SSL_PROTO_SSL3


	)

558 #i‡
deföed
 
MBEDTLS_SSL_PROTO_TLS1


559 
	#POLARSSL_SSL_PROTO_TLS1
 
MBEDTLS_SSL_PROTO_TLS1


	)

561 #i‡
deföed
 
MBEDTLS_SSL_PROTO_TLS1_1


562 
	#POLARSSL_SSL_PROTO_TLS1_1
 
MBEDTLS_SSL_PROTO_TLS1_1


	)

564 #i‡
deföed
 
MBEDTLS_SSL_PROTO_TLS1_2


565 
	#POLARSSL_SSL_PROTO_TLS1_2
 
MBEDTLS_SSL_PROTO_TLS1_2


	)

567 #i‡
deföed
 
MBEDTLS_SSL_RENEGOTIATION


568 
	#POLARSSL_SSL_RENEGOTIATION
 
MBEDTLS_SSL_RENEGOTIATION


	)

570 #i‡
deföed
 
MBEDTLS_SSL_SERVER_NAME_INDICATION


571 
	#POLARSSL_SSL_SERVER_NAME_INDICATION
 
MBEDTLS_SSL_SERVER_NAME_INDICATION


	)

573 #i‡
deföed
 
MBEDTLS_SSL_SESSION_TICKETS


574 
	#POLARSSL_SSL_SESSION_TICKETS
 
MBEDTLS_SSL_SESSION_TICKETS


	)

576 #i‡
deföed
 
MBEDTLS_SSL_SRV_C


577 
	#POLARSSL_SSL_SRV_C
 
MBEDTLS_SSL_SRV_C


	)

579 #i‡
deföed
 
MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE


580 
	#POLARSSL_SSL_SRV_RESPECT_CLIENT_PREFERENCE
 
MBEDTLS_SSL_SRV_RESPECT_CLIENT_PREFERENCE


	)

582 #i‡
deföed
 
MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO


583 
	#POLARSSL_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO
 
MBEDTLS_SSL_SRV_SUPPORT_SSLV2_CLIENT_HELLO


	)

585 #i‡
deföed
 
MBEDTLS_SSL_TLS_C


586 
	#POLARSSL_SSL_TLS_C
 
MBEDTLS_SSL_TLS_C


	)

588 #i‡
deföed
 
MBEDTLS_SSL_TRUNCATED_HMAC


589 
	#POLARSSL_SSL_TRUNCATED_HMAC
 
MBEDTLS_SSL_TRUNCATED_HMAC


	)

591 #i‡
deföed
 
MBEDTLS_THREADING_ALT


592 
	#POLARSSL_THREADING_ALT
 
MBEDTLS_THREADING_ALT


	)

594 #i‡
deföed
 
MBEDTLS_THREADING_C


595 
	#POLARSSL_THREADING_C
 
MBEDTLS_THREADING_C


	)

597 #i‡
deföed
 
MBEDTLS_THREADING_PTHREAD


598 
	#POLARSSL_THREADING_PTHREAD
 
MBEDTLS_THREADING_PTHREAD


	)

600 #i‡
deföed
 
MBEDTLS_TIMING_ALT


601 
	#POLARSSL_TIMING_ALT
 
MBEDTLS_TIMING_ALT


	)

603 #i‡
deföed
 
MBEDTLS_TIMING_C


604 
	#POLARSSL_TIMING_C
 
MBEDTLS_TIMING_C


	)

606 #i‡
deföed
 
MBEDTLS_VERSION_C


607 
	#POLARSSL_VERSION_C
 
MBEDTLS_VERSION_C


	)

609 #i‡
deföed
 
MBEDTLS_VERSION_FEATURES


610 
	#POLARSSL_VERSION_FEATURES
 
MBEDTLS_VERSION_FEATURES


	)

612 #i‡
deföed
 
MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3


613 
	#POLARSSL_X509_ALLOW_EXTENSIONS_NON_V3
 
MBEDTLS_X509_ALLOW_EXTENSIONS_NON_V3


	)

615 #i‡
deföed
 
MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION


616 
	#POLARSSL_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION
 
MBEDTLS_X509_ALLOW_UNSUPPORTED_CRITICAL_EXTENSION


	)

618 #i‡
deföed
 
MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE


619 
	#POLARSSL_X509_CHECK_EXTENDED_KEY_USAGE
 
MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE


	)

621 #i‡
deföed
 
MBEDTLS_X509_CHECK_KEY_USAGE


622 
	#POLARSSL_X509_CHECK_KEY_USAGE
 
MBEDTLS_X509_CHECK_KEY_USAGE


	)

624 #i‡
deföed
 
MBEDTLS_X509_CREATE_C


625 
	#POLARSSL_X509_CREATE_C
 
MBEDTLS_X509_CREATE_C


	)

627 #i‡
deföed
 
MBEDTLS_X509_CRL_PARSE_C


628 
	#POLARSSL_X509_CRL_PARSE_C
 
MBEDTLS_X509_CRL_PARSE_C


	)

630 #i‡
deföed
 
MBEDTLS_X509_CRT_PARSE_C


631 
	#POLARSSL_X509_CRT_PARSE_C
 
MBEDTLS_X509_CRT_PARSE_C


	)

633 #i‡
deföed
 
MBEDTLS_X509_CRT_WRITE_C


634 
	#POLARSSL_X509_CRT_WRITE_C
 
MBEDTLS_X509_CRT_WRITE_C


	)

636 #i‡
deföed
 
MBEDTLS_X509_CSR_PARSE_C


637 
	#POLARSSL_X509_CSR_PARSE_C
 
MBEDTLS_X509_CSR_PARSE_C


	)

639 #i‡
deföed
 
MBEDTLS_X509_CSR_WRITE_C


640 
	#POLARSSL_X509_CSR_WRITE_C
 
MBEDTLS_X509_CSR_WRITE_C


	)

642 #i‡
deföed
 
MBEDTLS_X509_MAX_INTERMEDIATE_CA


643 
	#POLARSSL_X509_MAX_INTERMEDIATE_CA
 
MBEDTLS_X509_MAX_INTERMEDIATE_CA


	)

645 #i‡
deföed
 
MBEDTLS_X509_RSASSA_PSS_SUPPORT


646 
	#POLARSSL_X509_RSASSA_PSS_SUPPORT
 
MBEDTLS_X509_RSASSA_PSS_SUPPORT


	)

648 #i‡
deföed
 
MBEDTLS_X509_USE_C


649 
	#POLARSSL_X509_USE_C
 
MBEDTLS_X509_USE_C


	)

651 #i‡
deföed
 
MBEDTLS_XTEA_ALT


652 
	#POLARSSL_XTEA_ALT
 
MBEDTLS_XTEA_ALT


	)

654 #i‡
deföed
 
MBEDTLS_XTEA_C


655 
	#POLARSSL_XTEA_C
 
MBEDTLS_XTEA_C


	)

657 #i‡
deföed
 
MBEDTLS_ZLIB_SUPPORT


658 
	#POLARSSL_ZLIB_SUPPORT
 
MBEDTLS_ZLIB_SUPPORT


	)

664 
	#AES_DECRYPT
 
MBEDTLS_AES_DECRYPT


	)

665 
	#AES_ENCRYPT
 
MBEDTLS_AES_ENCRYPT


	)

666 
	#ASN1_BIT_STRING
 
MBEDTLS_ASN1_BIT_STRING


	)

667 
	#ASN1_BMP_STRING
 
MBEDTLS_ASN1_BMP_STRING


	)

668 
	#ASN1_BOOLEAN
 
MBEDTLS_ASN1_BOOLEAN


	)

669 
	#ASN1_CHK_ADD
 
MBEDTLS_ASN1_CHK_ADD


	)

670 
	#ASN1_CONSTRUCTED
 
MBEDTLS_ASN1_CONSTRUCTED


	)

671 
	#ASN1_CONTEXT_SPECIFIC
 
MBEDTLS_ASN1_CONTEXT_SPECIFIC


	)

672 
	#ASN1_GENERALIZED_TIME
 
MBEDTLS_ASN1_GENERALIZED_TIME


	)

673 
	#ASN1_IA5_STRING
 
MBEDTLS_ASN1_IA5_STRING


	)

674 
	#ASN1_INTEGER
 
MBEDTLS_ASN1_INTEGER


	)

675 
	#ASN1_NULL
 
MBEDTLS_ASN1_NULL


	)

676 
	#ASN1_OCTET_STRING
 
MBEDTLS_ASN1_OCTET_STRING


	)

677 
	#ASN1_OID
 
MBEDTLS_ASN1_OID


	)

678 
	#ASN1_PRIMITIVE
 
MBEDTLS_ASN1_PRIMITIVE


	)

679 
	#ASN1_PRINTABLE_STRING
 
MBEDTLS_ASN1_PRINTABLE_STRING


	)

680 
	#ASN1_SEQUENCE
 
MBEDTLS_ASN1_SEQUENCE


	)

681 
	#ASN1_SET
 
MBEDTLS_ASN1_SET


	)

682 
	#ASN1_T61_STRING
 
MBEDTLS_ASN1_T61_STRING


	)

683 
	#ASN1_UNIVERSAL_STRING
 
MBEDTLS_ASN1_UNIVERSAL_STRING


	)

684 
	#ASN1_UTC_TIME
 
MBEDTLS_ASN1_UTC_TIME


	)

685 
	#ASN1_UTF8_STRING
 
MBEDTLS_ASN1_UTF8_STRING


	)

686 
	#BADCERT_CN_MISMATCH
 
MBEDTLS_X509_BADCERT_CN_MISMATCH


	)

687 
	#BADCERT_EXPIRED
 
MBEDTLS_X509_BADCERT_EXPIRED


	)

688 
	#BADCERT_FUTURE
 
MBEDTLS_X509_BADCERT_FUTURE


	)

689 
	#BADCERT_MISSING
 
MBEDTLS_X509_BADCERT_MISSING


	)

690 
	#BADCERT_NOT_TRUSTED
 
MBEDTLS_X509_BADCERT_NOT_TRUSTED


	)

691 
	#BADCERT_OTHER
 
MBEDTLS_X509_BADCERT_OTHER


	)

692 
	#BADCERT_REVOKED
 
MBEDTLS_X509_BADCERT_REVOKED


	)

693 
	#BADCERT_SKIP_VERIFY
 
MBEDTLS_X509_BADCERT_SKIP_VERIFY


	)

694 
	#BADCRL_EXPIRED
 
MBEDTLS_X509_BADCRL_EXPIRED


	)

695 
	#BADCRL_FUTURE
 
MBEDTLS_X509_BADCRL_FUTURE


	)

696 
	#BADCRL_NOT_TRUSTED
 
MBEDTLS_X509_BADCRL_NOT_TRUSTED


	)

697 
	#BLOWFISH_BLOCKSIZE
 
MBEDTLS_BLOWFISH_BLOCKSIZE


	)

698 
	#BLOWFISH_DECRYPT
 
MBEDTLS_BLOWFISH_DECRYPT


	)

699 
	#BLOWFISH_ENCRYPT
 
MBEDTLS_BLOWFISH_ENCRYPT


	)

700 
	#BLOWFISH_MAX_KEY
 
MBEDTLS_BLOWFISH_MAX_KEY_BITS


	)

701 
	#BLOWFISH_MIN_KEY
 
MBEDTLS_BLOWFISH_MIN_KEY_BITS


	)

702 
	#BLOWFISH_ROUNDS
 
MBEDTLS_BLOWFISH_ROUNDS


	)

703 
	#CAMELLIA_DECRYPT
 
MBEDTLS_CAMELLIA_DECRYPT


	)

704 
	#CAMELLIA_ENCRYPT
 
MBEDTLS_CAMELLIA_ENCRYPT


	)

705 
	#COLLECT_SIZE
 
MBEDTLS_HAVEGE_COLLECT_SIZE


	)

706 
	#CTR_DRBG_BLOCKSIZE
 
MBEDTLS_CTR_DRBG_BLOCKSIZE


	)

707 
	#CTR_DRBG_ENTROPY_LEN
 
MBEDTLS_CTR_DRBG_ENTROPY_LEN


	)

708 
	#CTR_DRBG_KEYBITS
 
MBEDTLS_CTR_DRBG_KEYBITS


	)

709 
	#CTR_DRBG_KEYSIZE
 
MBEDTLS_CTR_DRBG_KEYSIZE


	)

710 
	#CTR_DRBG_MAX_INPUT
 
MBEDTLS_CTR_DRBG_MAX_INPUT


	)

711 
	#CTR_DRBG_MAX_REQUEST
 
MBEDTLS_CTR_DRBG_MAX_REQUEST


	)

712 
	#CTR_DRBG_MAX_SEED_INPUT
 
MBEDTLS_CTR_DRBG_MAX_SEED_INPUT


	)

713 
	#CTR_DRBG_PR_OFF
 
MBEDTLS_CTR_DRBG_PR_OFF


	)

714 
	#CTR_DRBG_PR_ON
 
MBEDTLS_CTR_DRBG_PR_ON


	)

715 
	#CTR_DRBG_RESEED_INTERVAL
 
MBEDTLS_CTR_DRBG_RESEED_INTERVAL


	)

716 
	#CTR_DRBG_SEEDLEN
 
MBEDTLS_CTR_DRBG_SEEDLEN


	)

717 
	#DEPRECATED
 
MBEDTLS_DEPRECATED


	)

718 
	#DES_DECRYPT
 
MBEDTLS_DES_DECRYPT


	)

719 
	#DES_ENCRYPT
 
MBEDTLS_DES_ENCRYPT


	)

720 
	#DES_KEY_SIZE
 
MBEDTLS_DES_KEY_SIZE


	)

721 
	#ENTROPY_BLOCK_SIZE
 
MBEDTLS_ENTROPY_BLOCK_SIZE


	)

722 
	#ENTROPY_MAX_GATHER
 
MBEDTLS_ENTROPY_MAX_GATHER


	)

723 
	#ENTROPY_MAX_SEED_SIZE
 
MBEDTLS_ENTROPY_MAX_SEED_SIZE


	)

724 
	#ENTROPY_MAX_SOURCES
 
MBEDTLS_ENTROPY_MAX_SOURCES


	)

725 
	#ENTROPY_MIN_HARDCLOCK
 
MBEDTLS_ENTROPY_MIN_HARDCLOCK


	)

726 
	#ENTROPY_MIN_HAVEGE
 
MBEDTLS_ENTROPY_MIN_HAVEGE


	)

727 
	#ENTROPY_MIN_PLATFORM
 
MBEDTLS_ENTROPY_MIN_PLATFORM


	)

728 
	#ENTROPY_SOURCE_MANUAL
 
MBEDTLS_ENTROPY_SOURCE_MANUAL


	)

729 
	#EXT_AUTHORITY_KEY_IDENTIFIER
 
MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER


	)

730 
	#EXT_BASIC_CONSTRAINTS
 
MBEDTLS_X509_EXT_BASIC_CONSTRAINTS


	)

731 
	#EXT_CERTIFICATE_POLICIES
 
MBEDTLS_X509_EXT_CERTIFICATE_POLICIES


	)

732 
	#EXT_CRL_DISTRIBUTION_POINTS
 
MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS


	)

733 
	#EXT_EXTENDED_KEY_USAGE
 
MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE


	)

734 
	#EXT_FRESHEST_CRL
 
MBEDTLS_X509_EXT_FRESHEST_CRL


	)

735 
	#EXT_INIHIBIT_ANYPOLICY
 
MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY


	)

736 
	#EXT_ISSUER_ALT_NAME
 
MBEDTLS_X509_EXT_ISSUER_ALT_NAME


	)

737 
	#EXT_KEY_USAGE
 
MBEDTLS_X509_EXT_KEY_USAGE


	)

738 
	#EXT_NAME_CONSTRAINTS
 
MBEDTLS_X509_EXT_NAME_CONSTRAINTS


	)

739 
	#EXT_NS_CERT_TYPE
 
MBEDTLS_X509_EXT_NS_CERT_TYPE


	)

740 
	#EXT_POLICY_CONSTRAINTS
 
MBEDTLS_X509_EXT_POLICY_CONSTRAINTS


	)

741 
	#EXT_POLICY_MAPPINGS
 
MBEDTLS_X509_EXT_POLICY_MAPPINGS


	)

742 
	#EXT_SUBJECT_ALT_NAME
 
MBEDTLS_X509_EXT_SUBJECT_ALT_NAME


	)

743 
	#EXT_SUBJECT_DIRECTORY_ATTRS
 
MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS


	)

744 
	#EXT_SUBJECT_KEY_IDENTIFIER
 
MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER


	)

745 
	#GCM_DECRYPT
 
MBEDTLS_GCM_DECRYPT


	)

746 
	#GCM_ENCRYPT
 
MBEDTLS_GCM_ENCRYPT


	)

747 
	#KU_CRL_SIGN
 
MBEDTLS_X509_KU_CRL_SIGN


	)

748 
	#KU_DATA_ENCIPHERMENT
 
MBEDTLS_X509_KU_DATA_ENCIPHERMENT


	)

749 
	#KU_DIGITAL_SIGNATURE
 
MBEDTLS_X509_KU_DIGITAL_SIGNATURE


	)

750 
	#KU_KEY_AGREEMENT
 
MBEDTLS_X509_KU_KEY_AGREEMENT


	)

751 
	#KU_KEY_CERT_SIGN
 
MBEDTLS_X509_KU_KEY_CERT_SIGN


	)

752 
	#KU_KEY_ENCIPHERMENT
 
MBEDTLS_X509_KU_KEY_ENCIPHERMENT


	)

753 
	#KU_NON_REPUDIATION
 
MBEDTLS_X509_KU_NON_REPUDIATION


	)

754 
	#LN_2_DIV_LN_10_SCALE100
 
MBEDTLS_LN_2_DIV_LN_10_SCALE100


	)

755 
	#MD_CONTEXT_T_INIT
 
MBEDTLS_MD_CONTEXT_T_INIT


	)

756 
	#MEMORY_VERIFY_ALLOC
 
MBEDTLS_MEMORY_VERIFY_ALLOC


	)

757 
	#MEMORY_VERIFY_ALWAYS
 
MBEDTLS_MEMORY_VERIFY_ALWAYS


	)

758 
	#MEMORY_VERIFY_FREE
 
MBEDTLS_MEMORY_VERIFY_FREE


	)

759 
	#MEMORY_VERIFY_NONE
 
MBEDTLS_MEMORY_VERIFY_NONE


	)

760 
	#MPI_CHK
 
MBEDTLS_MPI_CHK


	)

761 
	#NET_PROTO_TCP
 
MBEDTLS_NET_PROTO_TCP


	)

762 
	#NET_PROTO_UDP
 
MBEDTLS_NET_PROTO_UDP


	)

763 
	#NS_CERT_TYPE_EMAIL
 
MBEDTLS_X509_NS_CERT_TYPE_EMAIL


	)

764 
	#NS_CERT_TYPE_EMAIL_CA
 
MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA


	)

765 
	#NS_CERT_TYPE_OBJECT_SIGNING
 
MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING


	)

766 
	#NS_CERT_TYPE_OBJECT_SIGNING_CA
 
MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA


	)

767 
	#NS_CERT_TYPE_RESERVED
 
MBEDTLS_X509_NS_CERT_TYPE_RESERVED


	)

768 
	#NS_CERT_TYPE_SSL_CA
 
MBEDTLS_X509_NS_CERT_TYPE_SSL_CA


	)

769 
	#NS_CERT_TYPE_SSL_CLIENT
 
MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT


	)

770 
	#NS_CERT_TYPE_SSL_SERVER
 
MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER


	)

771 
	#OID_ANSI_X9_62
 
MBEDTLS_OID_ANSI_X9_62


	)

772 
	#OID_ANSI_X9_62_FIELD_TYPE
 
MBEDTLS_OID_ANSI_X9_62_FIELD_TYPE


	)

773 
	#OID_ANSI_X9_62_PRIME_FIELD
 
MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD


	)

774 
	#OID_ANSI_X9_62_SIG
 
MBEDTLS_OID_ANSI_X9_62_SIG


	)

775 
	#OID_ANSI_X9_62_SIG_SHA2
 
MBEDTLS_OID_ANSI_X9_62_SIG_SHA2


	)

776 
	#OID_ANY_EXTENDED_KEY_USAGE
 
MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE


	)

777 
	#OID_AT
 
MBEDTLS_OID_AT


	)

778 
	#OID_AT_CN
 
MBEDTLS_OID_AT_CN


	)

779 
	#OID_AT_COUNTRY
 
MBEDTLS_OID_AT_COUNTRY


	)

780 
	#OID_AT_DN_QUALIFIER
 
MBEDTLS_OID_AT_DN_QUALIFIER


	)

781 
	#OID_AT_GENERATION_QUALIFIER
 
MBEDTLS_OID_AT_GENERATION_QUALIFIER


	)

782 
	#OID_AT_GIVEN_NAME
 
MBEDTLS_OID_AT_GIVEN_NAME


	)

783 
	#OID_AT_INITIALS
 
MBEDTLS_OID_AT_INITIALS


	)

784 
	#OID_AT_LOCALITY
 
MBEDTLS_OID_AT_LOCALITY


	)

785 
	#OID_AT_ORGANIZATION
 
MBEDTLS_OID_AT_ORGANIZATION


	)

786 
	#OID_AT_ORG_UNIT
 
MBEDTLS_OID_AT_ORG_UNIT


	)

787 
	#OID_AT_POSTAL_ADDRESS
 
MBEDTLS_OID_AT_POSTAL_ADDRESS


	)

788 
	#OID_AT_POSTAL_CODE
 
MBEDTLS_OID_AT_POSTAL_CODE


	)

789 
	#OID_AT_PSEUDONYM
 
MBEDTLS_OID_AT_PSEUDONYM


	)

790 
	#OID_AT_SERIAL_NUMBER
 
MBEDTLS_OID_AT_SERIAL_NUMBER


	)

791 
	#OID_AT_STATE
 
MBEDTLS_OID_AT_STATE


	)

792 
	#OID_AT_SUR_NAME
 
MBEDTLS_OID_AT_SUR_NAME


	)

793 
	#OID_AT_TITLE
 
MBEDTLS_OID_AT_TITLE


	)

794 
	#OID_AT_UNIQUE_IDENTIFIER
 
MBEDTLS_OID_AT_UNIQUE_IDENTIFIER


	)

795 
	#OID_AUTHORITY_KEY_IDENTIFIER
 
MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER


	)

796 
	#OID_BASIC_CONSTRAINTS
 
MBEDTLS_OID_BASIC_CONSTRAINTS


	)

797 
	#OID_CERTICOM
 
MBEDTLS_OID_CERTICOM


	)

798 
	#OID_CERTIFICATE_POLICIES
 
MBEDTLS_OID_CERTIFICATE_POLICIES


	)

799 
	#OID_CLIENT_AUTH
 
MBEDTLS_OID_CLIENT_AUTH


	)

800 
	#OID_CMP
 
MBEDTLS_OID_CMP


	)

801 
	#OID_CODE_SIGNING
 
MBEDTLS_OID_CODE_SIGNING


	)

802 
	#OID_COUNTRY_US
 
MBEDTLS_OID_COUNTRY_US


	)

803 
	#OID_CRL_DISTRIBUTION_POINTS
 
MBEDTLS_OID_CRL_DISTRIBUTION_POINTS


	)

804 
	#OID_CRL_NUMBER
 
MBEDTLS_OID_CRL_NUMBER


	)

805 
	#OID_DES_CBC
 
MBEDTLS_OID_DES_CBC


	)

806 
	#OID_DES_EDE3_CBC
 
MBEDTLS_OID_DES_EDE3_CBC


	)

807 
	#OID_DIGEST_ALG_MD2
 
MBEDTLS_OID_DIGEST_ALG_MD2


	)

808 
	#OID_DIGEST_ALG_MD4
 
MBEDTLS_OID_DIGEST_ALG_MD4


	)

809 
	#OID_DIGEST_ALG_MD5
 
MBEDTLS_OID_DIGEST_ALG_MD5


	)

810 
	#OID_DIGEST_ALG_SHA1
 
MBEDTLS_OID_DIGEST_ALG_SHA1


	)

811 
	#OID_DIGEST_ALG_SHA224
 
MBEDTLS_OID_DIGEST_ALG_SHA224


	)

812 
	#OID_DIGEST_ALG_SHA256
 
MBEDTLS_OID_DIGEST_ALG_SHA256


	)

813 
	#OID_DIGEST_ALG_SHA384
 
MBEDTLS_OID_DIGEST_ALG_SHA384


	)

814 
	#OID_DIGEST_ALG_SHA512
 
MBEDTLS_OID_DIGEST_ALG_SHA512


	)

815 
	#OID_DOMAIN_COMPONENT
 
MBEDTLS_OID_DOMAIN_COMPONENT


	)

816 
	#OID_ECDSA_SHA1
 
MBEDTLS_OID_ECDSA_SHA1


	)

817 
	#OID_ECDSA_SHA224
 
MBEDTLS_OID_ECDSA_SHA224


	)

818 
	#OID_ECDSA_SHA256
 
MBEDTLS_OID_ECDSA_SHA256


	)

819 
	#OID_ECDSA_SHA384
 
MBEDTLS_OID_ECDSA_SHA384


	)

820 
	#OID_ECDSA_SHA512
 
MBEDTLS_OID_ECDSA_SHA512


	)

821 
	#OID_EC_ALG_ECDH
 
MBEDTLS_OID_EC_ALG_ECDH


	)

822 
	#OID_EC_ALG_UNRESTRICTED
 
MBEDTLS_OID_EC_ALG_UNRESTRICTED


	)

823 
	#OID_EC_BRAINPOOL_V1
 
MBEDTLS_OID_EC_BRAINPOOL_V1


	)

824 
	#OID_EC_GRP_BP256R1
 
MBEDTLS_OID_EC_GRP_BP256R1


	)

825 
	#OID_EC_GRP_BP384R1
 
MBEDTLS_OID_EC_GRP_BP384R1


	)

826 
	#OID_EC_GRP_BP512R1
 
MBEDTLS_OID_EC_GRP_BP512R1


	)

827 
	#OID_EC_GRP_SECP192K1
 
MBEDTLS_OID_EC_GRP_SECP192K1


	)

828 
	#OID_EC_GRP_SECP192R1
 
MBEDTLS_OID_EC_GRP_SECP192R1


	)

829 
	#OID_EC_GRP_SECP224K1
 
MBEDTLS_OID_EC_GRP_SECP224K1


	)

830 
	#OID_EC_GRP_SECP224R1
 
MBEDTLS_OID_EC_GRP_SECP224R1


	)

831 
	#OID_EC_GRP_SECP256K1
 
MBEDTLS_OID_EC_GRP_SECP256K1


	)

832 
	#OID_EC_GRP_SECP256R1
 
MBEDTLS_OID_EC_GRP_SECP256R1


	)

833 
	#OID_EC_GRP_SECP384R1
 
MBEDTLS_OID_EC_GRP_SECP384R1


	)

834 
	#OID_EC_GRP_SECP521R1
 
MBEDTLS_OID_EC_GRP_SECP521R1


	)

835 
	#OID_EMAIL_PROTECTION
 
MBEDTLS_OID_EMAIL_PROTECTION


	)

836 
	#OID_EXTENDED_KEY_USAGE
 
MBEDTLS_OID_EXTENDED_KEY_USAGE


	)

837 
	#OID_FRESHEST_CRL
 
MBEDTLS_OID_FRESHEST_CRL


	)

838 
	#OID_GOV
 
MBEDTLS_OID_GOV


	)

839 
	#OID_HMAC_SHA1
 
MBEDTLS_OID_HMAC_SHA1


	)

840 
	#OID_ID_CE
 
MBEDTLS_OID_ID_CE


	)

841 
	#OID_INIHIBIT_ANYPOLICY
 
MBEDTLS_OID_INIHIBIT_ANYPOLICY


	)

842 
	#OID_ISO_CCITT_DS
 
MBEDTLS_OID_ISO_CCITT_DS


	)

843 
	#OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG


	)

844 
	#OID_ISO_ITU_COUNTRY
 
MBEDTLS_OID_ISO_ITU_COUNTRY


	)

845 
	#OID_ISO_ITU_US_ORG
 
MBEDTLS_OID_ISO_ITU_US_ORG


	)

846 
	#OID_ISO_MEMBER_BODIES
 
MBEDTLS_OID_ISO_MEMBER_BODIES


	)

847 
	#OID_ISSUER_ALT_NAME
 
MBEDTLS_OID_ISSUER_ALT_NAME


	)

848 
	#OID_KEY_USAGE
 
MBEDTLS_OID_KEY_USAGE


	)

849 
	#OID_KP
 
MBEDTLS_OID_KP


	)

850 
	#OID_MGF1
 
MBEDTLS_OID_MGF1


	)

851 
	#OID_NAME_CONSTRAINTS
 
MBEDTLS_OID_NAME_CONSTRAINTS


	)

852 
	#OID_NETSCAPE
 
MBEDTLS_OID_NETSCAPE


	)

853 
	#OID_NS_BASE_URL
 
MBEDTLS_OID_NS_BASE_URL


	)

854 
	#OID_NS_CA_POLICY_URL
 
MBEDTLS_OID_NS_CA_POLICY_URL


	)

855 
	#OID_NS_CA_REVOCATION_URL
 
MBEDTLS_OID_NS_CA_REVOCATION_URL


	)

856 
	#OID_NS_CERT
 
MBEDTLS_OID_NS_CERT


	)

857 
	#OID_NS_CERT_SEQUENCE
 
MBEDTLS_OID_NS_CERT_SEQUENCE


	)

858 
	#OID_NS_CERT_TYPE
 
MBEDTLS_OID_NS_CERT_TYPE


	)

859 
	#OID_NS_COMMENT
 
MBEDTLS_OID_NS_COMMENT


	)

860 
	#OID_NS_DATA_TYPE
 
MBEDTLS_OID_NS_DATA_TYPE


	)

861 
	#OID_NS_RENEWAL_URL
 
MBEDTLS_OID_NS_RENEWAL_URL


	)

862 
	#OID_NS_REVOCATION_URL
 
MBEDTLS_OID_NS_REVOCATION_URL


	)

863 
	#OID_NS_SSL_SERVER_NAME
 
MBEDTLS_OID_NS_SSL_SERVER_NAME


	)

864 
	#OID_OCSP_SIGNING
 
MBEDTLS_OID_OCSP_SIGNING


	)

865 
	#OID_OIW_SECSIG
 
MBEDTLS_OID_OIW_SECSIG


	)

866 
	#OID_OIW_SECSIG_ALG
 
MBEDTLS_OID_OIW_SECSIG_ALG


	)

867 
	#OID_OIW_SECSIG_SHA1
 
MBEDTLS_OID_OIW_SECSIG_SHA1


	)

868 
	#OID_ORGANIZATION
 
MBEDTLS_OID_ORGANIZATION


	)

869 
	#OID_ORG_ANSI_X9_62
 
MBEDTLS_OID_ORG_ANSI_X9_62


	)

870 
	#OID_ORG_CERTICOM
 
MBEDTLS_OID_ORG_CERTICOM


	)

871 
	#OID_ORG_DOD
 
MBEDTLS_OID_ORG_DOD


	)

872 
	#OID_ORG_GOV
 
MBEDTLS_OID_ORG_GOV


	)

873 
	#OID_ORG_NETSCAPE
 
MBEDTLS_OID_ORG_NETSCAPE


	)

874 
	#OID_ORG_OIW
 
MBEDTLS_OID_ORG_OIW


	)

875 
	#OID_ORG_RSA_DATA_SECURITY
 
MBEDTLS_OID_ORG_RSA_DATA_SECURITY


	)

876 
	#OID_ORG_TELETRUST
 
MBEDTLS_OID_ORG_TELETRUST


	)

877 
	#OID_PKCS
 
MBEDTLS_OID_PKCS


	)

878 
	#OID_PKCS1
 
MBEDTLS_OID_PKCS1


	)

879 
	#OID_PKCS12
 
MBEDTLS_OID_PKCS12


	)

880 
	#OID_PKCS12_PBE
 
MBEDTLS_OID_PKCS12_PBE


	)

881 
	#OID_PKCS12_PBE_SHA1_DES2_EDE_CBC
 
MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC


	)

882 
	#OID_PKCS12_PBE_SHA1_DES3_EDE_CBC
 
MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC


	)

883 
	#OID_PKCS12_PBE_SHA1_RC2_128_CBC
 
MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_128_CBC


	)

884 
	#OID_PKCS12_PBE_SHA1_RC2_40_CBC
 
MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_40_CBC


	)

885 
	#OID_PKCS12_PBE_SHA1_RC4_128
 
MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128


	)

886 
	#OID_PKCS12_PBE_SHA1_RC4_40
 
MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_40


	)

887 
	#OID_PKCS1_MD2
 
MBEDTLS_OID_PKCS1_MD2


	)

888 
	#OID_PKCS1_MD4
 
MBEDTLS_OID_PKCS1_MD4


	)

889 
	#OID_PKCS1_MD5
 
MBEDTLS_OID_PKCS1_MD5


	)

890 
	#OID_PKCS1_RSA
 
MBEDTLS_OID_PKCS1_RSA


	)

891 
	#OID_PKCS1_SHA1
 
MBEDTLS_OID_PKCS1_SHA1


	)

892 
	#OID_PKCS1_SHA224
 
MBEDTLS_OID_PKCS1_SHA224


	)

893 
	#OID_PKCS1_SHA256
 
MBEDTLS_OID_PKCS1_SHA256


	)

894 
	#OID_PKCS1_SHA384
 
MBEDTLS_OID_PKCS1_SHA384


	)

895 
	#OID_PKCS1_SHA512
 
MBEDTLS_OID_PKCS1_SHA512


	)

896 
	#OID_PKCS5
 
MBEDTLS_OID_PKCS5


	)

897 
	#OID_PKCS5_PBES2
 
MBEDTLS_OID_PKCS5_PBES2


	)

898 
	#OID_PKCS5_PBE_MD2_DES_CBC
 
MBEDTLS_OID_PKCS5_PBE_MD2_DES_CBC


	)

899 
	#OID_PKCS5_PBE_MD2_RC2_CBC
 
MBEDTLS_OID_PKCS5_PBE_MD2_RC2_CBC


	)

900 
	#OID_PKCS5_PBE_MD5_DES_CBC
 
MBEDTLS_OID_PKCS5_PBE_MD5_DES_CBC


	)

901 
	#OID_PKCS5_PBE_MD5_RC2_CBC
 
MBEDTLS_OID_PKCS5_PBE_MD5_RC2_CBC


	)

902 
	#OID_PKCS5_PBE_SHA1_DES_CBC
 
MBEDTLS_OID_PKCS5_PBE_SHA1_DES_CBC


	)

903 
	#OID_PKCS5_PBE_SHA1_RC2_CBC
 
MBEDTLS_OID_PKCS5_PBE_SHA1_RC2_CBC


	)

904 
	#OID_PKCS5_PBKDF2
 
MBEDTLS_OID_PKCS5_PBKDF2


	)

905 
	#OID_PKCS5_PBMAC1
 
MBEDTLS_OID_PKCS5_PBMAC1


	)

906 
	#OID_PKCS9
 
MBEDTLS_OID_PKCS9


	)

907 
	#OID_PKCS9_CSR_EXT_REQ
 
MBEDTLS_OID_PKCS9_CSR_EXT_REQ


	)

908 
	#OID_PKCS9_EMAIL
 
MBEDTLS_OID_PKCS9_EMAIL


	)

909 
	#OID_PKIX
 
MBEDTLS_OID_PKIX


	)

910 
	#OID_POLICY_CONSTRAINTS
 
MBEDTLS_OID_POLICY_CONSTRAINTS


	)

911 
	#OID_POLICY_MAPPINGS
 
MBEDTLS_OID_POLICY_MAPPINGS


	)

912 
	#OID_PRIVATE_KEY_USAGE_PERIOD
 
MBEDTLS_OID_PRIVATE_KEY_USAGE_PERIOD


	)

913 
	#OID_RSASSA_PSS
 
MBEDTLS_OID_RSASSA_PSS


	)

914 
	#OID_RSA_COMPANY
 
MBEDTLS_OID_RSA_COMPANY


	)

915 
	#OID_RSA_SHA_OBS
 
MBEDTLS_OID_RSA_SHA_OBS


	)

916 
	#OID_SERVER_AUTH
 
MBEDTLS_OID_SERVER_AUTH


	)

917 
	#OID_SIZE
 
MBEDTLS_OID_SIZE


	)

918 
	#OID_SUBJECT_ALT_NAME
 
MBEDTLS_OID_SUBJECT_ALT_NAME


	)

919 
	#OID_SUBJECT_DIRECTORY_ATTRS
 
MBEDTLS_OID_SUBJECT_DIRECTORY_ATTRS


	)

920 
	#OID_SUBJECT_KEY_IDENTIFIER
 
MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER


	)

921 
	#OID_TELETRUST
 
MBEDTLS_OID_TELETRUST


	)

922 
	#OID_TIME_STAMPING
 
MBEDTLS_OID_TIME_STAMPING


	)

923 
	#PADLOCK_ACE
 
MBEDTLS_PADLOCK_ACE


	)

924 
	#PADLOCK_ALIGN16
 
MBEDTLS_PADLOCK_ALIGN16


	)

925 
	#PADLOCK_PHE
 
MBEDTLS_PADLOCK_PHE


	)

926 
	#PADLOCK_PMM
 
MBEDTLS_PADLOCK_PMM


	)

927 
	#PADLOCK_RNG
 
MBEDTLS_PADLOCK_RNG


	)

928 
	#PKCS12_DERIVE_IV
 
MBEDTLS_PKCS12_DERIVE_IV


	)

929 
	#PKCS12_DERIVE_KEY
 
MBEDTLS_PKCS12_DERIVE_KEY


	)

930 
	#PKCS12_DERIVE_MAC_KEY
 
MBEDTLS_PKCS12_DERIVE_MAC_KEY


	)

931 
	#PKCS12_PBE_DECRYPT
 
MBEDTLS_PKCS12_PBE_DECRYPT


	)

932 
	#PKCS12_PBE_ENCRYPT
 
MBEDTLS_PKCS12_PBE_ENCRYPT


	)

933 
	#PKCS5_DECRYPT
 
MBEDTLS_PKCS5_DECRYPT


	)

934 
	#PKCS5_ENCRYPT
 
MBEDTLS_PKCS5_ENCRYPT


	)

935 
	#POLARSSL_AESNI_AES
 
MBEDTLS_AESNI_AES


	)

936 
	#POLARSSL_AESNI_CLMUL
 
MBEDTLS_AESNI_CLMUL


	)

937 
	#POLARSSL_AESNI_H
 
MBEDTLS_AESNI_H


	)

938 
	#POLARSSL_AES_H
 
MBEDTLS_AES_H


	)

939 
	#POLARSSL_ARC4_H
 
MBEDTLS_ARC4_H


	)

940 
	#POLARSSL_ASN1_H
 
MBEDTLS_ASN1_H


	)

941 
	#POLARSSL_ASN1_WRITE_H
 
MBEDTLS_ASN1_WRITE_H


	)

942 
	#POLARSSL_BASE64_H
 
MBEDTLS_BASE64_H


	)

943 
	#POLARSSL_BIGNUM_H
 
MBEDTLS_BIGNUM_H


	)

944 
	#POLARSSL_BLOWFISH_H
 
MBEDTLS_BLOWFISH_H


	)

945 
	#POLARSSL_BN_MUL_H
 
MBEDTLS_BN_MUL_H


	)

946 
	#POLARSSL_CAMELLIA_H
 
MBEDTLS_CAMELLIA_H


	)

947 
	#POLARSSL_CCM_H
 
MBEDTLS_CCM_H


	)

948 
	#POLARSSL_CERTS_H
 
MBEDTLS_CERTS_H


	)

949 
	#POLARSSL_CHECK_CONFIG_H
 
MBEDTLS_CHECK_CONFIG_H


	)

950 
	#POLARSSL_CIPHERSUITE_NODTLS
 
MBEDTLS_CIPHERSUITE_NODTLS


	)

951 
	#POLARSSL_CIPHERSUITE_SHORT_TAG
 
MBEDTLS_CIPHERSUITE_SHORT_TAG


	)

952 
	#POLARSSL_CIPHERSUITE_WEAK
 
MBEDTLS_CIPHERSUITE_WEAK


	)

953 
	#POLARSSL_CIPHER_AES_128_CBC
 
MBEDTLS_CIPHER_AES_128_CBC


	)

954 
	#POLARSSL_CIPHER_AES_128_CCM
 
MBEDTLS_CIPHER_AES_128_CCM


	)

955 
	#POLARSSL_CIPHER_AES_128_CFB128
 
MBEDTLS_CIPHER_AES_128_CFB128


	)

956 
	#POLARSSL_CIPHER_AES_128_CTR
 
MBEDTLS_CIPHER_AES_128_CTR


	)

957 
	#POLARSSL_CIPHER_AES_128_ECB
 
MBEDTLS_CIPHER_AES_128_ECB


	)

958 
	#POLARSSL_CIPHER_AES_128_GCM
 
MBEDTLS_CIPHER_AES_128_GCM


	)

959 
	#POLARSSL_CIPHER_AES_192_CBC
 
MBEDTLS_CIPHER_AES_192_CBC


	)

960 
	#POLARSSL_CIPHER_AES_192_CCM
 
MBEDTLS_CIPHER_AES_192_CCM


	)

961 
	#POLARSSL_CIPHER_AES_192_CFB128
 
MBEDTLS_CIPHER_AES_192_CFB128


	)

962 
	#POLARSSL_CIPHER_AES_192_CTR
 
MBEDTLS_CIPHER_AES_192_CTR


	)

963 
	#POLARSSL_CIPHER_AES_192_ECB
 
MBEDTLS_CIPHER_AES_192_ECB


	)

964 
	#POLARSSL_CIPHER_AES_192_GCM
 
MBEDTLS_CIPHER_AES_192_GCM


	)

965 
	#POLARSSL_CIPHER_AES_256_CBC
 
MBEDTLS_CIPHER_AES_256_CBC


	)

966 
	#POLARSSL_CIPHER_AES_256_CCM
 
MBEDTLS_CIPHER_AES_256_CCM


	)

967 
	#POLARSSL_CIPHER_AES_256_CFB128
 
MBEDTLS_CIPHER_AES_256_CFB128


	)

968 
	#POLARSSL_CIPHER_AES_256_CTR
 
MBEDTLS_CIPHER_AES_256_CTR


	)

969 
	#POLARSSL_CIPHER_AES_256_ECB
 
MBEDTLS_CIPHER_AES_256_ECB


	)

970 
	#POLARSSL_CIPHER_AES_256_GCM
 
MBEDTLS_CIPHER_AES_256_GCM


	)

971 
	#POLARSSL_CIPHER_ARC4_128
 
MBEDTLS_CIPHER_ARC4_128


	)

972 
	#POLARSSL_CIPHER_BLOWFISH_CBC
 
MBEDTLS_CIPHER_BLOWFISH_CBC


	)

973 
	#POLARSSL_CIPHER_BLOWFISH_CFB64
 
MBEDTLS_CIPHER_BLOWFISH_CFB64


	)

974 
	#POLARSSL_CIPHER_BLOWFISH_CTR
 
MBEDTLS_CIPHER_BLOWFISH_CTR


	)

975 
	#POLARSSL_CIPHER_BLOWFISH_ECB
 
MBEDTLS_CIPHER_BLOWFISH_ECB


	)

976 
	#POLARSSL_CIPHER_CAMELLIA_128_CBC
 
MBEDTLS_CIPHER_CAMELLIA_128_CBC


	)

977 
	#POLARSSL_CIPHER_CAMELLIA_128_CCM
 
MBEDTLS_CIPHER_CAMELLIA_128_CCM


	)

978 
	#POLARSSL_CIPHER_CAMELLIA_128_CFB128
 
MBEDTLS_CIPHER_CAMELLIA_128_CFB128


	)

979 
	#POLARSSL_CIPHER_CAMELLIA_128_CTR
 
MBEDTLS_CIPHER_CAMELLIA_128_CTR


	)

980 
	#POLARSSL_CIPHER_CAMELLIA_128_ECB
 
MBEDTLS_CIPHER_CAMELLIA_128_ECB


	)

981 
	#POLARSSL_CIPHER_CAMELLIA_128_GCM
 
MBEDTLS_CIPHER_CAMELLIA_128_GCM


	)

982 
	#POLARSSL_CIPHER_CAMELLIA_192_CBC
 
MBEDTLS_CIPHER_CAMELLIA_192_CBC


	)

983 
	#POLARSSL_CIPHER_CAMELLIA_192_CCM
 
MBEDTLS_CIPHER_CAMELLIA_192_CCM


	)

984 
	#POLARSSL_CIPHER_CAMELLIA_192_CFB128
 
MBEDTLS_CIPHER_CAMELLIA_192_CFB128


	)

985 
	#POLARSSL_CIPHER_CAMELLIA_192_CTR
 
MBEDTLS_CIPHER_CAMELLIA_192_CTR


	)

986 
	#POLARSSL_CIPHER_CAMELLIA_192_ECB
 
MBEDTLS_CIPHER_CAMELLIA_192_ECB


	)

987 
	#POLARSSL_CIPHER_CAMELLIA_192_GCM
 
MBEDTLS_CIPHER_CAMELLIA_192_GCM


	)

988 
	#POLARSSL_CIPHER_CAMELLIA_256_CBC
 
MBEDTLS_CIPHER_CAMELLIA_256_CBC


	)

989 
	#POLARSSL_CIPHER_CAMELLIA_256_CCM
 
MBEDTLS_CIPHER_CAMELLIA_256_CCM


	)

990 
	#POLARSSL_CIPHER_CAMELLIA_256_CFB128
 
MBEDTLS_CIPHER_CAMELLIA_256_CFB128


	)

991 
	#POLARSSL_CIPHER_CAMELLIA_256_CTR
 
MBEDTLS_CIPHER_CAMELLIA_256_CTR


	)

992 
	#POLARSSL_CIPHER_CAMELLIA_256_ECB
 
MBEDTLS_CIPHER_CAMELLIA_256_ECB


	)

993 
	#POLARSSL_CIPHER_CAMELLIA_256_GCM
 
MBEDTLS_CIPHER_CAMELLIA_256_GCM


	)

994 
	#POLARSSL_CIPHER_DES_CBC
 
MBEDTLS_CIPHER_DES_CBC


	)

995 
	#POLARSSL_CIPHER_DES_ECB
 
MBEDTLS_CIPHER_DES_ECB


	)

996 
	#POLARSSL_CIPHER_DES_EDE3_CBC
 
MBEDTLS_CIPHER_DES_EDE3_CBC


	)

997 
	#POLARSSL_CIPHER_DES_EDE3_ECB
 
MBEDTLS_CIPHER_DES_EDE3_ECB


	)

998 
	#POLARSSL_CIPHER_DES_EDE_CBC
 
MBEDTLS_CIPHER_DES_EDE_CBC


	)

999 
	#POLARSSL_CIPHER_DES_EDE_ECB
 
MBEDTLS_CIPHER_DES_EDE_ECB


	)

1000 
	#POLARSSL_CIPHER_H
 
MBEDTLS_CIPHER_H


	)

1001 
	#POLARSSL_CIPHER_ID_3DES
 
MBEDTLS_CIPHER_ID_3DES


	)

1002 
	#POLARSSL_CIPHER_ID_AES
 
MBEDTLS_CIPHER_ID_AES


	)

1003 
	#POLARSSL_CIPHER_ID_ARC4
 
MBEDTLS_CIPHER_ID_ARC4


	)

1004 
	#POLARSSL_CIPHER_ID_BLOWFISH
 
MBEDTLS_CIPHER_ID_BLOWFISH


	)

1005 
	#POLARSSL_CIPHER_ID_CAMELLIA
 
MBEDTLS_CIPHER_ID_CAMELLIA


	)

1006 
	#POLARSSL_CIPHER_ID_DES
 
MBEDTLS_CIPHER_ID_DES


	)

1007 
	#POLARSSL_CIPHER_ID_NONE
 
MBEDTLS_CIPHER_ID_NONE


	)

1008 
	#POLARSSL_CIPHER_ID_NULL
 
MBEDTLS_CIPHER_ID_NULL


	)

1009 
	#POLARSSL_CIPHER_MODE_AEAD
 
MBEDTLS_CIPHER_MODE_AEAD


	)

1010 
	#POLARSSL_CIPHER_MODE_STREAM
 
MBEDTLS_CIPHER_MODE_STREAM


	)

1011 
	#POLARSSL_CIPHER_MODE_WITH_PADDING
 
MBEDTLS_CIPHER_MODE_WITH_PADDING


	)

1012 
	#POLARSSL_CIPHER_NONE
 
MBEDTLS_CIPHER_NONE


	)

1013 
	#POLARSSL_CIPHER_NULL
 
MBEDTLS_CIPHER_NULL


	)

1014 
	#POLARSSL_CIPHER_VARIABLE_IV_LEN
 
MBEDTLS_CIPHER_VARIABLE_IV_LEN


	)

1015 
	#POLARSSL_CIPHER_VARIABLE_KEY_LEN
 
MBEDTLS_CIPHER_VARIABLE_KEY_LEN


	)

1016 
	#POLARSSL_CIPHER_WRAP_H
 
MBEDTLS_CIPHER_WRAP_H


	)

1017 
	#POLARSSL_CONFIG_H
 
MBEDTLS_CONFIG_H


	)

1018 
	#POLARSSL_CTR_DRBG_H
 
MBEDTLS_CTR_DRBG_H


	)

1019 
	#POLARSSL_DEBUG_H
 
MBEDTLS_DEBUG_H


	)

1020 
	#POLARSSL_DEBUG_LOG_FULL
 
MBEDTLS_DEBUG_LOG_FULL


	)

1021 
	#POLARSSL_DEBUG_LOG_RAW
 
MBEDTLS_DEBUG_LOG_RAW


	)

1022 
	#POLARSSL_DECRYPT
 
MBEDTLS_DECRYPT


	)

1023 
	#POLARSSL_DES_H
 
MBEDTLS_DES_H


	)

1024 
	#POLARSSL_DHM_H
 
MBEDTLS_DHM_H


	)

1025 
	#POLARSSL_DHM_RFC2409_MODP_1024_G
 
MBEDTLS_DHM_RFC2409_MODP_1024_G


	)

1026 
	#POLARSSL_DHM_RFC2409_MODP_1024_P
 
MBEDTLS_DHM_RFC2409_MODP_1024_P


	)

1027 
	#POLARSSL_DHM_RFC3526_MODP_2048_G
 
MBEDTLS_DHM_RFC3526_MODP_2048_G


	)

1028 
	#POLARSSL_DHM_RFC3526_MODP_2048_P
 
MBEDTLS_DHM_RFC3526_MODP_2048_P


	)

1029 
	#POLARSSL_DHM_RFC3526_MODP_3072_G
 
MBEDTLS_DHM_RFC3526_MODP_3072_G


	)

1030 
	#POLARSSL_DHM_RFC3526_MODP_3072_P
 
MBEDTLS_DHM_RFC3526_MODP_3072_P


	)

1031 
	#POLARSSL_DHM_RFC5114_MODP_1024_G
 
MBEDTLS_DHM_RFC5114_MODP_1024_G


	)

1032 
	#POLARSSL_DHM_RFC5114_MODP_1024_P
 
MBEDTLS_DHM_RFC5114_MODP_1024_P


	)

1033 
	#POLARSSL_DHM_RFC5114_MODP_2048_G
 
MBEDTLS_DHM_RFC5114_MODP_2048_G


	)

1034 
	#POLARSSL_DHM_RFC5114_MODP_2048_P
 
MBEDTLS_DHM_RFC5114_MODP_2048_P


	)

1035 
	#POLARSSL_ECDH_H
 
MBEDTLS_ECDH_H


	)

1036 
	#POLARSSL_ECDH_OURS
 
MBEDTLS_ECDH_OURS


	)

1037 
	#POLARSSL_ECDH_THEIRS
 
MBEDTLS_ECDH_THEIRS


	)

1038 
	#POLARSSL_ECDSA_H
 
MBEDTLS_ECDSA_H


	)

1039 
	#POLARSSL_ECP_DP_BP256R1
 
MBEDTLS_ECP_DP_BP256R1


	)

1040 
	#POLARSSL_ECP_DP_BP384R1
 
MBEDTLS_ECP_DP_BP384R1


	)

1041 
	#POLARSSL_ECP_DP_BP512R1
 
MBEDTLS_ECP_DP_BP512R1


	)

1042 
	#POLARSSL_ECP_DP_M255
 
MBEDTLS_ECP_DP_CURVE25519


	)

1043 
	#POLARSSL_ECP_DP_MAX
 
MBEDTLS_ECP_DP_MAX


	)

1044 
	#POLARSSL_ECP_DP_NONE
 
MBEDTLS_ECP_DP_NONE


	)

1045 
	#POLARSSL_ECP_DP_SECP192K1
 
MBEDTLS_ECP_DP_SECP192K1


	)

1046 
	#POLARSSL_ECP_DP_SECP192R1
 
MBEDTLS_ECP_DP_SECP192R1


	)

1047 
	#POLARSSL_ECP_DP_SECP224K1
 
MBEDTLS_ECP_DP_SECP224K1


	)

1048 
	#POLARSSL_ECP_DP_SECP224R1
 
MBEDTLS_ECP_DP_SECP224R1


	)

1049 
	#POLARSSL_ECP_DP_SECP256K1
 
MBEDTLS_ECP_DP_SECP256K1


	)

1050 
	#POLARSSL_ECP_DP_SECP256R1
 
MBEDTLS_ECP_DP_SECP256R1


	)

1051 
	#POLARSSL_ECP_DP_SECP384R1
 
MBEDTLS_ECP_DP_SECP384R1


	)

1052 
	#POLARSSL_ECP_DP_SECP521R1
 
MBEDTLS_ECP_DP_SECP521R1


	)

1053 
	#POLARSSL_ECP_H
 
MBEDTLS_ECP_H


	)

1054 
	#POLARSSL_ECP_MAX_BYTES
 
MBEDTLS_ECP_MAX_BYTES


	)

1055 
	#POLARSSL_ECP_MAX_PT_LEN
 
MBEDTLS_ECP_MAX_PT_LEN


	)

1056 
	#POLARSSL_ECP_PF_COMPRESSED
 
MBEDTLS_ECP_PF_COMPRESSED


	)

1057 
	#POLARSSL_ECP_PF_UNCOMPRESSED
 
MBEDTLS_ECP_PF_UNCOMPRESSED


	)

1058 
	#POLARSSL_ECP_TLS_NAMED_CURVE
 
MBEDTLS_ECP_TLS_NAMED_CURVE


	)

1059 
	#POLARSSL_ENCRYPT
 
MBEDTLS_ENCRYPT


	)

1060 
	#POLARSSL_ENTROPY_H
 
MBEDTLS_ENTROPY_H


	)

1061 
	#POLARSSL_ENTROPY_POLL_H
 
MBEDTLS_ENTROPY_POLL_H


	)

1062 
	#POLARSSL_ENTROPY_SHA256_ACCUMULATOR
 
MBEDTLS_ENTROPY_SHA256_ACCUMULATOR


	)

1063 
	#POLARSSL_ENTROPY_SHA512_ACCUMULATOR
 
MBEDTLS_ENTROPY_SHA512_ACCUMULATOR


	)

1064 
	#POLARSSL_ERROR_H
 
MBEDTLS_ERROR_H


	)

1065 
	#POLARSSL_ERR_AES_INVALID_INPUT_LENGTH
 
MBEDTLS_ERR_AES_INVALID_INPUT_LENGTH


	)

1066 
	#POLARSSL_ERR_AES_INVALID_KEY_LENGTH
 
MBEDTLS_ERR_AES_INVALID_KEY_LENGTH


	)

1067 
	#POLARSSL_ERR_ASN1_BUF_TOO_SMALL
 
MBEDTLS_ERR_ASN1_BUF_TOO_SMALL


	)

1068 
	#POLARSSL_ERR_ASN1_INVALID_DATA
 
MBEDTLS_ERR_ASN1_INVALID_DATA


	)

1069 
	#POLARSSL_ERR_ASN1_INVALID_LENGTH
 
MBEDTLS_ERR_ASN1_INVALID_LENGTH


	)

1070 
	#POLARSSL_ERR_ASN1_LENGTH_MISMATCH
 
MBEDTLS_ERR_ASN1_LENGTH_MISMATCH


	)

1071 
	#POLARSSL_ERR_ASN1_MALLOC_FAILED
 
MBEDTLS_ERR_ASN1_ALLOC_FAILED


	)

1072 
	#POLARSSL_ERR_ASN1_OUT_OF_DATA
 
MBEDTLS_ERR_ASN1_OUT_OF_DATA


	)

1073 
	#POLARSSL_ERR_ASN1_UNEXPECTED_TAG
 
MBEDTLS_ERR_ASN1_UNEXPECTED_TAG


	)

1074 
	#POLARSSL_ERR_BASE64_BUFFER_TOO_SMALL
 
MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL


	)

1075 
	#POLARSSL_ERR_BASE64_INVALID_CHARACTER
 
MBEDTLS_ERR_BASE64_INVALID_CHARACTER


	)

1076 
	#POLARSSL_ERR_BLOWFISH_INVALID_INPUT_LENGTH
 
MBEDTLS_ERR_BLOWFISH_INVALID_INPUT_LENGTH


	)

1077 
	#POLARSSL_ERR_BLOWFISH_INVALID_KEY_LENGTH
 
MBEDTLS_ERR_BLOWFISH_INVALID_KEY_LENGTH


	)

1078 
	#POLARSSL_ERR_CAMELLIA_INVALID_INPUT_LENGTH
 
MBEDTLS_ERR_CAMELLIA_INVALID_INPUT_LENGTH


	)

1079 
	#POLARSSL_ERR_CAMELLIA_INVALID_KEY_LENGTH
 
MBEDTLS_ERR_CAMELLIA_INVALID_KEY_LENGTH


	)

1080 
	#POLARSSL_ERR_CCM_AUTH_FAILED
 
MBEDTLS_ERR_CCM_AUTH_FAILED


	)

1081 
	#POLARSSL_ERR_CCM_BAD_INPUT
 
MBEDTLS_ERR_CCM_BAD_INPUT


	)

1082 
	#POLARSSL_ERR_CIPHER_ALLOC_FAILED
 
MBEDTLS_ERR_CIPHER_ALLOC_FAILED


	)

1083 
	#POLARSSL_ERR_CIPHER_AUTH_FAILED
 
MBEDTLS_ERR_CIPHER_AUTH_FAILED


	)

1084 
	#POLARSSL_ERR_CIPHER_BAD_INPUT_DATA
 
MBEDTLS_ERR_CIPHER_BAD_INPUT_DATA


	)

1085 
	#POLARSSL_ERR_CIPHER_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_CIPHER_FEATURE_UNAVAILABLE


	)

1086 
	#POLARSSL_ERR_CIPHER_FULL_BLOCK_EXPECTED
 
MBEDTLS_ERR_CIPHER_FULL_BLOCK_EXPECTED


	)

1087 
	#POLARSSL_ERR_CIPHER_INVALID_PADDING
 
MBEDTLS_ERR_CIPHER_INVALID_PADDING


	)

1088 
	#POLARSSL_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED
 
MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED


	)

1089 
	#POLARSSL_ERR_CTR_DRBG_FILE_IO_ERROR
 
MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR


	)

1090 
	#POLARSSL_ERR_CTR_DRBG_INPUT_TOO_BIG
 
MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG


	)

1091 
	#POLARSSL_ERR_CTR_DRBG_REQUEST_TOO_BIG
 
MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG


	)

1092 
	#POLARSSL_ERR_DES_INVALID_INPUT_LENGTH
 
MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH


	)

1093 
	#POLARSSL_ERR_DHM_BAD_INPUT_DATA
 
MBEDTLS_ERR_DHM_BAD_INPUT_DATA


	)

1094 
	#POLARSSL_ERR_DHM_CALC_SECRET_FAILED
 
MBEDTLS_ERR_DHM_CALC_SECRET_FAILED


	)

1095 
	#POLARSSL_ERR_DHM_FILE_IO_ERROR
 
MBEDTLS_ERR_DHM_FILE_IO_ERROR


	)

1096 
	#POLARSSL_ERR_DHM_INVALID_FORMAT
 
MBEDTLS_ERR_DHM_INVALID_FORMAT


	)

1097 
	#POLARSSL_ERR_DHM_MAKE_PARAMS_FAILED
 
MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED


	)

1098 
	#POLARSSL_ERR_DHM_MAKE_PUBLIC_FAILED
 
MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED


	)

1099 
	#POLARSSL_ERR_DHM_MALLOC_FAILED
 
MBEDTLS_ERR_DHM_ALLOC_FAILED


	)

1100 
	#POLARSSL_ERR_DHM_READ_PARAMS_FAILED
 
MBEDTLS_ERR_DHM_READ_PARAMS_FAILED


	)

1101 
	#POLARSSL_ERR_DHM_READ_PUBLIC_FAILED
 
MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED


	)

1102 
	#POLARSSL_ERR_ECP_BAD_INPUT_DATA
 
MBEDTLS_ERR_ECP_BAD_INPUT_DATA


	)

1103 
	#POLARSSL_ERR_ECP_BUFFER_TOO_SMALL
 
MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL


	)

1104 
	#POLARSSL_ERR_ECP_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE


	)

1105 
	#POLARSSL_ERR_ECP_INVALID_KEY
 
MBEDTLS_ERR_ECP_INVALID_KEY


	)

1106 
	#POLARSSL_ERR_ECP_MALLOC_FAILED
 
MBEDTLS_ERR_ECP_ALLOC_FAILED


	)

1107 
	#POLARSSL_ERR_ECP_RANDOM_FAILED
 
MBEDTLS_ERR_ECP_RANDOM_FAILED


	)

1108 
	#POLARSSL_ERR_ECP_SIG_LEN_MISMATCH
 
MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH


	)

1109 
	#POLARSSL_ERR_ECP_VERIFY_FAILED
 
MBEDTLS_ERR_ECP_VERIFY_FAILED


	)

1110 
	#POLARSSL_ERR_ENTROPY_FILE_IO_ERROR
 
MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR


	)

1111 
	#POLARSSL_ERR_ENTROPY_MAX_SOURCES
 
MBEDTLS_ERR_ENTROPY_MAX_SOURCES


	)

1112 
	#POLARSSL_ERR_ENTROPY_NO_SOURCES_DEFINED
 
MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED


	)

1113 
	#POLARSSL_ERR_ENTROPY_SOURCE_FAILED
 
MBEDTLS_ERR_ENTROPY_SOURCE_FAILED


	)

1114 
	#POLARSSL_ERR_GCM_AUTH_FAILED
 
MBEDTLS_ERR_GCM_AUTH_FAILED


	)

1115 
	#POLARSSL_ERR_GCM_BAD_INPUT
 
MBEDTLS_ERR_GCM_BAD_INPUT


	)

1116 
	#POLARSSL_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED
 
MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED


	)

1117 
	#POLARSSL_ERR_HMAC_DRBG_FILE_IO_ERROR
 
MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR


	)

1118 
	#POLARSSL_ERR_HMAC_DRBG_INPUT_TOO_BIG
 
MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG


	)

1119 
	#POLARSSL_ERR_HMAC_DRBG_REQUEST_TOO_BIG
 
MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG


	)

1120 
	#POLARSSL_ERR_MD2_FILE_IO_ERROR
 
MBEDTLS_ERR_MD2_FILE_IO_ERROR


	)

1121 
	#POLARSSL_ERR_MD4_FILE_IO_ERROR
 
MBEDTLS_ERR_MD4_FILE_IO_ERROR


	)

1122 
	#POLARSSL_ERR_MD5_FILE_IO_ERROR
 
MBEDTLS_ERR_MD5_FILE_IO_ERROR


	)

1123 
	#POLARSSL_ERR_MD_ALLOC_FAILED
 
MBEDTLS_ERR_MD_ALLOC_FAILED


	)

1124 
	#POLARSSL_ERR_MD_BAD_INPUT_DATA
 
MBEDTLS_ERR_MD_BAD_INPUT_DATA


	)

1125 
	#POLARSSL_ERR_MD_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE


	)

1126 
	#POLARSSL_ERR_MD_FILE_IO_ERROR
 
MBEDTLS_ERR_MD_FILE_IO_ERROR


	)

1127 
	#POLARSSL_ERR_MPI_BAD_INPUT_DATA
 
MBEDTLS_ERR_MPI_BAD_INPUT_DATA


	)

1128 
	#POLARSSL_ERR_MPI_BUFFER_TOO_SMALL
 
MBEDTLS_ERR_MPI_BUFFER_TOO_SMALL


	)

1129 
	#POLARSSL_ERR_MPI_DIVISION_BY_ZERO
 
MBEDTLS_ERR_MPI_DIVISION_BY_ZERO


	)

1130 
	#POLARSSL_ERR_MPI_FILE_IO_ERROR
 
MBEDTLS_ERR_MPI_FILE_IO_ERROR


	)

1131 
	#POLARSSL_ERR_MPI_INVALID_CHARACTER
 
MBEDTLS_ERR_MPI_INVALID_CHARACTER


	)

1132 
	#POLARSSL_ERR_MPI_MALLOC_FAILED
 
MBEDTLS_ERR_MPI_ALLOC_FAILED


	)

1133 
	#POLARSSL_ERR_MPI_NEGATIVE_VALUE
 
MBEDTLS_ERR_MPI_NEGATIVE_VALUE


	)

1134 
	#POLARSSL_ERR_MPI_NOT_ACCEPTABLE
 
MBEDTLS_ERR_MPI_NOT_ACCEPTABLE


	)

1135 
	#POLARSSL_ERR_NET_ACCEPT_FAILED
 
MBEDTLS_ERR_NET_ACCEPT_FAILED


	)

1136 
	#POLARSSL_ERR_NET_BIND_FAILED
 
MBEDTLS_ERR_NET_BIND_FAILED


	)

1137 
	#POLARSSL_ERR_NET_CONNECT_FAILED
 
MBEDTLS_ERR_NET_CONNECT_FAILED


	)

1138 
	#POLARSSL_ERR_NET_CONN_RESET
 
MBEDTLS_ERR_NET_CONN_RESET


	)

1139 
	#POLARSSL_ERR_NET_LISTEN_FAILED
 
MBEDTLS_ERR_NET_LISTEN_FAILED


	)

1140 
	#POLARSSL_ERR_NET_RECV_FAILED
 
MBEDTLS_ERR_NET_RECV_FAILED


	)

1141 
	#POLARSSL_ERR_NET_SEND_FAILED
 
MBEDTLS_ERR_NET_SEND_FAILED


	)

1142 
	#POLARSSL_ERR_NET_SOCKET_FAILED
 
MBEDTLS_ERR_NET_SOCKET_FAILED


	)

1143 
	#POLARSSL_ERR_NET_TIMEOUT
 
MBEDTLS_ERR_SSL_TIMEOUT


	)

1144 
	#POLARSSL_ERR_NET_UNKNOWN_HOST
 
MBEDTLS_ERR_NET_UNKNOWN_HOST


	)

1145 
	#POLARSSL_ERR_NET_WANT_READ
 
MBEDTLS_ERR_SSL_WANT_READ


	)

1146 
	#POLARSSL_ERR_NET_WANT_WRITE
 
MBEDTLS_ERR_SSL_WANT_WRITE


	)

1147 
	#POLARSSL_ERR_OID_BUF_TOO_SMALL
 
MBEDTLS_ERR_OID_BUF_TOO_SMALL


	)

1148 
	#POLARSSL_ERR_OID_NOT_FOUND
 
MBEDTLS_ERR_OID_NOT_FOUND


	)

1149 
	#POLARSSL_ERR_PADLOCK_DATA_MISALIGNED
 
MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED


	)

1150 
	#POLARSSL_ERR_PBKDF2_BAD_INPUT_DATA
 
MBEDTLS_ERR_PBKDF2_BAD_INPUT_DATA


	)

1151 
	#POLARSSL_ERR_PEM_BAD_INPUT_DATA
 
MBEDTLS_ERR_PEM_BAD_INPUT_DATA


	)

1152 
	#POLARSSL_ERR_PEM_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE


	)

1153 
	#POLARSSL_ERR_PEM_INVALID_DATA
 
MBEDTLS_ERR_PEM_INVALID_DATA


	)

1154 
	#POLARSSL_ERR_PEM_INVALID_ENC_IV
 
MBEDTLS_ERR_PEM_INVALID_ENC_IV


	)

1155 
	#POLARSSL_ERR_PEM_MALLOC_FAILED
 
MBEDTLS_ERR_PEM_ALLOC_FAILED


	)

1156 
	#POLARSSL_ERR_PEM_NO_HEADER_FOOTER_PRESENT
 
MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT


	)

1157 
	#POLARSSL_ERR_PEM_PASSWORD_MISMATCH
 
MBEDTLS_ERR_PEM_PASSWORD_MISMATCH


	)

1158 
	#POLARSSL_ERR_PEM_PASSWORD_REQUIRED
 
MBEDTLS_ERR_PEM_PASSWORD_REQUIRED


	)

1159 
	#POLARSSL_ERR_PEM_UNKNOWN_ENC_ALG
 
MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG


	)

1160 
	#POLARSSL_ERR_PKCS12_BAD_INPUT_DATA
 
MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA


	)

1161 
	#POLARSSL_ERR_PKCS12_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE


	)

1162 
	#POLARSSL_ERR_PKCS12_PASSWORD_MISMATCH
 
MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH


	)

1163 
	#POLARSSL_ERR_PKCS12_PBE_INVALID_FORMAT
 
MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT


	)

1164 
	#POLARSSL_ERR_PKCS5_BAD_INPUT_DATA
 
MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA


	)

1165 
	#POLARSSL_ERR_PKCS5_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE


	)

1166 
	#POLARSSL_ERR_PKCS5_INVALID_FORMAT
 
MBEDTLS_ERR_PKCS5_INVALID_FORMAT


	)

1167 
	#POLARSSL_ERR_PKCS5_PASSWORD_MISMATCH
 
MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH


	)

1168 
	#POLARSSL_ERR_PK_BAD_INPUT_DATA
 
MBEDTLS_ERR_PK_BAD_INPUT_DATA


	)

1169 
	#POLARSSL_ERR_PK_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE


	)

1170 
	#POLARSSL_ERR_PK_FILE_IO_ERROR
 
MBEDTLS_ERR_PK_FILE_IO_ERROR


	)

1171 
	#POLARSSL_ERR_PK_INVALID_ALG
 
MBEDTLS_ERR_PK_INVALID_ALG


	)

1172 
	#POLARSSL_ERR_PK_INVALID_PUBKEY
 
MBEDTLS_ERR_PK_INVALID_PUBKEY


	)

1173 
	#POLARSSL_ERR_PK_KEY_INVALID_FORMAT
 
MBEDTLS_ERR_PK_KEY_INVALID_FORMAT


	)

1174 
	#POLARSSL_ERR_PK_KEY_INVALID_VERSION
 
MBEDTLS_ERR_PK_KEY_INVALID_VERSION


	)

1175 
	#POLARSSL_ERR_PK_MALLOC_FAILED
 
MBEDTLS_ERR_PK_ALLOC_FAILED


	)

1176 
	#POLARSSL_ERR_PK_PASSWORD_MISMATCH
 
MBEDTLS_ERR_PK_PASSWORD_MISMATCH


	)

1177 
	#POLARSSL_ERR_PK_PASSWORD_REQUIRED
 
MBEDTLS_ERR_PK_PASSWORD_REQUIRED


	)

1178 
	#POLARSSL_ERR_PK_SIG_LEN_MISMATCH
 
MBEDTLS_ERR_PK_SIG_LEN_MISMATCH


	)

1179 
	#POLARSSL_ERR_PK_TYPE_MISMATCH
 
MBEDTLS_ERR_PK_TYPE_MISMATCH


	)

1180 
	#POLARSSL_ERR_PK_UNKNOWN_NAMED_CURVE
 
MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE


	)

1181 
	#POLARSSL_ERR_PK_UNKNOWN_PK_ALG
 
MBEDTLS_ERR_PK_UNKNOWN_PK_ALG


	)

1182 
	#POLARSSL_ERR_RIPEMD160_FILE_IO_ERROR
 
MBEDTLS_ERR_RIPEMD160_FILE_IO_ERROR


	)

1183 
	#POLARSSL_ERR_RSA_BAD_INPUT_DATA
 
MBEDTLS_ERR_RSA_BAD_INPUT_DATA


	)

1184 
	#POLARSSL_ERR_RSA_INVALID_PADDING
 
MBEDTLS_ERR_RSA_INVALID_PADDING


	)

1185 
	#POLARSSL_ERR_RSA_KEY_CHECK_FAILED
 
MBEDTLS_ERR_RSA_KEY_CHECK_FAILED


	)

1186 
	#POLARSSL_ERR_RSA_KEY_GEN_FAILED
 
MBEDTLS_ERR_RSA_KEY_GEN_FAILED


	)

1187 
	#POLARSSL_ERR_RSA_OUTPUT_TOO_LARGE
 
MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE


	)

1188 
	#POLARSSL_ERR_RSA_PRIVATE_FAILED
 
MBEDTLS_ERR_RSA_PRIVATE_FAILED


	)

1189 
	#POLARSSL_ERR_RSA_PUBLIC_FAILED
 
MBEDTLS_ERR_RSA_PUBLIC_FAILED


	)

1190 
	#POLARSSL_ERR_RSA_RNG_FAILED
 
MBEDTLS_ERR_RSA_RNG_FAILED


	)

1191 
	#POLARSSL_ERR_RSA_VERIFY_FAILED
 
MBEDTLS_ERR_RSA_VERIFY_FAILED


	)

1192 
	#POLARSSL_ERR_SHA1_FILE_IO_ERROR
 
MBEDTLS_ERR_SHA1_FILE_IO_ERROR


	)

1193 
	#POLARSSL_ERR_SHA256_FILE_IO_ERROR
 
MBEDTLS_ERR_SHA256_FILE_IO_ERROR


	)

1194 
	#POLARSSL_ERR_SHA512_FILE_IO_ERROR
 
MBEDTLS_ERR_SHA512_FILE_IO_ERROR


	)

1195 
	#POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE
 
MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE


	)

1196 
	#POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST
 
MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST


	)

1197 
	#POLARSSL_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY
 
MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY


	)

1198 
	#POLARSSL_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC
 
MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC


	)

1199 
	#POLARSSL_ERR_SSL_BAD_HS_CLIENT_HELLO
 
MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO


	)

1200 
	#POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE
 
MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE


	)

1201 
	#POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS
 
MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS


	)

1202 
	#POLARSSL_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP
 
MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP


	)

1203 
	#POLARSSL_ERR_SSL_BAD_HS_FINISHED
 
MBEDTLS_ERR_SSL_BAD_HS_FINISHED


	)

1204 
	#POLARSSL_ERR_SSL_BAD_HS_NEW_SESSION_TICKET
 
MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET


	)

1205 
	#POLARSSL_ERR_SSL_BAD_HS_PROTOCOL_VERSION
 
MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION


	)

1206 
	#POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO
 
MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO


	)

1207 
	#POLARSSL_ERR_SSL_BAD_HS_SERVER_HELLO_DONE
 
MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE


	)

1208 
	#POLARSSL_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE
 
MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE


	)

1209 
	#POLARSSL_ERR_SSL_BAD_INPUT_DATA
 
MBEDTLS_ERR_SSL_BAD_INPUT_DATA


	)

1210 
	#POLARSSL_ERR_SSL_BUFFER_TOO_SMALL
 
MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL


	)

1211 
	#POLARSSL_ERR_SSL_CA_CHAIN_REQUIRED
 
MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED


	)

1212 
	#POLARSSL_ERR_SSL_CERTIFICATE_REQUIRED
 
MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED


	)

1213 
	#POLARSSL_ERR_SSL_CERTIFICATE_TOO_LARGE
 
MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE


	)

1214 
	#POLARSSL_ERR_SSL_COMPRESSION_FAILED
 
MBEDTLS_ERR_SSL_COMPRESSION_FAILED


	)

1215 
	#POLARSSL_ERR_SSL_CONN_EOF
 
MBEDTLS_ERR_SSL_CONN_EOF


	)

1216 
	#POLARSSL_ERR_SSL_COUNTER_WRAPPING
 
MBEDTLS_ERR_SSL_COUNTER_WRAPPING


	)

1217 
	#POLARSSL_ERR_SSL_FATAL_ALERT_MESSAGE
 
MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE


	)

1218 
	#POLARSSL_ERR_SSL_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE


	)

1219 
	#POLARSSL_ERR_SSL_HELLO_VERIFY_REQUIRED
 
MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED


	)

1220 
	#POLARSSL_ERR_SSL_HW_ACCEL_FAILED
 
MBEDTLS_ERR_SSL_HW_ACCEL_FAILED


	)

1221 
	#POLARSSL_ERR_SSL_HW_ACCEL_FALLTHROUGH
 
MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH


	)

1222 
	#POLARSSL_ERR_SSL_INTERNAL_ERROR
 
MBEDTLS_ERR_SSL_INTERNAL_ERROR


	)

1223 
	#POLARSSL_ERR_SSL_INVALID_MAC
 
MBEDTLS_ERR_SSL_INVALID_MAC


	)

1224 
	#POLARSSL_ERR_SSL_INVALID_RECORD
 
MBEDTLS_ERR_SSL_INVALID_RECORD


	)

1225 
	#POLARSSL_ERR_SSL_MALLOC_FAILED
 
MBEDTLS_ERR_SSL_ALLOC_FAILED


	)

1226 
	#POLARSSL_ERR_SSL_NO_CIPHER_CHOSEN
 
MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN


	)

1227 
	#POLARSSL_ERR_SSL_NO_CLIENT_CERTIFICATE
 
MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE


	)

1228 
	#POLARSSL_ERR_SSL_NO_RNG
 
MBEDTLS_ERR_SSL_NO_RNG


	)

1229 
	#POLARSSL_ERR_SSL_NO_USABLE_CIPHERSUITE
 
MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE


	)

1230 
	#POLARSSL_ERR_SSL_PEER_CLOSE_NOTIFY
 
MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY


	)

1231 
	#POLARSSL_ERR_SSL_PEER_VERIFY_FAILED
 
MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED


	)

1232 
	#POLARSSL_ERR_SSL_PK_TYPE_MISMATCH
 
MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH


	)

1233 
	#POLARSSL_ERR_SSL_PRIVATE_KEY_REQUIRED
 
MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED


	)

1234 
	#POLARSSL_ERR_SSL_SESSION_TICKET_EXPIRED
 
MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED


	)

1235 
	#POLARSSL_ERR_SSL_UNEXPECTED_MESSAGE
 
MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE


	)

1236 
	#POLARSSL_ERR_SSL_UNKNOWN_CIPHER
 
MBEDTLS_ERR_SSL_UNKNOWN_CIPHER


	)

1237 
	#POLARSSL_ERR_SSL_UNKNOWN_IDENTITY
 
MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY


	)

1238 
	#POLARSSL_ERR_SSL_WAITING_SERVER_HELLO_RENEGO
 
MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO


	)

1239 
	#POLARSSL_ERR_THREADING_BAD_INPUT_DATA
 
MBEDTLS_ERR_THREADING_BAD_INPUT_DATA


	)

1240 
	#POLARSSL_ERR_THREADING_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE


	)

1241 
	#POLARSSL_ERR_THREADING_MUTEX_ERROR
 
MBEDTLS_ERR_THREADING_MUTEX_ERROR


	)

1242 
	#POLARSSL_ERR_X509_BAD_INPUT_DATA
 
MBEDTLS_ERR_X509_BAD_INPUT_DATA


	)

1243 
	#POLARSSL_ERR_X509_CERT_UNKNOWN_FORMAT
 
MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT


	)

1244 
	#POLARSSL_ERR_X509_CERT_VERIFY_FAILED
 
MBEDTLS_ERR_X509_CERT_VERIFY_FAILED


	)

1245 
	#POLARSSL_ERR_X509_FEATURE_UNAVAILABLE
 
MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE


	)

1246 
	#POLARSSL_ERR_X509_FILE_IO_ERROR
 
MBEDTLS_ERR_X509_FILE_IO_ERROR


	)

1247 
	#POLARSSL_ERR_X509_INVALID_ALG
 
MBEDTLS_ERR_X509_INVALID_ALG


	)

1248 
	#POLARSSL_ERR_X509_INVALID_DATE
 
MBEDTLS_ERR_X509_INVALID_DATE


	)

1249 
	#POLARSSL_ERR_X509_INVALID_EXTENSIONS
 
MBEDTLS_ERR_X509_INVALID_EXTENSIONS


	)

1250 
	#POLARSSL_ERR_X509_INVALID_FORMAT
 
MBEDTLS_ERR_X509_INVALID_FORMAT


	)

1251 
	#POLARSSL_ERR_X509_INVALID_NAME
 
MBEDTLS_ERR_X509_INVALID_NAME


	)

1252 
	#POLARSSL_ERR_X509_INVALID_SERIAL
 
MBEDTLS_ERR_X509_INVALID_SERIAL


	)

1253 
	#POLARSSL_ERR_X509_INVALID_SIGNATURE
 
MBEDTLS_ERR_X509_INVALID_SIGNATURE


	)

1254 
	#POLARSSL_ERR_X509_INVALID_VERSION
 
MBEDTLS_ERR_X509_INVALID_VERSION


	)

1255 
	#POLARSSL_ERR_X509_MALLOC_FAILED
 
MBEDTLS_ERR_X509_ALLOC_FAILED


	)

1256 
	#POLARSSL_ERR_X509_SIG_MISMATCH
 
MBEDTLS_ERR_X509_SIG_MISMATCH


	)

1257 
	#POLARSSL_ERR_X509_UNKNOWN_OID
 
MBEDTLS_ERR_X509_UNKNOWN_OID


	)

1258 
	#POLARSSL_ERR_X509_UNKNOWN_SIG_ALG
 
MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG


	)

1259 
	#POLARSSL_ERR_X509_UNKNOWN_VERSION
 
MBEDTLS_ERR_X509_UNKNOWN_VERSION


	)

1260 
	#POLARSSL_ERR_XTEA_INVALID_INPUT_LENGTH
 
MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH


	)

1261 
	#POLARSSL_GCM_H
 
MBEDTLS_GCM_H


	)

1262 
	#POLARSSL_HAVEGE_H
 
MBEDTLS_HAVEGE_H


	)

1263 
	#POLARSSL_HAVE_INT32
 
MBEDTLS_HAVE_INT32


	)

1264 
	#POLARSSL_HAVE_INT64
 
MBEDTLS_HAVE_INT64


	)

1265 
	#POLARSSL_HAVE_UDBL
 
MBEDTLS_HAVE_UDBL


	)

1266 
	#POLARSSL_HAVE_X86
 
MBEDTLS_HAVE_X86


	)

1267 
	#POLARSSL_HAVE_X86_64
 
MBEDTLS_HAVE_X86_64


	)

1268 
	#POLARSSL_HMAC_DRBG_H
 
MBEDTLS_HMAC_DRBG_H


	)

1269 
	#POLARSSL_HMAC_DRBG_PR_OFF
 
MBEDTLS_HMAC_DRBG_PR_OFF


	)

1270 
	#POLARSSL_HMAC_DRBG_PR_ON
 
MBEDTLS_HMAC_DRBG_PR_ON


	)

1271 
	#POLARSSL_KEY_EXCHANGE_DHE_PSK
 
MBEDTLS_KEY_EXCHANGE_DHE_PSK


	)

1272 
	#POLARSSL_KEY_EXCHANGE_DHE_RSA
 
MBEDTLS_KEY_EXCHANGE_DHE_RSA


	)

1273 
	#POLARSSL_KEY_EXCHANGE_ECDHE_ECDSA
 
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA


	)

1274 
	#POLARSSL_KEY_EXCHANGE_ECDHE_PSK
 
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK


	)

1275 
	#POLARSSL_KEY_EXCHANGE_ECDHE_RSA
 
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA


	)

1276 
	#POLARSSL_KEY_EXCHANGE_ECDH_ECDSA
 
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA


	)

1277 
	#POLARSSL_KEY_EXCHANGE_ECDH_RSA
 
MBEDTLS_KEY_EXCHANGE_ECDH_RSA


	)

1278 
	#POLARSSL_KEY_EXCHANGE_NONE
 
MBEDTLS_KEY_EXCHANGE_NONE


	)

1279 
	#POLARSSL_KEY_EXCHANGE_PSK
 
MBEDTLS_KEY_EXCHANGE_PSK


	)

1280 
	#POLARSSL_KEY_EXCHANGE_RSA
 
MBEDTLS_KEY_EXCHANGE_RSA


	)

1281 
	#POLARSSL_KEY_EXCHANGE_RSA_PSK
 
MBEDTLS_KEY_EXCHANGE_RSA_PSK


	)

1282 
	#POLARSSL_KEY_EXCHANGE__SOME__ECDHE_ENABLED
 
MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED


	)

1283 
	#POLARSSL_KEY_EXCHANGE__SOME__PSK_ENABLED
 
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED


	)

1284 
	#POLARSSL_KEY_EXCHANGE__WITH_CERT__ENABLED
 
MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED


	)

1285 
	#POLARSSL_KEY_LENGTH_DES
 
MBEDTLS_KEY_LENGTH_DES


	)

1286 
	#POLARSSL_KEY_LENGTH_DES_EDE
 
MBEDTLS_KEY_LENGTH_DES_EDE


	)

1287 
	#POLARSSL_KEY_LENGTH_DES_EDE3
 
MBEDTLS_KEY_LENGTH_DES_EDE3


	)

1288 
	#POLARSSL_KEY_LENGTH_NONE
 
MBEDTLS_KEY_LENGTH_NONE


	)

1289 
	#POLARSSL_MAX_BLOCK_LENGTH
 
MBEDTLS_MAX_BLOCK_LENGTH


	)

1290 
	#POLARSSL_MAX_IV_LENGTH
 
MBEDTLS_MAX_IV_LENGTH


	)

1291 
	#POLARSSL_MD2_H
 
MBEDTLS_MD2_H


	)

1292 
	#POLARSSL_MD4_H
 
MBEDTLS_MD4_H


	)

1293 
	#POLARSSL_MD5_H
 
MBEDTLS_MD5_H


	)

1294 
	#POLARSSL_MD_H
 
MBEDTLS_MD_H


	)

1295 
	#POLARSSL_MD_MAX_SIZE
 
MBEDTLS_MD_MAX_SIZE


	)

1296 
	#POLARSSL_MD_MD2
 
MBEDTLS_MD_MD2


	)

1297 
	#POLARSSL_MD_MD4
 
MBEDTLS_MD_MD4


	)

1298 
	#POLARSSL_MD_MD5
 
MBEDTLS_MD_MD5


	)

1299 
	#POLARSSL_MD_NONE
 
MBEDTLS_MD_NONE


	)

1300 
	#POLARSSL_MD_RIPEMD160
 
MBEDTLS_MD_RIPEMD160


	)

1301 
	#POLARSSL_MD_SHA1
 
MBEDTLS_MD_SHA1


	)

1302 
	#POLARSSL_MD_SHA224
 
MBEDTLS_MD_SHA224


	)

1303 
	#POLARSSL_MD_SHA256
 
MBEDTLS_MD_SHA256


	)

1304 
	#POLARSSL_MD_SHA384
 
MBEDTLS_MD_SHA384


	)

1305 
	#POLARSSL_MD_SHA512
 
MBEDTLS_MD_SHA512


	)

1306 
	#POLARSSL_MD_WRAP_H
 
MBEDTLS_MD_WRAP_H


	)

1307 
	#POLARSSL_MEMORY_BUFFER_ALLOC_H
 
MBEDTLS_MEMORY_BUFFER_ALLOC_H


	)

1308 
	#POLARSSL_MEMORY_H
 
MBEDTLS_MEMORY_H


	)

1309 
	#POLARSSL_MODE_CBC
 
MBEDTLS_MODE_CBC


	)

1310 
	#POLARSSL_MODE_CCM
 
MBEDTLS_MODE_CCM


	)

1311 
	#POLARSSL_MODE_CFB
 
MBEDTLS_MODE_CFB


	)

1312 
	#POLARSSL_MODE_CTR
 
MBEDTLS_MODE_CTR


	)

1313 
	#POLARSSL_MODE_ECB
 
MBEDTLS_MODE_ECB


	)

1314 
	#POLARSSL_MODE_GCM
 
MBEDTLS_MODE_GCM


	)

1315 
	#POLARSSL_MODE_NONE
 
MBEDTLS_MODE_NONE


	)

1316 
	#POLARSSL_MODE_OFB
 
MBEDTLS_MODE_OFB


	)

1317 
	#POLARSSL_MODE_STREAM
 
MBEDTLS_MODE_STREAM


	)

1318 
	#POLARSSL_MPI_MAX_BITS
 
MBEDTLS_MPI_MAX_BITS


	)

1319 
	#POLARSSL_MPI_MAX_BITS_SCALE100
 
MBEDTLS_MPI_MAX_BITS_SCALE100


	)

1320 
	#POLARSSL_MPI_MAX_LIMBS
 
MBEDTLS_MPI_MAX_LIMBS


	)

1321 
	#POLARSSL_MPI_RW_BUFFER_SIZE
 
MBEDTLS_MPI_RW_BUFFER_SIZE


	)

1322 
	#POLARSSL_NET_H
 
MBEDTLS_NET_H


	)

1323 
	#POLARSSL_NET_LISTEN_BACKLOG
 
MBEDTLS_NET_LISTEN_BACKLOG


	)

1324 
	#POLARSSL_OID_H
 
MBEDTLS_OID_H


	)

1325 
	#POLARSSL_OPERATION_NONE
 
MBEDTLS_OPERATION_NONE


	)

1326 
	#POLARSSL_PADDING_NONE
 
MBEDTLS_PADDING_NONE


	)

1327 
	#POLARSSL_PADDING_ONE_AND_ZEROS
 
MBEDTLS_PADDING_ONE_AND_ZEROS


	)

1328 
	#POLARSSL_PADDING_PKCS7
 
MBEDTLS_PADDING_PKCS7


	)

1329 
	#POLARSSL_PADDING_ZEROS
 
MBEDTLS_PADDING_ZEROS


	)

1330 
	#POLARSSL_PADDING_ZEROS_AND_LEN
 
MBEDTLS_PADDING_ZEROS_AND_LEN


	)

1331 
	#POLARSSL_PADLOCK_H
 
MBEDTLS_PADLOCK_H


	)

1332 
	#POLARSSL_PBKDF2_H
 
MBEDTLS_PBKDF2_H


	)

1333 
	#POLARSSL_PEM_H
 
MBEDTLS_PEM_H


	)

1334 
	#POLARSSL_PKCS11_H
 
MBEDTLS_PKCS11_H


	)

1335 
	#POLARSSL_PKCS12_H
 
MBEDTLS_PKCS12_H


	)

1336 
	#POLARSSL_PKCS5_H
 
MBEDTLS_PKCS5_H


	)

1337 
	#POLARSSL_PK_DEBUG_ECP
 
MBEDTLS_PK_DEBUG_ECP


	)

1338 
	#POLARSSL_PK_DEBUG_MAX_ITEMS
 
MBEDTLS_PK_DEBUG_MAX_ITEMS


	)

1339 
	#POLARSSL_PK_DEBUG_MPI
 
MBEDTLS_PK_DEBUG_MPI


	)

1340 
	#POLARSSL_PK_DEBUG_NONE
 
MBEDTLS_PK_DEBUG_NONE


	)

1341 
	#POLARSSL_PK_ECDSA
 
MBEDTLS_PK_ECDSA


	)

1342 
	#POLARSSL_PK_ECKEY
 
MBEDTLS_PK_ECKEY


	)

1343 
	#POLARSSL_PK_ECKEY_DH
 
MBEDTLS_PK_ECKEY_DH


	)

1344 
	#POLARSSL_PK_H
 
MBEDTLS_PK_H


	)

1345 
	#POLARSSL_PK_NONE
 
MBEDTLS_PK_NONE


	)

1346 
	#POLARSSL_PK_RSA
 
MBEDTLS_PK_RSA


	)

1347 
	#POLARSSL_PK_RSASSA_PSS
 
MBEDTLS_PK_RSASSA_PSS


	)

1348 
	#POLARSSL_PK_RSA_ALT
 
MBEDTLS_PK_RSA_ALT


	)

1349 
	#POLARSSL_PK_WRAP_H
 
MBEDTLS_PK_WRAP_H


	)

1350 
	#POLARSSL_PLATFORM_H
 
MBEDTLS_PLATFORM_H


	)

1351 
	#POLARSSL_PREMASTER_SIZE
 
MBEDTLS_PREMASTER_SIZE


	)

1352 
	#POLARSSL_RIPEMD160_H
 
MBEDTLS_RIPEMD160_H


	)

1353 
	#POLARSSL_RSA_H
 
MBEDTLS_RSA_H


	)

1354 
	#POLARSSL_SHA1_H
 
MBEDTLS_SHA1_H


	)

1355 
	#POLARSSL_SHA256_H
 
MBEDTLS_SHA256_H


	)

1356 
	#POLARSSL_SHA512_H
 
MBEDTLS_SHA512_H


	)

1357 
	#POLARSSL_SSL_CACHE_H
 
MBEDTLS_SSL_CACHE_H


	)

1358 
	#POLARSSL_SSL_CIPHERSUITES_H
 
MBEDTLS_SSL_CIPHERSUITES_H


	)

1359 
	#POLARSSL_SSL_COOKIE_H
 
MBEDTLS_SSL_COOKIE_H


	)

1360 
	#POLARSSL_SSL_H
 
MBEDTLS_SSL_H


	)

1361 
	#POLARSSL_THREADING_H
 
MBEDTLS_THREADING_H


	)

1362 
	#POLARSSL_THREADING_IMPL
 
MBEDTLS_THREADING_IMPL


	)

1363 
	#POLARSSL_TIMING_H
 
MBEDTLS_TIMING_H


	)

1364 
	#POLARSSL_VERSION_H
 
MBEDTLS_VERSION_H


	)

1365 
	#POLARSSL_VERSION_MAJOR
 
MBEDTLS_VERSION_MAJOR


	)

1366 
	#POLARSSL_VERSION_MINOR
 
MBEDTLS_VERSION_MINOR


	)

1367 
	#POLARSSL_VERSION_NUMBER
 
MBEDTLS_VERSION_NUMBER


	)

1368 
	#POLARSSL_VERSION_PATCH
 
MBEDTLS_VERSION_PATCH


	)

1369 
	#POLARSSL_VERSION_STRING
 
MBEDTLS_VERSION_STRING


	)

1370 
	#POLARSSL_VERSION_STRING_FULL
 
MBEDTLS_VERSION_STRING_FULL


	)

1371 
	#POLARSSL_X509_CRL_H
 
MBEDTLS_X509_CRL_H


	)

1372 
	#POLARSSL_X509_CRT_H
 
MBEDTLS_X509_CRT_H


	)

1373 
	#POLARSSL_X509_CSR_H
 
MBEDTLS_X509_CSR_H


	)

1374 
	#POLARSSL_X509_H
 
MBEDTLS_X509_H


	)

1375 
	#POLARSSL_XTEA_H
 
MBEDTLS_XTEA_H


	)

1376 
	#RSA_CRYPT
 
MBEDTLS_RSA_CRYPT


	)

1377 
	#RSA_PKCS_V15
 
MBEDTLS_RSA_PKCS_V15


	)

1378 
	#RSA_PKCS_V21
 
MBEDTLS_RSA_PKCS_V21


	)

1379 
	#RSA_PRIVATE
 
MBEDTLS_RSA_PRIVATE


	)

1380 
	#RSA_PUBLIC
 
MBEDTLS_RSA_PUBLIC


	)

1381 
	#RSA_SALT_LEN_ANY
 
MBEDTLS_RSA_SALT_LEN_ANY


	)

1382 
	#RSA_SIGN
 
MBEDTLS_RSA_SIGN


	)

1383 
	#SSL_ALERT_LEVEL_FATAL
 
MBEDTLS_SSL_ALERT_LEVEL_FATAL


	)

1384 
	#SSL_ALERT_LEVEL_WARNING
 
MBEDTLS_SSL_ALERT_LEVEL_WARNING


	)

1385 
	#SSL_ALERT_MSG_ACCESS_DENIED
 
MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED


	)

1386 
	#SSL_ALERT_MSG_BAD_CERT
 
MBEDTLS_SSL_ALERT_MSG_BAD_CERT


	)

1387 
	#SSL_ALERT_MSG_BAD_RECORD_MAC
 
MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC


	)

1388 
	#SSL_ALERT_MSG_CERT_EXPIRED
 
MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED


	)

1389 
	#SSL_ALERT_MSG_CERT_REVOKED
 
MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED


	)

1390 
	#SSL_ALERT_MSG_CERT_UNKNOWN
 
MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN


	)

1391 
	#SSL_ALERT_MSG_CLOSE_NOTIFY
 
MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY


	)

1392 
	#SSL_ALERT_MSG_DECODE_ERROR
 
MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR


	)

1393 
	#SSL_ALERT_MSG_DECOMPRESSION_FAILURE
 
MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE


	)

1394 
	#SSL_ALERT_MSG_DECRYPTION_FAILED
 
MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED


	)

1395 
	#SSL_ALERT_MSG_DECRYPT_ERROR
 
MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR


	)

1396 
	#SSL_ALERT_MSG_EXPORT_RESTRICTION
 
MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION


	)

1397 
	#SSL_ALERT_MSG_HANDSHAKE_FAILURE
 
MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE


	)

1398 
	#SSL_ALERT_MSG_ILLEGAL_PARAMETER
 
MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER


	)

1399 
	#SSL_ALERT_MSG_INAPROPRIATE_FALLBACK
 
MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK


	)

1400 
	#SSL_ALERT_MSG_INSUFFICIENT_SECURITY
 
MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY


	)

1401 
	#SSL_ALERT_MSG_INTERNAL_ERROR
 
MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR


	)

1402 
	#SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL
 
MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL


	)

1403 
	#SSL_ALERT_MSG_NO_CERT
 
MBEDTLS_SSL_ALERT_MSG_NO_CERT


	)

1404 
	#SSL_ALERT_MSG_NO_RENEGOTIATION
 
MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION


	)

1405 
	#SSL_ALERT_MSG_PROTOCOL_VERSION
 
MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION


	)

1406 
	#SSL_ALERT_MSG_RECORD_OVERFLOW
 
MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW


	)

1407 
	#SSL_ALERT_MSG_UNEXPECTED_MESSAGE
 
MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE


	)

1408 
	#SSL_ALERT_MSG_UNKNOWN_CA
 
MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA


	)

1409 
	#SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY
 
MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY


	)

1410 
	#SSL_ALERT_MSG_UNRECOGNIZED_NAME
 
MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME


	)

1411 
	#SSL_ALERT_MSG_UNSUPPORTED_CERT
 
MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT


	)

1412 
	#SSL_ALERT_MSG_UNSUPPORTED_EXT
 
MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT


	)

1413 
	#SSL_ALERT_MSG_USER_CANCELED
 
MBEDTLS_SSL_ALERT_MSG_USER_CANCELED


	)

1414 
	#SSL_ANTI_REPLAY_DISABLED
 
MBEDTLS_SSL_ANTI_REPLAY_DISABLED


	)

1415 
	#SSL_ANTI_REPLAY_ENABLED
 
MBEDTLS_SSL_ANTI_REPLAY_ENABLED


	)

1416 
	#SSL_ARC4_DISABLED
 
MBEDTLS_SSL_ARC4_DISABLED


	)

1417 
	#SSL_ARC4_ENABLED
 
MBEDTLS_SSL_ARC4_ENABLED


	)

1418 
	#SSL_BUFFER_LEN
 
MBEDTLS_SSL_BUFFER_LEN


	)

1419 
	#SSL_CACHE_DEFAULT_MAX_ENTRIES
 
MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES


	)

1420 
	#SSL_CACHE_DEFAULT_TIMEOUT
 
MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT


	)

1421 
	#SSL_CBC_RECORD_SPLITTING_DISABLED
 
MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED


	)

1422 
	#SSL_CBC_RECORD_SPLITTING_ENABLED
 
MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED


	)

1423 
	#SSL_CERTIFICATE_REQUEST
 
MBEDTLS_SSL_CERTIFICATE_REQUEST


	)

1424 
	#SSL_CERTIFICATE_VERIFY
 
MBEDTLS_SSL_CERTIFICATE_VERIFY


	)

1425 
	#SSL_CERT_TYPE_ECDSA_SIGN
 
MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN


	)

1426 
	#SSL_CERT_TYPE_RSA_SIGN
 
MBEDTLS_SSL_CERT_TYPE_RSA_SIGN


	)

1427 
	#SSL_CHANNEL_INBOUND
 
MBEDTLS_SSL_CHANNEL_INBOUND


	)

1428 
	#SSL_CHANNEL_OUTBOUND
 
MBEDTLS_SSL_CHANNEL_OUTBOUND


	)

1429 
	#SSL_CIPHERSUITES
 
MBEDTLS_SSL_CIPHERSUITES


	)

1430 
	#SSL_CLIENT_CERTIFICATE
 
MBEDTLS_SSL_CLIENT_CERTIFICATE


	)

1431 
	#SSL_CLIENT_CHANGE_CIPHER_SPEC
 
MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC


	)

1432 
	#SSL_CLIENT_FINISHED
 
MBEDTLS_SSL_CLIENT_FINISHED


	)

1433 
	#SSL_CLIENT_HELLO
 
MBEDTLS_SSL_CLIENT_HELLO


	)

1434 
	#SSL_CLIENT_KEY_EXCHANGE
 
MBEDTLS_SSL_CLIENT_KEY_EXCHANGE


	)

1435 
	#SSL_COMPRESSION_ADD
 
MBEDTLS_SSL_COMPRESSION_ADD


	)

1436 
	#SSL_COMPRESS_DEFLATE
 
MBEDTLS_SSL_COMPRESS_DEFLATE


	)

1437 
	#SSL_COMPRESS_NULL
 
MBEDTLS_SSL_COMPRESS_NULL


	)

1438 
	#SSL_DEBUG_BUF
 
MBEDTLS_SSL_DEBUG_BUF


	)

1439 
	#SSL_DEBUG_CRT
 
MBEDTLS_SSL_DEBUG_CRT


	)

1440 
	#SSL_DEBUG_ECP
 
MBEDTLS_SSL_DEBUG_ECP


	)

1441 
	#SSL_DEBUG_MPI
 
MBEDTLS_SSL_DEBUG_MPI


	)

1442 
	#SSL_DEBUG_MSG
 
MBEDTLS_SSL_DEBUG_MSG


	)

1443 
	#SSL_DEBUG_RET
 
MBEDTLS_SSL_DEBUG_RET


	)

1444 
	#SSL_DEFAULT_TICKET_LIFETIME
 
MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME


	)

1445 
	#SSL_DTLS_TIMEOUT_DFL_MAX
 
MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX


	)

1446 
	#SSL_DTLS_TIMEOUT_DFL_MIN
 
MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN


	)

1447 
	#SSL_EMPTY_RENEGOTIATION_INFO
 
MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO


	)

1448 
	#SSL_ETM_DISABLED
 
MBEDTLS_SSL_ETM_DISABLED


	)

1449 
	#SSL_ETM_ENABLED
 
MBEDTLS_SSL_ETM_ENABLED


	)

1450 
	#SSL_EXTENDED_MS_DISABLED
 
MBEDTLS_SSL_EXTENDED_MS_DISABLED


	)

1451 
	#SSL_EXTENDED_MS_ENABLED
 
MBEDTLS_SSL_EXTENDED_MS_ENABLED


	)

1452 
	#SSL_FALLBACK_SCSV
 
MBEDTLS_SSL_FALLBACK_SCSV


	)

1453 
	#SSL_FLUSH_BUFFERS
 
MBEDTLS_SSL_FLUSH_BUFFERS


	)

1454 
	#SSL_HANDSHAKE_OVER
 
MBEDTLS_SSL_HANDSHAKE_OVER


	)

1455 
	#SSL_HANDSHAKE_WRAPUP
 
MBEDTLS_SSL_HANDSHAKE_WRAPUP


	)

1456 
	#SSL_HASH_MD5
 
MBEDTLS_SSL_HASH_MD5


	)

1457 
	#SSL_HASH_NONE
 
MBEDTLS_SSL_HASH_NONE


	)

1458 
	#SSL_HASH_SHA1
 
MBEDTLS_SSL_HASH_SHA1


	)

1459 
	#SSL_HASH_SHA224
 
MBEDTLS_SSL_HASH_SHA224


	)

1460 
	#SSL_HASH_SHA256
 
MBEDTLS_SSL_HASH_SHA256


	)

1461 
	#SSL_HASH_SHA384
 
MBEDTLS_SSL_HASH_SHA384


	)

1462 
	#SSL_HASH_SHA512
 
MBEDTLS_SSL_HASH_SHA512


	)

1463 
	#SSL_HELLO_REQUEST
 
MBEDTLS_SSL_HELLO_REQUEST


	)

1464 
	#SSL_HS_CERTIFICATE
 
MBEDTLS_SSL_HS_CERTIFICATE


	)

1465 
	#SSL_HS_CERTIFICATE_REQUEST
 
MBEDTLS_SSL_HS_CERTIFICATE_REQUEST


	)

1466 
	#SSL_HS_CERTIFICATE_VERIFY
 
MBEDTLS_SSL_HS_CERTIFICATE_VERIFY


	)

1467 
	#SSL_HS_CLIENT_HELLO
 
MBEDTLS_SSL_HS_CLIENT_HELLO


	)

1468 
	#SSL_HS_CLIENT_KEY_EXCHANGE
 
MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE


	)

1469 
	#SSL_HS_FINISHED
 
MBEDTLS_SSL_HS_FINISHED


	)

1470 
	#SSL_HS_HELLO_REQUEST
 
MBEDTLS_SSL_HS_HELLO_REQUEST


	)

1471 
	#SSL_HS_HELLO_VERIFY_REQUEST
 
MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST


	)

1472 
	#SSL_HS_NEW_SESSION_TICKET
 
MBEDTLS_SSL_HS_NEW_SESSION_TICKET


	)

1473 
	#SSL_HS_SERVER_HELLO
 
MBEDTLS_SSL_HS_SERVER_HELLO


	)

1474 
	#SSL_HS_SERVER_HELLO_DONE
 
MBEDTLS_SSL_HS_SERVER_HELLO_DONE


	)

1475 
	#SSL_HS_SERVER_KEY_EXCHANGE
 
MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE


	)

1476 
	#SSL_INITIAL_HANDSHAKE
 
MBEDTLS_SSL_INITIAL_HANDSHAKE


	)

1477 
	#SSL_IS_CLIENT
 
MBEDTLS_SSL_IS_CLIENT


	)

1478 
	#SSL_IS_FALLBACK
 
MBEDTLS_SSL_IS_FALLBACK


	)

1479 
	#SSL_IS_NOT_FALLBACK
 
MBEDTLS_SSL_IS_NOT_FALLBACK


	)

1480 
	#SSL_IS_SERVER
 
MBEDTLS_SSL_IS_SERVER


	)

1481 
	#SSL_LEGACY_ALLOW_RENEGOTIATION
 
MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION


	)

1482 
	#SSL_LEGACY_BREAK_HANDSHAKE
 
MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE


	)

1483 
	#SSL_LEGACY_NO_RENEGOTIATION
 
MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION


	)

1484 
	#SSL_LEGACY_RENEGOTIATION
 
MBEDTLS_SSL_LEGACY_RENEGOTIATION


	)

1485 
	#SSL_MAC_ADD
 
MBEDTLS_SSL_MAC_ADD


	)

1486 
	#SSL_MAJOR_VERSION_3
 
MBEDTLS_SSL_MAJOR_VERSION_3


	)

1487 
	#SSL_MAX_CONTENT_LEN
 
MBEDTLS_SSL_MAX_CONTENT_LEN


	)

1488 
	#SSL_MAX_FRAG_LEN_1024
 
MBEDTLS_SSL_MAX_FRAG_LEN_1024


	)

1489 
	#SSL_MAX_FRAG_LEN_2048
 
MBEDTLS_SSL_MAX_FRAG_LEN_2048


	)

1490 
	#SSL_MAX_FRAG_LEN_4096
 
MBEDTLS_SSL_MAX_FRAG_LEN_4096


	)

1491 
	#SSL_MAX_FRAG_LEN_512
 
MBEDTLS_SSL_MAX_FRAG_LEN_512


	)

1492 
	#SSL_MAX_FRAG_LEN_INVALID
 
MBEDTLS_SSL_MAX_FRAG_LEN_INVALID


	)

1493 
	#SSL_MAX_FRAG_LEN_NONE
 
MBEDTLS_SSL_MAX_FRAG_LEN_NONE


	)

1494 
	#SSL_MAX_MAJOR_VERSION
 
MBEDTLS_SSL_MAX_MAJOR_VERSION


	)

1495 
	#SSL_MAX_MINOR_VERSION
 
MBEDTLS_SSL_MAX_MINOR_VERSION


	)

1496 
	#SSL_MINOR_VERSION_0
 
MBEDTLS_SSL_MINOR_VERSION_0


	)

1497 
	#SSL_MINOR_VERSION_1
 
MBEDTLS_SSL_MINOR_VERSION_1


	)

1498 
	#SSL_MINOR_VERSION_2
 
MBEDTLS_SSL_MINOR_VERSION_2


	)

1499 
	#SSL_MINOR_VERSION_3
 
MBEDTLS_SSL_MINOR_VERSION_3


	)

1500 
	#SSL_MIN_MAJOR_VERSION
 
MBEDTLS_SSL_MIN_MAJOR_VERSION


	)

1501 
	#SSL_MIN_MINOR_VERSION
 
MBEDTLS_SSL_MIN_MINOR_VERSION


	)

1502 
	#SSL_MSG_ALERT
 
MBEDTLS_SSL_MSG_ALERT


	)

1503 
	#SSL_MSG_APPLICATION_DATA
 
MBEDTLS_SSL_MSG_APPLICATION_DATA


	)

1504 
	#SSL_MSG_CHANGE_CIPHER_SPEC
 
MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC


	)

1505 
	#SSL_MSG_HANDSHAKE
 
MBEDTLS_SSL_MSG_HANDSHAKE


	)

1506 
	#SSL_PADDING_ADD
 
MBEDTLS_SSL_PADDING_ADD


	)

1507 
	#SSL_RENEGOTIATION
 
MBEDTLS_SSL_RENEGOTIATION


	)

1508 
	#SSL_RENEGOTIATION_DISABLED
 
MBEDTLS_SSL_RENEGOTIATION_DISABLED


	)

1509 
	#SSL_RENEGOTIATION_DONE
 
MBEDTLS_SSL_RENEGOTIATION_DONE


	)

1510 
	#SSL_RENEGOTIATION_ENABLED
 
MBEDTLS_SSL_RENEGOTIATION_ENABLED


	)

1511 
	#SSL_RENEGOTIATION_NOT_ENFORCED
 
MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED


	)

1512 
	#SSL_RENEGOTIATION_PENDING
 
MBEDTLS_SSL_RENEGOTIATION_PENDING


	)

1513 
	#SSL_RENEGO_MAX_RECORDS_DEFAULT
 
MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT


	)

1514 
	#SSL_RETRANS_FINISHED
 
MBEDTLS_SSL_RETRANS_FINISHED


	)

1515 
	#SSL_RETRANS_PREPARING
 
MBEDTLS_SSL_RETRANS_PREPARING


	)

1516 
	#SSL_RETRANS_SENDING
 
MBEDTLS_SSL_RETRANS_SENDING


	)

1517 
	#SSL_RETRANS_WAITING
 
MBEDTLS_SSL_RETRANS_WAITING


	)

1518 
	#SSL_SECURE_RENEGOTIATION
 
MBEDTLS_SSL_SECURE_RENEGOTIATION


	)

1519 
	#SSL_SERVER_CERTIFICATE
 
MBEDTLS_SSL_SERVER_CERTIFICATE


	)

1520 
	#SSL_SERVER_CHANGE_CIPHER_SPEC
 
MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC


	)

1521 
	#SSL_SERVER_FINISHED
 
MBEDTLS_SSL_SERVER_FINISHED


	)

1522 
	#SSL_SERVER_HELLO
 
MBEDTLS_SSL_SERVER_HELLO


	)

1523 
	#SSL_SERVER_HELLO_DONE
 
MBEDTLS_SSL_SERVER_HELLO_DONE


	)

1524 
	#SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
 
MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT


	)

1525 
	#SSL_SERVER_KEY_EXCHANGE
 
MBEDTLS_SSL_SERVER_KEY_EXCHANGE


	)

1526 
	#SSL_SERVER_NEW_SESSION_TICKET
 
MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET


	)

1527 
	#SSL_SESSION_TICKETS_DISABLED
 
MBEDTLS_SSL_SESSION_TICKETS_DISABLED


	)

1528 
	#SSL_SESSION_TICKETS_ENABLED
 
MBEDTLS_SSL_SESSION_TICKETS_ENABLED


	)

1529 
	#SSL_SIG_ANON
 
MBEDTLS_SSL_SIG_ANON


	)

1530 
	#SSL_SIG_ECDSA
 
MBEDTLS_SSL_SIG_ECDSA


	)

1531 
	#SSL_SIG_RSA
 
MBEDTLS_SSL_SIG_RSA


	)

1532 
	#SSL_TRANSPORT_DATAGRAM
 
MBEDTLS_SSL_TRANSPORT_DATAGRAM


	)

1533 
	#SSL_TRANSPORT_STREAM
 
MBEDTLS_SSL_TRANSPORT_STREAM


	)

1534 
	#SSL_TRUNCATED_HMAC_LEN
 
MBEDTLS_SSL_TRUNCATED_HMAC_LEN


	)

1535 
	#SSL_TRUNC_HMAC_DISABLED
 
MBEDTLS_SSL_TRUNC_HMAC_DISABLED


	)

1536 
	#SSL_TRUNC_HMAC_ENABLED
 
MBEDTLS_SSL_TRUNC_HMAC_ENABLED


	)

1537 
	#SSL_VERIFY_DATA_MAX_LEN
 
MBEDTLS_SSL_VERIFY_DATA_MAX_LEN


	)

1538 
	#SSL_VERIFY_NONE
 
MBEDTLS_SSL_VERIFY_NONE


	)

1539 
	#SSL_VERIFY_OPTIONAL
 
MBEDTLS_SSL_VERIFY_OPTIONAL


	)

1540 
	#SSL_VERIFY_REQUIRED
 
MBEDTLS_SSL_VERIFY_REQUIRED


	)

1541 
	#TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA


	)

1542 
	#TLS_DHE_PSK_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA


	)

1543 
	#TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256


	)

1544 
	#TLS_DHE_PSK_WITH_AES_128_CCM
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM


	)

1545 
	#TLS_DHE_PSK_WITH_AES_128_CCM_8
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8


	)

1546 
	#TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256


	)

1547 
	#TLS_DHE_PSK_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA


	)

1548 
	#TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384


	)

1549 
	#TLS_DHE_PSK_WITH_AES_256_CCM
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM


	)

1550 
	#TLS_DHE_PSK_WITH_AES_256_CCM_8
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8


	)

1551 
	#TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384


	)

1552 
	#TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256


	)

1553 
	#TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256


	)

1554 
	#TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384


	)

1555 
	#TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384


	)

1556 
	#TLS_DHE_PSK_WITH_NULL_SHA
 
MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA


	)

1557 
	#TLS_DHE_PSK_WITH_NULL_SHA256
 
MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256


	)

1558 
	#TLS_DHE_PSK_WITH_NULL_SHA384
 
MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384


	)

1559 
	#TLS_DHE_PSK_WITH_RC4_128_SHA
 
MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA


	)

1560 
	#TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA


	)

1561 
	#TLS_DHE_RSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA


	)

1562 
	#TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256


	)

1563 
	#TLS_DHE_RSA_WITH_AES_128_CCM
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM


	)

1564 
	#TLS_DHE_RSA_WITH_AES_128_CCM_8
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8


	)

1565 
	#TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256


	)

1566 
	#TLS_DHE_RSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA


	)

1567 
	#TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256


	)

1568 
	#TLS_DHE_RSA_WITH_AES_256_CCM
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM


	)

1569 
	#TLS_DHE_RSA_WITH_AES_256_CCM_8
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8


	)

1570 
	#TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384


	)

1571 
	#TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA


	)

1572 
	#TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1573 
	#TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1574 
	#TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA


	)

1575 
	#TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256


	)

1576 
	#TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1577 
	#TLS_DHE_RSA_WITH_DES_CBC_SHA
 
MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA


	)

1578 
	#TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA


	)

1579 
	#TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA


	)

1580 
	#TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256


	)

1581 
	#TLS_ECDHE_ECDSA_WITH_AES_128_CCM
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM


	)

1582 
	#TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8


	)

1583 
	#TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256


	)

1584 
	#TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA


	)

1585 
	#TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384


	)

1586 
	#TLS_ECDHE_ECDSA_WITH_AES_256_CCM
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM


	)

1587 
	#TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8


	)

1588 
	#TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384


	)

1589 
	#TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1590 
	#TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1591 
	#TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384


	)

1592 
	#TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1593 
	#TLS_ECDHE_ECDSA_WITH_NULL_SHA
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA


	)

1594 
	#TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA


	)

1595 
	#TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA


	)

1596 
	#TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA


	)

1597 
	#TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256


	)

1598 
	#TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA


	)

1599 
	#TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384


	)

1600 
	#TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256


	)

1601 
	#TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384


	)

1602 
	#TLS_ECDHE_PSK_WITH_NULL_SHA
 
MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA


	)

1603 
	#TLS_ECDHE_PSK_WITH_NULL_SHA256
 
MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256


	)

1604 
	#TLS_ECDHE_PSK_WITH_NULL_SHA384
 
MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384


	)

1605 
	#TLS_ECDHE_PSK_WITH_RC4_128_SHA
 
MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA


	)

1606 
	#TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA


	)

1607 
	#TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA


	)

1608 
	#TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256


	)

1609 
	#TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256


	)

1610 
	#TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA


	)

1611 
	#TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384


	)

1612 
	#TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384


	)

1613 
	#TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1614 
	#TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1615 
	#TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384


	)

1616 
	#TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1617 
	#TLS_ECDHE_RSA_WITH_NULL_SHA
 
MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA


	)

1618 
	#TLS_ECDHE_RSA_WITH_RC4_128_SHA
 
MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA


	)

1619 
	#TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA


	)

1620 
	#TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA


	)

1621 
	#TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256


	)

1622 
	#TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256


	)

1623 
	#TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA


	)

1624 
	#TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384


	)

1625 
	#TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384


	)

1626 
	#TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1627 
	#TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1628 
	#TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384


	)

1629 
	#TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1630 
	#TLS_ECDH_ECDSA_WITH_NULL_SHA
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA


	)

1631 
	#TLS_ECDH_ECDSA_WITH_RC4_128_SHA
 
MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA


	)

1632 
	#TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA


	)

1633 
	#TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA


	)

1634 
	#TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256


	)

1635 
	#TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256


	)

1636 
	#TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA


	)

1637 
	#TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384


	)

1638 
	#TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384


	)

1639 
	#TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1640 
	#TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1641 
	#TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384


	)

1642 
	#TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1643 
	#TLS_ECDH_RSA_WITH_NULL_SHA
 
MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA


	)

1644 
	#TLS_ECDH_RSA_WITH_RC4_128_SHA
 
MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA


	)

1645 
	#TLS_EXT_ALPN
 
MBEDTLS_TLS_EXT_ALPN


	)

1646 
	#TLS_EXT_ENCRYPT_THEN_MAC
 
MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC


	)

1647 
	#TLS_EXT_EXTENDED_MASTER_SECRET
 
MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET


	)

1648 
	#TLS_EXT_MAX_FRAGMENT_LENGTH
 
MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH


	)

1649 
	#TLS_EXT_RENEGOTIATION_INFO
 
MBEDTLS_TLS_EXT_RENEGOTIATION_INFO


	)

1650 
	#TLS_EXT_SERVERNAME
 
MBEDTLS_TLS_EXT_SERVERNAME


	)

1651 
	#TLS_EXT_SERVERNAME_HOSTNAME
 
MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME


	)

1652 
	#TLS_EXT_SESSION_TICKET
 
MBEDTLS_TLS_EXT_SESSION_TICKET


	)

1653 
	#TLS_EXT_SIG_ALG
 
MBEDTLS_TLS_EXT_SIG_ALG


	)

1654 
	#TLS_EXT_SUPPORTED_ELLIPTIC_CURVES
 
MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES


	)

1655 
	#TLS_EXT_SUPPORTED_POINT_FORMATS
 
MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS


	)

1656 
	#TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT
 
MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT


	)

1657 
	#TLS_EXT_TRUNCATED_HMAC
 
MBEDTLS_TLS_EXT_TRUNCATED_HMAC


	)

1658 
	#TLS_PSK_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA


	)

1659 
	#TLS_PSK_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA


	)

1660 
	#TLS_PSK_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256


	)

1661 
	#TLS_PSK_WITH_AES_128_CCM
 
MBEDTLS_TLS_PSK_WITH_AES_128_CCM


	)

1662 
	#TLS_PSK_WITH_AES_128_CCM_8
 
MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8


	)

1663 
	#TLS_PSK_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256


	)

1664 
	#TLS_PSK_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA


	)

1665 
	#TLS_PSK_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384


	)

1666 
	#TLS_PSK_WITH_AES_256_CCM
 
MBEDTLS_TLS_PSK_WITH_AES_256_CCM


	)

1667 
	#TLS_PSK_WITH_AES_256_CCM_8
 
MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8


	)

1668 
	#TLS_PSK_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384


	)

1669 
	#TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256


	)

1670 
	#TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256


	)

1671 
	#TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384


	)

1672 
	#TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384


	)

1673 
	#TLS_PSK_WITH_NULL_SHA
 
MBEDTLS_TLS_PSK_WITH_NULL_SHA


	)

1674 
	#TLS_PSK_WITH_NULL_SHA256
 
MBEDTLS_TLS_PSK_WITH_NULL_SHA256


	)

1675 
	#TLS_PSK_WITH_NULL_SHA384
 
MBEDTLS_TLS_PSK_WITH_NULL_SHA384


	)

1676 
	#TLS_PSK_WITH_RC4_128_SHA
 
MBEDTLS_TLS_PSK_WITH_RC4_128_SHA


	)

1677 
	#TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA


	)

1678 
	#TLS_RSA_PSK_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA


	)

1679 
	#TLS_RSA_PSK_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256


	)

1680 
	#TLS_RSA_PSK_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256


	)

1681 
	#TLS_RSA_PSK_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA


	)

1682 
	#TLS_RSA_PSK_WITH_AES_256_CBC_SHA384
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384


	)

1683 
	#TLS_RSA_PSK_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384


	)

1684 
	#TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256


	)

1685 
	#TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256


	)

1686 
	#TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 
MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384


	)

1687 
	#TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384


	)

1688 
	#TLS_RSA_PSK_WITH_NULL_SHA
 
MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA


	)

1689 
	#TLS_RSA_PSK_WITH_NULL_SHA256
 
MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256


	)

1690 
	#TLS_RSA_PSK_WITH_NULL_SHA384
 
MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384


	)

1691 
	#TLS_RSA_PSK_WITH_RC4_128_SHA
 
MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA


	)

1692 
	#TLS_RSA_WITH_3DES_EDE_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA


	)

1693 
	#TLS_RSA_WITH_AES_128_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA


	)

1694 
	#TLS_RSA_WITH_AES_128_CBC_SHA256
 
MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256


	)

1695 
	#TLS_RSA_WITH_AES_128_CCM
 
MBEDTLS_TLS_RSA_WITH_AES_128_CCM


	)

1696 
	#TLS_RSA_WITH_AES_128_CCM_8
 
MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8


	)

1697 
	#TLS_RSA_WITH_AES_128_GCM_SHA256
 
MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256


	)

1698 
	#TLS_RSA_WITH_AES_256_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA


	)

1699 
	#TLS_RSA_WITH_AES_256_CBC_SHA256
 
MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256


	)

1700 
	#TLS_RSA_WITH_AES_256_CCM
 
MBEDTLS_TLS_RSA_WITH_AES_256_CCM


	)

1701 
	#TLS_RSA_WITH_AES_256_CCM_8
 
MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8


	)

1702 
	#TLS_RSA_WITH_AES_256_GCM_SHA384
 
MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384


	)

1703 
	#TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA


	)

1704 
	#TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256


	)

1705 
	#TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256


	)

1706 
	#TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA


	)

1707 
	#TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256


	)

1708 
	#TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384
 
MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384


	)

1709 
	#TLS_RSA_WITH_DES_CBC_SHA
 
MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA


	)

1710 
	#TLS_RSA_WITH_NULL_MD5
 
MBEDTLS_TLS_RSA_WITH_NULL_MD5


	)

1711 
	#TLS_RSA_WITH_NULL_SHA
 
MBEDTLS_TLS_RSA_WITH_NULL_SHA


	)

1712 
	#TLS_RSA_WITH_NULL_SHA256
 
MBEDTLS_TLS_RSA_WITH_NULL_SHA256


	)

1713 
	#TLS_RSA_WITH_RC4_128_MD5
 
MBEDTLS_TLS_RSA_WITH_RC4_128_MD5


	)

1714 
	#TLS_RSA_WITH_RC4_128_SHA
 
MBEDTLS_TLS_RSA_WITH_RC4_128_SHA


	)

1715 
	#UL64
 
MBEDTLS_UL64


	)

1716 
	#X509_CRT_VERSION_1
 
MBEDTLS_X509_CRT_VERSION_1


	)

1717 
	#X509_CRT_VERSION_2
 
MBEDTLS_X509_CRT_VERSION_2


	)

1718 
	#X509_CRT_VERSION_3
 
MBEDTLS_X509_CRT_VERSION_3


	)

1719 
	#X509_FORMAT_DER
 
MBEDTLS_X509_FORMAT_DER


	)

1720 
	#X509_FORMAT_PEM
 
MBEDTLS_X509_FORMAT_PEM


	)

1721 
	#X509_MAX_DN_NAME_SIZE
 
MBEDTLS_X509_MAX_DN_NAME_SIZE


	)

1722 
	#X509_RFC5280_MAX_SERIAL_LEN
 
MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN


	)

1723 
	#X509_RFC5280_UTC_TIME_LEN
 
MBEDTLS_X509_RFC5280_UTC_TIME_LEN


	)

1724 
	#XTEA_DECRYPT
 
MBEDTLS_XTEA_DECRYPT


	)

1725 
	#XTEA_ENCRYPT
 
MBEDTLS_XTEA_ENCRYPT


	)

1726 
	#_a¢1_bô°rög
 
mbedés_a¢1_bô°rög


	)

1727 
	#_a¢1_buf
 
mbedés_a¢1_buf


	)

1728 
	#_a¢1_«med_d©a
 
mbedés_a¢1_«med_d©a


	)

1729 
	#_a¢1_£quí˚
 
mbedés_a¢1_£quí˚


	)

1730 
	#_s¶_ˇche_c⁄ãxt
 
mbedés_s¶_ˇche_c⁄ãxt


	)

1731 
	#_s¶_ˇche_íåy
 
mbedés_s¶_ˇche_íåy


	)

1732 
	#_s¶_cùhîsuôe_t
 
mbedés_s¶_cùhîsuôe_t


	)

1733 
	#_s¶_c⁄ãxt
 
mbedés_s¶_c⁄ãxt


	)

1734 
	#_s¶_Êight_ôem
 
mbedés_s¶_Êight_ôem


	)

1735 
	#_s¶_h™dshake_∑øms
 
mbedés_s¶_h™dshake_∑øms


	)

1736 
	#_s¶_key_˚π
 
mbedés_s¶_key_˚π


	)

1737 
	#_s¶_¥ema°î_£¸ë
 
mbedés_s¶_¥ema°î_£¸ë


	)

1738 
	#_s¶_£ssi⁄
 
mbedés_s¶_£ssi⁄


	)

1739 
	#_s¶_tickë_keys
 
mbedés_s¶_tickë_keys


	)

1740 
	#_s¶_å™sf‹m
 
mbedés_s¶_å™sf‹m


	)

1741 
	#_x509_¸l
 
mbedés_x509_¸l


	)

1742 
	#_x509_¸l_íåy
 
mbedés_x509_¸l_íåy


	)

1743 
	#_x509_¸t
 
mbedés_x509_¸t


	)

1744 
	#_x509_c§
 
mbedés_x509_c§


	)

1745 
	#_x509_time
 
mbedés_x509_time


	)

1746 
	#_x509wrôe_˚π
 
mbedés_x509wrôe_˚π


	)

1747 
	#_x509wrôe_c§
 
mbedés_x509wrôe_c§


	)

1748 
	#´s_c⁄ãxt
 
mbedés_´s_c⁄ãxt


	)

1749 
	#´s_¸y±_cbc
 
mbedés_´s_¸y±_cbc


	)

1750 
	#´s_¸y±_cfb128
 
mbedés_´s_¸y±_cfb128


	)

1751 
	#´s_¸y±_cfb8
 
mbedés_´s_¸y±_cfb8


	)

1752 
	#´s_¸y±_˘r
 
mbedés_´s_¸y±_˘r


	)

1753 
	#´s_¸y±_ecb
 
mbedés_´s_¸y±_ecb


	)

1754 
	#´s_‰ì
 
mbedés_´s_‰ì


	)

1755 
	#´s_öô
 
mbedés_´s_öô


	)

1756 
	#´s_£lf_ã°
 
mbedés_´s_£lf_ã°


	)

1757 
	#´s_£tkey_dec
 
mbedés_´s_£tkey_dec


	)

1758 
	#´s_£tkey_íc
 
mbedés_´s_£tkey_íc


	)

1759 
	#´¢i_¸y±_ecb
 
mbedés_´¢i_¸y±_ecb


	)

1760 
	#´¢i_gcm_mu…
 
mbedés_´¢i_gcm_mu…


	)

1761 
	#´¢i_övî£_key
 
mbedés_´¢i_övî£_key


	)

1762 
	#´¢i_£tkey_íc
 
mbedés_´¢i_£tkey_íc


	)

1763 
	#´¢i_suµ‹ts
 
mbedés_´¢i_has_suµ‹t


	)

1764 
	#Æ¨med
 
mbedés_timög_Æ¨med


	)

1765 
	#¨c4_c⁄ãxt
 
mbedés_¨c4_c⁄ãxt


	)

1766 
	#¨c4_¸y±
 
mbedés_¨c4_¸y±


	)

1767 
	#¨c4_‰ì
 
mbedés_¨c4_‰ì


	)

1768 
	#¨c4_öô
 
mbedés_¨c4_öô


	)

1769 
	#¨c4_£lf_ã°
 
mbedés_¨c4_£lf_ã°


	)

1770 
	#¨c4_£tup
 
mbedés_¨c4_£tup


	)

1771 
	#a¢1_bô°rög
 
mbedés_a¢1_bô°rög


	)

1772 
	#a¢1_buf
 
mbedés_a¢1_buf


	)

1773 
	#a¢1_föd_«med_d©a
 
mbedés_a¢1_föd_«med_d©a


	)

1774 
	#a¢1_‰ì_«med_d©a
 
mbedés_a¢1_‰ì_«med_d©a


	)

1775 
	#a¢1_‰ì_«med_d©a_li°
 
mbedés_a¢1_‰ì_«med_d©a_li°


	)

1776 
	#a¢1_gë_Æg
 
mbedés_a¢1_gë_Æg


	)

1777 
	#a¢1_gë_Æg_nuŒ
 
mbedés_a¢1_gë_Æg_nuŒ


	)

1778 
	#a¢1_gë_bô°rög
 
mbedés_a¢1_gë_bô°rög


	)

1779 
	#a¢1_gë_bô°rög_nuŒ
 
mbedés_a¢1_gë_bô°rög_nuŒ


	)

1780 
	#a¢1_gë_boﬁ
 
mbedés_a¢1_gë_boﬁ


	)

1781 
	#a¢1_gë_öt
 
mbedés_a¢1_gë_öt


	)

1782 
	#a¢1_gë_Àn
 
mbedés_a¢1_gë_Àn


	)

1783 
	#a¢1_gë_mpi
 
mbedés_a¢1_gë_mpi


	)

1784 
	#a¢1_gë_£quí˚_of
 
mbedés_a¢1_gë_£quí˚_of


	)

1785 
	#a¢1_gë_èg
 
mbedés_a¢1_gë_èg


	)

1786 
	#a¢1_«med_d©a
 
mbedés_a¢1_«med_d©a


	)

1787 
	#a¢1_£quí˚
 
mbedés_a¢1_£quí˚


	)

1788 
	#a¢1_°‹e_«med_d©a
 
mbedés_a¢1_°‹e_«med_d©a


	)

1789 
	#a¢1_wrôe_Æg‹ôhm_idítifõr
 
mbedés_a¢1_wrôe_Æg‹ôhm_idítifõr


	)

1790 
	#a¢1_wrôe_bô°rög
 
mbedés_a¢1_wrôe_bô°rög


	)

1791 
	#a¢1_wrôe_boﬁ
 
mbedés_a¢1_wrôe_boﬁ


	)

1792 
	#a¢1_wrôe_ü5_°rög
 
mbedés_a¢1_wrôe_ü5_°rög


	)

1793 
	#a¢1_wrôe_öt
 
mbedés_a¢1_wrôe_öt


	)

1794 
	#a¢1_wrôe_Àn
 
mbedés_a¢1_wrôe_Àn


	)

1795 
	#a¢1_wrôe_mpi
 
mbedés_a¢1_wrôe_mpi


	)

1796 
	#a¢1_wrôe_nuŒ
 
mbedés_a¢1_wrôe_nuŒ


	)

1797 
	#a¢1_wrôe_o˘ë_°rög
 
mbedés_a¢1_wrôe_o˘ë_°rög


	)

1798 
	#a¢1_wrôe_oid
 
mbedés_a¢1_wrôe_oid


	)

1799 
	#a¢1_wrôe_¥öèbÀ_°rög
 
mbedés_a¢1_wrôe_¥öèbÀ_°rög


	)

1800 
	#a¢1_wrôe_øw_buf„r
 
mbedés_a¢1_wrôe_øw_buf„r


	)

1801 
	#a¢1_wrôe_èg
 
mbedés_a¢1_wrôe_èg


	)

1802 
	#ba£64_decode
 
mbedés_ba£64_decode


	)

1803 
	#ba£64_ícode
 
mbedés_ba£64_ícode


	)

1804 
	#ba£64_£lf_ã°
 
mbedés_ba£64_£lf_ã°


	)

1805 
	#blowfish_c⁄ãxt
 
mbedés_blowfish_c⁄ãxt


	)

1806 
	#blowfish_¸y±_cbc
 
mbedés_blowfish_¸y±_cbc


	)

1807 
	#blowfish_¸y±_cfb64
 
mbedés_blowfish_¸y±_cfb64


	)

1808 
	#blowfish_¸y±_˘r
 
mbedés_blowfish_¸y±_˘r


	)

1809 
	#blowfish_¸y±_ecb
 
mbedés_blowfish_¸y±_ecb


	)

1810 
	#blowfish_‰ì
 
mbedés_blowfish_‰ì


	)

1811 
	#blowfish_öô
 
mbedés_blowfish_öô


	)

1812 
	#blowfish_£tkey
 
mbedés_blowfish_£tkey


	)

1813 
	#ˇmñlü_c⁄ãxt
 
mbedés_ˇmñlü_c⁄ãxt


	)

1814 
	#ˇmñlü_¸y±_cbc
 
mbedés_ˇmñlü_¸y±_cbc


	)

1815 
	#ˇmñlü_¸y±_cfb128
 
mbedés_ˇmñlü_¸y±_cfb128


	)

1816 
	#ˇmñlü_¸y±_˘r
 
mbedés_ˇmñlü_¸y±_˘r


	)

1817 
	#ˇmñlü_¸y±_ecb
 
mbedés_ˇmñlü_¸y±_ecb


	)

1818 
	#ˇmñlü_‰ì
 
mbedés_ˇmñlü_‰ì


	)

1819 
	#ˇmñlü_öô
 
mbedés_ˇmñlü_öô


	)

1820 
	#ˇmñlü_£lf_ã°
 
mbedés_ˇmñlü_£lf_ã°


	)

1821 
	#ˇmñlü_£tkey_dec
 
mbedés_ˇmñlü_£tkey_dec


	)

1822 
	#ˇmñlü_£tkey_íc
 
mbedés_ˇmñlü_£tkey_íc


	)

1823 
	#ccm_auth_de¸y±
 
mbedés_ccm_auth_de¸y±


	)

1824 
	#ccm_c⁄ãxt
 
mbedés_ccm_c⁄ãxt


	)

1825 
	#ccm_í¸y±_™d_èg
 
mbedés_ccm_í¸y±_™d_èg


	)

1826 
	#ccm_‰ì
 
mbedés_ccm_‰ì


	)

1827 
	#ccm_öô
 
mbedés_ccm_öô


	)

1828 
	#ccm_£lf_ã°
 
mbedés_ccm_£lf_ã°


	)

1829 
	#cùhî_auth_de¸y±
 
mbedés_cùhî_auth_de¸y±


	)

1830 
	#cùhî_auth_í¸y±
 
mbedés_cùhî_auth_í¸y±


	)

1831 
	#cùhî_ba£_t
 
mbedés_cùhî_ba£_t


	)

1832 
	#cùhî_check_èg
 
mbedés_cùhî_check_èg


	)

1833 
	#cùhî_c⁄ãxt_t
 
mbedés_cùhî_c⁄ãxt_t


	)

1834 
	#cùhî_¸y±
 
mbedés_cùhî_¸y±


	)

1835 
	#cùhî_deföôi⁄_t
 
mbedés_cùhî_deföôi⁄_t


	)

1836 
	#cùhî_deföôi⁄s
 
mbedés_cùhî_deföôi⁄s


	)

1837 
	#cùhî_föish
 
mbedés_cùhî_föish


	)

1838 
	#cùhî_‰ì
 
mbedés_cùhî_‰ì


	)

1839 
	#cùhî_‰ì_˘x
 
mbedés_cùhî_‰ì_˘x


	)

1840 
	#cùhî_gë_block_size
 
mbedés_cùhî_gë_block_size


	)

1841 
	#cùhî_gë_cùhî_mode
 
mbedés_cùhî_gë_cùhî_mode


	)

1842 
	#cùhî_gë_iv_size
 
mbedés_cùhî_gë_iv_size


	)

1843 
	#cùhî_gë_key_size
 
mbedés_cùhî_gë_key_bôÀn


	)

1844 
	#cùhî_gë_«me
 
mbedés_cùhî_gë_«me


	)

1845 
	#cùhî_gë_›î©i⁄
 
mbedés_cùhî_gë_›î©i⁄


	)

1846 
	#cùhî_gë_ty≥
 
mbedés_cùhî_gë_ty≥


	)

1847 
	#cùhî_id_t
 
mbedés_cùhî_id_t


	)

1848 
	#cùhî_öfo_‰om_°rög
 
mbedés_cùhî_öfo_‰om_°rög


	)

1849 
	#cùhî_öfo_‰om_ty≥
 
mbedés_cùhî_öfo_‰om_ty≥


	)

1850 
	#cùhî_öfo_‰om_vÆues
 
mbedés_cùhî_öfo_‰om_vÆues


	)

1851 
	#cùhî_öfo_t
 
mbedés_cùhî_öfo_t


	)

1852 
	#cùhî_öô
 
mbedés_cùhî_öô


	)

1853 
	#cùhî_öô_˘x
 
mbedés_cùhî_£tup


	)

1854 
	#cùhî_li°
 
mbedés_cùhî_li°


	)

1855 
	#cùhî_mode_t
 
mbedés_cùhî_mode_t


	)

1856 
	#cùhî_∑ddög_t
 
mbedés_cùhî_∑ddög_t


	)

1857 
	#cùhî_ª£t
 
mbedés_cùhî_ª£t


	)

1858 
	#cùhî_£lf_ã°
 
mbedés_cùhî_£lf_ã°


	)

1859 
	#cùhî_£t_iv
 
mbedés_cùhî_£t_iv


	)

1860 
	#cùhî_£t_∑ddög_mode
 
mbedés_cùhî_£t_∑ddög_mode


	)

1861 
	#cùhî_£tkey
 
mbedés_cùhî_£tkey


	)

1862 
	#cùhî_ty≥_t
 
mbedés_cùhî_ty≥_t


	)

1863 
	#cùhî_upd©e
 
mbedés_cùhî_upd©e


	)

1864 
	#cùhî_upd©e_ad
 
mbedés_cùhî_upd©e_ad


	)

1865 
	#cùhî_wrôe_èg
 
mbedés_cùhî_wrôe_èg


	)

1866 
	#˘r_drbg_c⁄ãxt
 
mbedés_˘r_drbg_c⁄ãxt


	)

1867 
	#˘r_drbg_‰ì
 
mbedés_˘r_drbg_‰ì


	)

1868 
	#˘r_drbg_öô
 
mbedés_˘r_drbg_öô


	)

1869 
	#˘r_drbg_öô_íå›y_Àn
 
mbedés_˘r_drbg_öô_íå›y_Àn


	)

1870 
	#˘r_drbg_øndom
 
mbedés_˘r_drbg_øndom


	)

1871 
	#˘r_drbg_øndom_wôh_add
 
mbedés_˘r_drbg_øndom_wôh_add


	)

1872 
	#˘r_drbg_ª£ed
 
mbedés_˘r_drbg_ª£ed


	)

1873 
	#˘r_drbg_£lf_ã°
 
mbedés_˘r_drbg_£lf_ã°


	)

1874 
	#˘r_drbg_£t_íå›y_Àn
 
mbedés_˘r_drbg_£t_íå›y_Àn


	)

1875 
	#˘r_drbg_£t_¥edi˘i⁄_ªsi°™˚
 
mbedés_˘r_drbg_£t_¥edi˘i⁄_ªsi°™˚


	)

1876 
	#˘r_drbg_£t_ª£ed_öãrvÆ
 
mbedés_˘r_drbg_£t_ª£ed_öãrvÆ


	)

1877 
	#˘r_drbg_upd©e
 
mbedés_˘r_drbg_upd©e


	)

1878 
	#˘r_drbg_upd©e_£ed_fûe
 
mbedés_˘r_drbg_upd©e_£ed_fûe


	)

1879 
	#˘r_drbg_wrôe_£ed_fûe
 
mbedés_˘r_drbg_wrôe_£ed_fûe


	)

1880 
	#debug_fmt
 
mbedés_debug_fmt


	)

1881 
	#debug_¥öt_buf
 
mbedés_debug_¥öt_buf


	)

1882 
	#debug_¥öt_¸t
 
mbedés_debug_¥öt_¸t


	)

1883 
	#debug_¥öt_e˝
 
mbedés_debug_¥öt_e˝


	)

1884 
	#debug_¥öt_mpi
 
mbedés_debug_¥öt_mpi


	)

1885 
	#debug_¥öt_msg
 
mbedés_debug_¥öt_msg


	)

1886 
	#debug_¥öt_ªt
 
mbedés_debug_¥öt_ªt


	)

1887 
	#debug_£t_log_mode
 
mbedés_debug_£t_log_mode


	)

1888 
	#debug_£t_thªshﬁd
 
mbedés_debug_£t_thªshﬁd


	)

1889 
	#des3_c⁄ãxt
 
mbedés_des3_c⁄ãxt


	)

1890 
	#des3_¸y±_cbc
 
mbedés_des3_¸y±_cbc


	)

1891 
	#des3_¸y±_ecb
 
mbedés_des3_¸y±_ecb


	)

1892 
	#des3_‰ì
 
mbedés_des3_‰ì


	)

1893 
	#des3_öô
 
mbedés_des3_öô


	)

1894 
	#des3_£t2key_dec
 
mbedés_des3_£t2key_dec


	)

1895 
	#des3_£t2key_íc
 
mbedés_des3_£t2key_íc


	)

1896 
	#des3_£t3key_dec
 
mbedés_des3_£t3key_dec


	)

1897 
	#des3_£t3key_íc
 
mbedés_des3_£t3key_íc


	)

1898 
	#des_c⁄ãxt
 
mbedés_des_c⁄ãxt


	)

1899 
	#des_¸y±_cbc
 
mbedés_des_¸y±_cbc


	)

1900 
	#des_¸y±_ecb
 
mbedés_des_¸y±_ecb


	)

1901 
	#des_‰ì
 
mbedés_des_‰ì


	)

1902 
	#des_öô
 
mbedés_des_öô


	)

1903 
	#des_key_check_key_∑rôy
 
mbedés_des_key_check_key_∑rôy


	)

1904 
	#des_key_check_wók
 
mbedés_des_key_check_wók


	)

1905 
	#des_key_£t_∑rôy
 
mbedés_des_key_£t_∑rôy


	)

1906 
	#des_£lf_ã°
 
mbedés_des_£lf_ã°


	)

1907 
	#des_£tkey_dec
 
mbedés_des_£tkey_dec


	)

1908 
	#des_£tkey_íc
 
mbedés_des_£tkey_íc


	)

1909 
	#dhm_ˇlc_£¸ë
 
mbedés_dhm_ˇlc_£¸ë


	)

1910 
	#dhm_c⁄ãxt
 
mbedés_dhm_c⁄ãxt


	)

1911 
	#dhm_‰ì
 
mbedés_dhm_‰ì


	)

1912 
	#dhm_öô
 
mbedés_dhm_öô


	)

1913 
	#dhm_make_∑øms
 
mbedés_dhm_make_∑øms


	)

1914 
	#dhm_make_public
 
mbedés_dhm_make_public


	)

1915 
	#dhm_∑r£_dhm
 
mbedés_dhm_∑r£_dhm


	)

1916 
	#dhm_∑r£_dhmfûe
 
mbedés_dhm_∑r£_dhmfûe


	)

1917 
	#dhm_ªad_∑øms
 
mbedés_dhm_ªad_∑øms


	)

1918 
	#dhm_ªad_public
 
mbedés_dhm_ªad_public


	)

1919 
	#dhm_£lf_ã°
 
mbedés_dhm_£lf_ã°


	)

1920 
	#ecdh_ˇlc_£¸ë
 
mbedés_ecdh_ˇlc_£¸ë


	)

1921 
	#ecdh_compuã_sh¨ed
 
mbedés_ecdh_compuã_sh¨ed


	)

1922 
	#ecdh_c⁄ãxt
 
mbedés_ecdh_c⁄ãxt


	)

1923 
	#ecdh_‰ì
 
mbedés_ecdh_‰ì


	)

1924 
	#ecdh_gí_public
 
mbedés_ecdh_gí_public


	)

1925 
	#ecdh_gë_∑øms
 
mbedés_ecdh_gë_∑øms


	)

1926 
	#ecdh_öô
 
mbedés_ecdh_öô


	)

1927 
	#ecdh_make_∑øms
 
mbedés_ecdh_make_∑øms


	)

1928 
	#ecdh_make_public
 
mbedés_ecdh_make_public


	)

1929 
	#ecdh_ªad_∑øms
 
mbedés_ecdh_ªad_∑øms


	)

1930 
	#ecdh_ªad_public
 
mbedés_ecdh_ªad_public


	)

1931 
	#ecdh_£lf_ã°
 
mbedés_ecdh_£lf_ã°


	)

1932 
	#ecdh_side
 
mbedés_ecdh_side


	)

1933 
	#ecdß_c⁄ãxt
 
mbedés_ecdß_c⁄ãxt


	)

1934 
	#ecdß_‰ì
 
mbedés_ecdß_‰ì


	)

1935 
	#ecdß_‰om_key∑ú
 
mbedés_ecdß_‰om_key∑ú


	)

1936 
	#ecdß_gíkey
 
mbedés_ecdß_gíkey


	)

1937 
	#ecdß_öfo
 
mbedés_ecdß_öfo


	)

1938 
	#ecdß_öô
 
mbedés_ecdß_öô


	)

1939 
	#ecdß_ªad_sig«tuª
 
mbedés_ecdß_ªad_sig«tuª


	)

1940 
	#ecdß_£lf_ã°
 
mbedés_ecdß_£lf_ã°


	)

1941 
	#ecdß_sign
 
mbedés_ecdß_sign


	)

1942 
	#ecdß_sign_dë
 
mbedés_ecdß_sign_dë


	)

1943 
	#ecdß_vîify
 
mbedés_ecdß_vîify


	)

1944 
	#ecdß_wrôe_sig«tuª
 
mbedés_ecdß_wrôe_sig«tuª


	)

1945 
	#ecdß_wrôe_sig«tuª_dë
 
mbedés_ecdß_wrôe_sig«tuª_dë


	)

1946 
	#eckey_öfo
 
mbedés_eckey_öfo


	)

1947 
	#eckeydh_öfo
 
mbedés_eckeydh_öfo


	)

1948 
	#e˝_add
 
mbedés_e˝_add


	)

1949 
	#e˝_check_¥ivkey
 
mbedés_e˝_check_¥ivkey


	)

1950 
	#e˝_check_pub_¥iv
 
mbedés_e˝_check_pub_¥iv


	)

1951 
	#e˝_check_pubkey
 
mbedés_e˝_check_pubkey


	)

1952 
	#e˝_c›y
 
mbedés_e˝_c›y


	)

1953 
	#e˝_curve_öfo
 
mbedés_e˝_curve_öfo


	)

1954 
	#e˝_curve_öfo_‰om_gΩ_id
 
mbedés_e˝_curve_öfo_‰om_gΩ_id


	)

1955 
	#e˝_curve_öfo_‰om_«me
 
mbedés_e˝_curve_öfo_‰om_«me


	)

1956 
	#e˝_curve_öfo_‰om_és_id
 
mbedés_e˝_curve_öfo_‰om_és_id


	)

1957 
	#e˝_curve_li°
 
mbedés_e˝_curve_li°


	)

1958 
	#e˝_gí_key
 
mbedés_e˝_gí_key


	)

1959 
	#e˝_gí_key∑ú
 
mbedés_e˝_gí_key∑ú


	)

1960 
	#e˝_group
 
mbedés_e˝_group


	)

1961 
	#e˝_group_c›y
 
mbedés_e˝_group_c›y


	)

1962 
	#e˝_group_‰ì
 
mbedés_e˝_group_‰ì


	)

1963 
	#e˝_group_id
 
mbedés_e˝_group_id


	)

1964 
	#e˝_group_öô
 
mbedés_e˝_group_öô


	)

1965 
	#e˝_group_ªad_°rög
 
mbedés_e˝_group_ªad_°rög


	)

1966 
	#e˝_gΩ_id_li°
 
mbedés_e˝_gΩ_id_li°


	)

1967 
	#e˝_is_zîo
 
mbedés_e˝_is_zîo


	)

1968 
	#e˝_key∑ú
 
mbedés_e˝_key∑ú


	)

1969 
	#e˝_key∑ú_‰ì
 
mbedés_e˝_key∑ú_‰ì


	)

1970 
	#e˝_key∑ú_öô
 
mbedés_e˝_key∑ú_öô


	)

1971 
	#e˝_mul
 
mbedés_e˝_mul


	)

1972 
	#e˝_poöt
 
mbedés_e˝_poöt


	)

1973 
	#e˝_poöt_‰ì
 
mbedés_e˝_poöt_‰ì


	)

1974 
	#e˝_poöt_öô
 
mbedés_e˝_poöt_öô


	)

1975 
	#e˝_poöt_ªad_bö¨y
 
mbedés_e˝_poöt_ªad_bö¨y


	)

1976 
	#e˝_poöt_ªad_°rög
 
mbedés_e˝_poöt_ªad_°rög


	)

1977 
	#e˝_poöt_wrôe_bö¨y
 
mbedés_e˝_poöt_wrôe_bö¨y


	)

1978 
	#e˝_£lf_ã°
 
mbedés_e˝_£lf_ã°


	)

1979 
	#e˝_£t_zîo
 
mbedés_e˝_£t_zîo


	)

1980 
	#e˝_sub
 
mbedés_e˝_sub


	)

1981 
	#e˝_és_ªad_group
 
mbedés_e˝_és_ªad_group


	)

1982 
	#e˝_és_ªad_poöt
 
mbedés_e˝_és_ªad_poöt


	)

1983 
	#e˝_és_wrôe_group
 
mbedés_e˝_és_wrôe_group


	)

1984 
	#e˝_és_wrôe_poöt
 
mbedés_e˝_és_wrôe_poöt


	)

1985 
	#e˝_u£_known_dp
 
mbedés_e˝_group_lﬂd


	)

1986 
	#íå›y_add_sour˚
 
mbedés_íå›y_add_sour˚


	)

1987 
	#íå›y_c⁄ãxt
 
mbedés_íå›y_c⁄ãxt


	)

1988 
	#íå›y_‰ì
 
mbedés_íå›y_‰ì


	)

1989 
	#íå›y_func
 
mbedés_íå›y_func


	)

1990 
	#íå›y_g©hî
 
mbedés_íå›y_g©hî


	)

1991 
	#íå›y_öô
 
mbedés_íå›y_öô


	)

1992 
	#íå›y_£lf_ã°
 
mbedés_íå›y_£lf_ã°


	)

1993 
	#íå›y_upd©e_m™uÆ
 
mbedés_íå›y_upd©e_m™uÆ


	)

1994 
	#íå›y_upd©e_£ed_fûe
 
mbedés_íå›y_upd©e_£ed_fûe


	)

1995 
	#íå›y_wrôe_£ed_fûe
 
mbedés_íå›y_wrôe_£ed_fûe


	)

1996 
	#îr‹_°ªº‹
 
mbedés_°ªº‹


	)

1997 
	#f_sour˚_±r
 
mbedés_íå›y_f_sour˚_±r


	)

1998 
	#gcm_auth_de¸y±
 
mbedés_gcm_auth_de¸y±


	)

1999 
	#gcm_c⁄ãxt
 
mbedés_gcm_c⁄ãxt


	)

2000 
	#gcm_¸y±_™d_èg
 
mbedés_gcm_¸y±_™d_èg


	)

2001 
	#gcm_föish
 
mbedés_gcm_föish


	)

2002 
	#gcm_‰ì
 
mbedés_gcm_‰ì


	)

2003 
	#gcm_öô
 
mbedés_gcm_öô


	)

2004 
	#gcm_£lf_ã°
 
mbedés_gcm_£lf_ã°


	)

2005 
	#gcm_°¨ts
 
mbedés_gcm_°¨ts


	)

2006 
	#gcm_upd©e
 
mbedés_gcm_upd©e


	)

2007 
	#gë_timî
 
mbedés_timög_gë_timî


	)

2008 
	#h¨d˛ock
 
mbedés_timög_h¨d˛ock


	)

2009 
	#h¨d˛ock_pﬁl
 
mbedés_h¨d˛ock_pﬁl


	)

2010 
	#havege_‰ì
 
mbedés_havege_‰ì


	)

2011 
	#havege_öô
 
mbedés_havege_öô


	)

2012 
	#havege_pﬁl
 
mbedés_havege_pﬁl


	)

2013 
	#havege_øndom
 
mbedés_havege_øndom


	)

2014 
	#havege_°©e
 
mbedés_havege_°©e


	)

2015 
	#hmac_drbg_c⁄ãxt
 
mbedés_hmac_drbg_c⁄ãxt


	)

2016 
	#hmac_drbg_‰ì
 
mbedés_hmac_drbg_‰ì


	)

2017 
	#hmac_drbg_öô
 
mbedés_hmac_drbg_öô


	)

2018 
	#hmac_drbg_öô_buf
 
mbedés_hmac_drbg_öô_buf


	)

2019 
	#hmac_drbg_øndom
 
mbedés_hmac_drbg_øndom


	)

2020 
	#hmac_drbg_øndom_wôh_add
 
mbedés_hmac_drbg_øndom_wôh_add


	)

2021 
	#hmac_drbg_ª£ed
 
mbedés_hmac_drbg_ª£ed


	)

2022 
	#hmac_drbg_£lf_ã°
 
mbedés_hmac_drbg_£lf_ã°


	)

2023 
	#hmac_drbg_£t_íå›y_Àn
 
mbedés_hmac_drbg_£t_íå›y_Àn


	)

2024 
	#hmac_drbg_£t_¥edi˘i⁄_ªsi°™˚
 
mbedés_hmac_drbg_£t_¥edi˘i⁄_ªsi°™˚


	)

2025 
	#hmac_drbg_£t_ª£ed_öãrvÆ
 
mbedés_hmac_drbg_£t_ª£ed_öãrvÆ


	)

2026 
	#hmac_drbg_upd©e
 
mbedés_hmac_drbg_upd©e


	)

2027 
	#hmac_drbg_upd©e_£ed_fûe
 
mbedés_hmac_drbg_upd©e_£ed_fûe


	)

2028 
	#hmac_drbg_wrôe_£ed_fûe
 
mbedés_hmac_drbg_wrôe_£ed_fûe


	)

2029 
	#hr_time
 
mbedés_timög_hr_time


	)

2030 
	#key_exch™ge_ty≥_t
 
mbedés_key_exch™ge_ty≥_t


	)

2031 
	#md
 
mbedés_md


	)

2032 
	#md2
 
mbedés_md2


	)

2033 
	#md2_c⁄ãxt
 
mbedés_md2_c⁄ãxt


	)

2034 
	#md2_fûe
 
mbedés_md2_fûe


	)

2035 
	#md2_föish
 
mbedés_md2_föish


	)

2036 
	#md2_‰ì
 
mbedés_md2_‰ì


	)

2037 
	#md2_hmac
 
mbedés_md2_hmac


	)

2038 
	#md2_hmac_föish
 
mbedés_md2_hmac_föish


	)

2039 
	#md2_hmac_ª£t
 
mbedés_md2_hmac_ª£t


	)

2040 
	#md2_hmac_°¨ts
 
mbedés_md2_hmac_°¨ts


	)

2041 
	#md2_hmac_upd©e
 
mbedés_md2_hmac_upd©e


	)

2042 
	#md2_öfo
 
mbedés_md2_öfo


	)

2043 
	#md2_öô
 
mbedés_md2_öô


	)

2044 
	#md2_¥o˚ss
 
mbedés_md2_¥o˚ss


	)

2045 
	#md2_£lf_ã°
 
mbedés_md2_£lf_ã°


	)

2046 
	#md2_°¨ts
 
mbedés_md2_°¨ts


	)

2047 
	#md2_upd©e
 
mbedés_md2_upd©e


	)

2048 
	#md4
 
mbedés_md4


	)

2049 
	#md4_c⁄ãxt
 
mbedés_md4_c⁄ãxt


	)

2050 
	#md4_fûe
 
mbedés_md4_fûe


	)

2051 
	#md4_föish
 
mbedés_md4_föish


	)

2052 
	#md4_‰ì
 
mbedés_md4_‰ì


	)

2053 
	#md4_hmac
 
mbedés_md4_hmac


	)

2054 
	#md4_hmac_föish
 
mbedés_md4_hmac_föish


	)

2055 
	#md4_hmac_ª£t
 
mbedés_md4_hmac_ª£t


	)

2056 
	#md4_hmac_°¨ts
 
mbedés_md4_hmac_°¨ts


	)

2057 
	#md4_hmac_upd©e
 
mbedés_md4_hmac_upd©e


	)

2058 
	#md4_öfo
 
mbedés_md4_öfo


	)

2059 
	#md4_öô
 
mbedés_md4_öô


	)

2060 
	#md4_¥o˚ss
 
mbedés_md4_¥o˚ss


	)

2061 
	#md4_£lf_ã°
 
mbedés_md4_£lf_ã°


	)

2062 
	#md4_°¨ts
 
mbedés_md4_°¨ts


	)

2063 
	#md4_upd©e
 
mbedés_md4_upd©e


	)

2064 
	#md5
 
mbedés_md5


	)

2065 
	#md5_c⁄ãxt
 
mbedés_md5_c⁄ãxt


	)

2066 
	#md5_fûe
 
mbedés_md5_fûe


	)

2067 
	#md5_föish
 
mbedés_md5_föish


	)

2068 
	#md5_‰ì
 
mbedés_md5_‰ì


	)

2069 
	#md5_hmac
 
mbedés_md5_hmac


	)

2070 
	#md5_hmac_föish
 
mbedés_md5_hmac_föish


	)

2071 
	#md5_hmac_ª£t
 
mbedés_md5_hmac_ª£t


	)

2072 
	#md5_hmac_°¨ts
 
mbedés_md5_hmac_°¨ts


	)

2073 
	#md5_hmac_upd©e
 
mbedés_md5_hmac_upd©e


	)

2074 
	#md5_öfo
 
mbedés_md5_öfo


	)

2075 
	#md5_öô
 
mbedés_md5_öô


	)

2076 
	#md5_¥o˚ss
 
mbedés_md5_¥o˚ss


	)

2077 
	#md5_£lf_ã°
 
mbedés_md5_£lf_ã°


	)

2078 
	#md5_°¨ts
 
mbedés_md5_°¨ts


	)

2079 
	#md5_upd©e
 
mbedés_md5_upd©e


	)

2080 
	#md_c⁄ãxt_t
 
mbedés_md_c⁄ãxt_t


	)

2081 
	#md_fûe
 
mbedés_md_fûe


	)

2082 
	#md_föish
 
mbedés_md_föish


	)

2083 
	#md_‰ì
 
mbedés_md_‰ì


	)

2084 
	#md_‰ì_˘x
 
mbedés_md_‰ì_˘x


	)

2085 
	#md_gë_«me
 
mbedés_md_gë_«me


	)

2086 
	#md_gë_size
 
mbedés_md_gë_size


	)

2087 
	#md_gë_ty≥
 
mbedés_md_gë_ty≥


	)

2088 
	#md_hmac
 
mbedés_md_hmac


	)

2089 
	#md_hmac_föish
 
mbedés_md_hmac_föish


	)

2090 
	#md_hmac_ª£t
 
mbedés_md_hmac_ª£t


	)

2091 
	#md_hmac_°¨ts
 
mbedés_md_hmac_°¨ts


	)

2092 
	#md_hmac_upd©e
 
mbedés_md_hmac_upd©e


	)

2093 
	#md_öfo_‰om_°rög
 
mbedés_md_öfo_‰om_°rög


	)

2094 
	#md_öfo_‰om_ty≥
 
mbedés_md_öfo_‰om_ty≥


	)

2095 
	#md_öfo_t
 
mbedés_md_öfo_t


	)

2096 
	#md_öô
 
mbedés_md_öô


	)

2097 
	#md_öô_˘x
 
mbedés_md_öô_˘x


	)

2098 
	#md_li°
 
mbedés_md_li°


	)

2099 
	#md_¥o˚ss
 
mbedés_md_¥o˚ss


	)

2100 
	#md_°¨ts
 
mbedés_md_°¨ts


	)

2101 
	#md_ty≥_t
 
mbedés_md_ty≥_t


	)

2102 
	#md_upd©e
 
mbedés_md_upd©e


	)

2103 
	#mem‹y_buf„r_Æloc_cur_gë
 
mbedés_mem‹y_buf„r_Æloc_cur_gë


	)

2104 
	#mem‹y_buf„r_Æloc_‰ì
 
mbedés_mem‹y_buf„r_Æloc_‰ì


	)

2105 
	#mem‹y_buf„r_Æloc_öô
 
mbedés_mem‹y_buf„r_Æloc_öô


	)

2106 
	#mem‹y_buf„r_Æloc_max_gë
 
mbedés_mem‹y_buf„r_Æloc_max_gë


	)

2107 
	#mem‹y_buf„r_Æloc_max_ª£t
 
mbedés_mem‹y_buf„r_Æloc_max_ª£t


	)

2108 
	#mem‹y_buf„r_Æloc_£lf_ã°
 
mbedés_mem‹y_buf„r_Æloc_£lf_ã°


	)

2109 
	#mem‹y_buf„r_Æloc_°©us
 
mbedés_mem‹y_buf„r_Æloc_°©us


	)

2110 
	#mem‹y_buf„r_Æloc_vîify
 
mbedés_mem‹y_buf„r_Æloc_vîify


	)

2111 
	#mem‹y_buf„r_£t_vîify
 
mbedés_mem‹y_buf„r_£t_vîify


	)

2112 
	#mem‹y_£t_own
 
mbedés_mem‹y_£t_own


	)

2113 
	#mpi
 
mbedés_mpi


	)

2114 
	#mpi_add_abs
 
mbedés_mpi_add_abs


	)

2115 
	#mpi_add_öt
 
mbedés_mpi_add_öt


	)

2116 
	#mpi_add_mpi
 
mbedés_mpi_add_mpi


	)

2117 
	#mpi_cmp_abs
 
mbedés_mpi_cmp_abs


	)

2118 
	#mpi_cmp_öt
 
mbedés_mpi_cmp_öt


	)

2119 
	#mpi_cmp_mpi
 
mbedés_mpi_cmp_mpi


	)

2120 
	#mpi_c›y
 
mbedés_mpi_c›y


	)

2121 
	#mpi_div_öt
 
mbedés_mpi_div_öt


	)

2122 
	#mpi_div_mpi
 
mbedés_mpi_div_mpi


	)

2123 
	#mpi_exp_mod
 
mbedés_mpi_exp_mod


	)

2124 
	#mpi_fûl_øndom
 
mbedés_mpi_fûl_øndom


	)

2125 
	#mpi_‰ì
 
mbedés_mpi_‰ì


	)

2126 
	#mpi_gcd
 
mbedés_mpi_gcd


	)

2127 
	#mpi_gí_¥ime
 
mbedés_mpi_gí_¥ime


	)

2128 
	#mpi_gë_bô
 
mbedés_mpi_gë_bô


	)

2129 
	#mpi_grow
 
mbedés_mpi_grow


	)

2130 
	#mpi_öô
 
mbedés_mpi_öô


	)

2131 
	#mpi_öv_mod
 
mbedés_mpi_öv_mod


	)

2132 
	#mpi_is_¥ime
 
mbedés_mpi_is_¥ime


	)

2133 
	#mpi_lsb
 
mbedés_mpi_lsb


	)

2134 
	#mpi_l£t
 
mbedés_mpi_l£t


	)

2135 
	#mpi_mod_öt
 
mbedés_mpi_mod_öt


	)

2136 
	#mpi_mod_mpi
 
mbedés_mpi_mod_mpi


	)

2137 
	#mpi_msb
 
mbedés_mpi_bôÀn


	)

2138 
	#mpi_mul_öt
 
mbedés_mpi_mul_öt


	)

2139 
	#mpi_mul_mpi
 
mbedés_mpi_mul_mpi


	)

2140 
	#mpi_ªad_bö¨y
 
mbedés_mpi_ªad_bö¨y


	)

2141 
	#mpi_ªad_fûe
 
mbedés_mpi_ªad_fûe


	)

2142 
	#mpi_ªad_°rög
 
mbedés_mpi_ªad_°rög


	)

2143 
	#mpi_ß„_c⁄d_assign
 
mbedés_mpi_ß„_c⁄d_assign


	)

2144 
	#mpi_ß„_c⁄d_sw≠
 
mbedés_mpi_ß„_c⁄d_sw≠


	)

2145 
	#mpi_£lf_ã°
 
mbedés_mpi_£lf_ã°


	)

2146 
	#mpi_£t_bô
 
mbedés_mpi_£t_bô


	)

2147 
	#mpi_shi·_l
 
mbedés_mpi_shi·_l


	)

2148 
	#mpi_shi·_r
 
mbedés_mpi_shi·_r


	)

2149 
	#mpi_shrök
 
mbedés_mpi_shrök


	)

2150 
	#mpi_size
 
mbedés_mpi_size


	)

2151 
	#mpi_sub_abs
 
mbedés_mpi_sub_abs


	)

2152 
	#mpi_sub_öt
 
mbedés_mpi_sub_öt


	)

2153 
	#mpi_sub_mpi
 
mbedés_mpi_sub_mpi


	)

2154 
	#mpi_sw≠
 
mbedés_mpi_sw≠


	)

2155 
	#mpi_wrôe_bö¨y
 
mbedés_mpi_wrôe_bö¨y


	)

2156 
	#mpi_wrôe_fûe
 
mbedés_mpi_wrôe_fûe


	)

2157 
	#mpi_wrôe_°rög
 
mbedés_mpi_wrôe_°rög


	)

2158 
	#√t_ac˚±
 
mbedés_√t_ac˚±


	)

2159 
	#√t_böd
 
mbedés_√t_böd


	)

2160 
	#√t_˛o£
 
mbedés_√t_‰ì


	)

2161 
	#√t_c⁄√˘
 
mbedés_√t_c⁄√˘


	)

2162 
	#√t_ªcv
 
mbedés_√t_ªcv


	)

2163 
	#√t_ªcv_timeout
 
mbedés_√t_ªcv_timeout


	)

2164 
	#√t_£nd
 
mbedés_√t_£nd


	)

2165 
	#√t_£t_block
 
mbedés_√t_£t_block


	)

2166 
	#√t_£t_n⁄block
 
mbedés_√t_£t_n⁄block


	)

2167 
	#√t_u¶ìp
 
mbedés_√t_u¶ìp


	)

2168 
	#oid_des¸ùt‹_t
 
mbedés_oid_des¸ùt‹_t


	)

2169 
	#oid_gë_©å_sh‹t_«me
 
mbedés_oid_gë_©å_sh‹t_«me


	)

2170 
	#oid_gë_cùhî_Æg
 
mbedés_oid_gë_cùhî_Æg


	)

2171 
	#oid_gë_ec_gΩ
 
mbedés_oid_gë_ec_gΩ


	)

2172 
	#oid_gë_exãnded_key_ußge
 
mbedés_oid_gë_exãnded_key_ußge


	)

2173 
	#oid_gë_md_Æg
 
mbedés_oid_gë_md_Æg


	)

2174 
	#oid_gë_numîic_°rög
 
mbedés_oid_gë_numîic_°rög


	)

2175 
	#oid_gë_oid_by_ec_gΩ
 
mbedés_oid_gë_oid_by_ec_gΩ


	)

2176 
	#oid_gë_oid_by_md
 
mbedés_oid_gë_oid_by_md


	)

2177 
	#oid_gë_oid_by_pk_Æg
 
mbedés_oid_gë_oid_by_pk_Æg


	)

2178 
	#oid_gë_oid_by_sig_Æg
 
mbedés_oid_gë_oid_by_sig_Æg


	)

2179 
	#oid_gë_pk_Æg
 
mbedés_oid_gë_pk_Æg


	)

2180 
	#oid_gë_pkcs12_pbe_Æg
 
mbedés_oid_gë_pkcs12_pbe_Æg


	)

2181 
	#oid_gë_sig_Æg
 
mbedés_oid_gë_sig_Æg


	)

2182 
	#oid_gë_sig_Æg_desc
 
mbedés_oid_gë_sig_Æg_desc


	)

2183 
	#oid_gë_x509_ext_ty≥
 
mbedés_oid_gë_x509_ext_ty≥


	)

2184 
	#›î©i⁄_t
 
mbedés_›î©i⁄_t


	)

2185 
	#∑dlock_suµ‹ts
 
mbedés_∑dlock_has_suµ‹t


	)

2186 
	#∑dlock_x¸y±cbc
 
mbedés_∑dlock_x¸y±cbc


	)

2187 
	#∑dlock_x¸y±ecb
 
mbedés_∑dlock_x¸y±ecb


	)

2188 
	#pbkdf2_hmac
 
mbedés_pbkdf2_hmac


	)

2189 
	#pbkdf2_£lf_ã°
 
mbedés_pbkdf2_£lf_ã°


	)

2190 
	#≥m_c⁄ãxt
 
mbedés_≥m_c⁄ãxt


	)

2191 
	#≥m_‰ì
 
mbedés_≥m_‰ì


	)

2192 
	#≥m_öô
 
mbedés_≥m_öô


	)

2193 
	#≥m_ªad_buf„r
 
mbedés_≥m_ªad_buf„r


	)

2194 
	#≥m_wrôe_buf„r
 
mbedés_≥m_wrôe_buf„r


	)

2195 
	#pk_ˇn_do
 
mbedés_pk_ˇn_do


	)

2196 
	#pk_check_∑ú
 
mbedés_pk_check_∑ú


	)

2197 
	#pk_c⁄ãxt
 
mbedés_pk_c⁄ãxt


	)

2198 
	#pk_debug
 
mbedés_pk_debug


	)

2199 
	#pk_debug_ôem
 
mbedés_pk_debug_ôem


	)

2200 
	#pk_debug_ty≥
 
mbedés_pk_debug_ty≥


	)

2201 
	#pk_de¸y±
 
mbedés_pk_de¸y±


	)

2202 
	#pk_ec
 
mbedés_pk_ec


	)

2203 
	#pk_í¸y±
 
mbedés_pk_í¸y±


	)

2204 
	#pk_‰ì
 
mbedés_pk_‰ì


	)

2205 
	#pk_gë_Àn
 
mbedés_pk_gë_Àn


	)

2206 
	#pk_gë_«me
 
mbedés_pk_gë_«me


	)

2207 
	#pk_gë_size
 
mbedés_pk_gë_bôÀn


	)

2208 
	#pk_gë_ty≥
 
mbedés_pk_gë_ty≥


	)

2209 
	#pk_öfo_‰om_ty≥
 
mbedés_pk_öfo_‰om_ty≥


	)

2210 
	#pk_öfo_t
 
mbedés_pk_öfo_t


	)

2211 
	#pk_öô
 
mbedés_pk_öô


	)

2212 
	#pk_öô_˘x
 
mbedés_pk_£tup


	)

2213 
	#pk_öô_˘x_rß_Æt
 
mbedés_pk_£tup_rß_Æt


	)

2214 
	#pk_lﬂd_fûe
 
mbedés_pk_lﬂd_fûe


	)

2215 
	#pk_∑r£_key
 
mbedés_pk_∑r£_key


	)

2216 
	#pk_∑r£_keyfûe
 
mbedés_pk_∑r£_keyfûe


	)

2217 
	#pk_∑r£_public_key
 
mbedés_pk_∑r£_public_key


	)

2218 
	#pk_∑r£_public_keyfûe
 
mbedés_pk_∑r£_public_keyfûe


	)

2219 
	#pk_∑r£_subpubkey
 
mbedés_pk_∑r£_subpubkey


	)

2220 
	#pk_rß
 
mbedés_pk_rß


	)

2221 
	#pk_rß_Æt_de¸y±_func
 
mbedés_pk_rß_Æt_de¸y±_func


	)

2222 
	#pk_rß_Æt_key_Àn_func
 
mbedés_pk_rß_Æt_key_Àn_func


	)

2223 
	#pk_rß_Æt_sign_func
 
mbedés_pk_rß_Æt_sign_func


	)

2224 
	#pk_rßsß_pss_›ti⁄s
 
mbedés_pk_rßsß_pss_›ti⁄s


	)

2225 
	#pk_sign
 
mbedés_pk_sign


	)

2226 
	#pk_ty≥_t
 
mbedés_pk_ty≥_t


	)

2227 
	#pk_vîify
 
mbedés_pk_vîify


	)

2228 
	#pk_vîify_ext
 
mbedés_pk_vîify_ext


	)

2229 
	#pk_wrôe_key_dî
 
mbedés_pk_wrôe_key_dî


	)

2230 
	#pk_wrôe_key_≥m
 
mbedés_pk_wrôe_key_≥m


	)

2231 
	#pk_wrôe_pubkey
 
mbedés_pk_wrôe_pubkey


	)

2232 
	#pk_wrôe_pubkey_dî
 
mbedés_pk_wrôe_pubkey_dî


	)

2233 
	#pk_wrôe_pubkey_≥m
 
mbedés_pk_wrôe_pubkey_≥m


	)

2234 
	#pkcs11_c⁄ãxt
 
mbedés_pkcs11_c⁄ãxt


	)

2235 
	#pkcs11_de¸y±
 
mbedés_pkcs11_de¸y±


	)

2236 
	#pkcs11_¥iv_key_‰ì
 
mbedés_pkcs11_¥iv_key_‰ì


	)

2237 
	#pkcs11_¥iv_key_öô
 
mbedés_pkcs11_¥iv_key_böd


	)

2238 
	#pkcs11_sign
 
mbedés_pkcs11_sign


	)

2239 
	#pkcs11_x509_˚π_öô
 
mbedés_pkcs11_x509_˚π_böd


	)

2240 
	#pkcs12_dîiv©i⁄
 
mbedés_pkcs12_dîiv©i⁄


	)

2241 
	#pkcs12_pbe
 
mbedés_pkcs12_pbe


	)

2242 
	#pkcs12_pbe_sha1_rc4_128
 
mbedés_pkcs12_pbe_sha1_rc4_128


	)

2243 
	#pkcs5_pbes2
 
mbedés_pkcs5_pbes2


	)

2244 
	#pkcs5_pbkdf2_hmac
 
mbedés_pkcs5_pbkdf2_hmac


	)

2245 
	#pkcs5_£lf_ã°
 
mbedés_pkcs5_£lf_ã°


	)

2246 
	#∂©f‹m_íå›y_pﬁl
 
mbedés_∂©f‹m_íå›y_pﬁl


	)

2247 
	#∂©f‹m_£t_exô
 
mbedés_∂©f‹m_£t_exô


	)

2248 
	#∂©f‹m_£t_Ârötf
 
mbedés_∂©f‹m_£t_Ârötf


	)

2249 
	#∂©f‹m_£t_mÆloc_‰ì
 
mbedés_∂©f‹m_£t_mÆloc_‰ì


	)

2250 
	#∂©f‹m_£t_¥ötf
 
mbedés_∂©f‹m_£t_¥ötf


	)

2251 
	#∂©f‹m_£t_¢¥ötf
 
mbedés_∂©f‹m_£t_¢¥ötf


	)

2252 
	#pﬁ¨s¶_exô
 
mbedés_exô


	)

2253 
	#pﬁ¨s¶_Ârötf
 
mbedés_Ârötf


	)

2254 
	#pﬁ¨s¶_‰ì
 
mbedés_‰ì


	)

2255 
	#pﬁ¨s¶_mÆloc
 
mbedés_mÆloc


	)

2256 
	#pﬁ¨s¶_muãx_‰ì
 
mbedés_muãx_‰ì


	)

2257 
	#pﬁ¨s¶_muãx_öô
 
mbedés_muãx_öô


	)

2258 
	#pﬁ¨s¶_muãx_lock
 
mbedés_muãx_lock


	)

2259 
	#pﬁ¨s¶_muãx_u∆ock
 
mbedés_muãx_u∆ock


	)

2260 
	#pﬁ¨s¶_¥ötf
 
mbedés_¥ötf


	)

2261 
	#pﬁ¨s¶_¢¥ötf
 
mbedés_¢¥ötf


	)

2262 
	#pﬁ¨s¶_°ªº‹
 
mbedés_°ªº‹


	)

2263 
	#rùemd160
 
mbedés_rùemd160


	)

2264 
	#rùemd160_c⁄ãxt
 
mbedés_rùemd160_c⁄ãxt


	)

2265 
	#rùemd160_fûe
 
mbedés_rùemd160_fûe


	)

2266 
	#rùemd160_föish
 
mbedés_rùemd160_föish


	)

2267 
	#rùemd160_‰ì
 
mbedés_rùemd160_‰ì


	)

2268 
	#rùemd160_hmac
 
mbedés_rùemd160_hmac


	)

2269 
	#rùemd160_hmac_föish
 
mbedés_rùemd160_hmac_föish


	)

2270 
	#rùemd160_hmac_ª£t
 
mbedés_rùemd160_hmac_ª£t


	)

2271 
	#rùemd160_hmac_°¨ts
 
mbedés_rùemd160_hmac_°¨ts


	)

2272 
	#rùemd160_hmac_upd©e
 
mbedés_rùemd160_hmac_upd©e


	)

2273 
	#rùemd160_öfo
 
mbedés_rùemd160_öfo


	)

2274 
	#rùemd160_öô
 
mbedés_rùemd160_öô


	)

2275 
	#rùemd160_¥o˚ss
 
mbedés_rùemd160_¥o˚ss


	)

2276 
	#rùemd160_£lf_ã°
 
mbedés_rùemd160_£lf_ã°


	)

2277 
	#rùemd160_°¨ts
 
mbedés_rùemd160_°¨ts


	)

2278 
	#rùemd160_upd©e
 
mbedés_rùemd160_upd©e


	)

2279 
	#rß_Æt_c⁄ãxt
 
mbedés_rß_Æt_c⁄ãxt


	)

2280 
	#rß_Æt_öfo
 
mbedés_rß_Æt_öfo


	)

2281 
	#rß_check_¥ivkey
 
mbedés_rß_check_¥ivkey


	)

2282 
	#rß_check_pub_¥iv
 
mbedés_rß_check_pub_¥iv


	)

2283 
	#rß_check_pubkey
 
mbedés_rß_check_pubkey


	)

2284 
	#rß_c⁄ãxt
 
mbedés_rß_c⁄ãxt


	)

2285 
	#rß_c›y
 
mbedés_rß_c›y


	)

2286 
	#rß_de¸y±_func
 
mbedés_rß_de¸y±_func


	)

2287 
	#rß_‰ì
 
mbedés_rß_‰ì


	)

2288 
	#rß_gí_key
 
mbedés_rß_gí_key


	)

2289 
	#rß_öfo
 
mbedés_rß_öfo


	)

2290 
	#rß_öô
 
mbedés_rß_öô


	)

2291 
	#rß_key_Àn_func
 
mbedés_rß_key_Àn_func


	)

2292 
	#rß_pkcs1_de¸y±
 
mbedés_rß_pkcs1_de¸y±


	)

2293 
	#rß_pkcs1_í¸y±
 
mbedés_rß_pkcs1_í¸y±


	)

2294 
	#rß_pkcs1_sign
 
mbedés_rß_pkcs1_sign


	)

2295 
	#rß_pkcs1_vîify
 
mbedés_rß_pkcs1_vîify


	)

2296 
	#rß_¥iv©e
 
mbedés_rß_¥iv©e


	)

2297 
	#rß_public
 
mbedés_rß_public


	)

2298 
	#rß_rßes_ﬂï_de¸y±
 
mbedés_rß_rßes_ﬂï_de¸y±


	)

2299 
	#rß_rßes_ﬂï_í¸y±
 
mbedés_rß_rßes_ﬂï_í¸y±


	)

2300 
	#rß_rßes_pkcs1_v15_de¸y±
 
mbedés_rß_rßes_pkcs1_v15_de¸y±


	)

2301 
	#rß_rßes_pkcs1_v15_í¸y±
 
mbedés_rß_rßes_pkcs1_v15_í¸y±


	)

2302 
	#rß_rßsß_pkcs1_v15_sign
 
mbedés_rß_rßsß_pkcs1_v15_sign


	)

2303 
	#rß_rßsß_pkcs1_v15_vîify
 
mbedés_rß_rßsß_pkcs1_v15_vîify


	)

2304 
	#rß_rßsß_pss_sign
 
mbedés_rß_rßsß_pss_sign


	)

2305 
	#rß_rßsß_pss_vîify
 
mbedés_rß_rßsß_pss_vîify


	)

2306 
	#rß_rßsß_pss_vîify_ext
 
mbedés_rß_rßsß_pss_vîify_ext


	)

2307 
	#rß_£lf_ã°
 
mbedés_rß_£lf_ã°


	)

2308 
	#rß_£t_∑ddög
 
mbedés_rß_£t_∑ddög


	)

2309 
	#rß_sign_func
 
mbedés_rß_sign_func


	)

2310 
	#ß„r_memcmp
 
mbedés_s¶_ß„r_memcmp


	)

2311 
	#£t_Æ¨m
 
mbedés_£t_Æ¨m


	)

2312 
	#sha1
 
mbedés_sha1


	)

2313 
	#sha1_c⁄ãxt
 
mbedés_sha1_c⁄ãxt


	)

2314 
	#sha1_fûe
 
mbedés_sha1_fûe


	)

2315 
	#sha1_föish
 
mbedés_sha1_föish


	)

2316 
	#sha1_‰ì
 
mbedés_sha1_‰ì


	)

2317 
	#sha1_hmac
 
mbedés_sha1_hmac


	)

2318 
	#sha1_hmac_föish
 
mbedés_sha1_hmac_föish


	)

2319 
	#sha1_hmac_ª£t
 
mbedés_sha1_hmac_ª£t


	)

2320 
	#sha1_hmac_°¨ts
 
mbedés_sha1_hmac_°¨ts


	)

2321 
	#sha1_hmac_upd©e
 
mbedés_sha1_hmac_upd©e


	)

2322 
	#sha1_öfo
 
mbedés_sha1_öfo


	)

2323 
	#sha1_öô
 
mbedés_sha1_öô


	)

2324 
	#sha1_¥o˚ss
 
mbedés_sha1_¥o˚ss


	)

2325 
	#sha1_£lf_ã°
 
mbedés_sha1_£lf_ã°


	)

2326 
	#sha1_°¨ts
 
mbedés_sha1_°¨ts


	)

2327 
	#sha1_upd©e
 
mbedés_sha1_upd©e


	)

2328 
	#sha224_öfo
 
mbedés_sha224_öfo


	)

2329 
	#sha256
 
mbedés_sha256


	)

2330 
	#sha256_c⁄ãxt
 
mbedés_sha256_c⁄ãxt


	)

2331 
	#sha256_fûe
 
mbedés_sha256_fûe


	)

2332 
	#sha256_föish
 
mbedés_sha256_föish


	)

2333 
	#sha256_‰ì
 
mbedés_sha256_‰ì


	)

2334 
	#sha256_hmac
 
mbedés_sha256_hmac


	)

2335 
	#sha256_hmac_föish
 
mbedés_sha256_hmac_föish


	)

2336 
	#sha256_hmac_ª£t
 
mbedés_sha256_hmac_ª£t


	)

2337 
	#sha256_hmac_°¨ts
 
mbedés_sha256_hmac_°¨ts


	)

2338 
	#sha256_hmac_upd©e
 
mbedés_sha256_hmac_upd©e


	)

2339 
	#sha256_öfo
 
mbedés_sha256_öfo


	)

2340 
	#sha256_öô
 
mbedés_sha256_öô


	)

2341 
	#sha256_¥o˚ss
 
mbedés_sha256_¥o˚ss


	)

2342 
	#sha256_£lf_ã°
 
mbedés_sha256_£lf_ã°


	)

2343 
	#sha256_°¨ts
 
mbedés_sha256_°¨ts


	)

2344 
	#sha256_upd©e
 
mbedés_sha256_upd©e


	)

2345 
	#sha384_öfo
 
mbedés_sha384_öfo


	)

2346 
	#sha512
 
mbedés_sha512


	)

2347 
	#sha512_c⁄ãxt
 
mbedés_sha512_c⁄ãxt


	)

2348 
	#sha512_fûe
 
mbedés_sha512_fûe


	)

2349 
	#sha512_föish
 
mbedés_sha512_föish


	)

2350 
	#sha512_‰ì
 
mbedés_sha512_‰ì


	)

2351 
	#sha512_hmac
 
mbedés_sha512_hmac


	)

2352 
	#sha512_hmac_föish
 
mbedés_sha512_hmac_föish


	)

2353 
	#sha512_hmac_ª£t
 
mbedés_sha512_hmac_ª£t


	)

2354 
	#sha512_hmac_°¨ts
 
mbedés_sha512_hmac_°¨ts


	)

2355 
	#sha512_hmac_upd©e
 
mbedés_sha512_hmac_upd©e


	)

2356 
	#sha512_öfo
 
mbedés_sha512_öfo


	)

2357 
	#sha512_öô
 
mbedés_sha512_öô


	)

2358 
	#sha512_¥o˚ss
 
mbedés_sha512_¥o˚ss


	)

2359 
	#sha512_£lf_ã°
 
mbedés_sha512_£lf_ã°


	)

2360 
	#sha512_°¨ts
 
mbedés_sha512_°¨ts


	)

2361 
	#sha512_upd©e
 
mbedés_sha512_upd©e


	)

2362 
	#sour˚_°©e
 
mbedés_íå›y_sour˚_°©e


	)

2363 
	#s¶_ˇche_c⁄ãxt
 
mbedés_s¶_ˇche_c⁄ãxt


	)

2364 
	#s¶_ˇche_íåy
 
mbedés_s¶_ˇche_íåy


	)

2365 
	#s¶_ˇche_‰ì
 
mbedés_s¶_ˇche_‰ì


	)

2366 
	#s¶_ˇche_gë
 
mbedés_s¶_ˇche_gë


	)

2367 
	#s¶_ˇche_öô
 
mbedés_s¶_ˇche_öô


	)

2368 
	#s¶_ˇche_£t
 
mbedés_s¶_ˇche_£t


	)

2369 
	#s¶_ˇche_£t_max_íåõs
 
mbedés_s¶_ˇche_£t_max_íåõs


	)

2370 
	#s¶_ˇche_£t_timeout
 
mbedés_s¶_ˇche_£t_timeout


	)

2371 
	#s¶_check_˚π_ußge
 
mbedés_s¶_check_˚π_ußge


	)

2372 
	#s¶_cùhîsuôe_‰om_id
 
mbedés_s¶_cùhîsuôe_‰om_id


	)

2373 
	#s¶_cùhîsuôe_‰om_°rög
 
mbedés_s¶_cùhîsuôe_‰om_°rög


	)

2374 
	#s¶_cùhîsuôe_t
 
mbedés_s¶_cùhîsuôe_t


	)

2375 
	#s¶_cùhîsuôe_u£s_ec
 
mbedés_s¶_cùhîsuôe_u£s_ec


	)

2376 
	#s¶_cùhîsuôe_u£s_psk
 
mbedés_s¶_cùhîsuôe_u£s_psk


	)

2377 
	#s¶_˛o£_nŸify
 
mbedés_s¶_˛o£_nŸify


	)

2378 
	#s¶_c⁄ãxt
 
mbedés_s¶_c⁄ãxt


	)

2379 
	#s¶_cookõ_check
 
mbedés_s¶_cookõ_check


	)

2380 
	#s¶_cookõ_check_t
 
mbedés_s¶_cookõ_check_t


	)

2381 
	#s¶_cookõ_˘x
 
mbedés_s¶_cookõ_˘x


	)

2382 
	#s¶_cookõ_‰ì
 
mbedés_s¶_cookõ_‰ì


	)

2383 
	#s¶_cookõ_öô
 
mbedés_s¶_cookõ_öô


	)

2384 
	#s¶_cookõ_£t_timeout
 
mbedés_s¶_cookõ_£t_timeout


	)

2385 
	#s¶_cookõ_£tup
 
mbedés_s¶_cookõ_£tup


	)

2386 
	#s¶_cookõ_wrôe
 
mbedés_s¶_cookõ_wrôe


	)

2387 
	#s¶_cookõ_wrôe_t
 
mbedés_s¶_cookõ_wrôe_t


	)

2388 
	#s¶_curve_is_ac˚±abÀ
 
mbedés_s¶_curve_is_ac˚±abÀ


	)

2389 
	#s¶_dîive_keys
 
mbedés_s¶_dîive_keys


	)

2390 
	#s¶_dés_ª∂ay_check
 
mbedés_s¶_dés_ª∂ay_check


	)

2391 
	#s¶_dés_ª∂ay_upd©e
 
mbedés_s¶_dés_ª∂ay_upd©e


	)

2392 
	#s¶_„tch_öput
 
mbedés_s¶_„tch_öput


	)

2393 
	#s¶_Êight_ôem
 
mbedés_s¶_Êight_ôem


	)

2394 
	#s¶_Êush_ouçut
 
mbedés_s¶_Êush_ouçut


	)

2395 
	#s¶_‰ì
 
mbedés_s¶_‰ì


	)

2396 
	#s¶_gë_Æ≤_¥Ÿocﬁ
 
mbedés_s¶_gë_Æ≤_¥Ÿocﬁ


	)

2397 
	#s¶_gë_byãs_avaû
 
mbedés_s¶_gë_byãs_avaû


	)

2398 
	#s¶_gë_cùhîsuôe
 
mbedés_s¶_gë_cùhîsuôe


	)

2399 
	#s¶_gë_cùhîsuôe_id
 
mbedés_s¶_gë_cùhîsuôe_id


	)

2400 
	#s¶_gë_cùhîsuôe_«me
 
mbedés_s¶_gë_cùhîsuôe_«me


	)

2401 
	#s¶_gë_cùhîsuôe_sig_pk_Æg
 
mbedés_s¶_gë_cùhîsuôe_sig_pk_Æg


	)

2402 
	#s¶_gë_≥î_˚π
 
mbedés_s¶_gë_≥î_˚π


	)

2403 
	#s¶_gë_ªc‹d_ex∑nsi⁄
 
mbedés_s¶_gë_ªc‹d_ex∑nsi⁄


	)

2404 
	#s¶_gë_£ssi⁄
 
mbedés_s¶_gë_£ssi⁄


	)

2405 
	#s¶_gë_vîify_ªsu…
 
mbedés_s¶_gë_vîify_ªsu…


	)

2406 
	#s¶_gë_vîsi⁄
 
mbedés_s¶_gë_vîsi⁄


	)

2407 
	#s¶_h™dshake
 
mbedés_s¶_h™dshake


	)

2408 
	#s¶_h™dshake_˛õ¡_°ï
 
mbedés_s¶_h™dshake_˛õ¡_°ï


	)

2409 
	#s¶_h™dshake_‰ì
 
mbedés_s¶_h™dshake_‰ì


	)

2410 
	#s¶_h™dshake_∑øms
 
mbedés_s¶_h™dshake_∑øms


	)

2411 
	#s¶_h™dshake_£rvî_°ï
 
mbedés_s¶_h™dshake_£rvî_°ï


	)

2412 
	#s¶_h™dshake_°ï
 
mbedés_s¶_h™dshake_°ï


	)

2413 
	#s¶_h™dshake_wøpup
 
mbedés_s¶_h™dshake_wøpup


	)

2414 
	#s¶_hdr_Àn
 
mbedés_s¶_hdr_Àn


	)

2415 
	#s¶_hs_hdr_Àn
 
mbedés_s¶_hs_hdr_Àn


	)

2416 
	#s¶_hw_ªc‹d_a˘iv©e
 
mbedés_s¶_hw_ªc‹d_a˘iv©e


	)

2417 
	#s¶_hw_ªc‹d_föish
 
mbedés_s¶_hw_ªc‹d_föish


	)

2418 
	#s¶_hw_ªc‹d_öô
 
mbedés_s¶_hw_ªc‹d_öô


	)

2419 
	#s¶_hw_ªc‹d_ªad
 
mbedés_s¶_hw_ªc‹d_ªad


	)

2420 
	#s¶_hw_ªc‹d_ª£t
 
mbedés_s¶_hw_ªc‹d_ª£t


	)

2421 
	#s¶_hw_ªc‹d_wrôe
 
mbedés_s¶_hw_ªc‹d_wrôe


	)

2422 
	#s¶_öô
 
mbedés_s¶_öô


	)

2423 
	#s¶_key_˚π
 
mbedés_s¶_key_˚π


	)

2424 
	#s¶_Àgacy_ª√gŸüti⁄
 
mbedés_s¶_c⁄f_Àgacy_ª√gŸüti⁄


	)

2425 
	#s¶_li°_cùhîsuôes
 
mbedés_s¶_li°_cùhîsuôes


	)

2426 
	#s¶_md_Æg_‰om_hash
 
mbedés_s¶_md_Æg_‰om_hash


	)

2427 
	#s¶_›timize_checksum
 
mbedés_s¶_›timize_checksum


	)

2428 
	#s¶_own_˚π
 
mbedés_s¶_own_˚π


	)

2429 
	#s¶_own_key
 
mbedés_s¶_own_key


	)

2430 
	#s¶_∑r£_˚πifiˇã
 
mbedés_s¶_∑r£_˚πifiˇã


	)

2431 
	#s¶_∑r£_ch™ge_cùhî_•ec
 
mbedés_s¶_∑r£_ch™ge_cùhî_•ec


	)

2432 
	#s¶_∑r£_föished
 
mbedés_s¶_∑r£_föished


	)

2433 
	#s¶_pk_Æg_‰om_sig
 
mbedés_s¶_pk_Æg_‰om_sig


	)

2434 
	#s¶_pkcs11_de¸y±
 
mbedés_s¶_pkcs11_de¸y±


	)

2435 
	#s¶_pkcs11_key_Àn
 
mbedés_s¶_pkcs11_key_Àn


	)

2436 
	#s¶_pkcs11_sign
 
mbedés_s¶_pkcs11_sign


	)

2437 
	#s¶_psk_dîive_¥ema°î
 
mbedés_s¶_psk_dîive_¥ema°î


	)

2438 
	#s¶_ªad
 
mbedés_s¶_ªad


	)

2439 
	#s¶_ªad_ªc‹d
 
mbedés_s¶_ªad_ªc‹d


	)

2440 
	#s¶_ªad_vîsi⁄
 
mbedés_s¶_ªad_vîsi⁄


	)

2441 
	#s¶_ªcv_Êight_com∂ëed
 
mbedés_s¶_ªcv_Êight_com∂ëed


	)

2442 
	#s¶_ª√gŸüã
 
mbedés_s¶_ª√gŸüã


	)

2443 
	#s¶_ª£nd
 
mbedés_s¶_ª£nd


	)

2444 
	#s¶_ª£t_checksum
 
mbedés_s¶_ª£t_checksum


	)

2445 
	#s¶_£nd_Æît_mesßge
 
mbedés_s¶_£nd_Æît_mesßge


	)

2446 
	#s¶_£nd_Áèl_h™dshake_Áûuª
 
mbedés_s¶_£nd_Áèl_h™dshake_Áûuª


	)

2447 
	#s¶_£nd_Êight_com∂ëed
 
mbedés_s¶_£nd_Êight_com∂ëed


	)

2448 
	#s¶_£ssi⁄
 
mbedés_s¶_£ssi⁄


	)

2449 
	#s¶_£ssi⁄_‰ì
 
mbedés_s¶_£ssi⁄_‰ì


	)

2450 
	#s¶_£ssi⁄_öô
 
mbedés_s¶_£ssi⁄_öô


	)

2451 
	#s¶_£ssi⁄_ª£t
 
mbedés_s¶_£ssi⁄_ª£t


	)

2452 
	#s¶_£t_Æ≤_¥Ÿocﬁs
 
mbedés_s¶_c⁄f_Æ≤_¥Ÿocﬁs


	)

2453 
	#s¶_£t_¨c4_suµ‹t
 
mbedés_s¶_c⁄f_¨c4_suµ‹t


	)

2454 
	#s¶_£t_authmode
 
mbedés_s¶_c⁄f_authmode


	)

2455 
	#s¶_£t_bio
 
mbedés_s¶_£t_bio


	)

2456 
	#s¶_£t_bio
 
mbedés_s¶_£t_bio_timeout


	)

2457 
	#s¶_£t_ˇ_chaö
 
mbedés_s¶_c⁄f_ˇ_chaö


	)

2458 
	#s¶_£t_cbc_ªc‹d_•lôtög
 
mbedés_s¶_c⁄f_cbc_ªc‹d_•lôtög


	)

2459 
	#s¶_£t_cùhîsuôes
 
mbedés_s¶_c⁄f_cùhîsuôes


	)

2460 
	#s¶_£t_cùhîsuôes_f‹_vîsi⁄
 
mbedés_s¶_c⁄f_cùhîsuôes_f‹_vîsi⁄


	)

2461 
	#s¶_£t_˛õ¡_å™•‹t_id
 
mbedés_s¶_£t_˛õ¡_å™•‹t_id


	)

2462 
	#s¶_£t_curves
 
mbedés_s¶_c⁄f_curves


	)

2463 
	#s¶_£t_dbg
 
mbedés_s¶_c⁄f_dbg


	)

2464 
	#s¶_£t_dh_∑øm
 
mbedés_s¶_c⁄f_dh_∑øm


	)

2465 
	#s¶_£t_dh_∑øm_˘x
 
mbedés_s¶_c⁄f_dh_∑øm_˘x


	)

2466 
	#s¶_£t_dés_™ti_ª∂ay
 
mbedés_s¶_c⁄f_dés_™ti_ª∂ay


	)

2467 
	#s¶_£t_dés_badmac_limô
 
mbedés_s¶_c⁄f_dés_badmac_limô


	)

2468 
	#s¶_£t_dés_cookõs
 
mbedés_s¶_c⁄f_dés_cookõs


	)

2469 
	#s¶_£t_í¸y±_thí_mac
 
mbedés_s¶_c⁄f_í¸y±_thí_mac


	)

2470 
	#s¶_£t_ídpoöt
 
mbedés_s¶_c⁄f_ídpoöt


	)

2471 
	#s¶_£t_exãnded_ma°î_£¸ë
 
mbedés_s¶_c⁄f_exãnded_ma°î_£¸ë


	)

2472 
	#s¶_£t_ÁŒback
 
mbedés_s¶_c⁄f_ÁŒback


	)

2473 
	#s¶_£t_h™dshake_timeout
 
mbedés_s¶_c⁄f_h™dshake_timeout


	)

2474 
	#s¶_£t_ho°«me
 
mbedés_s¶_£t_ho°«me


	)

2475 
	#s¶_£t_max_‰ag_Àn
 
mbedés_s¶_c⁄f_max_‰ag_Àn


	)

2476 
	#s¶_£t_max_vîsi⁄
 
mbedés_s¶_c⁄f_max_vîsi⁄


	)

2477 
	#s¶_£t_mö_vîsi⁄
 
mbedés_s¶_c⁄f_mö_vîsi⁄


	)

2478 
	#s¶_£t_own_˚π
 
mbedés_s¶_c⁄f_own_˚π


	)

2479 
	#s¶_£t_own_˚π_Æt
 
mbedés_s¶_£t_own_˚π_Æt


	)

2480 
	#s¶_£t_own_˚π_rß
 
mbedés_s¶_£t_own_˚π_rß


	)

2481 
	#s¶_£t_psk
 
mbedés_s¶_c⁄f_psk


	)

2482 
	#s¶_£t_psk_cb
 
mbedés_s¶_c⁄f_psk_cb


	)

2483 
	#s¶_£t_ª√gŸüti⁄
 
mbedés_s¶_c⁄f_ª√gŸüti⁄


	)

2484 
	#s¶_£t_ª√gŸüti⁄_íf‹˚d
 
mbedés_s¶_c⁄f_ª√gŸüti⁄_íf‹˚d


	)

2485 
	#s¶_£t_ª√gŸüti⁄_≥riod
 
mbedés_s¶_c⁄f_ª√gŸüti⁄_≥riod


	)

2486 
	#s¶_£t_∫g
 
mbedés_s¶_c⁄f_∫g


	)

2487 
	#s¶_£t_£ssi⁄
 
mbedés_s¶_£t_£ssi⁄


	)

2488 
	#s¶_£t_£ssi⁄_ˇche
 
mbedés_s¶_c⁄f_£ssi⁄_ˇche


	)

2489 
	#s¶_£t_£ssi⁄_tickë_li„time
 
mbedés_s¶_c⁄f_£ssi⁄_tickë_li„time


	)

2490 
	#s¶_£t_£ssi⁄_tickës
 
mbedés_s¶_c⁄f_£ssi⁄_tickës


	)

2491 
	#s¶_£t_¢i
 
mbedés_s¶_c⁄f_¢i


	)

2492 
	#s¶_£t_å™•‹t
 
mbedés_s¶_c⁄f_å™•‹t


	)

2493 
	#s¶_£t_åunˇãd_hmac
 
mbedés_s¶_c⁄f_åunˇãd_hmac


	)

2494 
	#s¶_£t_vîify
 
mbedés_s¶_c⁄f_vîify


	)

2495 
	#s¶_sig_‰om_pk
 
mbedés_s¶_sig_‰om_pk


	)

2496 
	#s¶_°©es
 
mbedés_s¶_°©es


	)

2497 
	#s¶_tickë_keys
 
mbedés_s¶_tickë_keys


	)

2498 
	#s¶_å™sf‹m
 
mbedés_s¶_å™sf‹m


	)

2499 
	#s¶_å™sf‹m_‰ì
 
mbedés_s¶_å™sf‹m_‰ì


	)

2500 
	#s¶_wrôe
 
mbedés_s¶_wrôe


	)

2501 
	#s¶_wrôe_˚πifiˇã
 
mbedés_s¶_wrôe_˚πifiˇã


	)

2502 
	#s¶_wrôe_ch™ge_cùhî_•ec
 
mbedés_s¶_wrôe_ch™ge_cùhî_•ec


	)

2503 
	#s¶_wrôe_föished
 
mbedés_s¶_wrôe_föished


	)

2504 
	#s¶_wrôe_ªc‹d
 
mbedés_s¶_wrôe_ªc‹d


	)

2505 
	#s¶_wrôe_vîsi⁄
 
mbedés_s¶_wrôe_vîsi⁄


	)

2506 
	#suµ‹ãd_cùhîs
 
mbedés_cùhî_suµ‹ãd


	)

2507 
	#t_söt
 
mbedés_mpi_söt


	)

2508 
	#t_udbl
 
mbedés_t_udbl


	)

2509 
	#t_uöt
 
mbedés_mpi_uöt


	)

2510 
	#ã°_ˇ_¸t
 
mbedés_ã°_ˇ_¸t


	)

2511 
	#ã°_ˇ_¸t_ec
 
mbedés_ã°_ˇ_¸t_ec


	)

2512 
	#ã°_ˇ_¸t_rß
 
mbedés_ã°_ˇ_¸t_rß


	)

2513 
	#ã°_ˇ_key
 
mbedés_ã°_ˇ_key


	)

2514 
	#ã°_ˇ_key_ec
 
mbedés_ã°_ˇ_key_ec


	)

2515 
	#ã°_ˇ_key_rß
 
mbedés_ã°_ˇ_key_rß


	)

2516 
	#ã°_ˇ_li°
 
mbedés_ã°_ˇs_≥m


	)

2517 
	#ã°_ˇ_pwd
 
mbedés_ã°_ˇ_pwd


	)

2518 
	#ã°_ˇ_pwd_ec
 
mbedés_ã°_ˇ_pwd_ec


	)

2519 
	#ã°_ˇ_pwd_rß
 
mbedés_ã°_ˇ_pwd_rß


	)

2520 
	#ã°_˛i_¸t
 
mbedés_ã°_˛i_¸t


	)

2521 
	#ã°_˛i_¸t_ec
 
mbedés_ã°_˛i_¸t_ec


	)

2522 
	#ã°_˛i_¸t_rß
 
mbedés_ã°_˛i_¸t_rß


	)

2523 
	#ã°_˛i_key
 
mbedés_ã°_˛i_key


	)

2524 
	#ã°_˛i_key_ec
 
mbedés_ã°_˛i_key_ec


	)

2525 
	#ã°_˛i_key_rß
 
mbedés_ã°_˛i_key_rß


	)

2526 
	#ã°_dhm_∑øms
 
mbedés_ã°_dhm_∑øms


	)

2527 
	#ã°_§v_¸t
 
mbedés_ã°_§v_¸t


	)

2528 
	#ã°_§v_¸t_ec
 
mbedés_ã°_§v_¸t_ec


	)

2529 
	#ã°_§v_¸t_rß
 
mbedés_ã°_§v_¸t_rß


	)

2530 
	#ã°_§v_key
 
mbedés_ã°_§v_key


	)

2531 
	#ã°_§v_key_ec
 
mbedés_ã°_§v_key_ec


	)

2532 
	#ã°_§v_key_rß
 
mbedés_ã°_§v_key_rß


	)

2533 
	#thªadög_muãx_t
 
mbedés_thªadög_muãx_t


	)

2534 
	#thªadög_£t_Æt
 
mbedés_thªadög_£t_Æt


	)

2535 
	#timög_£lf_ã°
 
mbedés_timög_£lf_ã°


	)

2536 
	#vîsi⁄_check_„©uª
 
mbedés_vîsi⁄_check_„©uª


	)

2537 
	#vîsi⁄_gë_numbî
 
mbedés_vîsi⁄_gë_numbî


	)

2538 
	#vîsi⁄_gë_°rög
 
mbedés_vîsi⁄_gë_°rög


	)

2539 
	#vîsi⁄_gë_°rög_fuŒ
 
mbedés_vîsi⁄_gë_°rög_fuŒ


	)

2540 
	#x509_bô°rög
 
mbedés_x509_bô°rög


	)

2541 
	#x509_buf
 
mbedés_x509_buf


	)

2542 
	#x509_¸l
 
mbedés_x509_¸l


	)

2543 
	#x509_¸l_íåy
 
mbedés_x509_¸l_íåy


	)

2544 
	#x509_¸l_‰ì
 
mbedés_x509_¸l_‰ì


	)

2545 
	#x509_¸l_öfo
 
mbedés_x509_¸l_öfo


	)

2546 
	#x509_¸l_öô
 
mbedés_x509_¸l_öô


	)

2547 
	#x509_¸l_∑r£
 
mbedés_x509_¸l_∑r£


	)

2548 
	#x509_¸l_∑r£_dî
 
mbedés_x509_¸l_∑r£_dî


	)

2549 
	#x509_¸l_∑r£_fûe
 
mbedés_x509_¸l_∑r£_fûe


	)

2550 
	#x509_¸t
 
mbedés_x509_¸t


	)

2551 
	#x509_¸t_check_exãnded_key_ußge
 
mbedés_x509_¸t_check_exãnded_key_ußge


	)

2552 
	#x509_¸t_check_key_ußge
 
mbedés_x509_¸t_check_key_ußge


	)

2553 
	#x509_¸t_‰ì
 
mbedés_x509_¸t_‰ì


	)

2554 
	#x509_¸t_öfo
 
mbedés_x509_¸t_öfo


	)

2555 
	#x509_¸t_öô
 
mbedés_x509_¸t_öô


	)

2556 
	#x509_¸t_∑r£
 
mbedés_x509_¸t_∑r£


	)

2557 
	#x509_¸t_∑r£_dî
 
mbedés_x509_¸t_∑r£_dî


	)

2558 
	#x509_¸t_∑r£_fûe
 
mbedés_x509_¸t_∑r£_fûe


	)

2559 
	#x509_¸t_∑r£_∑th
 
mbedés_x509_¸t_∑r£_∑th


	)

2560 
	#x509_¸t_ªvoked
 
mbedés_x509_¸t_is_ªvoked


	)

2561 
	#x509_¸t_vîify
 
mbedés_x509_¸t_vîify


	)

2562 
	#x509_c§
 
mbedés_x509_c§


	)

2563 
	#x509_c§_‰ì
 
mbedés_x509_c§_‰ì


	)

2564 
	#x509_c§_öfo
 
mbedés_x509_c§_öfo


	)

2565 
	#x509_c§_öô
 
mbedés_x509_c§_öô


	)

2566 
	#x509_c§_∑r£
 
mbedés_x509_c§_∑r£


	)

2567 
	#x509_c§_∑r£_dî
 
mbedés_x509_c§_∑r£_dî


	)

2568 
	#x509_c§_∑r£_fûe
 
mbedés_x509_c§_∑r£_fûe


	)

2569 
	#x509_dn_gës
 
mbedés_x509_dn_gës


	)

2570 
	#x509_gë_Æg
 
mbedés_x509_gë_Æg


	)

2571 
	#x509_gë_Æg_nuŒ
 
mbedés_x509_gë_Æg_nuŒ


	)

2572 
	#x509_gë_ext
 
mbedés_x509_gë_ext


	)

2573 
	#x509_gë_«me
 
mbedés_x509_gë_«me


	)

2574 
	#x509_gë_rßsß_pss_∑øms
 
mbedés_x509_gë_rßsß_pss_∑øms


	)

2575 
	#x509_gë_£rül
 
mbedés_x509_gë_£rül


	)

2576 
	#x509_gë_sig
 
mbedés_x509_gë_sig


	)

2577 
	#x509_gë_sig_Æg
 
mbedés_x509_gë_sig_Æg


	)

2578 
	#x509_gë_time
 
mbedés_x509_gë_time


	)

2579 
	#x509_key_size_hñ≥r
 
mbedés_x509_key_size_hñ≥r


	)

2580 
	#x509_«me
 
mbedés_x509_«me


	)

2581 
	#x509_oid_gë_des¸ùti⁄
 
mbedés_x509_oid_gë_des¸ùti⁄


	)

2582 
	#x509_oid_gë_numîic_°rög
 
mbedés_x509_oid_gë_numîic_°rög


	)

2583 
	#x509_£lf_ã°
 
mbedés_x509_£lf_ã°


	)

2584 
	#x509_£quí˚
 
mbedés_x509_£quí˚


	)

2585 
	#x509_£rül_gës
 
mbedés_x509_£rül_gës


	)

2586 
	#x509_£t_exãnsi⁄
 
mbedés_x509_£t_exãnsi⁄


	)

2587 
	#x509_sig_Æg_gës
 
mbedés_x509_sig_Æg_gës


	)

2588 
	#x509_°rög_to_«mes
 
mbedés_x509_°rög_to_«mes


	)

2589 
	#x509_time
 
mbedés_x509_time


	)

2590 
	#x509_time_expúed
 
mbedés_x509_time_is_∑°


	)

2591 
	#x509_time_futuª
 
mbedés_x509_time_is_futuª


	)

2592 
	#x509_wrôe_exãnsi⁄s
 
mbedés_x509_wrôe_exãnsi⁄s


	)

2593 
	#x509_wrôe_«mes
 
mbedés_x509_wrôe_«mes


	)

2594 
	#x509_wrôe_sig
 
mbedés_x509_wrôe_sig


	)

2595 
	#x509wrôe_˚π
 
mbedés_x509wrôe_˚π


	)

2596 
	#x509wrôe_¸t_dî
 
mbedés_x509wrôe_¸t_dî


	)

2597 
	#x509wrôe_¸t_‰ì
 
mbedés_x509wrôe_¸t_‰ì


	)

2598 
	#x509wrôe_¸t_öô
 
mbedés_x509wrôe_¸t_öô


	)

2599 
	#x509wrôe_¸t_≥m
 
mbedés_x509wrôe_¸t_≥m


	)

2600 
	#x509wrôe_¸t_£t_auth‹ôy_key_idítifõr
 
mbedés_x509wrôe_¸t_£t_auth‹ôy_key_idítifõr


	)

2601 
	#x509wrôe_¸t_£t_basic_c⁄°øöts
 
mbedés_x509wrôe_¸t_£t_basic_c⁄°øöts


	)

2602 
	#x509wrôe_¸t_£t_exãnsi⁄
 
mbedés_x509wrôe_¸t_£t_exãnsi⁄


	)

2603 
	#x509wrôe_¸t_£t_issuî_key
 
mbedés_x509wrôe_¸t_£t_issuî_key


	)

2604 
	#x509wrôe_¸t_£t_issuî_«me
 
mbedés_x509wrôe_¸t_£t_issuî_«me


	)

2605 
	#x509wrôe_¸t_£t_key_ußge
 
mbedés_x509wrôe_¸t_£t_key_ußge


	)

2606 
	#x509wrôe_¸t_£t_md_Æg
 
mbedés_x509wrôe_¸t_£t_md_Æg


	)

2607 
	#x509wrôe_¸t_£t_ns_˚π_ty≥
 
mbedés_x509wrôe_¸t_£t_ns_˚π_ty≥


	)

2608 
	#x509wrôe_¸t_£t_£rül
 
mbedés_x509wrôe_¸t_£t_£rül


	)

2609 
	#x509wrôe_¸t_£t_subje˘_key
 
mbedés_x509wrôe_¸t_£t_subje˘_key


	)

2610 
	#x509wrôe_¸t_£t_subje˘_key_idítifõr
 
mbedés_x509wrôe_¸t_£t_subje˘_key_idítifõr


	)

2611 
	#x509wrôe_¸t_£t_subje˘_«me
 
mbedés_x509wrôe_¸t_£t_subje˘_«me


	)

2612 
	#x509wrôe_¸t_£t_vÆidôy
 
mbedés_x509wrôe_¸t_£t_vÆidôy


	)

2613 
	#x509wrôe_¸t_£t_vîsi⁄
 
mbedés_x509wrôe_¸t_£t_vîsi⁄


	)

2614 
	#x509wrôe_c§
 
mbedés_x509wrôe_c§


	)

2615 
	#x509wrôe_c§_dî
 
mbedés_x509wrôe_c§_dî


	)

2616 
	#x509wrôe_c§_‰ì
 
mbedés_x509wrôe_c§_‰ì


	)

2617 
	#x509wrôe_c§_öô
 
mbedés_x509wrôe_c§_öô


	)

2618 
	#x509wrôe_c§_≥m
 
mbedés_x509wrôe_c§_≥m


	)

2619 
	#x509wrôe_c§_£t_exãnsi⁄
 
mbedés_x509wrôe_c§_£t_exãnsi⁄


	)

2620 
	#x509wrôe_c§_£t_key
 
mbedés_x509wrôe_c§_£t_key


	)

2621 
	#x509wrôe_c§_£t_key_ußge
 
mbedés_x509wrôe_c§_£t_key_ußge


	)

2622 
	#x509wrôe_c§_£t_md_Æg
 
mbedés_x509wrôe_c§_£t_md_Æg


	)

2623 
	#x509wrôe_c§_£t_ns_˚π_ty≥
 
mbedés_x509wrôe_c§_£t_ns_˚π_ty≥


	)

2624 
	#x509wrôe_c§_£t_subje˘_«me
 
mbedés_x509wrôe_c§_£t_subje˘_«me


	)

2625 
	#xãa_c⁄ãxt
 
mbedés_xãa_c⁄ãxt


	)

2626 
	#xãa_¸y±_cbc
 
mbedés_xãa_¸y±_cbc


	)

2627 
	#xãa_¸y±_ecb
 
mbedés_xãa_¸y±_ecb


	)

2628 
	#xãa_‰ì
 
mbedés_xãa_‰ì


	)

2629 
	#xãa_öô
 
mbedés_xãa_öô


	)

2630 
	#xãa_£lf_ã°
 
mbedés_xãa_£lf_ã°


	)

2631 
	#xãa_£tup
 
mbedés_xãa_£tup


	)

	@include_lib/net/mbedtls/configs/config-ccm-psk-tls1_2.h

31 #i‚de‡
MBEDTLS_CONFIG_H


32 
	#MBEDTLS_CONFIG_H


	)

39 
	#MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


	)

40 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

43 
	#MBEDTLS_AES_C


	)

44 
	#MBEDTLS_CCM_C


	)

45 
	#MBEDTLS_CIPHER_C


	)

46 
	#MBEDTLS_CTR_DRBG_C


	)

47 
	#MBEDTLS_ENTROPY_C


	)

48 
	#MBEDTLS_MD_C


	)

49 
	#MBEDTLS_NET_C


	)

50 
	#MBEDTLS_SHA256_C


	)

51 
	#MBEDTLS_SSL_CLI_C


	)

52 
	#MBEDTLS_SSL_SRV_C


	)

53 
	#MBEDTLS_SSL_TLS_C


	)

56 
	#MBEDTLS_AES_ROM_TABLES


	)

59 
	#MBEDTLS_PSK_MAX_LEN
 16

	)

66 
	#MBEDTLS_ENTROPY_MAX_SOURCES
 2

	)

72 
	#MBEDTLS_SSL_CIPHERSUITES
 \

73 
MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8
, \

74 
MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8


	)

81 
	#MBEDTLS_SSL_MAX_CONTENT_LEN
 512

	)

83 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/mbedtls/configs/config-default.h

29 #i‚de‡
MBEDTLS_CONFIG_H


30 
	#MBEDTLS_CONFIG_H


	)

32 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
_CRT_SECURE_NO_DEPRECATE
)

33 
	#_CRT_SECURE_NO_DEPRECATE
 1

	)

57 
	#MBEDTLS_HAVE_ASM


	)

77 
	#MBEDTLS_HAVE_TIME


	)

89 
	#MBEDTLS_HAVE_TIME_DATE


	)

317 
	#MBEDTLS_CIPHER_MODE_CBC


	)

324 
	#MBEDTLS_CIPHER_MODE_CFB


	)

331 
	#MBEDTLS_CIPHER_MODE_CTR


	)

376 
	#MBEDTLS_CIPHER_PADDING_PKCS7


	)

377 
	#MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS


	)

378 
	#MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN


	)

379 
	#MBEDTLS_CIPHER_PADDING_ZEROS


	)

407 
	#MBEDTLS_REMOVE_ARC4_CIPHERSUITES


	)

417 
	#MBEDTLS_ECP_DP_SECP192R1_ENABLED


	)

418 
	#MBEDTLS_ECP_DP_SECP224R1_ENABLED


	)

419 
	#MBEDTLS_ECP_DP_SECP256R1_ENABLED


	)

420 
	#MBEDTLS_ECP_DP_SECP384R1_ENABLED


	)

421 
	#MBEDTLS_ECP_DP_SECP521R1_ENABLED


	)

422 
	#MBEDTLS_ECP_DP_SECP192K1_ENABLED


	)

423 
	#MBEDTLS_ECP_DP_SECP224K1_ENABLED


	)

424 
	#MBEDTLS_ECP_DP_SECP256K1_ENABLED


	)

425 
	#MBEDTLS_ECP_DP_BP256R1_ENABLED


	)

426 
	#MBEDTLS_ECP_DP_BP384R1_ENABLED


	)

427 
	#MBEDTLS_ECP_DP_BP512R1_ENABLED


	)

428 
	#MBEDTLS_ECP_DP_CURVE25519_ENABLED


	)

439 
	#MBEDTLS_ECP_NIST_OPTIM


	)

453 
	#MBEDTLS_ECDSA_DETERMINISTIC


	)

475 
	#MBEDTLS_KEY_EXCHANGE_PSK_ENABLED


	)

499 
	#MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED


	)

519 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED


	)

544 
	#MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED


	)

572 
	#MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


	)

598 
	#MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED


	)

623 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED


	)

647 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


	)

671 
	#MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED


	)

695 
	#MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED


	)

709 
	#MBEDTLS_PK_PARSE_EC_EXTENDED


	)

724 
	#MBEDTLS_ERROR_STRERROR_DUMMY


	)

733 
	#MBEDTLS_GENPRIME


	)

814 
	#MBEDTLS_PK_RSA_ALT_SUPPORT


	)

825 
	#MBEDTLS_PKCS1_V15


	)

836 
	#MBEDTLS_PKCS1_V21


	)

895 
	#MBEDTLS_SSL_ALL_ALERT_MESSAGES


	)

929 
	#MBEDTLS_SSL_ENCRYPT_THEN_MAC


	)

947 
	#MBEDTLS_SSL_EXTENDED_MASTER_SECRET


	)

964 
	#MBEDTLS_SSL_FALLBACK_SCSV


	)

986 
	#MBEDTLS_SSL_CBC_RECORD_SPLITTING


	)

1001 
	#MBEDTLS_SSL_RENEGOTIATION


	)

1030 
	#MBEDTLS_SSL_MAX_FRAGMENT_LENGTH


	)

1054 
	#MBEDTLS_SSL_PROTO_TLS1


	)

1066 
	#MBEDTLS_SSL_PROTO_TLS1_1


	)

1078 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

1102 
	#MBEDTLS_SSL_ALPN


	)

1117 
	#MBEDTLS_SSL_DTLS_ANTI_REPLAY


	)

1135 
	#MBEDTLS_SSL_DTLS_HELLO_VERIFY


	)

1151 
	#MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE


	)

1162 
	#MBEDTLS_SSL_DTLS_BADMAC_LIMIT


	)

1176 
	#MBEDTLS_SSL_SESSION_TICKETS


	)

1186 
	#MBEDTLS_SSL_EXPORT_KEYS


	)

1197 
	#MBEDTLS_SSL_SERVER_NAME_INDICATION


	)

1206 
	#MBEDTLS_SSL_TRUNCATED_HMAC


	)

1241 
	#MBEDTLS_VERSION_FEATURES


	)

1277 
	#MBEDTLS_X509_CHECK_KEY_USAGE


	)

1290 
	#MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE


	)

1300 
	#MBEDTLS_X509_RSASSA_PSS_SUPPORT


	)

1344 
	#MBEDTLS_AESNI_C


	)

1419 
	#MBEDTLS_AES_C


	)

1442 
	#MBEDTLS_ARC4_C


	)

1456 
	#MBEDTLS_ASN1_PARSE_C


	)

1470 
	#MBEDTLS_ASN1_WRITE_C


	)

1482 
	#MBEDTLS_BASE64_C


	)

1498 
	#MBEDTLS_BIGNUM_C


	)

1507 
	#MBEDTLS_BLOWFISH_C


	)

1562 
	#MBEDTLS_CAMELLIA_C


	)

1576 
	#MBEDTLS_CCM_C


	)

1588 
	#MBEDTLS_CERTS_C


	)

1600 
	#MBEDTLS_CIPHER_C


	)

1614 
	#MBEDTLS_CTR_DRBG_C


	)

1628 
	#MBEDTLS_DEBUG_C


	)

1654 
	#MBEDTLS_DES_C


	)

1668 
	#MBEDTLS_DHM_C


	)

1684 
	#MBEDTLS_ECDH_C


	)

1699 
	#MBEDTLS_ECDSA_C


	)

1712 
	#MBEDTLS_ECP_C


	)

1726 
	#MBEDTLS_ENTROPY_C


	)

1738 
	#MBEDTLS_ERROR_C


	)

1752 
	#MBEDTLS_GCM_C


	)

1789 
	#MBEDTLS_HMAC_DRBG_C


	)

1801 
	#MBEDTLS_MD_C


	)

1840 
	#MBEDTLS_MD5_C


	)

1867 
	#MBEDTLS_NET_C


	)

1890 
	#MBEDTLS_OID_C


	)

1904 
	#MBEDTLS_PADLOCK_C


	)

1922 
	#MBEDTLS_PEM_PARSE_C


	)

1938 
	#MBEDTLS_PEM_WRITE_C


	)

1954 
	#MBEDTLS_PK_C


	)

1969 
	#MBEDTLS_PK_PARSE_C


	)

1983 
	#MBEDTLS_PK_WRITE_C


	)

1996 
	#MBEDTLS_PKCS5_C


	)

2027 
	#MBEDTLS_PKCS12_C


	)

2047 
	#MBEDTLS_PLATFORM_C


	)

2058 
	#MBEDTLS_RIPEMD160_C


	)

2076 
	#MBEDTLS_RSA_C


	)

2092 
	#MBEDTLS_SHA1_C


	)

2109 
	#MBEDTLS_SHA256_C


	)

2124 
	#MBEDTLS_SHA512_C


	)

2136 
	#MBEDTLS_SSL_CACHE_C


	)

2146 
	#MBEDTLS_SSL_COOKIE_C


	)

2158 
	#MBEDTLS_SSL_TICKET_C


	)

2172 
	#MBEDTLS_SSL_CLI_C


	)

2202 
	#MBEDTLS_SSL_TLS_C


	)

2246 
	#MBEDTLS_VERSION_C


	)

2263 
	#MBEDTLS_X509_USE_C


	)

2279 
	#MBEDTLS_X509_CRT_PARSE_C


	)

2293 
	#MBEDTLS_X509_CRL_PARSE_C


	)

2307 
	#MBEDTLS_X509_CSR_PARSE_C


	)

2320 
	#MBEDTLS_X509_CREATE_C


	)

2333 
	#MBEDTLS_X509_CRT_WRITE_C


	)

2346 
	#MBEDTLS_X509_CSR_WRITE_C


	)

2356 
	#MBEDTLS_XTEA_C


	)

2460 #i‡
deföed
(
YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE
)

2461 #ö˛udê
YOTTA_CFG_MBEDTLS_USER_CONFIG_FILE


2462 #ñi‡
deföed
(
MBEDTLS_USER_CONFIG_FILE
)

2463 #ö˛udê
MBEDTLS_USER_CONFIG_FILE


2466 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/mbedtls/configs/config-mini-tls1_1.h

29 #i‚de‡
MBEDTLS_CONFIG_H


30 
	#MBEDTLS_CONFIG_H


	)

32 
	#MBEDTLS_DEBUG_C
 1

	)

44 
	#MBEDTLS_ERROR_C


45 

	)

55 
	#MBEDTLS_HAVE_ASM


	)

56 
	#MBEDTLS_HAVE_TIME


	)

71 
	#MBEDTLS_SSL_SESSION_TICKETS


	)

74 
	#MBEDTLS_CIPHER_MODE_CBC


	)

75 
	#MBEDTLS_PKCS1_V15


	)

76 
	#MBEDTLS_KEY_EXCHANGE_RSA_ENABLED


	)

77 
	#MBEDTLS_SSL_PROTO_TLS1


	)

78 
	#MBEDTLS_SSL_PROTO_TLS1_1


	)

79 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

82 
	#MBEDTLS_AES_C


	)

83 
	#MBEDTLS_ASN1_PARSE_C


	)

84 
	#MBEDTLS_ASN1_WRITE_C


	)

85 
	#MBEDTLS_BIGNUM_C


	)

86 
	#MBEDTLS_CIPHER_C


	)

87 
	#MBEDTLS_CTR_DRBG_C


	)

88 
	#MBEDTLS_DES_C


	)

89 
	#MBEDTLS_ENTROPY_C


	)

90 
	#MBEDTLS_MD_C


	)

91 
	#MBEDTLS_MD5_C


	)

92 
	#MBEDTLS_NET_C


	)

93 
	#MBEDTLS_OID_C


	)

94 
	#MBEDTLS_PK_C


	)

95 
	#MBEDTLS_PK_PARSE_C


	)

96 
	#MBEDTLS_RSA_C


	)

97 
	#MBEDTLS_SHA1_C


	)

98 
	#MBEDTLS_SHA256_C


	)

99 
	#MBEDTLS_SSL_CLI_C


	)

100 
	#MBEDTLS_SSL_SRV_C


101 

	)

102 
	#MBEDTLS_SSL_TICKET_C


	)

103 
	#MBEDTLS_GCM_C


	)

105 
	#MBEDTLS_SSL_CACHE_C


	)

106 
	#MBEDTLS_SSL_PROTO_DTLS


	)

107 
	#MBEDTLS_TIMING_C


	)

109 
	#MBEDTLS_SSL_COOKIE_C


	)

110 
	#MBEDTLS_SSL_DTLS_HELLO_VERIFY


	)

113 
	#MBEDTLS_SSL_TLS_C


	)

114 
	#MBEDTLS_X509_CRT_PARSE_C


	)

115 
	#MBEDTLS_X509_USE_C


	)

118 
	#MBEDTLS_BASE64_C


	)

119 
	#MBEDTLS_CERTS_C


	)

120 
	#MBEDTLS_PEM_PARSE_C


	)

125 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/mbedtls/configs/config-picocoin.h

32 #i‚de‡
MBEDTLS_CONFIG_H


33 
	#MBEDTLS_CONFIG_H


	)

36 
	#MBEDTLS_HAVE_ASM


	)

37 
	#MBEDTLS_HAVE_TIME


	)

40 
	#MBEDTLS_CIPHER_MODE_CBC


	)

41 
	#MBEDTLS_CIPHER_PADDING_PKCS7


	)

42 
	#MBEDTLS_ECP_DP_SECP256K1_ENABLED


	)

43 
	#MBEDTLS_ECDSA_DETERMINISTIC


	)

44 
	#MBEDTLS_PK_PARSE_EC_EXTENDED


	)

45 
	#MBEDTLS_ERROR_STRERROR_DUMMY


	)

46 
	#MBEDTLS_FS_IO


	)

49 
	#MBEDTLS_AESNI_C


	)

50 
	#MBEDTLS_AES_C


	)

51 
	#MBEDTLS_ASN1_PARSE_C


	)

52 
	#MBEDTLS_ASN1_WRITE_C


	)

53 
	#MBEDTLS_BASE64_C


	)

54 
	#MBEDTLS_BIGNUM_C


	)

55 
	#MBEDTLS_ECDSA_C


	)

56 
	#MBEDTLS_ECP_C


	)

57 
	#MBEDTLS_ENTROPY_C


	)

58 
	#MBEDTLS_HMAC_DRBG_C


	)

59 
	#MBEDTLS_MD_C


	)

60 
	#MBEDTLS_OID_C


	)

61 
	#MBEDTLS_PADLOCK_C


	)

62 
	#MBEDTLS_PK_C


	)

63 
	#MBEDTLS_PK_PARSE_C


	)

64 
	#MBEDTLS_PK_WRITE_C


	)

65 
	#MBEDTLS_RIPEMD160_C


	)

66 
	#MBEDTLS_SHA1_C


	)

67 
	#MBEDTLS_SHA256_C


	)

69 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/mbedtls/configs/config-suite-b.h

35 #i‚de‡
MBEDTLS_CONFIG_H


36 
	#MBEDTLS_CONFIG_H


	)

39 
	#MBEDTLS_HAVE_ASM


	)

40 
	#MBEDTLS_HAVE_TIME


	)

43 
	#MBEDTLS_ECP_DP_SECP256R1_ENABLED


	)

44 
	#MBEDTLS_ECP_DP_SECP384R1_ENABLED


	)

45 
	#MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED


	)

46 
	#MBEDTLS_SSL_PROTO_TLS1_2


	)

49 
	#MBEDTLS_AES_C


	)

50 
	#MBEDTLS_ASN1_PARSE_C


	)

51 
	#MBEDTLS_ASN1_WRITE_C


	)

52 
	#MBEDTLS_BIGNUM_C


	)

53 
	#MBEDTLS_CIPHER_C


	)

54 
	#MBEDTLS_CTR_DRBG_C


	)

55 
	#MBEDTLS_ECDH_C


	)

56 
	#MBEDTLS_ECDSA_C


	)

57 
	#MBEDTLS_ECP_C


	)

58 
	#MBEDTLS_ENTROPY_C


	)

59 
	#MBEDTLS_GCM_C


	)

60 
	#MBEDTLS_MD_C


	)

61 
	#MBEDTLS_NET_C


	)

62 
	#MBEDTLS_OID_C


	)

63 
	#MBEDTLS_PK_C


	)

64 
	#MBEDTLS_PK_PARSE_C


	)

65 
	#MBEDTLS_SHA256_C


	)

66 
	#MBEDTLS_SHA512_C


	)

67 
	#MBEDTLS_SSL_CLI_C


	)

68 
	#MBEDTLS_SSL_SRV_C


	)

69 
	#MBEDTLS_SSL_TLS_C


	)

70 
	#MBEDTLS_X509_CRT_PARSE_C


	)

71 
	#MBEDTLS_X509_USE_C


	)

74 
	#MBEDTLS_BASE64_C


	)

75 
	#MBEDTLS_CERTS_C


	)

76 
	#MBEDTLS_PEM_PARSE_C


	)

79 
	#MBEDTLS_AES_ROM_TABLES


	)

82 
	#MBEDTLS_ECP_MAX_BITS
 384

	)

83 
	#MBEDTLS_MPI_MAX_SIZE
 48

84 

	)

86 
	#MBEDTLS_ECP_WINDOW_SIZE
 2

	)

87 
	#MBEDTLS_ECP_FIXED_POINT_OPTIM
 0

	)

90 
	#MBEDTLS_ECP_NIST_OPTIM


	)

97 
	#MBEDTLS_ENTROPY_MAX_SOURCES
 2

	)

100 
	#MBEDTLS_SSL_CIPHERSUITES
 \

101 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
, \

102 
MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256


	)

110 
	#MBEDTLS_SSL_MAX_CONTENT_LEN
 1024

	)

112 
	~"mbedés/check_c⁄fig.h
"

	@include_lib/net/mbedtls/ctr_drbg.h

23 #i‚de‡
MBEDTLS_CTR_DRBG_H


24 
	#MBEDTLS_CTR_DRBG_H


	)

26 
	~"´s.h
"

28 #i‡
deföed
(
MBEDTLS_THREADING_C
)

29 
	~"mbedés/thªadög.h
"

32 
	#MBEDTLS_ERR_CTR_DRBG_ENTROPY_SOURCE_FAILED
 -0x0034

	)

33 
	#MBEDTLS_ERR_CTR_DRBG_REQUEST_TOO_BIG
 -0x0036

	)

34 
	#MBEDTLS_ERR_CTR_DRBG_INPUT_TOO_BIG
 -0x0038

	)

35 
	#MBEDTLS_ERR_CTR_DRBG_FILE_IO_ERROR
 -0x003A

	)

37 
	#MBEDTLS_CTR_DRBG_BLOCKSIZE
 16

	)

38 
	#MBEDTLS_CTR_DRBG_KEYSIZE
 32

	)

39 
	#MBEDTLS_CTR_DRBG_KEYBITS
 ( 
MBEDTLS_CTR_DRBG_KEYSIZE
 * 8 )

	)

40 
	#MBEDTLS_CTR_DRBG_SEEDLEN
 ( 
MBEDTLS_CTR_DRBG_KEYSIZE
 + 
MBEDTLS_CTR_DRBG_BLOCKSIZE
 )

	)

51 #i‡!
deföed
(
MBEDTLS_CTR_DRBG_ENTROPY_LEN
)

52 #i‡
deföed
(
MBEDTLS_SHA512_C
Ë&& !deföed(
MBEDTLS_ENTROPY_FORCE_SHA256
)

53 
	#MBEDTLS_CTR_DRBG_ENTROPY_LEN
 48

	)

55 
	#MBEDTLS_CTR_DRBG_ENTROPY_LEN
 32

	)

59 #i‡!
deföed
(
MBEDTLS_CTR_DRBG_RESEED_INTERVAL
)

60 
	#MBEDTLS_CTR_DRBG_RESEED_INTERVAL
 10000

	)

63 #i‡!
deföed
(
MBEDTLS_CTR_DRBG_MAX_INPUT
)

64 
	#MBEDTLS_CTR_DRBG_MAX_INPUT
 256

	)

67 #i‡!
deföed
(
MBEDTLS_CTR_DRBG_MAX_REQUEST
)

68 
	#MBEDTLS_CTR_DRBG_MAX_REQUEST
 1024

	)

71 #i‡!
deföed
(
MBEDTLS_CTR_DRBG_MAX_SEED_INPUT
)

72 
	#MBEDTLS_CTR_DRBG_MAX_SEED_INPUT
 384

	)

77 
	#MBEDTLS_CTR_DRBG_PR_OFF
 0

	)

78 
	#MBEDTLS_CTR_DRBG_PR_ON
 1

	)

80 #ifde‡
__˝lu•lus


88 
cou¡î
[16];

89 
ª£ed_cou¡î
;

90 
¥edi˘i⁄_ªsi°™˚
;

92 
size_t
 
íå›y_Àn
;

94 
ª£ed_öãrvÆ
;

96 
mbedés_´s_c⁄ãxt
 
´s_˘x
;

101 (*
f_íå›y
)(*, *, 
size_t
);

103 *
p_íå›y
;

105 #i‡
deföed
(
MBEDTLS_THREADING_C
)

106 
mbedés_thªadög_muãx_t
 
muãx
;

109 
	tmbedés_˘r_drbg_c⁄ãxt
;

118 
mbedés_˘r_drbg_öô
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
);

138 
mbedés_˘r_drbg_£ed
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

139 (*
f_íå›y
)(*, *, 
size_t
),

140 *
p_íå›y
,

141 c⁄° *
cu°om
,

142 
size_t
 
Àn
);

149 
mbedés_˘r_drbg_‰ì
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
);

160 
mbedés_˘r_drbg_£t_¥edi˘i⁄_ªsi°™˚
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

161 
ªsi°™˚
);

170 
mbedés_˘r_drbg_£t_íå›y_Àn
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

171 
size_t
 
Àn
);

180 
mbedés_˘r_drbg_£t_ª£ed_öãrvÆ
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

181 
öãrvÆ
);

193 
mbedés_˘r_drbg_ª£ed
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

194 c⁄° *
addôi⁄Æ
, 
size_t
 
Àn
);

207 
mbedés_˘r_drbg_upd©e
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
,

208 c⁄° *
addôi⁄Æ
, 
size_t
 
add_Àn
);

225 
mbedés_˘r_drbg_øndom_wôh_add
(*
p_∫g
,

226 *
ouçut
, 
size_t
 
ouçut_Àn
,

227 c⁄° *
addôi⁄Æ
, 
size_t
 
add_Àn
);

242 
mbedés_˘r_drbg_øndom
(*
p_∫g
,

243 *
ouçut
, 
size_t
 
ouçut_Àn
);

245 #i‡
deföed
(
MBEDTLS_FS_IO
)

256 
mbedés_˘r_drbg_wrôe_£ed_fûe
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

270 
mbedés_˘r_drbg_upd©e_£ed_fûe
(
mbedés_˘r_drbg_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

278 
mbedés_˘r_drbg_£lf_ã°
(
vîbo£
);

281 
mbedés_˘r_drbg_£ed_íå›y_Àn
(
mbedés_˘r_drbg_c⁄ãxt
 *,

282 (*)(*, *, 
size_t
), *,

283 c⁄° *, 
size_t
, size_t);

285 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/debug.h

23 #i‚de‡
MBEDTLS_DEBUG_H


24 
	#MBEDTLS_DEBUG_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"s¶.h
"

34 #i‡
deföed
(
MBEDTLS_ECP_C
)

35 
	~"e˝.h
"

38 #i‡
deföed
(
MBEDTLS_DEBUG_C
)

40 
	#MBEDTLS_DEBUG_STRIP_PARENS
–... ) 
__VA_ARGS__


	)

42 
	#MBEDTLS_SSL_DEBUG_MSG
–
Àvñ
, 
¨gs
 ) \

43 
	`mbedés_debug_¥öt_msg
–
Àvñ
 , \

44 
MBEDTLS_DEBUG_STRIP_PARENS
 
¨gs
 )

	)

46 
	#MBEDTLS_SSL_DEBUG_RET
–
Àvñ
, 
ãxt
, 
ªt
 ) \

47 
	`mbedés_debug_¥öt_ªt
–
s¶
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
ãxt
, 
ªt
 )

	)

49 
	#MBEDTLS_SSL_DEBUG_BUF
–
Àvñ
, 
ãxt
, 
buf
, 
Àn
 ) \

50 
	`mbedés_debug_¥öt_buf
–
s¶
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
ãxt
, 
buf
, 
Àn
 )

	)

52 #i‡
deföed
(
MBEDTLS_BIGNUM_C
)

53 
	#MBEDTLS_SSL_DEBUG_MPI
–
Àvñ
, 
ãxt
, 
X
 ) \

54 
	`mbedés_debug_¥öt_mpi
–
s¶
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
ãxt
, 
X
 )

	)

57 #i‡
deföed
(
MBEDTLS_ECP_C
)

58 
	#MBEDTLS_SSL_DEBUG_ECP
–
Àvñ
, 
ãxt
, 
X
 ) \

59 
	`mbedés_debug_¥öt_e˝
–
s¶
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
ãxt
, 
X
 )

	)

62 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

63 
	#MBEDTLS_SSL_DEBUG_CRT
–
Àvñ
, 
ãxt
, 
¸t
 ) \

64 
	`mbedés_debug_¥öt_¸t
–
s¶
, 
Àvñ
, 
__FILE__
, 
__LINE__
, 
ãxt
, 
¸t
 )

	)

69 
	#MBEDTLS_SSL_DEBUG_MSG
–
Àvñ
, 
¨gs
 ) dÿ{ }  0 )

	)

70 
	#MBEDTLS_SSL_DEBUG_RET
–
Àvñ
, 
ãxt
, 
ªt
 ) dÿ{ }  0 )

	)

71 
	#MBEDTLS_SSL_DEBUG_BUF
–
Àvñ
, 
ãxt
, 
buf
, 
Àn
 ) dÿ{ }  0 )

	)

72 
	#MBEDTLS_SSL_DEBUG_MPI
–
Àvñ
, 
ãxt
, 
X
 ) dÿ{ }  0 )

	)

73 
	#MBEDTLS_SSL_DEBUG_ECP
–
Àvñ
, 
ãxt
, 
X
 ) dÿ{ }  0 )

	)

74 
	#MBEDTLS_SSL_DEBUG_CRT
–
Àvñ
, 
ãxt
, 
¸t
 ) dÿ{ }  0 )

	)

78 #ifde‡
__˝lu•lus


97 
mbedés_debug_£t_thªshﬁd
(
thªshﬁd
);

117 
mbedés_debug_¥öt_msg
(
Àvñ
, c⁄° *
f‹m©
, ...);

134 
mbedés_debug_¥öt_ªt
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
Àvñ
,

135 c⁄° *
fûe
, 
löe
,

136 c⁄° *
ãxt
, 
ªt
);

155 
mbedés_debug_¥öt_buf
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
Àvñ
,

156 c⁄° *
fûe
, 
löe
, c⁄° *
ãxt
,

157 c⁄° *
buf
, 
size_t
 
Àn
);

159 #i‡
deföed
(
MBEDTLS_BIGNUM_C
)

176 
mbedés_debug_¥öt_mpi
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
Àvñ
,

177 c⁄° *
fûe
, 
löe
,

178 c⁄° *
ãxt
, c⁄° 
mbedés_mpi
 *
X
);

181 #i‡
deföed
(
MBEDTLS_ECP_C
)

198 
mbedés_debug_¥öt_e˝
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
Àvñ
,

199 c⁄° *
fûe
, 
löe
,

200 c⁄° *
ãxt
, c⁄° 
mbedés_e˝_poöt
 *
X
);

203 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

219 
mbedés_debug_¥öt_¸t
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
Àvñ
,

220 c⁄° *
fûe
, 
löe
,

221 c⁄° *
ãxt
, c⁄° 
mbedés_x509_¸t
 *
¸t
);

224 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/des.h

23 #i‚de‡
MBEDTLS_DES_H


24 
	#MBEDTLS_DES_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 
	#MBEDTLS_DES_ENCRYPT
 1

	)

36 
	#MBEDTLS_DES_DECRYPT
 0

	)

38 
	#MBEDTLS_ERR_DES_INVALID_INPUT_LENGTH
 -0x0032

	)

40 
	#MBEDTLS_DES_KEY_SIZE
 8

	)

42 #i‡!
deföed
(
MBEDTLS_DES_ALT
)

46 #ifde‡
__˝lu•lus


54 
uöt32_t
 
sk
[32];

56 
	tmbedés_des_c⁄ãxt
;

62 
uöt32_t
 
sk
[96];

64 
	tmbedés_des3_c⁄ãxt
;

71 
mbedés_des_öô
(
mbedés_des_c⁄ãxt
 *
˘x
);

78 
mbedés_des_‰ì
(
mbedés_des_c⁄ãxt
 *
˘x
);

85 
mbedés_des3_öô
(
mbedés_des3_c⁄ãxt
 *
˘x
);

92 
mbedés_des3_‰ì
(
mbedés_des3_c⁄ãxt
 *
˘x
);

102 
mbedés_des_key_£t_∑rôy
(
key
[
MBEDTLS_DES_KEY_SIZE
]);

114 
mbedés_des_key_check_key_∑rôy
(c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
]);

123 
mbedés_des_key_check_wók
(c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
]);

133 
mbedés_des_£tkey_íc
(
mbedés_des_c⁄ãxt
 *
˘x
, c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
]);

143 
mbedés_des_£tkey_dec
(
mbedés_des_c⁄ãxt
 *
˘x
, c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
]);

153 
mbedés_des3_£t2key_íc
(
mbedés_des3_c⁄ãxt
 *
˘x
,

154 c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
 * 2]);

164 
mbedés_des3_£t2key_dec
(
mbedés_des3_c⁄ãxt
 *
˘x
,

165 c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
 * 2]);

175 
mbedés_des3_£t3key_íc
(
mbedés_des3_c⁄ãxt
 *
˘x
,

176 c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
 * 3]);

186 
mbedés_des3_£t3key_dec
(
mbedés_des3_c⁄ãxt
 *
˘x
,

187 c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
 * 3]);

198 
mbedés_des_¸y±_ecb
(
mbedés_des_c⁄ãxt
 *
˘x
,

199 c⁄° 
öput
[8],

200 
ouçut
[8]);

202 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

221 
mbedés_des_¸y±_cbc
(
mbedés_des_c⁄ãxt
 *
˘x
,

222 
mode
,

223 
size_t
 
Àngth
,

224 
iv
[8],

225 c⁄° *
öput
,

226 *
ouçut
);

238 
mbedés_des3_¸y±_ecb
(
mbedés_des3_c⁄ãxt
 *
˘x
,

239 c⁄° 
öput
[8],

240 
ouçut
[8]);

242 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

263 
mbedés_des3_¸y±_cbc
(
mbedés_des3_c⁄ãxt
 *
˘x
,

264 
mode
,

265 
size_t
 
Àngth
,

266 
iv
[8],

267 c⁄° *
öput
,

268 *
ouçut
);

279 
mbedés_des_£tkey
(
uöt32_t
 
SK
[32],

280 c⁄° 
key
[
MBEDTLS_DES_KEY_SIZE
]);

281 #ifde‡
__˝lu•lus


286 
	~"des_Æt.h
"

289 #ifde‡
__˝lu•lus


298 
mbedés_des_£lf_ã°
(
vîbo£
);

300 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/dhm.h

23 #i‚de‡
MBEDTLS_DHM_H


24 
	#MBEDTLS_DHM_H


	)

26 
	~"bignum.h
"

31 
	#MBEDTLS_ERR_DHM_BAD_INPUT_DATA
 -0x3080

	)

32 
	#MBEDTLS_ERR_DHM_READ_PARAMS_FAILED
 -0x3100

	)

33 
	#MBEDTLS_ERR_DHM_MAKE_PARAMS_FAILED
 -0x3180

	)

34 
	#MBEDTLS_ERR_DHM_READ_PUBLIC_FAILED
 -0x3200

	)

35 
	#MBEDTLS_ERR_DHM_MAKE_PUBLIC_FAILED
 -0x3280

	)

36 
	#MBEDTLS_ERR_DHM_CALC_SECRET_FAILED
 -0x3300

	)

37 
	#MBEDTLS_ERR_DHM_INVALID_FORMAT
 -0x3380

	)

38 
	#MBEDTLS_ERR_DHM_ALLOC_FAILED
 -0x3400

	)

39 
	#MBEDTLS_ERR_DHM_FILE_IO_ERROR
 -0x3480

	)

55 
	#MBEDTLS_DHM_RFC3526_MODP_2048_P
 \

66 "15728E5A8AACAA68FFFFFFFFFFFFFFFF"

	)

68 
	#MBEDTLS_DHM_RFC3526_MODP_2048_G
 "02"

	)

70 
	#MBEDTLS_DHM_RFC3526_MODP_3072_P
 \

86 "43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF"

	)

88 
	#MBEDTLS_DHM_RFC3526_MODP_3072_G
 "02"

	)

90 
	#MBEDTLS_DHM_RFC3526_MODP_4096_P
 \

112 "FFFFFFFFFFFFFFFF"

	)

114 
	#MBEDTLS_DHM_RFC3526_MODP_4096_G
 "02"

	)

116 
	#MBEDTLS_DHM_RFC5114_MODP_2048_P
 \

127 "CF9DE5384E71B81C0AC4DFFE0C10E64F"

	)

129 
	#MBEDTLS_DHM_RFC5114_MODP_2048_G
 \

140 "81BC087F2A7065B384B890D3191F2BFA"

	)

142 #ifde‡
__˝lu•lus


150 
size_t
 
Àn
;

151 
mbedés_mpi
 
P
;

152 
mbedés_mpi
 
G
;

153 
mbedés_mpi
 
X
;

154 
mbedés_mpi
 
GX
;

155 
mbedés_mpi
 
GY
;

156 
mbedés_mpi
 
K
;

157 
mbedés_mpi
 
RP
;

158 
mbedés_mpi
 
Vi
;

159 
mbedés_mpi
 
Vf
;

160 
mbedés_mpi
 
pX
;

162 
	tmbedés_dhm_c⁄ãxt
;

169 
mbedés_dhm_öô
(
mbedés_dhm_c⁄ãxt
 *
˘x
);

180 
mbedés_dhm_ªad_∑øms
(
mbedés_dhm_c⁄ãxt
 *
˘x
,

181 **
p
,

182 c⁄° *
íd
);

200 
mbedés_dhm_make_∑øms
(
mbedés_dhm_c⁄ãxt
 *
˘x
, 
x_size
,

201 *
ouçut
, 
size_t
 *
ﬁí
,

202 (*
f_∫g
)(*, *, 
size_t
),

203 *
p_∫g
);

214 
mbedés_dhm_ªad_public
(
mbedés_dhm_c⁄ãxt
 *
˘x
,

215 c⁄° *
öput
, 
size_t
 
ûí
);

229 
mbedés_dhm_make_public
(
mbedés_dhm_c⁄ãxt
 *
˘x
, 
x_size
,

230 *
ouçut
, 
size_t
 
ﬁí
,

231 (*
f_∫g
)(*, *, 
size_t
),

232 *
p_∫g
);

252 
mbedés_dhm_ˇlc_£¸ë
(
mbedés_dhm_c⁄ãxt
 *
˘x
,

253 *
ouçut
, 
size_t
 
ouçut_size
, size_à*
ﬁí
,

254 (*
f_∫g
)(*, *, 
size_t
),

255 *
p_∫g
);

262 
mbedés_dhm_‰ì
(
mbedés_dhm_c⁄ãxt
 *
˘x
);

264 #i‡
deföed
(
MBEDTLS_ASN1_PARSE_C
)

276 
mbedés_dhm_∑r£_dhm
(
mbedés_dhm_c⁄ãxt
 *
dhm
, c⁄° *
dhmö
,

277 
size_t
 
dhmöÀn
);

279 #i‡
deföed
(
MBEDTLS_FS_IO
)

289 
mbedés_dhm_∑r£_dhmfûe
(
mbedés_dhm_c⁄ãxt
 *
dhm
, c⁄° *
∑th
);

298 
mbedés_dhm_£lf_ã°
(
vîbo£
);

300 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ecdh.h

23 #i‚de‡
MBEDTLS_ECDH_H


24 
	#MBEDTLS_ECDH_H


	)

26 
	~"e˝.h
"

28 #ifde‡
__˝lu•lus


36 
MBEDTLS_ECDH_OURS
,

37 
MBEDTLS_ECDH_THEIRS
,

38 } 
	tmbedés_ecdh_side
;

44 
mbedés_e˝_group
 
gΩ
;

45 
mbedés_mpi
 
d
;

46 
mbedés_e˝_poöt
 
Q
;

47 
mbedés_e˝_poöt
 
Qp
;

48 
mbedés_mpi
 
z
;

49 
poöt_f‹m©
;

50 
mbedés_e˝_poöt
 
Vi
;

51 
mbedés_e˝_poöt
 
Vf
;

52 
mbedés_mpi
 
_d
;

54 
	tmbedés_ecdh_c⁄ãxt
;

69 
mbedés_ecdh_gí_public
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_mpi
 *
d
, 
mbedés_e˝_poöt
 *
Q
,

70 (*
f_∫g
)(*, *, 
size_t
),

71 *
p_∫g
);

91 
mbedés_ecdh_compuã_sh¨ed
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_mpi
 *
z
,

92 c⁄° 
mbedés_e˝_poöt
 *
Q
, c⁄° 
mbedés_mpi
 *
d
,

93 (*
f_∫g
)(*, *, 
size_t
),

94 *
p_∫g
);

101 
mbedés_ecdh_öô
(
mbedés_ecdh_c⁄ãxt
 *
˘x
);

108 
mbedés_ecdh_‰ì
(
mbedés_ecdh_c⁄ãxt
 *
˘x
);

126 
mbedés_ecdh_make_∑øms
(
mbedés_ecdh_c⁄ãxt
 *
˘x
, 
size_t
 *
ﬁí
,

127 *
buf
, 
size_t
 
bÀn
,

128 (*
f_∫g
)(*, *, 
size_t
),

129 *
p_∫g
);

141 
mbedés_ecdh_ªad_∑øms
(
mbedés_ecdh_c⁄ãxt
 *
˘x
,

142 c⁄° **
buf
, c⁄° *
íd
);

156 
mbedés_ecdh_gë_∑øms
(
mbedés_ecdh_c⁄ãxt
 *
˘x
, c⁄° 
mbedés_e˝_key∑ú
 *
key
,

157 
mbedés_ecdh_side
 
side
);

172 
mbedés_ecdh_make_public
(
mbedés_ecdh_c⁄ãxt
 *
˘x
, 
size_t
 *
ﬁí
,

173 *
buf
, 
size_t
 
bÀn
,

174 (*
f_∫g
)(*, *, 
size_t
),

175 *
p_∫g
);

187 
mbedés_ecdh_ªad_public
(
mbedés_ecdh_c⁄ãxt
 *
˘x
,

188 c⁄° *
buf
, 
size_t
 
bÀn
);

203 
mbedés_ecdh_ˇlc_£¸ë
(
mbedés_ecdh_c⁄ãxt
 *
˘x
, 
size_t
 *
ﬁí
,

204 *
buf
, 
size_t
 
bÀn
,

205 (*
f_∫g
)(*, *, 
size_t
),

206 *
p_∫g
);

208 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ecdsa.h

23 #i‚de‡
MBEDTLS_ECDSA_H


24 
	#MBEDTLS_ECDSA_H


	)

26 
	~"e˝.h
"

27 
	~"md.h
"

43 #i‡
MBEDTLS_ECP_MAX_BYTES
 > 124

47 
	#MBEDTLS_ECDSA_MAX_LEN
 ( 3 + 2 * ( 3 + 
MBEDTLS_ECP_MAX_BYTES
 ) )

	)

52 
mbedés_e˝_key∑ú
 
	tmbedés_ecdß_c⁄ãxt
;

54 #ifde‡
__˝lu•lus


75 
mbedés_ecdß_sign
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_mpi
 *
r
, mbedés_mpò*
s
,

76 c⁄° 
mbedés_mpi
 *
d
, c⁄° *
buf
, 
size_t
 
bÀn
,

77 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

79 #i‡
deföed
(
MBEDTLS_ECDSA_DETERMINISTIC
)

95 
mbedés_ecdß_sign_dë
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_mpi
 *
r
, mbedés_mpò*
s
,

96 c⁄° 
mbedés_mpi
 *
d
, c⁄° *
buf
, 
size_t
 
bÀn
,

97 
mbedés_md_ty≥_t
 
md_Æg
);

114 
mbedés_ecdß_vîify
(
mbedés_e˝_group
 *
gΩ
,

115 c⁄° *
buf
, 
size_t
 
bÀn
,

116 c⁄° 
mbedés_e˝_poöt
 *
Q
, c⁄° 
mbedés_mpi
 *
r
, c⁄° mbedés_mpò*
s
);

143 
mbedés_ecdß_wrôe_sig«tuª
(
mbedés_ecdß_c⁄ãxt
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
,

144 c⁄° *
hash
, 
size_t
 
hÀn
,

145 *
sig
, 
size_t
 *
¶í
,

146 (*
f_∫g
)(*, *, 
size_t
),

147 *
p_∫g
);

149 #i‡
deföed
(
MBEDTLS_ECDSA_DETERMINISTIC
)

150 #i‡! 
deföed
(
MBEDTLS_DEPRECATED_REMOVED
)

151 #i‡
deföed
(
MBEDTLS_DEPRECATED_WARNING
)

152 
	#MBEDTLS_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

154 
	#MBEDTLS_DEPRECATED


	)

179 
mbedés_ecdß_wrôe_sig«tuª_dë
(
mbedés_ecdß_c⁄ãxt
 *
˘x
,

180 c⁄° *
hash
, 
size_t
 
hÀn
,

181 *
sig
, 
size_t
 *
¶í
,

182 
mbedés_md_ty≥_t
 
md_Æg
Ë
MBEDTLS_DEPRECATED
;

183 #unde‡
MBEDTLS_DEPRECATED


202 
mbedés_ecdß_ªad_sig«tuª
(
mbedés_ecdß_c⁄ãxt
 *
˘x
,

203 c⁄° *
hash
, 
size_t
 
hÀn
,

204 c⁄° *
sig
, 
size_t
 
¶í
);

217 
mbedés_ecdß_gíkey
(
mbedés_ecdß_c⁄ãxt
 *
˘x
, 
mbedés_e˝_group_id
 
gid
,

218 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

228 
mbedés_ecdß_‰om_key∑ú
(
mbedés_ecdß_c⁄ãxt
 *
˘x
, c⁄° 
mbedés_e˝_key∑ú
 *
key
);

235 
mbedés_ecdß_öô
(
mbedés_ecdß_c⁄ãxt
 *
˘x
);

242 
mbedés_ecdß_‰ì
(
mbedés_ecdß_c⁄ãxt
 *
˘x
);

244 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ecjpake.h

23 #i‚de‡
MBEDTLS_ECJPAKE_H


24 
	#MBEDTLS_ECJPAKE_H


	)

43 
	~"e˝.h
"

44 
	~"md.h
"

46 #ifde‡
__˝lu•lus


54 
MBEDTLS_ECJPAKE_CLIENT
 = 0,

55 
MBEDTLS_ECJPAKE_SERVER
,

56 } 
	tmbedés_ecj∑ke_rﬁe
;

70 c⁄° 
mbedés_md_öfo_t
 *
md_öfo
;

71 
mbedés_e˝_group
 
gΩ
;

72 
mbedés_ecj∑ke_rﬁe
 
rﬁe
;

73 
poöt_f‹m©
;

75 
mbedés_e˝_poöt
 
Xm1
;

76 
mbedés_e˝_poöt
 
Xm2
;

77 
mbedés_e˝_poöt
 
Xp1
;

78 
mbedés_e˝_poöt
 
Xp2
;

79 
mbedés_e˝_poöt
 
Xp
;

81 
mbedés_mpi
 
xm1
;

82 
mbedés_mpi
 
xm2
;

84 
mbedés_mpi
 
s
;

85 } 
	tmbedés_ecj∑ke_c⁄ãxt
;

93 
mbedés_ecj∑ke_öô
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
);

111 
mbedés_ecj∑ke_£tup
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

112 
mbedés_ecj∑ke_rﬁe
 
rﬁe
,

113 
mbedés_md_ty≥_t
 
hash
,

114 
mbedés_e˝_group_id
 
curve
,

115 c⁄° *
£¸ë
,

116 
size_t
 
Àn
);

126 
mbedés_ecj∑ke_check
(c⁄° 
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
);

143 
mbedés_ecj∑ke_wrôe_round_⁄e
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

144 *
buf
, 
size_t
 
Àn
, size_à*
ﬁí
,

145 (*
f_∫g
)(*, *, 
size_t
),

146 *
p_∫g
);

160 
mbedés_ecj∑ke_ªad_round_⁄e
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

161 c⁄° *
buf
,

162 
size_t
 
Àn
);

178 
mbedés_ecj∑ke_wrôe_round_two
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

179 *
buf
, 
size_t
 
Àn
, size_à*
ﬁí
,

180 (*
f_∫g
)(*, *, 
size_t
),

181 *
p_∫g
);

194 
mbedés_ecj∑ke_ªad_round_two
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

195 c⁄° *
buf
,

196 
size_t
 
Àn
);

212 
mbedés_ecj∑ke_dîive_£¸ë
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
,

213 *
buf
, 
size_t
 
Àn
, size_à*
ﬁí
,

214 (*
f_∫g
)(*, *, 
size_t
),

215 *
p_∫g
);

222 
mbedés_ecj∑ke_‰ì
(
mbedés_ecj∑ke_c⁄ãxt
 *
˘x
);

224 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

230 
mbedés_ecj∑ke_£lf_ã°
(
vîbo£
);

233 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ecp.h

23 #i‚de‡
MBEDTLS_ECP_H


24 
	#MBEDTLS_ECP_H


	)

26 
	~"bignum.h
"

31 
	#MBEDTLS_ERR_ECP_BAD_INPUT_DATA
 -0x4F80

	)

32 
	#MBEDTLS_ERR_ECP_BUFFER_TOO_SMALL
 -0x4F00

	)

33 
	#MBEDTLS_ERR_ECP_FEATURE_UNAVAILABLE
 -0x4E80

	)

34 
	#MBEDTLS_ERR_ECP_VERIFY_FAILED
 -0x4E00

	)

35 
	#MBEDTLS_ERR_ECP_ALLOC_FAILED
 -0x4D80

	)

36 
	#MBEDTLS_ERR_ECP_RANDOM_FAILED
 -0x4D00

	)

37 
	#MBEDTLS_ERR_ECP_INVALID_KEY
 -0x4C80

	)

38 
	#MBEDTLS_ERR_ECP_SIG_LEN_MISMATCH
 -0x4C00

	)

40 #ifde‡
__˝lu•lus


54 
MBEDTLS_ECP_DP_NONE
 = 0,

55 
MBEDTLS_ECP_DP_SECP192R1
,

56 
MBEDTLS_ECP_DP_SECP224R1
,

57 
MBEDTLS_ECP_DP_SECP256R1
,

58 
MBEDTLS_ECP_DP_SECP384R1
,

59 
MBEDTLS_ECP_DP_SECP521R1
,

60 
MBEDTLS_ECP_DP_BP256R1
,

61 
MBEDTLS_ECP_DP_BP384R1
,

62 
MBEDTLS_ECP_DP_BP512R1
,

63 
MBEDTLS_ECP_DP_CURVE25519
,

64 
MBEDTLS_ECP_DP_SECP192K1
,

65 
MBEDTLS_ECP_DP_SECP224K1
,

66 
MBEDTLS_ECP_DP_SECP256K1
,

67 } 
	tmbedés_e˝_group_id
;

74 
	#MBEDTLS_ECP_DP_MAX
 12

	)

80 
mbedés_e˝_group_id
 
gΩ_id
;

81 
uöt16_t
 
és_id
;

82 
uöt16_t
 
bô_size
;

83 c⁄° *
«me
;

84 } 
	tmbedés_e˝_curve_öfo
;

96 
mbedés_mpi
 
X
;

97 
mbedés_mpi
 
Y
;

98 
mbedés_mpi
 
Z
;

100 
	tmbedés_e˝_poöt
;

127 
mbedés_e˝_group_id
 
id
;

128 
mbedés_mpi
 
P
;

129 
mbedés_mpi
 
A
;

130 
mbedés_mpi
 
B
;

131 
mbedés_e˝_poöt
 
G
;

132 
mbedés_mpi
 
N
;

133 
size_t
 
pbôs
;

134 
size_t
 
nbôs
;

135 
h
;

136 (*
modp
)(
mbedés_mpi
 *);

137 (*
t_¥e
)(
mbedés_e˝_poöt
 *, *);

138 (*
t_po°
)(
mbedés_e˝_poöt
 *, *);

139 *
t_d©a
;

140 
mbedés_e˝_poöt
 *
T
;

141 
size_t
 
T_size
;

143 
	tmbedés_e˝_group
;

153 
mbedés_e˝_group
 
gΩ
;

154 
mbedés_mpi
 
d
;

155 
mbedés_e˝_poöt
 
Q
;

157 
	tmbedés_e˝_key∑ú
;

167 #i‡!
deföed
(
MBEDTLS_ECP_MAX_BITS
)

171 
	#MBEDTLS_ECP_MAX_BITS
 521

	)

174 
	#MBEDTLS_ECP_MAX_BYTES
 ( ( 
MBEDTLS_ECP_MAX_BITS
 + 7 ) / 8 )

	)

175 
	#MBEDTLS_ECP_MAX_PT_LEN
 ( 2 * 
MBEDTLS_ECP_MAX_BYTES
 + 1 )

	)

177 #i‡!
deföed
(
MBEDTLS_ECP_WINDOW_SIZE
)

198 
	#MBEDTLS_ECP_WINDOW_SIZE
 6

	)

201 #i‡!
deföed
(
MBEDTLS_ECP_FIXED_POINT_OPTIM
)

213 
	#MBEDTLS_ECP_FIXED_POINT_OPTIM
 1

	)

221 
	#MBEDTLS_ECP_PF_UNCOMPRESSED
 0

	)

222 
	#MBEDTLS_ECP_PF_COMPRESSED
 1

	)

227 
	#MBEDTLS_ECP_TLS_NAMED_CURVE
 3

	)

235 c⁄° 
mbedés_e˝_curve_öfo
 *
mbedés_e˝_curve_li°
();

244 c⁄° 
mbedés_e˝_group_id
 *
mbedés_e˝_gΩ_id_li°
();

253 c⁄° 
mbedés_e˝_curve_öfo
 *
mbedés_e˝_curve_öfo_‰om_gΩ_id
(
mbedés_e˝_group_id
 
gΩ_id
);

262 c⁄° 
mbedés_e˝_curve_öfo
 *
mbedés_e˝_curve_öfo_‰om_és_id
(
uöt16_t
 
és_id
);

271 c⁄° 
mbedés_e˝_curve_öfo
 *
mbedés_e˝_curve_öfo_‰om_«me
(c⁄° *
«me
);

276 
mbedés_e˝_poöt_öô
(
mbedés_e˝_poöt
 *
±
);

281 
mbedés_e˝_group_öô
(
mbedés_e˝_group
 *
gΩ
);

286 
mbedés_e˝_key∑ú_öô
(
mbedés_e˝_key∑ú
 *
key
);

291 
mbedés_e˝_poöt_‰ì
(
mbedés_e˝_poöt
 *
±
);

296 
mbedés_e˝_group_‰ì
(
mbedés_e˝_group
 *
gΩ
);

301 
mbedés_e˝_key∑ú_‰ì
(
mbedés_e˝_key∑ú
 *
key
);

312 
mbedés_e˝_c›y
(
mbedés_e˝_poöt
 *
P
, c⁄° mbedés_e˝_poöà*
Q
);

323 
mbedés_e˝_group_c›y
(
mbedés_e˝_group
 *
d°
, c⁄° mbedés_e˝_grou∞*
§c
);

333 
mbedés_e˝_£t_zîo
(
mbedés_e˝_poöt
 *
±
);

342 
mbedés_e˝_is_zîo
(
mbedés_e˝_poöt
 *
±
);

356 
mbedés_e˝_poöt_cmp
(c⁄° 
mbedés_e˝_poöt
 *
P
,

357 c⁄° 
mbedés_e˝_poöt
 *
Q
);

369 
mbedés_e˝_poöt_ªad_°rög
(
mbedés_e˝_poöt
 *
P
, 
ødix
,

370 c⁄° *
x
, c⁄° *
y
);

386 
mbedés_e˝_poöt_wrôe_bö¨y
(c⁄° 
mbedés_e˝_group
 *
gΩ
, c⁄° 
mbedés_e˝_poöt
 *
P
,

387 
f‹m©
, 
size_t
 *
ﬁí
,

388 *
buf
, 
size_t
 
buÊí
);

408 
mbedés_e˝_poöt_ªad_bö¨y
(c⁄° 
mbedés_e˝_group
 *
gΩ
, 
mbedés_e˝_poöt
 *
P
,

409 c⁄° *
buf
, 
size_t
 
ûí
);

425 
mbedés_e˝_és_ªad_poöt
(c⁄° 
mbedés_e˝_group
 *
gΩ
, 
mbedés_e˝_poöt
 *
±
,

426 c⁄° **
buf
, 
size_t
 
Àn
);

442 
mbedés_e˝_és_wrôe_poöt
(c⁄° 
mbedés_e˝_group
 *
gΩ
, c⁄° 
mbedés_e˝_poöt
 *
±
,

443 
f‹m©
, 
size_t
 *
ﬁí
,

444 *
buf
, 
size_t
 
bÀn
);

459 
mbedés_e˝_group_lﬂd
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_e˝_group_id
 
ödex
);

474 
mbedés_e˝_és_ªad_group
(
mbedés_e˝_group
 *
gΩ
, c⁄° **
buf
, 
size_t
 
Àn
);

487 
mbedés_e˝_és_wrôe_group
(c⁄° 
mbedés_e˝_group
 *
gΩ
, 
size_t
 *
ﬁí
,

488 *
buf
, 
size_t
 
bÀn
);

516 
mbedés_e˝_mul
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_e˝_poöt
 *
R
,

517 c⁄° 
mbedés_mpi
 *
m
, c⁄° 
mbedés_e˝_poöt
 *
P
,

518 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

540 
mbedés_e˝_muœdd
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_e˝_poöt
 *
R
,

541 c⁄° 
mbedés_mpi
 *
m
, c⁄° 
mbedés_e˝_poöt
 *
P
,

542 c⁄° 
mbedés_mpi
 *
n
, c⁄° 
mbedés_e˝_poöt
 *
Q
);

565 
mbedés_e˝_check_pubkey
(c⁄° 
mbedés_e˝_group
 *
gΩ
, c⁄° 
mbedés_e˝_poöt
 *
±
);

580 
mbedés_e˝_check_¥ivkey
(c⁄° 
mbedés_e˝_group
 *
gΩ
, c⁄° 
mbedés_mpi
 *
d
);

599 
mbedés_e˝_gí_key∑ú_ba£
(
mbedés_e˝_group
 *
gΩ
,

600 c⁄° 
mbedés_e˝_poöt
 *
G
,

601 
mbedés_mpi
 *
d
, 
mbedés_e˝_poöt
 *
Q
,

602 (*
f_∫g
)(*, *, 
size_t
),

603 *
p_∫g
);

621 
mbedés_e˝_gí_key∑ú
(
mbedés_e˝_group
 *
gΩ
, 
mbedés_mpi
 *
d
, 
mbedés_e˝_poöt
 *
Q
,

622 (*
f_∫g
)(*, *, 
size_t
),

623 *
p_∫g
);

636 
mbedés_e˝_gí_key
(
mbedés_e˝_group_id
 
gΩ_id
, 
mbedés_e˝_key∑ú
 *
key
,

637 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

649 
mbedés_e˝_check_pub_¥iv
(c⁄° 
mbedés_e˝_key∑ú
 *
pub
, c⁄° mbedés_e˝_key∑ú *
¥v
);

651 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

657 
mbedés_e˝_£lf_ã°
(
vîbo£
);

660 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/entropy.h

23 #i‚de‡
MBEDTLS_ENTROPY_H


24 
	#MBEDTLS_ENTROPY_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

34 #i‡
deföed
(
MBEDTLS_SHA512_C
Ë&& !deföed(
MBEDTLS_ENTROPY_FORCE_SHA256
)

35 
	~"sha512.h
"

36 
	#MBEDTLS_ENTROPY_SHA512_ACCUMULATOR


	)

38 #i‡
deföed
(
MBEDTLS_SHA256_C
)

39 
	#MBEDTLS_ENTROPY_SHA256_ACCUMULATOR


	)

40 
	~"sha256.h
"

44 #i‡
deföed
(
MBEDTLS_THREADING_C
)

45 
	~"thªadög.h
"

48 #i‡
deföed
(
MBEDTLS_HAVEGE_C
)

49 
	~"havege.h
"

52 
	#MBEDTLS_ERR_ENTROPY_SOURCE_FAILED
 -0x003C

	)

53 
	#MBEDTLS_ERR_ENTROPY_MAX_SOURCES
 -0x003E

	)

54 
	#MBEDTLS_ERR_ENTROPY_NO_SOURCES_DEFINED
 -0x0040

	)

55 
	#MBEDTLS_ERR_ENTROPY_NO_STRONG_SOURCE
 -0x003D

	)

56 
	#MBEDTLS_ERR_ENTROPY_FILE_IO_ERROR
 -0x003F

	)

66 #i‡!
deföed
(
MBEDTLS_ENTROPY_MAX_SOURCES
)

67 
	#MBEDTLS_ENTROPY_MAX_SOURCES
 20

	)

70 #i‡!
deföed
(
MBEDTLS_ENTROPY_MAX_GATHER
)

71 
	#MBEDTLS_ENTROPY_MAX_GATHER
 128

	)

76 #i‡
deföed
(
MBEDTLS_ENTROPY_SHA512_ACCUMULATOR
)

77 
	#MBEDTLS_ENTROPY_BLOCK_SIZE
 64

	)

79 
	#MBEDTLS_ENTROPY_BLOCK_SIZE
 32

	)

82 
	#MBEDTLS_ENTROPY_MAX_SEED_SIZE
 1024

	)

83 
	#MBEDTLS_ENTROPY_SOURCE_MANUAL
 
MBEDTLS_ENTROPY_MAX_SOURCES


	)

85 
	#MBEDTLS_ENTROPY_SOURCE_STRONG
 1

	)

86 
	#MBEDTLS_ENTROPY_SOURCE_WEAK
 0

	)

88 #ifde‡
__˝lu•lus


103 (*
mbedés_íå›y_f_sour˚_±r
)(*
	td©a
, *
	touçut
, 
	tsize_t
 
	tÀn
,

104 
	tsize_t
 *
	tﬁí
);

110 
mbedés_íå›y_f_sour˚_±r
 
f_sour˚
;

111 *
p_sour˚
;

112 
size_t
 
size
;

113 
size_t
 
thªshﬁd
;

114 
°r⁄g
;

116 
	tmbedés_íå›y_sour˚_°©e
;

122 #i‡
deföed
(
MBEDTLS_ENTROPY_SHA512_ACCUMULATOR
)

123 
mbedés_sha512_c⁄ãxt
 
accumuœt‹
;

125 
mbedés_sha256_c⁄ãxt
 
accumuœt‹
;

127 
sour˚_cou¡
;

128 
mbedés_íå›y_sour˚_°©e
 
sour˚
[
MBEDTLS_ENTROPY_MAX_SOURCES
];

129 #i‡
deföed
(
MBEDTLS_HAVEGE_C
)

130 
mbedés_havege_°©e
 
havege_d©a
;

132 #i‡
deföed
(
MBEDTLS_THREADING_C
)

133 
mbedés_thªadög_muãx_t
 
muãx
;

135 #i‡
deföed
(
MBEDTLS_ENTROPY_NV_SEED
)

136 
öôül_íå›y_run
;

139 
	tmbedés_íå›y_c⁄ãxt
;

146 
mbedés_íå›y_öô
(
mbedés_íå›y_c⁄ãxt
 *
˘x
);

153 
mbedés_íå›y_‰ì
(
mbedés_íå›y_c⁄ãxt
 *
˘x
);

172 
mbedés_íå›y_add_sour˚
(
mbedés_íå›y_c⁄ãxt
 *
˘x
,

173 
mbedés_íå›y_f_sour˚_±r
 
f_sour˚
, *
p_sour˚
,

174 
size_t
 
thªshﬁd
, 
°r⁄g
);

184 
mbedés_íå›y_g©hî
(
mbedés_íå›y_c⁄ãxt
 *
˘x
);

197 
mbedés_íå›y_func
(*
d©a
, *
ouçut
, 
size_t
 
Àn
);

209 
mbedés_íå›y_upd©e_m™uÆ
(
mbedés_íå›y_c⁄ãxt
 *
˘x
,

210 c⁄° *
d©a
, 
size_t
 
Àn
);

212 #i‡
deföed
(
MBEDTLS_ENTROPY_NV_SEED
)

221 
mbedés_íå›y_upd©e_nv_£ed
(
mbedés_íå›y_c⁄ãxt
 *
˘x
);

224 #i‡
deföed
(
MBEDTLS_FS_IO
)

235 
mbedés_íå›y_wrôe_£ed_fûe
(
mbedés_íå›y_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

249 
mbedés_íå›y_upd©e_£ed_fûe
(
mbedés_íå›y_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

252 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

258 
mbedés_íå›y_£lf_ã°
(
vîbo£
);

261 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/entropy_poll.h

23 #i‚de‡
MBEDTLS_ENTROPY_POLL_H


24 
	#MBEDTLS_ENTROPY_POLL_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

34 #ifde‡
__˝lu•lus


41 
	#MBEDTLS_ENTROPY_MIN_PLATFORM
 32

	)

42 
	#MBEDTLS_ENTROPY_MIN_HAVEGE
 32

	)

43 
	#MBEDTLS_ENTROPY_MIN_HARDCLOCK
 4

	)

44 
	#MBEDTLS_ENTROPY_MIN_HARDWARE
 32

	)

49 #i‡
deföed
(
MBEDTLS_TEST_NULL_ENTROPY
)

50 
mbedés_nuŒ_íå›y_pﬁl
(*
d©a
,

51 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

54 #i‡!
deföed
(
MBEDTLS_NO_PLATFORM_ENTROPY
)

58 
mbedés_∂©f‹m_íå›y_pﬁl
(*
d©a
,

59 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

62 #i‡
deföed
(
MBEDTLS_HAVEGE_C
)

68 
mbedés_havege_pﬁl
(*
d©a
,

69 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

72 #i‡
deföed
(
MBEDTLS_TIMING_C
)

76 
mbedés_h¨d˛ock_pﬁl
(*
d©a
,

77 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

80 #i‡
deföed
(
MBEDTLS_ENTROPY_HARDWARE_ALT
)

89 
mbedés_h¨dw¨e_pﬁl
(*
d©a
,

90 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

93 #i‡
deföed
(
MBEDTLS_ENTROPY_NV_SEED
)

99 
mbedés_nv_£ed_pﬁl
(*
d©a
,

100 *
ouçut
, 
size_t
 
Àn
, size_à*
ﬁí
);

103 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/error.h

23 #i‚de‡
MBEDTLS_ERROR_H


24 
	#MBEDTLS_ERROR_H


	)

26 
	~<°ddef.h
>

88 #ifde‡
__˝lu•lus


101 
mbedés_°ªº‹
(
î∫um
, *
buf„r
, 
size_t
 
buÊí
);

103 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/gcm.h

23 #i‚de‡
MBEDTLS_GCM_H


24 
	#MBEDTLS_GCM_H


	)

26 
	~"cùhî.h
"

28 
	~<°döt.h
>

30 
	#MBEDTLS_GCM_ENCRYPT
 1

	)

31 
	#MBEDTLS_GCM_DECRYPT
 0

	)

33 
	#MBEDTLS_ERR_GCM_AUTH_FAILED
 -0x0012

	)

34 
	#MBEDTLS_ERR_GCM_BAD_INPUT
 -0x0014

	)

36 #ifde‡
__˝lu•lus


44 
mbedés_cùhî_c⁄ãxt_t
 
cùhî_˘x
;

45 
uöt64_t
 
HL
[16];

46 
uöt64_t
 
HH
[16];

47 
uöt64_t
 
Àn
;

48 
uöt64_t
 
add_Àn
;

49 
ba£_e˘r
[16];

50 
y
[16];

51 
buf
[16];

52 
mode
;

54 
	tmbedés_gcm_c⁄ãxt
;

63 
mbedés_gcm_öô
(
mbedés_gcm_c⁄ãxt
 *
˘x
);

75 
mbedés_gcm_£tkey
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

76 
mbedés_cùhî_id_t
 
cùhî
,

77 c⁄° *
key
,

78 
keybôs
);

102 
mbedés_gcm_¸y±_™d_èg
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

103 
mode
,

104 
size_t
 
Àngth
,

105 c⁄° *
iv
,

106 
size_t
 
iv_Àn
,

107 c⁄° *
add
,

108 
size_t
 
add_Àn
,

109 c⁄° *
öput
,

110 *
ouçut
,

111 
size_t
 
èg_Àn
,

112 *
èg
);

135 
mbedés_gcm_auth_de¸y±
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

136 
size_t
 
Àngth
,

137 c⁄° *
iv
,

138 
size_t
 
iv_Àn
,

139 c⁄° *
add
,

140 
size_t
 
add_Àn
,

141 c⁄° *
èg
,

142 
size_t
 
èg_Àn
,

143 c⁄° *
öput
,

144 *
ouçut
);

158 
mbedés_gcm_°¨ts
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

159 
mode
,

160 c⁄° *
iv
,

161 
size_t
 
iv_Àn
,

162 c⁄° *
add
,

163 
size_t
 
add_Àn
);

182 
mbedés_gcm_upd©e
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

183 
size_t
 
Àngth
,

184 c⁄° *
öput
,

185 *
ouçut
);

198 
mbedés_gcm_föish
(
mbedés_gcm_c⁄ãxt
 *
˘x
,

199 *
èg
,

200 
size_t
 
èg_Àn
);

207 
mbedés_gcm_‰ì
(
mbedés_gcm_c⁄ãxt
 *
˘x
);

214 
mbedés_gcm_£lf_ã°
(
vîbo£
);

216 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/havege.h

23 #i‚de‡
MBEDTLS_HAVEGE_H


24 
	#MBEDTLS_HAVEGE_H


	)

26 
	~<°ddef.h
>

28 
	#MBEDTLS_HAVEGE_COLLECT_SIZE
 1024

	)

30 #ifde‡
__˝lu•lus


38 
PT1
, 
PT2
, 
off£t
[2];

39 
poﬁ
[
MBEDTLS_HAVEGE_COLLECT_SIZE
];

40 
WALK
[8192];

42 
	tmbedés_havege_°©e
;

49 
mbedés_havege_öô
(
mbedés_havege_°©e
 *
hs
);

56 
mbedés_havege_‰ì
(
mbedés_havege_°©e
 *
hs
);

67 
mbedés_havege_øndom
(*
p_∫g
, *
ouçut
, 
size_t
 
Àn
);

69 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/hmac_drbg.h

23 #i‚de‡
MBEDTLS_HMAC_DRBG_H


24 
	#MBEDTLS_HMAC_DRBG_H


	)

26 
	~"md.h
"

28 #i‡
deföed
(
MBEDTLS_THREADING_C
)

29 
	~"mbedés/thªadög.h
"

35 
	#MBEDTLS_ERR_HMAC_DRBG_REQUEST_TOO_BIG
 -0x0003

	)

36 
	#MBEDTLS_ERR_HMAC_DRBG_INPUT_TOO_BIG
 -0x0005

	)

37 
	#MBEDTLS_ERR_HMAC_DRBG_FILE_IO_ERROR
 -0x0007

	)

38 
	#MBEDTLS_ERR_HMAC_DRBG_ENTROPY_SOURCE_FAILED
 -0x0009

	)

48 #i‡!
deföed
(
MBEDTLS_HMAC_DRBG_RESEED_INTERVAL
)

49 
	#MBEDTLS_HMAC_DRBG_RESEED_INTERVAL
 10000

	)

52 #i‡!
deföed
(
MBEDTLS_HMAC_DRBG_MAX_INPUT
)

53 
	#MBEDTLS_HMAC_DRBG_MAX_INPUT
 256

	)

56 #i‡!
deföed
(
MBEDTLS_HMAC_DRBG_MAX_REQUEST
)

57 
	#MBEDTLS_HMAC_DRBG_MAX_REQUEST
 1024

	)

60 #i‡!
deföed
(
MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT
)

61 
	#MBEDTLS_HMAC_DRBG_MAX_SEED_INPUT
 384

	)

66 
	#MBEDTLS_HMAC_DRBG_PR_OFF
 0

	)

67 
	#MBEDTLS_HMAC_DRBG_PR_ON
 1

	)

69 #ifde‡
__˝lu•lus


79 
mbedés_md_c⁄ãxt_t
 
md_˘x
;

80 
V
[
MBEDTLS_MD_MAX_SIZE
];

81 
ª£ed_cou¡î
;

84 
size_t
 
íå›y_Àn
;

85 
¥edi˘i⁄_ªsi°™˚
;

87 
ª£ed_öãrvÆ
;

90 (*
f_íå›y
)(*, *, 
size_t
);

91 *
p_íå›y
;

93 #i‡
deföed
(
MBEDTLS_THREADING_C
)

94 
mbedés_thªadög_muãx_t
 
muãx
;

96 } 
	tmbedés_hmac_drbg_c⁄ãxt
;

106 
mbedés_hmac_drbg_öô
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
);

132 
mbedés_hmac_drbg_£ed
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

133 c⁄° 
mbedés_md_öfo_t
 *
md_öfo
,

134 (*
f_íå›y
)(*, *, 
size_t
),

135 *
p_íå›y
,

136 c⁄° *
cu°om
,

137 
size_t
 
Àn
);

152 
mbedés_hmac_drbg_£ed_buf
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

153 c⁄° 
mbedés_md_öfo_t
 *
md_öfo
,

154 c⁄° *
d©a
, 
size_t
 
d©a_Àn
);

165 
mbedés_hmac_drbg_£t_¥edi˘i⁄_ªsi°™˚
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

166 
ªsi°™˚
);

176 
mbedés_hmac_drbg_£t_íå›y_Àn
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

177 
size_t
 
Àn
);

186 
mbedés_hmac_drbg_£t_ª£ed_öãrvÆ
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

187 
öãrvÆ
);

199 
mbedés_hmac_drbg_upd©e
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

200 c⁄° *
addôi⁄Æ
, 
size_t
 
add_Àn
);

212 
mbedés_hmac_drbg_ª£ed
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
,

213 c⁄° *
addôi⁄Æ
, 
size_t
 
Àn
);

231 
mbedés_hmac_drbg_øndom_wôh_add
(*
p_∫g
,

232 *
ouçut
, 
size_t
 
ouçut_Àn
,

233 c⁄° *
addôi⁄Æ
,

234 
size_t
 
add_Àn
);

249 
mbedés_hmac_drbg_øndom
(*
p_∫g
, *
ouçut
, 
size_t
 
out_Àn
);

256 
mbedés_hmac_drbg_‰ì
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
);

258 #i‡
deföed
(
MBEDTLS_FS_IO
)

268 
mbedés_hmac_drbg_wrôe_£ed_fûe
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

281 
mbedés_hmac_drbg_upd©e_£ed_fûe
(
mbedés_hmac_drbg_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

285 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

291 
mbedés_hmac_drbg_£lf_ã°
(
vîbo£
);

294 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/mbedtls_config.h

1 #i‚de‡
__MBEDTLS_CONFIG_H__


2 
	#__MBEDTLS_CONFIG_H__


	)

7 
	~"mbedés/c⁄figs/c⁄fig-möi-és1_1.h
"

8 
	~"sys/ty≥s.h
"

10 
	#mbedés_time
 
time


	)

11 
	#mbedés_time_t
 
time_t


	)

12 
	#mbedés_Ârötf
 
Ârötf


	)

13 
	#mbedés_¥ötf
 
¥ötf


	)

19 
	#MBEDTLS_SELF_TEST


20 

	)

22 
	#MBEDTLS_SSL_EXPORT_KEYS


	)

	@include_lib/net/mbedtls/md.h

25 #i‚de‡
MBEDTLS_MD_H


26 
	#MBEDTLS_MD_H


	)

28 
	~<°ddef.h
>

30 
	#MBEDTLS_ERR_MD_FEATURE_UNAVAILABLE
 -0x5080

	)

31 
	#MBEDTLS_ERR_MD_BAD_INPUT_DATA
 -0x5100

	)

32 
	#MBEDTLS_ERR_MD_ALLOC_FAILED
 -0x5180

	)

33 
	#MBEDTLS_ERR_MD_FILE_IO_ERROR
 -0x5200

	)

35 #ifde‡
__˝lu•lus


40 
MBEDTLS_MD_NONE
 = 0,

41 
MBEDTLS_MD_MD2
,

42 
MBEDTLS_MD_MD4
,

43 
MBEDTLS_MD_MD5
,

44 
MBEDTLS_MD_SHA1
,

45 
MBEDTLS_MD_SHA224
,

46 
MBEDTLS_MD_SHA256
,

47 
MBEDTLS_MD_SHA384
,

48 
MBEDTLS_MD_SHA512
,

49 
MBEDTLS_MD_RIPEMD160
,

50 } 
	tmbedés_md_ty≥_t
;

52 #i‡
deföed
(
MBEDTLS_SHA512_C
)

53 
	#MBEDTLS_MD_MAX_SIZE
 64

	)

55 
	#MBEDTLS_MD_MAX_SIZE
 32

	)

61 
mbedés_md_öfo_t
 
	tmbedés_md_öfo_t
;

68 c⁄° 
mbedés_md_öfo_t
 *
md_öfo
;

71 *
md_˘x
;

74 *
hmac_˘x
;

75 } 
	tmbedés_md_c⁄ãxt_t
;

83 c⁄° *
mbedés_md_li°
();

94 c⁄° 
mbedés_md_öfo_t
 *
mbedés_md_öfo_‰om_°rög
(c⁄° *
md_«me
);

105 c⁄° 
mbedés_md_öfo_t
 *
mbedés_md_öfo_‰om_ty≥
(
mbedés_md_ty≥_t
 
md_ty≥
);

112 
mbedés_md_öô
(
mbedés_md_c⁄ãxt_t
 *
˘x
);

119 
mbedés_md_‰ì
(
mbedés_md_c⁄ãxt_t
 *
˘x
);

121 #i‡! 
deföed
(
MBEDTLS_DEPRECATED_REMOVED
)

122 #i‡
deföed
(
MBEDTLS_DEPRECATED_WARNING
)

123 
	#MBEDTLS_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

125 
	#MBEDTLS_DEPRECATED


	)

141 
mbedés_md_öô_˘x
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° 
mbedés_md_öfo_t
 *
md_öfo
Ë
MBEDTLS_DEPRECATED
;

142 #unde‡
MBEDTLS_DEPRECATED


159 
mbedés_md_£tup
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° 
mbedés_md_öfo_t
 *
md_öfo
, 
hmac
);

175 
mbedés_md_˛⁄e
(
mbedés_md_c⁄ãxt_t
 *
d°
,

176 c⁄° 
mbedés_md_c⁄ãxt_t
 *
§c
);

185 
mbedés_md_gë_size
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
);

194 
mbedés_md_ty≥_t
 
mbedés_md_gë_ty≥
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
);

203 c⁄° *
mbedés_md_gë_«me
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
);

215 
mbedés_md_°¨ts
(
mbedés_md_c⁄ãxt_t
 *
˘x
);

229 
mbedés_md_upd©e
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

242 
mbedés_md_föish
(
mbedés_md_c⁄ãxt_t
 *
˘x
, *
ouçut
);

255 
mbedés_md
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
, c⁄° *
öput
, 
size_t
 
ûí
,

256 *
ouçut
);

258 #i‡
deföed
(
MBEDTLS_FS_IO
)

270 
mbedés_md_fûe
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
, c⁄° *
∑th
,

271 *
ouçut
);

285 
mbedés_md_hmac_°¨ts
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° *
key
,

286 
size_t
 
keyÀn
);

301 
mbedés_md_hmac_upd©e
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° *
öput
,

302 
size_t
 
ûí
);

316 
mbedés_md_hmac_föish
(
mbedés_md_c⁄ãxt_t
 *
˘x
, *
ouçut
);

327 
mbedés_md_hmac_ª£t
(
mbedés_md_c⁄ãxt_t
 *
˘x
);

342 
mbedés_md_hmac
(c⁄° 
mbedés_md_öfo_t
 *
md_öfo
, c⁄° *
key
, 
size_t
 
keyÀn
,

343 c⁄° *
öput
, 
size_t
 
ûí
,

344 *
ouçut
);

347 
mbedés_md_¥o˚ss
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° *
d©a
);

349 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/md2.h

23 #i‚de‡
MBEDTLS_MD2_H


24 
	#MBEDTLS_MD2_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

34 #i‡!
deföed
(
MBEDTLS_MD2_ALT
)

38 #ifde‡
__˝lu•lus


46 
cksum
[16];

47 
°©e
[48];

48 
buf„r
[16];

49 
size_t
 
À·
;

51 
	tmbedés_md2_c⁄ãxt
;

58 
mbedés_md2_öô
(
mbedés_md2_c⁄ãxt
 *
˘x
);

65 
mbedés_md2_‰ì
(
mbedés_md2_c⁄ãxt
 *
˘x
);

73 
mbedés_md2_˛⁄e
(
mbedés_md2_c⁄ãxt
 *
d°
,

74 c⁄° 
mbedés_md2_c⁄ãxt
 *
§c
);

81 
mbedés_md2_°¨ts
(
mbedés_md2_c⁄ãxt
 *
˘x
);

90 
mbedés_md2_upd©e
(
mbedés_md2_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

98 
mbedés_md2_föish
(
mbedés_md2_c⁄ãxt
 *
˘x
, 
ouçut
[16]);

100 #ifde‡
__˝lu•lus


105 
	~"md2_Æt.h
"

108 #ifde‡
__˝lu•lus


119 
mbedés_md2
(c⁄° *
öput
, 
size_t
 
ûí
, 
ouçut
[16]);

126 
mbedés_md2_£lf_ã°
(
vîbo£
);

129 
mbedés_md2_¥o˚ss
(
mbedés_md2_c⁄ãxt
 *
˘x
);

131 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/md4.h

23 #i‚de‡
MBEDTLS_MD4_H


24 
	#MBEDTLS_MD4_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_MD4_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt32_t
 
tŸÆ
[2];

48 
uöt32_t
 
°©e
[4];

49 
buf„r
[64];

51 
	tmbedés_md4_c⁄ãxt
;

58 
mbedés_md4_öô
(
mbedés_md4_c⁄ãxt
 *
˘x
);

65 
mbedés_md4_‰ì
(
mbedés_md4_c⁄ãxt
 *
˘x
);

73 
mbedés_md4_˛⁄e
(
mbedés_md4_c⁄ãxt
 *
d°
,

74 c⁄° 
mbedés_md4_c⁄ãxt
 *
§c
);

81 
mbedés_md4_°¨ts
(
mbedés_md4_c⁄ãxt
 *
˘x
);

90 
mbedés_md4_upd©e
(
mbedés_md4_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

98 
mbedés_md4_föish
(
mbedés_md4_c⁄ãxt
 *
˘x
, 
ouçut
[16]);

100 #ifde‡
__˝lu•lus


105 
	~"md4_Æt.h
"

108 #ifde‡
__˝lu•lus


119 
mbedés_md4
(c⁄° *
öput
, 
size_t
 
ûí
, 
ouçut
[16]);

126 
mbedés_md4_£lf_ã°
(
vîbo£
);

129 
mbedés_md4_¥o˚ss
(
mbedés_md4_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64]);

131 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/md5.h

23 #i‚de‡
MBEDTLS_MD5_H


24 
	#MBEDTLS_MD5_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_MD5_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt32_t
 
tŸÆ
[2];

48 
uöt32_t
 
°©e
[4];

49 
buf„r
[64];

51 
	tmbedés_md5_c⁄ãxt
;

58 
mbedés_md5_öô
(
mbedés_md5_c⁄ãxt
 *
˘x
);

65 
mbedés_md5_‰ì
(
mbedés_md5_c⁄ãxt
 *
˘x
);

73 
mbedés_md5_˛⁄e
(
mbedés_md5_c⁄ãxt
 *
d°
,

74 c⁄° 
mbedés_md5_c⁄ãxt
 *
§c
);

81 
mbedés_md5_°¨ts
(
mbedés_md5_c⁄ãxt
 *
˘x
);

90 
mbedés_md5_upd©e
(
mbedés_md5_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

98 
mbedés_md5_föish
(
mbedés_md5_c⁄ãxt
 *
˘x
, 
ouçut
[16]);

101 
mbedés_md5_¥o˚ss
(
mbedés_md5_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64]);

103 #ifde‡
__˝lu•lus


108 
	~"md5_Æt.h
"

111 #ifde‡
__˝lu•lus


122 
mbedés_md5
(c⁄° *
öput
, 
size_t
 
ûí
, 
ouçut
[16]);

129 
mbedés_md5_£lf_ã°
(
vîbo£
);

131 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/md_internal.h

27 #i‚de‡
MBEDTLS_MD_WRAP_H


28 
	#MBEDTLS_MD_WRAP_H


	)

30 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

31 
	~"mbedés/mbedés_c⁄fig.h
"

33 #ö˛udê
MBEDTLS_CONFIG_FILE


36 
	~"md.h
"

38 #ifde‡
__˝lu•lus


46 
	smbedés_md_öfo_t
 {

48 
mbedés_md_ty≥_t
 
ty≥
;

51 c⁄° *
«me
;

54 
size
;

57 
block_size
;

60 (*
°¨ts_func
)(*
˘x
);

63 (*
upd©e_func
)(*
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

66 (*
föish_func
)(*
˘x
, *
ouçut
);

69 (*
dige°_func
)(c⁄° *
öput
, 
size_t
 
ûí
,

70 *
ouçut
);

73 *(*
˘x_Æloc_func
)();

76 (*
˘x_‰ì_func
)(*
˘x
);

79 (*
˛⁄e_func
)(*
d°
, c⁄° *
§c
);

82 (*
¥o˚ss_func
)(*
˘x
, c⁄° *
öput
);

85 #i‡
deföed
(
MBEDTLS_MD2_C
)

86 c⁄° 
mbedés_md_öfo_t
 
mbedés_md2_öfo
;

88 #i‡
deföed
(
MBEDTLS_MD4_C
)

89 c⁄° 
mbedés_md_öfo_t
 
mbedés_md4_öfo
;

91 #i‡
deföed
(
MBEDTLS_MD5_C
)

92 c⁄° 
mbedés_md_öfo_t
 
mbedés_md5_öfo
;

94 #i‡
deföed
(
MBEDTLS_RIPEMD160_C
)

95 c⁄° 
mbedés_md_öfo_t
 
mbedés_rùemd160_öfo
;

97 #i‡
deföed
(
MBEDTLS_SHA1_C
)

98 c⁄° 
mbedés_md_öfo_t
 
mbedés_sha1_öfo
;

100 #i‡
deföed
(
MBEDTLS_SHA256_C
)

101 c⁄° 
mbedés_md_öfo_t
 
mbedés_sha224_öfo
;

102 c⁄° 
mbedés_md_öfo_t
 
mbedés_sha256_öfo
;

104 #i‡
deföed
(
MBEDTLS_SHA512_C
)

105 c⁄° 
mbedés_md_öfo_t
 
mbedés_sha384_öfo
;

106 c⁄° 
mbedés_md_öfo_t
 
mbedés_sha512_öfo
;

109 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/memory_buffer_alloc.h

23 #i‚de‡
MBEDTLS_MEMORY_BUFFER_ALLOC_H


24 
	#MBEDTLS_MEMORY_BUFFER_ALLOC_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

42 #i‡!
deföed
(
MBEDTLS_MEMORY_ALIGN_MULTIPLE
)

43 
	#MBEDTLS_MEMORY_ALIGN_MULTIPLE
 4

	)

48 
	#MBEDTLS_MEMORY_VERIFY_NONE
 0

	)

49 
	#MBEDTLS_MEMORY_VERIFY_ALLOC
 (1 << 0)

	)

50 
	#MBEDTLS_MEMORY_VERIFY_FREE
 (1 << 1)

	)

51 
	#MBEDTLS_MEMORY_VERIFY_ALWAYS
 (
MBEDTLS_MEMORY_VERIFY_ALLOC
 | 
MBEDTLS_MEMORY_VERIFY_FREE
)

	)

53 #ifde‡
__˝lu•lus


72 
mbedés_mem‹y_buf„r_Æloc_öô
(*
buf
, 
size_t
 
Àn
);

77 
mbedés_mem‹y_buf„r_Æloc_‰ì
();

87 
mbedés_mem‹y_buf„r_£t_vîify
(
vîify
);

89 #i‡
deföed
(
MBEDTLS_MEMORY_DEBUG
)

96 
mbedés_mem‹y_buf„r_Æloc_°©us
();

106 
mbedés_mem‹y_buf„r_Æloc_max_gë
(
size_t
 *
max_u£d
, size_à*
max_blocks
);

111 
mbedés_mem‹y_buf„r_Æloc_max_ª£t
();

121 
mbedés_mem‹y_buf„r_Æloc_cur_gë
(
size_t
 *
cur_u£d
, size_à*
cur_blocks
);

135 
mbedés_mem‹y_buf„r_Æloc_vîify
();

137 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

143 
mbedés_mem‹y_buf„r_Æloc_£lf_ã°
(
vîbo£
);

146 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/net.h

23 #i‚de‡
MBEDTLS_NET_H


24 
	#MBEDTLS_NET_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"s¶.h
"

33 
	~"sock_≠i/sock_≠i.h
"

34 
	~<°ddef.h
>

35 
	~<°döt.h
>

36 
	~"os/os_≠i.h
"

37 
	#MBEDTLS_ERR_NET_SOCKET_FAILED
 -0x0042

	)

38 
	#MBEDTLS_ERR_NET_CONNECT_FAILED
 -0x0044

	)

39 
	#MBEDTLS_ERR_NET_BIND_FAILED
 -0x0046

	)

40 
	#MBEDTLS_ERR_NET_LISTEN_FAILED
 -0x0048

	)

41 
	#MBEDTLS_ERR_NET_ACCEPT_FAILED
 -0x004A

	)

42 
	#MBEDTLS_ERR_NET_RECV_FAILED
 -0x004C

	)

43 
	#MBEDTLS_ERR_NET_SEND_FAILED
 -0x004E

	)

44 
	#MBEDTLS_ERR_NET_CONN_RESET
 -0x0050

	)

45 
	#MBEDTLS_ERR_NET_UNKNOWN_HOST
 -0x0052

	)

46 
	#MBEDTLS_ERR_NET_BUFFER_TOO_SMALL
 -0x0043

	)

47 
	#MBEDTLS_ERR_NET_INVALID_CONTEXT
 -0x0045

	)

49 
	#MBEDTLS_NET_LISTEN_BACKLOG
 4

	)

51 
	#MBEDTLS_NET_PROTO_TCP
 0

	)

52 
	#MBEDTLS_NET_PROTO_UDP
 1

	)

54 #ifde‡
__˝lu•lus


66 
sock_hdl
 *
hdl
;

67 *
fd_¥iv
;

68 (*
cb_func
)(
sock_≠i_msg_ty≥
 
ty≥
, *
¥iv
);

69 *
¥iv
;

70 
to_ms
;

71 
c⁄√˘_to_ms
;

72 
OS_MUTEX
 
muãx
;

73 
u8
 
h™dshake_ok
;

75 
	tmbedés_√t_c⁄ãxt
;

83 
mbedés_√t_öô
(
mbedés_√t_c⁄ãxt
 *
˘x
);

84 
mbedés_√t_£t_cb
(
mbedés_√t_c⁄ãxt
 *
˘x
, (*
cb_func
)(
sock_≠i_msg_ty≥
 
ty≥
, *
¥iv
), *priv);

85 
mbedés_√t_£t_timeout
(
mbedés_√t_c⁄ãxt
 *
˘x
, 
to_ms
);

86 
mbedés_√t_£t_fd_¥iv
(
mbedés_√t_c⁄ãxt
 *
˘x
, *
fd_¥iv
);

103 
mbedés_√t_c⁄√˘_böd
(
mbedés_√t_c⁄ãxt
 *
˘x
, 
domaö
, 
sockty≥
, 
ai_¥Ÿocﬁ
, *
ùaddr
, 
u16
 
p‹t
);

104 
mbedés_√t_c⁄√˘
(
mbedés_√t_c⁄ãxt
 *
˘x
, c⁄° *
ho°
, c⁄° *
p‹t
, 
¥Ÿo
);

123 
mbedés_√t_böd
(
mbedés_√t_c⁄ãxt
 *
˘x
, c⁄° *
böd_ù
, c⁄° *
p‹t
, 
¥Ÿo
);

140 
mbedés_√t_ac˚±
(
mbedés_√t_c⁄ãxt
 *
böd_˘x
,

141 
mbedés_√t_c⁄ãxt
 *
˛õ¡_˘x
,

142 *
˛õ¡_ù
, 
size_t
 
buf_size
, size_à*
ù_Àn
);

151 
mbedés_√t_£t_block
(
mbedés_√t_c⁄ãxt
 *
˘x
);

160 
mbedés_√t_£t_n⁄block
(
mbedés_√t_c⁄ãxt
 *
˘x
);

170 
mbedés_√t_u¶ìp
(
u£c
);

184 
mbedés_√t_ªcv
(*
˘x
, *
buf
, 
size_t
 
Àn
);

198 
mbedés_√t_£nd
(*
˘x
, c⁄° *
buf
, 
size_t
 
Àn
);

221 
mbedés_√t_ªcv_timeout
(*
˘x
, *
buf
, 
size_t
 
Àn
,

222 
uöt32_t
 
timeout
);

229 
mbedés_√t_‰ì
(
mbedés_√t_c⁄ãxt
 *
˘x
);

231 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/oid.h

23 #i‚de‡
MBEDTLS_OID_H


24 
	#MBEDTLS_OID_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"a¢1.h
"

33 
	~"pk.h
"

35 
	~<°ddef.h
>

37 #i‡
deföed
(
MBEDTLS_CIPHER_C
)

38 
	~"cùhî.h
"

41 #i‡
deföed
(
MBEDTLS_MD_C
)

42 
	~"md.h
"

45 #i‡
deföed
(
MBEDTLS_X509_USE_C
Ë|| deföed(
MBEDTLS_X509_CREATE_C
)

46 
	~"x509.h
"

49 
	#MBEDTLS_ERR_OID_NOT_FOUND
 -0x002E

	)

50 
	#MBEDTLS_ERR_OID_BUF_TOO_SMALL
 -0x000B

	)

55 
	#MBEDTLS_OID_ISO_MEMBER_BODIES
 "\x2a"

	)

56 
	#MBEDTLS_OID_ISO_IDENTIFIED_ORG
 "\x2b"

	)

57 
	#MBEDTLS_OID_ISO_CCITT_DS
 "\x55"

	)

58 
	#MBEDTLS_OID_ISO_ITU_COUNTRY
 "\x60"

	)

63 
	#MBEDTLS_OID_COUNTRY_US
 "\x86\x48"

	)

64 
	#MBEDTLS_OID_ORG_RSA_DATA_SECURITY
 "\x86\xf7\x0d"

	)

65 
	#MBEDTLS_OID_RSA_COMPANY
 
MBEDTLS_OID_ISO_MEMBER_BODIES
 
MBEDTLS_OID_COUNTRY_US
 \

66 
MBEDTLS_OID_ORG_RSA_DATA_SECURITY


	)

67 
	#MBEDTLS_OID_ORG_ANSI_X9_62
 "\x˚\x3d"

	)

68 
	#MBEDTLS_OID_ANSI_X9_62
 
MBEDTLS_OID_ISO_MEMBER_BODIES
 
MBEDTLS_OID_COUNTRY_US
 \

69 
MBEDTLS_OID_ORG_ANSI_X9_62


	)

74 
	#MBEDTLS_OID_ORG_DOD
 "\x06"

	)

75 
	#MBEDTLS_OID_ORG_OIW
 "\x0e"

	)

76 
	#MBEDTLS_OID_OIW_SECSIG
 
MBEDTLS_OID_ORG_OIW
 "\x03"

	)

77 
	#MBEDTLS_OID_OIW_SECSIG_ALG
 
MBEDTLS_OID_OIW_SECSIG
 "\x02"

	)

78 
	#MBEDTLS_OID_OIW_SECSIG_SHA1
 
MBEDTLS_OID_OIW_SECSIG_ALG
 "\x1a"

	)

79 
	#MBEDTLS_OID_ORG_CERTICOM
 "\x81\x04"

	)

80 
	#MBEDTLS_OID_CERTICOM
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_ORG_CERTICOM


	)

81 
	#MBEDTLS_OID_ORG_TELETRUST
 "\x24"

	)

82 
	#MBEDTLS_OID_TELETRUST
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_ORG_TELETRUST


	)

87 
	#MBEDTLS_OID_ORGANIZATION
 "\x01"

	)

88 
	#MBEDTLS_OID_ISO_ITU_US_ORG
 
MBEDTLS_OID_ISO_ITU_COUNTRY
 
MBEDTLS_OID_COUNTRY_US
 
MBEDTLS_OID_ORGANIZATION


	)

90 
	#MBEDTLS_OID_ORG_GOV
 "\x65"

	)

91 
	#MBEDTLS_OID_GOV
 
MBEDTLS_OID_ISO_ITU_US_ORG
 
MBEDTLS_OID_ORG_GOV


	)

93 
	#MBEDTLS_OID_ORG_NETSCAPE
 "\x86\xF8\x42"

	)

94 
	#MBEDTLS_OID_NETSCAPE
 
MBEDTLS_OID_ISO_ITU_US_ORG
 
MBEDTLS_OID_ORG_NETSCAPE


	)

97 
	#MBEDTLS_OID_ID_CE
 
MBEDTLS_OID_ISO_CCITT_DS
 "\x1D"

	)

104 
	#MBEDTLS_OID_PKIX
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_ORG_DOD
 "\x01\x05\x05\x07"

	)

109 
	#MBEDTLS_OID_AT
 
MBEDTLS_OID_ISO_CCITT_DS
 "\x04"

	)

110 
	#MBEDTLS_OID_AT_CN
 
MBEDTLS_OID_AT
 "\x03"

	)

111 
	#MBEDTLS_OID_AT_SUR_NAME
 
MBEDTLS_OID_AT
 "\x04"

	)

112 
	#MBEDTLS_OID_AT_SERIAL_NUMBER
 
MBEDTLS_OID_AT
 "\x05"

	)

113 
	#MBEDTLS_OID_AT_COUNTRY
 
MBEDTLS_OID_AT
 "\x06"

	)

114 
	#MBEDTLS_OID_AT_LOCALITY
 
MBEDTLS_OID_AT
 "\x07"

	)

115 
	#MBEDTLS_OID_AT_STATE
 
MBEDTLS_OID_AT
 "\x08"

	)

116 
	#MBEDTLS_OID_AT_ORGANIZATION
 
MBEDTLS_OID_AT
 "\x0A"

	)

117 
	#MBEDTLS_OID_AT_ORG_UNIT
 
MBEDTLS_OID_AT
 "\x0B"

	)

118 
	#MBEDTLS_OID_AT_TITLE
 
MBEDTLS_OID_AT
 "\x0C"

	)

119 
	#MBEDTLS_OID_AT_POSTAL_ADDRESS
 
MBEDTLS_OID_AT
 "\x10"

	)

120 
	#MBEDTLS_OID_AT_POSTAL_CODE
 
MBEDTLS_OID_AT
 "\x11"

	)

121 
	#MBEDTLS_OID_AT_GIVEN_NAME
 
MBEDTLS_OID_AT
 "\x2A"

	)

122 
	#MBEDTLS_OID_AT_INITIALS
 
MBEDTLS_OID_AT
 "\x2B"

	)

123 
	#MBEDTLS_OID_AT_GENERATION_QUALIFIER
 
MBEDTLS_OID_AT
 "\x2C"

	)

124 
	#MBEDTLS_OID_AT_UNIQUE_IDENTIFIER
 
MBEDTLS_OID_AT
 "\x2D"

	)

125 
	#MBEDTLS_OID_AT_DN_QUALIFIER
 
MBEDTLS_OID_AT
 "\x2E"

	)

126 
	#MBEDTLS_OID_AT_PSEUDONYM
 
MBEDTLS_OID_AT
 "\x41"

	)

128 
	#MBEDTLS_OID_DOMAIN_COMPONENT
 "\x09\x92\x26\x89\x93\xF2\x2C\x64\x01\x19"

	)

133 
	#MBEDTLS_OID_AUTHORITY_KEY_IDENTIFIER
 
MBEDTLS_OID_ID_CE
 "\x23"

	)

134 
	#MBEDTLS_OID_SUBJECT_KEY_IDENTIFIER
 
MBEDTLS_OID_ID_CE
 "\x0E"

	)

135 
	#MBEDTLS_OID_KEY_USAGE
 
MBEDTLS_OID_ID_CE
 "\x0F"

	)

136 
	#MBEDTLS_OID_CERTIFICATE_POLICIES
 
MBEDTLS_OID_ID_CE
 "\x20"

	)

137 
	#MBEDTLS_OID_POLICY_MAPPINGS
 
MBEDTLS_OID_ID_CE
 "\x21"

	)

138 
	#MBEDTLS_OID_SUBJECT_ALT_NAME
 
MBEDTLS_OID_ID_CE
 "\x11"

	)

139 
	#MBEDTLS_OID_ISSUER_ALT_NAME
 
MBEDTLS_OID_ID_CE
 "\x12"

	)

140 
	#MBEDTLS_OID_SUBJECT_DIRECTORY_ATTRS
 
MBEDTLS_OID_ID_CE
 "\x09"

	)

141 
	#MBEDTLS_OID_BASIC_CONSTRAINTS
 
MBEDTLS_OID_ID_CE
 "\x13"

	)

142 
	#MBEDTLS_OID_NAME_CONSTRAINTS
 
MBEDTLS_OID_ID_CE
 "\x1E"

	)

143 
	#MBEDTLS_OID_POLICY_CONSTRAINTS
 
MBEDTLS_OID_ID_CE
 "\x24"

	)

144 
	#MBEDTLS_OID_EXTENDED_KEY_USAGE
 
MBEDTLS_OID_ID_CE
 "\x25"

	)

145 
	#MBEDTLS_OID_CRL_DISTRIBUTION_POINTS
 
MBEDTLS_OID_ID_CE
 "\x1F"

	)

146 
	#MBEDTLS_OID_INIHIBIT_ANYPOLICY
 
MBEDTLS_OID_ID_CE
 "\x36"

	)

147 
	#MBEDTLS_OID_FRESHEST_CRL
 
MBEDTLS_OID_ID_CE
 "\x2E"

	)

152 
	#MBEDTLS_OID_NS_CERT
 
MBEDTLS_OID_NETSCAPE
 "\x01"

	)

153 
	#MBEDTLS_OID_NS_CERT_TYPE
 
MBEDTLS_OID_NS_CERT
 "\x01"

	)

154 
	#MBEDTLS_OID_NS_BASE_URL
 
MBEDTLS_OID_NS_CERT
 "\x02"

	)

155 
	#MBEDTLS_OID_NS_REVOCATION_URL
 
MBEDTLS_OID_NS_CERT
 "\x03"

	)

156 
	#MBEDTLS_OID_NS_CA_REVOCATION_URL
 
MBEDTLS_OID_NS_CERT
 "\x04"

	)

157 
	#MBEDTLS_OID_NS_RENEWAL_URL
 
MBEDTLS_OID_NS_CERT
 "\x07"

	)

158 
	#MBEDTLS_OID_NS_CA_POLICY_URL
 
MBEDTLS_OID_NS_CERT
 "\x08"

	)

159 
	#MBEDTLS_OID_NS_SSL_SERVER_NAME
 
MBEDTLS_OID_NS_CERT
 "\x0C"

	)

160 
	#MBEDTLS_OID_NS_COMMENT
 
MBEDTLS_OID_NS_CERT
 "\x0D"

	)

161 
	#MBEDTLS_OID_NS_DATA_TYPE
 
MBEDTLS_OID_NETSCAPE
 "\x02"

	)

162 
	#MBEDTLS_OID_NS_CERT_SEQUENCE
 
MBEDTLS_OID_NS_DATA_TYPE
 "\x05"

	)

167 
	#MBEDTLS_OID_PRIVATE_KEY_USAGE_PERIOD
 
MBEDTLS_OID_ID_CE
 "\x10"

	)

168 
	#MBEDTLS_OID_CRL_NUMBER
 
MBEDTLS_OID_ID_CE
 "\x14"

	)

173 
	#MBEDTLS_OID_ANY_EXTENDED_KEY_USAGE
 
MBEDTLS_OID_EXTENDED_KEY_USAGE
 "\x00"

	)

175 
	#MBEDTLS_OID_KP
 
MBEDTLS_OID_PKIX
 "\x03"

	)

176 
	#MBEDTLS_OID_SERVER_AUTH
 
MBEDTLS_OID_KP
 "\x01"

	)

177 
	#MBEDTLS_OID_CLIENT_AUTH
 
MBEDTLS_OID_KP
 "\x02"

	)

178 
	#MBEDTLS_OID_CODE_SIGNING
 
MBEDTLS_OID_KP
 "\x03"

	)

179 
	#MBEDTLS_OID_EMAIL_PROTECTION
 
MBEDTLS_OID_KP
 "\x04"

	)

180 
	#MBEDTLS_OID_TIME_STAMPING
 
MBEDTLS_OID_KP
 "\x08"

	)

181 
	#MBEDTLS_OID_OCSP_SIGNING
 
MBEDTLS_OID_KP
 "\x09"

	)

187 
	#MBEDTLS_OID_PKCS
 
MBEDTLS_OID_RSA_COMPANY
 "\x01"

	)

188 
	#MBEDTLS_OID_PKCS1
 
MBEDTLS_OID_PKCS
 "\x01"

	)

189 
	#MBEDTLS_OID_PKCS5
 
MBEDTLS_OID_PKCS
 "\x05"

	)

190 
	#MBEDTLS_OID_PKCS9
 
MBEDTLS_OID_PKCS
 "\x09"

	)

191 
	#MBEDTLS_OID_PKCS12
 
MBEDTLS_OID_PKCS
 "\x0c"

	)

196 
	#MBEDTLS_OID_PKCS1_RSA
 
MBEDTLS_OID_PKCS1
 "\x01"

	)

197 
	#MBEDTLS_OID_PKCS1_MD2
 
MBEDTLS_OID_PKCS1
 "\x02"

	)

198 
	#MBEDTLS_OID_PKCS1_MD4
 
MBEDTLS_OID_PKCS1
 "\x03"

	)

199 
	#MBEDTLS_OID_PKCS1_MD5
 
MBEDTLS_OID_PKCS1
 "\x04"

	)

200 
	#MBEDTLS_OID_PKCS1_SHA1
 
MBEDTLS_OID_PKCS1
 "\x05"

	)

201 
	#MBEDTLS_OID_PKCS1_SHA224
 
MBEDTLS_OID_PKCS1
 "\x0e"

	)

202 
	#MBEDTLS_OID_PKCS1_SHA256
 
MBEDTLS_OID_PKCS1
 "\x0b"

	)

203 
	#MBEDTLS_OID_PKCS1_SHA384
 
MBEDTLS_OID_PKCS1
 "\x0c"

	)

204 
	#MBEDTLS_OID_PKCS1_SHA512
 
MBEDTLS_OID_PKCS1
 "\x0d"

	)

206 
	#MBEDTLS_OID_RSA_SHA_OBS
 "\x2B\x0E\x03\x02\x1D"

	)

208 
	#MBEDTLS_OID_PKCS9_EMAIL
 
MBEDTLS_OID_PKCS9
 "\x01"

	)

211 
	#MBEDTLS_OID_RSASSA_PSS
 
MBEDTLS_OID_PKCS1
 "\x0a"

	)

212 
	#MBEDTLS_OID_MGF1
 
MBEDTLS_OID_PKCS1
 "\x08"

	)

217 
	#MBEDTLS_OID_DIGEST_ALG_MD2
 
MBEDTLS_OID_RSA_COMPANY
 "\x02\x02"

	)

218 
	#MBEDTLS_OID_DIGEST_ALG_MD4
 
MBEDTLS_OID_RSA_COMPANY
 "\x02\x04"

	)

219 
	#MBEDTLS_OID_DIGEST_ALG_MD5
 
MBEDTLS_OID_RSA_COMPANY
 "\x02\x05"

	)

220 
	#MBEDTLS_OID_DIGEST_ALG_SHA1
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_OIW_SECSIG_SHA1


	)

221 
	#MBEDTLS_OID_DIGEST_ALG_SHA224
 
MBEDTLS_OID_GOV
 "\x03\x04\x02\x04"

	)

222 
	#MBEDTLS_OID_DIGEST_ALG_SHA256
 
MBEDTLS_OID_GOV
 "\x03\x04\x02\x01"

	)

224 
	#MBEDTLS_OID_DIGEST_ALG_SHA384
 
MBEDTLS_OID_GOV
 "\x03\x04\x02\x02"

	)

226 
	#MBEDTLS_OID_DIGEST_ALG_SHA512
 
MBEDTLS_OID_GOV
 "\x03\x04\x02\x03"

	)

228 
	#MBEDTLS_OID_HMAC_SHA1
 
MBEDTLS_OID_RSA_COMPANY
 "\x02\x07"

	)

233 
	#MBEDTLS_OID_DES_CBC
 
MBEDTLS_OID_ISO_IDENTIFIED_ORG
 
MBEDTLS_OID_OIW_SECSIG_ALG
 "\x07"

	)

234 
	#MBEDTLS_OID_DES_EDE3_CBC
 
MBEDTLS_OID_RSA_COMPANY
 "\x03\x07"

	)

239 
	#MBEDTLS_OID_PKCS5_PBKDF2
 
MBEDTLS_OID_PKCS5
 "\x0c"

	)

240 
	#MBEDTLS_OID_PKCS5_PBES2
 
MBEDTLS_OID_PKCS5
 "\x0d"

	)

241 
	#MBEDTLS_OID_PKCS5_PBMAC1
 
MBEDTLS_OID_PKCS5
 "\x0e"

	)

246 
	#MBEDTLS_OID_PKCS5_PBE_MD2_DES_CBC
 
MBEDTLS_OID_PKCS5
 "\x01"

	)

247 
	#MBEDTLS_OID_PKCS5_PBE_MD2_RC2_CBC
 
MBEDTLS_OID_PKCS5
 "\x04"

	)

248 
	#MBEDTLS_OID_PKCS5_PBE_MD5_DES_CBC
 
MBEDTLS_OID_PKCS5
 "\x03"

	)

249 
	#MBEDTLS_OID_PKCS5_PBE_MD5_RC2_CBC
 
MBEDTLS_OID_PKCS5
 "\x06"

	)

250 
	#MBEDTLS_OID_PKCS5_PBE_SHA1_DES_CBC
 
MBEDTLS_OID_PKCS5
 "\x0a"

	)

251 
	#MBEDTLS_OID_PKCS5_PBE_SHA1_RC2_CBC
 
MBEDTLS_OID_PKCS5
 "\x0b"

	)

256 
	#MBEDTLS_OID_PKCS9_CSR_EXT_REQ
 
MBEDTLS_OID_PKCS9
 "\x0e"

	)

261 
	#MBEDTLS_OID_PKCS12_PBE
 
MBEDTLS_OID_PKCS12
 "\x01"

	)

263 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_128
 
MBEDTLS_OID_PKCS12_PBE
 "\x01"

	)

264 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_RC4_40
 
MBEDTLS_OID_PKCS12_PBE
 "\x02"

	)

265 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_DES3_EDE_CBC
 
MBEDTLS_OID_PKCS12_PBE
 "\x03"

	)

266 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_DES2_EDE_CBC
 
MBEDTLS_OID_PKCS12_PBE
 "\x04"

	)

267 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_128_CBC
 
MBEDTLS_OID_PKCS12_PBE
 "\x05"

	)

268 
	#MBEDTLS_OID_PKCS12_PBE_SHA1_RC2_40_CBC
 
MBEDTLS_OID_PKCS12_PBE
 "\x06"

	)

276 
	#MBEDTLS_OID_EC_ALG_UNRESTRICTED
 
MBEDTLS_OID_ANSI_X9_62
 "\x02\01"

	)

281 
	#MBEDTLS_OID_EC_ALG_ECDH
 
MBEDTLS_OID_CERTICOM
 "\x01\x0c"

	)

289 
	#MBEDTLS_OID_EC_GRP_SECP192R1
 
MBEDTLS_OID_ANSI_X9_62
 "\x03\x01\x01"

	)

293 
	#MBEDTLS_OID_EC_GRP_SECP224R1
 
MBEDTLS_OID_CERTICOM
 "\x00\x21"

	)

297 
	#MBEDTLS_OID_EC_GRP_SECP256R1
 
MBEDTLS_OID_ANSI_X9_62
 "\x03\x01\x07"

	)

301 
	#MBEDTLS_OID_EC_GRP_SECP384R1
 
MBEDTLS_OID_CERTICOM
 "\x00\x22"

	)

305 
	#MBEDTLS_OID_EC_GRP_SECP521R1
 
MBEDTLS_OID_CERTICOM
 "\x00\x23"

	)

309 
	#MBEDTLS_OID_EC_GRP_SECP192K1
 
MBEDTLS_OID_CERTICOM
 "\x00\x1f"

	)

313 
	#MBEDTLS_OID_EC_GRP_SECP224K1
 
MBEDTLS_OID_CERTICOM
 "\x00\x20"

	)

317 
	#MBEDTLS_OID_EC_GRP_SECP256K1
 
MBEDTLS_OID_CERTICOM
 "\x00\x0a"

	)

325 
	#MBEDTLS_OID_EC_BRAINPOOL_V1
 
MBEDTLS_OID_TELETRUST
 "\x03\x03\x02\x08\x01\x01"

	)

328 
	#MBEDTLS_OID_EC_GRP_BP256R1
 
MBEDTLS_OID_EC_BRAINPOOL_V1
 "\x07"

	)

331 
	#MBEDTLS_OID_EC_GRP_BP384R1
 
MBEDTLS_OID_EC_BRAINPOOL_V1
 "\x0B"

	)

334 
	#MBEDTLS_OID_EC_GRP_BP512R1
 
MBEDTLS_OID_EC_BRAINPOOL_V1
 "\x0D"

	)

342 
	#MBEDTLS_OID_ANSI_X9_62_FIELD_TYPE
 
MBEDTLS_OID_ANSI_X9_62
 "\x01"

	)

343 
	#MBEDTLS_OID_ANSI_X9_62_PRIME_FIELD
 
MBEDTLS_OID_ANSI_X9_62_FIELD_TYPE
 "\x01"

	)

348 
	#MBEDTLS_OID_ANSI_X9_62_SIG
 
MBEDTLS_OID_ANSI_X9_62
 "\x04"

	)

349 
	#MBEDTLS_OID_ANSI_X9_62_SIG_SHA2
 
MBEDTLS_OID_ANSI_X9_62_SIG
 "\x03"

	)

353 
	#MBEDTLS_OID_ECDSA_SHA1
 
MBEDTLS_OID_ANSI_X9_62_SIG
 "\x01"

	)

358 
	#MBEDTLS_OID_ECDSA_SHA224
 
MBEDTLS_OID_ANSI_X9_62_SIG_SHA2
 "\x01"

	)

363 
	#MBEDTLS_OID_ECDSA_SHA256
 
MBEDTLS_OID_ANSI_X9_62_SIG_SHA2
 "\x02"

	)

368 
	#MBEDTLS_OID_ECDSA_SHA384
 
MBEDTLS_OID_ANSI_X9_62_SIG_SHA2
 "\x03"

	)

373 
	#MBEDTLS_OID_ECDSA_SHA512
 
MBEDTLS_OID_ANSI_X9_62_SIG_SHA2
 "\x04"

	)

375 #ifde‡
__˝lu•lus


383 c⁄° *
a¢1
;

384 
size_t
 
a¢1_Àn
;

385 c⁄° *
«me
;

386 c⁄° *
des¸ùti⁄
;

387 } 
	tmbedés_oid_des¸ùt‹_t
;

400 
mbedés_oid_gë_numîic_°rög
(*
buf
, 
size_t
 
size
, c⁄° 
mbedés_a¢1_buf
 *
oid
);

402 #i‡
deföed
(
MBEDTLS_X509_USE_C
Ë|| deföed(
MBEDTLS_X509_CREATE_C
)

411 
mbedés_oid_gë_x509_ext_ty≥
(c⁄° 
mbedés_a¢1_buf
 *
oid
, *
ext_ty≥
);

423 
mbedés_oid_gë_©å_sh‹t_«me
(c⁄° 
mbedés_a¢1_buf
 *
oid
, c⁄° **
sh‹t_«me
);

433 
mbedés_oid_gë_pk_Æg
(c⁄° 
mbedés_a¢1_buf
 *
oid
, 
mbedés_pk_ty≥_t
 *
pk_Æg
);

444 
mbedés_oid_gë_oid_by_pk_Æg
(
mbedés_pk_ty≥_t
 
pk_Æg
,

445 c⁄° **
oid
, 
size_t
 *
ﬁí
);

447 #i‡
deföed
(
MBEDTLS_ECP_C
)

456 
mbedés_oid_gë_ec_gΩ
(c⁄° 
mbedés_a¢1_buf
 *
oid
, 
mbedés_e˝_group_id
 *
gΩ_id
);

467 
mbedés_oid_gë_oid_by_ec_gΩ
(
mbedés_e˝_group_id
 
gΩ_id
,

468 c⁄° **
oid
, 
size_t
 *
ﬁí
);

471 #i‡
deföed
(
MBEDTLS_MD_C
)

481 
mbedés_oid_gë_sig_Æg
(c⁄° 
mbedés_a¢1_buf
 *
oid
,

482 
mbedés_md_ty≥_t
 *
md_Æg
, 
mbedés_pk_ty≥_t
 *
pk_Æg
);

492 
mbedés_oid_gë_sig_Æg_desc
(c⁄° 
mbedés_a¢1_buf
 *
oid
, c⁄° **
desc
);

504 
mbedés_oid_gë_oid_by_sig_Æg
(
mbedés_pk_ty≥_t
 
pk_Æg
, 
mbedés_md_ty≥_t
 
md_Æg
,

505 c⁄° **
oid
, 
size_t
 *
ﬁí
);

515 
mbedés_oid_gë_md_Æg
(c⁄° 
mbedés_a¢1_buf
 *
oid
, 
mbedés_md_ty≥_t
 *
md_Æg
);

526 
mbedés_oid_gë_exãnded_key_ußge
(c⁄° 
mbedés_a¢1_buf
 *
oid
, c⁄° **
desc
);

537 
mbedés_oid_gë_oid_by_md
(
mbedés_md_ty≥_t
 
md_Æg
, c⁄° **
oid
, 
size_t
 *
ﬁí
);

539 #i‡
deföed
(
MBEDTLS_CIPHER_C
)

548 
mbedés_oid_gë_cùhî_Æg
(c⁄° 
mbedés_a¢1_buf
 *
oid
, 
mbedés_cùhî_ty≥_t
 *
cùhî_Æg
);

551 #i‡
deföed
(
MBEDTLS_PKCS12_C
)

562 
mbedés_oid_gë_pkcs12_pbe_Æg
(c⁄° 
mbedés_a¢1_buf
 *
oid
, 
mbedés_md_ty≥_t
 *
md_Æg
,

563 
mbedés_cùhî_ty≥_t
 *
cùhî_Æg
);

566 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/padlock.h

24 #i‚de‡
MBEDTLS_PADLOCK_H


25 
	#MBEDTLS_PADLOCK_H


	)

27 
	~"´s.h
"

29 
	#MBEDTLS_ERR_PADLOCK_DATA_MISALIGNED
 -0x0030

	)

31 #i‡
deföed
(
__has_„©uª
)

32 #i‡
__has_„©uª
(
addªss_ßnôizî
)

33 
	#MBEDTLS_HAVE_ASAN


	)

38 #i‡
deföed
(
MBEDTLS_HAVE_ASM
Ë&& deföed(
__GNUC__
Ë&& deföed(
__i386__
) && \

39 !
	$deföed
(
MBEDTLS_HAVE_ASAN
)

41 #i‚de‡
MBEDTLS_HAVE_X86


42 
	#MBEDTLS_HAVE_X86


	)

45 
	~<°döt.h
>

47 
	#MBEDTLS_PADLOCK_RNG
 0x000C

	)

48 
	#MBEDTLS_PADLOCK_ACE
 0x00C0

	)

49 
	#MBEDTLS_PADLOCK_PHE
 0x0C00

	)

50 
	#MBEDTLS_PADLOCK_PMM
 0x3000

	)

52 
	#MBEDTLS_PADLOCK_ALIGN16
(
x
Ë(
uöt32_t
 *Ë(16 + ((
öt32_t
Ëx & ~15))

	)

54 #ifde‡
__˝lu•lus


65 
	`mbedés_∑dlock_has_suµ‹t
(
„©uª
);

77 
	`mbedés_∑dlock_x¸y±ecb
(
mbedés_´s_c⁄ãxt
 *
˘x
,

78 
mode
,

79 c⁄° 
öput
[16],

80 
ouçut
[16]);

94 
	`mbedés_∑dlock_x¸y±cbc
(
mbedés_´s_c⁄ãxt
 *
˘x
,

95 
mode
,

96 
size_t
 
Àngth
,

97 
iv
[16],

98 c⁄° *
öput
,

99 *
ouçut
);

101 #ifde‡
__˝lu•lus


102 
	}
}

	@include_lib/net/mbedtls/pem.h

23 #i‚de‡
MBEDTLS_PEM_H


24 
	#MBEDTLS_PEM_H


	)

26 
	~<°ddef.h
>

34 
	#MBEDTLS_ERR_PEM_NO_HEADER_FOOTER_PRESENT
 -0x1080

	)

35 
	#MBEDTLS_ERR_PEM_INVALID_DATA
 -0x1100

	)

36 
	#MBEDTLS_ERR_PEM_ALLOC_FAILED
 -0x1180

	)

37 
	#MBEDTLS_ERR_PEM_INVALID_ENC_IV
 -0x1200

	)

38 
	#MBEDTLS_ERR_PEM_UNKNOWN_ENC_ALG
 -0x1280

	)

39 
	#MBEDTLS_ERR_PEM_PASSWORD_REQUIRED
 -0x1300

	)

40 
	#MBEDTLS_ERR_PEM_PASSWORD_MISMATCH
 -0x1380

	)

41 
	#MBEDTLS_ERR_PEM_FEATURE_UNAVAILABLE
 -0x1400

	)

42 
	#MBEDTLS_ERR_PEM_BAD_INPUT_DATA
 -0x1480

	)

45 #ifde‡
__˝lu•lus


49 #i‡
deföed
(
MBEDTLS_PEM_PARSE_C
)

54 *
buf
;

55 
size_t
 
buÊí
;

56 *
öfo
;

58 
	tmbedés_≥m_c⁄ãxt
;

65 
mbedés_≥m_öô
(
mbedés_≥m_c⁄ãxt
 *
˘x
);

89 
mbedés_≥m_ªad_buf„r
(
mbedés_≥m_c⁄ãxt
 *
˘x
, c⁄° *
hódî
, c⁄° *
foŸî
,

90 c⁄° *
d©a
,

91 c⁄° *
pwd
,

92 
size_t
 
pwdÀn
, size_à*
u£_Àn
);

99 
mbedés_≥m_‰ì
(
mbedés_≥m_c⁄ãxt
 *
˘x
);

102 #i‡
deföed
(
MBEDTLS_PEM_WRITE_C
)

119 
mbedés_≥m_wrôe_buf„r
(c⁄° *
hódî
, c⁄° *
foŸî
,

120 c⁄° *
dî_d©a
, 
size_t
 
dî_Àn
,

121 *
buf
, 
size_t
 
buf_Àn
, size_à*
ﬁí
);

124 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/pk.h

24 #i‚de‡
MBEDTLS_PK_H


25 
	#MBEDTLS_PK_H


	)

27 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

28 
	~"mbedés/mbedés_c⁄fig.h
"

30 #ö˛udê
MBEDTLS_CONFIG_FILE


33 
	~"md.h
"

35 #i‡
deföed
(
MBEDTLS_RSA_C
)

36 
	~"rß.h
"

39 #i‡
deföed
(
MBEDTLS_ECP_C
)

40 
	~"e˝.h
"

43 #i‡
deföed
(
MBEDTLS_ECDSA_C
)

44 
	~"ecdß.h
"

47 #i‡–
deföed
(
__ARMCC_VERSION
Ë|| deföed(
_MSC_VER
) ) && \

48 !
deföed
(
ölöe
Ë&& !
	$deföed
(
__˝lu•lus
)

49 
	#ölöe
 
__ölöe


	)

52 
	#MBEDTLS_ERR_PK_ALLOC_FAILED
 -0x3F80

	)

53 
	#MBEDTLS_ERR_PK_TYPE_MISMATCH
 -0x3F00

	)

54 
	#MBEDTLS_ERR_PK_BAD_INPUT_DATA
 -0x3E80

	)

55 
	#MBEDTLS_ERR_PK_FILE_IO_ERROR
 -0x3E00

	)

56 
	#MBEDTLS_ERR_PK_KEY_INVALID_VERSION
 -0x3D80

	)

57 
	#MBEDTLS_ERR_PK_KEY_INVALID_FORMAT
 -0x3D00

	)

58 
	#MBEDTLS_ERR_PK_UNKNOWN_PK_ALG
 -0x3C80

	)

59 
	#MBEDTLS_ERR_PK_PASSWORD_REQUIRED
 -0x3C00

	)

60 
	#MBEDTLS_ERR_PK_PASSWORD_MISMATCH
 -0x3B80

	)

61 
	#MBEDTLS_ERR_PK_INVALID_PUBKEY
 -0x3B00

	)

62 
	#MBEDTLS_ERR_PK_INVALID_ALG
 -0x3A80

	)

63 
	#MBEDTLS_ERR_PK_UNKNOWN_NAMED_CURVE
 -0x3A00

	)

64 
	#MBEDTLS_ERR_PK_FEATURE_UNAVAILABLE
 -0x3980

	)

65 
	#MBEDTLS_ERR_PK_SIG_LEN_MISMATCH
 -0x3900

	)

67 #ifde‡
__˝lu•lus


75 
MBEDTLS_PK_NONE
 = 0,

76 
MBEDTLS_PK_RSA
,

77 
MBEDTLS_PK_ECKEY
,

78 
MBEDTLS_PK_ECKEY_DH
,

79 
MBEDTLS_PK_ECDSA
,

80 
MBEDTLS_PK_RSA_ALT
,

81 
MBEDTLS_PK_RSASSA_PSS
,

82 } 
	tmbedés_pk_ty≥_t
;

89 
mbedés_md_ty≥_t
 
mgf1_hash_id
;

90 
ex≥˘ed_ß…_Àn
;

92 } 
	tmbedés_pk_rßsß_pss_›ti⁄s
;

98 
MBEDTLS_PK_DEBUG_NONE
 = 0,

99 
MBEDTLS_PK_DEBUG_MPI
,

100 
MBEDTLS_PK_DEBUG_ECP
,

101 } 
	tmbedés_pk_debug_ty≥
;

107 
mbedés_pk_debug_ty≥
 
ty≥
;

108 c⁄° *
«me
;

109 *
vÆue
;

110 } 
	tmbedés_pk_debug_ôem
;

113 
	#MBEDTLS_PK_DEBUG_MAX_ITEMS
 3

	)

118 
mbedés_pk_öfo_t
 
	tmbedés_pk_öfo_t
;

124 c⁄° 
mbedés_pk_öfo_t
 *
pk_öfo
;

125 *
pk_˘x
;

126 } 
	tmbedés_pk_c⁄ãxt
;

128 #i‡
	`deföed
(
MBEDTLS_RSA_C
)

135 
ölöe
 
mbedés_rß_c⁄ãxt
 *
	`mbedés_pk_rß
(c⁄° 
mbedés_pk_c⁄ãxt
 
pk
)

137  ((
mbedés_rß_c⁄ãxt
 *)(
pk
).
pk_˘x
);

141 #i‡
	`deföed
(
MBEDTLS_ECP_C
)

148 
ölöe
 
mbedés_e˝_key∑ú
 *
	`mbedés_pk_ec
(c⁄° 
mbedés_pk_c⁄ãxt
 
pk
)

150  ((
mbedés_e˝_key∑ú
 *)(
pk
).
pk_˘x
);

154 #i‡
	`deföed
(
MBEDTLS_PK_RSA_ALT_SUPPORT
)

158 (*
	tmbedés_pk_rß_Æt_de¸y±_func
)(*
	t˘x
, 
	tmode
, 
	tsize_t
 *
	tﬁí
,

159 c⁄° *
	töput
, *
	touçut
,

160 
	tsize_t
 
	touçut_max_Àn
);

161 (*
	tmbedés_pk_rß_Æt_sign_func
)(*
	t˘x
,

162 (*
	tf_∫g
)(*, *, 
	tsize_t
), *
	tp_∫g
,

163 
	tmode
, 
	tmbedés_md_ty≥_t
 
	tmd_Æg
, 
	thashÀn
,

164 c⁄° *
	thash
, *
	tsig
);

165 
	`size_t
 (*
	tmbedés_pk_rß_Æt_key_Àn_func
)(*
	t˘x
);

175 c⁄° 
mbedés_pk_öfo_t
 *
	`mbedés_pk_öfo_‰om_ty≥
(
mbedés_pk_ty≥_t
 
pk_ty≥
);

180 
	`mbedés_pk_öô
(
mbedés_pk_c⁄ãxt
 *
˘x
);

185 
	`mbedés_pk_‰ì
(
mbedés_pk_c⁄ãxt
 *
˘x
);

201 
	`mbedés_pk_£tup
(
mbedés_pk_c⁄ãxt
 *
˘x
, c⁄° 
mbedés_pk_öfo_t
 *
öfo
);

203 #i‡
	`deföed
(
MBEDTLS_PK_RSA_ALT_SUPPORT
)

218 
	`mbedés_pk_£tup_rß_Æt
(
mbedés_pk_c⁄ãxt
 *
˘x
, *
key
,

219 
mbedés_pk_rß_Æt_de¸y±_func
 
de¸y±_func
,

220 
mbedés_pk_rß_Æt_sign_func
 
sign_func
,

221 
mbedés_pk_rß_Æt_key_Àn_func
 
key_Àn_func
);

231 
size_t
 
	`mbedés_pk_gë_bôÀn
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
);

239 
ölöe
 
size_t
 
	`mbedés_pk_gë_Àn
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
)

241  ((
	`mbedés_pk_gë_bôÀn
(
˘x
) + 7) / 8);

253 
	`mbedés_pk_ˇn_do
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
, 
mbedés_pk_ty≥_t
 
ty≥
);

279 
	`mbedés_pk_vîify
(
mbedés_pk_c⁄ãxt
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
,

280 c⁄° *
hash
, 
size_t
 
hash_Àn
,

281 c⁄° *
sig
, 
size_t
 
sig_Àn
);

312 
	`mbedés_pk_vîify_ext
(
mbedés_pk_ty≥_t
 
ty≥
, c⁄° *
›ti⁄s
,

313 
mbedés_pk_c⁄ãxt
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
,

314 c⁄° *
hash
, 
size_t
 
hash_Àn
,

315 c⁄° *
sig
, 
size_t
 
sig_Àn
);

341 
	`mbedés_pk_sign
(
mbedés_pk_c⁄ãxt
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
,

342 c⁄° *
hash
, 
size_t
 
hash_Àn
,

343 *
sig
, 
size_t
 *
sig_Àn
,

344 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

362 
	`mbedés_pk_de¸y±
(
mbedés_pk_c⁄ãxt
 *
˘x
,

363 c⁄° *
öput
, 
size_t
 
ûí
,

364 *
ouçut
, 
size_t
 *
ﬁí
, size_à
osize
,

365 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

383 
	`mbedés_pk_í¸y±
(
mbedés_pk_c⁄ãxt
 *
˘x
,

384 c⁄° *
öput
, 
size_t
 
ûí
,

385 *
ouçut
, 
size_t
 *
ﬁí
, size_à
osize
,

386 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
);

396 
	`mbedés_pk_check_∑ú
(c⁄° 
mbedés_pk_c⁄ãxt
 *
pub
, c⁄° mbedés_pk_c⁄ãxà*
¥v
);

406 
	`mbedés_pk_debug
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
, 
mbedés_pk_debug_ôem
 *
ôems
);

415 c⁄° *
	`mbedés_pk_gë_«me
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
);

424 
mbedés_pk_ty≥_t
 
	`mbedés_pk_gë_ty≥
(c⁄° 
mbedés_pk_c⁄ãxt
 *
˘x
);

426 #i‡
	`deföed
(
MBEDTLS_PK_PARSE_C
)

446 
	`mbedés_pk_∑r£_key
(
mbedés_pk_c⁄ãxt
 *
˘x
,

447 c⁄° *
key
, 
size_t
 
keyÀn
,

448 c⁄° *
pwd
, 
size_t
 
pwdÀn
);

467 
	`mbedés_pk_∑r£_public_key
(
mbedés_pk_c⁄ãxt
 *
˘x
,

468 c⁄° *
key
, 
size_t
 
keyÀn
);

470 #i‡
	`deföed
(
MBEDTLS_FS_IO
)

487 
	`mbedés_pk_∑r£_keyfûe
(
mbedés_pk_c⁄ãxt
 *
˘x
,

488 c⁄° *
∑th
, c⁄° *
∑ssw‹d
);

506 
	`mbedés_pk_∑r£_public_keyfûe
(
mbedés_pk_c⁄ãxt
 *
˘x
, c⁄° *
∑th
);

510 #i‡
	`deföed
(
MBEDTLS_PK_WRITE_C
)

524 
	`mbedés_pk_wrôe_key_dî
(
mbedés_pk_c⁄ãxt
 *
˘x
, *
buf
, 
size_t
 
size
);

539 
	`mbedés_pk_wrôe_pubkey_dî
(
mbedés_pk_c⁄ãxt
 *
˘x
, *
buf
, 
size_t
 
size
);

541 #i‡
	`deföed
(
MBEDTLS_PEM_WRITE_C
)

551 
	`mbedés_pk_wrôe_pubkey_≥m
(
mbedés_pk_c⁄ãxt
 *
˘x
, *
buf
, 
size_t
 
size
);

562 
	`mbedés_pk_wrôe_key_≥m
(
mbedés_pk_c⁄ãxt
 *
˘x
, *
buf
, 
size_t
 
size
);

571 #i‡
	`deföed
(
MBEDTLS_PK_PARSE_C
)

581 
	`mbedés_pk_∑r£_subpubkey
(**
p
, c⁄° *
íd
,

582 
mbedés_pk_c⁄ãxt
 *
pk
);

585 #i‡
	`deföed
(
MBEDTLS_PK_WRITE_C
)

596 
	`mbedés_pk_wrôe_pubkey
(**
p
, *
°¨t
,

597 c⁄° 
mbedés_pk_c⁄ãxt
 *
key
);

604 #i‡
	`deföed
(
MBEDTLS_FS_IO
)

605 
	`mbedés_pk_lﬂd_fûe
(c⁄° *
∑th
, **
buf
, 
size_t
 *
n
);

608 #ifde‡
__˝lu•lus


609 
	}
}

	@include_lib/net/mbedtls/pk_internal.h

24 #i‚de‡
MBEDTLS_PK_WRAP_H


25 
	#MBEDTLS_PK_WRAP_H


	)

27 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

28 
	~"mbedés/mbedés_c⁄fig.h
"

30 #ö˛udê
MBEDTLS_CONFIG_FILE


33 
	~"pk.h
"

35 
	smbedés_pk_öfo_t
 {

37 
mbedés_pk_ty≥_t
 
	mty≥
;

40 c⁄° *
	m«me
;

43 
size_t
 (*
gë_bôÀn
)(const *);

46 (*
	mˇn_do
)(
mbedés_pk_ty≥_t
 
	mty≥
);

49 (*
	mvîify_func
)(*
	m˘x
, 
mbedés_md_ty≥_t
 
	mmd_Æg
,

50 c⁄° *
	mhash
, 
size_t
 
	mhash_Àn
,

51 c⁄° *
	msig
, 
size_t
 
	msig_Àn
);

54 (*
	msign_func
)(*
	m˘x
, 
mbedés_md_ty≥_t
 
	mmd_Æg
,

55 c⁄° *
	mhash
, 
size_t
 
	mhash_Àn
,

56 *
	msig
, 
size_t
 *
	msig_Àn
,

57 (*
	mf_∫g
)(*, *, 
	msize_t
),

58 *
	mp_∫g
);

61 (*
	mde¸y±_func
)(*
	m˘x
, c⁄° *
	möput
, 
size_t
 
	mûí
,

62 *
	mouçut
, 
size_t
 *
	mﬁí
, size_à
	mosize
,

63 (*
	mf_∫g
)(*, *, 
	msize_t
),

64 *
	mp_∫g
);

67 (*
	mí¸y±_func
)(*
	m˘x
, c⁄° *
	möput
, 
size_t
 
	mûí
,

68 *
	mouçut
, 
size_t
 *
	mﬁí
, size_à
	mosize
,

69 (*
	mf_∫g
)(*, *, 
	msize_t
),

70 *
	mp_∫g
);

73 (*
	mcheck_∑ú_func
)(c⁄° *
	mpub
, c⁄° *
	m¥v
);

76 *(*
	m˘x_Æloc_func
)();

79 (*
	m˘x_‰ì_func
)(*
	m˘x
);

82 (*
	mdebug_func
)(c⁄° *
	m˘x
, 
mbedés_pk_debug_ôem
 *
	môems
);

85 #i‡
deföed
(
MBEDTLS_PK_RSA_ALT_SUPPORT
)

88 *
	mkey
;

89 
mbedés_pk_rß_Æt_de¸y±_func
 
	mde¸y±_func
;

90 
mbedés_pk_rß_Æt_sign_func
 
	msign_func
;

91 
mbedés_pk_rß_Æt_key_Àn_func
 
	mkey_Àn_func
;

92 } 
	tmbedés_rß_Æt_c⁄ãxt
;

95 #i‡
deföed
(
MBEDTLS_RSA_C
)

96 c⁄° 
mbedés_pk_öfo_t
 
mbedés_rß_öfo
;

99 #i‡
deföed
(
MBEDTLS_ECP_C
)

100 c⁄° 
mbedés_pk_öfo_t
 
mbedés_eckey_öfo
;

101 c⁄° 
mbedés_pk_öfo_t
 
mbedés_eckeydh_öfo
;

104 #i‡
deföed
(
MBEDTLS_ECDSA_C
)

105 c⁄° 
mbedés_pk_öfo_t
 
mbedés_ecdß_öfo
;

108 #i‡
deföed
(
MBEDTLS_PK_RSA_ALT_SUPPORT
)

109 c⁄° 
mbedés_pk_öfo_t
 
mbedés_rß_Æt_öfo
;

	@include_lib/net/mbedtls/pkcs11.h

25 #i‚de‡
MBEDTLS_PKCS11_H


26 
	#MBEDTLS_PKCS11_H


	)

28 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

29 
	~"mbedés/mbedés_c⁄fig.h
"

31 #ö˛udê
MBEDTLS_CONFIG_FILE


34 #i‡
deföed
(
MBEDTLS_PKCS11_C
)

36 
	~"x509_¸t.h
"

38 
	~<pkcs11-hñ≥r-1.0/pkcs11h-˚πifiˇã.h
>

40 #i‡–
deföed
(
__ARMCC_VERSION
Ë|| deföed(
_MSC_VER
) ) && \

41 !
deföed
(
ölöe
Ë&& !
	$deföed
(
__˝lu•lus
)

42 
	#ölöe
 
__ölöe


	)

45 #ifde‡
__˝lu•lus


53 
pkcs11h_˚πifiˇã_t
 
pkcs11h_˚π
;

54 
Àn
;

55 } 
	tmbedés_pkcs11_c⁄ãxt
;

61 
	`mbedés_pkcs11_öô
(
mbedés_pkcs11_c⁄ãxt
 *
˘x
);

71 
	`mbedés_pkcs11_x509_˚π_böd
(
mbedés_x509_¸t
 *
˚π
, 
pkcs11h_˚πifiˇã_t
 
pkcs11h_˚π
);

83 
	`mbedés_pkcs11_¥iv_key_böd
(
mbedés_pkcs11_c⁄ãxt
 *
¥iv_key
,

84 
pkcs11h_˚πifiˇã_t
 
pkcs11_˚π
);

92 
	`mbedés_pkcs11_¥iv_key_‰ì
(
mbedés_pkcs11_c⁄ãxt
 *
¥iv_key
);

111 
	`mbedés_pkcs11_de¸y±
(
mbedés_pkcs11_c⁄ãxt
 *
˘x
,

112 
mode
, 
size_t
 *
ﬁí
,

113 c⁄° *
öput
,

114 *
ouçut
,

115 
size_t
 
ouçut_max_Àn
);

133 
	`mbedés_pkcs11_sign
(
mbedés_pkcs11_c⁄ãxt
 *
˘x
,

134 
mode
,

135 
mbedés_md_ty≥_t
 
md_Æg
,

136 
hashÀn
,

137 c⁄° *
hash
,

138 *
sig
);

143 
ölöe
 
	`mbedés_s¶_pkcs11_de¸y±
(*
˘x
, 
mode
, 
size_t
 *
ﬁí
,

144 c⁄° *
öput
, *
ouçut
,

145 
size_t
 
ouçut_max_Àn
)

147  
	`mbedés_pkcs11_de¸y±
((
mbedés_pkcs11_c⁄ãxt
 *Ë
˘x
, 
mode
, 
ﬁí
, 
öput
, 
ouçut
,

148 
ouçut_max_Àn
);

151 
ölöe
 
	`mbedés_s¶_pkcs11_sign
(*
˘x
,

152 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
,

153 
mode
, 
mbedés_md_ty≥_t
 
md_Æg
, 
hashÀn
,

154 c⁄° *
hash
, *
sig
)

156 ((Ë
f_∫g
);

157 ((Ë
p_∫g
);

158  
	`mbedés_pkcs11_sign
((
mbedés_pkcs11_c⁄ãxt
 *Ë
˘x
, 
mode
, 
md_Æg
,

159 
hashÀn
, 
hash
, 
sig
);

162 
ölöe
 
size_t
 
	`mbedés_s¶_pkcs11_key_Àn
(*
˘x
)

164  ((
mbedés_pkcs11_c⁄ãxt
 *Ë
˘x
)->
Àn
;

167 #ifde‡
__˝lu•lus


168 
	}
}

	@include_lib/net/mbedtls/pkcs12.h

23 #i‚de‡
MBEDTLS_PKCS12_H


24 
	#MBEDTLS_PKCS12_H


	)

26 
	~"md.h
"

27 
	~"cùhî.h
"

28 
	~"a¢1.h
"

30 
	~<°ddef.h
>

32 
	#MBEDTLS_ERR_PKCS12_BAD_INPUT_DATA
 -0x1F80

	)

33 
	#MBEDTLS_ERR_PKCS12_FEATURE_UNAVAILABLE
 -0x1F00

	)

34 
	#MBEDTLS_ERR_PKCS12_PBE_INVALID_FORMAT
 -0x1E80

	)

35 
	#MBEDTLS_ERR_PKCS12_PASSWORD_MISMATCH
 -0x1E00

	)

37 
	#MBEDTLS_PKCS12_DERIVE_KEY
 1

	)

38 
	#MBEDTLS_PKCS12_DERIVE_IV
 2

	)

39 
	#MBEDTLS_PKCS12_DERIVE_MAC_KEY
 3

	)

41 
	#MBEDTLS_PKCS12_PBE_DECRYPT
 0

	)

42 
	#MBEDTLS_PKCS12_PBE_ENCRYPT
 1

	)

44 #ifde‡
__˝lu•lus


62 
mbedés_pkcs12_pbe_sha1_rc4_128
(
mbedés_a¢1_buf
 *
pbe_∑øms
, 
mode
,

63 c⁄° *
pwd
, 
size_t
 
pwdÀn
,

64 c⁄° *
öput
, 
size_t
 
Àn
,

65 *
ouçut
);

83 
mbedés_pkcs12_pbe
(
mbedés_a¢1_buf
 *
pbe_∑øms
, 
mode
,

84 
mbedés_cùhî_ty≥_t
 
cùhî_ty≥
, 
mbedés_md_ty≥_t
 
md_ty≥
,

85 c⁄° *
pwd
, 
size_t
 
pwdÀn
,

86 c⁄° *
öput
, 
size_t
 
Àn
,

87 *
ouçut
);

110 
mbedés_pkcs12_dîiv©i⁄
(*
d©a
, 
size_t
 
d©Æí
,

111 c⁄° *
pwd
, 
size_t
 
pwdÀn
,

112 c⁄° *
ß…
, 
size_t
 
ß…Àn
,

113 
mbedés_md_ty≥_t
 
mbedés_md
, 
id
, 
ôî©i⁄s
);

115 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/pkcs5.h

25 #i‚de‡
MBEDTLS_PKCS5_H


26 
	#MBEDTLS_PKCS5_H


	)

28 
	~"a¢1.h
"

29 
	~"md.h
"

31 
	~<°ddef.h
>

32 
	~<°döt.h
>

34 
	#MBEDTLS_ERR_PKCS5_BAD_INPUT_DATA
 -0x2f80

	)

35 
	#MBEDTLS_ERR_PKCS5_INVALID_FORMAT
 -0x2f00

	)

36 
	#MBEDTLS_ERR_PKCS5_FEATURE_UNAVAILABLE
 -0x2e80

	)

37 
	#MBEDTLS_ERR_PKCS5_PASSWORD_MISMATCH
 -0x2e00

	)

39 
	#MBEDTLS_PKCS5_DECRYPT
 0

	)

40 
	#MBEDTLS_PKCS5_ENCRYPT
 1

	)

42 #ifde‡
__˝lu•lus


59 
mbedés_pkcs5_pbes2
(c⁄° 
mbedés_a¢1_buf
 *
pbe_∑øms
, 
mode
,

60 c⁄° *
pwd
, 
size_t
 
pwdÀn
,

61 c⁄° *
d©a
, 
size_t
 
d©Æí
,

62 *
ouçut
);

78 
mbedés_pkcs5_pbkdf2_hmac
(
mbedés_md_c⁄ãxt_t
 *
˘x
, c⁄° *
∑ssw‹d
,

79 
size_t
 
∂í
, c⁄° *
ß…
, size_à
¶í
,

80 
ôî©i⁄_cou¡
,

81 
uöt32_t
 
key_Àngth
, *
ouçut
);

88 
mbedés_pkcs5_£lf_ã°
(
vîbo£
);

90 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/platform.h

23 #i‚de‡
MBEDTLS_PLATFORM_H


24 
	#MBEDTLS_PLATFORM_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 #ifde‡
__˝lu•lus


44 #i‡!
deföed
(
MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
)

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<time.h
>

48 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_SNPRINTF
)

49 #i‡
deföed
(
_WIN32
)

50 
	#MBEDTLS_PLATFORM_STD_SNPRINTF
 
mbedés_∂©f‹m_wö32_¢¥ötf


	)

52 
	#MBEDTLS_PLATFORM_STD_SNPRINTF
 
¢¥ötf


	)

55 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_PRINTF
)

56 
	#MBEDTLS_PLATFORM_STD_PRINTF
 
¥ötf


	)

58 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_FPRINTF
)

59 
	#MBEDTLS_PLATFORM_STD_FPRINTF
 
Ârötf


	)

61 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_CALLOC
)

62 
	#MBEDTLS_PLATFORM_STD_CALLOC
 
ˇŒoc


	)

64 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_FREE
)

65 
	#MBEDTLS_PLATFORM_STD_FREE
 
‰ì


	)

67 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_EXIT
)

68 
	#MBEDTLS_PLATFORM_STD_EXIT
 
exô


	)

70 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_TIME
)

71 
	#MBEDTLS_PLATFORM_STD_TIME
 
time


	)

73 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_EXIT_SUCCESS
)

74 
	#MBEDTLS_PLATFORM_STD_EXIT_SUCCESS
 
EXIT_SUCCESS


	)

76 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_EXIT_FAILURE
)

77 
	#MBEDTLS_PLATFORM_STD_EXIT_FAILURE
 
EXIT_FAILURE


	)

79 #i‡
deföed
(
MBEDTLS_FS_IO
)

80 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_READ
)

81 
	#MBEDTLS_PLATFORM_STD_NV_SEED_READ
 
mbedés_∂©f‹m_°d_nv_£ed_ªad


	)

83 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_WRITE
)

84 
	#MBEDTLS_PLATFORM_STD_NV_SEED_WRITE
 
mbedés_∂©f‹m_°d_nv_£ed_wrôe


	)

86 #i‡!
deföed
(
MBEDTLS_PLATFORM_STD_NV_SEED_FILE
)

87 
	#MBEDTLS_PLATFORM_STD_NV_SEED_FILE
 "£edfûe"

	)

91 #i‡
deföed
(
MBEDTLS_PLATFORM_STD_MEM_HDR
)

92 #ö˛udê
MBEDTLS_PLATFORM_STD_MEM_HDR


102 #i‡
deföed
(
MBEDTLS_PLATFORM_MEMORY
)

103 #i‡
deföed
(
MBEDTLS_PLATFORM_FREE_MACRO
) && \

104 
	$deföed
(
MBEDTLS_PLATFORM_CALLOC_MACRO
)

105 
	#mbedés_‰ì
 
MBEDTLS_PLATFORM_FREE_MACRO


	)

106 
	#mbedés_ˇŒoc
 
MBEDTLS_PLATFORM_CALLOC_MACRO


	)

109 
	~<°ddef.h
>

110 *(*
mbedés_ˇŒoc
)(
size_t
 
n
, size_à
size
);

111 (*
mbedés_‰ì
)(*
±r
);

121 
	`mbedés_∂©f‹m_£t_ˇŒoc_‰ì
(*(*
ˇŒoc_func
)(
size_t
, size_t),

122 (*
‰ì_func
)(*));

125 
	#mbedés_‰ì
 
‰ì


	)

126 
	#mbedés_ˇŒoc
 
ˇŒoc


	)

132 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FPRINTF_ALT
)

134 
	~<°dio.h
>

135 (*
mbedés_Ârötf
)(
FILE
 *
°ªam
, c⁄° *
f‹m©
, ...);

144 
	`mbedés_∂©f‹m_£t_Ârötf
((*
Ârötf_func
)(
FILE
 *
°ªam
, const *,

147 #i‡
	`deföed
(
MBEDTLS_PLATFORM_FPRINTF_MACRO
)

148 
	#mbedés_Ârötf
 
MBEDTLS_PLATFORM_FPRINTF_MACRO


	)

150 
	#mbedés_Ârötf
 
Ârötf


	)

157 #i‡
	`deföed
(
MBEDTLS_PLATFORM_PRINTF_ALT
)

158 (*
mbedés_¥ötf
)(c⁄° *
f‹m©
, ...);

167 
	`mbedés_∂©f‹m_£t_¥ötf
((*
¥ötf_func
)(const *, ...));

169 #i‡
	`deföed
(
MBEDTLS_PLATFORM_PRINTF_MACRO
)

170 
	#mbedés_¥ötf
 
MBEDTLS_PLATFORM_PRINTF_MACRO


	)

172 
	#mbedés_¥ötf
 
¥ötf


	)

185 #i‡
	`deföed
(
_WIN32
)

187 
	`mbedés_∂©f‹m_wö32_¢¥ötf
(*
s
, 
size_t
 
n
, c⁄° *
fmt
, ...);

190 #i‡
	`deföed
(
MBEDTLS_PLATFORM_SNPRINTF_ALT
)

191 (*
mbedés_¢¥ötf
)(*
s
, 
size_t
 
n
, c⁄° *
f‹m©
, ...);

200 
	`mbedés_∂©f‹m_£t_¢¥ötf
((*
¢¥ötf_func
)(*
s
, 
size_t
 
n
,

201 c⁄° *
f‹m©
, ...));

203 #i‡
	`deföed
(
MBEDTLS_PLATFORM_SNPRINTF_MACRO
)

204 
	#mbedés_¢¥ötf
 
MBEDTLS_PLATFORM_SNPRINTF_MACRO


	)

206 
	#mbedés_¢¥ötf
 
¢¥ötf


	)

213 #i‡
	`deföed
(
MBEDTLS_PLATFORM_EXIT_ALT
)

214 (*
mbedés_exô
)(
°©us
);

223 
	`mbedés_∂©f‹m_£t_exô
((*
exô_func
)(
°©us
));

225 #i‡
	`deföed
(
MBEDTLS_PLATFORM_EXIT_MACRO
)

226 
	#mbedés_exô
 
MBEDTLS_PLATFORM_EXIT_MACRO


	)

228 
	#mbedés_exô
 
exô


	)

235 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_EXIT_SUCCESS
)

236 
	#MBEDTLS_EXIT_SUCCESS
 
MBEDTLS_PLATFORM_STD_EXIT_SUCCESS


	)

238 
	#MBEDTLS_EXIT_SUCCESS
 0

	)

240 #i‡
	`deföed
(
MBEDTLS_PLATFORM_STD_EXIT_FAILURE
)

241 
	#MBEDTLS_EXIT_FAILURE
 
MBEDTLS_PLATFORM_STD_EXIT_FAILURE


	)

243 
	#MBEDTLS_EXIT_FAILURE
 1

	)

249 #i‡
	`deföed
(
MBEDTLS_PLATFORM_TIME_TYPE_MACRO
)

250 
MBEDTLS_PLATFORM_TIME_TYPE_MACRO
 
	tmbedés_time_t
;

258 #i‡
	`deföed
(
MBEDTLS_PLATFORM_TIME_ALT
)

259 
	`mbedés_time_t
 (*
mbedés_time
)(
mbedés_time_t
 *
time
);

268 
	`mbedés_∂©f‹m_£t_time
(
	`mbedés_time_t
 (*
time_func
)(
mbedés_time_t
 *
time
));

270 #i‡
	`deföed
(
MBEDTLS_PLATFORM_TIME_MACRO
)

271 
	#mbedés_time
 
MBEDTLS_PLATFORM_TIME_MACRO


	)

273 
	#mbedés_time
 
time


	)

283 #i‡
	`deföed
(
MBEDTLS_ENTROPY_NV_SEED
)

284 #i‡!
	`deföed
(
MBEDTLS_PLATFORM_NO_STD_FUNCTIONS
Ë&& deföed(
MBEDTLS_FS_IO
)

286 
	`mbedés_∂©f‹m_°d_nv_£ed_ªad
(*
buf
, 
size_t
 
buf_Àn
);

287 
	`mbedés_∂©f‹m_°d_nv_£ed_wrôe
(*
buf
, 
size_t
 
buf_Àn
);

290 #i‡
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_ALT
)

291 (*
mbedés_nv_£ed_ªad
)(*
buf
, 
size_t
 
buf_Àn
);

292 (*
mbedés_nv_£ed_wrôe
)(*
buf
, 
size_t
 
buf_Àn
);

302 
	`mbedés_∂©f‹m_£t_nv_£ed
(

303 (*
nv_£ed_ªad_func
)(*
buf
, 
size_t
 
buf_Àn
),

304 (*
nv_£ed_wrôe_func
)(*
buf
, 
size_t
 
buf_Àn
)

307 #i‡
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_READ_MACRO
) && \

308 
	`deföed
(
MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO
)

309 
	#mbedés_nv_£ed_ªad
 
MBEDTLS_PLATFORM_NV_SEED_READ_MACRO


	)

310 
	#mbedés_nv_£ed_wrôe
 
MBEDTLS_PLATFORM_NV_SEED_WRITE_MACRO


	)

312 
	#mbedés_nv_£ed_ªad
 
mbedés_∂©f‹m_°d_nv_£ed_ªad


	)

313 
	#mbedés_nv_£ed_wrôe
 
mbedés_∂©f‹m_°d_nv_£ed_wrôe


	)

318 #ifde‡
__˝lu•lus


319 
	}
}

	@include_lib/net/mbedtls/ripemd160.h

23 #i‚de‡
MBEDTLS_RIPEMD160_H


24 
	#MBEDTLS_RIPEMD160_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_RIPEMD160_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt32_t
 
tŸÆ
[2];

48 
uöt32_t
 
°©e
[5];

49 
buf„r
[64];

51 
	tmbedés_rùemd160_c⁄ãxt
;

58 
mbedés_rùemd160_öô
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
);

65 
mbedés_rùemd160_‰ì
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
);

73 
mbedés_rùemd160_˛⁄e
(
mbedés_rùemd160_c⁄ãxt
 *
d°
,

74 c⁄° 
mbedés_rùemd160_c⁄ãxt
 *
§c
);

81 
mbedés_rùemd160_°¨ts
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
);

90 
mbedés_rùemd160_upd©e
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
,

91 c⁄° *
öput
, 
size_t
 
ûí
);

99 
mbedés_rùemd160_föish
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
, 
ouçut
[20]);

102 
mbedés_rùemd160_¥o˚ss
(
mbedés_rùemd160_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64]);

104 #ifde‡
__˝lu•lus


109 
	~"rùemd160.h
"

112 #ifde‡
__˝lu•lus


123 
mbedés_rùemd160
(c⁄° *
öput
, 
size_t
 
ûí
,

124 
ouçut
[20]);

131 
mbedés_rùemd160_£lf_ã°
(
vîbo£
);

133 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/rsa.h

23 #i‚de‡
MBEDTLS_RSA_H


24 
	#MBEDTLS_RSA_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"bignum.h
"

33 
	~"md.h
"

35 #i‡
deföed
(
MBEDTLS_THREADING_C
)

36 
	~"thªadög.h
"

42 
	#MBEDTLS_ERR_RSA_BAD_INPUT_DATA
 -0x4080

	)

43 
	#MBEDTLS_ERR_RSA_INVALID_PADDING
 -0x4100

	)

44 
	#MBEDTLS_ERR_RSA_KEY_GEN_FAILED
 -0x4180

	)

45 
	#MBEDTLS_ERR_RSA_KEY_CHECK_FAILED
 -0x4200

	)

46 
	#MBEDTLS_ERR_RSA_PUBLIC_FAILED
 -0x4280

	)

47 
	#MBEDTLS_ERR_RSA_PRIVATE_FAILED
 -0x4300

	)

48 
	#MBEDTLS_ERR_RSA_VERIFY_FAILED
 -0x4380

	)

49 
	#MBEDTLS_ERR_RSA_OUTPUT_TOO_LARGE
 -0x4400

	)

50 
	#MBEDTLS_ERR_RSA_RNG_FAILED
 -0x4480

	)

55 
	#MBEDTLS_RSA_PUBLIC
 0

	)

56 
	#MBEDTLS_RSA_PRIVATE
 1

	)

58 
	#MBEDTLS_RSA_PKCS_V15
 0

	)

59 
	#MBEDTLS_RSA_PKCS_V21
 1

	)

61 
	#MBEDTLS_RSA_SIGN
 1

	)

62 
	#MBEDTLS_RSA_CRYPT
 2

	)

64 
	#MBEDTLS_RSA_SALT_LEN_ANY
 -1

	)

70 #i‡
deföed
(
MBEDTLS_RSA_C
)

72 #ifde‡
__˝lu•lus


80 
vî
;

81 
size_t
 
Àn
;

83 
mbedés_mpi
 
N
;

84 
mbedés_mpi
 
E
;

86 
mbedés_mpi
 
D
;

87 
mbedés_mpi
 
P
;

88 
mbedés_mpi
 
Q
;

89 
mbedés_mpi
 
DP
;

90 
mbedés_mpi
 
DQ
;

91 
mbedés_mpi
 
QP
;

93 
mbedés_mpi
 
RN
;

94 
mbedés_mpi
 
RP
;

95 
mbedés_mpi
 
RQ
;

97 
mbedés_mpi
 
Vi
;

98 
mbedés_mpi
 
Vf
;

100 
∑ddög
;

102 
hash_id
;

106 #i‡
deföed
(
MBEDTLS_THREADING_C
)

107 
mbedés_thªadög_muãx_t
 
muãx
;

110 
	tmbedés_rß_c⁄ãxt
;

136 
mbedés_rß_öô
(
mbedés_rß_c⁄ãxt
 *
˘x
,

137 
∑ddög
,

138 
hash_id
);

148 
mbedés_rß_£t_∑ddög
(
mbedés_rß_c⁄ãxt
 *
˘x
, 
∑ddög
, 
hash_id
);

164 
mbedés_rß_gí_key
(
mbedés_rß_c⁄ãxt
 *
˘x
,

165 (*
f_∫g
)(*, *, 
size_t
),

166 *
p_∫g
,

167 
nbôs
, 
exp⁄ít
);

176 
mbedés_rß_check_pubkey
(c⁄° 
mbedés_rß_c⁄ãxt
 *
˘x
);

185 
mbedés_rß_check_¥ivkey
(c⁄° 
mbedés_rß_c⁄ãxt
 *
˘x
);

196 
mbedés_rß_check_pub_¥iv
(c⁄° 
mbedés_rß_c⁄ãxt
 *
pub
, c⁄° mbedés_rß_c⁄ãxà*
¥v
);

214 
mbedés_rß_public
(
mbedés_rß_c⁄ãxt
 *
˘x
,

215 c⁄° *
öput
,

216 *
ouçut
);

232 
mbedés_rß_¥iv©e
(
mbedés_rß_c⁄ãxt
 *
˘x
,

233 (*
f_∫g
)(*, *, 
size_t
),

234 *
p_∫g
,

235 c⁄° *
öput
,

236 *
ouçut
);

257 
mbedés_rß_pkcs1_í¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

258 (*
f_∫g
)(*, *, 
size_t
),

259 *
p_∫g
,

260 
mode
, 
size_t
 
ûí
,

261 c⁄° *
öput
,

262 *
ouçut
);

280 
mbedés_rß_rßes_pkcs1_v15_í¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

281 (*
f_∫g
)(*, *, 
size_t
),

282 *
p_∫g
,

283 
mode
, 
size_t
 
ûí
,

284 c⁄° *
öput
,

285 *
ouçut
);

306 
mbedés_rß_rßes_ﬂï_í¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

307 (*
f_∫g
)(*, *, 
size_t
),

308 *
p_∫g
,

309 
mode
,

310 c⁄° *
œbñ
, 
size_t
 
œbñ_Àn
,

311 
size_t
 
ûí
,

312 c⁄° *
öput
,

313 *
ouçut
);

335 
mbedés_rß_pkcs1_de¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

336 (*
f_∫g
)(*, *, 
size_t
),

337 *
p_∫g
,

338 
mode
, 
size_t
 *
ﬁí
,

339 c⁄° *
öput
,

340 *
ouçut
,

341 
size_t
 
ouçut_max_Àn
);

361 
mbedés_rß_rßes_pkcs1_v15_de¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

362 (*
f_∫g
)(*, *, 
size_t
),

363 *
p_∫g
,

364 
mode
, 
size_t
 *
ﬁí
,

365 c⁄° *
öput
,

366 *
ouçut
,

367 
size_t
 
ouçut_max_Àn
);

389 
mbedés_rß_rßes_ﬂï_de¸y±
(
mbedés_rß_c⁄ãxt
 *
˘x
,

390 (*
f_∫g
)(*, *, 
size_t
),

391 *
p_∫g
,

392 
mode
,

393 c⁄° *
œbñ
, 
size_t
 
œbñ_Àn
,

394 
size_t
 *
ﬁí
,

395 c⁄° *
öput
,

396 *
ouçut
,

397 
size_t
 
ouçut_max_Àn
);

423 
mbedés_rß_pkcs1_sign
(
mbedés_rß_c⁄ãxt
 *
˘x
,

424 (*
f_∫g
)(*, *, 
size_t
),

425 *
p_∫g
,

426 
mode
,

427 
mbedés_md_ty≥_t
 
md_Æg
,

428 
hashÀn
,

429 c⁄° *
hash
,

430 *
sig
);

450 
mbedés_rß_rßsß_pkcs1_v15_sign
(
mbedés_rß_c⁄ãxt
 *
˘x
,

451 (*
f_∫g
)(*, *, 
size_t
),

452 *
p_∫g
,

453 
mode
,

454 
mbedés_md_ty≥_t
 
md_Æg
,

455 
hashÀn
,

456 c⁄° *
hash
,

457 *
sig
);

483 
mbedés_rß_rßsß_pss_sign
(
mbedés_rß_c⁄ãxt
 *
˘x
,

484 (*
f_∫g
)(*, *, 
size_t
),

485 *
p_∫g
,

486 
mode
,

487 
mbedés_md_ty≥_t
 
md_Æg
,

488 
hashÀn
,

489 c⁄° *
hash
,

490 *
sig
);

515 
mbedés_rß_pkcs1_vîify
(
mbedés_rß_c⁄ãxt
 *
˘x
,

516 (*
f_∫g
)(*, *, 
size_t
),

517 *
p_∫g
,

518 
mode
,

519 
mbedés_md_ty≥_t
 
md_Æg
,

520 
hashÀn
,

521 c⁄° *
hash
,

522 c⁄° *
sig
);

542 
mbedés_rß_rßsß_pkcs1_v15_vîify
(
mbedés_rß_c⁄ãxt
 *
˘x
,

543 (*
f_∫g
)(*, *, 
size_t
),

544 *
p_∫g
,

545 
mode
,

546 
mbedés_md_ty≥_t
 
md_Æg
,

547 
hashÀn
,

548 c⁄° *
hash
,

549 c⁄° *
sig
);

576 
mbedés_rß_rßsß_pss_vîify
(
mbedés_rß_c⁄ãxt
 *
˘x
,

577 (*
f_∫g
)(*, *, 
size_t
),

578 *
p_∫g
,

579 
mode
,

580 
mbedés_md_ty≥_t
 
md_Æg
,

581 
hashÀn
,

582 c⁄° *
hash
,

583 c⁄° *
sig
);

609 
mbedés_rß_rßsß_pss_vîify_ext
(
mbedés_rß_c⁄ãxt
 *
˘x
,

610 (*
f_∫g
)(*, *, 
size_t
),

611 *
p_∫g
,

612 
mode
,

613 
mbedés_md_ty≥_t
 
md_Æg
,

614 
hashÀn
,

615 c⁄° *
hash
,

616 
mbedés_md_ty≥_t
 
mgf1_hash_id
,

617 
ex≥˘ed_ß…_Àn
,

618 c⁄° *
sig
);

629 
mbedés_rß_c›y
(
mbedés_rß_c⁄ãxt
 *
d°
, c⁄° mbedés_rß_c⁄ãxà*
§c
);

636 
mbedés_rß_‰ì
(
mbedés_rß_c⁄ãxt
 *
˘x
);

643 
mbedés_rß_£lf_ã°
(
vîbo£
);

645 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/sha1.h

23 #i‚de‡
MBEDTLS_SHA1_H


24 
	#MBEDTLS_SHA1_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_SHA1_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt32_t
 
sha1_is_°¨t
;

48 
uöt32_t
 
tŸÆ
[2];

49 
uöt32_t
 
°©e
[5];

50 
buf„r
[64];

52 
	tmbedés_sha1_c⁄ãxt
;

59 
mbedés_sha1_öô
(
mbedés_sha1_c⁄ãxt
 *
˘x
);

66 
mbedés_sha1_‰ì
(
mbedés_sha1_c⁄ãxt
 *
˘x
);

74 
mbedés_sha1_˛⁄e
(
mbedés_sha1_c⁄ãxt
 *
d°
,

75 c⁄° 
mbedés_sha1_c⁄ãxt
 *
§c
);

82 
mbedés_sha1_°¨ts
(
mbedés_sha1_c⁄ãxt
 *
˘x
);

91 
mbedés_sha1_upd©e
(
mbedés_sha1_c⁄ãxt
 *
˘x
, c⁄° *
öput
, 
size_t
 
ûí
);

99 
mbedés_sha1_föish
(
mbedés_sha1_c⁄ãxt
 *
˘x
, 
ouçut
[20]);

102 
mbedés_sha1_¥o˚ss
(
mbedés_sha1_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64]);

104 #ifde‡
__˝lu•lus


109 
	~"sha1_Æt.h
"

112 #ifde‡
__˝lu•lus


123 
mbedés_sha1
(c⁄° *
öput
, 
size_t
 
ûí
, 
ouçut
[20]);

130 
mbedés_sha1_£lf_ã°
(
vîbo£
);

132 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/sha256.h

23 #i‚de‡
MBEDTLS_SHA256_H


24 
	#MBEDTLS_SHA256_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_SHA256_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt32_t
 
tŸÆ
[2];

48 
uöt32_t
 
°©e
[8];

49 
buf„r
[64];

50 
is224
;

52 
	tmbedés_sha256_c⁄ãxt
;

59 
mbedés_sha256_öô
(
mbedés_sha256_c⁄ãxt
 *
˘x
);

66 
mbedés_sha256_‰ì
(
mbedés_sha256_c⁄ãxt
 *
˘x
);

74 
mbedés_sha256_˛⁄e
(
mbedés_sha256_c⁄ãxt
 *
d°
,

75 c⁄° 
mbedés_sha256_c⁄ãxt
 *
§c
);

83 
mbedés_sha256_°¨ts
(
mbedés_sha256_c⁄ãxt
 *
˘x
, 
is224
);

92 
mbedés_sha256_upd©e
(
mbedés_sha256_c⁄ãxt
 *
˘x
, c⁄° *
öput
,

93 
size_t
 
ûí
);

101 
mbedés_sha256_föish
(
mbedés_sha256_c⁄ãxt
 *
˘x
, 
ouçut
[32]);

104 
mbedés_sha256_¥o˚ss
(
mbedés_sha256_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[64]);

106 #ifde‡
__˝lu•lus


111 
	~"sha256_Æt.h
"

114 #ifde‡
__˝lu•lus


126 
mbedés_sha256
(c⁄° *
öput
, 
size_t
 
ûí
,

127 
ouçut
[32], 
is224
);

134 
mbedés_sha256_£lf_ã°
(
vîbo£
);

136 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/sha512.h

23 #i‚de‡
MBEDTLS_SHA512_H


24 
	#MBEDTLS_SHA512_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 #i‡!
deföed
(
MBEDTLS_SHA512_ALT
)

39 #ifde‡
__˝lu•lus


47 
uöt64_t
 
tŸÆ
[2];

48 
uöt64_t
 
°©e
[8];

49 
buf„r
[128];

50 
is384
;

52 
	tmbedés_sha512_c⁄ãxt
;

59 
mbedés_sha512_öô
(
mbedés_sha512_c⁄ãxt
 *
˘x
);

66 
mbedés_sha512_‰ì
(
mbedés_sha512_c⁄ãxt
 *
˘x
);

74 
mbedés_sha512_˛⁄e
(
mbedés_sha512_c⁄ãxt
 *
d°
,

75 c⁄° 
mbedés_sha512_c⁄ãxt
 *
§c
);

83 
mbedés_sha512_°¨ts
(
mbedés_sha512_c⁄ãxt
 *
˘x
, 
is384
);

92 
mbedés_sha512_upd©e
(
mbedés_sha512_c⁄ãxt
 *
˘x
, c⁄° *
öput
,

93 
size_t
 
ûí
);

101 
mbedés_sha512_föish
(
mbedés_sha512_c⁄ãxt
 *
˘x
, 
ouçut
[64]);

103 #ifde‡
__˝lu•lus


108 
	~"sha512_Æt.h
"

111 #ifde‡
__˝lu•lus


123 
mbedés_sha512
(c⁄° *
öput
, 
size_t
 
ûí
,

124 
ouçut
[64], 
is384
);

131 
mbedés_sha512_£lf_ã°
(
vîbo£
);

134 
mbedés_sha512_¥o˚ss
(
mbedés_sha512_c⁄ãxt
 *
˘x
, c⁄° 
d©a
[128]);

136 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ssl.h

23 #i‚de‡
MBEDTLS_SSL_H


24 
	#MBEDTLS_SSL_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"bignum.h
"

33 
	~"e˝.h
"

35 
	~"s¶_cùhîsuôes.h
"

37 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

38 
	~"x509_¸t.h
"

39 
	~"x509_¸l.h
"

42 #i‡
deföed
(
MBEDTLS_DHM_C
)

43 
	~"dhm.h
"

46 #i‡
deföed
(
MBEDTLS_ECDH_C
)

47 
	~"ecdh.h
"

50 #i‡
deföed
(
MBEDTLS_ZLIB_SUPPORT
)

51 
	~"zlib.h
"

54 #i‡
deföed
(
MBEDTLS_HAVE_TIME
)

55 
	~<time.h
>

61 
	#MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE
 -0x7080

	)

62 
	#MBEDTLS_ERR_SSL_BAD_INPUT_DATA
 -0x7100

	)

63 
	#MBEDTLS_ERR_SSL_INVALID_MAC
 -0x7180

	)

64 
	#MBEDTLS_ERR_SSL_INVALID_RECORD
 -0x7200

	)

65 
	#MBEDTLS_ERR_SSL_CONN_EOF
 -0x7280

	)

66 
	#MBEDTLS_ERR_SSL_UNKNOWN_CIPHER
 -0x7300

	)

67 
	#MBEDTLS_ERR_SSL_NO_CIPHER_CHOSEN
 -0x7380

	)

68 
	#MBEDTLS_ERR_SSL_NO_RNG
 -0x7400

	)

69 
	#MBEDTLS_ERR_SSL_NO_CLIENT_CERTIFICATE
 -0x7480

	)

70 
	#MBEDTLS_ERR_SSL_CERTIFICATE_TOO_LARGE
 -0x7500

	)

71 
	#MBEDTLS_ERR_SSL_CERTIFICATE_REQUIRED
 -0x7580

	)

72 
	#MBEDTLS_ERR_SSL_PRIVATE_KEY_REQUIRED
 -0x7600

	)

73 
	#MBEDTLS_ERR_SSL_CA_CHAIN_REQUIRED
 -0x7680

	)

74 
	#MBEDTLS_ERR_SSL_UNEXPECTED_MESSAGE
 -0x7700

	)

75 
	#MBEDTLS_ERR_SSL_FATAL_ALERT_MESSAGE
 -0x7780

	)

76 
	#MBEDTLS_ERR_SSL_PEER_VERIFY_FAILED
 -0x7800

	)

77 
	#MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY
 -0x7880

	)

78 
	#MBEDTLS_ERR_SSL_BAD_HS_CLIENT_HELLO
 -0x7900

	)

79 
	#MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO
 -0x7980

	)

80 
	#MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE
 -0x7A00

	)

81 
	#MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_REQUEST
 -0x7A80

	)

82 
	#MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE
 -0x7B00

	)

83 
	#MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO_DONE
 -0x7B80

	)

84 
	#MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE
 -0x7C00

	)

85 
	#MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_RP
 -0x7C80

	)

86 
	#MBEDTLS_ERR_SSL_BAD_HS_CLIENT_KEY_EXCHANGE_CS
 -0x7D00

	)

87 
	#MBEDTLS_ERR_SSL_BAD_HS_CERTIFICATE_VERIFY
 -0x7D80

	)

88 
	#MBEDTLS_ERR_SSL_BAD_HS_CHANGE_CIPHER_SPEC
 -0x7E00

	)

89 
	#MBEDTLS_ERR_SSL_BAD_HS_FINISHED
 -0x7E80

	)

90 
	#MBEDTLS_ERR_SSL_ALLOC_FAILED
 -0x7F00

	)

91 
	#MBEDTLS_ERR_SSL_HW_ACCEL_FAILED
 -0x7F80

	)

92 
	#MBEDTLS_ERR_SSL_HW_ACCEL_FALLTHROUGH
 -0x6F80

	)

93 
	#MBEDTLS_ERR_SSL_COMPRESSION_FAILED
 -0x6F00

	)

94 
	#MBEDTLS_ERR_SSL_BAD_HS_PROTOCOL_VERSION
 -0x6E80

	)

95 
	#MBEDTLS_ERR_SSL_BAD_HS_NEW_SESSION_TICKET
 -0x6E00

	)

96 
	#MBEDTLS_ERR_SSL_SESSION_TICKET_EXPIRED
 -0x6D80

	)

97 
	#MBEDTLS_ERR_SSL_PK_TYPE_MISMATCH
 -0x6D00

	)

98 
	#MBEDTLS_ERR_SSL_UNKNOWN_IDENTITY
 -0x6C80

	)

99 
	#MBEDTLS_ERR_SSL_INTERNAL_ERROR
 -0x6C00

	)

100 
	#MBEDTLS_ERR_SSL_COUNTER_WRAPPING
 -0x6B80

	)

101 
	#MBEDTLS_ERR_SSL_WAITING_SERVER_HELLO_RENEGO
 -0x6B00

	)

102 
	#MBEDTLS_ERR_SSL_HELLO_VERIFY_REQUIRED
 -0x6A80

	)

103 
	#MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL
 -0x6A00

	)

104 
	#MBEDTLS_ERR_SSL_NO_USABLE_CIPHERSUITE
 -0x6980

	)

105 
	#MBEDTLS_ERR_SSL_WANT_READ
 -0x6900

	)

106 
	#MBEDTLS_ERR_SSL_WANT_WRITE
 -0x6880

	)

107 
	#MBEDTLS_ERR_SSL_TIMEOUT
 -0x6800

	)

108 
	#MBEDTLS_ERR_SSL_CLIENT_RECONNECT
 -0x6780

	)

109 
	#MBEDTLS_ERR_SSL_UNEXPECTED_RECORD
 -0x6700

	)

114 
	#MBEDTLS_SSL_MAJOR_VERSION_3
 3

	)

115 
	#MBEDTLS_SSL_MINOR_VERSION_0
 0

	)

116 
	#MBEDTLS_SSL_MINOR_VERSION_1
 1

	)

117 
	#MBEDTLS_SSL_MINOR_VERSION_2
 2

	)

118 
	#MBEDTLS_SSL_MINOR_VERSION_3
 3

	)

120 
	#MBEDTLS_SSL_TRANSPORT_STREAM
 0

	)

121 
	#MBEDTLS_SSL_TRANSPORT_DATAGRAM
 1

	)

123 
	#MBEDTLS_SSL_MAX_HOST_NAME_LEN
 255

	)

127 
	#MBEDTLS_SSL_MAX_FRAG_LEN_NONE
 0

	)

128 
	#MBEDTLS_SSL_MAX_FRAG_LEN_512
 1

	)

129 
	#MBEDTLS_SSL_MAX_FRAG_LEN_1024
 2

	)

130 
	#MBEDTLS_SSL_MAX_FRAG_LEN_2048
 3

	)

131 
	#MBEDTLS_SSL_MAX_FRAG_LEN_4096
 4

	)

132 
	#MBEDTLS_SSL_MAX_FRAG_LEN_INVALID
 5

	)

134 
	#MBEDTLS_SSL_IS_CLIENT
 0

	)

135 
	#MBEDTLS_SSL_IS_SERVER
 1

	)

137 
	#MBEDTLS_SSL_IS_NOT_FALLBACK
 0

	)

138 
	#MBEDTLS_SSL_IS_FALLBACK
 1

	)

140 
	#MBEDTLS_SSL_EXTENDED_MS_DISABLED
 0

	)

141 
	#MBEDTLS_SSL_EXTENDED_MS_ENABLED
 1

	)

143 
	#MBEDTLS_SSL_ETM_DISABLED
 0

	)

144 
	#MBEDTLS_SSL_ETM_ENABLED
 1

	)

146 
	#MBEDTLS_SSL_COMPRESS_NULL
 0

	)

147 
	#MBEDTLS_SSL_COMPRESS_DEFLATE
 1

	)

149 
	#MBEDTLS_SSL_VERIFY_NONE
 0

	)

150 
	#MBEDTLS_SSL_VERIFY_OPTIONAL
 1

	)

151 
	#MBEDTLS_SSL_VERIFY_REQUIRED
 2

	)

152 
	#MBEDTLS_SSL_VERIFY_UNSET
 3

	)

154 
	#MBEDTLS_SSL_LEGACY_RENEGOTIATION
 0

	)

155 
	#MBEDTLS_SSL_SECURE_RENEGOTIATION
 1

	)

157 
	#MBEDTLS_SSL_RENEGOTIATION_DISABLED
 0

	)

158 
	#MBEDTLS_SSL_RENEGOTIATION_ENABLED
 1

	)

160 
	#MBEDTLS_SSL_ANTI_REPLAY_DISABLED
 0

	)

161 
	#MBEDTLS_SSL_ANTI_REPLAY_ENABLED
 1

	)

163 
	#MBEDTLS_SSL_RENEGOTIATION_NOT_ENFORCED
 -1

	)

164 
	#MBEDTLS_SSL_RENEGO_MAX_RECORDS_DEFAULT
 16

	)

166 
	#MBEDTLS_SSL_LEGACY_NO_RENEGOTIATION
 0

	)

167 
	#MBEDTLS_SSL_LEGACY_ALLOW_RENEGOTIATION
 1

	)

168 
	#MBEDTLS_SSL_LEGACY_BREAK_HANDSHAKE
 2

	)

170 
	#MBEDTLS_SSL_TRUNC_HMAC_DISABLED
 0

	)

171 
	#MBEDTLS_SSL_TRUNC_HMAC_ENABLED
 1

	)

172 
	#MBEDTLS_SSL_TRUNCATED_HMAC_LEN
 10

	)

174 
	#MBEDTLS_SSL_SESSION_TICKETS_DISABLED
 0

	)

175 
	#MBEDTLS_SSL_SESSION_TICKETS_ENABLED
 1

	)

177 
	#MBEDTLS_SSL_CBC_RECORD_SPLITTING_DISABLED
 0

	)

178 
	#MBEDTLS_SSL_CBC_RECORD_SPLITTING_ENABLED
 1

	)

180 
	#MBEDTLS_SSL_ARC4_ENABLED
 0

	)

181 
	#MBEDTLS_SSL_ARC4_DISABLED
 1

	)

183 
	#MBEDTLS_SSL_PRESET_DEFAULT
 0

	)

184 
	#MBEDTLS_SSL_PRESET_SUITEB
 2

	)

190 
	#MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MIN
 1000

	)

191 
	#MBEDTLS_SSL_DTLS_TIMEOUT_DFL_MAX
 60000

	)

201 #i‡!
deföed
(
MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME
)

202 
	#MBEDTLS_SSL_DEFAULT_TICKET_LIFETIME
 86400

	)

216 #i‡!
deföed
(
MBEDTLS_SSL_MAX_CONTENT_LEN
)

217 
	#MBEDTLS_SSL_MAX_CONTENT_LEN
 16384

	)

225 #i‡
deföed
(
MBEDTLS_SSL_PROTO_SSL3
)

226 
	#MBEDTLS_SSL_VERIFY_DATA_MAX_LEN
 36

	)

228 
	#MBEDTLS_SSL_VERIFY_DATA_MAX_LEN
 12

	)

234 
	#MBEDTLS_SSL_EMPTY_RENEGOTIATION_INFO
 0xFF

	)

235 
	#MBEDTLS_SSL_FALLBACK_SCSV_VALUE
 0x5600

	)

241 
	#MBEDTLS_SSL_HASH_NONE
 0

	)

242 
	#MBEDTLS_SSL_HASH_MD5
 1

	)

243 
	#MBEDTLS_SSL_HASH_SHA1
 2

	)

244 
	#MBEDTLS_SSL_HASH_SHA224
 3

	)

245 
	#MBEDTLS_SSL_HASH_SHA256
 4

	)

246 
	#MBEDTLS_SSL_HASH_SHA384
 5

	)

247 
	#MBEDTLS_SSL_HASH_SHA512
 6

	)

249 
	#MBEDTLS_SSL_SIG_ANON
 0

	)

250 
	#MBEDTLS_SSL_SIG_RSA
 1

	)

251 
	#MBEDTLS_SSL_SIG_ECDSA
 3

	)

257 
	#MBEDTLS_SSL_CERT_TYPE_RSA_SIGN
 1

	)

258 
	#MBEDTLS_SSL_CERT_TYPE_ECDSA_SIGN
 64

	)

263 
	#MBEDTLS_SSL_MSG_CHANGE_CIPHER_SPEC
 20

	)

264 
	#MBEDTLS_SSL_MSG_ALERT
 21

	)

265 
	#MBEDTLS_SSL_MSG_HANDSHAKE
 22

	)

266 
	#MBEDTLS_SSL_MSG_APPLICATION_DATA
 23

	)

268 
	#MBEDTLS_SSL_ALERT_LEVEL_WARNING
 1

	)

269 
	#MBEDTLS_SSL_ALERT_LEVEL_FATAL
 2

	)

271 
	#MBEDTLS_SSL_ALERT_MSG_CLOSE_NOTIFY
 0

	)

272 
	#MBEDTLS_SSL_ALERT_MSG_UNEXPECTED_MESSAGE
 10

	)

273 
	#MBEDTLS_SSL_ALERT_MSG_BAD_RECORD_MAC
 20

	)

274 
	#MBEDTLS_SSL_ALERT_MSG_DECRYPTION_FAILED
 21

	)

275 
	#MBEDTLS_SSL_ALERT_MSG_RECORD_OVERFLOW
 22

	)

276 
	#MBEDTLS_SSL_ALERT_MSG_DECOMPRESSION_FAILURE
 30

	)

277 
	#MBEDTLS_SSL_ALERT_MSG_HANDSHAKE_FAILURE
 40

	)

278 
	#MBEDTLS_SSL_ALERT_MSG_NO_CERT
 41

	)

279 
	#MBEDTLS_SSL_ALERT_MSG_BAD_CERT
 42

	)

280 
	#MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT
 43

	)

281 
	#MBEDTLS_SSL_ALERT_MSG_CERT_REVOKED
 44

	)

282 
	#MBEDTLS_SSL_ALERT_MSG_CERT_EXPIRED
 45

	)

283 
	#MBEDTLS_SSL_ALERT_MSG_CERT_UNKNOWN
 46

	)

284 
	#MBEDTLS_SSL_ALERT_MSG_ILLEGAL_PARAMETER
 47

	)

285 
	#MBEDTLS_SSL_ALERT_MSG_UNKNOWN_CA
 48

	)

286 
	#MBEDTLS_SSL_ALERT_MSG_ACCESS_DENIED
 49

	)

287 
	#MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR
 50

	)

288 
	#MBEDTLS_SSL_ALERT_MSG_DECRYPT_ERROR
 51

	)

289 
	#MBEDTLS_SSL_ALERT_MSG_EXPORT_RESTRICTION
 60

	)

290 
	#MBEDTLS_SSL_ALERT_MSG_PROTOCOL_VERSION
 70

	)

291 
	#MBEDTLS_SSL_ALERT_MSG_INSUFFICIENT_SECURITY
 71

	)

292 
	#MBEDTLS_SSL_ALERT_MSG_INTERNAL_ERROR
 80

	)

293 
	#MBEDTLS_SSL_ALERT_MSG_INAPROPRIATE_FALLBACK
 86

	)

294 
	#MBEDTLS_SSL_ALERT_MSG_USER_CANCELED
 90

	)

295 
	#MBEDTLS_SSL_ALERT_MSG_NO_RENEGOTIATION
 100

	)

296 
	#MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_EXT
 110

	)

297 
	#MBEDTLS_SSL_ALERT_MSG_UNRECOGNIZED_NAME
 112

	)

298 
	#MBEDTLS_SSL_ALERT_MSG_UNKNOWN_PSK_IDENTITY
 115

	)

299 
	#MBEDTLS_SSL_ALERT_MSG_NO_APPLICATION_PROTOCOL
 120

	)

301 
	#MBEDTLS_SSL_HS_HELLO_REQUEST
 0

	)

302 
	#MBEDTLS_SSL_HS_CLIENT_HELLO
 1

	)

303 
	#MBEDTLS_SSL_HS_SERVER_HELLO
 2

	)

304 
	#MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST
 3

	)

305 
	#MBEDTLS_SSL_HS_NEW_SESSION_TICKET
 4

	)

306 
	#MBEDTLS_SSL_HS_CERTIFICATE
 11

	)

307 
	#MBEDTLS_SSL_HS_SERVER_KEY_EXCHANGE
 12

	)

308 
	#MBEDTLS_SSL_HS_CERTIFICATE_REQUEST
 13

	)

309 
	#MBEDTLS_SSL_HS_SERVER_HELLO_DONE
 14

	)

310 
	#MBEDTLS_SSL_HS_CERTIFICATE_VERIFY
 15

	)

311 
	#MBEDTLS_SSL_HS_CLIENT_KEY_EXCHANGE
 16

	)

312 
	#MBEDTLS_SSL_HS_FINISHED
 20

	)

317 
	#MBEDTLS_TLS_EXT_SERVERNAME
 0

	)

318 
	#MBEDTLS_TLS_EXT_SERVERNAME_HOSTNAME
 0

	)

320 
	#MBEDTLS_TLS_EXT_MAX_FRAGMENT_LENGTH
 1

	)

322 
	#MBEDTLS_TLS_EXT_TRUNCATED_HMAC
 4

	)

324 
	#MBEDTLS_TLS_EXT_SUPPORTED_ELLIPTIC_CURVES
 10

	)

325 
	#MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS
 11

	)

327 
	#MBEDTLS_TLS_EXT_SIG_ALG
 13

	)

329 
	#MBEDTLS_TLS_EXT_ALPN
 16

	)

331 
	#MBEDTLS_TLS_EXT_ENCRYPT_THEN_MAC
 22

	)

332 
	#MBEDTLS_TLS_EXT_EXTENDED_MASTER_SECRET
 0x0017

	)

334 
	#MBEDTLS_TLS_EXT_SESSION_TICKET
 35

	)

336 
	#MBEDTLS_TLS_EXT_ECJPAKE_KKPP
 256

	)

338 
	#MBEDTLS_TLS_EXT_RENEGOTIATION_INFO
 0xFF01

	)

343 #i‡!
deföed
(
MBEDTLS_PSK_MAX_LEN
)

344 
	#MBEDTLS_PSK_MAX_LEN
 32

	)

348 
	umbedés_s¶_¥ema°î_£¸ë
 {

349 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
)

350 
	m_pms_rß
[48];

352 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
)

353 
	m_pms_dhm
[
MBEDTLS_MPI_MAX_SIZE
];

355 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
) || \

356 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
) || \

357 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
) || \

358 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
)

359 
	m_pms_ecdh
[
MBEDTLS_ECP_MAX_BYTES
];

361 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
)

362 
	m_pms_psk
[4 + 2 * 
MBEDTLS_PSK_MAX_LEN
];

364 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
)

365 
	m_pms_dhe_psk
[4 + 
MBEDTLS_MPI_MAX_SIZE


366 + 
MBEDTLS_PSK_MAX_LEN
];

368 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
)

369 
	m_pms_rß_psk
[52 + 
MBEDTLS_PSK_MAX_LEN
];

371 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
)

372 
	m_pms_ecdhe_psk
[4 + 
MBEDTLS_ECP_MAX_BYTES


373 + 
MBEDTLS_PSK_MAX_LEN
];

375 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
)

376 
	m_pms_ecj∑ke
[32];

380 
	#MBEDTLS_PREMASTER_SIZE
 –
mbedés_s¶_¥ema°î_£¸ë
 )

	)

382 #ifde‡
__˝lu•lus


390 
MBEDTLS_SSL_HELLO_REQUEST
 = 0x0,

391 
MBEDTLS_SSL_CLIENT_HELLO
,

392 
MBEDTLS_SSL_SERVER_HELLO
,

393 
MBEDTLS_SSL_SERVER_CERTIFICATE
,

394 
MBEDTLS_SSL_SERVER_KEY_EXCHANGE
,

395 
MBEDTLS_SSL_CERTIFICATE_REQUEST
,

396 
MBEDTLS_SSL_SERVER_HELLO_DONE
,

397 
MBEDTLS_SSL_CLIENT_CERTIFICATE
,

398 
MBEDTLS_SSL_CLIENT_KEY_EXCHANGE
,

399 
MBEDTLS_SSL_CERTIFICATE_VERIFY
,

400 
MBEDTLS_SSL_CLIENT_CHANGE_CIPHER_SPEC
,

401 
MBEDTLS_SSL_CLIENT_FINISHED
,

402 
MBEDTLS_SSL_SERVER_CHANGE_CIPHER_SPEC
,

403 
MBEDTLS_SSL_SERVER_FINISHED
,

404 
MBEDTLS_SSL_FLUSH_BUFFERS
,

405 
MBEDTLS_SSL_HANDSHAKE_WRAPUP
,

406 
MBEDTLS_SSL_HANDSHAKE_OVER
,

407 
MBEDTLS_SSL_SERVER_NEW_SESSION_TICKET
,

408 
MBEDTLS_SSL_SERVER_HELLO_VERIFY_REQUEST_SENT
,

410 
	tmbedés_s¶_°©es
;

429 
	tmbedés_s¶_£nd_t
(*
	t˘x
,

430 c⁄° *
	tbuf
,

431 
	tsize_t
 
	tÀn
);

452 
	tmbedés_s¶_ªcv_t
(*
	t˘x
,

453 *
	tbuf
,

454 
	tsize_t
 
	tÀn
);

478 
	tmbedés_s¶_ªcv_timeout_t
(*
	t˘x
,

479 *
	tbuf
,

480 
	tsize_t
 
	tÀn
,

481 
	tuöt32_t
 
	ttimeout
);

504 
	tmbedés_s¶_£t_timî_t
(*
	t˘x
,

505 
	tuöt32_t
 
	töt_ms
,

506 
	tuöt32_t
 
	tfö_ms
);

519 
	tmbedés_s¶_gë_timî_t
(*
	t˘x
);

523 
mbedés_s¶_£ssi⁄
 
	tmbedés_s¶_£ssi⁄
;

524 
mbedés_s¶_c⁄ãxt
 
	tmbedés_s¶_c⁄ãxt
;

525 
mbedés_s¶_c⁄fig
 
	tmbedés_s¶_c⁄fig
;

528 
mbedés_s¶_å™sf‹m
 
	tmbedés_s¶_å™sf‹m
;

529 
mbedés_s¶_h™dshake_∑øms
 
	tmbedés_s¶_h™dshake_∑øms
;

530 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

531 
mbedés_s¶_key_˚π
 
	tmbedés_s¶_key_˚π
;

533 #i‡
deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

534 
mbedés_s¶_Êight_ôem
 
	tmbedés_s¶_Êight_ôem
;

540 
	smbedés_s¶_£ssi⁄
 {

541 #i‡
deföed
(
MBEDTLS_HAVE_TIME
)

542 
mbedés_time_t
 
°¨t
;

544 
cùhîsuôe
;

545 
com¥essi⁄
;

546 
size_t
 
id_Àn
;

547 
id
[32];

548 
ma°î
[48];

550 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

551 
mbedés_x509_¸t
 *
≥î_˚π
;

553 
uöt32_t
 
vîify_ªsu…
;

555 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

556 *
tickë
;

557 
size_t
 
tickë_Àn
;

558 
uöt32_t
 
tickë_li„time
;

561 #i‡
deföed
(
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
)

562 
mÊ_code
;

565 #i‡
deföed
(
MBEDTLS_SSL_TRUNCATED_HMAC
)

566 
åunc_hmac
;

569 #i‡
deföed
(
MBEDTLS_SSL_ENCRYPT_THEN_MAC
)

570 
í¸y±_thí_mac
;

577 
	smbedés_s¶_c⁄fig
 {

584 c⁄° *
cùhîsuôe_li°
[4];

587 (*
f_dbg
)(*, , const *, , const *);

588 *
p_dbg
;

591 (*
f_∫g
)(*, *, 
size_t
);

592 *
p_∫g
;

595 (*
f_gë_ˇche
)(*, 
mbedés_s¶_£ssi⁄
 *);

597 (*
f_£t_ˇche
)(*, c⁄° 
mbedés_s¶_£ssi⁄
 *);

598 *
p_ˇche
;

600 #i‡
deföed
(
MBEDTLS_SSL_SERVER_NAME_INDICATION
)

602 (*
f_¢i
)(*, 
mbedés_s¶_c⁄ãxt
 *, c⁄° *, 
size_t
);

603 *
p_¢i
;

606 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

608 (*
f_vrfy
)(*, 
mbedés_x509_¸t
 *, , 
uöt32_t
 *);

609 *
p_vrfy
;

612 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
)

614 (*
f_psk
)(*, 
mbedés_s¶_c⁄ãxt
 *, c⁄° *, 
size_t
);

615 *
p_psk
;

618 #i‡
deföed
(
MBEDTLS_SSL_DTLS_HELLO_VERIFY
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

620 (*
f_cookõ_wrôe
)(*, **, *,

621 c⁄° *, 
size_t
);

623 (*
f_cookõ_check
)(*, c⁄° *, 
size_t
,

624 c⁄° *, 
size_t
);

625 *
p_cookõ
;

628 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

630 (*
f_tickë_wrôe
)(*, c⁄° 
mbedés_s¶_£ssi⁄
 *,

631 *, c⁄° *, 
size_t
 *, 
uöt32_t
 *);

633 (*
f_tickë_∑r£
)(*, 
mbedés_s¶_£ssi⁄
 *, *, 
size_t
);

634 *
p_tickë
;

637 #i‡
deföed
(
MBEDTLS_SSL_EXPORT_KEYS
)

639 (*
f_exp‹t_keys
)(*, const *,

640 c⁄° *, 
size_t
, size_t, size_t);

641 *
p_exp‹t_keys
;

643 
key_∑r£_buf
[256];

646 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

647 c⁄° 
mbedés_x509_¸t_¥ofûe
 *
˚π_¥ofûe
;

648 
mbedés_s¶_key_˚π
 *
key_˚π
;

649 
mbedés_x509_¸t
 *
ˇ_chaö
;

650 
mbedés_x509_¸l
 *
ˇ_¸l
;

653 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED
)

654 c⁄° *
sig_hashes
;

657 #i‡
deföed
(
MBEDTLS_ECP_C
)

658 c⁄° 
mbedés_e˝_group_id
 *
curve_li°
;

661 #i‡
deföed
(
MBEDTLS_DHM_C
)

662 
mbedés_mpi
 
dhm_P
;

663 
mbedés_mpi
 
dhm_G
;

666 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
)

667 *
psk
;

668 
size_t
 
psk_Àn
;

669 *
psk_idítôy
;

670 
size_t
 
psk_idítôy_Àn
;

673 #i‡
deföed
(
MBEDTLS_SSL_ALPN
)

674 c⁄° **
Æ≤_li°
;

681 
uöt32_t
 
ªad_timeout
;

683 #i‡
deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

684 
uöt32_t
 
hs_timeout_mö
;

686 
uöt32_t
 
hs_timeout_max
;

690 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

691 
ª√go_max_ªc‹ds
;

692 
ª√go_≥riod
[8];

696 #i‡
deföed
(
MBEDTLS_SSL_DTLS_BADMAC_LIMIT
)

697 
badmac_limô
;

700 #i‡
deföed
(
MBEDTLS_DHM_C
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

701 
dhm_mö_bôÀn
;

704 
max_maj‹_vî
;

705 
max_mö‹_vî
;

706 
mö_maj‹_vî
;

707 
mö_mö‹_vî
;

713 
ídpoöt
 : 1;

714 
å™•‹t
 : 1;

715 
authmode
 : 2;

717 
Ælow_Àgacy_ª√gŸüti⁄
 : 2 ;

718 #i‡
deföed
(
MBEDTLS_ARC4_C
)

719 
¨c4_dißbÀd
 : 1;

721 #i‡
deföed
(
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
)

722 
mÊ_code
 : 3;

724 #i‡
deföed
(
MBEDTLS_SSL_ENCRYPT_THEN_MAC
)

725 
í¸y±_thí_mac
 : 1 ;

727 #i‡
deföed
(
MBEDTLS_SSL_EXTENDED_MASTER_SECRET
)

728 
exãnded_ms
 : 1;

730 #i‡
deföed
(
MBEDTLS_SSL_DTLS_ANTI_REPLAY
)

731 
™ti_ª∂ay
 : 1;

733 #i‡
deföed
(
MBEDTLS_SSL_CBC_RECORD_SPLITTING
)

734 
cbc_ªc‹d_•lôtög
 : 1;

736 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

737 
dißbÀ_ª√gŸüti⁄
 : 1;

739 #i‡
deföed
(
MBEDTLS_SSL_TRUNCATED_HMAC
)

740 
åunc_hmac
 : 1;

742 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
)

743 
£ssi⁄_tickës
 : 1;

745 #i‡
deföed
(
MBEDTLS_SSL_FALLBACK_SCSV
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

746 
ÁŒback
 : 1;

751 
	smbedés_s¶_c⁄ãxt
 {

752 c⁄° 
mbedés_s¶_c⁄fig
 *
c⁄f
;

757 
°©e
;

758 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

759 
ª√go_°©us
;

760 
ª√go_ªc‹ds_£í
;

765 
maj‹_vî
;

766 
mö‹_vî
;

768 #i‡
deföed
(
MBEDTLS_SSL_DTLS_BADMAC_LIMIT
)

769 
badmac_£í
;

772 
mbedés_s¶_£nd_t
 *
f_£nd
;

773 
mbedés_s¶_ªcv_t
 *
f_ªcv
;

774 
mbedés_s¶_ªcv_timeout_t
 *
f_ªcv_timeout
;

777 *
p_bio
;

782 
mbedés_s¶_£ssi⁄
 *
£ssi⁄_ö
;

783 
mbedés_s¶_£ssi⁄
 *
£ssi⁄_out
;

784 
mbedés_s¶_£ssi⁄
 *
£ssi⁄
;

785 
mbedés_s¶_£ssi⁄
 *
£ssi⁄_√gŸüã
;

787 
mbedés_s¶_h™dshake_∑øms
 *
h™dshake
;

793 
mbedés_s¶_å™sf‹m
 *
å™sf‹m_ö
;

794 
mbedés_s¶_å™sf‹m
 *
å™sf‹m_out
;

795 
mbedés_s¶_å™sf‹m
 *
å™sf‹m
;

796 
mbedés_s¶_å™sf‹m
 *
å™sf‹m_√gŸüã
;

798 
mac_íc_tmp
[64];

799 
mac_dec_tmp
[64];

804 *
p_timî
;

806 
mbedés_s¶_£t_timî_t
 *
f_£t_timî
;

807 
mbedés_s¶_gë_timî_t
 *
f_gë_timî
;

812 *
ö_buf
;

813 *
ö_˘r
;

816 *
ö_hdr
;

817 *
ö_Àn
;

818 *
ö_iv
;

819 *
ö_msg
;

820 *
ö_of·
;

822 
ö_msgty≥
;

823 
size_t
 
ö_msgÀn
;

824 
size_t
 
ö_À·
;

825 #i‡
deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

826 
uöt16_t
 
ö_ïoch
;

827 
size_t
 
√xt_ªc‹d_off£t
;

830 #i‡
deföed
(
MBEDTLS_SSL_DTLS_ANTI_REPLAY
)

831 
uöt64_t
 
ö_wödow_t›
;

832 
uöt64_t
 
ö_wödow
;

835 
size_t
 
ö_h¶í
;

837 
nb_zîo
;

838 
ªc‹d_ªad
;

843 *
out_buf
;

844 *
out_˘r
;

845 *
out_hdr
;

846 *
out_Àn
;

847 *
out_iv
;

848 *
out_msg
;

850 
out_msgty≥
;

851 
size_t
 
out_msgÀn
;

852 
size_t
 
out_À·
;

854 #i‡
deföed
(
MBEDTLS_ZLIB_SUPPORT
)

855 *
com¥ess_buf
;

857 #i‡
deföed
(
MBEDTLS_SSL_CBC_RECORD_SPLITTING
)

858 sig√d 
•lô_d⁄e
;

864 
˛õ¡_auth
;

869 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

870 *
ho°«me
;

874 #i‡
deföed
(
MBEDTLS_SSL_ALPN
)

875 c⁄° *
Æ≤_cho£n
;

881 #i‡
deföed
(
MBEDTLS_SSL_DTLS_HELLO_VERIFY
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

882 *
˛i_id
;

883 
size_t
 
˛i_id_Àn
;

890 
£cuª_ª√gŸüti⁄
;

892 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

893 
size_t
 
vîify_d©a_Àn
;

894 
own_vîify_d©a
[
MBEDTLS_SSL_VERIFY_DATA_MAX_LEN
];

895 
≥î_vîify_d©a
[
MBEDTLS_SSL_VERIFY_DATA_MAX_LEN
];

899 #i‡
deföed
(
MBEDTLS_SSL_HW_RECORD_ACCEL
)

901 
	#MBEDTLS_SSL_CHANNEL_OUTBOUND
 0

	)

902 
	#MBEDTLS_SSL_CHANNEL_INBOUND
 1

	)

904 (*
mbedés_s¶_hw_ªc‹d_öô
)(
mbedés_s¶_c⁄ãxt
 *
s¶
,

905 c⁄° *
key_íc
, c⁄° *
key_dec
,

906 
size_t
 
keyÀn
,

907 c⁄° *
iv_íc
, c⁄° *
iv_dec
,

908 
size_t
 
ivÀn
,

909 c⁄° *
mac_íc
, c⁄° *
mac_dec
,

910 
size_t
 
ma˛í
);

911 (*
mbedés_s¶_hw_ªc‹d_a˘iv©e
)(
mbedés_s¶_c⁄ãxt
 *
s¶
, 
dúe˘i⁄
);

912 (*
mbedés_s¶_hw_ªc‹d_ª£t
)(
mbedés_s¶_c⁄ãxt
 *
s¶
);

913 (*
mbedés_s¶_hw_ªc‹d_wrôe
)(
mbedés_s¶_c⁄ãxt
 *
s¶
);

914 (*
mbedés_s¶_hw_ªc‹d_ªad
)(
mbedés_s¶_c⁄ãxt
 *
s¶
);

915 (*
mbedés_s¶_hw_ªc‹d_föish
)(
mbedés_s¶_c⁄ãxt
 *
s¶
);

924 c⁄° *
mbedés_s¶_li°_cùhîsuôes
();

934 c⁄° *
mbedés_s¶_gë_cùhîsuôe_«me
(c⁄° 
cùhîsuôe_id
);

944 
mbedés_s¶_gë_cùhîsuôe_id
(c⁄° *
cùhîsuôe_«me
);

953 
mbedés_s¶_öô
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

970 
mbedés_s¶_£tup
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

971 c⁄° 
mbedés_s¶_c⁄fig
 *
c⁄f
);

983 
mbedés_s¶_£ssi⁄_ª£t
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

991 
mbedés_s¶_c⁄f_ídpoöt
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
ídpoöt
);

1007 
mbedés_s¶_c⁄f_å™•‹t
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
å™•‹t
);

1035 
mbedés_s¶_c⁄f_authmode
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
authmode
);

1037 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

1049 
mbedés_s¶_c⁄f_vîify
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1050 (*
f_vrfy
)(*, 
mbedés_x509_¸t
 *, , 
uöt32_t
 *),

1051 *
p_vrfy
);

1061 
mbedés_s¶_c⁄f_∫g
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1062 (*
f_∫g
)(*, *, 
size_t
),

1063 *
p_∫g
);

1079 
mbedés_s¶_c⁄f_dbg
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1080 (*
f_dbg
)(*, , const *, , const *),

1081 *
p_dbg
);

1112 
mbedés_s¶_£t_bio
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1113 *
p_bio
,

1114 
mbedés_s¶_£nd_t
 *
f_£nd
,

1115 
mbedés_s¶_ªcv_t
 *
f_ªcv
,

1116 
mbedés_s¶_ªcv_timeout_t
 *
f_ªcv_timeout
);

1134 
mbedés_s¶_c⁄f_ªad_timeout
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
uöt32_t
 
timeout
);

1156 
mbedés_s¶_£t_timî_cb
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1157 *
p_timî
,

1158 
mbedés_s¶_£t_timî_t
 *
f_£t_timî
,

1159 
mbedés_s¶_gë_timî_t
 *
f_gë_timî
);

1180 
	tmbedés_s¶_tickë_wrôe_t
(*
	tp_tickë
,

1181 c⁄° 
	tmbedés_s¶_£ssi⁄
 *
	t£ssi⁄
,

1182 *
	t°¨t
,

1183 c⁄° *
	tíd
,

1184 
	tsize_t
 *
	téí
,

1185 
	tuöt32_t
 *
	tli„time
);

1187 #i‡
deföed
(
MBEDTLS_SSL_EXPORT_KEYS
)

1208 
	tmbedés_s¶_exp‹t_keys_t
(*
	tp_expkey
,

1209 c⁄° *
	tms
,

1210 c⁄° *
	tkb
,

1211 
	tsize_t
 
	tma˛í
,

1212 
	tsize_t
 
	tkeyÀn
,

1213 
	tsize_t
 
	tivÀn
);

1216 
mbedés_s¶_exp‹t_keys
(*
p_expkey
,

1217 c⁄° *
ms
,

1218 c⁄° *
kb
,

1219 
size_t
 
ma˛í
,

1220 
size_t
 
keyÀn
,

1221 
size_t
 
ivÀn
);

1248 
	tmbedés_s¶_tickë_∑r£_t
(*
	tp_tickë
,

1249 
	tmbedés_s¶_£ssi⁄
 *
	t£ssi⁄
,

1250 *
	tbuf
,

1251 
	tsize_t
 
	tÀn
);

1253 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

1268 
mbedés_s¶_c⁄f_£ssi⁄_tickës_cb
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1269 
mbedés_s¶_tickë_wrôe_t
 *
f_tickë_wrôe
,

1270 
mbedés_s¶_tickë_∑r£_t
 *
f_tickë_∑r£
,

1271 *
p_tickë
);

1274 #i‡
deföed
(
MBEDTLS_SSL_EXPORT_KEYS
)

1285 
mbedés_s¶_c⁄f_exp‹t_keys_cb
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1286 
mbedés_s¶_exp‹t_keys_t
 *
f_exp‹t_keys
,

1287 *
p_exp‹t_keys
);

1304 
	tmbedés_s¶_cookõ_wrôe_t
(*
	t˘x
,

1305 **
	tp
, *
	tíd
,

1306 c⁄° *
	töfo
, 
	tsize_t
 
	tûí
);

1321 
	tmbedés_s¶_cookõ_check_t
(*
	t˘x
,

1322 c⁄° *
	tcookõ
, 
	tsize_t
 
	t˛í
,

1323 c⁄° *
	töfo
, 
	tsize_t
 
	tûí
);

1325 #i‡
deföed
(
MBEDTLS_SSL_DTLS_HELLO_VERIFY
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

1354 
mbedés_s¶_c⁄f_dés_cookõs
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1355 
mbedés_s¶_cookõ_wrôe_t
 *
f_cookõ_wrôe
,

1356 
mbedés_s¶_cookõ_check_t
 *
f_cookõ_check
,

1357 *
p_cookõ
);

1378 
mbedés_s¶_£t_˛õ¡_å™•‹t_id
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1379 c⁄° *
öfo
,

1380 
size_t
 
ûí
);

1384 #i‡
deföed
(
MBEDTLS_SSL_DTLS_ANTI_REPLAY
)

1400 
mbedés_s¶_c⁄f_dés_™ti_ª∂ay
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
mode
);

1403 #i‡
deföed
(
MBEDTLS_SSL_DTLS_BADMAC_LIMIT
)

1427 
mbedés_s¶_c⁄f_dés_badmac_limô
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
limô
);

1430 #i‡
deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

1462 
mbedés_s¶_c⁄f_h™dshake_timeout
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
uöt32_t
 
mö
, uöt32_à
max
);

1465 #i‡
deföed
(
MBEDTLS_SSL_SRV_C
)

1503 
mbedés_s¶_c⁄f_£ssi⁄_ˇche
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1504 *
p_ˇche
,

1505 (*
f_gë_ˇche
)(*, 
mbedés_s¶_£ssi⁄
 *),

1506 (*
f_£t_ˇche
)(*, c⁄° 
mbedés_s¶_£ssi⁄
 *));

1509 #i‡
deföed
(
MBEDTLS_SSL_CLI_C
)

1524 
mbedés_s¶_£t_£ssi⁄
(
mbedés_s¶_c⁄ãxt
 *
s¶
, c⁄° 
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

1542 
mbedés_s¶_c⁄f_cùhîsuôes
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1543 c⁄° *
cùhîsuôes
);

1564 
mbedés_s¶_c⁄f_cùhîsuôes_f‹_vîsi⁄
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1565 c⁄° *
cùhîsuôes
,

1566 
maj‹
, 
mö‹
);

1568 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

1579 
mbedés_s¶_c⁄f_˚π_¥ofûe
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1580 c⁄° 
mbedés_x509_¸t_¥ofûe
 *
¥ofûe
);

1589 
mbedés_s¶_c⁄f_ˇ_chaö
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1590 
mbedés_x509_¸t
 *
ˇ_chaö
,

1591 
mbedés_x509_¸l
 *
ˇ_¸l
);

1621 
mbedés_s¶_c⁄f_own_˚π
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1622 
mbedés_x509_¸t
 *
own_˚π
,

1623 
mbedés_pk_c⁄ãxt
 *
pk_key
);

1626 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
)

1647 
mbedés_s¶_c⁄f_psk
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1648 c⁄° *
psk
, 
size_t
 
psk_Àn
,

1649 c⁄° *
psk_idítôy
, 
size_t
 
psk_idítôy_Àn
);

1664 
mbedés_s¶_£t_hs_psk
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1665 c⁄° *
psk
, 
size_t
 
psk_Àn
);

1691 
mbedés_s¶_c⁄f_psk_cb
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1692 (*
f_psk
)(*, 
mbedés_s¶_c⁄ãxt
 *, const *,

1693 
size_t
),

1694 *
p_psk
);

1697 #i‡
deföed
(
MBEDTLS_DHM_C
Ë&& deföed(
MBEDTLS_SSL_SRV_C
)

1709 
mbedés_s¶_c⁄f_dh_∑øm
(
mbedés_s¶_c⁄fig
 *
c⁄f
, c⁄° *
dhm_P
, c⁄° *
dhm_G
);

1720 
mbedés_s¶_c⁄f_dh_∑øm_˘x
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
mbedés_dhm_c⁄ãxt
 *
dhm_˘x
);

1723 #i‡
deföed
(
MBEDTLS_DHM_C
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

1732 
mbedés_s¶_c⁄f_dhm_mö_bôÀn
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1733 
bôÀn
);

1736 #i‡
deföed
(
MBEDTLS_ECP_C
)

1764 
mbedés_s¶_c⁄f_curves
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1765 c⁄° 
mbedés_e˝_group_id
 *
curves
);

1768 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED
)

1787 
mbedés_s¶_c⁄f_sig_hashes
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1788 c⁄° *
hashes
);

1791 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

1803 
mbedés_s¶_£t_ho°«me
(
mbedés_s¶_c⁄ãxt
 *
s¶
, c⁄° *
ho°«me
);

1806 #i‡
deföed
(
MBEDTLS_SSL_SERVER_NAME_INDICATION
)

1819 
mbedés_s¶_£t_hs_own_˚π
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1820 
mbedés_x509_¸t
 *
own_˚π
,

1821 
mbedés_pk_c⁄ãxt
 *
pk_key
);

1834 
mbedés_s¶_£t_hs_ˇ_chaö
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1835 
mbedés_x509_¸t
 *
ˇ_chaö
,

1836 
mbedés_x509_¸l
 *
ˇ_¸l
);

1848 
mbedés_s¶_£t_hs_authmode
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1849 
authmode
);

1874 
mbedés_s¶_c⁄f_¢i
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

1875 (*
f_¢i
)(*, 
mbedés_s¶_c⁄ãxt
 *, const *,

1876 
size_t
),

1877 *
p_¢i
);

1880 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
)

1898 
mbedés_s¶_£t_hs_ecj∑ke_∑ssw‹d
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

1899 c⁄° *
pw
,

1900 
size_t
 
pw_Àn
);

1903 #i‡
deföed
(
MBEDTLS_SSL_ALPN
)

1916 
mbedés_s¶_c⁄f_Æ≤_¥Ÿocﬁs
(
mbedés_s¶_c⁄fig
 *
c⁄f
, c⁄° **
¥Ÿos
);

1927 c⁄° *
mbedés_s¶_gë_Æ≤_¥Ÿocﬁ
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

1946 
mbedés_s¶_c⁄f_max_vîsi⁄
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
maj‹
, 
mö‹
);

1966 
mbedés_s¶_c⁄f_mö_vîsi⁄
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
maj‹
, 
mö‹
);

1968 #i‡
deföed
(
MBEDTLS_SSL_FALLBACK_SCSV
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

1988 
mbedés_s¶_c⁄f_ÁŒback
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
ÁŒback
);

1991 #i‡
deföed
(
MBEDTLS_SSL_ENCRYPT_THEN_MAC
)

2003 
mbedés_s¶_c⁄f_í¸y±_thí_mac
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
ëm
);

2006 #i‡
deföed
(
MBEDTLS_SSL_EXTENDED_MASTER_SECRET
)

2018 
mbedés_s¶_c⁄f_exãnded_ma°î_£¸ë
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
ems
);

2021 #i‡
deföed
(
MBEDTLS_ARC4_C
)

2037 
mbedés_s¶_c⁄f_¨c4_suµ‹t
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
¨c4
);

2040 #i‡
deföed
(
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
)

2056 
mbedés_s¶_c⁄f_max_‰ag_Àn
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
mÊ_code
);

2059 #i‡
deföed
(
MBEDTLS_SSL_TRUNCATED_HMAC
)

2068 
mbedés_s¶_c⁄f_åunˇãd_hmac
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
åunˇã
);

2071 #i‡
deföed
(
MBEDTLS_SSL_CBC_RECORD_SPLITTING
)

2083 
mbedés_s¶_c⁄f_cbc_ªc‹d_•lôtög
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
•lô
);

2086 #i‡
deföed
(
MBEDTLS_SSL_SESSION_TICKETS
Ë&& deföed(
MBEDTLS_SSL_CLI_C
)

2097 
mbedés_s¶_c⁄f_£ssi⁄_tickës
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
u£_tickës
);

2100 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

2118 
mbedés_s¶_c⁄f_ª√gŸüti⁄
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
ª√gŸüti⁄
);

2148 
mbedés_s¶_c⁄f_Àgacy_ª√gŸüti⁄
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
Ælow_Àgacy
);

2150 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

2188 
mbedés_s¶_c⁄f_ª√gŸüti⁄_íf‹˚d
(
mbedés_s¶_c⁄fig
 *
c⁄f
, 
max_ªc‹ds
);

2207 
mbedés_s¶_c⁄f_ª√gŸüti⁄_≥riod
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

2208 c⁄° 
≥riod
[8]);

2218 
size_t
 
mbedés_s¶_gë_byãs_avaû
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2231 
uöt32_t
 
mbedés_s¶_gë_vîify_ªsu…
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2240 c⁄° *
mbedés_s¶_gë_cùhîsuôe
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2249 c⁄° *
mbedés_s¶_gë_vîsi⁄
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2261 
mbedés_s¶_gë_ªc‹d_ex∑nsi⁄
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2263 #i‡
deföed
(
MBEDTLS_SSL_MAX_FRAGMENT_LENGTH
)

2280 
size_t
 
mbedés_s¶_gë_max_‰ag_Àn
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2283 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

2298 c⁄° 
mbedés_x509_¸t
 *
mbedés_s¶_gë_≥î_˚π
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
);

2301 #i‡
deföed
(
MBEDTLS_SSL_CLI_C
)

2318 
mbedés_s¶_gë_£ssi⁄
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

2342 
mbedés_s¶_h™dshake
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

2363 
mbedés_s¶_h™dshake_°ï
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

2365 #i‡
deföed
(
MBEDTLS_SSL_RENEGOTIATION
)

2384 
mbedés_s¶_ª√gŸüã
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

2421 
mbedés_s¶_ªad
(
mbedés_s¶_c⁄ãxt
 *
s¶
, *
buf
, 
size_t
 
Àn
);

2422 
mbedés_s¶_ªad_ext
(
mbedés_s¶_c⁄ãxt
 *
s¶
, *
buf
, 
size_t
 
Àn
);

2459 
mbedés_s¶_wrôe
(
mbedés_s¶_c⁄ãxt
 *
s¶
, c⁄° *
buf
, 
size_t
 
Àn
);

2477 
mbedés_s¶_£nd_Æît_mesßge
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

2478 
Àvñ
,

2479 
mesßge
);

2493 
mbedés_s¶_˛o£_nŸify
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

2500 
mbedés_s¶_‰ì
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

2512 
mbedés_s¶_c⁄fig_öô
(
mbedés_s¶_c⁄fig
 *
c⁄f
);

2530 
mbedés_s¶_c⁄fig_deÁu…s
(
mbedés_s¶_c⁄fig
 *
c⁄f
,

2531 
ídpoöt
, 
å™•‹t
, 
¥e£t
);

2538 
mbedés_s¶_c⁄fig_‰ì
(
mbedés_s¶_c⁄fig
 *
c⁄f
);

2545 
mbedés_s¶_£ssi⁄_öô
(
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

2553 
mbedés_s¶_£ssi⁄_‰ì
(
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

2555 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ssl_cache.h

23 #i‚de‡
MBEDTLS_SSL_CACHE_H


24 
	#MBEDTLS_SSL_CACHE_H


	)

26 
	~"s¶.h
"

28 #i‡
deföed
(
MBEDTLS_THREADING_C
)

29 
	~"thªadög.h
"

40 #i‡!
deföed
(
MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT
)

41 
	#MBEDTLS_SSL_CACHE_DEFAULT_TIMEOUT
 86400

	)

44 #i‡!
deföed
(
MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES
)

45 
	#MBEDTLS_SSL_CACHE_DEFAULT_MAX_ENTRIES
 50

	)

50 #ifde‡
__˝lu•lus


54 
mbedés_s¶_ˇche_c⁄ãxt
 
	tmbedés_s¶_ˇche_c⁄ãxt
;

55 
mbedés_s¶_ˇche_íåy
 
	tmbedés_s¶_ˇche_íåy
;

60 
	smbedés_s¶_ˇche_íåy
 {

61 #i‡
deföed
(
MBEDTLS_HAVE_TIME
)

62 
mbedés_time_t
 
time°amp
;

64 
mbedés_s¶_£ssi⁄
 
£ssi⁄
;

65 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

66 
mbedés_x509_buf
 
≥î_˚π
;

68 
mbedés_s¶_ˇche_íåy
 *
√xt
;

74 
	smbedés_s¶_ˇche_c⁄ãxt
 {

75 
mbedés_s¶_ˇche_íåy
 *
chaö
;

76 
timeout
;

77 
max_íåõs
;

78 #i‡
deföed
(
MBEDTLS_THREADING_C
)

79 
mbedés_thªadög_muãx_t
 
muãx
;

88 
mbedés_s¶_ˇche_öô
(
mbedés_s¶_ˇche_c⁄ãxt
 *
ˇche
);

97 
mbedés_s¶_ˇche_gë
(*
d©a
, 
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

106 
mbedés_s¶_ˇche_£t
(*
d©a
, c⁄° 
mbedés_s¶_£ssi⁄
 *
£ssi⁄
);

108 #i‡
deföed
(
MBEDTLS_HAVE_TIME
)

118 
mbedés_s¶_ˇche_£t_timeout
(
mbedés_s¶_ˇche_c⁄ãxt
 *
ˇche
, 
timeout
);

128 
mbedés_s¶_ˇche_£t_max_íåõs
(
mbedés_s¶_ˇche_c⁄ãxt
 *
ˇche
, 
max
);

135 
mbedés_s¶_ˇche_‰ì
(
mbedés_s¶_ˇche_c⁄ãxt
 *
ˇche
);

137 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ssl_ciphersuites.h

23 #i‚de‡
MBEDTLS_SSL_CIPHERSUITES_H


24 
	#MBEDTLS_SSL_CIPHERSUITES_H


	)

26 
	~"pk.h
"

27 
	~"cùhî.h
"

28 
	~"md.h
"

30 #ifde‡
__˝lu•lus


37 
	#MBEDTLS_TLS_RSA_WITH_NULL_MD5
 0x01

	)

38 
	#MBEDTLS_TLS_RSA_WITH_NULL_SHA
 0x02

	)

40 
	#MBEDTLS_TLS_RSA_WITH_RC4_128_MD5
 0x04

	)

41 
	#MBEDTLS_TLS_RSA_WITH_RC4_128_SHA
 0x05

	)

42 
	#MBEDTLS_TLS_RSA_WITH_DES_CBC_SHA
 0x09

	)

44 
	#MBEDTLS_TLS_RSA_WITH_3DES_EDE_CBC_SHA
 0x0A

	)

46 
	#MBEDTLS_TLS_DHE_RSA_WITH_DES_CBC_SHA
 0x15

	)

47 
	#MBEDTLS_TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
 0x16

	)

49 
	#MBEDTLS_TLS_PSK_WITH_NULL_SHA
 0x2C

	)

50 
	#MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA
 0x2D

	)

51 
	#MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA
 0x2E

	)

52 
	#MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA
 0x2F

	)

54 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA
 0x33

	)

55 
	#MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA
 0x35

	)

56 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA
 0x39

	)

58 
	#MBEDTLS_TLS_RSA_WITH_NULL_SHA256
 0x3B

	)

59 
	#MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256
 0x3C

	)

60 
	#MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256
 0x3D

	)

62 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x41

	)

63 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x45

	)

65 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CBC_SHA256
 0x67

	)

66 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
 0x6B

	)

68 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x84

	)

69 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x88

	)

71 
	#MBEDTLS_TLS_PSK_WITH_RC4_128_SHA
 0x8A

	)

72 
	#MBEDTLS_TLS_PSK_WITH_3DES_EDE_CBC_SHA
 0x8B

	)

73 
	#MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA
 0x8C

	)

74 
	#MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA
 0x8D

	)

76 
	#MBEDTLS_TLS_DHE_PSK_WITH_RC4_128_SHA
 0x8E

	)

77 
	#MBEDTLS_TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA
 0x8F

	)

78 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA
 0x90

	)

79 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA
 0x91

	)

81 
	#MBEDTLS_TLS_RSA_PSK_WITH_RC4_128_SHA
 0x92

	)

82 
	#MBEDTLS_TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA
 0x93

	)

83 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA
 0x94

	)

84 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA
 0x95

	)

86 
	#MBEDTLS_TLS_RSA_WITH_AES_128_GCM_SHA256
 0x9C

	)

87 
	#MBEDTLS_TLS_RSA_WITH_AES_256_GCM_SHA384
 0x9D

	)

88 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x9E

	)

89 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x9F

	)

91 
	#MBEDTLS_TLS_PSK_WITH_AES_128_GCM_SHA256
 0xA8

	)

92 
	#MBEDTLS_TLS_PSK_WITH_AES_256_GCM_SHA384
 0xA9

	)

93 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_128_GCM_SHA256
 0xAA

	)

94 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_256_GCM_SHA384
 0xAB

	)

95 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_128_GCM_SHA256
 0xAC

	)

96 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_256_GCM_SHA384
 0xAD

	)

98 
	#MBEDTLS_TLS_PSK_WITH_AES_128_CBC_SHA256
 0xAE

	)

99 
	#MBEDTLS_TLS_PSK_WITH_AES_256_CBC_SHA384
 0xAF

	)

100 
	#MBEDTLS_TLS_PSK_WITH_NULL_SHA256
 0xB0

	)

101 
	#MBEDTLS_TLS_PSK_WITH_NULL_SHA384
 0xB1

	)

103 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CBC_SHA256
 0xB2

	)

104 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CBC_SHA384
 0xB3

	)

105 
	#MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA256
 0xB4

	)

106 
	#MBEDTLS_TLS_DHE_PSK_WITH_NULL_SHA384
 0xB5

	)

108 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_128_CBC_SHA256
 0xB6

	)

109 
	#MBEDTLS_TLS_RSA_PSK_WITH_AES_256_CBC_SHA384
 0xB7

	)

110 
	#MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA256
 0xB8

	)

111 
	#MBEDTLS_TLS_RSA_PSK_WITH_NULL_SHA384
 0xB9

	)

113 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0xBA

	)

114 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0xBE

	)

116 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0xC0

	)

117 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256
 0xC4

	)

119 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_NULL_SHA
 0xC001

	)

120 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_RC4_128_SHA
 0xC002

	)

121 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA
 0xC003

	)

122 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0xC004

	)

123 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0xC005

	)

125 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_NULL_SHA
 0xC006

	)

126 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_RC4_128_SHA
 0xC007

	)

127 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA
 0xC008

	)

128 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0xC009

	)

129 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0xC00A

	)

131 
	#MBEDTLS_TLS_ECDH_RSA_WITH_NULL_SHA
 0xC00B

	)

132 
	#MBEDTLS_TLS_ECDH_RSA_WITH_RC4_128_SHA
 0xC00C

	)

133 
	#MBEDTLS_TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA
 0xC00D

	)

134 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA
 0xC00E

	)

135 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA
 0xC00F

	)

137 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_NULL_SHA
 0xC010

	)

138 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_RC4_128_SHA
 0xC011

	)

139 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
 0xC012

	)

140 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0xC013

	)

141 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0xC014

	)

143 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
 0xC023

	)

144 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384
 0xC024

	)

145 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256
 0xC025

	)

146 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384
 0xC026

	)

147 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
 0xC027

	)

148 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384
 0xC028

	)

149 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256
 0xC029

	)

150 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384
 0xC02A

	)

152 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0xC02B

	)

153 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0xC02C

	)

154 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0xC02D

	)

155 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0xC02E

	)

156 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0xC02F

	)

157 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0xC030

	)

158 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0xC031

	)

159 
	#MBEDTLS_TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0xC032

	)

161 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_RC4_128_SHA
 0xC033

	)

162 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA
 0xC034

	)

163 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA
 0xC035

	)

164 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA
 0xC036

	)

165 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256
 0xC037

	)

166 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384
 0xC038

	)

167 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA
 0xC039

	)

168 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA256
 0xC03A

	)

169 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_NULL_SHA384
 0xC03B

	)

171 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0xC072

	)

172 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0xC073

	)

173 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256
 0xC074

	)

174 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384
 0xC075

	)

175 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0xC076

	)

176 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0xC077

	)

177 
	#MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256
 0xC078

	)

178 
	#MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384
 0xC079

	)

180 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC07A

	)

181 
	#MBEDTLS_TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC07B

	)

182 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC07C

	)

183 
	#MBEDTLS_TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC07D

	)

184 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC086

	)

185 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC087

	)

186 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC088

	)

187 
	#MBEDTLS_TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC089

	)

188 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC08A

	)

189 
	#MBEDTLS_TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC08B

	)

190 
	#MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256
 0xC08C

	)

191 
	#MBEDTLS_TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384
 0xC08D

	)

193 
	#MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256
 0xC08E

	)

194 
	#MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384
 0xC08F

	)

195 
	#MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256
 0xC090

	)

196 
	#MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384
 0xC091

	)

197 
	#MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256
 0xC092

	)

198 
	#MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384
 0xC093

	)

200 
	#MBEDTLS_TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0xC094

	)

201 
	#MBEDTLS_TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0xC095

	)

202 
	#MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0xC096

	)

203 
	#MBEDTLS_TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0xC097

	)

204 
	#MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0xC098

	)

205 
	#MBEDTLS_TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0xC099

	)

206 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256
 0xC09A

	)

207 
	#MBEDTLS_TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384
 0xC09B

	)

209 
	#MBEDTLS_TLS_RSA_WITH_AES_128_CCM
 0xC09C

	)

210 
	#MBEDTLS_TLS_RSA_WITH_AES_256_CCM
 0xC09D

	)

211 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM
 0xC09E

	)

212 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM
 0xC09F

	)

213 
	#MBEDTLS_TLS_RSA_WITH_AES_128_CCM_8
 0xC0A0

	)

214 
	#MBEDTLS_TLS_RSA_WITH_AES_256_CCM_8
 0xC0A1

	)

215 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_128_CCM_8
 0xC0A2

	)

216 
	#MBEDTLS_TLS_DHE_RSA_WITH_AES_256_CCM_8
 0xC0A3

	)

217 
	#MBEDTLS_TLS_PSK_WITH_AES_128_CCM
 0xC0A4

	)

218 
	#MBEDTLS_TLS_PSK_WITH_AES_256_CCM
 0xC0A5

	)

219 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM
 0xC0A6

	)

220 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM
 0xC0A7

	)

221 
	#MBEDTLS_TLS_PSK_WITH_AES_128_CCM_8
 0xC0A8

	)

222 
	#MBEDTLS_TLS_PSK_WITH_AES_256_CCM_8
 0xC0A9

	)

223 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_128_CCM_8
 0xC0AA

	)

224 
	#MBEDTLS_TLS_DHE_PSK_WITH_AES_256_CCM_8
 0xC0AB

	)

227 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM
 0xC0AC

	)

228 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM
 0xC0AD

	)

229 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
 0xC0AE

	)

230 
	#MBEDTLS_TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8
 0xC0AF

	)

232 
	#MBEDTLS_TLS_ECJPAKE_WITH_AES_128_CCM_8
 0xC0FF

	)

238 
MBEDTLS_KEY_EXCHANGE_NONE
 = 0,

239 
MBEDTLS_KEY_EXCHANGE_RSA
,

240 
MBEDTLS_KEY_EXCHANGE_DHE_RSA
,

241 
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA
,

242 
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA
,

243 
MBEDTLS_KEY_EXCHANGE_PSK
,

244 
MBEDTLS_KEY_EXCHANGE_DHE_PSK
,

245 
MBEDTLS_KEY_EXCHANGE_RSA_PSK
,

246 
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK
,

247 
MBEDTLS_KEY_EXCHANGE_ECDH_RSA
,

248 
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA
,

249 
MBEDTLS_KEY_EXCHANGE_ECJPAKE
,

250 } 
	tmbedés_key_exch™ge_ty≥_t
;

253 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_ENABLED
) || \

254 
deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_RSA_ENABLED
) || \

255 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
) || \

256 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
) || \

257 
deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
) || \

258 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_RSA_ENABLED
) || \

259 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDH_ECDSA_ENABLED
)

260 
	#MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED


	)

264 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
) || \

265 
deföed
(
MBEDTLS_KEY_EXCHANGE_RSA_PSK_ENABLED
) || \

266 
deföed
(
MBEDTLS_KEY_EXCHANGE_DHE_PSK_ENABLED
) || \

267 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
)

268 
	#MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED


	)

272 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_RSA_ENABLED
) || \

273 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
) || \

274 
deföed
(
MBEDTLS_KEY_EXCHANGE_ECDHE_PSK_ENABLED
)

275 
	#MBEDTLS_KEY_EXCHANGE__SOME__ECDHE_ENABLED


	)

278 
mbedés_s¶_cùhîsuôe_t
 
	tmbedés_s¶_cùhîsuôe_t
;

280 
	#MBEDTLS_CIPHERSUITE_WEAK
 0x01

	)

281 
	#MBEDTLS_CIPHERSUITE_SHORT_TAG
 0x02

	)

283 
	#MBEDTLS_CIPHERSUITE_NODTLS
 0x04

	)

288 
	smbedés_s¶_cùhîsuôe_t
 {

289 
id
;

290 c⁄° *
«me
;

292 
mbedés_cùhî_ty≥_t
 
cùhî
;

293 
mbedés_md_ty≥_t
 
mac
;

294 
mbedés_key_exch™ge_ty≥_t
 
key_exch™ge
;

296 
mö_maj‹_vî
;

297 
mö_mö‹_vî
;

298 
max_maj‹_vî
;

299 
max_mö‹_vî
;

301 
Êags
;

304 c⁄° *
mbedés_s¶_li°_cùhîsuôes
();

306 c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
mbedés_s¶_cùhîsuôe_‰om_°rög
(c⁄° *
cùhîsuôe_«me
);

307 c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
mbedés_s¶_cùhîsuôe_‰om_id
(
cùhîsuôe_id
);

309 #i‡
deföed
(
MBEDTLS_PK_C
)

310 
mbedés_pk_ty≥_t
 
mbedés_s¶_gë_cùhîsuôe_sig_pk_Æg
(c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
öfo
);

313 
mbedés_s¶_cùhîsuôe_u£s_ec
(c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
öfo
);

314 
mbedés_s¶_cùhîsuôe_u£s_psk
(c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
öfo
);

316 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ssl_cookie.h

23 #i‚de‡
MBEDTLS_SSL_COOKIE_H


24 
	#MBEDTLS_SSL_COOKIE_H


	)

26 
	~"s¶.h
"

28 #i‡
deföed
(
MBEDTLS_THREADING_C
)

29 
	~"thªadög.h
"

39 #i‚de‡
MBEDTLS_SSL_COOKIE_TIMEOUT


40 
	#MBEDTLS_SSL_COOKIE_TIMEOUT
 60

	)

45 #ifde‡
__˝lu•lus


53 
mbedés_md_c⁄ãxt_t
 
hmac_˘x
;

54 #i‡!
deföed
(
MBEDTLS_HAVE_TIME
)

55 
£rül
;

57 
timeout
;

60 #i‡
deföed
(
MBEDTLS_THREADING_C
)

61 
mbedés_thªadög_muãx_t
 
muãx
;

63 } 
	tmbedés_s¶_cookõ_˘x
;

68 
mbedés_s¶_cookõ_öô
(
mbedés_s¶_cookõ_˘x
 *
˘x
);

73 
mbedés_s¶_cookõ_£tup
(
mbedés_s¶_cookõ_˘x
 *
˘x
,

74 (*
f_∫g
)(*, *, 
size_t
),

75 *
p_∫g
);

86 
mbedés_s¶_cookõ_£t_timeout
(
mbedés_s¶_cookõ_˘x
 *
˘x
, 
dñay
);

91 
mbedés_s¶_cookõ_‰ì
(
mbedés_s¶_cookõ_˘x
 *
˘x
);

96 
mbedés_s¶_cookõ_wrôe_t
 
mbedés_s¶_cookõ_wrôe
;

101 
mbedés_s¶_cookõ_check_t
 
mbedés_s¶_cookõ_check
;

103 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/ssl_internal.h

23 #i‚de‡
MBEDTLS_SSL_INTERNAL_H


24 
	#MBEDTLS_SSL_INTERNAL_H


	)

26 
	~"s¶.h
"

28 #i‡
deföed
(
MBEDTLS_MD5_C
)

29 
	~"md5.h
"

32 #i‡
deföed
(
MBEDTLS_SHA1_C
)

33 
	~"sha1.h
"

36 #i‡
deföed
(
MBEDTLS_SHA256_C
)

37 
	~"sha256.h
"

40 #i‡
deföed
(
MBEDTLS_SHA512_C
)

41 
	~"sha512.h
"

44 #i‡
deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
)

45 
	~"ecj∑ke.h
"

48 #i‡–
deföed
(
__ARMCC_VERSION
Ë|| deföed(
_MSC_VER
) ) && \

49 !
deföed
(
ölöe
Ë&& !
	$deföed
(
__˝lu•lus
)

50 
	#ölöe
 
__ölöe


	)

54 
	#MBEDTLS_SSL_MIN_MAJOR_VERSION
 
MBEDTLS_SSL_MAJOR_VERSION_3


	)

56 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
)

57 
	#MBEDTLS_SSL_MIN_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_0


	)

59 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
)

60 
	#MBEDTLS_SSL_MIN_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_1


	)

62 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
)

63 
	#MBEDTLS_SSL_MIN_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_2


	)

65 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

66 
	#MBEDTLS_SSL_MIN_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_3


	)

73 
	#MBEDTLS_SSL_MAX_MAJOR_VERSION
 
MBEDTLS_SSL_MAJOR_VERSION_3


	)

75 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

76 
	#MBEDTLS_SSL_MAX_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_3


	)

78 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
)

79 
	#MBEDTLS_SSL_MAX_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_2


	)

81 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1
)

82 
	#MBEDTLS_SSL_MAX_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_1


	)

84 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
)

85 
	#MBEDTLS_SSL_MAX_MINOR_VERSION
 
MBEDTLS_SSL_MINOR_VERSION_0


	)

91 
	#MBEDTLS_SSL_INITIAL_HANDSHAKE
 0

	)

92 
	#MBEDTLS_SSL_RENEGOTIATION_IN_PROGRESS
 1

	)

93 
	#MBEDTLS_SSL_RENEGOTIATION_DONE
 2

	)

94 
	#MBEDTLS_SSL_RENEGOTIATION_PENDING
 3

	)

104 
	#MBEDTLS_SSL_RETRANS_PREPARING
 0

	)

105 
	#MBEDTLS_SSL_RETRANS_SENDING
 1

	)

106 
	#MBEDTLS_SSL_RETRANS_WAITING
 2

	)

107 
	#MBEDTLS_SSL_RETRANS_FINISHED
 3

	)

115 #i‡
	`deföed
(
MBEDTLS_ZLIB_SUPPORT
)

116 
	#MBEDTLS_SSL_COMPRESSION_ADD
 1024

	)

118 
	#MBEDTLS_SSL_COMPRESSION_ADD
 0

	)

121 #i‡
	`deföed
(
MBEDTLS_ARC4_C
Ë|| deföed(
MBEDTLS_CIPHER_MODE_CBC
)

123 #i‡
	`deföed
(
MBEDTLS_SHA512_C
)

124 
	#MBEDTLS_SSL_MAC_ADD
 48

	)

125 #ñi‡
	`deföed
(
MBEDTLS_SHA256_C
)

126 
	#MBEDTLS_SSL_MAC_ADD
 32

	)

128 
	#MBEDTLS_SSL_MAC_ADD
 20

	)

132 
	#MBEDTLS_SSL_MAC_ADD
 16

	)

135 #i‡
	`deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

136 
	#MBEDTLS_SSL_PADDING_ADD
 256

	)

138 
	#MBEDTLS_SSL_PADDING_ADD
 0

	)

141 
	#MBEDTLS_SSL_BUFFER_LEN
 ( 
MBEDTLS_SSL_MAX_CONTENT_LEN
 \

142 + 
MBEDTLS_SSL_COMPRESSION_ADD
 \

144 + 
MBEDTLS_SSL_MAC_ADD
 \

145 + 
MBEDTLS_SSL_PADDING_ADD
 \

146 )

	)

153 
	#MBEDTLS_TLS_EXT_SUPPORTED_POINT_FORMATS_PRESENT
 (1 << 0)

	)

154 
	#MBEDTLS_TLS_EXT_ECJPAKE_KKPP_OK
 (1 << 1)

	)

156 #ifde‡
__˝lu•lus


163 
	smbedés_s¶_h™dshake_∑øms
 {

167 
sig_Æg
;

168 
vîify_sig_Æg
;

169 #i‡
	`deföed
(
MBEDTLS_DHM_C
)

170 
mbedés_dhm_c⁄ãxt
 
dhm_˘x
;

172 #i‡
	`deföed
(
MBEDTLS_ECDH_C
)

173 
mbedés_ecdh_c⁄ãxt
 
ecdh_˘x
;

175 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
)

176 
mbedés_ecj∑ke_c⁄ãxt
 
ecj∑ke_˘x
;

177 #i‡
	`deföed
(
MBEDTLS_SSL_CLI_C
)

178 *
ecj∑ke_ˇche
;

179 
size_t
 
ecj∑ke_ˇche_Àn
;

182 #i‡
	`deföed
(
MBEDTLS_ECDH_C
Ë|| deföed(
MBEDTLS_ECDSA_C
) || \

183 
	`deföed
(
MBEDTLS_KEY_EXCHANGE_ECJPAKE_ENABLED
)

184 c⁄° 
mbedés_e˝_curve_öfo
 **
curves
;

186 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
)

187 *
psk
;

188 
size_t
 
psk_Àn
;

190 #i‡
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

191 
mbedés_s¶_key_˚π
 *
key_˚π
;

192 #i‡
	`deföed
(
MBEDTLS_SSL_SERVER_NAME_INDICATION
)

193 
¢i_authmode
;

194 
mbedés_s¶_key_˚π
 *
¢i_key_˚π
;

195 
mbedés_x509_¸t
 *
¢i_ˇ_chaö
;

196 
mbedés_x509_¸l
 *
¢i_ˇ_¸l
;

199 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

200 
out_msg_£q
;

201 
ö_msg_£q
;

203 *
vîify_cookõ
;

205 
vîify_cookõ_Àn
;

208 *
hs_msg
;

210 
uöt32_t
 
ªå™smô_timeout
;

211 
ªå™smô_°©e
;

212 
mbedés_s¶_Êight_ôem
 *
Êight
;

213 
mbedés_s¶_Êight_ôem
 *
cur_msg
;

214 
ö_Êight_°¨t_£q
;

216 
mbedés_s¶_å™sf‹m
 *
Æt_å™sf‹m_out
;

218 
Æt_out_˘r
[8];

225 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
Ë|| deföed(
MBEDTLS_SSL_PROTO_TLS1
) || \

226 
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_1
)

227 
mbedés_md5_c⁄ãxt
 
fö_md5
;

228 
mbedés_sha1_c⁄ãxt
 
fö_sha1
;

230 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_TLS1_2
)

231 #i‡
	`deföed
(
MBEDTLS_SHA256_C
)

232 
mbedés_sha256_c⁄ãxt
 
fö_sha256
;

234 #i‡
	`deföed
(
MBEDTLS_SHA512_C
)

235 
mbedés_sha512_c⁄ãxt
 
fö_sha512
;

239 (*
upd©e_checksum
)(
mbedés_s¶_c⁄ãxt
 *, c⁄° *, 
size_t
);

240 (*
ˇlc_vîify
)(
mbedés_s¶_c⁄ãxt
 *, *);

241 (*
ˇlc_föished
)(
mbedés_s¶_c⁄ãxt
 *, *, );

242 (*
és_¥f
)(c⁄° *, 
size_t
, const *,

243 c⁄° *, 
size_t
,

244 *, 
size_t
);

246 
size_t
 
pm¶í
;

248 
øndbyãs
[64];

249 
¥ema°î
[
MBEDTLS_PREMASTER_SIZE
];

252 
ªsume
;

253 
max_maj‹_vî
;

254 
max_mö‹_vî
;

255 
˛i_exts
;

257 #i‡
	`deföed
(
MBEDTLS_SSL_SESSION_TICKETS
)

258 
√w_£ssi⁄_tickë
;

260 #i‡
	`deföed
(
MBEDTLS_SSL_EXTENDED_MASTER_SECRET
)

261 
exãnded_ms
;

269 
	smbedés_s¶_å™sf‹m
 {

273 c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
cùhîsuôe_öfo
;

275 
keyÀn
;

276 
size_t
 
möÀn
;

277 
size_t
 
ivÀn
;

278 
size_t
 
fixed_ivÀn
;

279 
size_t
 
ma˛í
;

281 
iv_íc
[16];

282 
iv_dec
[16];

284 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_SSL3
)

286 
mac_íc
[20];

287 
mac_dec
[20];

290 
mbedés_md_c⁄ãxt_t
 
md_˘x_íc
;

291 
mbedés_md_c⁄ãxt_t
 
md_˘x_dec
;

293 
mbedés_cùhî_c⁄ãxt_t
 
cùhî_˘x_íc
;

294 
mbedés_cùhî_c⁄ãxt_t
 
cùhî_˘x_dec
;

299 #i‡
	`deföed
(
MBEDTLS_ZLIB_SUPPORT
)

300 
z_°ªam
 
˘x_deÊ©e
;

301 
z_°ªam
 
˘x_öÊ©e
;

305 #i‡
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

309 
	smbedés_s¶_key_˚π
 {

310 
mbedés_x509_¸t
 *
˚π
;

311 
mbedés_pk_c⁄ãxt
 *
key
;

312 
mbedés_s¶_key_˚π
 *
√xt
;

316 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

320 
	smbedés_s¶_Êight_ôem
 {

321 *
p
;

322 
size_t
 
Àn
;

323 
ty≥
;

324 
mbedés_s¶_Êight_ôem
 *
√xt
;

335 
	`mbedés_s¶_å™sf‹m_‰ì
(
mbedés_s¶_å™sf‹m
 *
å™sf‹m
);

343 
	`mbedés_s¶_h™dshake_‰ì
(
mbedés_s¶_h™dshake_∑øms
 *
h™dshake
);

345 
	`mbedés_s¶_h™dshake_˛õ¡_°ï
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

346 
	`mbedés_s¶_h™dshake_£rvî_°ï
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

347 
	`mbedés_s¶_h™dshake_wøpup
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

349 
	`mbedés_s¶_£nd_Áèl_h™dshake_Áûuª
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

351 
	`mbedés_s¶_ª£t_checksum
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

352 
	`mbedés_s¶_dîive_keys
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

354 
	`mbedés_s¶_ªad_ªc‹d
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

355 
	`mbedés_s¶_„tch_öput
(
mbedés_s¶_c⁄ãxt
 *
s¶
, 
size_t
 
nb_w™t
);

357 
	`mbedés_s¶_wrôe_ªc‹d
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

358 
	`mbedés_s¶_Êush_ouçut
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

360 
	`mbedés_s¶_∑r£_˚πifiˇã
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

361 
	`mbedés_s¶_wrôe_˚πifiˇã
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

363 
	`mbedés_s¶_∑r£_ch™ge_cùhî_•ec
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

364 
	`mbedés_s¶_wrôe_ch™ge_cùhî_•ec
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

366 
	`mbedés_s¶_∑r£_föished
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

367 
	`mbedés_s¶_wrôe_föished
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

369 
	`mbedés_s¶_›timize_checksum
(
mbedés_s¶_c⁄ãxt
 *
s¶
,

370 c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
cùhîsuôe_öfo
);

372 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED
)

373 
	`mbedés_s¶_psk_dîive_¥ema°î
(
mbedés_s¶_c⁄ãxt
 *
s¶
, 
mbedés_key_exch™ge_ty≥_t
 
key_ex
);

376 #i‡
	`deföed
(
MBEDTLS_PK_C
)

377 
	`mbedés_s¶_sig_‰om_pk
(
mbedés_pk_c⁄ãxt
 *
pk
);

378 
mbedés_pk_ty≥_t
 
	`mbedés_s¶_pk_Æg_‰om_sig
(
sig
);

381 
mbedés_md_ty≥_t
 
	`mbedés_s¶_md_Æg_‰om_hash
(
hash
);

382 
	`mbedés_s¶_hash_‰om_md_Æg
(
md
);

384 #i‡
	`deföed
(
MBEDTLS_ECP_C
)

385 
	`mbedés_s¶_check_curve
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
, 
mbedés_e˝_group_id
 
gΩ_id
);

388 #i‡
	`deföed
(
MBEDTLS_KEY_EXCHANGE__WITH_CERT__ENABLED
)

389 
	`mbedés_s¶_check_sig_hash
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
,

390 
mbedés_md_ty≥_t
 
md
);

393 #i‡
	`deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

394 
ölöe
 
mbedés_pk_c⁄ãxt
 *
	`mbedés_s¶_own_key
(
mbedés_s¶_c⁄ãxt
 *
s¶
)

396 
mbedés_s¶_key_˚π
 *
key_˚π
;

398 i‡(
s¶
->
h™dshake
 !
NULL
 && s¶->h™dshake->
key_˚π
 != NULL) {

399 
key_˚π
 = 
s¶
->
h™dshake
->key_cert;

401 
key_˚π
 = 
s¶
->
c⁄f
->key_cert;

404  (
key_˚π
 =
NULL
 ? NULL : key_˚π->
key
);

407 
ölöe
 
mbedés_x509_¸t
 *
	`mbedés_s¶_own_˚π
(
mbedés_s¶_c⁄ãxt
 *
s¶
)

409 
mbedés_s¶_key_˚π
 *
key_˚π
;

411 i‡(
s¶
->
h™dshake
 !
NULL
 && s¶->h™dshake->
key_˚π
 != NULL) {

412 
key_˚π
 = 
s¶
->
h™dshake
->key_cert;

414 
key_˚π
 = 
s¶
->
c⁄f
->key_cert;

417  (
key_˚π
 =
NULL
 ? NULL : key_˚π->
˚π
);

429 
	`mbedés_s¶_check_˚π_ußge
(c⁄° 
mbedés_x509_¸t
 *
˚π
,

430 c⁄° 
mbedés_s¶_cùhîsuôe_t
 *
cùhîsuôe
,

431 
˚π_ídpoöt
,

432 
uöt32_t
 *
Êags
);

435 
	`mbedés_s¶_wrôe_vîsi⁄
(
maj‹
, 
mö‹
, 
å™•‹t
,

436 
vî
[2]);

437 
	`mbedés_s¶_ªad_vîsi⁄
(*
maj‹
, *
mö‹
, 
å™•‹t
,

438 c⁄° 
vî
[2]);

440 
ölöe
 
size_t
 
	`mbedés_s¶_hdr_Àn
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
)

442 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

443 i‡(
s¶
->
c⁄f
->
å™•‹t
 =
MBEDTLS_SSL_TRANSPORT_DATAGRAM
) {

447 ((Ë
s¶
);

452 
ölöe
 
size_t
 
	`mbedés_s¶_hs_hdr_Àn
(c⁄° 
mbedés_s¶_c⁄ãxt
 *
s¶
)

454 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

455 i‡(
s¶
->
c⁄f
->
å™•‹t
 =
MBEDTLS_SSL_TRANSPORT_DATAGRAM
) {

459 ((Ë
s¶
);

464 #i‡
	`deföed
(
MBEDTLS_SSL_PROTO_DTLS
)

465 
	`mbedés_s¶_£nd_Êight_com∂ëed
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

466 
	`mbedés_s¶_ªcv_Êight_com∂ëed
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

467 
	`mbedés_s¶_ª£nd
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

471 #i‡
	`deföed
(
MBEDTLS_SSL_DTLS_ANTI_REPLAY
)

472 
	`mbedés_s¶_dés_ª∂ay_check
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

473 
	`mbedés_s¶_dés_ª∂ay_upd©e
(
mbedés_s¶_c⁄ãxt
 *
s¶
);

477 
ölöe
 
	`mbedés_s¶_ß„r_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
n
)

479 
size_t
 
i
;

480 c⁄° *
A
 = (c⁄° *Ë
a
;

481 c⁄° *
B
 = (c⁄° *Ë
b
;

482 
diff
 = 0;

484 
i
 = 0; i < 
n
; i++) {

485 
diff
 |
A
[
i
] ^ 
B
[i];

488  (
diff
);

491 #ifde‡
__˝lu•lus


492 
	}
}

	@include_lib/net/mbedtls/ssl_ticket.h

23 #i‚de‡
MBEDTLS_SSL_TICKET_H


24 
	#MBEDTLS_SSL_TICKET_H


	)

32 
	~"s¶.h
"

33 
	~"cùhî.h
"

35 #i‡
deföed
(
MBEDTLS_THREADING_C
)

36 
	~"thªadög.h
"

39 #ifde‡
__˝lu•lus


47 
«me
[4];

48 
uöt32_t
 
gíî©i⁄_time
;

49 
mbedés_cùhî_c⁄ãxt_t
 
˘x
;

51 
	tmbedés_s¶_tickë_key
;

57 
mbedés_s¶_tickë_key
 
keys
[2];

58 
a˘ive
;

60 
uöt32_t
 
tickë_li„time
;

63 (*
f_∫g
)(*, *, 
size_t
);

64 *
p_∫g
;

66 #i‡
deföed
(
MBEDTLS_THREADING_C
)

67 
mbedés_thªadög_muãx_t
 
muãx
;

70 
	tmbedés_s¶_tickë_c⁄ãxt
;

79 
mbedés_s¶_tickë_öô
(
mbedés_s¶_tickë_c⁄ãxt
 *
˘x
);

103 
mbedés_s¶_tickë_£tup
(
mbedés_s¶_tickë_c⁄ãxt
 *
˘x
,

104 (*
f_∫g
)(*, *, 
size_t
), *
p_∫g
,

105 
mbedés_cùhî_ty≥_t
 
cùhî
,

106 
uöt32_t
 
li„time
);

113 
mbedés_s¶_tickë_wrôe_t
 
mbedés_s¶_tickë_wrôe
;

120 
mbedés_s¶_tickë_∑r£_t
 
mbedés_s¶_tickë_∑r£
;

127 
mbedés_s¶_tickë_‰ì
(
mbedés_s¶_tickë_c⁄ãxt
 *
˘x
);

129 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/threading.h

23 #i‚de‡
MBEDTLS_THREADING_H


24 
	#MBEDTLS_THREADING_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°dlib.h
>

34 #ifde‡
__˝lu•lus


38 
	#MBEDTLS_ERR_THREADING_FEATURE_UNAVAILABLE
 -0x001A

	)

39 
	#MBEDTLS_ERR_THREADING_BAD_INPUT_DATA
 -0x001C

	)

40 
	#MBEDTLS_ERR_THREADING_MUTEX_ERROR
 -0x001E

	)

42 #i‡
deföed
(
MBEDTLS_THREADING_PTHREAD
)

43 
	~<±hªad.h
>

45 
±hªad_muãx_t
 
muãx
;

46 
is_vÆid
;

47 } 
	tmbedés_thªadög_muãx_t
;

50 #i‡
deföed
(
MBEDTLS_THREADING_ALT
)

52 
	~"thªadög_Æt.h
"

72 
mbedés_thªadög_£t_Æt
((*
muãx_öô
)(
mbedés_thªadög_muãx_t
 *),

73 (*
muãx_‰ì
)(
mbedés_thªadög_muãx_t
 *),

74 (*
muãx_lock
)(
mbedés_thªadög_muãx_t
 *),

75 (*
muãx_u∆ock
)(
mbedés_thªadög_muãx_t
 *));

80 
mbedés_thªadög_‰ì_Æt
();

83 #i‡
deföed
(
MBEDTLS_THREADING_C
)

89 (*
mbedés_muãx_öô
)(
mbedés_thªadög_muãx_t
 *
muãx
);

90 (*
mbedés_muãx_‰ì
)(
mbedés_thªadög_muãx_t
 *
muãx
);

91 (*
mbedés_muãx_lock
)(
mbedés_thªadög_muãx_t
 *
muãx
);

92 (*
mbedés_muãx_u∆ock
)(
mbedés_thªadög_muãx_t
 *
muãx
);

97 
mbedés_thªadög_muãx_t
 
mbedés_thªadög_ªaddú_muãx
;

98 
mbedés_thªadög_muãx_t
 
mbedés_thªadög_gmtime_muãx
;

101 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/timing.h

23 #i‚de‡
MBEDTLS_TIMING_H


24 
	#MBEDTLS_TIMING_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 #i‡!
deföed
(
MBEDTLS_TIMING_ALT
)

36 
	~<°döt.h
>

38 #ifde‡
__˝lu•lus


45 
	smbedés_timög_hr_time
 {

46 
›aque
[32];

53 
mbedés_timög_hr_time
 
timî
;

54 
uöt32_t
 
öt_ms
;

55 
uöt32_t
 
fö_ms
;

56 } 
	tmbedés_timög_dñay_c⁄ãxt
;

58 vﬁ©ûê
mbedés_timög_Æ¨med
;

67 
mbedés_timög_h¨d˛ock
();

75 
mbedés_timög_gë_timî
(
mbedés_timög_hr_time
 *
vÆ
, 
ª£t
);

86 
mbedés_£t_Æ¨m
(
£c⁄ds
);

98 
mbedés_timög_£t_dñay
(*
d©a
, 
uöt32_t
 
öt_ms
, uöt32_à
fö_ms
);

112 
mbedés_timög_gë_dñay
(*
d©a
);

114 #ifde‡
__˝lu•lus


119 
	~"timög_Æt.h
"

122 #ifde‡
__˝lu•lus


126 #i‡
deföed
(
MBEDTLS_SELF_TEST
)

132 
mbedés_timög_£lf_ã°
(
vîbo£
);

135 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/version.h

27 #i‚de‡
MBEDTLS_VERSION_H


28 
	#MBEDTLS_VERSION_H


	)

30 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

31 
	~"mbedés/mbedés_c⁄fig.h
"

33 #ö˛udê
MBEDTLS_CONFIG_FILE


40 
	#MBEDTLS_VERSION_MAJOR
 2

	)

41 
	#MBEDTLS_VERSION_MINOR
 2

	)

42 
	#MBEDTLS_VERSION_PATCH
 1

	)

49 
	#MBEDTLS_VERSION_NUMBER
 0x02020100

	)

50 
	#MBEDTLS_VERSION_STRING
 "2.2.1"

	)

51 
	#MBEDTLS_VERSION_STRING_FULL
 "mbed TLS 2.2.1"

	)

53 #i‡
deföed
(
MBEDTLS_VERSION_C
)

55 #ifde‡
__˝lu•lus


65 
mbedés_vîsi⁄_gë_numbî
();

73 
mbedés_vîsi⁄_gë_°rög
(*
°rög
);

84 
mbedés_vîsi⁄_gë_°rög_fuŒ
(*
°rög
);

103 
mbedés_vîsi⁄_check_„©uª
(c⁄° *
„©uª
);

105 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/x509.h

23 #i‚de‡
MBEDTLS_X509_H


24 
	#MBEDTLS_X509_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"a¢1.h
"

33 
	~"pk.h
"

35 #i‡
deföed
(
MBEDTLS_RSA_C
)

36 
	~"rß.h
"

44 #i‡!
deföed
(
MBEDTLS_X509_MAX_INTERMEDIATE_CA
)

53 
	#MBEDTLS_X509_MAX_INTERMEDIATE_CA
 8

	)

60 
	#MBEDTLS_ERR_X509_FEATURE_UNAVAILABLE
 -0x2080

	)

61 
	#MBEDTLS_ERR_X509_UNKNOWN_OID
 -0x2100

	)

62 
	#MBEDTLS_ERR_X509_INVALID_FORMAT
 -0x2180

	)

63 
	#MBEDTLS_ERR_X509_INVALID_VERSION
 -0x2200

	)

64 
	#MBEDTLS_ERR_X509_INVALID_SERIAL
 -0x2280

	)

65 
	#MBEDTLS_ERR_X509_INVALID_ALG
 -0x2300

	)

66 
	#MBEDTLS_ERR_X509_INVALID_NAME
 -0x2380

	)

67 
	#MBEDTLS_ERR_X509_INVALID_DATE
 -0x2400

	)

68 
	#MBEDTLS_ERR_X509_INVALID_SIGNATURE
 -0x2480

	)

69 
	#MBEDTLS_ERR_X509_INVALID_EXTENSIONS
 -0x2500

	)

70 
	#MBEDTLS_ERR_X509_UNKNOWN_VERSION
 -0x2580

	)

71 
	#MBEDTLS_ERR_X509_UNKNOWN_SIG_ALG
 -0x2600

	)

72 
	#MBEDTLS_ERR_X509_SIG_MISMATCH
 -0x2680

	)

73 
	#MBEDTLS_ERR_X509_CERT_VERIFY_FAILED
 -0x2700

	)

74 
	#MBEDTLS_ERR_X509_CERT_UNKNOWN_FORMAT
 -0x2780

	)

75 
	#MBEDTLS_ERR_X509_BAD_INPUT_DATA
 -0x2800

	)

76 
	#MBEDTLS_ERR_X509_ALLOC_FAILED
 -0x2880

	)

77 
	#MBEDTLS_ERR_X509_FILE_IO_ERROR
 -0x2900

	)

78 
	#MBEDTLS_ERR_X509_BUFFER_TOO_SMALL
 -0x2980

	)

86 
	#MBEDTLS_X509_BADCERT_EXPIRED
 0x01

	)

87 
	#MBEDTLS_X509_BADCERT_REVOKED
 0x02

	)

88 
	#MBEDTLS_X509_BADCERT_CN_MISMATCH
 0x04

	)

89 
	#MBEDTLS_X509_BADCERT_NOT_TRUSTED
 0x08

	)

90 
	#MBEDTLS_X509_BADCRL_NOT_TRUSTED
 0x10

	)

91 
	#MBEDTLS_X509_BADCRL_EXPIRED
 0x20

	)

92 
	#MBEDTLS_X509_BADCERT_MISSING
 0x40

	)

93 
	#MBEDTLS_X509_BADCERT_SKIP_VERIFY
 0x80

	)

94 
	#MBEDTLS_X509_BADCERT_OTHER
 0x0100

	)

95 
	#MBEDTLS_X509_BADCERT_FUTURE
 0x0200

	)

96 
	#MBEDTLS_X509_BADCRL_FUTURE
 0x0400

	)

97 
	#MBEDTLS_X509_BADCERT_KEY_USAGE
 0x0800

	)

98 
	#MBEDTLS_X509_BADCERT_EXT_KEY_USAGE
 0x1000

	)

99 
	#MBEDTLS_X509_BADCERT_NS_CERT_TYPE
 0x2000

	)

100 
	#MBEDTLS_X509_BADCERT_BAD_MD
 0x4000

	)

101 
	#MBEDTLS_X509_BADCERT_BAD_PK
 0x8000

	)

102 
	#MBEDTLS_X509_BADCERT_BAD_KEY
 0x010000

	)

103 
	#MBEDTLS_X509_BADCRL_BAD_MD
 0x020000

	)

104 
	#MBEDTLS_X509_BADCRL_BAD_PK
 0x040000

	)

105 
	#MBEDTLS_X509_BADCRL_BAD_KEY
 0x080000

	)

114 
	#MBEDTLS_X509_KU_DIGITAL_SIGNATURE
 (0x80Ë

	)

115 
	#MBEDTLS_X509_KU_NON_REPUDIATION
 (0x40Ë

	)

116 
	#MBEDTLS_X509_KU_KEY_ENCIPHERMENT
 (0x20Ë

	)

117 
	#MBEDTLS_X509_KU_DATA_ENCIPHERMENT
 (0x10Ë

	)

118 
	#MBEDTLS_X509_KU_KEY_AGREEMENT
 (0x08Ë

	)

119 
	#MBEDTLS_X509_KU_KEY_CERT_SIGN
 (0x04Ë

	)

120 
	#MBEDTLS_X509_KU_CRL_SIGN
 (0x02Ë

	)

121 
	#MBEDTLS_X509_KU_ENCIPHER_ONLY
 (0x01Ë

	)

122 
	#MBEDTLS_X509_KU_DECIPHER_ONLY
 (0x8000Ë

	)

129 
	#MBEDTLS_X509_NS_CERT_TYPE_SSL_CLIENT
 (0x80Ë

	)

130 
	#MBEDTLS_X509_NS_CERT_TYPE_SSL_SERVER
 (0x40Ë

	)

131 
	#MBEDTLS_X509_NS_CERT_TYPE_EMAIL
 (0x20Ë

	)

132 
	#MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING
 (0x10Ë

	)

133 
	#MBEDTLS_X509_NS_CERT_TYPE_RESERVED
 (0x08Ë

	)

134 
	#MBEDTLS_X509_NS_CERT_TYPE_SSL_CA
 (0x04Ë

	)

135 
	#MBEDTLS_X509_NS_CERT_TYPE_EMAIL_CA
 (0x02Ë

	)

136 
	#MBEDTLS_X509_NS_CERT_TYPE_OBJECT_SIGNING_CA
 (0x01Ë

	)

144 
	#MBEDTLS_X509_EXT_AUTHORITY_KEY_IDENTIFIER
 (1 << 0)

	)

145 
	#MBEDTLS_X509_EXT_SUBJECT_KEY_IDENTIFIER
 (1 << 1)

	)

146 
	#MBEDTLS_X509_EXT_KEY_USAGE
 (1 << 2)

	)

147 
	#MBEDTLS_X509_EXT_CERTIFICATE_POLICIES
 (1 << 3)

	)

148 
	#MBEDTLS_X509_EXT_POLICY_MAPPINGS
 (1 << 4)

	)

149 
	#MBEDTLS_X509_EXT_SUBJECT_ALT_NAME
 (1 << 5Ë

	)

150 
	#MBEDTLS_X509_EXT_ISSUER_ALT_NAME
 (1 << 6)

	)

151 
	#MBEDTLS_X509_EXT_SUBJECT_DIRECTORY_ATTRS
 (1 << 7)

	)

152 
	#MBEDTLS_X509_EXT_BASIC_CONSTRAINTS
 (1 << 8Ë

	)

153 
	#MBEDTLS_X509_EXT_NAME_CONSTRAINTS
 (1 << 9)

	)

154 
	#MBEDTLS_X509_EXT_POLICY_CONSTRAINTS
 (1 << 10)

	)

155 
	#MBEDTLS_X509_EXT_EXTENDED_KEY_USAGE
 (1 << 11)

	)

156 
	#MBEDTLS_X509_EXT_CRL_DISTRIBUTION_POINTS
 (1 << 12)

	)

157 
	#MBEDTLS_X509_EXT_INIHIBIT_ANYPOLICY
 (1 << 13)

	)

158 
	#MBEDTLS_X509_EXT_FRESHEST_CRL
 (1 << 14)

	)

160 
	#MBEDTLS_X509_EXT_NS_CERT_TYPE
 (1 << 16Ë

	)

166 
	#MBEDTLS_X509_FORMAT_DER
 1

	)

167 
	#MBEDTLS_X509_FORMAT_PEM
 2

	)

169 
	#MBEDTLS_X509_MAX_DN_NAME_SIZE
 256

	)

171 #ifde‡
__˝lu•lus


187 
mbedés_a¢1_buf
 
	tmbedés_x509_buf
;

192 
mbedés_a¢1_bô°rög
 
	tmbedés_x509_bô°rög
;

198 
mbedés_a¢1_«med_d©a
 
	tmbedés_x509_«me
;

203 
mbedés_a¢1_£quí˚
 
	tmbedés_x509_£quí˚
;

206 
	smbedés_x509_time
 {

207 
yór
, 
m⁄
, 
day
;

208 
hour
, 
mö
, 
£c
;

210 
	tmbedés_x509_time
;

226 
mbedés_x509_dn_gës
(*
buf
, 
size_t
 
size
, c⁄° 
mbedés_x509_«me
 *
dn
);

239 
mbedés_x509_£rül_gës
(*
buf
, 
size_t
 
size
, c⁄° 
mbedés_x509_buf
 *
£rül
);

253 
mbedés_x509_time_is_∑°
(c⁄° 
mbedés_x509_time
 *
time
);

267 
mbedés_x509_time_is_futuª
(c⁄° 
mbedés_x509_time
 *
time
);

274 
mbedés_x509_£lf_ã°
(
vîbo£
);

280 
mbedés_x509_gë_«me
(**
p
, c⁄° *
íd
,

281 
mbedés_x509_«me
 *
cur
);

282 
mbedés_x509_gë_Æg_nuŒ
(**
p
, c⁄° *
íd
,

283 
mbedés_x509_buf
 *
Æg
);

284 
mbedés_x509_gë_Æg
(**
p
, c⁄° *
íd
,

285 
mbedés_x509_buf
 *
Æg
, mbedés_x509_bu‡*
∑øms
);

286 #i‡
deföed
(
MBEDTLS_X509_RSASSA_PSS_SUPPORT
)

287 
mbedés_x509_gë_rßsß_pss_∑øms
(c⁄° 
mbedés_x509_buf
 *
∑øms
,

288 
mbedés_md_ty≥_t
 *
md_Æg
, mbedés_md_ty≥_à*
mgf_md
,

289 *
ß…_Àn
);

291 
mbedés_x509_gë_sig
(**
p
, c⁄° *
íd
, 
mbedés_x509_buf
 *
sig
);

292 
mbedés_x509_gë_sig_Æg
(c⁄° 
mbedés_x509_buf
 *
sig_oid
, c⁄° mbedés_x509_bu‡*
sig_∑øms
,

293 
mbedés_md_ty≥_t
 *
md_Æg
, 
mbedés_pk_ty≥_t
 *
pk_Æg
,

294 **
sig_›ts
);

295 
mbedés_x509_gë_time
(**
p
, c⁄° *
íd
,

296 
mbedés_x509_time
 *
time
);

297 
mbedés_x509_gë_£rül
(**
p
, c⁄° *
íd
,

298 
mbedés_x509_buf
 *
£rül
);

299 
mbedés_x509_gë_ext
(**
p
, c⁄° *
íd
,

300 
mbedés_x509_buf
 *
ext
, 
èg
);

301 
mbedés_x509_sig_Æg_gës
(*
buf
, 
size_t
 
size
, c⁄° 
mbedés_x509_buf
 *
sig_oid
,

302 
mbedés_pk_ty≥_t
 
pk_Æg
, 
mbedés_md_ty≥_t
 
md_Æg
,

303 c⁄° *
sig_›ts
);

304 
mbedés_x509_key_size_hñ≥r
(*
buf
, 
size_t
 
buf_size
, c⁄° *
«me
);

305 
mbedés_x509_°rög_to_«mes
(
mbedés_a¢1_«med_d©a
 **
hód
, c⁄° *
«me
);

306 
mbedés_x509_£t_exãnsi⁄
(
mbedés_a¢1_«med_d©a
 **
hód
, c⁄° *
oid
, 
size_t
 
oid_Àn
,

307 
¸ôiˇl
, c⁄° *
vÆ
,

308 
size_t
 
vÆ_Àn
);

309 
mbedés_x509_wrôe_exãnsi⁄s
(**
p
, *
°¨t
,

310 
mbedés_a¢1_«med_d©a
 *
fú°
);

311 
mbedés_x509_wrôe_«mes
(**
p
, *
°¨t
,

312 
mbedés_a¢1_«med_d©a
 *
fú°
);

313 
mbedés_x509_wrôe_sig
(**
p
, *
°¨t
,

314 c⁄° *
oid
, 
size_t
 
oid_Àn
,

315 *
sig
, 
size_t
 
size
);

317 
	#MBEDTLS_X509_SAFE_SNPRINTF
 \

319 if–
ªt
 < 0 || (
size_t
Ëªà>
n
 ) \

320 –
MBEDTLS_ERR_X509_BUFFER_TOO_SMALL
 ); \

322 
n
 -(
size_t
Ë
ªt
; \

323 
p
 +(
size_t
Ë
ªt
; \

324 }  0 )

	)

326 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/x509_crl.h

23 #i‚de‡
MBEDTLS_X509_CRL_H


24 
	#MBEDTLS_X509_CRL_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"x509.h
"

34 #ifde‡
__˝lu•lus


51 
	smbedés_x509_¸l_íåy
 {

52 
mbedés_x509_buf
 
øw
;

54 
mbedés_x509_buf
 
£rül
;

56 
mbedés_x509_time
 
ªvoˇti⁄_d©e
;

58 
mbedés_x509_buf
 
íåy_ext
;

60 
mbedés_x509_¸l_íåy
 *
√xt
;

62 
	tmbedés_x509_¸l_íåy
;

68 
	smbedés_x509_¸l
 {

69 
mbedés_x509_buf
 
øw
;

70 
mbedés_x509_buf
 
tbs
;

72 
vîsi⁄
;

73 
mbedés_x509_buf
 
sig_oid
;

75 
mbedés_x509_buf
 
issuî_øw
;

77 
mbedés_x509_«me
 
issuî
;

79 
mbedés_x509_time
 
this_upd©e
;

80 
mbedés_x509_time
 
√xt_upd©e
;

82 
mbedés_x509_¸l_íåy
 
íåy
;

84 
mbedés_x509_buf
 
¸l_ext
;

86 
mbedés_x509_buf
 
sig_oid2
;

87 
mbedés_x509_buf
 
sig
;

88 
mbedés_md_ty≥_t
 
sig_md
;

89 
mbedés_pk_ty≥_t
 
sig_pk
;

90 *
sig_›ts
;

92 
mbedés_x509_¸l
 *
√xt
;

94 
	tmbedés_x509_¸l
;

106 
mbedés_x509_¸l_∑r£_dî
(
mbedés_x509_¸l
 *
chaö
,

107 c⁄° *
buf
, 
size_t
 
buÊí
);

120 
mbedés_x509_¸l_∑r£
(
mbedés_x509_¸l
 *
chaö
, c⁄° *
buf
, 
size_t
 
buÊí
);

122 #i‡
deföed
(
MBEDTLS_FS_IO
)

133 
mbedés_x509_¸l_∑r£_fûe
(
mbedés_x509_¸l
 *
chaö
, c⁄° *
∑th
);

147 
mbedés_x509_¸l_öfo
(*
buf
, 
size_t
 
size
, c⁄° *
¥efix
,

148 c⁄° 
mbedés_x509_¸l
 *
¸l
);

155 
mbedés_x509_¸l_öô
(
mbedés_x509_¸l
 *
¸l
);

162 
mbedés_x509_¸l_‰ì
(
mbedés_x509_¸l
 *
¸l
);

167 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/x509_crt.h

23 #i‚de‡
MBEDTLS_X509_CRT_H


24 
	#MBEDTLS_X509_CRT_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"x509.h
"

33 
	~"x509_¸l.h
"

40 #ifde‡
__˝lu•lus


52 
	smbedés_x509_¸t
 {

53 
mbedés_x509_buf
 
øw
;

54 
mbedés_x509_buf
 
tbs
;

56 
vîsi⁄
;

57 
mbedés_x509_buf
 
£rül
;

58 
mbedés_x509_buf
 
sig_oid
;

60 
mbedés_x509_buf
 
issuî_øw
;

61 
mbedés_x509_buf
 
subje˘_øw
;

63 
mbedés_x509_«me
 
issuî
;

64 
mbedés_x509_«me
 
subje˘
;

66 
mbedés_x509_time
 
vÆid_‰om
;

67 
mbedés_x509_time
 
vÆid_to
;

69 
mbedés_pk_c⁄ãxt
 
pk
;

71 
mbedés_x509_buf
 
issuî_id
;

72 
mbedés_x509_buf
 
subje˘_id
;

73 
mbedés_x509_buf
 
v3_ext
;

74 
mbedés_x509_£quí˚
 
subje˘_Æt_«mes
;

76 
ext_ty≥s
;

77 
ˇ_i°rue
;

78 
max_∑thÀn
;

80 
key_ußge
;

82 
mbedés_x509_£quí˚
 
ext_key_ußge
;

84 
ns_˚π_ty≥
;

86 
mbedés_x509_buf
 
sig
;

87 
mbedés_md_ty≥_t
 
sig_md
;

88 
mbedés_pk_ty≥_t
 
sig_pk
;

89 *
sig_›ts
;

91 
mbedés_x509_¸t
 *
√xt
;

93 
	tmbedés_x509_¸t
;

99 
	#MBEDTLS_X509_ID_FLAG
–
id
 ) ( 1 << ( id - 1 ) )

	)

107 
uöt32_t
 
Ælowed_mds
;

108 
uöt32_t
 
Ælowed_pks
;

109 
uöt32_t
 
Ælowed_curves
;

110 
uöt32_t
 
rß_mö_bôÀn
;

112 
	tmbedés_x509_¸t_¥ofûe
;

114 
	#MBEDTLS_X509_CRT_VERSION_1
 0

	)

115 
	#MBEDTLS_X509_CRT_VERSION_2
 1

	)

116 
	#MBEDTLS_X509_CRT_VERSION_3
 2

	)

118 
	#MBEDTLS_X509_RFC5280_MAX_SERIAL_LEN
 32

	)

119 
	#MBEDTLS_X509_RFC5280_UTC_TIME_LEN
 15

	)

124 
	smbedés_x509wrôe_˚π
 {

125 
vîsi⁄
;

126 
mbedés_mpi
 
£rül
;

127 
mbedés_pk_c⁄ãxt
 *
subje˘_key
;

128 
mbedés_pk_c⁄ãxt
 *
issuî_key
;

129 
mbedés_a¢1_«med_d©a
 *
subje˘
;

130 
mbedés_a¢1_«med_d©a
 *
issuî
;

131 
mbedés_md_ty≥_t
 
md_Æg
;

132 
nŸ_bef‹e
[
MBEDTLS_X509_RFC5280_UTC_TIME_LEN
 + 1];

133 
nŸ_a·î
[
MBEDTLS_X509_RFC5280_UTC_TIME_LEN
 + 1];

134 
mbedés_a¢1_«med_d©a
 *
exãnsi⁄s
;

136 
	tmbedés_x509wrôe_˚π
;

138 #i‡
deföed
(
MBEDTLS_X509_CRT_PARSE_C
)

143 c⁄° 
mbedés_x509_¸t_¥ofûe
 
mbedés_x509_¸t_¥ofûe_deÁu…
;

149 c⁄° 
mbedés_x509_¸t_¥ofûe
 
mbedés_x509_¸t_¥ofûe_√xt
;

154 c⁄° 
mbedés_x509_¸t_¥ofûe
 
mbedés_x509_¸t_¥ofûe_suôeb
;

166 
mbedés_x509_¸t_∑r£_dî
(
mbedés_x509_¸t
 *
chaö
, c⁄° *
buf
,

167 
size_t
 
buÊí
);

184 
mbedés_x509_¸t_∑r£
(
mbedés_x509_¸t
 *
chaö
, c⁄° *
buf
, 
size_t
 
buÊí
);

186 #i‡
deföed
(
MBEDTLS_FS_IO
)

200 
mbedés_x509_¸t_∑r£_fûe
(
mbedés_x509_¸t
 *
chaö
, c⁄° *
∑th
);

215 
mbedés_x509_¸t_∑r£_∑th
(
mbedés_x509_¸t
 *
chaö
, c⁄° *
∑th
);

230 
mbedés_x509_¸t_öfo
(*
buf
, 
size_t
 
size
, c⁄° *
¥efix
,

231 c⁄° 
mbedés_x509_¸t
 *
¸t
);

245 
mbedés_x509_¸t_vîify_öfo
(*
buf
, 
size_t
 
size
, c⁄° *
¥efix
,

246 
uöt32_t
 
Êags
);

292 
mbedés_x509_¸t_vîify
(
mbedés_x509_¸t
 *
¸t
,

293 
mbedés_x509_¸t
 *
åu°_ˇ
,

294 
mbedés_x509_¸l
 *
ˇ_¸l
,

295 c⁄° *
˙
, 
uöt32_t
 *
Êags
,

296 (*
f_vrfy
)(*, 
mbedés_x509_¸t
 *, , 
uöt32_t
 *),

297 *
p_vrfy
);

326 
mbedés_x509_¸t_vîify_wôh_¥ofûe
(
mbedés_x509_¸t
 *
¸t
,

327 
mbedés_x509_¸t
 *
åu°_ˇ
,

328 
mbedés_x509_¸l
 *
ˇ_¸l
,

329 c⁄° 
mbedés_x509_¸t_¥ofûe
 *
¥ofûe
,

330 c⁄° *
˙
, 
uöt32_t
 *
Êags
,

331 (*
f_vrfy
)(*, 
mbedés_x509_¸t
 *, , 
uöt32_t
 *),

332 *
p_vrfy
);

334 #i‡
deföed
(
MBEDTLS_X509_CHECK_KEY_USAGE
)

356 
mbedés_x509_¸t_check_key_ußge
(c⁄° 
mbedés_x509_¸t
 *
¸t
,

357 
ußge
);

360 #i‡
deföed
(
MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
)

373 
mbedés_x509_¸t_check_exãnded_key_ußge
(c⁄° 
mbedés_x509_¸t
 *
¸t
,

374 c⁄° *
ußge_oid
,

375 
size_t
 
ußge_Àn
);

378 #i‡
deföed
(
MBEDTLS_X509_CRL_PARSE_C
)

388 
mbedés_x509_¸t_is_ªvoked
(c⁄° 
mbedés_x509_¸t
 *
¸t
, c⁄° 
mbedés_x509_¸l
 *
¸l
);

396 
mbedés_x509_¸t_öô
(
mbedés_x509_¸t
 *
¸t
);

403 
mbedés_x509_¸t_‰ì
(
mbedés_x509_¸t
 *
¸t
);

409 #i‡
deföed
(
MBEDTLS_X509_CRT_WRITE_C
)

415 
mbedés_x509wrôe_¸t_öô
(
mbedés_x509wrôe_˚π
 *
˘x
);

425 
mbedés_x509wrôe_¸t_£t_vîsi⁄
(
mbedés_x509wrôe_˚π
 *
˘x
, 
vîsi⁄
);

435 
mbedés_x509wrôe_¸t_£t_£rül
(
mbedés_x509wrôe_˚π
 *
˘x
, c⁄° 
mbedés_mpi
 *
£rül
);

451 
mbedés_x509wrôe_¸t_£t_vÆidôy
(
mbedés_x509wrôe_˚π
 *
˘x
, c⁄° *
nŸ_bef‹e
,

452 c⁄° *
nŸ_a·î
);

466 
mbedés_x509wrôe_¸t_£t_issuî_«me
(
mbedés_x509wrôe_˚π
 *
˘x
,

467 c⁄° *
issuî_«me
);

481 
mbedés_x509wrôe_¸t_£t_subje˘_«me
(
mbedés_x509wrôe_˚π
 *
˘x
,

482 c⁄° *
subje˘_«me
);

490 
mbedés_x509wrôe_¸t_£t_subje˘_key
(
mbedés_x509wrôe_˚π
 *
˘x
, 
mbedés_pk_c⁄ãxt
 *
key
);

498 
mbedés_x509wrôe_¸t_£t_issuî_key
(
mbedés_x509wrôe_˚π
 *
˘x
, 
mbedés_pk_c⁄ãxt
 *
key
);

507 
mbedés_x509wrôe_¸t_£t_md_Æg
(
mbedés_x509wrôe_˚π
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
);

522 
mbedés_x509wrôe_¸t_£t_exãnsi⁄
(
mbedés_x509wrôe_˚π
 *
˘x
,

523 c⁄° *
oid
, 
size_t
 
oid_Àn
,

524 
¸ôiˇl
,

525 c⁄° *
vÆ
, 
size_t
 
vÆ_Àn
);

538 
mbedés_x509wrôe_¸t_£t_basic_c⁄°øöts
(
mbedés_x509wrôe_˚π
 *
˘x
,

539 
is_ˇ
, 
max_∑thÀn
);

541 #i‡
deföed
(
MBEDTLS_SHA1_C
)

551 
mbedés_x509wrôe_¸t_£t_subje˘_key_idítifõr
(
mbedés_x509wrôe_˚π
 *
˘x
);

562 
mbedés_x509wrôe_¸t_£t_auth‹ôy_key_idítifõr
(
mbedés_x509wrôe_˚π
 *
˘x
);

574 
mbedés_x509wrôe_¸t_£t_key_ußge
(
mbedés_x509wrôe_˚π
 *
˘x
,

575 
key_ußge
);

586 
mbedés_x509wrôe_¸t_£t_ns_˚π_ty≥
(
mbedés_x509wrôe_˚π
 *
˘x
,

587 
ns_˚π_ty≥
);

594 
mbedés_x509wrôe_¸t_‰ì
(
mbedés_x509wrôe_˚π
 *
˘x
);

616 
mbedés_x509wrôe_¸t_dî
(
mbedés_x509wrôe_˚π
 *
˘x
, *
buf
, 
size_t
 
size
,

617 (*
f_∫g
)(*, *, 
size_t
),

618 *
p_∫g
);

620 #i‡
deföed
(
MBEDTLS_PEM_WRITE_C
)

637 
mbedés_x509wrôe_¸t_≥m
(
mbedés_x509wrôe_˚π
 *
˘x
, *
buf
, 
size_t
 
size
,

638 (*
f_∫g
)(*, *, 
size_t
),

639 *
p_∫g
);

643 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/x509_csr.h

23 #i‚de‡
MBEDTLS_X509_CSR_H


24 
	#MBEDTLS_X509_CSR_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~"x509.h
"

34 #ifde‡
__˝lu•lus


50 
	smbedés_x509_c§
 {

51 
mbedés_x509_buf
 
øw
;

52 
mbedés_x509_buf
 
¸i
;

54 
vîsi⁄
;

56 
mbedés_x509_buf
 
subje˘_øw
;

57 
mbedés_x509_«me
 
subje˘
;

59 
mbedés_pk_c⁄ãxt
 
pk
;

61 
mbedés_x509_buf
 
sig_oid
;

62 
mbedés_x509_buf
 
sig
;

63 
mbedés_md_ty≥_t
 
sig_md
;

64 
mbedés_pk_ty≥_t
 
sig_pk
;

65 *
sig_›ts
;

67 
	tmbedés_x509_c§
;

72 
	smbedés_x509wrôe_c§
 {

73 
mbedés_pk_c⁄ãxt
 *
key
;

74 
mbedés_a¢1_«med_d©a
 *
subje˘
;

75 
mbedés_md_ty≥_t
 
md_Æg
;

76 
mbedés_a¢1_«med_d©a
 *
exãnsi⁄s
;

78 
	tmbedés_x509wrôe_c§
;

80 #i‡
deföed
(
MBEDTLS_X509_CSR_PARSE_C
)

92 
mbedés_x509_c§_∑r£_dî
(
mbedés_x509_c§
 *
c§
,

93 c⁄° *
buf
, 
size_t
 
buÊí
);

107 
mbedés_x509_c§_∑r£
(
mbedés_x509_c§
 *
c§
, c⁄° *
buf
, 
size_t
 
buÊí
);

109 #i‡
deföed
(
MBEDTLS_FS_IO
)

120 
mbedés_x509_c§_∑r£_fûe
(
mbedés_x509_c§
 *
c§
, c⁄° *
∑th
);

135 
mbedés_x509_c§_öfo
(*
buf
, 
size_t
 
size
, c⁄° *
¥efix
,

136 c⁄° 
mbedés_x509_c§
 *
c§
);

143 
mbedés_x509_c§_öô
(
mbedés_x509_c§
 *
c§
);

150 
mbedés_x509_c§_‰ì
(
mbedés_x509_c§
 *
c§
);

156 #i‡
deföed
(
MBEDTLS_X509_CSR_WRITE_C
)

162 
mbedés_x509wrôe_c§_öô
(
mbedés_x509wrôe_c§
 *
˘x
);

176 
mbedés_x509wrôe_c§_£t_subje˘_«me
(
mbedés_x509wrôe_c§
 *
˘x
,

177 c⁄° *
subje˘_«me
);

186 
mbedés_x509wrôe_c§_£t_key
(
mbedés_x509wrôe_c§
 *
˘x
, 
mbedés_pk_c⁄ãxt
 *
key
);

195 
mbedés_x509wrôe_c§_£t_md_Æg
(
mbedés_x509wrôe_c§
 *
˘x
, 
mbedés_md_ty≥_t
 
md_Æg
);

206 
mbedés_x509wrôe_c§_£t_key_ußge
(
mbedés_x509wrôe_c§
 *
˘x
, 
key_ußge
);

217 
mbedés_x509wrôe_c§_£t_ns_˚π_ty≥
(
mbedés_x509wrôe_c§
 *
˘x
,

218 
ns_˚π_ty≥
);

232 
mbedés_x509wrôe_c§_£t_exãnsi⁄
(
mbedés_x509wrôe_c§
 *
˘x
,

233 c⁄° *
oid
, 
size_t
 
oid_Àn
,

234 c⁄° *
vÆ
, 
size_t
 
vÆ_Àn
);

241 
mbedés_x509wrôe_c§_‰ì
(
mbedés_x509wrôe_c§
 *
˘x
);

264 
mbedés_x509wrôe_c§_dî
(
mbedés_x509wrôe_c§
 *
˘x
, *
buf
, 
size_t
 
size
,

265 (*
f_∫g
)(*, *, 
size_t
),

266 *
p_∫g
);

268 #i‡
deföed
(
MBEDTLS_PEM_WRITE_C
)

286 
mbedés_x509wrôe_c§_≥m
(
mbedés_x509wrôe_c§
 *
˘x
, *
buf
, 
size_t
 
size
,

287 (*
f_∫g
)(*, *, 
size_t
),

288 *
p_∫g
);

292 #ifde‡
__˝lu•lus


	@include_lib/net/mbedtls/xtea.h

23 #i‚de‡
MBEDTLS_XTEA_H


24 
	#MBEDTLS_XTEA_H


	)

26 #i‡!
deföed
(
MBEDTLS_CONFIG_FILE
)

27 
	~"mbedés/mbedés_c⁄fig.h
"

29 #ö˛udê
MBEDTLS_CONFIG_FILE


32 
	~<°ddef.h
>

33 
	~<°döt.h
>

35 
	#MBEDTLS_XTEA_ENCRYPT
 1

	)

36 
	#MBEDTLS_XTEA_DECRYPT
 0

	)

38 
	#MBEDTLS_ERR_XTEA_INVALID_INPUT_LENGTH
 -0x0028

	)

40 #i‡!
deföed
(
MBEDTLS_XTEA_ALT
)

44 #ifde‡
__˝lu•lus


52 
uöt32_t
 
k
[4];

54 
	tmbedés_xãa_c⁄ãxt
;

61 
mbedés_xãa_öô
(
mbedés_xãa_c⁄ãxt
 *
˘x
);

68 
mbedés_xãa_‰ì
(
mbedés_xãa_c⁄ãxt
 *
˘x
);

76 
mbedés_xãa_£tup
(
mbedés_xãa_c⁄ãxt
 *
˘x
, c⁄° 
key
[16]);

88 
mbedés_xãa_¸y±_ecb
(
mbedés_xãa_c⁄ãxt
 *
˘x
,

89 
mode
,

90 c⁄° 
öput
[8],

91 
ouçut
[8]);

93 #i‡
deföed
(
MBEDTLS_CIPHER_MODE_CBC
)

107 
mbedés_xãa_¸y±_cbc
(
mbedés_xãa_c⁄ãxt
 *
˘x
,

108 
mode
,

109 
size_t
 
Àngth
,

110 
iv
[8],

111 c⁄° *
öput
,

112 *
ouçut
);

115 #ifde‡
__˝lu•lus


120 
	~"xãa_Æt.h
"

123 #ifde‡
__˝lu•lus


132 
mbedés_xãa_£lf_ã°
(
vîbo£
);

134 #ifde‡
__˝lu•lus


	@include_lib/net/mqtt/MQTTClient.h

17 #i‚de‡
__MQTT_CLIENT_C_


18 
	#__MQTT_CLIENT_C_


	)

20 
	~"¥ötf.h
"

21 
	~"MQTTPackë.h
"

22 
	~"MQTTLöux.h
"

24 
	#MAX_PACKET_ID
 65535

	)

25 
	#MAX_MESSAGE_HANDLERS
 5

	)

27 
	eQoS
 { 
	mQOS0
, 
	mQOS1
, 
	mQOS2
 };

30 
	eªtu∫Code
 { 
	mBUFFER_OVERFLOW
 = -2, 
	mFAILURE
 = -1, 
	mSUCCESS
 = 0 };

32 
NewTimî
(
Timî
 *);

34 
MQTTMesßge
 
	tMQTTMesßge
;

36 
MesßgeD©a
 
	tMesßgeD©a
;

38 
	sMQTTMesßge
 {

39 
QoS
 
	mqos
;

40 
	mªèöed
;

41 
	mdup
;

42 
	mid
;

43 *
	m∑ylﬂd
;

44 
size_t
 
	m∑ylﬂdÀn
;

47 
	sMesßgeD©a
 {

48 
MQTTMesßge
 *
	mmesßge
;

49 
MQTTSåög
 *
	mt›icName
;

52 (*
	tmesßgeH™dÀr
)(
	tMesßgeD©a
 *);

54 
Clõ¡
 
	tClõ¡
;

56 
	`MQTTC⁄√˘
(
Clõ¡
 *, 
MQTTPackë_c⁄√˘D©a
 *);

57 
	`MQTTPublish
(
Clõ¡
 *, c⁄° *, 
MQTTMesßge
 *);

58 
	`MQTTSubs¸ibe
(
Clõ¡
 *, c⁄° *, 
QoS
, 
mesßgeH™dÀr
);

59 
	`MQTTUnsubs¸ibe
(
Clõ¡
 *, const *);

60 
	`MQTTDisc⁄√˘
(
Clõ¡
 *);

61 
	`MQTTYõld
(
Clõ¡
 *, );

63 
	`£tDeÁu…MesßgeH™dÀr
(
Clõ¡
 *, 
mesßgeH™dÀr
);

65 
	`MQTTClõ¡
(
Clõ¡
 *, 
Nëw‹k
 *, , *, 
size_t
, *, size_t);

67 
	sClõ¡
 {

68 
√xt_∑ckëid
;

69 
comm™d_timeout_ms
;

70 
size_t
 
buf_size
, 
ªadbuf_size
;

71 *
buf
;

72 *
ªadbuf
;

73 
kìpAliveI¡îvÆ
;

74 
pög_out°™dög
;

75 
isc⁄√˘ed
;

77 
	sMesßgeH™dÀrs
 {

78 c⁄° *
t›icFûãr
;

79 (*
Â
)(
MesßgeD©a
 *);

80 } 
mesßgeH™dÀrs
[
MAX_MESSAGE_HANDLERS
];

82 (*
deÁu…MesßgeH™dÀr
)(
MesßgeD©a
 *);

84 
Nëw‹k
 *
ù°ack
;

85 
Timî
 
pög_timî
;

88 
	#DeÁu…Clõ¡
 {0, 0, 0, 0, 
NULL
, NULL, 0, 0, 0
	}

	)
}

	@include_lib/net/mqtt/MQTTConnect.h

18 #i‚de‡
MQTTCONNECT_H_


19 
	#MQTTCONNECT_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

30 
	mÆl
;

31 #i‡
deföed
(
REVERSED
)

33 
	mu£∫ame
 : 1;

34 
	m∑ssw‹d
 : 1;

35 
	mwûlRëaö
 : 1;

36 
	mwûlQoS
 : 2;

37 
	mwûl
 : 1;

38 
	m˛ón£ssi⁄
 : 1;

40 } 
	mbôs
;

44 
	m˛ón£ssi⁄
 : 1;

45 
	mwûl
 : 1;

46 
	mwûlQoS
 : 2;

47 
	mwûlRëaö
 : 1;

48 
	m∑ssw‹d
 : 1;

49 
	mu£∫ame
 : 1;

50 } 
	mbôs
;

52 } 
	tMQTTC⁄√˘Fœgs
;

62 
	m°ru˘_id
[4];

64 
	m°ru˘_vîsi⁄
;

66 
MQTTSåög
 
	mt›icName
;

68 
MQTTSåög
 
	mmesßge
;

72 
	mªèöed
;

77 
	mqos
;

78 } 
	tMQTTPackë_wûlO±i⁄s
;

81 
	#MQTTPackë_wûlO±i⁄s_öôülizî
 { {'M', 'Q', 'T', 'W'}, 0, {
NULL
, {0, NULL}}, {NULL, {0, NULL}}, 0, 0 }

	)

86 
	m°ru˘_id
[4];

88 
	m°ru˘_vîsi⁄
;

91 
	mMQTTVîsi⁄
;

92 
MQTTSåög
 
	m˛õ¡ID
;

93 
	mkìpAliveI¡îvÆ
;

94 
	m˛ón£ssi⁄
;

95 
	mwûlFœg
;

96 
MQTTPackë_wûlO±i⁄s
 
	mwûl
;

97 
MQTTSåög
 
	mu£∫ame
;

98 
MQTTSåög
 
	m∑ssw‹d
;

99 } 
	tMQTTPackë_c⁄√˘D©a
;

102 
	mÆl
;

103 #i‡
deföed
(
REVERSED
)

105 
	m£ssi⁄¥e£¡
 : 1;

107 } 
	mbôs
;

111 
	m£ssi⁄¥e£¡
 : 1;

112 } 
	mbôs
;

114 } 
	tMQTTC⁄«ckFœgs
;

116 
	#MQTTPackë_c⁄√˘D©a_öôülizî
 { {'M', 'Q', 'T', 'C'}, 0, 4, {
NULL
, {0, NULL}}, 60, 1, 0, \

117 
MQTTPackë_wûlO±i⁄s_öôülizî
, {
NULL
, {0, NULL}}, {NULL, {0, NULL}} }

	)

119 
DLLExp‹t
 
MQTTSîülize_c⁄√˘
(*
buf
, 
buÊí
, 
MQTTPackë_c⁄√˘D©a
 *
›ti⁄s
);

120 
DLLExp‹t
 
MQTTDe£rülize_c⁄√˘
(
MQTTPackë_c⁄√˘D©a
 *
d©a
, *
buf
, 
Àn
);

122 
DLLExp‹t
 
MQTTSîülize_c⁄«ck
(*
buf
, 
buÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
);

123 
DLLExp‹t
 
MQTTDe£rülize_c⁄«ck
(*
£ssi⁄Pª£¡
, *
c⁄«ck_rc
, *
buf
, 
buÊí
);

125 
DLLExp‹t
 
MQTTSîülize_disc⁄√˘
(*
buf
, 
buÊí
);

126 
DLLExp‹t
 
MQTTSîülize_pögªq
(*
buf
, 
buÊí
);

	@include_lib/net/mqtt/MQTTFormat.h

17 #i‡!
deföed
(
MQTTFORMAT_H
)

18 
	#MQTTFORMAT_H


	)

20 
	~"SèckTø˚.h
"

21 
	~"MQTTPackë.h
"

23 c⁄° *
MQTTPackë_gëName
(
∑ckëid
);

24 
MQTTSåögF‹m©_c⁄√˘
(*
°rbuf
, 
°rbuÊí
, 
MQTTPackë_c⁄√˘D©a
 *
d©a
);

25 
MQTTSåögF‹m©_c⁄«ck
(*
°rbuf
, 
°rbuÊí
, 
c⁄«ck_rc
, 
£ssi⁄Pª£¡
);

26 
MQTTSåögF‹m©_publish
(*
°rbuf
, 
°rbuÊí
, 
dup
, 
qos
, 
ªèöed
,

27 
∑ckëid
, 
MQTTSåög
 
t›icName
, *
∑ylﬂd
, 
∑ylﬂdÀn
);

28 
MQTTSåögF‹m©_ack
(*
°rbuf
, 
°rbuÊí
, 
∑ckëty≥
, 
dup
, 
∑ckëid
);

29 
MQTTSåögF‹m©_subs¸ibe
(*
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
, 
cou¡
,

30 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[]);

31 
MQTTSåögF‹m©_suback
(*
°rbuf
, 
°rbuÊí
, 
∑ckëid
, 
cou¡
, *
gø¡edQoSs
);

32 
MQTTSåögF‹m©_unsubs¸ibe
(*
°rbuf
, 
°rbuÊí
, 
dup
, 
∑ckëid
,

33 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[]);

34 *
MQTTF‹m©_toClõ¡Såög
(*
°rbuf
, 
°rbuÊí
, *
buf
, 
buÊí
);

35 *
MQTTF‹m©_toSîvîSåög
(*
°rbuf
, 
°rbuÊí
, *
buf
, 
buÊí
);

	@include_lib/net/mqtt/MQTTLinux.h

17 #i‚de‡
__MQTT_LINUX_


18 
	#__MQTT_LINUX_


	)

19 
	~"sock_≠i/sock_≠i.h
"

21 
Timî
 
	tTimî
;

23 
	sTimî
 {

24 
timevÆ
 
	míd_time
;

27 
Nëw‹k
 
	tNëw‹k
;

29 
	sNëw‹k
 {

30 *
	mmy_sockë
;

31 (*
	mmqâªad
)(
	mNëw‹k
 *, *, , );

32 (*
	mmqâwrôe
)(
	mNëw‹k
 *, *, , );

33 (*
	mdisc⁄√˘
)(
	mNëw‹k
 *);

34 (*
	mcb_func
)(*
	m¥iv
);

35 *
	m¥iv
;

36 
	m°©e
;

39 
expúed
(
Timî
 *);

40 
cou¡down_ms
(
Timî
 *, );

41 
cou¡down
(
Timî
 *, );

42 
À·_ms
(
Timî
 *);

44 
InôTimî
(
Timî
 *);

45 
NewNëw‹k
(
Nëw‹k
 *);

47 
C⁄√˘Nëw‹k
(
Nëw‹k
 *, *, );

52 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

53 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

54 
	#timîcmp
(
a
, 
b
, 
CMP
) \

55 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

56 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

57 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

58 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

60 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

61 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

62 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

64 ++(
ªsu…
)->
tv_£c
; \

65 (
ªsu…
)->
tv_u£c
 -= 1000000; \

67 } 0)

	)

68 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

70 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

71 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

72 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

73 --(
ªsu…
)->
tv_£c
; \

74 (
ªsu…
)->
tv_u£c
 += 1000000; \

76 } 0)

	)

	@include_lib/net/mqtt/MQTTPacket.h

18 #i‚de‡
MQTTPACKET_H_


19 
	#MQTTPACKET_H_


	)

21 #i‡
deföed
(
__˝lu•lus
)

25 #i‡
deföed
(
WIN32_DLL
Ë|| deföed(
WIN64_DLL
)

26 
	#DLLImp‹t
 
	`__de˛•ec
(
dŒimp‹t
)

	)

27 
	#DLLExp‹t
 
	`__de˛•ec
(
dŒexp‹t
)

	)

28 #ñi‡
deföed
(
LINUX_SO
)

29 
	#DLLImp‹t
 

	)

30 
	#DLLExp‹t
 
	`__©åibuã__
 ((
	`visibûôy
 ("deÁu…")))

	)

32 
	#DLLImp‹t


	)

33 
	#DLLExp‹t


	)

36 
	eîr‹s
 {

37 
MQTTPACKET_BUFFER_TOO_SHORT
 = -2,

38 
MQTTPACKET_READ_ERROR
 = -1,

39 
MQTTPACKET_READ_COMPLETE


42 
	emsgTy≥s
 {

43 
CONNECT
 = 1, 
CONNACK
, 
PUBLISH
, 
PUBACK
, 
PUBREC
, 
PUBREL
,

44 
PUBCOMP
, 
SUBSCRIBE
, 
SUBACK
, 
UNSUBSCRIBE
, 
UNSUBACK
,

45 
PINGREQ
, 
PINGRESP
, 
DISCONNECT


52 
byã
;

53 #i‡
deföed
(
REVERSED
)

55 
ty≥
 : 4;

56 
dup
 : 1;

57 
qos
 : 2;

58 
ªèö
 : 1;

59 } 
bôs
;

62 
ªèö
 : 1;

63 
qos
 : 2;

64 
dup
 : 1;

65 
ty≥
 : 4;

66 } 
bôs
;

68 } 
	tMQTTHódî
;

71 
Àn
;

72 *
d©a
;

73 } 
	tMQTTLíSåög
;

76 *
c°rög
;

77 
MQTTLíSåög
 
Àn°rög
;

78 } 
	tMQTTSåög
;

80 
	#MQTTSåög_öôülizî
 {
NULL
, {0, NULL}}

	)

82 
MQTT°æí
(
MQTTSåög
 
mqâ°rög
);

84 
	~"MQTTC⁄√˘.h
"

85 
	~"MQTTPublish.h
"

86 
	~"MQTTSubs¸ibe.h
"

87 
	~"MQTTUnsubs¸ibe.h
"

88 
	~"MQTTF‹m©.h
"

90 
MQTTSîülize_ack
(*
buf
, 
buÊí
, 
ty≥
, 
dup
, 
∑ckëid
);

91 
MQTTDe£rülize_ack
(*
∑ckëty≥
, *
dup
, *
∑ckëid
, *
buf
, 
buÊí
);

93 
MQTTPackë_Àn
(
ªm_Àn
);

94 
MQTTPackë_equÆs
(
MQTTSåög
 *
a
, *
b
);

96 
MQTTPackë_ícode
(*
buf
, 
Àngth
);

97 
MQTTPackë_decode
((*
gëch¨‚
)(*, ), *
vÆue
);

98 
MQTTPackë_decodeBuf
(*
buf
, *
vÆue
);

100 
ªadI¡
(**
µå
);

101 
ªadCh¨
(**
µå
);

102 
wrôeCh¨
(**
µå
, 
c
);

103 
wrôeI¡
(**
µå
, 
™I¡
);

104 
ªadMQTTLíSåög
(
MQTTSåög
 *
mqâ°rög
, **
µå
, *
ídd©a
);

105 
wrôeCSåög
(**
µå
, c⁄° *
°rög
);

106 
wrôeMQTTSåög
(**
µå
, 
MQTTSåög
 
mqâ°rög
);

108 
DLLExp‹t
 
MQTTPackë_ªad
(*
buf
, 
buÊí
, (*
gë‚
)(*, ));

111 (*
gë‚
)(*, *, );

112 *
sck
;

113 
mu…ùlõr
;

114 
ªm_Àn
;

115 
Àn
;

116 
°©e
;

117 } 
	tMQTTTøn•‹t
;

119 
MQTTPackë_ªadnb
(*
buf
, 
buÊí
, 
MQTTTøn•‹t
 *
åp
);

121 #ifde‡
__˝lu•lus


	@include_lib/net/mqtt/MQTTPublish.h

18 #i‚de‡
MQTTPUBLISH_H_


19 
	#MQTTPUBLISH_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_publish
(*
buf
, 
buÊí
, 
dup
, 
qos
, 
ªèöed
, 
∑ckëid
,

29 
MQTTSåög
 
t›icName
, *
∑ylﬂd
, 
∑ylﬂdÀn
);

31 
DLLExp‹t
 
MQTTDe£rülize_publish
(*
dup
, *
qos
, *
ªèöed
, *
∑ckëid
, 
MQTTSåög
 *
t›icName
,

32 **
∑ylﬂd
, *
∑ylﬂdÀn
, *
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_puback
(*
buf
, 
buÊí
, 
∑ckëid
);

35 
DLLExp‹t
 
MQTTSîülize_pubªl
(*
buf
, 
buÊí
, 
dup
, 
∑ckëid
);

36 
DLLExp‹t
 
MQTTSîülize_pubcomp
(*
buf
, 
buÊí
, 
∑ckëid
);

	@include_lib/net/mqtt/MQTTSubscribe.h

18 #i‚de‡
MQTTSUBSCRIBE_H_


19 
	#MQTTSUBSCRIBE_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_subs¸ibe
(*
buf
, 
buÊí
, 
dup
, 
∑ckëid
,

29 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[]);

31 
DLLExp‹t
 
MQTTDe£rülize_subs¸ibe
(*
dup
, *
∑ckëid
,

32 
maxcou¡
, *
cou¡
, 
MQTTSåög
 
t›icFûãrs
[], 
ªque°edQoSs
[], *
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_suback
(*
buf
, 
buÊí
, 
∑ckëid
, 
cou¡
, *
gø¡edQoSs
);

36 
DLLExp‹t
 
MQTTDe£rülize_suback
(*
∑ckëid
, 
maxcou¡
, *
cou¡
, 
gø¡edQoSs
[], *
buf
, 
Àn
);

	@include_lib/net/mqtt/MQTTUnsubscribe.h

18 #i‚de‡
MQTTUNSUBSCRIBE_H_


19 
	#MQTTUNSUBSCRIBE_H_


	)

21 #i‡!
deföed
(
DLLImp‹t
)

22 
	#DLLImp‹t


	)

24 #i‡!
deföed
(
DLLExp‹t
)

25 
	#DLLExp‹t


	)

28 
DLLExp‹t
 
MQTTSîülize_unsubs¸ibe
(*
buf
, 
buÊí
, 
dup
, 
∑ckëid
,

29 
cou¡
, 
MQTTSåög
 
t›icFûãrs
[]);

31 
DLLExp‹t
 
MQTTDe£rülize_unsubs¸ibe
(*
dup
, *
∑ckëid
, 
max_cou¡
, *
cou¡
, 
MQTTSåög
 
t›icFûãrs
[],

32 *
buf
, 
Àn
);

34 
DLLExp‹t
 
MQTTSîülize_unsuback
(*
buf
, 
buÊí
, 
∑ckëid
);

36 
DLLExp‹t
 
MQTTDe£rülize_unsuback
(*
∑ckëid
, *
buf
, 
Àn
);

	@include_lib/net/mqtt/StackTrace.h

18 #i‚de‡
STACKTRACE_H_


19 
	#STACKTRACE_H_


	)

22 
	~"¥ötf.h
"

25 
	#TRACE_MINIMUM
 1

	)

26 
	#TRACE_MEDIUM
 2

	)

27 
	#TRACE_MAXIMUM
 3

	)

29 #i‡
deföed
(
NOSTACKTRACE
)

30 
	#FUNC_ENTRY


	)

31 
	#FUNC_ENTRY_NOLOG


	)

32 
	#FUNC_ENTRY_MED


	)

33 
	#FUNC_ENTRY_MAX


	)

34 
	#FUNC_EXIT


	)

35 
	#FUNC_EXIT_NOLOG


	)

36 
	#FUNC_EXIT_MED


	)

37 
	#FUNC_EXIT_MAX


	)

38 
	#FUNC_EXIT_RC
(
x
)

	)

39 
	#FUNC_EXIT_MED_RC
(
x
)

	)

40 
	#FUNC_EXIT_MAX_RC
(
x
)

	)

44 #i‡
deföed
(
WIN32
)

45 
	#ölöe
 
__ölöe


	)

46 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

47 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, -1)

	)

48 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

49 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__FUNCTION__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

50 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

51 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, -1)

	)

52 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

53 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

54 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

55 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

56 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__FUNCTION__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

58 
	#FUNC_ENTRY
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MINIMUM
)

	)

59 
	#FUNC_ENTRY_NOLOG
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, -1)

	)

60 
	#FUNC_ENTRY_MED
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MEDIUM
)

	)

61 
	#FUNC_ENTRY_MAX
 
	`SèckTø˚_íåy
(
__func__
, 
__LINE__
, 
TRACE_MAXIMUM
)

	)

62 
	#FUNC_EXIT
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MINIMUM
)

	)

63 
	#FUNC_EXIT_NOLOG
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, -1)

	)

64 
	#FUNC_EXIT_MED
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MEDIUM
)

	)

65 
	#FUNC_EXIT_MAX
 
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, 
NULL
, 
TRACE_MAXIMUM
)

	)

66 
	#FUNC_EXIT_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MINIMUM
)

	)

67 
	#FUNC_EXIT_MED_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MEDIUM
)

	)

68 
	#FUNC_EXIT_MAX_RC
(
x
Ë
	`SèckTø˚_exô
(
__func__
, 
__LINE__
, &x, 
TRACE_MAXIMUM
)

	)

70 
SèckTø˚_íåy
(c⁄° *
«me
, 
löe
, 
åa˚
);

71 
SèckTø˚_exô
(c⁄° *
«me
, 
löe
, *
ªtu∫_vÆue
, 
åa˚
);

73 
SèckTø˚_¥ötSèck
(*
de°
);

74 *
SèckTø˚_gë
();

	@include_lib/net/mqtt/transport.h

18 
å™•‹t_£ndPackëBuf„r
(
sock
, *
buf
, 
buÊí
);

19 
å™•‹t_gëd©a
(*
buf
, 
cou¡
);

20 
å™•‹t_gëd©™b
(*
sck
, *
buf
, 
cou¡
);

21 
å™•‹t_›í
(*
ho°
, 
p‹t
);

22 
å™•‹t_˛o£
(
sock
);

	@include_lib/net/rtp/rtp_common.h

7 #i‚de‡
DVRUNNING2_RTP_COMMON_H


8 
	#DVRUNNING2_RTP_COMMON_H


	)

9 
	~"gíîic/ty≥def.h
"

10 
	~"lwù/sockës.h
"

11 
	~"lwù/√tdb.h
"

13 
	#PACKET_BUFFER_END
 ()0x00000000

	)

14 
	#MAX_RTP_PKT_LENGTH
 1400

	)

15 
	#DEST_IP
 "127.0.0.1"

16 
	#V_PORT
 6666

	)

17 
	#A_PORT
 1234

	)

18 
	#PT_PCM
 97

	)

19 
	#PT_H264
 96

	)

20 
	#MTU_SIZE
 1500

	)

21 
	#VIDEO_FRAMERATE
 30

	)

22 
	#AUDIO_SAMPLERATE
 8000

	)

23 
	#πp
 "J_RTP"

	)

26 
	m°¨tcodïªfix_Àn
;

27 
	mÀn
;

28 
	mmax_size
;

29 
	mf‹biddí_bô
;

30 
	m«l_ª„ªn˚_idc
;

31 
	m«l_unô_ty≥
;

32 *
	mbuf
;

33 
	mlo°_∑ckës
;

34 } 
	tNALU_t
;

38 #¥agm®
∑ck
(1)

39 
	sπp_hdr
 {

54 
	mc§c_Àn
: 4;

55 
	mexãnsi⁄
: 1;

56 
	m∑ddög
: 1;

57 
	mvîsi⁄
: 2;

59 
	m∑ylﬂd
: 7;

60 
	mm¨kî
: 1;

62 
	m£q_no
;

64 
	mtime°amp
;

66 
	ms§c
;

67 } 
	tπp_hdr_t
;

68 #¥agm®
∑ck
()

78 
	sNALU_HEADER
 {

86 
	mTYPE
: 5;

87 
	mNRI
: 2;

88 
	mF
: 1;

89 } 
	t«lu_hdr_t
;

92 
	sFU_INDICATOR
 {

100 
	mTYPE
: 5;

101 
	mNRI
: 2;

102 
	mF
: 1;

103 } 
	tfu_ödiˇt‹_t
;

107 
	sFU_HEADER
 {

115 
	mTYPE
: 5;

116 
	mR
: 1;

117 
	mE
: 1;

118 
	mS
: 1;

119 } 
	tfu_hdr_t
;

122 
	msockfd
;

123 
sockaddr_ö
 
	mv_addr
;

124 
sockaddr_ö
 
	ma_addr
;

125 
NALU_t
 *
	m«lu
;

126 } 
	tπp_c⁄ãxt_t
;

128 
	s_av‰ame
 {

129 
	mty≥
;

130 
uöt32_t
 
	msize
;

131 
uöt32_t
 
	m£quí˚
;

132 
uöt32_t
 
	mtime°amp
;

133 
uöt32_t
 
	mÂs
;

134 
uöt32_t
 
	maudio_§
;

135 
uöt8_t
 
	mbuf
[0];

136 } 
	tav‰ame_t
;

138 
	eAV_TYPE
 {

139 
	mAV_TYPE_AUDIO
,

140 
	mAV_TYPE_VIDEO
,

142 
πp_¸óã_sockë
();

143 
πp_£nd_∑ckë
(
ty≥
, c⁄° *
buf
, 
size_t
 
size
);

144 
πp_˛o£_sockë
();

145 
uöt32_t
 
πp_gë_video_time°amp
();

	@include_lib/net/rtp/rtp_h264.h

1 #i‚de‡
RTP_H264_H


2 
	#RTP_H264_H


	)

4 
	~"πp_comm⁄.h
"

5 
	~"£rvî/π_°ªam_pkg.h
"

7 
πp_h264_öô
();

8 
πp_h264_£nd_‰ame
(
π_°ªam_öfo
 *
öfo
, 
u8
 *
d©a
, 
u32
 
size
, u32 
Âs
);

9 
πp_h264_£nd_‰ame_wôh_ts
(
π_°ªam_öfo
 *
öfo
, 
u8
 *
buf
, 
u32
 
size
, u32 
ts
);

	@include_lib/net/server/ai_server.h

1 #i‚de‡
AI_SERVER_H


2 
	#AI_SERVER_H


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"£rvî/audio_£rvî.h
"

6 
	~"°d¨g.h
"

9 
	mAI_SERVER_EVENT_URL
,

10 
	mAI_SERVER_EVENT_CONNECTED
,

11 
	mAI_SERVER_EVENT_DISCONNECTED
,

12 
	mAI_SERVER_EVENT_CONTINUE
,

13 
	mAI_SERVER_EVENT_PAUSE
,

17 
	#AI_REQ_LISTEN
 0x10

	)

18 
	#AI_REQ_EVENT
 0x12

	)

22 
	mAI_STAT_CONNECTED
,

23 
	mAI_STAT_DISCONNECTED
,

27 
	eai_£rvî_evít
 {

28 
	mAI_EVENT_SPEAK_END
 = 0x01,

29 
	mAI_EVENT_MEDIA_END
 = 0x02,

30 
	mAI_EVENT_PLAY_PAUSE
 = 0x03,

31 
	mAI_EVENT_PREVIOUS_SONG
 = 0x04,

32 
	mAI_EVENT_NEXT_SONG
 = 0x05,

33 
	mAI_EVENT_VOLUME_CHANGE
 = 0X06,

34 
	mAI_EVENT_VOLUME_INCR
 = 0x07,

35 
	mAI_EVENT_VOLUME_DECR
 = 0x08,

36 
	mAI_EVENT_VOLUME_MUTE
 = 0x09,

37 
	mAI_EVENT_RECORD_START
 = 0x0a,

38 
	mAI_EVENT_RECORD_STOP
 = 0x0c,

39 
	mAI_EVENT_VOICE_MODE
 = 0x0d,

40 
	mAI_EVENT_PLAY_TIME
 = 0x0e,

41 
	mAI_EVENT_MEDIA_STOP
 = 0x0f,

42 
	mAI_EVENT_QUIT
 = 0xff,

46 
	mAI_REQ_CONNECT
,

47 
	mAI_LISTEN_START
,

48 
	mAI_LISTEN_STOP
,

51 
	sai_sdk_≠i
 {

52 c⁄° *
	m«me
;

53 (*
	mc⁄√˘
)();

54 (*
	m°©e_check
)();

55 (*
	mdo_evít
)(
	mevít
, ...);

56 (*
	mdisc⁄√˘
)();

59 
	sai_li°í
 {

60 
	mcmd
;

63 
	sai_evít
 {

64 
	mevít
;

65 
	mvﬁume
;

66 
u16
 
	m¥ogªss
;

67 c⁄° *
	mai_«me
;

71 
	uai_ªq
 {

72 
ai_li°í
 
	mlis
;

73 
ai_evít
 
	mevt
;

78 
ai_£rvî_evít_uæ
(c⁄° 
ai_sdk_≠i
 *, c⁄° *
uæ
, );

80 
ai_£rvî_do_evít
(
evít
, ...);

83 c⁄° 
ai_sdk_≠i
 
ai_sdk_≠i_begö
[];

84 c⁄° 
ai_sdk_≠i
 
ai_sdk_≠i_íd
[];

87 
	#REGISTER_AI_SDK
(
«me
) \

88 c⁄° 
ai_sdk_≠i
 
«me
 
	`£c
(.
ai_sdk
)

	)

91 
	#li°_f‹_óch_ai_sdk
(
p
) \

92 
ödex
 = 0, 
p
 = 
ai_sdk_≠i_begö
;Ö < 
ai_sdk_≠i_íd
;Ö++,ödex++)

	)

	@include_lib/net/server/ctp_server.h

1 #i‚de‡ 
__CTP_SERVER_H__


2 
	#__CTP_SERVER_H__


	)

5 
	~<°d¨g.h
>

7 
	~"˘p.h
"

8 
	~"cdp.h
"

9 
	~"gíîic/ty≥def.h
"

10 
	#CTP_PUT_COMMAND
 0x1

	)

11 
	#CTP_GET_COMMAND
 0x2

	)

12 
	#CTP_NOTIFY_COMMAND
 0x3

	)

13 
	#CDP_NOTIFY_COMMAND
 0x4

	)

16 
	mCTP_NO_ERR
 = 0x0,

17 
	mCTP_SDCARD
,

18 
	mCTP_SD_OFFLINE
,

19 
	mCTP_ACCESS_RFU
,

20 
	mCTP_REQUEST
,

21 
	mCTP_VER_UMATCH
,

22 
	mCTP_NO_TOPIC
,

23 
	mCTP_IN_USB
,

24 
	mCTP_IN_VIDEO
,

25 
	mCTP_IN_BROWSE
,

26 
	mCTP_IN_PARKING
,

27 
	mCTP_OPEN_FILE
,

28 
	mCTP_SYS_EXCEP
,

29 
	mCTP_SET_PRARM
,

30 
	mCTP_NET_ERR
,

31 
	mCTP_PULL_OFFLINE
,

32 
	mCTP_PULL_NOSUPPORT
,

33 
	mCTP_RT_OPEN_FAIL
,

34 
	mCTP_XX_XXXXX
 = 0xff,

36 
	#CTP_NO_ERR_MSG
 "\"msg\":\"CTP_NO_ERR\""

	)

37 
	#CTP_SDCARD_MSG
 "\"msg\":\"CTP_SDCARD_MSG\""

38 
	#CTP_SD_OFFLINE_MSG
 "\"msg\":\"CTP_SD_OFFLINE_MSG\""

39 
	#CTP_ACCESS_RFU_MSG
 "\"msg\":\"CTP_ACCESS_RFU_MSG\""

40 
	#CTP_REQUEST_MSG
 "\"msg\":\"CTP_REQUEST_MSG\""

41 
	#CTP_VER_UMATCH_MSG
 "\"msg\":\"CTP_VER_UMATCH_MSG\""

42 
	#CTP_NO_TOPIC_MSG
 "\"msg\":\"CTP_NO_TOPIC_MSG\""

43 
	#CTP_IN_USB_MSG
 "\"msg\":\"CTP_IN_USB_MSG\""

44 
	#CTP_IN_VIDEO_MSG
 "\"msg\":\"CTP_IN_VIDEO_MSG\""

45 
	#CTP_IN_BROWSE_MSG
 "\"msg\":\"CTP_IN_BROWSE_MSG\""

46 
	#CTP_IN_PARKING_MSG
 "\"msg\":\"CTP_IN_PARKING_MSG\""

47 
	#CTP_OPEN_FILE_MSG
 "\"msg\":\"CTP_OPEN_FILE_MSG\""

48 
	#CTP_SYS_EXCEP_MSG
 "\"msg\":\"CTP_SYS_EXCEP_MSG\""

49 
	#CTP_SET_PRARM_MSG
 "\"msg\":\"CTP_SET_PRARM_MSG\""

50 
	#CTP_NET_ERR_MSG
 "\"msg\":\"CTP_NET_ERR_MSG\""

51 
	#CTP_PULL_OFFLINE_MSG
 "\"msg\":\"CTP_PULL_OFFLINE\""

52 
	#CTP_PULL_NOSUPPORT_MSG
 "\"msg\":\"CTP_PULL_NOSUPPORT\""

53 
	#CTP_RT_OPEN_FAIL_MSG
 "\"msg\":\"CTP_RT_OPEN_FAIL\""

54 

	)

75 
	#PARM_MAX
 8

	)

76 
	s˘p_ªq
 {

77 
u32
 
	m∑rm_cou¡
;

78 *
	m˛i
;

79 c⁄° *
	mt›ic
;

80 *
	m∑rm
;

83 
	s˘p_¨g
 {

84 *
	m˛i
;

85 
	mt›ic
[64];

86 *
	mc⁄ã¡
;

91 
	ekìp_Æive_ty≥
 {

92 
	mNOT_USE_ALIVE
 = 0x0,

93 
	mCTP_ALIVE
 = 0x1,

94 
	mCDP_ALIVE
 = 0x2,

96 
	s˘p_£rvî_öfo
 {

97 
u8
 
	m˘p_vaûd
;

98 
u16
 
	m˘p_p‹t
;

99 
u8
 
	mcdp_vaûd
;

100 
u16
 
	mcdp_p‹t
;

101 
kìp_Æive_ty≥
 
	mk_Æive_ty≥
;

105 
	s˘p_m≠_íåy
 {

106 c⁄° *
	mdev_cmd
;

107 c⁄° *
	m˘p_comm™d
;

108 (*
	mgë
)(*, *);

109 (*
	mput
)(*, *);

110 
u8
 
	msync
;

115 
˘p_m≠_íåy
 
˘p_m≠pög_èb_begö
[], 
˘p_m≠pög_èb_íd
[];

117 
˘p_m≠_íåy
 
˘p_m≠pög_èb_sy°em_cmd_begö
[], 
˘p_m≠pög_èb_sy°em_cmd_íd
[];

119 
˘p_m≠_íåy
 
˘p_m≠pög_èb_video_cmd_begö
[], 
˘p_m≠pög_èb_video_cmd_íd
[];

121 
˘p_m≠_íåy
 
˘p_m≠pög_èb_phŸo_cmd_begö
[], 
˘p_m≠pög_èb_phŸo_cmd_íd
[];

124 
	#li°_f‹_˘p_m≠pög_èb
(
p
) \

125 
p
=
˘p_m≠pög_èb_begö
;Ö<
˘p_m≠pög_èb_íd
;Ö++)

	)

127 
	#li°_f‹_˘p_sy°em_èb
(
p
) \

128 
p
=
˘p_m≠pög_èb_sy°em_cmd_begö
;Ö<
˘p_m≠pög_èb_sy°em_cmd_íd
;Ö++)

	)

131 
	#li°_f‹_˘p_video_èb
(
p
) \

132 
p
=
˘p_m≠pög_èb_video_cmd_begö
;Ö<
˘p_m≠pög_èb_video_cmd_íd
;Ö++)

	)

135 
	#li°_f‹_˘p_phŸo_èb
(
p
) \

136 
p
=
˘p_m≠pög_èb_phŸo_cmd_begö
;Ö<
˘p_m≠pög_èb_phŸo_cmd_íd
;Ö++)

	)

141 
˘p_cmd_™Æysis
(c⁄° *
t›ic
, *
c⁄ã¡
, *
¥iv
);

142 
£rvî
 *
gë_˘p_£rvî_h™dî
();

145 
__föd_gë_sy°em_cmd_run
(c⁄° *
t›ic
);

146 
__föd_gë_video_cmd_run
(c⁄° *
t›ic
);

147 
__föd_gë_phŸo_cmd_run
(c⁄° *
t›ic
);

148 
CTP_CMD_COMBINED
(*
¥iv
, 
u32
 
îr
, c⁄° *
_ªq
, c⁄° *
mŸhod
, *
°r
);

149 
CTP_ERR
(
îr
);

150 
CTP_CMD_RELEASE
(*
buf
);

	@include_lib/net/server/net2video.h

1 #i‚de‡
__NET2VIDEO__H


2 
	#__NET2VIDEO__H


	)

3 
	scmd_˘l
 {

4 
	mÀn
;

5 
	mcmd
;

6 *
	md©a
;

9 
	sphŸo_∑rm
 {

10 
u32
 
	mwidth
;

11 
u32
 
	mheight
;

12 
u32
 
	mquÆôy
;

13 *
	md©abuf„r
;

14 
u32
 
	md©Æí
;

19 
video_π_t˝_£rvî_öô2
(
p‹t
, (*
ˇŒback
)(, *, , *));

21 
	`video_π_t˝_£rvî_unöô2
();

23 
	`cmd_£nd
(
cmd_˘l
 *
cöfo
);

25 
	`video_disc⁄√˘_Æl_˛i
();

28 
	#IPCIOC_STREAM_ON
 
	`_IOW
('U', 0, ())

	)

29 
	#IPCIOC_STREAM_OFF
 
	`_IOW
('U', 1, ())

	)

30 
	#IPCIOC_REQBUFS
 
	`_IOW
('U', 2, ())

	)

31 
	#IPCIOC_DQBUF
 
	`_IOW
('U', 3, ())

	)

32 
	#IPCIOC_QBUF
 
	`_IOW
('U', 4, ())

	)

33 
	#IPCIOC_SEND_CMD
 
	`_IOW
('U', 5, ())

	)

34 
	#IPCIOC_SEND_CMD_ASYNC
 
	`_IOW
('U', 6, ())

	)

35 
	#IPCIOC_CONNECT
 
	`_IOW
('U', 7, ())

	)

36 
	#IPCIOC_DISCONNECT
 
	`_IOW
('U', 8, ())

	)

37 
	#IPCIOC_SET_NET
 
	`_IOW
('U', 9, ())

	)

38 
	#IPCIOC_RESET_NET
 
	`_IOW
('U', 10, ())

	)

42 
	#VCAM_SET_VIDEO_PRARM
 
	`_IOW
('U', 16, ())

	)

43 
	#VCAM_SET_CYC_TIME
 
	`_IOW
('U', 17, ())

	)

44 
	#VCAM_IMAGE_PICTURE
 
	`_IOW
('U', 18, ())

	)

45 
	#VCAM_SET_LOCAL_CYC_TIME
 
	`_IOW
('U', 19, ())

	)

47 
	#IPCIOC_AUDIO_STREAM_ON
 
	`_IOW
('U',11, ())

	)

48 
	#IPCIOC_AUDIO_STREAM_OFF
 
	`_IOW
('U', 12, ())

	)

49 
	#IPCIOC_AUDIO_REQBUFS
 
	`_IOW
('U', 13, ())

	)

50 
	#IPCIOC_AUDIO_DQBUF
 
	`_IOW
('U', 14, ())

	)

51 
	#IPCIOC_AUDIO_QBUF
 
	`_IOW
('U', 15, ())

	)

55 
	ecmd_num
 {

56 
CMD_UNKNOWN_CMD
 = -1000,

57 
CMD_TIMEOUT_CMD
 = -9999,

59 
CMD_SET_VIDEO_SAVE_FILE_FAIL
 = -9,

60 
CMD_GET_IMAGE_PICTURE_FAIL
 = -8,

61 
CMD_SET_VIDEO_REC_PRARM_FAIL
 = -7,

62 
CMD_GET_DISPLAY_RESO_FAIL
 = -6,

63 
CMD_STOP_H264_STREAM_FAIL
 = -5,

64 
CMD_STOP_JPEG_STREAM_FAIL
 = -4,

65 
CMD_GET_FPS_FAIL
 = -3,

66 
CMD_OPEN_JPEG_STREAM_FAIL
 = -2,

67 
CMD_OPEN_H264_STREAM_FAIL
 = -1,

69 
CMD_NO_ERR
 = 0,

70 
CMD_OPEN_H264_STREAM
 = 1,

71 
CMD_OPEN_JPEG_STREAM
 = 2,

72 
CMD_GET_FPS
 = 3,

73 
CMD_STOP_JPEG_STREAM
 = 4,

74 
CMD_STOP_H264_STREAM
 = 5,

75 
CMD_GET_DISPLAY_RESO
 = 6,

76 
CMD_SET_VIDEO_REC_PRARM
 = 7,

77 
CMD_GET_IMAGE_PICTURE
 = 8,

78 
CMD_SET_VIDEO_SAVE_FILE
 = 9,

79 
CMD_SWITCH_TO_PHOTO_MODE
 = 10,

80 
CMD_SWITCH_TO_VIDEO_MODE
 = 11,

81 
CMD_TAKE_PHOTO
 = 12,

82 
CMD_TAKE_PHOTO1
 = 13,

83 
CMD_SET_JPEG_RESO
 = 14,

85 c⁄° 
devi˚_›î©i⁄s
 
ùc_dev_›s
;

	@include_lib/net/server/net_server.h

1 #i‚de‡ 
__NET_SERVER_H__


2 
	#__NET_SERVER_H__


	)

6 
	~"fs/fs.h
"

9 
	~"lwù/sockës.h
"

10 
	~"lwù/√tdb.h
"

12 
	mGET_MEDIA_INFO
,

13 
	mGET_VIDEO_PREVEIW
,

14 
	mPLAY_VIDEO_START
,

15 
	mPLAY_VIDEO_PAUSE
,

16 
	mPLAY_VIDEO_FF
,

17 
	mPLAY_VIDEO_FR
,

18 
	mPLAY_VIDEO_STOP
,

22 
	mPREVIEW
 = 0x0,

23 
	mTHUS
,

25 
	s¥evõw
 {

26 
u8
 
	mty≥
;

27 (*
	mfûíame
)[64];

28 
u8
 *
	mbuf„r
;

29 
size_t
 
	mbuf„r_Àn
;

30 
size_t
 
	md©a_size
;

31 
FILE
 *
	mfd
;

32 
u16
 
	mweight
;

33 
u16
 
	mheight
;

34 
u32
 
	mnum
;

35 
u16
 
	mtimeöv
;

36 
u32
 
	moff£t
;

40 
	s_∂ayback
 {

41 
	mfûe_«me
[64];

42 
u32
 
	mvedio_öv
;

43 
u32
 
	mweight
;

44 
u32
 
	mheight
;

45 
u8
 
	mty≥
;

46 
u32
 
	mm£c
;

50 
	s√t_ªq
 {

51 
u32
 
	misf‹w¨d
;

52 
	mdú
[36];

53 
¥evõw
 
	m¥e
;

54 
_∂ayback
 
	m∂ayback
;

59 
	mNONE
 = 0x0,

60 
	mVID_JPG
,

61 
	mVIDEO
,

62 
	mJPG
,

65 
	sπ_°ªam_≠p_öfo
 {

66 
u32
 
	mwidth
;

67 
u32
 
	mheight
;

68 
u8
 
	mty≥
;

69 
u8
 
	mÂs
;

70 *
	m¥iv
;

75 
FILE_LIST_ADD
(
u32
 
°©us
, c⁄° *
∑th
);

76 
FILE_LIST_INIT
(
u32
 
Êag
);

77 
FILE_LIST_INIT_SMALL
(
u32
 
fûe_num
);

79 
FILE_LIST_IN_MEM
(
u32
 
Êag
);

80 
FILE_INITIND_CHECK
();

81 
FILE_CHANGE_ATTR
(c⁄° *
‚ame
, 
©å
);

82 
FILE_REMOVE_ALL
();

83 
FILE_DELETE
(c⁄° *
‚ame
);

85 
FILE_GEN
();

87 
vúfûe_ªg
();

88 
vf_li°
(
u8
 
ty≥
, u8 
isf‹w¨d
, *
dú
);

90 
video_¥evõw_po°_msg
(
√t_ªq
 *
ªq
);

91 
video_∂ayback_po°_msg
(
√t_ªq
 *
ªq
);

92 
¥evõw_öô
(
u16
 
p‹t
, 
ˇŒback
(*
¥iv
, 
u8
 *
d©a
, 
size_t
 
Àn
));

93 
∂ayback_öô
(
u16
 
p‹t
, 
ˇŒback
(*
¥iv
, 
u8
 *
d©a
, 
size_t
 
Àn
));

94 
¥evõw_unöô
();

95 
∂ayback_unöô
();

96 
∂ayback_disc⁄√˘_˛i
(
sockaddr_ö
 *
d°_addr
);

97 
video_¥evõw_™d_thus_disc⁄√˘
(
sockaddr_ö
 *
d°_addr
);

98 
∂ayback_˛i_∑u£
(
sockaddr_ö
 *
d°_addr
);

99 
∂ayback_˛i_c⁄töue
(
sockaddr_ö
 *
d°_addr
);

100 
∂ayback_˛i_Á°_∂ay
(
sockaddr_ö
 *
d°_addr
, 
u32
 
•ìd
);

101 
video_˛i_¶ide
(
sockaddr_ö
 *
d°_addr
, 
u8
 
dúe˘
);

	@include_lib/net/server/net_server.ld

2 
	g_ai_sdk_≠i_begö
 = .;

3 
PROVIDE
(
ai_sdk_≠i_begö
 = .);

4 *(.
	gai_sdk
)

5 
	g_ai_sdk_≠i_íd
 = .;

6 
PROVIDE
(
ai_sdk_≠i_íd
 = .);

	@include_lib/net/server/network_mssdp.h

1 #i‚de‡
__NETWORK_MSSDP_H_


2 
	#__NETWORK_MSSDP_H_


	)

3 
√tw‹k_mssdp_öô
();

5 
√tw‹k_mssdp_unöô
();

	@include_lib/net/server/packet.h

1 #i‚de‡ 
__PACKET_H__


2 
	#__PACKET_H__


	)

4 
	~"sock_≠i/sock_≠i.h
"

5 
	~"os/os_com∑t.h
"

6 
	~"£rvî/√t_£rvî.h
"

7 
	~"≠p_c⁄fig.h
"

8 
	~"£rvî/£rvî_c‹e.h
"

9 
	~"£rvî/˘p_£rvî.h
"

10 
	~"sim∂e_mov_u≈kg.h
"

11 
	~"π_°ªam_pkg.h
"

12 
	~"fs/fs.h
"

13 
	~"comm⁄/comm⁄.h
"

15 
	~"time.h
"

16 
	~"sys/time.h
"

18 
	s__∑ckë_öfo
 {

19 
u32
 
	mÀn
;

20 *
	msock
;

21 
u8
 *
	md©a
;

22 
FILE
 *
	mfd
;

23 
	mfûe_«me
[64];

24 
tm
 
	mtime
;

25 
vfsˇn
 *
	mfs
;

26 
u8
 
	mty≥
;

27 
u8
 
	mÁ°_∂ay_mask
;

28 
__mov_u≈kg_öfo
 
	möfo
;

33 
gë_mov_medü_öfo
(
__∑ckë_öfo
 *
pöfo
);

34 
FILE
 *
∂ay_√xt
(
__∑ckë_öfo
 *
pöfo
);

35 
FILE
 *
∂ay_¥ev
(
__∑ckë_öfo
 *
pöfo
);

36 
£nd_video_∑ckë
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
i
);

37 
£nd_audio_∑ckë
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
j
);

38 
£nd_medü_∑ckë
(
__∑ckë_öfo
 *
pöfo
);

39 
£nd_d©e_∑ckë
(
__∑ckë_öfo
 *
pöfo
, 
u32
 
m£c
);

40 
£nd_íd_∑ckë
(
__∑ckë_öfo
 *
pöfo
);

41 
upd©e_d©a
(
__∑ckë_öfo
 *
pöfo
);

42 
ö¸_d©e_time
(
tm
 *
tm_time
, 
ö¸
);

43 
£nd_gps_d©a_∑ckë
(
__∑ckë_öfo
 *
pöfo
);

44 
föd_gps_d©a
(
__∑ckë_öfo
 *
pöfo
);

45 
unföd_gps_d©a
();

	@include_lib/net/server/rt_stream_pkg.h

1 #i‚de‡ 
__RT_STREAM_PKG_H__


2 
	#__RT_STREAM_PKG_H__


	)

4 
	~"fs/fs.h
"

5 
	~"lwù/sockës.h
"

6 
	~"lwù/√tdb.h
"

9 
	#PCM_TYPE_AUDIO
 1

	)

10 
	#JPEG_TYPE_VIDEO
 2

	)

11 
	#H264_TYPE_VIDEO
 3

	)

12 
	#PREVIEW_TYPE
 4

	)

13 
	#DATE_TIME_TYPE
 5

	)

14 
	#MEDIA_INFO_TYPE
 6

	)

15 
	#PLAY_OVER_TYPE
 7

	)

16 
	#GPS_INFO_TYPE
 8

	)

17 
	#NO_GPS_DATA_TYPE
 9

	)

18 
	#G729_TYPE_AUDIO
 10

	)

21 
	#FAST_PLAY_MAKER
 (1<<6)

	)

22 
	#LAST_FREG_MAKER
 (1<<7)

	)

26 
	sπ_°ªam_öfo
 {

27 
sockaddr_ö
 
	maddr
;

28 *
	mfd
;

29 *
	mudp_£nd_buf
;

30 
u32
 
	m£q
;

31 
u32
 
	mty≥
;

32 
u16
 
	mp‹t
;

38 
	mVIDEO_FORWARD
 = 0x0,

39 
	mVIDEO_BEHIND
,

42 
	s‰m_hód
 {

43 
u8
 
	mty≥
;

44 
u8
 
	mªs
;

46 
u8
 
	mßm∂e_£q
;

48 
u16
 
	m∑ylﬂd_size
;

49 
u32
 
	m£q
;

50 
u32
 
	m‰m_sz
;

51 
u32
 
	moff£t
;

52 
u32
 
	mtime°amp
;

53 } 
__©åibuã__
((
∑cked
));

55 
	smedü_öfo
 {

56 
u16
 
	mÀngth
;

57 
u16
 
	mheight
;

58 
u32
 
	mÂs
;

59 
u32
 
	maudio_øã
;

60 
u32
 
	mdur_time
;

61 
	mfûíame
[0];

	@include_lib/net/server/simple_mov_unpkg.h

1 #i‚de‡ 
__SIMPLE_MOV_UNPKG_H__


2 
	#__SIMPLE_MOV_UNPKG_H__


	)

3 
	~"gíîic/ty≥def.h
"

4 
	~"fs/fs.h
"

6 
	s__mov_u≈kg_öfo
 {

7 
u32
 *
	m°sz_èb
;

8 
u32
 *
	m°co_èb
;

9 
u32
 *
	maudio_°co_èb
;

10 
u32
 
	maudio_block_size
;

11 
u32
 
	mÀngth
;

12 
u32
 
	mheight
;

13 
u32
 
	msˇÀ
;

14 
u32
 
	mdurôi⁄
;

15 
u32
 
	mßm∂e_øã
;

16 
u32
 
	mvideo_ßm∂e_cou¡
;

17 
u32
 
	mßm∂e_duøti⁄
;

18 
u32
 
	maudio_chunk_num
;

22 
ªad_°ts
(
FILE
 *
Â
, 
__mov_u≈kg_öfo
 *
öfo
);

23 
ªad_time_sˇÀ_dur
(
FILE
 *
fûe_Â
, 
__mov_u≈kg_öfo
 *
öfo
);

24 
ªad_height_™d_Àngth
(
FILE
 *
fûe_Â
, 
__mov_u≈kg_öfo
 *
öfo
);

26 
gë_audio_ßm∂e_øã
(
FILE
 *
Â
);

27 
gë_chunk_off£t
(
u32
 *
°co_èb
, u32 
cou¡
);

28 
u32
 *
gë_chunk_ödex_èbÀ
(
FILE
 *
Â
, 
__mov_u≈kg_öfo
 *
öfo
);

29 
gë_audio_ßm∂e_cou¡
(
FILE
 *
Â
);

30 
gë_audio_chunk_off£t_íåy
(
FILE
 *
Â
);

31 
u32
 *
gë_audio_chunk_èbÀ
(
FILE
 *
Â
, 
__mov_u≈kg_öfo
 *
öfo
);

32 
gë_audio_chunk_off£t
(
u32
 *
audio_°co_èb
, u32 
cou¡
);

33 
u32
 *
gë_ßm∂e_ödex_èbÀ
(
FILE
 *
Â
, 
__mov_u≈kg_öfo
 *
öfo
);

34 
gë_ßm∂e_size
(
u32
 *
°sz_èbÀ
, u32 
cou¡
);

35 
is_vaûd_mov_fûe
(
FILE
 *
Â
);

36 
is_has_audio
(
FILE
 *
Â
);

	@include_lib/net/server/video_rt_tcp.h

1 #i‚de‡
__VIDEO_BUMPING


2 
	#__VIDEO_BUMPING


	)

4 
video_π_t˝_£rvî_öô
(
p‹t
);

6 
video_π_t˝_£rvî_unöô
();

	@include_lib/net/server/video_rt_udp.h

1 #i‚de‡
__VIDEO_RT_UDP_H


2 
	#__VIDEO_RT_UDP_H


	)

7 
π_°ªam_£t_sockaddr
(
sockaddr_ö
 *
addr
, 
u32
 
isf‹w¨d
);

8 
π_°ªam_rm_sockaddr
(
sockaddr_ö
 *
addr
, 
u32
 
isf‹w¨d
);

12 
π_°ªam_öfo
 *
√t_π_vpkg_›í
(c⁄° *
∑th
, c⁄° *
mode
);

13 
√t_π_vpkg_˛o£
(
π_°ªam_öfo
 *
öfo
);

14 
√t_π_£nd_‰ame
(
π_°ªam_öfo
 *
öfo
, *
buf„r
, 
size_t
 
Àn
);

	@include_lib/net/server/wifi_connect.h

1 #i‚de‡
_WIFI_CONNECT_H_


2 
	#_WIFI_CONNECT_H_


	)

4 
	~"gíîic/ty≥def.h
"

6 
	~"os/os_≠i.h
"

8 
	~"HSM/hsm.h
"

9 
	~"wifi_moduÀ/wifi_moduÀ_evít.h
"

11 
	#WIFI_INFO
 8

	)

12 
	eNETWORK_EVENT
 {

13 
	mWIFI_EVENT_MODULE_INIT
,

14 
	mWIFI_EVENT_MODULE_START
,

15 
	mWIFI_EVENT_MODULE_STOP
,

16 
	mWIFI_EVENT_MODULE_START_ERR
,

18 
	mWIFI_EVENT_AP_START
,

19 
	mWIFI_EVENT_AP_STOP
,

20 
	mWIFI_EVENT_STA_START
,

21 
	mWIFI_EVENT_STA_STOP
,

22 
	mWIFI_EVENT_STA_SCAN_COMPLETED
,

24 
	mWIFI_EVENT_STA_CONNECT_SUCC
,

25 
	mWIFI_EVENT_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID
,

26 
	mWIFI_EVENT_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL
,

27 
	mWIFI_EVENT_STA_DISCONNECT
,

29 
	mWIFI_EVENT_SMP_CFG_START
,

30 
	mWIFI_EVENT_SMP_CFG_STOP
,

31 
	mWIFI_EVENT_SMP_CFG_TIMEOUT
,

32 
	mWIFI_EVENT_SMP_CFG_COMPLETED
,

34 
	mWIFI_EVENT_STA_NETWORK_STACK_DHCP_SUCC
,

35 
	mWIFI_EVENT_STA_NETWORK_STACK_DHCP_TIMEOUT
,

37 
	mWIFI_EVENT_AP_ON_DISCONNECTED
,

38 
	mWIFI_EVENT_AP_ON_ASSOC
,

40 
	mWIFI_EVENT_MP_TEST_START
,

41 
	mWIFI_EVENT_MP_TEST_STOP
,

43 
	mWIFI_EVENT_P2P_START
,

44 
	mWIFI_EVENT_P2P_STOP
,

45 
	mWIFI_EVENT_P2P_GC_DISCONNECTED
,

46 
	mWIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_SUCC
,

47 
	mWIFI_EVENT_P2P_GC_NETWORK_STACK_DHCP_TIMEOUT
,

48 
	mWIFI_EVENT_PM_SUSPEND
,

49 
	mWIFI_EVENT_PM_RESUME
,

51 
	swifi_√tw‹k_≠i_msg
 {

52 
	mîr
;

53 
OS_SEM
 
	m£m
;

54 
u32
 
	mmsg
;

56 
WIFI_INIT_INFO
 
	mvm_öfo
;

57 } 
	m˘x
;

60 
	sWIFI_CONNECT_T
 {

61 
HSM
 
	m∑ª¡
;

63 *
	m∑rm
;

66 
	eWIFI_HSM_EVENTS
 {

67 
	mHSM_WIFI_OPEN
 = (
HSME_START
),

68 
	mHSM_WIFI_CLOSE
,

69 
	mHSM_WIFI_SMP_CFG_SUCC
,

70 
	mHSM_WIFI_SMP_CFG_TIMEOUT
,

71 
	mHSM_WIFI_START_SMP_CFG
,

72 
	mHSM_WIFI_STA_CONNECT_SUCC
,

73 
	mHSM_WIFI_STA_CONNECT_FAIL_NOT_FOUND_SSID
,

74 
	mHSM_WIFI_STA_CONNECT_FAIL_ASSOCIAT_FAIL
,

75 
	mHSM_WIFI_STA_DISCONNECTED
,

76 
	mHSM_WIFI_STA_DHCP_BOUND_SUCC
,

77 
	mHSM_WIFI_STA_DHCP_BOUND_TIMEOUT
,

79 
	mHSM_WIFI_STA_REQ_SCAN
,

80 
	mHSM_WIFI_STA_REQ_SCAN_COMPLETED
,

81 
	mHSM_WIFI_STA_REQ_CONNECT
,

83 
	mHSM_WIFI_ENTER_AP
,

86 
	mMSG_SAVE_WIFI_VM_INFO
,

88 
	mHSM_WIFI_ENTER_MP_TEST
,

90 
	mHSM_WIFI_ENTER_P2P
,

91 
	mHSM_WIFI_P2P_GC_DISCONNECTED
,

92 
	mHSM_WIFI_P2P_GC_DHCP_BOUND_SUCC
,

93 
	mHSM_WIFI_P2P_GC_DHCP_BOUND_TIMEOUT
,

96 
√tw‹k_öô
(
WIFI_MODULE
 
moduÀ
);

97 
√tw‹k_°›
();

98 
√tw‹k_°¨t
();

100 
WIFI_INIT_INFO
 *
gë_deÁu…_wifi_vm_öfo
();

101 
WIFI_INIT_INFO
 *
gë_cur_wifi_öfo
();

102 
WIFI_MODE
 
gë_cur_wifi_mode
();

104 
wifi_√tw‹k_íãr_ho°≠d
(*
≠_ssid
, *
≠_pwd
);

105 
wifi_√tw‹k_íãr_mp_ã°
();

106 
wifi_√tw‹k_íãr_p2p
(
rﬁe
);

108 
w∑_suµliˇ¡_£t_c⁄√˘_timeout
(
£c
);

109 
w∑_suµliˇ¡_£t_c⁄√˘_block
(
block
);

110 
wifi_√tw‹k_°a_c⁄√˘
(*
°a_ssid
, *
°a_pwd
);

112 
√tdev_ssid_öfo
 *
wifi_√tw‹k_gë_sˇn_ssid
(
u32
 *
ssid_˙t
);

113 
wifi_√tw‹k_ªq_sˇn
();

115 
gë_cur_c⁄√˘_°a
(
°a_ssid
[33], 
°a_pwd
[64]);

116 
wifi_√tw‹k_ßve_wifi_vm_öfo
(
WIFI_MODE
 
mode
, *
ssid
, *
pwd
);

117 
wifi_√tw‹k_£t_deÁu…_mode
(
WIFI_MODE
 
mode
, *
ssid
, *
pwd
, 
f‹˚
);

118 
wifi_√tw‹k_ßve_deÁu…_mode
(
WIFI_MODE
 
mode
, *
ssid
, *
pwd
, 
P2P_ROLE
 
p2p_rﬁe
, 
f‹˚
);

120 
√tw‹k_£t_cb
((*
cb
)(*, 
NETWORK_EVENT
, *), *
¥iv
);

122 
	`wifi_√tw‹k_°¨t_smp_cfg
();

123 
	`£t_smp_cfg_timeout
(
£c
);

124 
	`£t_aúkiss_key
(c⁄° *
key
);

125 
	`£t_aúkiss_´s_íabÀ
(
u32
 
íabÀ
);

126 
	`gë_m⁄ô‹_ªsu…
(
smp_cfg_ªsu…
 *
smp_cfg
);

128 
	ewifi_moduÀ_°©e
 {

129 
WIFI_MODULE_STOP
,

130 
WIFI_MODULE_START
,

131 
WIFI_MODULE_ERROR
,

133 
wifi_moduÀ_°©e
 
	`gë_wifi_moduÀ_°©e
();

135 
	ewifi_°a_c⁄√˘_°©e
 {

136 
WIFI_STA_DISCONNECT
,

137 
WIFI_STA_CONNECT_SUCC
,

138 
WIFI_STA_CONNECT_TIMEOUT_NOT_FOUND_SSID
,

139 
WIFI_STA_CONNECT_TIMEOUT_ASSOCIAT_FAIL
,

140 
WIFI_STA_NETWORK_STACK_DHCP_SUCC
,

141 
WIFI_STA_NETWORK_STACK_DHCP_TIMEOUT
,

143 
wifi_°a_c⁄√˘_°©e
 
	`gë_wifi_°a_c⁄√˘_°©e
();

	@include_lib/net/streaming_media_server/abnormal_off.h

2 #i‚de‡
_ABNORMAL_OFF_H_


3 
	#_ABNORMAL_OFF_H_


	)

5 
	~<°d¨g.h
>

6 
	~"gíîic/ty≥def.h
"

7 
	~"os/os_≠i.h
"

9 
	~"lwù/sockës.h
"

10 
	~"lwù/√tdb.h
"

11 
	~"lwù/¥Ÿ/ëhî√t.h
"

12 
	~<°ªamög_medü_£rvî/„ni˚_c⁄fig.h
>

14 
	s_FENICE_BANORMAL_OFF
 {

15 
	mÊag
;

16 
	m≥nd_Êag
;

17 
OS_SEM
 
	m£m
;

18 
OS_MUTEX
 
	mmuãx
;

19 } 
	tFENICE_BANORMAL_OFF
;

22 
	s_FENICE_TRANSFER
 {

23 
	mty≥
;

24 
	mp‹t
;

25 (*
	mexô
)();

26 (*
	m£tup
)();

27 (*
	möfo
)(
„ni˚_sour˚_öfo
 *info);

28 } 
	tFENICE_TRANSFER
;

	@include_lib/net/streaming_media_server/fenice/264_stream_iface.h

2 #i‚de‡
_264_STREAM_IFACE_H_


3 
	#_264_STREAM_IFACE_H_


	)

5 
°ªam_°¨t
();

6 
°ªam_°›_˛r
();

7 
°ªam_ªad
(*
buf
, 
Àn
);

8 
°ªam_dec_‰ame
();

	@include_lib/net/streaming_media_server/fenice/JPEG_utils.h

3 #i‚de‡
_JPEG_UTILS_H_


4 
	#_JPEG_UTILS_H_


	)

6 
	~"medüöfo.h
"

9 
£¨ch_avih_code
(
medü_íåy
 *
me
);

10 
£¨ch_movi_code
(*
fd
);

11 
£¨ch_v‰ame_code
(*
fd
);

12 
£¨ch_a‰ame_code
(*
fd
);

	@include_lib/net/streaming_media_server/fenice/SD_file.h

1 #i‚de‡
__SD_FILE_H__


2 
	#__SD_FILE_H__


	)

6 *
sd_fûe_›í
(c⁄° *
«me
, *
mode
);

7 
sd_fûe_˛o£
(*
sd_fd
);

8 *
sd_fûe_gës
(*
buf
, 
buf_Àn
, *
_sd_fd
);

9 
sd_fûe_«me_modify
(c⁄° *
‹i_«me
, *
d°_«me
);

	@include_lib/net/streaming_media_server/fenice/bufferpool.h

41 #i‚de‡
_BUFFERPOOLH


42 
	#_BUFFERPOOLH


	)

44 #ifde‡
HAVE_CONFIG_H


45 
	~"../„ni˚_c⁄fig.h
"

48 
	~"ty≥s.h
"

49 
	~"os_¥iv.h
"

50 
	~"°ddef.h
"

52 
	#omsbuff_mö
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

53 
	#omsbuff_max
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

55 
	#OMSBUFF_MEM_PAGE
 200

56 

	)

57 
	#OMSSLOT_DATASIZE
 1472

58 

	)

59 
	#OMSBUFF_SHM_CTRLNAME
 "Buf„r"

	)

60 
	#OMSBUFF_SHM_SLOTSNAME
 "SlŸs"

	)

61 
	#OMSBUFF_SHM_PAGE
 
OMSBUFF_MEM_PAGE


	)

64 #i‚de‡
PATH_MAX


65 
	#PATH_MAX
 4096

	)

68 
	#OMSbuff_lock
(
buf„r
Ë
	`±hªad_muãx_lock
(&buf„r->
c⁄åﬁ
->
syn
)

	)

69 
	#OMSbuff_u∆ock
(
buf„r
Ë
	`±hªad_muãx_u∆ock
(&buf„r->
c⁄åﬁ
->
syn
)

	)

71 
±rdiff_t
 
	tOMSSlŸPå
;

73 
	#OMSSLOT_COMMON
 
uöt16
 
ªfs
; \

74 
uöt64
 
¶Ÿ_£q
; \

75 
uöt64
 
time°amp
; \

76 
uöt64
 
£ndts
; \

77 
uöt8
 
d©a
[
OMSSLOT_DATASIZE
]; \

78 
uöt32
 
d©a_size
; \

79 
uöt8
 
m¨kî
; \

80 
±rdiff_t
 
√xt
;

	)

82 
	s_OMS¶Ÿ
 {

83 
	mOMSSLOT_COMMON


84 } 
	tOMSSlŸ
;

86 
	s_OMSC⁄åﬁ
 {

87 
uöt16
 
	mªfs
;

88 
uöt32
 
	mn¶Ÿs
;

89 
OMSSlŸPå
 
	mwrôe_pos
;

90 
OMSSlŸPå
 
	mvÆid_ªad_pos
;

91 
±hªad_muãx_t
 
	msyn
;

92 } 
	tOMSC⁄åﬁ
;

94 íum { 
	mbuff_loˇl
 = 0, 
	mbuff_shm
 } 
	tOMSBuf„rTy≥
;

102 
	s_OMSbuf„r
 {

103 
OMSBuf„rTy≥
 
	mty≥
;

104 
OMSC⁄åﬁ
 *
	mc⁄åﬁ
;

105 
OMSSlŸ
 *
	m¶Ÿs
;

106 
uöt32
 
	mknown_¶Ÿs
;

108 
	mfûíame
[
PATH_MAX
];

110 } 
	tOMSBuf„r
;

112 
	s_OMSc⁄sumî
 {

113 
OMSSlŸPå
 
	mªad_pos
;

114 
OMSSlŸPå
 
	mœ°_ªad_pos
;

115 
uöt64
 
	mœ°_£q
;

116 
OMSBuf„r
 *
	mbuf„r
;

117 
öt32
 
	m‰ames
;

118 
uöt64
 
	mfú°ts
;

120 } 
	tOMSC⁄sumî
;

124 
	s_OMSAggªg©e
 {

125 
OMSBuf„r
 *
	mbuf„r
;

126 
_OMSAggªg©e
 *
	m√xt
;

127 } 
	tOMSAggªg©e
;

130 
OMSBuf„r
 *
OMSbuff_√w
(
uöt32
);

131 
OMSC⁄sumî
 *
OMSbuff_ªf
(
OMSBuf„r
 *);

132 
OMSbuff_uƒef
(
OMSC⁄sumî
 *);

133 
öt32
 
OMSbuff_ªad
(
OMSC⁄sumî
 *, 
uöt32
 *, 
uöt8
 *, uint8 *, uint32 *);

134 
OMSSlŸ
 *
OMSbuff_gëªadî
(
OMSC⁄sumî
 *);

135 
öt32
 
OMSbuff_gŸªadî
(
OMSC⁄sumî
 *);

136 
öt32
 
OMSbuff_wrôe
(
OMSBuf„r
 *, 
uöt64
, 
uöt32
, 
uöt8
, uint8 *, uint32);

137 
OMSSlŸ
 *
OMSbuff_gë¶Ÿ
(
OMSBuf„r
 *);

138 
OMSSlŸ
 *
OMSbuff_add∑ge
(
OMSBuf„r
 *, OMSSlot *);

140 
OMSbuff_‰ì
(
OMSBuf„r
 *);

142 
OMSbuff_i£m±y
(
OMSC⁄sumî
 *);

143 
uöt64
 
OMSbuff_√xâs
(
OMSC⁄sumî
 *);

146 
OMSBuf„r
 *
OMSbuff_shm_¸óã
(*, 
uöt32
);

147 
OMSBuf„r
 *
OMSbuff_shm_m≠
(*);

148 
OMSSlŸ
 *
OMSbuff_shm_add∑ge
(
OMSBuf„r
 *);

149 
OMSbuff_shm_ªm≠
(
OMSBuf„r
 *);

151 
	#OMSbuff_shm_ª‰esh
(
oms_buf„r
) \

152 (((
oms_buf„r
->
ty≥
 =
buff_shm
Ë&& (oms_buf„r->
known_¶Ÿs
 !oms_buf„r->
c⁄åﬁ
->
n¶Ÿs
)) ? \

153 
	`OMSbuff_shm_ªm≠
(
oms_buf„r
Ë: 0)

	)

154 
OMSbuff_shm_unm≠
(
OMSBuf„r
 *);

155 
OMSbuff_shm_de°roy
(
OMSBuf„r
 *);

158 *
‚c_ùc_«me
(const *, const *);

161 
	#OMStoSlŸ
(
b
, 
p
Ë(’<0Ë? 
NULL
 : (&b->
¶Ÿs
[p]))

162 
	#OMStoSlŸPå
(
b
, 
p
Ë’ ?Ö - b->
¶Ÿs
 : -1)

	)

165 
OMSAggªg©e
 *
OMBbuff_aggªg©e
(OMSAggªg©ê*, 
OMSBuf„r
 *);

166 
OMSbuff_sync
(
OMSAggªg©e
 *);

169 #i‡
ENABLE_DUMPBUFF


170 
OMSbuff_dump
(
OMSC⁄sumî
 *, 
OMSBuf„r
 *);

172 
	#OMSbuff_dump
(
x
, 
y
)

	)

	@include_lib/net/streaming_media_server/fenice/command_environment.h

1 #i‚de‡
_COMMAND_ENVIRONMENTH


2 
	#_COMMAND_ENVIRONMENTH


	)

4 #ifde‡
HAVE_GETOPT_H


5 
	~<gë›t.h
>

7 
	~"¥efs.h
"

8 
	~"‚c_log.h
"

9 
	~"ty≥s.h
"

11 
uöt32
 
comm™d_ívú⁄mít
(, **);

	@include_lib/net/streaming_media_server/fenice/debug.h

36 #i‚de‡
_DEBUGH


37 
	#_DEBUGH


	)

39 
	~"../„ni˚_c⁄fig.h
"

40 
	~"ty≥s.h
"

42 #i‡
ENABLE_DUMP


43 
dump_∑ylﬂd
(
uöt8
 *
d©a_¶Ÿ
, 
uöt32
 
d©a_size
, uöt8 
‚ame
[255]);

47 
	#DEBUG
 
ENABLE_DEBUG


	)

	@include_lib/net/streaming_media_server/fenice/eventloop.h

35 #i‚de‡
_EVENTLOOPH


36 
	#_EVENTLOOPH


	)

38 
	~"sockë.h
"

39 
	~"π•.h
"

41 
	#MAX_FDS
 800

	)

43 (*
	tevít_fun˘i⁄
)(*
	td©a
);

45 
	`evíéo›
(
tsockë
 
maö_fd
,Åsockë 
maö_s˘p_fd
);

46 
	`π•_£rvî
(
RTSP_buf„r
 *
π•
, 
fd_£t
 *
r£t
, fd_£à*
w£t
, fd_£à*
x£t
);

47 
	`add_˛õ¡
(
RTSP_buf„r
 **
π•_li°
, 
tsockë
 
fd
, 
sockaddr_ö
 *
de°_addr
, 
RTSP_¥Ÿo
 
¥Ÿo
);

48 
	`scheduÀ_c⁄√˘i⁄s
(
RTSP_buf„r
 **
π•_li°
, *
c⁄n_cou¡
, 
fd_£t
 *
r£t
, fd_£à*
w£t
, fd_£à*
x£t
);

49 
	`π•_£t_fd£ts
(
RTSP_buf„r
 *
π•
, *
max_fd
, 
fd_£t
 *
r£t
, fd_£à*
w£t
, fd_£à*
x£t
);

	@include_lib/net/streaming_media_server/fenice/fnc_log.h

36 #i‚de‡
FNC_LOGH


37 
	#FNC_LOGH


	)

39 
	~"../„ni˚_c⁄fig.h
"

42 
	#FNC_LOG_OUT
 0

	)

43 
	#FNC_LOG_SYS
 1

	)

46 
	#FNC_LOG_FATAL
 0

	)

47 
	#FNC_LOG_ERR
 1

	)

48 
	#FNC_LOG_WARN
 2

	)

49 
	#FNC_LOG_INFO
 3

	)

50 
	#FNC_LOG_DEBUG
 4

	)

51 
	#FNC_LOG_VERBOSE
 5

	)

52 
	#FNC_LOG_CLIENT
 6

	)

55 
‚c_log
(
Àvñ
, c⁄° *
fmt
, ...);

	@include_lib/net/streaming_media_server/fenice/fs_priv.h

2 #i‚de‡
__FS_PRIV_H__


3 
	#__FS_PRIV_H__


	)

7 *
fs_¥iv_f›í
(*
∑th
, c⁄° *
mode
);

8 
fs_¥iv_f˛o£
(*
°ªam
);

9 
fs_¥iv_‰ód
(*
buf„r
, 
size_t
 
size
, size_à
cou¡
, *
°ªam
);

10 
fs_¥iv_fwrôe
(c⁄° *
buf„r
, 
size_t
 
size
, size_à
cou¡
, *
°ªam
);

11 
fs_¥iv_f£ek
(*
°ªam
, 
off£t
, 
‰omwhîe
);

12 
fs_¥iv_°©
(c⁄° *
fûe_«me
, 
°©
 *
buf
);

	@include_lib/net/streaming_media_server/fenice/gsm.h

35 #i‚de‡
_GSMH


36 
	#_GSMH


	)

38 
	~"ty≥s.h
"

39 
	~"medüöfo.h
"

41 
lﬂd_GSM
(
medü_íåy
 *
me
);

42 
ªad_GSM
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

43 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

44 
‰ì_GSM
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/h264.h

35 #i‚de‡
_H264H


36 
	#_H264H


	)

38 
	~"medüöfo.h
"

39 
	~"ty≥s.h
"

42 
	mbufsize
;

43 
	mpkt_£¡
;

44 
	mcuºít_time°amp
;

45 
	m√xt_time°amp
;

46 } 
	t°©ic_H264
;

48 
lﬂd_H264
(
medü_íåy
 *
me
);

49 
ªad_H264
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

50 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

51 
ªlﬂd_H264
(
medü_íåy
 *
p
, 
‰ame_øã
, 
s¸ìn_width
, 
s¸ìn_height
);

52 
‰ì_H264
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/intnet.h

35 #i‚de‡
_INTNETH


36 
	#_INTNETH


	)

38 
	~"πp.h
"

39 
	~"π˝.h
"

43 
°ªam_ch™ge
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
, 
vÆue
);

44 
ch™ge_check
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

46 
downgøde_GSM
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

47 
downgøde_L16
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

48 
downgøde_MP3
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

50 
upgøde_GSM
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

51 
upgøde_MP3
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

53 
hÆf_GSM
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

54 
hÆf_L16
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

55 
hÆf_MP3
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

57 
¥i‹ôy_de¸ó£
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

58 
¥i‹ôy_ö¸ó£
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
);

60 
°ªam_swôch
(
RTP_£ssi⁄
 *
ch™gög_£ssi⁄
, 
medü_íåy
 *
√w_medü
);

	@include_lib/net/streaming_media_server/fenice/jpeg.h

35 #i‚de‡
_JPEGH


36 
	#_JPEGH


	)

38 
	~"medüöfo.h
"

39 
	~"ty≥s.h
"

51 
	#RTP_HDR_SZ
 12

	)

54 
	#RTP_PT_JPEG
 26

	)

56 
	sj≥ghdr
 {

57 
	mt•ec
: 8;

58 
	moff
: 24;

59 
uöt8
 
	mty≥
;

60 
uöt8
 
	mq
;

61 
uöt8
 
	mwidth
;

62 
uöt8
 
	mheight
;

65 
	sj≥ghdr_r°
 {

66 
uöt16
 
	mdri
;

67 
	mf
: 1;

68 
	ml
: 1;

69 
	mcou¡
: 14;

71 
	sj≥ghdr_qèbÀ
 {

72 
uöt8
 
	mmbz
;

73 
uöt8
 
	m¥ecisi⁄
;

74 
uöt16
 
	mÀngth
;

77 
	#RTP_JPEG_RESTART
 0x40

	)

115 
uöt8
 
	mexåa˘QTabÀ1
[64];

116 
uöt8
 
	mexåa˘QTabÀ2
[64];

117 
j≥ghdr
 
	mjpghdr
;

118 
j≥ghdr_r°
 
	mr°hdr
;

119 
j≥ghdr_qèbÀ
 
	mqtblhdr
;

120 
uöt32
 
	mbyãs_À·
;

121 
uöt32
 
	m‰ame_°¨t
;

122 
uöt32
 
	m‰ame_˙t1
;

123 
uöt32
 
	m‰ame_˙t2
;

124 
uöt32
 
	moff
;

125 
uöt32
 
	ms_mtime
;

126 
uöt32
 
	mbyã_≥r_¶i˚
;

127 
uöt32
 
	m°‹ed
;

128 } 
	tJPEG_WORK
;

130 
lﬂd_JPEG
(
medü_íåy
 *
me
);

131 
ªlﬂd_JPEG
(
medü_íåy
 *
p
, 
‰ame_øã
, 
s¸ìn_width
, 
s¸ìn_height
);

132 
ªad_JPEG
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

133 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

134 
‰ì_JPEG
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/md5.h

62 
UINT4
 
	m°©e
[4];

63 
UINT4
 
	mcou¡
[2];

64 
	mbuf„r
[64];

65 } 
	tMD5_CTX
;

67 
MD5Inô
 
PROTO_LIST
((
MD5_CTX
 *));

68 
MD5Upd©e
 
PROTO_LIST
((
MD5_CTX
 *, *, ));

69 
MD5FöÆ
 
PROTO_LIST
(([16], 
MD5_CTX
 *));

	@include_lib/net/streaming_media_server/fenice/md5global.h

44 #i‚de‡
PROTOTYPES


45 
	#PROTOTYPES
 0

	)

49 *
	tPOINTER
;

52 
	tUINT2
;

55 
	tUINT4
;

61 #i‡
PROTOTYPES


62 
	#PROTO_LIST
(
li°
Ë
	)
list

64 
	#PROTO_LIST
(
li°
Ë()

	)

	@include_lib/net/streaming_media_server/fenice/mediainfo.h

35 #i‚de‡
_MEDIAINFOH


36 
	#_MEDIAINFOH


	)

38 
	~"sys/°©.h
"

39 
	~"buf„Ωoﬁ.h
"

40 
	~"£rvî/sim∂e_mov_u≈kg.h
"

42 
	#MAX_DESCR_LENGTH
 4096

	)

43 
	#DIM_VIDEO_BUFFER
 5

	)

44 
	#DIM_AUDIO_BUFFER
 5

	)

49 
	mdf_SDP_f‹m©
 = 0

50 } 
	tdes¸ùti⁄_f‹m©
;

52 íum { 
	m°‹ed
 = 0, 
	mlive
 } 
	tmedü_sour˚
;

54 íum { 
	maudio
 = 0, 
	mvideo
, 
	m≠∂iˇti⁄
, 
	md©a
, 
	mc⁄åﬁ
 } 
	tmedü_ty≥
;

56 íum { 
	mundeföed
 = -1, 
	m‰ame
 = 0, 
	mßm∂e
 = 1 } 
	tmedü_codög
;

59 
	mME_FILENAME
 = 1,

61 
	mME_DESCR_FORMAT
 = 4,

62 
	mME_AGGREGATE
 = 8,

63 
	mME_RESERVED
 = 16,

64 
	mME_FD
 = 32

65 } 
	tme_Êags
;

68 
	mSD_FL_TWIN
 = 1,

69 
	mSD_FL_MULTICAST
 = 2,

70 
	mSD_FL_MULTICAST_PORT
 = 4

71 } 
	tsd_des¸_Êags
;

74 
	mMED_MTYPE
 = 1,

75 
	mMED_MSOURCE
 = 2,

76 
	mMED_PAYLOAD_TYPE
 = 4,

77 
	mMED_CLOCK_RATE
 = 8,

78 
	mMED_ENCODING_NAME
 = 16,

79 
	mMED_AUDIO_CHANNELS
 = 32,

80 
	mMED_SAMPLE_RATE
 = 64,

81 
	mMED_BIT_PER_SAMPLE
 = 128,

82 
	mMED_CODING_TYPE
 = 256,

83 
	mMED_FRAME_LEN
 = 512,

84 
	mMED_BITRATE
 = 1024,

85 
	mMED_PKT_LEN
 = 2048,

86 
	mMED_PRIORITY
 = 4096,

87 
	mMED_TYPE
 = 8192,

88 
	mMED_FRAME_RATE
 = 16384,

89 
	mMED_BYTE_PER_PCKT
 = 32768,

91 
	mMED_LICENSE
 = 65536,

92 
	mMED_RDF_PAGE
 = 131072,

93 
	mMED_TITLE
 = 262144,

94 
	mMED_CREATOR
 = 524288,

95 
	mMED_ID3
 = 1048576,

98 
	mMED_FORCE_FRAME_RATE
 = 2097152,

99 
	mSCREEN_WIDTH
 = 4194304,

100 
	mSCREEN_HEIGHT
 = 8388608,

107 } 
	tme_des¸_Êags
;

109 
	s_medü_íåy
 {

110 
me_Êags
 
	mÊags
;

111 *
	mfd
;

112 *
	m°©
;

113 
_medü_‚
 *
	mmedü_h™dÀr
;

114 
	md©a_chunk
;

117 
	mbuff_d©a
[4];

118 
	mbuff_size
;

119 
OMSBuf„r
 *
	mpkt_buf„r
;

124 
uöt64
 
	mmtime
;

125 
uöt64
 
	mm°¨t
;

126 
uöt64
 
	mm°¨t_off£t
;

127 
uöt64
 
	m∂ay_off£t
;

128 
uöt64
 
	m¥ev_m°¨t_off£t
;

129 
	mπp_mu…iˇ°_p‹t
;

130 
	mtime_up
;

133 
	mª£rved
;

134 
	mfûíame
[255];

135 
	maggªg©e
[50];

136 
des¸ùti⁄_f‹m©
 
	mdes¸_f‹m©
;

138 
__mov_u≈kg_öfo
 
	möfo
;

142 
	mcomm⁄s_dód
[255];

143 
	mrdf_∑ge
[255];

144 
	mtôÀ
[80];

145 
	mauth‹
[80];

146 
	mèg_dim
;

148 
me_des¸_Êags
 
	mÊags
;

149 
medü_sour˚
 
	mmsour˚
;

150 
medü_ty≥
 
	mmty≥
;

151 
	m∑ylﬂd_ty≥
;

152 
	m˛ock_øã
;

153 
	mßm∂e_øã
;

154 
	maudio_ch™√ls
;

155 
	mbô_≥r_ßm∂e
;

156 
	mícodög_«me
[11];

157 
medü_codög
 
	mcodög_ty≥
;

158 
	m‰ame_Àn
;

159 
	mbôøã
;

160 
	m¥i‹ôy
;

161 
uöt32
 
	mpkt_Àn
;

162 
uöt32
 
	mdñè_mtime
;

163 
	m‰ame_øã
;

164 
	mbyã_≥r_pckt
;

167 
	ms¸ìn_width
;

168 
	ms¸ìn_height
;

174 } 
	mdes¸ùti⁄
;

175 
_medü_íåy
 *
	m√xt
;

176 } 
	tmedü_íåy
;

181 
	s_medü_‚
 {

189 (*
	mlﬂd_medü
)(
	mmedü_íåy
 *);

202 (*
	mªad_medü
)(
	mmedü_íåy
 *, 
	muöt8
 *, 
	muöt32
 *, 
	muöt64
 *, *,

203 
	muöt8
 *);

211 (*
	m‰ì_medü
)(*);

213 } 
	tmedü_‚
;

215 
	s_SD_des¸
 {

216 
	mfûíame
[255];

217 
medü_íåy
 *
	mme_li°
;

218 
time_t
 
	mœ°_ch™ge
;

219 
_SD_des¸
 *
	m√xt
;

220 
sd_des¸_Êags
 
	mÊags
;

221 
	mmu…iˇ°
[16];

222 
	mâl
[4];

223 
	mtwö
[255];

225 } 
	tSD_des¸
;

227 
∑r£_SD_fûe
(*
obje˘
, 
SD_des¸
 *
sd_des¸
);

228 
gë_‰ame
(
medü_íåy
 *
me
, 
uöt64
 *
mtime
);

229 
vÆid©e_°ªam
(
medü_íåy
 *
me
, 
SD_des¸
 **
sd_des¸
);

231 
ªgi°î_medü
(
medü_íåy
 *);

232 
medü›í
(
medü_íåy
 *);

233 
medü˛o£
(
medü_íåy
 *);

238 
√xt_°¨t_code
(
uöt8
 *, 
uöt32
 *, 
fö
);

239 
uöt32
 
øndom_ac˚ss
(
medü_íåy
 *
me
);

240 
ch™gePackëLígth
(
uöt32
 
off£t
, 
medü_íåy
 *
me
);

244 
íum_medü
(*
obje˘
, 
SD_des¸
 **
d
);

247 
medü_is_em±y
(
medü_íåy
 *
me
);

250 
medü_íåy
 *
deÁu…_£À˘i⁄_¸ôîi⁄
(medü_íåy *
li°
);

253 
medü_íåy
 *
£¨ch_medü
(medü_íåy *
ªq
, medü_íåy *
li°
);

256 
gë_medü_íåy
(
medü_íåy
 *
ªq
, medü_íåy *
li°
,

257 
medü_íåy
 **
ªsu…
);

264 
uöt32
 
medü˝y
(
medü_íåy
 **, media_entry **);

265 
m£c2tick
(
uöt64
 
mtime
, 
medü_íåy
 *
me
);

266 
ölöe
 
uöt64
 
tick2m£c
(
πp_time
, 
medü_íåy
 *
me
);

269 
ˇlcuœã_skù
(
byã_vÆue
, 
uöt64
 *
skù
, 
≥so
);

270 
ªad_dim
(
fûe
, *
dim
);

	@include_lib/net/streaming_media_server/fenice/mp3.h

35 #i‚de‡
_MP3H


36 
	#_MP3H


	)

38 
	~"ty≥s.h
"

39 
	~"medüöfo.h
"

41 
lﬂd_MPA
(
medü_íåy
 *
me
);

42 
ªad_MP3
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

43 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

44 
‰ì_MPA
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/mpeg.h

39 #i‚de‡
_MPEGH


40 
	#_MPEGH


	)

42 
	~"medüöfo.h
"

43 
	~"ty≥s.h
"

46 
	mffc
: 3;

47 
	mffv
: 1;

48 
	mbfc
: 3;

49 
	mfbv
: 1;

50 
	mp
: 3;

51 
	me
: 1;

52 
	mb
: 1;

53 
	ms
: 1;

54 
	mn
: 1;

55 
	m™
: 1;

56 
	må
: 10;

57 
	mt
: 1;

58 
	mmbz
: 5;

59 } 
	tvideo_•ec_hód1
;

62 
	md
: 1;

63 
	mg
: 1;

64 
	mh
: 1;

65 
	mr
: 1;

66 
	ma
: 1;

67 
	mv
: 1;

68 
	mq
: 1;

69 
	mc
: 1;

70 
	mp
: 1;

71 
	mt
: 1;

72 
	mps
: 2;

73 
	mdc
: 2;

74 
	mf11
: 4;

75 
	mf10
: 4;

76 
	mf01
: 4;

77 
	mf00
: 4;

78 
	me
: 1;

79 
	mx
: 1;

80 } 
	tvideo_•ec_hód2
;

83 íum { 
	mMPEG_1
, 
	mMPEG_2
, 
	mTO_PROBE
 } 
	t°™d¨d
;

86 
video_•ec_hód1
 
	mvsh1
;

87 
video_•ec_hód2
 
	mvsh2
;

88 
	mföÆ_byã
;

89 
	mãmp_ªf
;

90 
	mhours
;

91 
	mmöuãs
;

92 
	m£c⁄ds
;

93 
	mpi˘uª
;

94 
	md©a_tŸÆ
;

95 
°™d¨d
 
	m°d
;

96 
	m‰agmíãd
;

97 
video_•ec_hód1
 
	mvsh1_aux
;

98 
video_•ec_hód2
 
	mvsh2_aux
;

99 } 
	t°©ic_MPEG_video
;

102 
ªad_£q_hód
(
medü_íåy
 *
me
, 
uöt8
 *, 
uöt32
 *, 
fö
,

103 *
föÆ_byã
, 
°™d¨d
 
°d
);

105 
ªad_g›_hód
(
uöt8
 *, 
uöt32
 *, 
fö
, *
föÆ_byã
,

106 *
hours
, *
möuãs
, *
£c⁄ds
, *
pi˘uª
,

107 
°™d¨d
 
°d
);

109 
ªad_pi˘uª_hód
(
uöt8
 *, 
uöt32
 *, 
fö
, *
föÆ_byã
,

110 *
ãmp_ªf
, 
video_•ec_hód1
 *
vsh1
, 
°™d¨d
 
°d
);

112 
ªad_¶i˚
(
uöt8
 *, 
uöt32
 *, 
fö
, *
föÆ_byã
);

114 
¥obe_°™d¨d
(
medü_íåy
 *
me
, 
uöt8
 *, 
uöt32
 *, 
fö
,

115 
°™d¨d
 *
°d
);

117 
ªad_pi˘uª_codög_ext
(
uöt8
 *, 
uöt32
 *, 
fö
,

118 *
föÆ_byã
, 
video_•ec_hód2
 *
vsh2
);

120 
lﬂd_MPV
(
medü_íåy
 *
me
);

121 
ªad_MPEG_video
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

122 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

123 
‰ì_MPV
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/mpeg4es.h

35 #i‚de‡
_MPEG4ESH


36 
	#_MPEG4ESH


	)

38 
	~"ty≥s.h
"

39 
	~"medüöfo.h
"

42 
	#VIDEO_OBJECT_START_CODE


	)

43 
	#VIDEO_OBJECT_LAYER_START_CODE


	)

44 
	#RESERVED


	)

45 
	#VOS_START_CODE
 0xB0

	)

46 
	#VOS_END_CODE
 0xB1

	)

47 
	#USER_DATA_START_CODE
 0xB2

	)

48 
	#GROUP_OF_VOP_START_CODE
 0xB3

	)

49 
	#VIDEO_SESSION_ERROR_CODE
 0xB4

	)

50 
	#VO_START_CODE
 0xB5

	)

51 
	#VOP_START_CODE
 0xB6

	)

52 
	#RESERVED_1
 0xB7

	)

53 
	#RESERVED_2
 0xB9

	)

54 
	#FBA_OBJECT_START_CODE
 0xBA

	)

55 
	#FBA_OBJECT_PLANE_START_CODE
 0xBB

	)

56 
	#MESH_OBJECT_START_CODE
 0xBC

	)

57 
	#MESH_OBJECT_PLANE_START_CODE
 0xBD

	)

58 
	#STILL_TEXTURE_OBJECT_START_CODE
 0xBE

	)

59 
	#TEXTURE_SPATIAL_LAYER_START_CODE
 0xBF

	)

60 
	#TEXTURE_SNR_LAYER_START_CODE
 0xC0

	)

61 
	#TEXTURE_TILE_START_CODE
 0xC1

	)

62 
	#TEXTURE_SHAPE_LAYER_START_CODE
 0xC2

	)

63 
	#RESERVED_3
 0xC2

	)

88 
uöt32
 
	mv›_time_ö¸emít_ªsﬁuti⁄
;

89 
uöt32
 
	mv›_time_ö¸emít
;

90 
uöt32
 
	mv¨_time_ö¸emít
;

91 
uöt32
 
	mmodulo_time_ba£
;

92 } 
	tm≥g4_time_ªf
;

94 
	sm≥g4
 {

95 
	m¥ofûe_id
;

96 
	mc⁄fig
[256];

97 
	mvtú_bôÀn
;

98 
m≥g4_time_ªf
 *
	mªf1
;

99 
m≥g4_time_ªf
 *
	mªf2
;

100 
uöt64
 
	mœ°_n⁄_b_time°amp
;

101 
uöt64
 
	mœ°_b_time°amp
;

102 
uöt64
 
	mtime°amp
;

103 
uöt32
 
	mtime_ªsﬁuti⁄
;

104 
uöt8
 
	mföÆ_byã
;

105 
	m‰agmíãd
;

106 
uöt32
 
	md©a_ªad
;

107 
uöt32
 
	mªmaöed_d©a_size
;

108 *
	mm‹e_d©a
;

110 
uöt32
 
	mhódî_d©a_size
;

111 
	mv›_codög_ty≥
;

112 } 
	t°©ic_MPEG4_video_es
;

115 
gë_fõld
(
uöt8
 *
d
, 
uöt32
 
bôs
, uöt32 *
off£t
);

116 
∑r£_visuÆ_obje˘_£quí˚
(
°©ic_MPEG4_video_es
 *, 
uöt8
 *, 
uöt32
 *,

117 
fö
);

118 
∑r£_visuÆ_obje˘
(
uöt8
 *
d©a
, 
uöt32
 *
d©a_size
, 
fö
);

119 
∑r£_video_obje˘
(
uöt8
 *
d©a
, 
uöt32
 *
d©a_size
, 
fö
);

120 
∑r£_video_obje˘_œyî
(
°©ic_MPEG4_video_es
 *
out
, 
uöt8
 *
d©a
,

121 
uöt32
 *
d©a_size
, 
fö
);

122 
∑r£_group_video_obje˘_∂™e
(
°©ic_MPEG4_video_es
 *
out
, 
uöt8
 *
d©a
,

123 
uöt32
 *
d©a_size
, 
fö
);

124 
∑r£_video_obje˘_∂™e
(
°©ic_MPEG4_video_es
 *
out
, 
uöt8
 *
d©a
,

125 
uöt32
 *
d©a_size
, 
fö
);

127 
lﬂd_MP4ES
(
medü_íåy
 *
me
);

128 
ªad_MPEG4ES_video
(
medü_íåy
 *
me
, 
uöt8
 *
d©a
, 
uöt32
 *
d©a_size
,

129 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

130 
‰ì_MP4ES
(*);

	@include_lib/net/streaming_media_server/fenice/mpeg_system.h

36 #i‚de‡
_MPEG_SYSTEMH


37 
	#_MPEG_SYSTEMH


	)

39 
	~"ty≥s.h
"

40 
	~"medüöfo.h
"

43 
	mmsb
;

44 
	ms¸
;

45 } 
	tSCR
;

49 
	mmsb
;

50 
	m±s
;

51 } 
	tPTS
;

54 
	mföÆ_byã
;

55 
PTS
 
	m±s
;

56 
PTS
 
	m√xt_±s
;

57 
PTS
 
	mdts
;

58 
PTS
 
	m√xt_dts
;

59 
PTS
 
	m±s_audio
;

60 
SCR
 
	ms¸
;

61 
	md©a_tŸÆ
;

62 
	moff£t_Êag
;

63 
	moff£t
;

64 
	m√w_dts
;

65 } 
	t°©ic_MPEG_sy°em
;

68 
ªad_∑ck_hód
(
uöt8
 *, 
uöt32
 *
e
, 
fö
, *
föÆ_byã
,

69 
SCR
 *
s¸
);

71 
ªad_∑ckë_hód
(
uöt8
 *, 
uöt32
 *, 
fö
, *
föÆ_byã
,

72 *
time_£t
, 
PTS
 *
±s
, PTS *
dts
, *
dts_¥e£¡
,

73 
PTS
 *
±s_audio
);

75 
ªad_∑ckë
(
uöt8
 *, 
uöt32
 *, 
fö
, *
föÆ_byã
);

78 
ªad_MPEG_sy°em
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

79 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

	@include_lib/net/streaming_media_server/fenice/mpeg_ts.h

36 #i‚de‡
_MPEG_TSH


37 
	#_MPEG_TSH


	)

39 
	~"ty≥s.h
"

40 
	~"medüöfo.h
"

42 
lﬂd_MP2T
(
medü_íåy
 *
me
);

43 
ªad_MPEG_ts
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

44 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

45 
‰ì_MP2T
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/multicast.h

35 #i‚de‡
_MULTICASTH


36 
	#_MULTICASTH


	)

38 
	~"ty≥s.h
"

39 
	~"utûs.h
"

41 
	#DEFAULT_MULTICAST_ADDRESS
 "224.124.0.1"

	)

42 
	#DEFAULT_TTL
 32

	)

44 
uöt32
 
is_vÆid_mu…iˇ°_addªss
(*
addr
);

	@include_lib/net/streaming_media_server/fenice/os_priv.h

1 #i‚de‡
__OS_PRIV_H__


2 
	#__OS_PRIV_H__


	)

4 
	#SCHEDULE_DO_PRIO
 26

	)

5 
	#SCHEDULE_DO_STK_SIZE
 4000

	)

7 
	#STREAM_MEDIA_SERVER_PRIO
 25

	)

8 
	#STREAM_MEDIA_SERVER_STK_SIZE
 4000

	)

10 
	t±hªad_muãx_t
, 
	t±hªad_muãx©å_t
;

12 
ª£t_time_°amp
();

13 
gë_time_°amp
(
uöt32
 
dñè_mtime
);

15 
	#MSG_NOSIGNAL
 0

	)

17 
	#SOMAXCONN
 
TCP_DEFAULT_LISTEN_BACKLOG


	)

	@include_lib/net/streaming_media_server/fenice/pcm.h

35 #i‚de‡
_PCMH


36 
	#_PCMH


	)

38 
	~"ty≥s.h
"

39 
	~"medüöfo.h
"

42 
uöt32
 
	mbyãs_À·
;

43 
uöt32
 
	mªad_size
;

44 
uöt32
 
	m°‹ed
;

45 
uöt32
 
	mªad_ag
;

46 
uöt32
 
	m‰ame_À·
;

47 } 
	tPCM_WORK
;

49 
lﬂd_L16
(
medü_íåy
 *
me
);

50 
ªad_PCM
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

51 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

52 
ªad_PCMA
(
medü_íåy
 *
me
, 
uöt8
 *
buf„r
, 
uöt32
 *
buf„r_size
,

53 
uöt64
 *
mtime
, *
ªˇŒme
, 
uöt8
 *
m¨kî
);

54 
ªlﬂd_L16
(
medü_íåy
 *
p
, 
ßmp_øã
, 
ch™√l_num
, 
bô_≥r_ßmp
);

55 
‰ì_L16
(*
°©
);

	@include_lib/net/streaming_media_server/fenice/prefs.h

35 #i‚de‡
_SERV_PREFSH


36 
	#_SERV_PREFSH


	)

38 
	~"../„ni˚_c⁄fig.h
"

46 
	#MAX_PROCESS
 1

	)

47 
	#MAX_CONNECTION
 
FENICE_MAX_SESSION_DEFAULT


	)

48 
	#ONE_FORK_MAX_CONNECTION
 (()(
MAX_CONNECTION
/
MAX_PROCESS
)Ë

	)

58 
	e_¥ef_id
 {

60 
	mPREFS_ROOT
,

61 
	mPREFS_TCP_PORT
,

62 
	mPREFS_SCTP_PORT
,

63 
	mPREFS_MAX_SESSION
,

64 
	mPREFS_LOG
,

65 
	mPREFS_HOSTNAME
,

67 
	mPREFS_LAST
,

69 
	mPREFS_ALL


70 } 
	t¥ef_id
;

73 
	#PREFS_FIRST
 
PREFS_ROOT


	)

75 
	e_¥ef_ty≥
 {

76 
	mINTEGER
,

77 
	mSTRING


78 } 
	t¥ef_ty≥
;

80 
	s_¥ef_ªc‹d
 {

81 
¥ef_id
 
	mid
;

82 
¥ef_ty≥
 
	mty≥
;

83 
	mèg
[256];

84 *
	md©a
;

85 } 
	t¥ef_ªc‹d
;

88 
	#CREATE_PREFS_DATA
 
¥ef_ªc‹d
 
¥efs
[
PREFS_LAST
] = { \

89 { 
PREFS_ROOT
, 
STRING
, "roŸ", 
NULL
 }, \

90 { 
PREFS_TCP_PORT
, 
INTEGER
, "t˝_p‹t", 
NULL
 }, \

91 { 
PREFS_SCTP_PORT
, 
INTEGER
, "s˘p_p‹t", 
NULL
 }, \

92 { 
PREFS_MAX_SESSION
, 
INTEGER
, "max_£ssi⁄", 
NULL
 }, \

93 { 
PREFS_LOG
, 
STRING
, "log_fûe", 
NULL
 }, \

94 { 
PREFS_HOSTNAME
, 
STRING
, "###", 
NULL
 } \

95 };

	)

97 
	#SET_STRING_DATA
(
PREF_ID
, 
PREF_DATA
) \

98 i‡(
¥efs
[(
PREF_ID
)].
d©a
Ë
	`‰ì
(prefs[(PREF_ID)].data); \

99 
¥efs
[(
PREF_ID
)].
d©a
 = 
	`°rdup
(
PREF_DATA
);

	)

101 
	#SET_INTEGER_DATA
(
PREF_ID
, 
PREF_DATA
) \

102 i‡(
¥efs
[(
PREF_ID
)].
d©a
Ë
	`‰ì
(prefs[(PREF_ID)].data); \

103 
¥efs
[(
PREF_ID
)].
d©a
 = 
	`mÆloc
(()); \

104 *((*Ë
¥efs
[(
PREF_ID
)].
d©a
Ë(
PREF_DATA
);

	)

107 
¥efs_öô
(*
fûec⁄f
);

108 *
gë_¥ef
(
¥ef_id
 
id
);

109 
¥efs_u£_deÁu…
(
¥ef_id
 
id
);

112 
	#¥efs_gë_£rv_roŸ
(Ë((*Ë
	`gë_¥ef
(
PREFS_ROOT
))

	)

113 
	#¥efs_gë_p‹t
(Ë(*((*Ë
	`gë_¥ef
(
PREFS_TCP_PORT
)))

	)

114 
	#¥efs_gë_s˘p_p‹t
(Ë(*((*Ë
	`gë_¥ef
(
PREFS_SCTP_PORT
)))

	)

115 
	#¥efs_gë_max_£ssi⁄
(Ë(*((*Ë
	`gë_¥ef
(
PREFS_MAX_SESSION
)))

	)

116 
	#¥efs_gë_log
(Ë((*Ë
	`gë_¥ef
(
PREFS_LOG
))

	)

117 
	#¥efs_gë_ho°«me
(Ë((*Ë
	`gë_¥ef
(
PREFS_HOSTNAME
))

	)

	@include_lib/net/streaming_media_server/fenice/rtcp.h

35 #i‚de‡
_RTCPH


36 
	#_RTCPH


	)

38 
	~"πp.h
"

49 
	mSR
 = 200,

50 
	mRR
 = 201,

51 
	mSDES
 = 202,

52 
	mBYE
 = 203,

53 
	mAPP
 = 204

54 } 
	tπ˝_pkt_ty≥
;

57 
	mCNAME
 = 1,

58 
	mNAME
 = 2,

59 
	mEMAIL
 = 3,

60 
	mPHONE
 = 4,

61 
	mLOC
 = 5,

62 
	mTOOL
 = 6,

63 
	mNOTE
 = 7,

64 
	mPRIV
 = 8

65 } 
	tπ˝_öfo
;

67 
	s_RTCP_hódî
 {

68 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

69 
	mcou¡
: 5;

70 
	m∑ddög
: 1;

71 
	mvîsi⁄
: 2;

72 #ñi‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

73 
	mvîsi⁄
: 2;

74 
	m∑ddög
: 1;

75 
	mcou¡
: 5;

77 #îr‹ 
Neôhî
 
big
 
n‹
 
lôée


79 
	m±
: 8;

80 
	mÀngth
: 16;

81 } 
	tRTCP_hódî
;

83 
	s_RTCP_hódî_SR
 {

84 
	ms§c
;

85 
	m¡p_time°ampH
;

86 
	m¡p_time°ampL
;

87 
	mπp_time°amp
;

88 
	mpkt_cou¡
;

89 
	mo˘ë_cou¡
;

90 } 
	tRTCP_hódî_SR
;

92 
	s_RTCP_hódî_RR
 {

93 
	ms§c
;

94 } 
	tRTCP_hódî_RR
;

96 
	s_RTCP_hódî_SR_ªp‹t_block
 {

97 
	ms§c
;

98 
	m‰a˘_lo°
;

99 
	mpck_lo°
[3];

100 
	mh_£q_no
;

101 
	mjôãr
;

102 
	mœ°_SR
;

103 
	mdñay_œ°_SR
;

104 } 
	tRTCP_hódî_SR_ªp‹t_block
;

106 #¥agm®
∑ck
(1)

107 
	s_RTCP_hódî_SDES
 {

108 
	ms§c
;

109 
	m©å_«me
;

110 
	mÀn
;

111 } 
	tRTCP_hódî_SDES
;

112 #¥agm®
∑ck
()

114 
	s_RTCP_hódî_BYE
 {

115 
	ms§c
;

116 
	mÀngth
;

117 } 
	tRTCP_hódî_BYE
;

119 
RTCP_£nd_∑ckë
(
RTP_£ssi⁄
 *
£ssi⁄
, 
π˝_pkt_ty≥
 
ty≥
);

120 
RTCP_ªcv_∑ckë
(
RTP_£ssi⁄
 *
£ssi⁄
);

121 
RTCP_h™dÀr
(
RTP_£ssi⁄
 *
£ssi⁄
);

123 
RTCP_gë_pkt_lo°
(
RTP_£ssi⁄
 *
£ssi⁄
);

126 
uöt32
 
RTCP_gë_‰a˘_lo°
(
RTP_£ssi⁄
 *
£ssi⁄
);

129 
RTCP_gë_jôãr
(
RTP_£ssi⁄
 *
£ssi⁄
);

132 
RTCP_gë_RR_ª˚ived
(
RTP_£ssi⁄
 *
£ssi⁄
);

135 
RTCP_gë_tŸÆ_∑ckë
(
RTP_£ssi⁄
 *
£ssi⁄
);

138 
RTCP_gë_tŸÆ_∑ylﬂd_o˘ë
(
RTP_£ssi⁄
 *
£ssi⁄
);

146 
RTCP_gë_pkt_lo°
(
RTP_£ssi⁄
 *
£ssi⁄
);

149 
uöt32
 
RTCP_gë_‰a˘_lo°
(
RTP_£ssi⁄
 *
£ssi⁄
);

152 
RTCP_gë_jôãr
(
RTP_£ssi⁄
 *
£ssi⁄
);

155 
RTCP_gë_tŸÆ_∑ckë
(
RTP_£ssi⁄
 *
£ssi⁄
);

158 
RTCP_gë_tŸÆ_∑ylﬂd_o˘ë
(
RTP_£ssi⁄
 *
£ssi⁄
);

	@include_lib/net/streaming_media_server/fenice/rtp.h

36 #i‚de‡
_RTPH


37 
	#_RTPH


	)

40 
	~"sockë.h
"

41 
	~"medüöfo.h
"

42 
	~"buf„Ωoﬁ.h
"

43 
	~"ty≥s.h
"

44 
	~"¥efs.h
"

48 
	#RTP_DEFAULT_PORT
 5004

	)

49 
	#RTCP_BUFFERSIZE
 1024

	)

52 
	mi_£rvî
 = 0,

53 
	mi_˛õ¡
 = 1

54 } 
	tπ˝_ödex
;

57 
	mRTP
;

58 
	mRTCP
;

59 } 
	tp‹t_∑ú
;

62 
	mπp_¥Ÿo
 = 0,

63 
	mπ˝_¥Ÿo


64 } 
	tπp_¥Ÿos
;

67 
uöt16
 
	mRTP
;

68 
uöt16
 
	mRTCP
;

69 } 
	t°ªam_∑ú
;

71 
	s_RTP_å™•‹t
 {

73 
	mRTP_no_å™•‹t
 = 0,

74 
	mRTP_πp_avp
,

75 
	mRTP_πp_avp_t˝
,

76 
	mRTP_πp_avp_s˘p


77 } 
	mty≥
;

78 
tsockë
 
	mπp_fd
;

79 
tsockë
 
	mπ˝_fd_out
;

80 
tsockë
 
	mπ˝_fd_ö
;

83 
sockaddr
 
	mπp_≥î
;

84 
sockaddr
 
	mπ˝_ö_≥î
;

85 
sockaddr
 
	mπ˝_out_≥î
;

86 
p‹t_∑ú
 
	m˛i_p‹ts
;

87 
p‹t_∑ú
 
	m£r_p‹ts
;

88 
	mis_mu…iˇ°
;

89 } 
	mudp
;

91 
°ªam_∑ú
 
	möãæóved
;

92 } 
	mt˝
;

94 
°ªam_∑ú
 
	m°ªams
;

95 } 
	ms˘p
;

97 } 
	mu
;

98 } 
	tRTP_å™•‹t
;

100 
	s_RTCP_°©s
 {

101 
	mRR_ª˚ived
;

102 
	mSR_ª˚ived
;

103 
	mde°_SSRC
;

104 
	mpkt_cou¡
;

105 
	mo˘ë_cou¡
;

106 
	mpkt_lo°
;

107 
	m‰a˘_lo°
;

108 
	mhighe°_£q_no
;

109 
	mjôãr
;

110 
	mœ°_SR
;

111 
	mdñay_sö˚_œ°_SR
;

112 } 
	tRTCP_°©s
;

114 
	s_RTP_£ssi⁄
 {

115 
RTP_å™•‹t
 
	må™•‹t
;

116 
	mπ˝_öbuf„r
[
RTCP_BUFFERSIZE
];

117 
	mπ˝_ösize
;

118 
	mπ˝_outbuf„r
[
RTCP_BUFFERSIZE
];

119 
uöt32
 
	mπ˝_outsize
;

126 
uöt64
 
	mm¥ev_tx_time
;

127 
	mPªviousCou¡
;

128 
	mMöimumRóched
;

129 
	mMaximumRóched
;

131 
	msched_id
;

132 
	m°¨t_£q
;

134 
	m°¨t_π±ime
;

136 
	m∑u£
;

138 
	m°¨ãd
;

140 
	m£q
;

141 
	ms§c
;

143 
	mπp_bªak
;

147 
	msd_fûíame
[255];

148 
medü_íåy
 *
	mcuºít_medü
;

149 
SD_des¸
 *
	msd_des¸
;

152 
OMSC⁄sumî
 *
	mc⁄s
;

153 
RTCP_°©s
 
	mπ˝_°©s
[2];

154 
_RTP_£ssi⁄
 *
	m√xt
;

155 
	mis_mu…iˇ°_dad
;

156 } 
	tRTP_£ssi⁄
;

158 
	s_RTP_hódî
 {

160 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

161 
	mc§c_Àn
: 4;

162 
	mexãnsi⁄
: 1;

163 
	m∑ddög
: 1;

164 
	mvîsi⁄
: 2;

165 #ñi‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

166 
	mvîsi⁄
: 2;

167 
	m∑ddög
: 1;

168 
	mexãnsi⁄
: 1;

169 
	mc§c_Àn
: 4;

171 #îr‹ 
Neôhî
 
big
 
n‹
 
lôée


174 #i‡(
BYTE_ORDER
 =
LITTLE_ENDIAN
)

175 
	m∑ylﬂd
: 7;

176 
	mm¨kî
: 1;

177 #ñi‡(
BYTE_ORDER
 =
BIG_ENDIAN
)

178 
	mm¨kî
: 1;

179 
	m∑ylﬂd
: 7;

182 
	m£q_no
;

184 
	mtime°amp
;

186 
	ms§c
;

187 } 
	tRTP_hódî
;

189 (*
	tRTP_∂ay_a˘i⁄
)(
	tRTP_£ssi⁄
 *
	t£ss
);

191 
	`RTP_p‹t_poﬁ_öô
(
p‹t
);

192 
	`RTP_gë_p‹t_∑ú
(
p‹t_∑ú
 *
∑ú
);

193 
	`RTP_ªÀa£_p‹t_∑ú
(
p‹t_∑ú
 *
∑ú
);

195 
	`RTP_£nd_∑ckë
(
RTP_£ssi⁄
 *
£ssi⁄
);

196 
RTP_£ssi⁄
 *
	`RTP_£ssi⁄_de°roy
(RTP_session *);

199 
	`RTP_å™•‹t_˛o£
(
RTP_£ssi⁄
 *);

201 
ssize_t
 
	`RTP_£ndto
(
RTP_£ssi⁄
 *, 
πp_¥Ÿos
, *, ssize_t);

202 
ssize_t
 
	`RTP_ªcv
(
RTP_£ssi⁄
 *, 
πp_¥Ÿos
);

	@include_lib/net/streaming_media_server/fenice/rtp_shm.h

35 #i‚de‡
RTP_SHM_H_


36 
	#RTP_SHM_H_


	)

38 
lﬂd_RTP_SHM
(
medü_íåy
 *);

39 
ªad_RTP_SHM
(
medü_íåy
 *, 
uöt8
 *, 
uöt32
 *, 
uöt64
 *, *, uint8 *);

40 
‰ì_RTP_SHM
(*);

	@include_lib/net/streaming_media_server/fenice/rtpptdefs.h

35 #i‚de‡
__RTP_PT_DEFS_H


36 
	#__RTP_PT_DEFS_H


	)

38 
	~"../„ni˚_c⁄fig.h
"

39 
	~"medüöfo.h
"

41 #i‚de‡
GLOBAL_RTP_DEFS


42 
	#RTP_DEFS_EXTERN
 

	)

44 
	#RTP_DEFS_EXTERN


	)

48 
	s_RTP_°©ic_∑ylﬂd
 {

49 
PldTy≥
;

50 *
EncName
;

51 
ClockR©e
;

52 
Ch™√ls
;

53 
BôPîSam∂e
;

54 
medü_codög
 
Ty≥
;

55 
uöt32
 
PktLí
;

56 } 
	tRTP_°©ic_∑ylﬂd
;

59 
RTP_DEFS_EXTERN
 
RTP_°©ic_∑ylﬂd
 
	gRTP_∑ylﬂd
[]

60 #ifde‡
GLOBAL_RTP_DEFS


64 {0, "PCMU", 8000, 1, 8, 
ßm∂e
, 20}, {-1, "", -1, -1, -1, -1, -1}, {

70 
ßm∂e
,

79 
‰ame
,

82 {4, "G723", 8000, 1, -1, 
‰ame
, 30}, {

83 5, "DVI4", 8000, 1, 4, 
ßm∂e
,

87 
ßm∂e
, 20

89 {7, "LPC", 8000, 1, -1, 
‰ame
, 20},

90 {8, "PCMA", 8000, 1, 8, 
ßm∂e
, 20}, {

91 9, "G722", 8000, 1, 8, 
ßm∂e
,

95 
ßm∂e
, 20

97 {11, "L16", 44100, 1, 16, 
ßm∂e
, 20},

98 {12, "QCELP", 8000, 1, -1, 
‰ame
, 20}, {-1, "", -1, -1, -1, -1, -1},

99 {14, "MPA", 90000, 1, -1, 
‰ame
, -1}, {

105 
‰ame
,

108 {16, "DVI4", 11025, 1, 4, 
ßm∂e
, 20}, {

109 17, "DVI4", 22050, 1, 4, 
ßm∂e
,

113 
‰ame
,

135 {-1, "", -1, -1, -1, -1, -1}, {25, "CñB", 90000, 0, -1, 
‰ame
, -1},

136 {26, "JPEG", 90000, 0, -1, 
‰ame
, -1}, {

145 {28, "nv", 90000, 0, -1, 
‰ame
, -1}, {-1, "", -1, -1, -1, -1, -1}, {

157 
‰ame
, -1

159 {32, "MPV", 90000, 0, -1, 
‰ame
, -1}, {

160 33, "MP2T", 90000, 0, -1, 
‰ame
,

164 
‰ame
,

	@include_lib/net/streaming_media_server/fenice/rtsp.h

35 #i‚de‡
_RTSPH


36 
	#_RTSPH


	)

39 
	~"../„ni˚_c⁄fig.h
"

40 
	~"utûs.h
"

41 
	~"sockë.h
"

42 
	~"πp.h
"

43 
	~"π˝.h
"

44 
	~"medüöfo.h
"

45 
	~"scheduÀ.h
"

47 
	#RTSP_BUFFERSIZE
 4096

	)

48 
	#INTERLEAVED_BUFFERSIZE
 4096

	)

51 
	#INIT_STATE
 0

	)

52 
	#READY_STATE
 1

	)

53 
	#PLAY_STATE
 2

	)

55 
	#RTSP_VER
 "RTSP/1.0"

	)

57 
	#RTSP_EL
 "\r\n"

	)

58 
	#RTSP_RTP_AVP
 "RTP/AVP"

	)

60 
	e_RTSP_¥Ÿo
 {

61 
	mTCP
,

62 
	mSCTP


63 } 
	tRTSP_¥Ÿo
;

65 
	s_RTSP_öãæóved
 {

66 
	mπp_fd
;

67 
	mπ˝_fd
;

70 
uöt16
 
	mπp_ch
;

71 
uöt16
 
	mπ˝_ch
;

72 } 
	mt˝
;

74 
uöt16
 
	mπp_°
;

75 
uöt16
 
	mπ˝_°
;

76 } 
	ms˘p
;

77 } 
	m¥Ÿo
;

78 
_RTSP_öãæóved
 *
	m√xt
;

79 } 
	tRTSP_öãæóved
;

81 
	s_RTSP_£ssi⁄
 {

83 
	mcur_°©e
;

84 
	m£ssi⁄_id
;

85 
RTP_£ssi⁄
 *
	mπp_£ssi⁄
;

86 
_RTSP_£ssi⁄
 *
	m√xt
;

87 } 
	tRTSP_£ssi⁄
;

89 
	s_RTSP_buf„r
 {

90 
tsockë
 
	mfd
;

91 
sockaddr_ö
 
	mde°_addr
;

92 
RTSP_¥Ÿo
 
	m¥Ÿo
;

93 
	mp‹t
;

95 
	mö_buf„r
[
RTSP_BUFFERSIZE
];

96 
size_t
 
	mö_size
;

97 
	mout_buf„r
[
RTSP_BUFFERSIZE
 + 
MAX_DESCR_LENGTH
];

98 
size_t
 
	mout_size
;

99 
size_t
 
	mout_£¡
;

105 
RTSP_öãæóved
 *
	möãæóved
;

107 
	mπ•_c£q
;

108 
	mdes¸
[
MAX_DESCR_LENGTH
];

109 
RTSP_£ssi⁄
 *
	m£ssi⁄_li°
;

110 
_RTSP_buf„r
 *
	m√xt
;

111 } 
	tRTSP_buf„r
;

115 
RTSP_°©e_machöe
(
RTSP_buf„r
 *
π•
, 
mëhod_code
);

118 
RTSP_des¸ibe
(
RTSP_buf„r
 *
π•
);

121 
RTSP_£tup
(
RTSP_buf„r
 *
π•
, 
RTSP_£ssi⁄
 **
√w_£ssi⁄
);

124 
RTSP_∂ay
(
RTSP_buf„r
 *
π•
);

127 
RTSP_∑u£
(
RTSP_buf„r
 *
π•
);

130 
RTSP_ã¨down
(
RTSP_buf„r
 *
π•
);

133 
RTSP_›ti⁄s
(
RTSP_buf„r
 *
π•
);

135 
RTSP_h™dÀr
(
RTSP_buf„r
 *
π•
);

139 
	#RTSP_nŸ_fuŒ
 0

	)

140 
	#RTSP_mëhod_rcvd
 1

	)

141 
	#RTSP_öãævd_rcvd
 2

	)

142 
RTSP_fuŒ_msg_rcvd
(
RTSP_buf„r
 *
π•
, *
hdr_Àn
, *
body_Àn
);

143 
	#RTSP_msg_Àn
 
RTSP_fuŒ_msg_rcvd


	)

144 
RTSP_disˇrd_msg
(
RTSP_buf„r
 *
π•
);

145 
RTSP_ªmove_msg
(
Àn
, 
RTSP_buf„r
 *
π•
);

147 
RTSP_vÆid_ª•⁄£_msg
(*
°©us
, *
msg
,

148 
RTSP_buf„r
 *
π•
);

149 
RTSP_vÆid©e_mëhod
(
RTSP_buf„r
 *
π•
);

150 
RTSP_öô£rvî
(
RTSP_buf„r
 *
π•
, 
tsockë
 
fd
, 
sockaddr_ö
 *
de°_addr
, 
RTSP_¥Ÿo
 
¥Ÿo
);

153 
£nd_des¸ibe_ª∂y
(
RTSP_buf„r
 *
π•
, *
obje˘
,

154 
des¸ùti⁄_f‹m©
 
des¸_f‹m©
, *
des¸
);

157 
uöt32
 
£nd_ªdúe˘_3xx
(
RTSP_buf„r
 *, *);

160 
£nd_£tup_ª∂y
(
RTSP_buf„r
 *
π•
, 
RTSP_£ssi⁄
 *
£ssi⁄
,

161 
SD_des¸
 *
des¸
, 
RTP_£ssi⁄
 *
•2
);

164 
£nd_ã¨down_ª∂y
(
RTSP_buf„r
 *
π•
, 
£ssi⁄_id
, 
c£q
);

167 
£nd_∂ay_ª∂y
(
RTSP_buf„r
 *
π•
, *
obje˘
,

168 
RTSP_£ssi⁄
 *
π•_£ssi⁄
);

171 
£nd_∑u£_ª∂y
(
RTSP_buf„r
 *
π•
, 
RTSP_£ssi⁄
 *
π•_£ssi⁄
);

174 
£nd_›ti⁄s_ª∂y
(
RTSP_buf„r
 *
π•
, 
c£q
);

177 
max_c⁄√˘i⁄
();

178 *
gë_°©
(
îr
);

179 
£nd_ª∂y
(
îr
, *
add⁄
, 
RTSP_buf„r
 *
π•
);

180 
bwrôe
(*
buf„r
, 
Àn
, 
RTSP_buf„r
 *
π•
);

181 
add_time_°amp
(*
b
, 
¸lf
);

183 
ssize_t
 
RTSP_£nd
(
RTSP_buf„r
 *
π•
);

	@include_lib/net/streaming_media_server/fenice/schedule.h

35 #i‚de‡
_SCHEDULEH


36 
	#_SCHEDULEH


	)

40 
	~"ty≥s.h
"

41 
	~"πp.h
"

42 
	~"¥efs.h
"

43 
	~"debug.h
"

46 
	s_∂ay_¨gs
 {

47 
tm
 
	m∂ayback_time
;

48 
	m∂ayback_time_vÆid
;

49 
uöt32
 
	m°¨t_time
;

50 
	m°¨t_time_vÆid
;

51 
uöt32
 
	míd_time
;

52 } 
	t∂ay_¨gs
;

54 
	s_scheduÀ_li°
 {

55 
	mvÆid
;

56 
RTP_£ssi⁄
 *
	mπp_£ssi⁄
;

58 
RTP_∂ay_a˘i⁄
 
	m∂ay_a˘i⁄
;

59 } 
	tscheduÀ_li°
;

61 
scheduÀ_öô
();

64 
scheduÀ_do
(*
nŸhög
);

66 
scheduÀ_add
(
RTP_£ssi⁄
 *
πp_£ssi⁄
 );

67 
öt32
 
scheduÀ_°¨t
(
id
, 
∂ay_¨gs
 *
¨gs
);

68 
scheduÀ_°›
(
id
);

69 
scheduÀ_ªmove
(
id
);

70 
scheduÀ_ªsume
(
id
, 
∂ay_¨gs
 *
¨gs
);

	@include_lib/net/streaming_media_server/fenice/sdp.h

35 #i‚de‡
_SDPH


36 
	#_SDPH


	)

38 
	~"medüöfo.h
"

40 
	#SDP_EL
 "\r\n"

	)

42 *
gë_SDP_u£r_«me
();

43 *
gë_SDP_£ssi⁄_id
();

44 *
gë_SDP_vîsi⁄
();

46 
gë_medü_des¸
(*
uæ
, 
medü_íåy
 *
ªq
, medü_íåy *
medü
,

47 *
des¸
);

48 
gë_SDP_des¸
(
medü_íåy
 *
medü
, *
des¸
, 
exãnded
, *
uæ
);

	@include_lib/net/streaming_media_server/fenice/socket.h

36 #i‚de‡
_SOCKETH


37 
	#_SOCKETH


	)

39 
	~"../„ni˚_c⁄fig.h
"

41 
	tu_öt16
;

43 #i‡
deföed
(
__Æpha
)

44 
	tu_öt32
;

46 
	tu_öt32
;

49 #i‚de‡
BYTE_ORDER


51 
	#LITTLE_ENDIAN
 1234

	)

52 
	#BIG_ENDIAN
 4321

	)

54 #i‡
deföed
(
sun
Ë|| deföed(
__BIG_ENDIAN
Ë|| deföed(
NET_ENDIAN
)

55 
	#BYTE_ORDER
 
BIG_ENDIAN


	)

57 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

64 
	~"lwù/sockës.h
"

65 #ifde‡
HAVE_SCTP_FENICE


66 
	~<√töë/s˘p.h
>

69 
	ttsockë
;

71 #i‚de‡
HAVE_STRUCT_SOCKADDR_STORAGE


72 
	#MAXSOCKADDR
 128

	)

73 
	ssockaddr_°‹age
 {

74 
	m∑ddög
[
MAXSOCKADDR
];

78 *
gë_addªss
();

79 *
sock_¡›_ho°
(c⁄° 
sockaddr
 *, 
sockÀn_t
, *, 
size_t
);

81 
tsockë
 
„ni˚_t˝_li°í
(
p‹t
);

82 
tsockë
 
„ni˚_t˝_ac˚±
—sockë 
fd
, 
sockaddr_ö
 *
de°_addr
);

83 
„ni˚_t˝_ªad
(
tsockë
 
fd
, *
buf„r
, 
nbyãs
);

84 
„ni˚_t˝_wrôe
(
tsockë
 
fd
, *
buf„r
, 
nbyãs
);

85 
„ni˚_t˝_˛o£
(
tsockë
 
s
);

86 
tsockë
 
„ni˚_t˝_c⁄√˘
(
p‹t
, *
addr
);

88 #ifde‡
HAVE_SCTP_FENICE


89 
	#MAX_SCTP_STREAMS
 11

	)

90 
tsockë
 
„ni˚_s˘p_li°í
(
p‹t
);

91 
tsockë
 
„ni˚_s˘p_ac˚±
—sockë 
fd
);

92 
„ni˚_s˘p_˛o£
(
tsockë
 
s
);

93 
tsockë
 
„ni˚_s˘p_c⁄√˘
(
p‹t
, *
addr
);

96 
„ni˚_udp_c⁄√˘
(
to_p‹t
, 
sockaddr
 *
s_addr
, 
addr
,

97 
tsockë
 *
fd
);

98 
„ni˚_udp_›í
(
p‹t
, 
sockaddr
 *
s_addr
, 
tsockë
 *
fd
);

99 
„ni˚_udp_˛o£
(
tsockë
 
fd
);

101 #ifde‡
HAVE_SCTP_FENICE


102 
	#MAX_INTERLVD_STMS
 
MAX_SCTP_STREAMS


	)

104 
	#MAX_INTERLVD_STMS
 11

	)

	@include_lib/net/streaming_media_server/fenice/types.h

29 #i‚de‡
__FENICE_TYPES_H


30 
	#__FENICE_TYPES_H


	)

32 
	tuöt8
;

33 
	tuöt16
;

34 
	tuöt32
;

35 
	tuöt64
;

36 
	töt8
;

37 
	töt16
;

38 
	töt32
;

39 
	töt64
;

	@include_lib/net/streaming_media_server/fenice/utils.h

35 #i‚de‡
_UTILSH


36 
	#_UTILSH


	)

38 
	~"medüöfo.h
"

39 
	~"ty≥s.h
"

41 
	#ERR_NOERROR
 0

	)

42 
	#ERR_GENERIC
 -1

	)

43 
	#ERR_NOT_FOUND
 -2

	)

44 
	#ERR_PARSE
 -3

	)

45 
	#ERR_ALLOC
 -4

	)

46 
	#ERR_INPUT_PARAM
 -5

	)

47 
	#ERR_NOT_SD
 -6

	)

48 
	#ERR_UNSUPPORTED_PT
 -7

	)

49 
	#ERR_EOF
 -8

	)

50 
	#ERR_FATAL
 -9

	)

51 
	#ERR_CONNECTION_CLOSE
 -10

	)

54 
	#HDR_CONTENTLENGTH
 "C⁄ã¡-Lígth"

	)

55 
	#HDR_ACCEPT
 "Ac˚±"

	)

56 
	#HDR_ALLOW
 "AŒow"

	)

57 
	#HDR_BLOCKSIZE
 "Blocksize"

	)

58 
	#HDR_CONTENTTYPE
 "C⁄ã¡-Ty≥"

	)

59 
	#HDR_DATE
 "D©e"

	)

60 
	#HDR_REQUIRE
 "Requúe"

	)

61 
	#HDR_TRANSPORTREQUIRE
 "Tøn•‹t-Requúe"

	)

62 
	#HDR_SEQUENCENO
 "Sequí˚No"

	)

63 
	#HDR_CSEQ
 "CSeq"

	)

64 
	#HDR_STREAM
 "Såóm"

	)

65 
	#HDR_SESSION
 "Sessi⁄"

	)

66 
	#HDR_TRANSPORT
 "Tøn•‹t"

	)

67 
	#HDR_RANGE
 "R™ge"

	)

68 
	#HDR_USER_AGENT
 "U£r-Agít"

	)

71 
	#RTSP_METHOD_MAXLEN
 15

	)

72 
	#RTSP_METHOD_DESCRIBE
 "DESCRIBE"

	)

73 
	#RTSP_METHOD_ANNOUNCE
 "ANNOUNCE"

	)

74 
	#RTSP_METHOD_GET_PARAMETERS
 "GET_PARAMETERS"

	)

75 
	#RTSP_METHOD_OPTIONS
 "OPTIONS"

	)

76 
	#RTSP_METHOD_PAUSE
 "PAUSE"

	)

77 
	#RTSP_METHOD_PLAY
 "PLAY"

	)

78 
	#RTSP_METHOD_RECORD
 "RECORD"

	)

79 
	#RTSP_METHOD_REDIRECT
 "REDIRECT"

	)

80 
	#RTSP_METHOD_SETUP
 "SETUP"

	)

81 
	#RTSP_METHOD_SET_PARAMETER
 "SET_PARAMETER"

	)

82 
	#RTSP_METHOD_TEARDOWN
 "TEARDOWN"

	)

84 
	#RTSP_ID_DESCRIBE
 0

	)

85 
	#RTSP_ID_ANNOUNCE
 1

	)

86 
	#RTSP_ID_GET_PARAMETERS
 2

	)

87 
	#RTSP_ID_OPTIONS
 3

	)

88 
	#RTSP_ID_PAUSE
 4

	)

89 
	#RTSP_ID_PLAY
 5

	)

90 
	#RTSP_ID_RECORD
 6

	)

91 
	#RTSP_ID_REDIRECT
 7

	)

92 
	#RTSP_ID_SETUP
 8

	)

93 
	#RTSP_ID_SET_PARAMETER
 9

	)

94 
	#RTSP_ID_TEARDOWN
 10

	)

97 
	#SD_STREAM
 "STREAM"

	)

98 
	#SD_STREAM_END
 "STREAM_END"

	)

99 
	#SD_FILE_EXT_NAME
 "FILE_EXT_NAME"

	)

100 
	#SD_CLOCK_RATE
 "CLOCK_RATE"

	)

101 
	#SD_PAYLOAD_TYPE
 "PAYLOAD_TYPE"

	)

102 
	#SD_AUDIO_CHANNELS
 "AUDIO_CHANNELS"

	)

103 
	#SD_ENCODING_NAME
 "ENCODING_NAME"

	)

104 
	#SD_AGGREGATE
 "AGGREGATE"

	)

105 
	#SD_BIT_PER_SAMPLE
 "BIT_PER_SAMPLE"

	)

106 
	#SD_SAMPLE_RATE
 "SAMPLE_RATE"

	)

107 
	#SD_CODING_TYPE
 "CODING_TYPE"

	)

108 
	#SD_FRAME_LEN
 "FRAME_LEN"

	)

109 
	#SD_PKT_LEN
 "PKT_LEN"

	)

110 
	#SD_PRIORITY
 "PRIORITY"

	)

111 
	#SD_BITRATE
 "BITRATE"

	)

112 
	#SD_FRAME_RATE
 "FRAME_RATE"

	)

113 
	#SD_FORCE_FRAME_RATE
 "FORCE_FRAME_RATE"

	)

114 
	#SD_BYTE_PER_PCKT
 "BYTE_PER_PCKT"

	)

115 
	#SD_MEDIA_SOURCE
 "MEDIA_SOURCE"

	)

116 
	#SD_TWIN
 "TWIN"

	)

117 
	#SD_MULTICAST
 "MULTICAST"

	)

118 
	#SD_MULTICAST_PORT
 "MULTICAST_PORT"

	)

119 
	#SCREEN_WIDE
 "SCREEN_WIDTH"

	)

120 
	#SCREEN_HIGH
 "SCREEN_HIGHT"

	)

123 
	#SD_LICENSE
 "LICENSE"

	)

124 
	#SD_RDF
 "VERIFY"

	)

125 
	#SD_TITLE
 "TITLE"

	)

126 
	#SD_CREATOR
 "CREATOR"

	)

131 
uöt32
 
øndom32
();

133 
∑r£_uæ
(c⁄° *
uæ
, *
£rvî
, 
size_t
, *
p‹t
,

134 *
fûe_«me
, 
size_t
);

135 *
Æloc_∑th_«me
(*
ba£_∑th
, *
fûe_∑th
);

137 
NTP_time
(
time_t
 
t
);

138 
gë_UTC_time
(
tm
 *
t
, *
b
);

139 
is_suµ‹ãd_uæ
(*
p
);

141 #i‚de‡
mö


142 
	#mö
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

144 #i‚de‡
max


145 
	#max
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

147 
	#Ãound
(
x
) (x)

148 

	)

	@include_lib/net/streaming_media_server/fenice/xmllexer.h

36 #i‚de‡
XML_LEXER_H


37 
	#XML_LEXER_H


	)

40 
	#T_ERROR
 -1

	)

41 
	#T_EOF
 0

	)

42 
	#T_EOL
 1

	)

43 
	#T_SEPAR
 2

	)

44 
	#T_M_START_1
 3

	)

45 
	#T_M_START_2
 4

	)

46 
	#T_M_STOP_1
 5

	)

47 
	#T_M_STOP_2
 6

	)

48 
	#T_EQUAL
 7

	)

49 
	#T_QUOTE
 8

	)

50 
	#T_STRING
 9

	)

51 
	#T_IDENT
 10

	)

52 
	#T_DATA
 11

	)

53 
	#T_C_START
 12

	)

54 
	#T_C_STOP
 13

	)

55 
	#T_TI_START
 14

	)

56 
	#T_TI_STOP
 15

	)

57 
	#T_DOCTYPE_START
 16

	)

58 
	#T_DOCTYPE_STOP
 17

	)

62 
Àxî_öô
(*
buf
, 
size
);

63 
Àxî_gë_tokí
(*
tok
, 
tok_size
);

	@include_lib/net/streaming_media_server/fenice/xmlparser.h

36 #i‚de‡
XML_PARSER_H


37 
	#XML_PARSER_H


	)

40 
	#XML_PARSER_CASE_INSENSITIVE
 0

	)

41 
	#XML_PARSER_CASE_SENSITIVE
 1

	)

44 
	#XML_PARSER_OK
 0

	)

45 
	#XML_PARSER_ERROR
 1

	)

49 
	sxml_¥›îty_s
 {

50 *
	m«me
;

51 *
	mvÆue
;

52 
xml_¥›îty_s
 *
	m√xt
;

53 } 
	txml_¥›îty_t
;

56 
	sxml_node_s
 {

57 *
	m«me
;

58 *
	md©a
;

59 
xml_¥›îty_s
 *
	m¥›s
;

60 
xml_node_s
 *
	mchûd
;

61 
xml_node_s
 *
	m√xt
;

62 } 
	txml_node_t
;

64 
xml_∑r£r_öô
(*
buf
, 
size
, 
mode
);

66 
xml_∑r£r_buûd_åì
(
xml_node_t
 **
roŸ_node
);

68 
xml_∑r£r_‰ì_åì
(
xml_node_t
 *
roŸ_node
);

70 *
xml_∑r£r_gë_¥›îty
(
xml_node_t
 *
node
, c⁄° *
«me
);

71 
xml_∑r£r_gë_¥›îty_öt
(
xml_node_t
 *
node
, c⁄° *
«me
,

72 
def_vÆue
);

73 
xml_∑r£r_gë_¥›îty_boﬁ
(
xml_node_t
 *
node
, c⁄° *
«me
,

74 
def_vÆue
);

80 
xml_∑r£r_dump_åì
(
xml_node_t
 *
node
);

	@include_lib/net/streaming_media_server/fenice_config.h

1 #i‚de‡
_FENICE_CONFIG_H_


2 
	#_FENICE_CONFIG_H_


	)

5 
	#ENABLE_DEBUG
 1

	)

11 
	#ENABLE_DUMPBUFF
 0

	)

14 
	#ENABLE_VERBOSE
 1

	)

18 
	#FENICE_AVROOT_DIR_DEFAULT_STR
 "storage/sd1/C"

19 

	)

21 
	#FENICE_MAX_SESSION_DEFAULT
 6

	)

24 
	#FENICE_RTSP_PORT_DEFAULT
 554

	)

27 
	#HAVE_ALLOCA
 0

	)

31 
	#HAVE_ALLOCA_H
 0

	)

37 
	#HAVE_STRUCT_SOCKADDR_STORAGE
 1

	)

40 
	#PACKAGE
 "jl"

	)

43 
	#FEN_VERSION
 "0.01"

	)

45 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

47 
	s„ni˚_sour˚_öfo
 {

48 
	mwidth
;

49 
	mheight
;

50 
	mÂs
;

52 
	mßm∂e_øã
;

53 
	mch™√l_num
;

56 
	s„ni˚_c⁄fig
 {

57 
	m¥Ÿocﬁ
[4];

58 
	mp‹t
;

59 (*
	mexô
)();

60 (*
	m£tup
)();

61 (*
	möfo
)(
„ni˚_sour˚_öfo
 *info);

	@include_lib/net/streaming_media_server/header.h

	@include_lib/net/streaming_media_server/stream_pkg.h

2 #i‚de‡
_STREAM_PKG_H_


3 
	#_STREAM_PKG_H_


	)

5 
	~"£rvî/vpkg_£rvî.h
"

8 
°rm_j≥g_gë_a‰ame
(*
±r
, 
rd_Àn
, *
ªt_Àn
);

9 
°rm_j≥g_gë_v‰ame
(*
±r
, 
Àn
, *
rsize
,

10 *
is_‰ame_íd
);

11 
°rm_j≥g_v‰ame_buf_em±y
(
°rm_pkg_fd
 *
°rm_fd
);

12 
°rm_j≥g_a‰ame_buf_em±y
(
°rm_pkg_fd
 *
°rm_fd
);

13 
°rm_j≥g_gë_‰ame_øã
(*
‰ame_øã
);

14 
°rm_j≥g_gë_s¸ìn_width
(*
s¸ìn_width
);

15 
°rm_j≥g_gë_s¸ìn_height
(*
s¸ìn_height
);

16 
°rm_j≥g_pcm_gë_ßm∂e_øã
(*
ßm∂e_øã
);

17 
°rm_j≥g_pcm_gë_ch™√l_num
(*
ch™√l_num
);

18 
°rm_j≥g_pcm_gë_bô_≥r_ßm∂e
(*
bô_≥r_ßm∂e
);

20 
°rm_h264_gë_pcm_a‰ame
(*
±r
, 
Àn
, *
ªt_Àn
);

21 
°rm_h264_gë_pcma_a‰ame
(*
±r
, 
Àn
, *
ªt_Àn
);

23 
°rm_h264_gë_v‰ame
(*
±r
, 
Àn
, 
dr›_f
);

24 
°rm_h264_v‰ame_buf_em±y
(
°rm_pkg_fd
 *
°rm_fd
);

25 
°rm_h264_a‰ame_buf_em±y
(
°rm_pkg_fd
 *
°rm_fd
);

26 
°rm_h264_gë_‰ame_øã
(*
‰ame_øã
);

27 
°rm_h264_gë_s¸ìn_width
(*
s¸ìn_width
);

28 
°rm_h264_gë_s¸ìn_height
(*
s¸ìn_height
);

29 
°rm_h264_pcm_gë_ßm∂e_øã
(*
ßm∂e_øã
);

30 
°rm_h264_pcm_gë_ch™√l_num
(*
ch™√l_num
);

31 
°rm_h264_pcm_gë_bô_≥r_ßm∂e
(*
bô_≥r_ßm∂e
);

	@include_lib/net/tinydtls/aes/rijndael.h

28 #i‚de‡
__RIJNDAEL_H


29 
	#__RIJNDAEL_H


	)

31 
	~<°döt.h
>

33 
	#AES_MAXKEYBITS
 (256)

	)

34 
	#AES_MAXKEYBYTES
 (
AES_MAXKEYBITS
/8)

	)

36 
	#AES_MAXROUNDS
 10

	)

38 
	#WITH_AES_DECRYPT


	)

40 
	#DTLS_AES_SETKEY_ENC_ALT


	)

41 
	#DTLS_AES_SETKEY_DEC_ALT


	)

42 
	#DTLS_AES_ENCRYPT_ALT


	)

43 
	#DTLS_AES_DECRYPT_ALT


	)

44 
	#DTLS_AES_TEST


	)

48 
	tu_ch¨
;

49 
uöt8_t
 
	t´s_u8
;

50 
uöt16_t
 
	t´s_u16
;

51 
uöt32_t
 
	t´s_u32
;

55 #ifde‡
WITH_AES_DECRYPT


56 
	míc_⁄ly
;

58 
	mNr
;

59 
´s_u32
 
	mek
[4 * (
AES_MAXROUNDS
 + 1)];

60 #ifde‡
WITH_AES_DECRYPT


61 
´s_u32
 
	mdk
[4 * (
AES_MAXROUNDS
 + 1)];

63 
	m´s_íc_key
[32];

65 
	m´s_dec_key
[32];

68 } 
	trijnd´l_˘x
;

73 
rijnd´l_£t_key
(
rijnd´l_˘x
 *, c⁄° 
u_ch¨
 *, );

74 
rijnd´l_£t_key_íc_⁄ly
(
rijnd´l_˘x
 *, c⁄° 
u_ch¨
 *, );

75 
rijnd´l_de¸y±
(
rijnd´l_˘x
 *, c⁄° 
u_ch¨
 *, u_char *);

76 
rijnd´l_í¸y±
(
rijnd´l_˘x
 *, c⁄° 
u_ch¨
 *, u_char *);

79 #i‡
deföed
(
DTLS_AES_SETKEY_ENC_ALT
)

80 
rijnd´lKeySëupEnc1
(
rijnd´l_˘x
 *
˘x
, c⁄° 
´s_u8
 
cùhîKey
[], 
keyBôs
);

82 
rijnd´lKeySëupEnc1
(
´s_u32
 
rk
[ ], c⁄° 
´s_u8
 
cùhîKey
[], 
keyBôs
);

85 #i‡
deföed
(
DTLS_AES_SETKEY_DEC_ALT
)

86 
rijnd´lKeySëupDec
(
rijnd´l_˘x
 *
˘x
, c⁄° 
´s_u8
 
cùhîKey
[], 
keyBôs
);

88 
rijnd´lKeySëupDec
(
´s_u32
 
rk
[ ], c⁄° 
´s_u8
 
cùhîKey
[], 
keyBôs
);

91 
rijnd´lEn¸y±
(c⁄° 
´s_u32
 
rk
[ ], 
Nr
, c⁄° 
´s_u8
 
±
[16],áes_u8 
˘
[16]);

	@include_lib/net/tinydtls/alert.h

31 #i‚de‡
_DTLS_ALERT_H_


32 
	#_DTLS_ALERT_H_


	)

35 
	mDTLS_ALERT_LEVEL_WARNING
 = 1,

36 
	mDTLS_ALERT_LEVEL_FATAL
 = 2

37 } 
	tdés_Æît_Àvñ_t
;

40 
	mDTLS_ALERT_CLOSE_NOTIFY
 = 0,

41 
	mDTLS_ALERT_UNEXPECTED_MESSAGE
 = 10,

42 
	mDTLS_ALERT_BAD_RECORD_MAC
 = 20,

43 
	mDTLS_ALERT_RECORD_OVERFLOW
 = 22,

44 
	mDTLS_ALERT_DECOMPRESSION_FAILURE
 = 30,

45 
	mDTLS_ALERT_HANDSHAKE_FAILURE
 = 40,

46 
	mDTLS_ALERT_BAD_CERTIFICATE
 = 42,

47 
	mDTLS_ALERT_UNSUPPORTED_CERTIFICATE
 = 43,

48 
	mDTLS_ALERT_CERTIFICATE_REVOKED
 = 44,

49 
	mDTLS_ALERT_CERTIFICATE_EXPIRED
 = 45,

50 
	mDTLS_ALERT_CERTIFICATE_UNKNOWN
 = 46,

51 
	mDTLS_ALERT_ILLEGAL_PARAMETER
 = 47,

52 
	mDTLS_ALERT_UNKNOWN_CA
 = 48,

53 
	mDTLS_ALERT_ACCESS_DENIED
 = 49,

54 
	mDTLS_ALERT_DECODE_ERROR
 = 50,

55 
	mDTLS_ALERT_DECRYPT_ERROR
 = 51,

56 
	mDTLS_ALERT_PROTOCOL_VERSION
 = 70,

57 
	mDTLS_ALERT_INSUFFICIENT_SECURITY
 = 71,

58 
	mDTLS_ALERT_INTERNAL_ERROR
 = 80,

59 
	mDTLS_ALERT_USER_CANCELED
 = 90,

60 
	mDTLS_ALERT_NO_RENEGOTIATION
 = 100,

61 
	mDTLS_ALERT_UNSUPPORTED_EXTENSION
 = 110

62 } 
	tdés_Æît_t
;

64 
	#DTLS_EVENT_CONNECT
 0x01DC

	)

65 
	#DTLS_EVENT_CONNECTED
 0x01DE

	)

67 
	#DTLS_EVENT_RENEGOTIATE
 0x01DF

	)

69 
ölöe
 

70 
	$dés_Æît_¸óã
(
dés_Æît_Àvñ_t
 
Àvñ
, 
dés_Æît_t
 
desc
)

72  -((
Àvñ
 << 8Ë| 
desc
);

73 
	}
}

75 
ölöe
 

76 
	$dés_Æît_Áèl_¸óã
(
dés_Æît_t
 
desc
)

78  
	`dés_Æît_¸óã
(
DTLS_ALERT_LEVEL_FATAL
, 
desc
);

79 
	}
}

	@include_lib/net/tinydtls/ccm.h

26 #i‚de‡
_DTLS_CCM_H_


27 
	#_DTLS_CCM_H_


	)

29 
	~"´s/rijnd´l.h
"

33 
	#DTLS_CCM_BLOCKSIZE
 16

	)

34 
	#DTLS_CCM_MAX
 16

	)

35 
	#DTLS_CCM_NONCE_SIZE
 12

	)

58 
dés_ccm_í¸y±_mesßge
(
rijnd´l_˘x
 *
˘x
, 
size_t
 
M
, size_à
L
,

59 
n⁄˚
[
DTLS_CCM_BLOCKSIZE
],

60 *
msg
, 
size_t
 
lm
,

61 c⁄° *
Ød
, 
size_t
 
œ
);

64 
dés_ccm_de¸y±_mesßge
(
rijnd´l_˘x
 *
˘x
, 
size_t
 
M
, size_à
L
,

65 
n⁄˚
[
DTLS_CCM_BLOCKSIZE
],

66 *
msg
, 
size_t
 
lm
,

67 c⁄° *
Ød
, 
size_t
 
œ
);

	@include_lib/net/tinydtls/crypto.h

27 #i‚de‡
_DTLS_CRYPTO_H_


28 
	#_DTLS_CRYPTO_H_


	)

30 
	~<°dlib.h
>

31 
	~<°döt.h
>

33 
	~"t_li°.h
"

35 
	~"´s/rijnd´l.h
"

37 
	~"globÆ.h
"

38 
	~"°©e.h
"

39 
	~"numîic.h
"

40 
	~"hmac.h
"

41 
	~"ccm.h
"

44 
	#DTLS_MAC_KEY_LENGTH
 0

	)

45 
	#DTLS_KEY_LENGTH
 16

	)

46 
	#DTLS_BLK_LENGTH
 16

	)

47 
	#DTLS_MAC_LENGTH
 
DTLS_HMAC_DIGEST_SIZE


	)

48 
	#DTLS_IV_LENGTH
 4

	)

55 
	#MAX_KEYBLOCK_LENGTH
 \

56 (2 * 
DTLS_MAC_KEY_LENGTH
 + 2 * 
DTLS_KEY_LENGTH
 + 2 * 
DTLS_IV_LENGTH
)

	)

59 
	#DTLS_MASTER_SECRET_LENGTH
 48

	)

60 
	#DTLS_RANDOM_LENGTH
 32

	)

62 íum { 
	mAES128
 = 0

63 } 
	tdés_¸y±o_Æg
;

66 
	mDTLS_ECDH_CURVE_SECP256R1


67 } 
	tdés_ecdh_curve
;

71 
rijnd´l_˘x
 
	m˘x
;

72 } 
	t´s128_ccm_t
;

74 
	sdés_cùhî_c⁄ãxt_t
 {

76 
´s128_ccm_t
 
	md©a
;

77 } 
	tdés_cùhî_c⁄ãxt_t
;

80 
uöt8_t
 
	mown_ïh_¥iv
[32];

81 
uöt8_t
 
	mŸhî_ïh_pub_x
[32];

82 
uöt8_t
 
	mŸhî_ïh_pub_y
[32];

83 
uöt8_t
 
	mŸhî_pub_x
[32];

84 
uöt8_t
 
	mŸhî_pub_y
[32];

85 } 
	tdés_h™dshake_∑ømëîs_ecdß_t
;

89 
	#DTLS_PSK_MAX_CLIENT_IDENTITY_LEN
 32

	)

92 
	#DTLS_PSK_MAX_KEY_LEN
 32

	)

95 
uöt16_t
 
	mid_Àngth
;

96 
	midítôy
[
DTLS_PSK_MAX_CLIENT_IDENTITY_LEN
];

97 } 
	tdés_h™dshake_∑ømëîs_psk_t
;

100 
dés_com¥essi⁄_t
 
	mcom¥essi⁄
;

102 
dés_cùhî_t
 
	mcùhî
;

103 
uöt16_t
 
	mïoch
;

104 
uöt64_t
 
	mr£q
;

112 
uöt8_t
 
	mkey_block
[
MAX_KEYBLOCK_LENGTH
];

113 } 
	tdés_£curôy_∑ømëîs_t
;

117 
	søndom_t
 {

118 
uöt8_t
 
	m˛õ¡
[
DTLS_RANDOM_LENGTH
];

119 
uöt8_t
 
	m£rvî
[
DTLS_RANDOM_LENGTH
];

120 } 
	møndom
;

122 
uöt8_t
 
	mma°î_£¸ë
[
DTLS_MASTER_SECRET_LENGTH
];

123 } 
	mtmp
;

124 
LIST_STRUCT
(
ª‹dî_queue
);

125 
dés_hs_°©e_t
 
	mhs_°©e
;

127 
dés_com¥essi⁄_t
 
	mcom¥essi⁄
;

128 
dés_cùhî_t
 
	mcùhî
;

129 
	mdo_˛õ¡_auth
: 1;

131 #ifde‡
DTLS_ECC


132 
dés_h™dshake_∑ømëîs_ecdß_t
 
	mecdß
;

134 #ifde‡
DTLS_PSK


135 
dés_h™dshake_∑ømëîs_psk_t
 
	mpsk
;

137 } 
	mkeyx
;

138 } 
	tdés_h™dshake_∑ømëîs_t
;

143 
	#dés_kb_˛õ¡_mac_£¸ë
(
P¨am
, 
Rﬁe
Ë((P¨am)->
key_block
)

	)

144 
	#dés_kb_£rvî_mac_£¸ë
(
P¨am
, 
Rﬁe
) \

145 (
	`dés_kb_˛õ¡_mac_£¸ë
(
P¨am
, 
Rﬁe
Ë+ 
DTLS_MAC_KEY_LENGTH
)

	)

146 
	#dés_kb_ªmŸe_mac_£¸ë
(
P¨am
, 
Rﬁe
) \

147 ((
Rﬁe
Ë=
DTLS_SERVER
 \

148 ? 
	`dés_kb_˛õ¡_mac_£¸ë
(
P¨am
, 
Rﬁe
) \

149 : 
	`dés_kb_£rvî_mac_£¸ë
(
P¨am
, 
Rﬁe
))

	)

150 
	#dés_kb_loˇl_mac_£¸ë
(
P¨am
, 
Rﬁe
) \

151 ((
Rﬁe
Ë=
DTLS_CLIENT
 \

152 ? 
	`dés_kb_˛õ¡_mac_£¸ë
(
P¨am
, 
Rﬁe
) \

153 : 
	`dés_kb_£rvî_mac_£¸ë
(
P¨am
, 
Rﬁe
))

	)

154 
	#dés_kb_mac_£¸ë_size
(
P¨am
, 
Rﬁe
Ë
DTLS_MAC_KEY_LENGTH


	)

155 
	#dés_kb_˛õ¡_wrôe_key
(
P¨am
, 
Rﬁe
) \

156 (
	`dés_kb_£rvî_mac_£¸ë
(
P¨am
, 
Rﬁe
Ë+ 
DTLS_MAC_KEY_LENGTH
)

	)

157 
	#dés_kb_£rvî_wrôe_key
(
P¨am
, 
Rﬁe
) \

158 (
	`dés_kb_˛õ¡_wrôe_key
(
P¨am
, 
Rﬁe
Ë+ 
DTLS_KEY_LENGTH
)

	)

159 
	#dés_kb_ªmŸe_wrôe_key
(
P¨am
, 
Rﬁe
) \

160 ((
Rﬁe
Ë=
DTLS_SERVER
 \

161 ? 
	`dés_kb_˛õ¡_wrôe_key
(
P¨am
, 
Rﬁe
) \

162 : 
	`dés_kb_£rvî_wrôe_key
(
P¨am
, 
Rﬁe
))

	)

163 
	#dés_kb_loˇl_wrôe_key
(
P¨am
, 
Rﬁe
) \

164 ((
Rﬁe
Ë=
DTLS_CLIENT
 \

165 ? 
	`dés_kb_˛õ¡_wrôe_key
(
P¨am
, 
Rﬁe
) \

166 : 
	`dés_kb_£rvî_wrôe_key
(
P¨am
, 
Rﬁe
))

	)

167 
	#dés_kb_key_size
(
P¨am
, 
Rﬁe
Ë
DTLS_KEY_LENGTH


	)

168 
	#dés_kb_˛õ¡_iv
(
P¨am
, 
Rﬁe
) \

169 (
	`dés_kb_£rvî_wrôe_key
(
P¨am
, 
Rﬁe
Ë+ 
DTLS_KEY_LENGTH
)

	)

170 
	#dés_kb_£rvî_iv
(
P¨am
, 
Rﬁe
) \

171 (
	`dés_kb_˛õ¡_iv
(
P¨am
, 
Rﬁe
Ë+ 
DTLS_IV_LENGTH
)

	)

172 
	#dés_kb_ªmŸe_iv
(
P¨am
, 
Rﬁe
) \

173 ((
Rﬁe
Ë=
DTLS_SERVER
 \

174 ? 
	`dés_kb_˛õ¡_iv
(
P¨am
, 
Rﬁe
) \

175 : 
	`dés_kb_£rvî_iv
(
P¨am
, 
Rﬁe
))

	)

176 
	#dés_kb_loˇl_iv
(
P¨am
, 
Rﬁe
) \

177 ((
Rﬁe
Ë=
DTLS_CLIENT
 \

178 ? 
	`dés_kb_˛õ¡_iv
(
P¨am
, 
Rﬁe
) \

179 : 
	`dés_kb_£rvî_iv
(
P¨am
, 
Rﬁe
))

	)

180 
	#dés_kb_iv_size
(
P¨am
, 
Rﬁe
Ë
DTLS_IV_LENGTH


	)

182 
	#dés_kb_size
(
P¨am
, 
Rﬁe
) \

183 (2 * (
	`dés_kb_mac_£¸ë_size
(
P¨am
, 
Rﬁe
) + \

184 
	`dés_kb_key_size
(
P¨am
, 
Rﬁe
Ë+ 
	`dés_kb_iv_size
(P¨am, Rﬁe)))

	)

187 
	#dés_kb_dige°_size
(
P¨am
, 
Rﬁe
Ë
DTLS_MAC_LENGTH


	)

205 
size_t
 
dés_p_hash
(
dés_hashfunc_t
 
h
,

206 c⁄° *
key
, 
size_t
 
keyÀn
,

207 c⁄° *
œbñ
, 
size_t
 
œbñÀn
,

208 c⁄° *
øndom1
, 
size_t
 
øndom1Àn
,

209 c⁄° *
øndom2
, 
size_t
 
øndom2Àn
,

210 *
buf
, 
size_t
 
buÊí
);

217 
size_t
 
dés_¥f
(c⁄° *
key
, size_à
keyÀn
,

218 c⁄° *
œbñ
, 
size_t
 
œbñÀn
,

219 c⁄° *
øndom1
, 
size_t
 
øndom1Àn
,

220 c⁄° *
øndom2
, 
size_t
 
øndom2Àn
,

221 *
buf
, 
size_t
 
buÊí
);

239 
dés_mac
(
dés_hmac_c⁄ãxt_t
 *
hmac_˘x
,

240 c⁄° *
ªc‹d
,

241 c⁄° *
∑ckë
, 
size_t
 
Àngth
,

242 *
buf
);

264 
dés_í¸y±
(c⁄° *
§c
, 
size_t
 
Àngth
,

265 *
buf
,

266 *
noun˚
,

267 *
key
, 
size_t
 
keyÀn
,

268 c⁄° *
Ød
, 
size_t
 
Ød_Àngth
);

288 
dés_de¸y±
(c⁄° *
§c
, 
size_t
 
Àngth
,

289 *
buf
,

290 *
noun˚
,

291 *
key
, 
size_t
 
keyÀn
,

292 c⁄° *
a_d©a
, 
size_t
 
a_d©a_Àngth
);

306 
dés_psk_¥e_ma°î_£¸ë
(*
key
, 
size_t
 
keyÀn
,

307 *
ªsu…
, 
size_t
 
ªsu…_Àn
);

309 
	#DTLS_EC_KEY_SIZE
 32

	)

311 
dés_ecdh_¥e_ma°î_£¸ë
(*
¥iv_key
,

312 *
pub_key_x
,

313 *
pub_key_y
,

314 
size_t
 
key_size
,

315 *
ªsu…
,

316 
size_t
 
ªsu…_Àn
);

318 
dés_ecdß_gíî©e_key
(*
¥iv_key
,

319 *
pub_key_x
,

320 *
pub_key_y
,

321 
size_t
 
key_size
);

323 
dés_ecdß_¸óã_sig_hash
(c⁄° *
¥iv_key
, 
size_t
 
key_size
,

324 c⁄° *
sign_hash
, 
size_t
 
sign_hash_size
,

325 
uöt32_t
 
poöt_r
[9], uöt32_à
poöt_s
[9]);

327 
dés_ecdß_¸óã_sig
(c⁄° *
¥iv_key
, 
size_t
 
key_size
,

328 c⁄° *
˛õ¡_øndom
, 
size_t
 
˛õ¡_øndom_size
,

329 c⁄° *
£rvî_øndom
, 
size_t
 
£rvî_øndom_size
,

330 c⁄° *
keyx_∑øms
, 
size_t
 
keyx_∑øms_size
,

331 
uöt32_t
 
poöt_r
[9], uöt32_à
poöt_s
[9]);

333 
dés_ecdß_vîify_sig_hash
(c⁄° *
pub_key_x
,

334 c⁄° *
pub_key_y
, 
size_t
 
key_size
,

335 c⁄° *
sign_hash
, 
size_t
 
sign_hash_size
,

336 *
ªsu…_r
, *
ªsu…_s
);

338 
dés_ecdß_vîify_sig
(c⁄° *
pub_key_x
,

339 c⁄° *
pub_key_y
, 
size_t
 
key_size
,

340 c⁄° *
˛õ¡_øndom
, 
size_t
 
˛õ¡_øndom_size
,

341 c⁄° *
£rvî_øndom
, 
size_t
 
£rvî_øndom_size
,

342 c⁄° *
keyx_∑øms
, 
size_t
 
keyx_∑øms_size
,

343 *
ªsu…_r
, *
ªsu…_s
);

345 
dés_ec_key_‰om_uöt32_a¢1
(c⁄° 
uöt32_t
 *
key
, 
size_t
 
key_size
,

346 *
buf
);

349 
dés_h™dshake_∑ømëîs_t
 *
dés_h™dshake_√w
();

351 
dés_h™dshake_‰ì
(
dés_h™dshake_∑ømëîs_t
 *
h™dshake
);

353 
dés_£curôy_∑ømëîs_t
 *
dés_£curôy_√w
();

355 
dés_£curôy_‰ì
(
dés_£curôy_∑ømëîs_t
 *
£curôy
);

356 
¸y±o_öô
();

	@include_lib/net/tinydtls/dtls.h

32 #i‚de‡
_DTLS_DTLS_H_


33 
	#_DTLS_DTLS_H_


	)

35 
	~<°döt.h
>

37 
	~"t_li°.h
"

38 
	~"°©e.h
"

39 
	~"≥î.h
"

41 
	~"uthash.h
"

42 
	~"t_li°.h
"

44 
	~"Æît.h
"

45 
	~"¸y±o.h
"

46 
	~"hmac.h
"

48 
	~"globÆ.h
"

49 
	~"dés_time.h
"

51 #i‚de‡
DTLSv12


52 
	#DTLS_VERSION
 0x„f‡

	)

54 
	#DTLS_VERSION
 0x„fd

	)

57 
	edés_¸edítüls_ty≥_t
 {

58 
	mDTLS_PSK_HINT
, 
	mDTLS_PSK_IDENTITY
, 
	mDTLS_PSK_KEY


59 } 
	tdés_¸edítüls_ty≥_t
;

61 
	sdés_ecdß_key_t
 {

62 
dés_ecdh_curve
 
	mcurve
;

63 c⁄° *
	m¥iv_key
;

64 c⁄° *
	mpub_key_x
;

65 c⁄° *
	mpub_key_y
;

66 } 
	tdés_ecdß_key_t
;

69 
	#DTLS_COOKIE_SECRET_LENGTH
 12

	)

71 
	gdés_c⁄ãxt_t
;

97 (*
	m√t_wrôe
)(
dés_c⁄ãxt_t
 *
	m˘x
,

98 
£ssi⁄_t
 *
	m£ssi⁄
, 
uöt8
 *
	mbuf
, 
size_t
 
	mÀn
);

112 (*
	m√t_ªad
)(
dés_c⁄ãxt_t
 *
	m˘x
,

113 
£ssi⁄_t
 *
	m£ssi⁄
, 
uöt8
 *
	mbuf
, 
size_t
 
	mÀn
);

127 (*
	mevít
)(
dés_c⁄ãxt_t
 *
	m˘x
, 
£ssi⁄_t
 *
	m£ssi⁄
,

128 
dés_Æît_Àvñ_t
 
	mÀvñ
, 
	mcode
);

130 #ifde‡
DTLS_PSK


153 (*
	mgë_psk_öfo
)(
dés_c⁄ãxt_t
 *
	m˘x
,

154 c⁄° 
£ssi⁄_t
 *
	m£ssi⁄
,

155 
dés_¸edítüls_ty≥_t
 
	mty≥
,

156 c⁄° *
	mdesc
, 
size_t
 
	mdesc_Àn
,

157 *
	mªsu…
, 
size_t
 
	mªsu…_Àngth
);

161 #ifde‡
DTLS_ECC


182 (*
	mgë_ecdß_key
)(
dés_c⁄ãxt_t
 *
	m˘x
,

183 c⁄° 
£ssi⁄_t
 *
	m£ssi⁄
,

184 c⁄° 
dés_ecdß_key_t
 **
	mªsu…
);

212 (*
	mvîify_ecdß_key
)(
dés_c⁄ãxt_t
 *
	m˘x
,

213 c⁄° 
£ssi⁄_t
 *
	m£ssi⁄
,

214 c⁄° *
	mŸhî_pub_x
,

215 c⁄° *
	mŸhî_pub_y
,

216 
size_t
 
	mkey_size
);

218 } 
	tdés_h™dÀr_t
;

221 
	sdés_c⁄ãxt_t
 {

222 
	mcookõ_£¸ë
[
DTLS_COOKIE_SECRET_LENGTH
];

223 
˛ock_time_t
 
	mcookõ_£¸ë_age
;

225 
dés_≥î_t
 *
	m≥îs
;

227 
LIST_STRUCT
(
£ndqueue
);

229 *
	m≠p
;

231 
dés_h™dÀr_t
 *
	mh
;

233 
	mªadbuf
[
DTLS_MAX_BUF
];

234 } 
	tdés_c⁄ãxt_t
;

240 
dés_öô
();

245 
dés_c⁄ãxt_t
 *
dés_√w_c⁄ãxt
(*
≠p_d©a
);

248 
dés_‰ì_c⁄ãxt
(
dés_c⁄ãxt_t
 *
˘x
);

250 
	#dés_£t_≠p_d©a
(
CTX
,
DATA
Ë((CTX)->
≠p
 = (DATA))

	)

251 
	#dés_gë_≠p_d©a
(
CTX
Ë((CTX)->
≠p
)

	)

254 
ölöe
 
	$dés_£t_h™dÀr
(
dés_c⁄ãxt_t
 *
˘x
, 
dés_h™dÀr_t
 *
h
)

256 
˘x
->
h
 = h;

257 
	}
}

269 
dés_c⁄√˘
(
dés_c⁄ãxt_t
 *
˘x
, c⁄° 
£ssi⁄_t
 *
d°
);

281 
dés_c⁄√˘_≥î
(
dés_c⁄ãxt_t
 *
˘x
, 
dés_≥î_t
 *
≥î
);

287 
dés_˛o£
(
dés_c⁄ãxt_t
 *
˘x
, c⁄° 
£ssi⁄_t
 *
ªmŸe
);

289 
dés_ª√gŸüã
(
dés_c⁄ãxt_t
 *
˘x
, c⁄° 
£ssi⁄_t
 *
d°
);

302 
dés_wrôe
(
dés_c⁄ãxt_t
 *
˘x
, 
£ssi⁄_t
 *
£ssi⁄
,

303 
uöt8
 *
buf
, 
size_t
 
Àn
);

305 
dés_£ndto
(
dés_c⁄ãxt_t
 *
˘x
, 
uöt8
 *
buf
, 
size_t
 
Àn
, 
Êags
, c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

316 
dés_check_ªå™smô
(
dés_c⁄ãxt_t
 *
c⁄ãxt
, 
˛ock_time_t
 *
√xt
);

318 
	#DTLS_COOKIE_LENGTH
 16

	)

320 
	#DTLS_CT_CHANGE_CIPHER_SPEC
 20

	)

321 
	#DTLS_CT_ALERT
 21

	)

322 
	#DTLS_CT_HANDSHAKE
 22

	)

323 
	#DTLS_CT_APPLICATION_DATA
 23

	)

326 
__©åibuã__
((
	t__∑cked__
))

328 
uöt8
 
	gc⁄ã¡_ty≥
;

329 
uöt16
 
	gvîsi⁄
;

330 
uöt16
 
	gïoch
;

331 
uöt48
 
	g£quí˚_numbî
;

332 
uöt16
 
	gÀngth
;

335 
	tdés_ªc‹d_hódî_t
;

339 
	#DTLS_HT_HELLO_REQUEST
 0

	)

340 
	#DTLS_HT_CLIENT_HELLO
 1

	)

341 
	#DTLS_HT_SERVER_HELLO
 2

	)

342 
	#DTLS_HT_HELLO_VERIFY_REQUEST
 3

	)

343 
	#DTLS_HT_CERTIFICATE
 11

	)

344 
	#DTLS_HT_SERVER_KEY_EXCHANGE
 12

	)

345 
	#DTLS_HT_CERTIFICATE_REQUEST
 13

	)

346 
	#DTLS_HT_SERVER_HELLO_DONE
 14

	)

347 
	#DTLS_HT_CERTIFICATE_VERIFY
 15

	)

348 
	#DTLS_HT_CLIENT_KEY_EXCHANGE
 16

	)

349 
	#DTLS_HT_FINISHED
 20

	)

352 
__©åibuã__
((
	t__∑cked__
))

354 
uöt8
 
	gmsg_ty≥
;

355 
uöt24
 
	gÀngth
;

356 
uöt16
 
	gmesßge_£q
;

357 
uöt24
 
	g‰agmít_off£t
;

358 
uöt24
 
	g‰agmít_Àngth
;

361 
	tdés_h™dshake_hódî_t
;

364 
__©åibuã__
((
	t__∑cked__
))

366 
uöt16
 
	gvîsi⁄
;

367 
uöt32
 
	ggmt_øndom
;

368 
	gøndom
[28];

374 
	tdés_˛õ¡_hñlo_t
;

377 
__©åibuã__
((
	t__∑cked__
))

379 
uöt16
 
	gvîsi⁄
;

380 
uöt8
 
	gcookõ_Àngth
;

381 
uöt8
 
	gcookõ
[];

383 
	tdés_hñlo_vîify_t
;

394 
dés_ªc‹d_ªad
(
dés_°©e_t
 *
°©e
, 
uöt8
 *
msg
, 
msgÀn
);

406 
dés_h™dÀ_mesßge
(
dés_c⁄ãxt_t
 *
˘x
, 
£ssi⁄_t
 *
£ssi⁄
,

407 
uöt8
 *
msg
, 
msgÀn
);

418 
dés_≥î_t
 *
dés_gë_≥î
(c⁄° 
dés_c⁄ãxt_t
 *
c⁄ãxt
,

419 c⁄° 
£ssi⁄_t
 *
£ssi⁄
);

	@include_lib/net/tinydtls/dtls_config.h

11 
	#HAVE_ARPA_INET_H
 1

	)

14 
	#HAVE_ASSERT_H
 1

	)

17 
	#HAVE_FCNTL_H
 1

	)

20 
	#HAVE_INTTYPES_H
 1

	)

24 
	#HAVE_MALLOC
 1

	)

27 
	#HAVE_MEMORY_H
 1

	)

30 
	#HAVE_MEMSET
 1

	)

33 
	#HAVE_NETDB_H
 1

	)

36 
	#HAVE_NETINET_IN_H
 1

	)

39 
	#HAVE_SELECT
 1

	)

42 
	#HAVE_SOCKET
 1

	)

45 
	#HAVE_STDDEF_H
 1

	)

48 
	#HAVE_STDINT_H
 1

	)

51 
	#HAVE_STDLIB_H
 1

	)

54 
	#HAVE_STRDUP
 1

	)

57 
	#HAVE_STRERROR
 1

	)

60 
	#HAVE_STRINGS_H
 1

	)

63 
	#HAVE_STRING_H
 1

	)

66 
	#HAVE_SYS_PARAM_H
 1

	)

69 
	#HAVE_SYS_SOCKET_H
 1

	)

72 
	#HAVE_SYS_STAT_H
 1

	)

75 
	#HAVE_SYS_TIME_H
 1

	)

78 
	#HAVE_SYS_TYPES_H
 1

	)

81 
	#HAVE_UNISTD_H
 1

	)

84 
	#PACKAGE_BUGREPORT
 ""

	)

87 
	#PACKAGE_NAME
 "töydés"

	)

90 
	#PACKAGE_STRING
 "töydé†0.2.0"

	)

93 
	#PACKAGE_TARNAME
 "töydés"

	)

96 
	#PACKAGE_URL
 ""

	)

99 
	#PACKAGE_VERSION
 "0.2.0"

	)

102 
	#STDC_HEADERS
 1

	)

106 #i‡
deföed
 
AC_APPLE_UNIVERSAL_BUILD


107 #i‡
deföed
 
__BIG_ENDIAN__


108 
	#WORDS_BIGENDIAN
 1

	)

111 #i‚de‡
WORDS_BIGENDIAN


118 #i‚de‡
__˝lu•lus


	@include_lib/net/tinydtls/dtls_debug.h

26 #i‚de‡
_DTLS_DEBUG_H_


27 
	#_DTLS_DEBUG_H_


	)

29 
	~<°dlib.h
>

31 
	~"dés_c⁄fig.h
"

32 
	~"globÆ.h
"

33 
	~"£ssi⁄.h
"

35 
	#PRINTF
 
¥ötf


	)

37 
ölöe
 
	$check_°ack
()

39 
	}
}

41 
	g__£ssi⁄_t
;

44 íum { 
	mDTLS_LOG_EMERG
 = 0, 
	mDTLS_LOG_ALERT
, 
	mDTLS_LOG_CRIT
, 
	mDTLS_LOG_WARN
,

45 
	mDTLS_LOG_NOTICE
, 
	mDTLS_LOG_INFO
, 
	mDTLS_LOG_DEBUG


46 } 
	tlog_t
;

49 c⁄° *
dés_∑ckage_«me
();

52 c⁄° *
dés_∑ckage_vîsi⁄
();

54 #i‚de‡
NDEBUG


56 
log_t
 
dés_gë_log_Àvñ
();

59 
dés_£t_log_Àvñ
(
log_t
 
Àvñ
);

65 
d§v_log
(
log_t
 
Àvñ
, *
f‹m©
, ...);

68 
hexdump
(c⁄° *
∑ckë
, 
Àngth
);

71 
dump
(*
buf
, 
size_t
 
Àn
);

73 
dés_d§v_hexdump_log
(
log_t
 
Àvñ
, c⁄° *
«me
, c⁄° *
buf
, 
size_t
 
Àngth
, 
exãnd
);

75 
dés_d§v_log_addr
(
log_t
 
Àvñ
, c⁄° *
«me
, c⁄° 
£ssi⁄_t
 *
addr
);

79 
ölöe
 
log_t
 
	$dés_gë_log_Àvñ
()

81  
DTLS_LOG_EMERG
;

82 
	}
}

84 
ölöe
 
	$dés_£t_log_Àvñ
(
log_t
 
Àvñ
)

85 {
	}
}

87 
ölöe
 
	$d§v_log
(
log_t
 
Àvñ
, *
f‹m©
, ...)

88 {
	}
}

90 
ölöe
 
	$hexdump
(c⁄° *
∑ckë
, 
Àngth
)

91 {
	}
}

93 
ölöe
 
	$dump
(*
buf
, 
size_t
 
Àn
)

94 {
	}
}

96 
ölöe
 

97 
	$dés_d§v_hexdump_log
(
log_t
 
Àvñ
, c⁄° *
«me
, c⁄° *
buf
, 
size_t
 
Àngth
, 
exãnd
)

98 {
	}
}

100 
ölöe
 

101 
	$dés_d§v_log_addr
(
log_t
 
Àvñ
, c⁄° *
«me
, c⁄° 
__£ssi⁄_t
 *
addr
)

102 {
	}
}

107 
	#dés_emîg
(...Ë
	`d§v_log
(
DTLS_LOG_EMERG
, 
__VA_ARGS__
)

	)

108 
	#dés_Æît
(...Ë
	`d§v_log
(
DTLS_LOG_ALERT
, 
__VA_ARGS__
)

	)

109 
	#dés_¸ô
(...Ë
	`d§v_log
(
DTLS_LOG_CRIT
, 
__VA_ARGS__
)

	)

110 
	#dés_w¨n
(...Ë
	`d§v_log
(
DTLS_LOG_WARN
, 
__VA_ARGS__
)

	)

111 
	#dés_nŸi˚
(...Ë
	`d§v_log
(
DTLS_LOG_NOTICE
, 
__VA_ARGS__
)

	)

112 
	#dés_öfo
(...Ë
	`d§v_log
(
DTLS_LOG_INFO
, 
__VA_ARGS__
)

	)

113 
	#dés_debug
(...Ë
	`d§v_log
(
DTLS_LOG_DEBUG
, 
__VA_ARGS__
)

	)

114 
	#dés_debug_hexdump
(
«me
, 
buf
, 
Àngth
Ë
	`dés_d§v_hexdump_log
(
DTLS_LOG_DEBUG
,Çame, buf,Üígth, 1)

	)

115 
	#dés_debug_dump
(
«me
, 
buf
, 
Àngth
Ë
	`dés_d§v_hexdump_log
(
DTLS_LOG_DEBUG
,Çame, buf,Üígth, 0)

	)

	@include_lib/net/tinydtls/dtls_time.h

31 #i‚de‡
_DTLS_DTLS_TIME_H_


32 
	#_DTLS_DTLS_TIME_H_


	)

34 
	~<°döt.h
>

35 
	~<sys/time.h
>

37 
	~"töydés.h
"

46 
	~<time.h
>

48 #i‚de‡
CLOCK_SECOND


49 
	#CLOCK_SECOND
 100

	)

52 
uöt32_t
 
	t˛ock_time_t
;

54 
˛ock_time_t
 
	tdés_tick_t
;

56 #i‚de‡
DTLS_TICKS_PER_SECOND


57 
	#DTLS_TICKS_PER_SECOND
 
CLOCK_SECOND


	)

60 
dés_˛ock_öô
();

61 
dés_ticks
(
dés_tick_t
 *
t
);

	@include_lib/net/tinydtls/ecc/ecc.h

38 
	~<öây≥s.h
>

40 
	#keyLígthInByãs
 32

	)

41 
	#¨øyLígth
 8

	)

43 c⁄° 
uöt32_t
 
ecc_g_poöt_x
[8];

44 c⁄° 
uöt32_t
 
ecc_g_poöt_y
[8];

47 
ecc_ec_mu…
(c⁄° 
uöt32_t
 *
px
, c⁄° uöt32_à*
py
, c⁄° uöt32_à*
£¸ë
, uöt32_à*
ªsu…x
, uöt32_à*
ªsu…y
);

49 
ölöe
 
	$ecc_ecdh
(c⁄° 
uöt32_t
 *
px
, c⁄° uöt32_à*
py
, c⁄° uöt32_à*
£¸ë
, uöt32_à*
ªsu…x
, uöt32_à*
ªsu…y
)

51 
	`ecc_ec_mu…
(
px
, 
py
, 
£¸ë
, 
ªsu…x
, 
ªsu…y
);

52 
	}
}

53 
ecc_ecdß_vÆid©e
(c⁄° 
uöt32_t
 *
x
, c⁄° uöt32_à*
y
, c⁄° uöt32_à*
e
, c⁄° uöt32_à*
r
, c⁄° uöt32_à*
s
);

54 
ecc_ecdß_sign
(c⁄° 
uöt32_t
 *
d
, c⁄° uöt32_à*
e
, c⁄° uöt32_à*
k
, uöt32_à*
r
, uöt32_à*
s
);

56 
ecc_is_vÆid_key
(c⁄° 
uöt32_t
 *
¥iv_key
);

57 
ölöe
 
	$ecc_gí_pub_key
(c⁄° 
uöt32_t
 *
¥iv_key
, uöt32_à*
pub_x
, uöt32_à*
pub_y
)

59 
	`ecc_ec_mu…
(
ecc_g_poöt_x
, 
ecc_g_poöt_y
, 
¥iv_key
, 
pub_x
, 
pub_y
);

60 
	}
}

62 #ifde‡
TEST_INCLUDE


64 
ecc_ec_add
(c⁄° 
uöt32_t
 *
px
, c⁄° uöt32_à*
py
, c⁄° uöt32_à*
qx
, c⁄° uöt32_à*
qy
, uöt32_à*
Sx
, uöt32_à*
Sy
);

65 
ecc_ec_doubÀ
(c⁄° 
uöt32_t
 *
px
, c⁄° uöt32_à*
py
, uöt32_à*
Dx
, uöt32_à*
Dy
);

68 
uöt32_t
 
ecc_add
(c⁄° uöt32_à*
x
, c⁄° uöt32_à*
y
, uöt32_à*
ªsu…
, 
uöt8_t
 
Àngth
);

69 
uöt32_t
 
ecc_sub
(c⁄° uöt32_à*
x
, c⁄° uöt32_à*
y
, uöt32_à*
ªsu…
, 
uöt8_t
 
Àngth
);

72 
ecc_fõldAdd
(c⁄° 
uöt32_t
 *
x
, c⁄° uöt32_à*
y
, c⁄° uöt32_à*
ªdu˚r
, uöt32_à*
ªsu…
);

73 
ecc_fõldSub
(c⁄° 
uöt32_t
 *
x
, c⁄° uöt32_à*
y
, c⁄° uöt32_à*
modulus
, uöt32_à*
ªsu…
);

74 
ecc_fõldMu…
(c⁄° 
uöt32_t
 *
x
, c⁄° uöt32_à*
y
, uöt32_à*
ªsu…
, 
uöt8_t
 
Àngth
);

75 
ecc_fõldModP
(
uöt32_t
 *
A
, c⁄° uöt32_à*
B
);

76 
ecc_fõldModO
(c⁄° 
uöt32_t
 *
A
, uöt32_à*
ªsu…
, 
uöt8_t
 
Àngth
);

77 
ecc_fõldInv
(c⁄° 
uöt32_t
 *
A
, c⁄° uöt32_à*
modulus
, c⁄° uöt32_à*
ªdu˚r
, uöt32_à*
B
);

80 
ecc_c›y
(c⁄° 
uöt32_t
 *
‰om
, uöt32_à*
to
, 
uöt8_t
 
Àngth
);

81 
ecc_isSame
(c⁄° 
uöt32_t
 *
A
, c⁄° uöt32_à*
B
, 
uöt8_t
 
Àngth
);

82 
ecc_£tZîo
(
uöt32_t
 *
A
, c⁄° 
Àngth
);

83 
ecc_isO√
(c⁄° 
uöt32_t
 *
A
);

84 
ecc_rshi·
(
uöt32_t
 *
A
);

85 
ecc_isGª©î
(c⁄° 
uöt32_t
 *
A
, c⁄° uöt32_à*
B
, 
uöt8_t
 
Àngth
);

	@include_lib/net/tinydtls/ecc/test_helper.h

38 
	~<öây≥s.h
>

40 c⁄° 
uöt32_t
 
ecc_¥ime_m
[8];

41 c⁄° 
uöt32_t
 
ecc_¥ime_r
[8];

44 
ecc_¥ötNumbî
(c⁄° 
uöt32_t
 *
x
, 
numbîLígth
);

45 
ecc_£tR™dom
(
uöt32_t
 *
£¸ë
);

47 #ifde‡
CONTIKI


48 #unde‡
as£π


49 
	#as£π
(
e
Ë(”Ë? ()0 : 
	`ã°_as£π
(
__FILE__
, 
__LINE__
))

	)

50 
ã°_as£π
(const *, );

	@include_lib/net/tinydtls/global.h

26 #i‚de‡
_DTLS_GLOBAL_H_


27 
	#_DTLS_GLOBAL_H_


	)

29 
	~<°dlib.h
>

30 
	~<sys/ty≥s.h
>

32 
	~"töydés.h
"

34 #i‚de‡
DTLSv12


36 
	#DTLSv12
 1

	)

39 #i‚de‡
WITH_SHA256


42 
	#WITH_SHA256
 1

	)

47 
	tuöt8
;

48 
	tuöt16
[2];

49 
	tuöt24
[3];

50 
	tuöt32
[4];

51 
	tuöt48
[6];

53 #i‚de‡
DTLS_MAX_BUF


57 
	#DTLS_MAX_BUF
 1400

	)

60 #i‚de‡
DTLS_DEFAULT_MAX_RETRANSMIT


62 
	#DTLS_DEFAULT_MAX_RETRANSMIT
 7

	)

67 
	mTLS_NULL_WITH_NULL_NULL
 = 0x0000,

68 
	mTLS_PSK_WITH_AES_128_CCM_8
 = 0xC0A8,

69 
	mTLS_ECDHE_ECDSA_WITH_AES_128_CCM_8
 = 0xC0AE

70 } 
	tdés_cùhî_t
;

74 
	mTLS_COMPRESSION_NULL
 = 0x0000

75 } 
	tdés_com¥essi⁄_t
;

77 
	#TLS_EXT_ELLIPTIC_CURVES
 10

	)

78 
	#TLS_EXT_EC_POINT_FORMATS
 11

	)

79 
	#TLS_EXT_SIG_HASH_ALGO
 13

	)

80 
	#TLS_EXT_CLIENT_CERTIFICATE_TYPE
 19

	)

81 
	#TLS_EXT_SERVER_CERTIFICATE_TYPE
 20

	)

82 
	#TLS_EXT_ENCRYPT_THEN_MAC
 22

	)

84 
	#TLS_CERT_TYPE_RAW_PUBLIC_KEY
 2

	)

86 
	#TLS_EXT_ELLIPTIC_CURVES_SECP256R1
 23

	)

88 
	#TLS_EXT_EC_POINT_FORMATS_UNCOMPRESSED
 0

	)

90 
	#TLS_EC_CURVE_TYPE_NAMED_CURVE
 3

	)

92 
	#TLS_CLIENT_CERTIFICATE_TYPE_ECDSA_SIGN
 64

	)

94 
	#TLS_EXT_SIG_HASH_ALGO_SHA256
 4

	)

95 
	#TLS_EXT_SIG_HASH_ALGO_ECDSA
 3

	)

100 
ölöe
 

101 
	$memx‹
(*
x
, c⁄° *
y
, 
size_t
 
n
)

103 
n
--) {

104 *
x
 ^*
y
;

105 
x
++;

106 
y
++;

108 
	}
}

120 
ölöe
 

121 
	$equÆs
(*
a
, *
b
, 
size_t
 
Àn
)

123 
ªsu…
 = 1;

124 
Àn
--) {

125 
ªsu…
 &(*
a
++ =*
b
++);

127  
ªsu…
;

128 
	}
}

130 #ifde‡
HAVE_FLS


131 
	#dés_Ês
(
i
Ë
	`Ês
(i)

	)

133 
ölöe
 

134 
	$dés_Ês
(
i
)

136 
n
;

137 
n
 = 0; 
i
;Ç++) {

138 
i
 >>= 1;

140  
n
;

141 
	}
}

	@include_lib/net/tinydtls/hmac.h

26 #i‚de‡
_DTLS_HMAC_H_


27 
	#_DTLS_HMAC_H_


	)

29 
	~<sys/ty≥s.h
>

31 
	~"globÆ.h
"

33 #ifde‡
WITH_SHA256


36 
	~"sha2/sha2.h
"

38 
SHA256_CTX
 
	tdés_hash_˘x
;

39 
dés_hash_˘x
 *
	tdés_hash_t
;

40 
	#DTLS_HASH_CTX_SIZE
 (
SHA256_CTX
)

	)

42 
ölöe
 

43 
	$dés_hash_öô
(
dés_hash_t
 
˘x
)

45 
	`SHA256_Inô
((
SHA256_CTX
 *)
˘x
);

46 
	}
}

48 
ölöe
 

49 
	$dés_hash_upd©e
(
dés_hash_t
 
˘x
, c⁄° *
öput
, 
size_t
 
Àn
)

51 
	`SHA256_Upd©e
((
SHA256_CTX
 *)
˘x
, 
öput
, 
Àn
);

52 
	}
}

54 
ölöe
 
size_t


55 
	$dés_hash_föÆize
(*
buf
, 
dés_hash_t
 
˘x
)

59 
	`SHA256_FöÆ
(
buf
, (
SHA256_CTX
 *)
˘x
);

60  
SHA256_DIGEST_LENGTH
;

61 
	}
}

64 #ifde‡
WITH_SHA1


69 
	~"mbedés/sha1.h
"

71 
mbedés_sha1_c⁄ãxt
 
	tdés_hash_˘x
;

72 
dés_hash_˘x
 *
	tdés_hash_t
;

73 
	#DTLS_HASH_CTX_SIZE
 (
mbedés_sha1_c⁄ãxt
)

	)

75 
ölöe
 

76 
	$dés_hash_öô
(
dés_hash_t
 
˘x
)

79 
	`mbedés_sha1_öô
(
˘x
);

80 
	}
}

82 
ölöe
 

83 
	$dés_hash_upd©e
(
dés_hash_t
 
˘x
, c⁄° *
öput
, 
size_t
 
Àn
)

86 
	`mbedés_sha1_upd©e
((
mbedés_sha1_c⁄ãxt
 *)
˘x
, 
öput
, 
Àn
);

87 
	}
}

89 
ölöe
 
size_t


90 
	$dés_hash_föÆize
(*
buf
, 
dés_hash_t
 
˘x
)

93 
	`mbedés_sha1_föish
((
mbedés_sha1_c⁄ãxt
 *)
˘x
, 
buf
);

94  
SHA1_DIGEST_LENGTH
;

95 
	}
}

99 
ölöe
 
	$dés_hmac_°‹age_öô
()

100 { 
	}
}

109 
	#DTLS_HMAC_BLOCKSIZE
 64

	)

110 
	#DTLS_HMAC_DIGEST_SIZE
 32

	)

111 
	#DTLS_HMAC_MAX
 64

	)

120 
	mHASH_NONE
 = 0, 
	mHASH_MD5
 = 1, 
	mHASH_SHA1
 = 2, 
	mHASH_SHA224
 = 3,

121 
	mHASH_SHA256
 = 4, 
	mHASH_SHA384
 = 5, 
	mHASH_SHA512
 = 6

122 } 
	tdés_hashfunc_t
;

132 
	m∑d
[
DTLS_HMAC_BLOCKSIZE
];

133 
dés_hash_˘x
 
	md©a
;

134 } 
	tdés_hmac_c⁄ãxt_t
;

143 
dés_hmac_öô
(
dés_hmac_c⁄ãxt_t
 *
˘x
, c⁄° *
key
, 
size_t
 
kÀn
);

155 
dés_hmac_c⁄ãxt_t
 *
dés_hmac_√w
(c⁄° *
key
, 
size_t
 
kÀn
);

163 
dés_hmac_‰ì
(
dés_hmac_c⁄ãxt_t
 *
˘x
);

172 
dés_hmac_upd©e
(
dés_hmac_c⁄ãxt_t
 *
˘x
,

173 c⁄° *
öput
, 
size_t
 
ûí
);

186 
dés_hmac_föÆize
(
dés_hmac_c⁄ãxt_t
 *
˘x
, *
ªsu…
);

	@include_lib/net/tinydtls/netq.h

9 #i‚de‡
_DTLS_NETQ_H_


10 
	#_DTLS_NETQ_H_


	)

12 
	~"töydés.h
"

13 
	~"globÆ.h
"

14 
	~"dés.h
"

15 
	~"dés_time.h
"

25 #i‚de‡
NETQ_MAXCNT


26 #ifde‡
DTLS_ECC


27 
	#NETQ_MAXCNT
 5

	)

28 #ñi‡
deföed
(
DTLS_PSK
)

29 
	#NETQ_MAXCNT
 3

	)

36 
	t√tq_∑ckë_t
[
DTLS_MAX_BUF
];

38 
	s√tq_t
 {

39 
√tq_t
 *
	m√xt
;

41 
˛ock_time_t
 
	mt
;

42 
	mtimeout
;

44 
dés_≥î_t
 *
	m≥î
;

45 
uöt16_t
 
	mïoch
;

46 
uöt8_t
 
	mty≥
;

47 
	mªå™smô_˙t
;

49 
size_t
 
	mÀngth
;

51 
	md©a
[];

52 } 
	t√tq_t
;

54 
ölöe
 
	$√tq_öô
()

55 { 
	}
}

66 
√tq_ö£π_node
(
li°_t
 
queue
, 
√tq_t
 *
node
);

70 
√tq_node_‰ì
(
√tq_t
 *
node
);

73 
√tq_dñëe_Æl
(
li°_t
 
queue
);

76 
√tq_t
 *
√tq_node_√w
(
size_t
 
size
);

82 
√tq_t
 *
√tq_hód
(
li°_t
 
queue
);

84 
√tq_t
 *
√tq_√xt
“ëq_à*
p
);

85 
√tq_ªmove
(
li°_t
 
queue
, 
√tq_t
 *
p
);

92 
√tq_t
 *
√tq_p›_fú°
(
li°_t
 
queue
);

	@include_lib/net/tinydtls/numeric.h

26 #i‚de‡
_DTLS_NUMERIC_H_


27 
	#_DTLS_NUMERIC_H_


	)

29 
	~<°döt.h
>

31 #i‚de‡
mö


32 
	#mö
(
A
,
B
Ë((AË<(BË? (AË: (B))

	)

35 #i‚de‡
max


36 
	#max
(
A
,
B
Ë((AË< (BË? (BË: (A))

	)

40 
ölöe
 
	$dés_öt_to_uöt8
(*
fõld
, 
uöt8_t
 
vÆue
)

42 
fõld
[0] = 
vÆue
 & 0xff;

44 
	}
}

46 
ölöe
 
	$dés_öt_to_uöt16
(*
fõld
, 
uöt16_t
 
vÆue
)

48 
fõld
[0] = (
vÆue
 >> 8) & 0xff;

49 
fõld
[1] = 
vÆue
 & 0xff;

51 
	}
}

53 
ölöe
 
	$dés_öt_to_uöt24
(*
fõld
, 
uöt32_t
 
vÆue
)

55 
fõld
[0] = (
vÆue
 >> 16) & 0xff;

56 
fõld
[1] = (
vÆue
 >> 8) & 0xff;

57 
fõld
[2] = 
vÆue
 & 0xff;

59 
	}
}

61 
ölöe
 
	$dés_öt_to_uöt32
(*
fõld
, 
uöt32_t
 
vÆue
)

63 
fõld
[0] = (
vÆue
 >> 24) & 0xff;

64 
fõld
[1] = (
vÆue
 >> 16) & 0xff;

65 
fõld
[2] = (
vÆue
 >> 8) & 0xff;

66 
fõld
[3] = 
vÆue
 & 0xff;

68 
	}
}

70 
ölöe
 
	$dés_öt_to_uöt48
(*
fõld
, 
uöt64_t
 
vÆue
)

72 
fõld
[0] = (
vÆue
 >> 40) & 0xff;

73 
fõld
[1] = (
vÆue
 >> 32) & 0xff;

74 
fõld
[2] = (
vÆue
 >> 24) & 0xff;

75 
fõld
[3] = (
vÆue
 >> 16) & 0xff;

76 
fõld
[4] = (
vÆue
 >> 8) & 0xff;

77 
fõld
[5] = 
vÆue
 & 0xff;

79 
	}
}

81 
ölöe
 
	$dés_öt_to_uöt64
(*
fõld
, 
uöt64_t
 
vÆue
)

83 
fõld
[0] = (
vÆue
 >> 56) & 0xff;

84 
fõld
[1] = (
vÆue
 >> 48) & 0xff;

85 
fõld
[2] = (
vÆue
 >> 40) & 0xff;

86 
fõld
[3] = (
vÆue
 >> 32) & 0xff;

87 
fõld
[4] = (
vÆue
 >> 24) & 0xff;

88 
fõld
[5] = (
vÆue
 >> 16) & 0xff;

89 
fõld
[6] = (
vÆue
 >> 8) & 0xff;

90 
fõld
[7] = 
vÆue
 & 0xff;

92 
	}
}

94 
ölöe
 
uöt8_t
 
	$dés_uöt8_to_öt
(c⁄° *
fõld
)

96  (
uöt8_t
)
fõld
[0];

97 
	}
}

99 
ölöe
 
uöt16_t
 
	$dés_uöt16_to_öt
(c⁄° *
fõld
)

101  ((
uöt16_t
)
fõld
[0] << 8)

102 | (
uöt16_t
)
fõld
[1];

103 
	}
}

105 
ölöe
 
uöt32_t
 
	$dés_uöt24_to_öt
(c⁄° *
fõld
)

107  ((
uöt32_t
)
fõld
[0] << 16)

108 | ((
uöt32_t
)
fõld
[1] << 8)

109 | (
uöt32_t
)
fõld
[2];

110 
	}
}

112 
ölöe
 
uöt32_t
 
	$dés_uöt32_to_öt
(c⁄° *
fõld
)

114  ((
uöt32_t
)
fõld
[0] << 24)

115 | ((
uöt32_t
)
fõld
[1] << 16)

116 | ((
uöt32_t
)
fõld
[2] << 8)

117 | (
uöt32_t
)
fõld
[3];

118 
	}
}

120 
ölöe
 
uöt64_t
 
	$dés_uöt48_to_öt
(c⁄° *
fõld
)

122  ((
uöt64_t
)
fõld
[0] << 40)

123 | ((
uöt64_t
)
fõld
[1] << 32)

124 | ((
uöt64_t
)
fõld
[2] << 24)

125 | ((
uöt64_t
)
fõld
[3] << 16)

126 | ((
uöt64_t
)
fõld
[4] << 8)

127 | (
uöt64_t
)
fõld
[5];

128 
	}
}

130 
ölöe
 
uöt64_t
 
	$dés_uöt64_to_öt
(c⁄° *
fõld
)

132  ((
uöt64_t
)
fõld
[0] << 56)

133 | ((
uöt64_t
)
fõld
[1] << 48)

134 | ((
uöt64_t
)
fõld
[2] << 40)

135 | ((
uöt64_t
)
fõld
[3] << 32)

136 | ((
uöt64_t
)
fõld
[4] << 24)

137 | ((
uöt64_t
)
fõld
[5] << 16)

138 | ((
uöt64_t
)
fõld
[6] << 8)

139 | (
uöt64_t
)
fõld
[7];

140 
	}
}

	@include_lib/net/tinydtls/peer.h

31 #i‚de‡
_DTLS_PEER_H_


32 
	#_DTLS_PEER_H_


	)

34 
	~<sys/ty≥s.h
>

36 
	~"töydés.h
"

37 
	~"globÆ.h
"

38 
	~"£ssi⁄.h
"

40 
	~"°©e.h
"

41 
	~"¸y±o.h
"

44 
	~"uthash.h
"

47 íum { 
	mDTLS_CLIENT
 = 0, 
	mDTLS_SERVER
 } 
	tdés_≥î_ty≥
;

52 
	sdés_≥î_t
 {

53 
UT_hash_h™dÀ
 
	mhh
;

55 
£ssi⁄_t
 
	m£ssi⁄
;

57 
dés_≥î_ty≥
 
	mrﬁe
;

58 
dés_°©e_t
 
	m°©e
;

60 
dés_£curôy_∑ømëîs_t
 *
	m£curôy_∑øms
[2];

61 
dés_h™dshake_∑ømëîs_t
 *
	mh™dshake_∑øms
;

62 } 
	tdés_≥î_t
;

64 
ölöe
 
dés_£curôy_∑ømëîs_t
 *
	$dés_£curôy_∑øms_ïoch
(
dés_≥î_t
 *
≥î
, 
uöt16_t
 
ïoch
)

66 i‡(
≥î
->
£curôy_∑øms
[0] &&Öìr->£curôy_∑øms[0]->
ïoch
 ==Époch) {

67  
≥î
->
£curôy_∑øms
[0];

68 } i‡(
≥î
->
£curôy_∑øms
[1] &&Öìr->£curôy_∑øms[1]->
ïoch
 ==Époch) {

69  
≥î
->
£curôy_∑øms
[1];

71  
NULL
;

73 
	}
}

75 
ölöe
 
dés_£curôy_∑ømëîs_t
 *
	$dés_£curôy_∑øms
(
dés_≥î_t
 *
≥î
)

77  
≥î
->
£curôy_∑øms
[0];

78 
	}
}

80 
ölöe
 
dés_£curôy_∑ømëîs_t
 *
	$dés_£curôy_∑øms_√xt
(
dés_≥î_t
 *
≥î
)

82 i‡(
≥î
->
£curôy_∑øms
[1]) {

83 
	`dés_£curôy_‰ì
(
≥î
->
£curôy_∑øms
[1]);

86 
≥î
->
£curôy_∑øms
[1] = 
	`dés_£curôy_√w
();

87 i‡(!
≥î
->
£curôy_∑øms
[1]) {

88  
NULL
;

90 
≥î
->
£curôy_∑øms
[1]->
ïoch
 =Öeer->security_params[0]->epoch + 1;

91  
≥î
->
£curôy_∑øms
[1];

92 
	}
}

94 
ölöe
 
	$dés_£curôy_∑øms_‰ì_Ÿhî
(
dés_≥î_t
 *
≥î
)

96 
dés_£curôy_∑ømëîs_t
 *
£curôy0
 = 
≥î
->
£curôy_∑øms
[0];

97 
dés_£curôy_∑ømëîs_t
 *
£curôy1
 = 
≥î
->
£curôy_∑øms
[1];

99 i‡(!
£curôy0
 || !
£curôy1
 || securôy0->
ïoch
 < security1->epoch) {

103 
	`dés_£curôy_‰ì
(
£curôy1
);

104 
≥î
->
£curôy_∑øms
[1] = 
NULL
;

105 
	}
}

107 
ölöe
 
	$dés_£curôy_∑øms_swôch
(
dés_≥î_t
 *
≥î
)

109 
dés_£curôy_∑ømëîs_t
 *
£curôy
 = 
≥î
->
£curôy_∑øms
[1];

111 
≥î
->
£curôy_∑øms
[1] =Öeer->security_params[0];

112 
≥î
->
£curôy_∑øms
[0] = 
£curôy
;

113 
	}
}

115 
≥î_öô
();

128 
dés_≥î_t
 *
dés_√w_≥î
(c⁄° 
£ssi⁄_t
 *
£ssi⁄
);

131 
dés_‰ì_≥î
(
dés_≥î_t
 *
≥î
);

134 
ölöe
 
dés_°©e_t
 
	$dés_≥î_°©e
(c⁄° 
dés_≥î_t
 *
≥î
)

136  
≥î
->
°©e
;

137 
	}
}

143 
ölöe
 
	$dés_≥î_is_c⁄√˘ed
(c⁄° 
dés_≥î_t
 *
≥î
)

145  
≥î
->
°©e
 =
DTLS_STATE_CONNECTED
;

146 
	}
}

	@include_lib/net/tinydtls/platform-specific/config-cc2538dk.h

1 
	#BYTE_ORDER
 1234

	)

2 
	#HAVE_ASSERT_H
 1

	)

	@include_lib/net/tinydtls/platform-specific/config-econotag.h

1 
	#BYTE_ORDER
 1234

	)

2 
	#HAVE_ASSERT_H
 1

	)

	@include_lib/net/tinydtls/platform-specific/config-minimal-net.h

1 
	#HAVE_ASSERT_H
 1

	)

	@include_lib/net/tinydtls/platform-specific/config-sky.h

1 
	#BYTE_ORDER
 1234

	)

2 
	#HAVE_ASSERT_H
 1

	)

3 
	tssize_t
;

	@include_lib/net/tinydtls/platform-specific/config-wismote.h

1 
	#HAVE_ASSERT_H
 1

	)

	@include_lib/net/tinydtls/platform-specific/platform.h

5 #i‚de‡
_PLATFORM_H_


6 
	#_PLATFORM_H_
 1

	)

8 #ifde‡
CONTIKI


9 
	~"c⁄tiki.h
"

10 
	~"c⁄tiki-lib.h
"

11 
	~"c⁄tiki-√t.h
"

13 
	~"c⁄tiki-c⁄f.h
"

16 #i‚de‡
DTLS_PEER_MAX


18 
	#DTLS_PEER_MAX
 1

	)

21 #i‚de‡
DTLS_HANDSHAKE_MAX


23 
	#DTLS_HANDSHAKE_MAX
 1

	)

26 #i‚de‡
DTLS_SECURITY_MAX


28 
	#DTLS_SECURITY_MAX
 (
DTLS_PEER_MAX
 + 
DTLS_HANDSHAKE_MAX
)

	)

31 #i‚de‡
DTLS_HASH_MAX


33 
	#DTLS_HASH_MAX
 (3 * 
DTLS_PEER_MAX
)

	)

40 #i‡
CONTIKI_TARGET_ECONOTAG


41 
	~"∂©f‹m-•ecific/c⁄fig-ec⁄Ÿag.h
"

44 #ifde‡
CONTIKI_TARGET_CC2538DK


45 
	~"∂©f‹m-•ecific/c⁄fig-cc2538dk.h
"

48 #ifde‡
CONTIKI_TARGET_WISMOTE


49 
	~"∂©f‹m-•ecific/c⁄fig-wismŸe.h
"

52 #ifde‡
CONTIKI_TARGET_SKY


53 
	~"∂©f‹m-•ecific/c⁄fig-sky.h
"

56 #ifde‡
CONTIKI_TARGET_MINIMAL_NET


57 
	~"∂©f‹m-•ecific/c⁄fig-möimÆ-√t.h
"

	@include_lib/net/tinydtls/prng.h

14 #i‚de‡
_DTLS_PRNG_H_


15 
	#_DTLS_PRNG_H_


	)

17 
	~"töydés.h
"

24 
	~<°dlib.h
>

31 
ölöe
 

32 
	$dés_¥ng
(*
buf
, 
size_t
 
Àn
)

34 
Àn
--) {

35 *
buf
++ = 
	`ønd
() & 0xFF;

38 
	}
}

40 
ölöe
 

41 
	$dés_¥ng_öô
(
£ed
)

43 
	`§™d
(
£ed
);

44 
	}
}

	@include_lib/net/tinydtls/session.h

26 #i‚de‡
_DTLS_SESSION_H_


27 
	#_DTLS_SESSION_H_


	)

29 
	~<°rög.h
>

31 
	~"töydés.h
"

32 
	~"globÆ.h
"

33 
	~<°döt.h
>

34 
	~<lwù/sockës.h
>

35 
	~<lwù/√tdb.h
>

38 
sockÀn_t
 
	msize
;

40 
sockaddr
 
	mß
;

41 
sockaddr_°‹age
 
	m°
;

42 
sockaddr_ö
 
	msö
;

43 #i‡
LWIP_IPV6


44 
sockaddr_ö6
 
	msö6
;

46 } 
	maddr
;

47 
uöt8_t
 
	mifödex
;

48 } 
	t£ssi⁄_t
;

57 
dés_£ssi⁄_öô
(
£ssi⁄_t
 *
£ss
);

63 
dés_£ssi⁄_equÆs
(c⁄° 
£ssi⁄_t
 *
a
, c⁄° sessi⁄_à*
b
);

	@include_lib/net/tinydtls/sha2/sha2.h

35 #i‚de‡
__SHA2_H__


36 
	#__SHA2_H__


	)

38 #ifde‡
__˝lu•lus


42 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

43 
	#SHA2_USE_MEMSET_MEMCPY
 1

	)

46 
	#SHA2_GET_LE32
(
a
Ë((((
u_öt32_t
) (a)[3]) << 24) | (((u_int32_t) (a)[2]) << 16) | \

47 (((
u_öt32_t
Ë(
a
)[1]Ë<< 8Ë| ((u_öt32_tË◊)[0]))

	)

54 
	~<sys/ty≥s.h
>

56 #ifde‡
SHA2_USE_INTTYPES_H


58 
	~<öây≥s.h
>

64 
	#SHA1_BLOCK_LENGTH
 64

	)

65 
	#SHA1_DIGEST_LENGTH
 20

	)

66 
	#SHA256_BLOCK_LENGTH
 64

	)

67 
	#SHA256_DIGEST_LENGTH
 32

	)

68 
	#SHA256_DIGEST_STRING_LENGTH
 (
SHA256_DIGEST_LENGTH
 * 2 + 1)

	)

69 
	#SHA384_BLOCK_LENGTH
 128

	)

70 
	#SHA384_DIGEST_LENGTH
 48

	)

71 
	#SHA384_DIGEST_STRING_LENGTH
 (
SHA384_DIGEST_LENGTH
 * 2 + 1)

	)

72 
	#SHA512_BLOCK_LENGTH
 128

	)

73 
	#SHA512_DIGEST_LENGTH
 64

	)

74 
	#SHA512_DIGEST_STRING_LENGTH
 (
SHA512_DIGEST_LENGTH
 * 2 + 1)

	)

83 
	tu_öt8_t
;

84 
	tu_öt32_t
;

85 
	tu_öt64_t
;

103 #ifde‡
SHA2_USE_INTTYPES_H


105 
	s_SHA256_CTX
 {

106 
uöt32_t
 
°©e
[8];

107 
uöt64_t
 
bôcou¡
;

108 
uöt8_t
 
buf„r
[
SHA256_BLOCK_LENGTH
];

109 } 
	tSHA256_CTX
;

110 
	s_SHA512_CTX
 {

111 
uöt64_t
 
°©e
[8];

112 
uöt64_t
 
bôcou¡
[2];

113 
uöt8_t
 
buf„r
[
SHA512_BLOCK_LENGTH
];

114 } 
	tSHA512_CTX
;

118 
	s_SHA256_CTX
 {

119 
u_öt32_t
 
°©e
[8];

120 
u_öt64_t
 
bôcou¡
;

121 
u_öt8_t
 
buf„r
[
SHA256_BLOCK_LENGTH
];

122 } 
	tSHA256_CTX
;

123 
	s_SHA512_CTX
 {

124 
u_öt64_t
 
°©e
[8];

125 
u_öt64_t
 
bôcou¡
[2];

126 
u_öt8_t
 
buf„r
[
SHA512_BLOCK_LENGTH
];

127 } 
	tSHA512_CTX
;

131 
SHA512_CTX
 
	tSHA384_CTX
;

135 #i‚de‡
NOPROTO


136 #ifde‡
SHA2_USE_INTTYPES_H


138 #ifde‡
WITH_SHA256


139 
SHA256_Inô
(
SHA256_CTX
 *);

140 
SHA256_Upd©e
(
SHA256_CTX
 *, c⁄° 
uöt8_t
 *, 
size_t
);

141 
SHA256_FöÆ
(
uöt8_t
[
SHA256_DIGEST_LENGTH
], 
SHA256_CTX
 *);

142 *
SHA256_End
(
SHA256_CTX
 *, [
SHA256_DIGEST_STRING_LENGTH
]);

143 *
SHA256_D©a
(c⁄° 
uöt8_t
 *, 
size_t
, [
SHA256_DIGEST_STRING_LENGTH
]);

146 #ifde‡
WITH_SHA384


147 
SHA384_Inô
(
SHA384_CTX
 *);

148 
SHA384_Upd©e
(
SHA384_CTX
 *, c⁄° 
uöt8_t
 *, 
size_t
);

149 
SHA384_FöÆ
(
uöt8_t
[
SHA384_DIGEST_LENGTH
], 
SHA384_CTX
 *);

150 *
SHA384_End
(
SHA384_CTX
 *, [
SHA384_DIGEST_STRING_LENGTH
]);

151 *
SHA384_D©a
(c⁄° 
uöt8_t
 *, 
size_t
, [
SHA384_DIGEST_STRING_LENGTH
]);

154 #ifde‡
WITH_SHA512


155 
SHA512_Inô
(
SHA512_CTX
 *);

156 
SHA512_Upd©e
(
SHA512_CTX
 *, c⁄° 
uöt8_t
 *, 
size_t
);

157 
SHA512_FöÆ
(
uöt8_t
[
SHA512_DIGEST_LENGTH
], 
SHA512_CTX
 *);

158 *
SHA512_End
(
SHA512_CTX
 *, [
SHA512_DIGEST_STRING_LENGTH
]);

159 *
SHA512_D©a
(c⁄° 
uöt8_t
 *, 
size_t
, [
SHA512_DIGEST_STRING_LENGTH
]);

164 #ifde‡
WITH_SHA256


165 
SHA256_Inô
(
SHA256_CTX
 *);

166 
SHA256_Upd©e
(
SHA256_CTX
 *, c⁄° 
u_öt8_t
 *, 
size_t
);

167 
SHA256_FöÆ
(
u_öt8_t
[
SHA256_DIGEST_LENGTH
], 
SHA256_CTX
 *);

168 *
SHA256_End
(
SHA256_CTX
 *, [
SHA256_DIGEST_STRING_LENGTH
]);

169 *
SHA256_D©a
(c⁄° 
u_öt8_t
 *, 
size_t
, [
SHA256_DIGEST_STRING_LENGTH
]);

172 #ifde‡
WITH_SHA384


173 
SHA384_Inô
(
SHA384_CTX
 *);

174 
SHA384_Upd©e
(
SHA384_CTX
 *, c⁄° 
u_öt8_t
 *, 
size_t
);

175 
SHA384_FöÆ
(
u_öt8_t
[
SHA384_DIGEST_LENGTH
], 
SHA384_CTX
 *);

176 *
SHA384_End
(
SHA384_CTX
 *, [
SHA384_DIGEST_STRING_LENGTH
]);

177 *
SHA384_D©a
(c⁄° 
u_öt8_t
 *, 
size_t
, [
SHA384_DIGEST_STRING_LENGTH
]);

180 #ifde‡
WITH_SHA512


181 
SHA512_Inô
(
SHA512_CTX
 *);

182 
SHA512_Upd©e
(
SHA512_CTX
 *, c⁄° 
u_öt8_t
 *, 
size_t
);

183 
SHA512_FöÆ
(
u_öt8_t
[
SHA512_DIGEST_LENGTH
], 
SHA512_CTX
 *);

184 *
SHA512_End
(
SHA512_CTX
 *, [
SHA512_DIGEST_STRING_LENGTH
]);

185 *
SHA512_D©a
(c⁄° 
u_öt8_t
 *, 
size_t
, [
SHA512_DIGEST_STRING_LENGTH
]);

192 #ifde‡
WITH_SHA256


193 
SHA256_Inô
();

194 
SHA256_Upd©e
();

195 
SHA256_FöÆ
();

196 *
SHA256_End
();

197 *
SHA256_D©a
();

200 #ifde‡
WITH_SHA384


201 
SHA384_Inô
();

202 
SHA384_Upd©e
();

203 
SHA384_FöÆ
();

204 *
SHA384_End
();

205 *
SHA384_D©a
();

208 #ifde‡
WITH_SHA512


209 
SHA512_Inô
();

210 
SHA512_Upd©e
();

211 
SHA512_FöÆ
();

212 *
SHA512_End
();

213 *
SHA512_D©a
();

218 #ifdef 
__˝lu•lus


	@include_lib/net/tinydtls/state.h

31 #i‚de‡
_DTLS_STATE_H_


32 
	#_DTLS_STATE_H_


	)

34 
	~<sys/ty≥s.h
>

35 
	~<°döt.h
>

37 
	~"globÆ.h
"

38 
	~"hmac.h
"

41 
	mDTLS_STATE_INIT
 = 0, 
	mDTLS_STATE_WAIT_CLIENTHELLO
, 
	mDTLS_STATE_WAIT_CLIENTCERTIFICATE
,

42 
	mDTLS_STATE_WAIT_CLIENTKEYEXCHANGE
, 
	mDTLS_STATE_WAIT_CERTIFICATEVERIFY
,

43 
	mDTLS_STATE_WAIT_CHANGECIPHERSPEC
,

44 
	mDTLS_STATE_WAIT_FINISHED
, 
	mDTLS_STATE_FINISHED
,

46 
	mDTLS_STATE_CLIENTHELLO
, 
	mDTLS_STATE_WAIT_SERVERCERTIFICATE
, 
	mDTLS_STATE_WAIT_SERVERKEYEXCHANGE
,

47 
	mDTLS_STATE_WAIT_SERVERHELLODONE
,

49 
	mDTLS_STATE_CONNECTED
,

50 
	mDTLS_STATE_CLOSING
,

51 
	mDTLS_STATE_CLOSED


52 } 
	tdés_°©e_t
;

55 
uöt16_t
 
	mm£q_s
;

56 
uöt16_t
 
	mm£q_r
;

62 
dés_hash_˘x
 
	mhs_hash
;

63 } 
	tdés_hs_°©e_t
;

	@include_lib/net/tinydtls/t_list.h

31 #i‚de‡
_DTLS_LIST_H_


32 
	#_DTLS_LIST_H_


	)

34 
	~"töydés.h
"

36 
	~"uthash.h
"

37 
	~"uéi°.h
"

78 **
	tli°_t
;

79 
	sli°
 {

80 
li°
 *
	m√xt
;

83 
	#LIST_CONCAT
(
s1
, 
s2
Ës1##
	)
s2

85 
	#LIST_STRUCT
(
«me
) \

86 *
	`LIST_CONCAT
(
«me
, 
_li°
); \

87 
li°_t
 
«me


	)

89 
	#LIST_STRUCT_INIT
(
°ru˘_±r
, 
«me
) { \

90 (
°ru˘_±r
)->
«me
 = &((°ru˘_±r)->
	`LIST_CONCAT
“ame,
_li°
)); \

91 (
°ru˘_±r
)->
	`LIST_CONCAT
(
«me
,
_li°
Ë
NULL
; \

92 }

	)

94 
ölöe
 *

95 
	$li°_hód
(
li°_t
 
li°
)

97  *
li°
;

98 
	}
}

100 
ölöe
 

101 
	$li°_ªmove
(
li°_t
 
li°
, *
ôem
)

103 
	`LL_DELETE
(*(
li°
 **Ói°, (li° *)
ôem
);

104 
	}
}

106 
ölöe
 

107 
	$li°_add
(
li°_t
 
li°
, *
ôem
)

109 
	`li°_ªmove
(
li°
, 
ôem
);

110 
	`LL_APPEND
(*(
li°
 **Ói°, (li° *)
ôem
);

111 
	}
}

113 
ölöe
 

114 
	$li°_push
(
li°_t
 
li°
, *
ôem
)

116 
	`LL_PREPEND
(*(
li°
 **Ói°, (li° *)
ôem
);

117 
	}
}

119 
ölöe
 *

120 
	$li°_p›
(
li°_t
 
li°
)

122 
li°
 *
l
;

123 
l
 = *
li°
;

124 i‡(
l
) {

125 
	`li°_ªmove
(
li°
, 
l
);

128  
l
;

129 
	}
}

131 
ölöe
 

132 
	$li°_ö£π
(
li°_t
 
li°
, *
¥evôem
, *
√wôem
)

134 i‡(
¥evôem
 =
NULL
) {

135 
	`li°_push
(
li°
, 
√wôem
);

137 ((
li°
 *)
√wôem
)->
√xt
 = ((li° *)
¥evôem
)->next;

138 ((
li°
 *)
¥evôem
)->
√xt
 = 
√wôem
;

140 
	}
}

142 
ölöe
 *

143 
	$li°_ôem_√xt
(*
ôem
)

145  
ôem
 =
NULL
 ? NULL : ((
li°
 *)ôem)->
√xt
;

146 
	}
}

	@include_lib/net/tinydtls/tinydtls.h

32 #i‚de‡
_DTLS_TINYDTLS_H_


33 
	#_DTLS_TINYDTLS_H_


	)

40 
	#DTLS_PSK
 1

	)

	@include_lib/net/tinydtls/uthash.h

24 #i‚de‡
UTHASH_H


25 
	#UTHASH_H


	)

27 
	~<°rög.h
>

28 
	~<°ddef.h
>

34 #ifde‡
_MSC_VER


35 #i‡
_MSC_VER
 >1600 && 
deföed
(
__˝lu•lus
)

36 
	#DECLTYPE
(
x
Ë(
	`de˛ty≥
(x))

	)

38 
	#NO_DECLTYPE


	)

39 
	#DECLTYPE
(
x
)

	)

42 
	#DECLTYPE
(
x
Ë(
	`__ty≥of
(x))

	)

45 #ifde‡
NO_DECLTYPE


46 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

48 **
_da_d°
 = (**)(&(
d°
)); \

49 *
_da_d°
 = (*)(
§c
); \

50 } 0)

	)

52 
	#DECLTYPE_ASSIGN
(
d°
,
§c
) \

54 (
d°
Ë
	`DECLTYPE
(d°)(
§c
); \

55 } 0)

	)

59 #ifde‡
_MSC_VER


60 
	tuöt32_t
;

62 
	~<öây≥s.h
>

65 
	#UTHASH_VERSION
 1.9.3

	)

67 
	#uthash_Áèl
(
msg
)

68 
	#uthash_mÆloc
(
sz
Ë
	`mÆloc
(szË

	)

69 
	#uthash_‰ì
(
±r
,
sz
Ë
	`‰ì
’åË

	)

71 
	#uthash_n€x∑nd_fyi
(
tbl
Ë

	)

72 
	#uthash_ex∑nd_fyi
(
tbl
Ë

	)

75 
	#HASH_INITIAL_NUM_BUCKETS
 32

	)

76 
	#HASH_INITIAL_NUM_BUCKETS_LOG2
 5

	)

77 
	#HASH_BKT_CAPACITY_THRESH
 10

	)

80 
	#ELMT_FROM_HH
(
tbl
,
hhp
Ë((*)(((*)(hhp)Ë- (—bl)->
hho
)))

	)

82 
	#HASH_FIND
(
hh
,
hód
,
key±r
,
keyÀn
,
out
) \

84 
_hf_bkt
,
_hf_hashv
; \

85 
out
=
NULL
; \

86 i‡(
hód
) { \

87 
	`HASH_FCN
(
key±r
,
keyÀn
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hf_hashv
, 
_hf_bkt
); \

88 i‡(
	`HASH_BLOOM_TEST
((
hód
)->
hh
.
tbl
, 
_hf_hashv
)) { \

89 
	`HASH_FIND_IN_BKT
((
hód
)->
hh
.
tbl
, hh, (hód)->hh.tbl->
buckës
[ 
_hf_bkt
 ], \

90 
key±r
,
keyÀn
,
out
); \

93 } 0)

	)

95 #ifde‡
HASH_BLOOM


96 
	#HASH_BLOOM_BITLEN
 (1ULL << 
HASH_BLOOM
)

	)

97 
	#HASH_BLOOM_BYTELEN
 (
HASH_BLOOM_BITLEN
/8Ë+ ((HASH_BLOOM_BITLEN%8Ë? 1:0)

	)

98 
	#HASH_BLOOM_MAKE
(
tbl
) \

100 (
tbl
)->
bloom_nbôs
 = 
HASH_BLOOM
; \

101 (
tbl
)->
bloom_bv
 = (
uöt8_t
*)
	`uthash_mÆloc
(
HASH_BLOOM_BYTELEN
); \

102 i‡(!((
tbl
)->
bloom_bv
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

103 
	`mem£t
((
tbl
)->
bloom_bv
, 0, 
HASH_BLOOM_BYTELEN
); \

104 (
tbl
)->
bloom_sig
 = 
HASH_BLOOM_SIGNATURE
; \

105 } 0);

	)

107 
	#HASH_BLOOM_FREE
(
tbl
) \

109 
	`uthash_‰ì
((
tbl
)->
bloom_bv
, 
HASH_BLOOM_BYTELEN
); \

110 } 0);

	)

112 
	#HASH_BLOOM_BITSET
(
bv
,
idx
Ë(bv[(idx)/8] |(1U << ((idx)%8)))

	)

113 
	#HASH_BLOOM_BITTEST
(
bv
,
idx
Ë(bv[(idx)/8] & (1U << ((idx)%8)))

	)

115 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
) \

116 
	`HASH_BLOOM_BITSET
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

118 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
) \

119 
	`HASH_BLOOM_BITTEST
((
tbl
)->
bloom_bv
, (
hashv
 & (
uöt32_t
)((1ULL << (tbl)->
bloom_nbôs
Ë- 1)))

	)

122 
	#HASH_BLOOM_MAKE
(
tbl
)

	)

123 
	#HASH_BLOOM_FREE
(
tbl
)

	)

124 
	#HASH_BLOOM_ADD
(
tbl
,
hashv
)

	)

125 
	#HASH_BLOOM_TEST
(
tbl
,
hashv
Ë(1)

	)

128 
	#HASH_MAKE_TABLE
(
hh
,
hód
) \

130 (
hód
)->
hh
.
tbl
 = (
UT_hash_èbÀ
*)
	`uthash_mÆloc
( \

131 (
UT_hash_èbÀ
)); \

132 i‡(!((
hód
)->
hh
.
tbl
)Ë{ 
	`uthash_Áèl
( "out of memory"); } \

133 
	`mem£t
((
hód
)->
hh
.
tbl
, 0, (
UT_hash_èbÀ
)); \

134 (
hód
)->
hh
.
tbl
->
èû
 = &((head)->hh); \

135 (
hód
)->
hh
.
tbl
->
num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS
; \

136 (
hód
)->
hh
.
tbl
->
log2_num_buckës
 = 
HASH_INITIAL_NUM_BUCKETS_LOG2
; \

137 (
hód
)->
hh
.
tbl
->
hho
 = (*)(&(head)->hh) - (*)(head); \

138 (
hód
)->
hh
.
tbl
->
buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

139 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

140 i‡(! (
hód
)->
hh
.
tbl
->
buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

141 
	`mem£t
((
hód
)->
hh
.
tbl
->
buckës
, 0, \

142 
HASH_INITIAL_NUM_BUCKETS
*(
UT_hash_buckë
)); \

143 
	`HASH_BLOOM_MAKE
((
hód
)->
hh
.
tbl
); \

144 (
hód
)->
hh
.
tbl
->
sig«tuª
 = 
HASH_SIGNATURE
; \

145 } 0)

	)

147 
	#HASH_ADD
(
hh
,
hód
,
fõld«me
,
keyÀn_ö
,
add
) \

148 
	`HASH_ADD_KEYPTR
(
hh
,
hód
,&
add
->
fõld«me
,
keyÀn_ö
,add)

	)

150 
	#HASH_ADD_KEYPTR
(
hh
,
hód
,
key±r
,
keyÀn_ö
,
add
) \

152 
_ha_bkt
; \

153 (
add
)->
hh
.
√xt
 = 
NULL
; \

154 (
add
)->
hh
.
key
 = (*)
key±r
; \

155 (
add
)->
hh
.
keyÀn
 = 
keyÀn_ö
; \

156 i‡(!(
hód
)) { \

157 
hód
 = (
add
); \

158 (
hód
)->
hh
.
¥ev
 = 
NULL
; \

159 
	`HASH_MAKE_TABLE
(
hh
,
hód
); \

161 (
hód
)->
hh
.
tbl
->
èû
->
√xt
 = (
add
); \

162 (
add
)->
hh
.
¥ev
 = 
	`ELMT_FROM_HH
((
hód
)->hh.
tbl
, (hód)->hh.tbl->
èû
); \

163 (
hód
)->
hh
.
tbl
->
èû
 = &((
add
)->hh); \

165 (
hód
)->
hh
.
tbl
->
num_ôems
++; \

166 (
add
)->
hh
.
tbl
 = (
hód
)->hh.tbl; \

167 
	`HASH_FCN
(
key±r
,
keyÀn_ö
, (
hód
)->
hh
.
tbl
->
num_buckës
, \

168 (
add
)->
hh
.
hashv
, 
_ha_bkt
); \

169 
	`HASH_ADD_TO_BKT
((
hód
)->
hh
.
tbl
->
buckës
[
_ha_bkt
],&(
add
)->hh); \

170 
	`HASH_BLOOM_ADD
((
hód
)->
hh
.
tbl
,(
add
)->hh.
hashv
); \

171 
	`HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
keyÀn_ö
); \

172 
	`HASH_FSCK
(
hh
,
hód
); \

173 } 0)

	)

175 
	#HASH_TO_BKT
–
hashv
, 
num_bkts
, 
bkt
 ) \

177 
bkt
 = ((
hashv
Ë& ((
num_bkts
) - 1)); \

178 } 0)

	)

192 
	#HASH_DELETE
(
hh
,
hód
,
dñ±r
) \

194 
_hd_bkt
; \

195 
UT_hash_h™dÀ
 *
_hd_hh_dñ
; \

196 i‡–((
dñ±r
)->
hh
.
¥ev
 =
NULL
Ë&& ((dñ±r)->hh.
√xt
 == NULL) ) { \

197 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

198 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
) ); \

199 
	`HASH_BLOOM_FREE
((
hód
)->
hh
.
tbl
); \

200 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

201 
hód
 = 
NULL
; \

203 
_hd_hh_dñ
 = &((
dñ±r
)->
hh
); \

204 i‡((
dñ±r
Ë=
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,(hód)->hh.tbl->
èû
)) { \

205 (
hód
)->
hh
.
tbl
->
èû
 = \

206 (
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

207 (
hód
)->
hh
.
tbl
->
hho
); \

209 i‡((
dñ±r
)->
hh
.
¥ev
) { \

210 ((
UT_hash_h™dÀ
*)((*)((
dñ±r
)->
hh
.
¥ev
) + \

211 (
hód
)->
hh
.
tbl
->
hho
))->
√xt
 = (
dñ±r
)->hh.next; \

213 
	`DECLTYPE_ASSIGN
(
hód
,(
dñ±r
)->
hh
.
√xt
); \

215 i‡(
_hd_hh_dñ
->
√xt
) { \

216 ((
UT_hash_h™dÀ
*)((*)
_hd_hh_dñ
->
√xt
 + \

217 (
hód
)->
hh
.
tbl
->
hho
))->
¥ev
 = \

218 
_hd_hh_dñ
->
¥ev
; \

220 
	`HASH_TO_BKT
–
_hd_hh_dñ
->
hashv
, (
hód
)->
hh
.
tbl
->
num_buckës
, 
_hd_bkt
); \

221 
	`HASH_DEL_IN_BKT
(
hh
,(
hód
)->hh.
tbl
->
buckës
[
_hd_bkt
], 
_hd_hh_dñ
); \

222 (
hód
)->
hh
.
tbl
->
num_ôems
--; \

224 
	`HASH_FSCK
(
hh
,
hód
); \

225 } 0)

	)

229 
	#HASH_FIND_STR
(
hód
,
föd°r
,
out
) \

230 
	`HASH_FIND
(
hh
,
hód
,
föd°r
,
	`°æí
(föd°r),
out
)

	)

231 
	#HASH_ADD_STR
(
hód
,
°rfõld
,
add
) \

232 
	`HASH_ADD
(
hh
,
hód
,
°rfõld
,
	`°æí
(
add
->°rfõld),add)

	)

233 
	#HASH_FIND_INT
(
hód
,
födöt
,
out
) \

234 
	`HASH_FIND
(
hh
,
hód
,
födöt
,(),
out
)

	)

235 
	#HASH_ADD_INT
(
hód
,
ötfõld
,
add
) \

236 
	`HASH_ADD
(
hh
,
hód
,
ötfõld
,(),
add
)

	)

237 
	#HASH_FIND_PTR
(
hód
,
föd±r
,
out
) \

238 
	`HASH_FIND
(
hh
,
hód
,
föd±r
,(*),
out
)

	)

239 
	#HASH_ADD_PTR
(
hód
,
±rfõld
,
add
) \

240 
	`HASH_ADD
(
hh
,
hód
,
±rfõld
,(*),
add
)

	)

241 
	#HASH_DEL
(
hód
,
dñ±r
) \

242 
	`HASH_DELETE
(
hh
,
hód
,
dñ±r
)

	)

247 #ifde‡
HASH_DEBUG


248 
	#HASH_OOPS
(...Ëdÿ{ 
	`¥ötf
(
__VA_ARGS__
); (-1); } 0)

	)

249 
	#HASH_FSCK
(
hh
,
hód
) \

251 
_bkt_i
; \

252 
_cou¡
, 
_bkt_cou¡
; \

253 *
_¥ev
; \

254 
UT_hash_h™dÀ
 *
_thh
; \

255 i‡(
hód
) { \

256 
_cou¡
 = 0; \

257  
_bkt_i
 = 0; _bkt_ò< (
hód
)->
hh
.
tbl
->
num_buckës
; _bkt_i++) { \

258 
_bkt_cou¡
 = 0; \

259 
_thh
 = (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
hh_hód
; \

260 
_¥ev
 = 
NULL
; \

261 
_thh
) { \

262 i‡(
_¥ev
 !(*)(
_thh
->
hh_¥ev
)) { \

263 
	`HASH_OOPS
("invalid hh_prev %p,áctual %p\n", \

264 
_thh
->
hh_¥ev
, 
_¥ev
 ); \

266 
_bkt_cou¡
++; \

267 
_¥ev
 = (*)(
_thh
); \

268 
_thh
 = _thh->
hh_√xt
; \

270 
_cou¡
 +
_bkt_cou¡
; \

271 i‡((
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
 !
_bkt_cou¡
) { \

272 
	`HASH_OOPS
("invalid bucket count %d,áctual %d\n", \

273 (
hód
)->
hh
.
tbl
->
buckës
[
_bkt_i
].
cou¡
, 
_bkt_cou¡
); \

276 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

277 
	`HASH_OOPS
("invalid hh item count %d,áctual %d\n", \

278 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

281 
_cou¡
 = 0; \

282 
_¥ev
 = 
NULL
; \

283 
_thh
 = &(
hód
)->
hh
; \

284 
_thh
) { \

285 
_cou¡
++; \

286 i‡(
_¥ev
 !=(*)(
_thh
->
¥ev
)) { \

287 
	`HASH_OOPS
("invalidÖrev %p,áctual %p\n", \

288 
_thh
->
¥ev
, 
_¥ev
 ); \

290 
_¥ev
 = (*)
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
, 
_thh
); \

291 
_thh
 = ( _thh->
√xt
 ? (
UT_hash_h™dÀ
*)((*)(_thh->next) + \

292 (
hód
)->
hh
.
tbl
->
hho
Ë: 
NULL
 ); \

294 i‡(
_cou¡
 !(
hód
)->
hh
.
tbl
->
num_ôems
) { \

295 
	`HASH_OOPS
("invalidápp item count %d,áctual %d\n", \

296 (
hód
)->
hh
.
tbl
->
num_ôems
, 
_cou¡
 ); \

299 } 0)

	)

301 
	#HASH_FSCK
(
hh
,
hód
)

	)

307 #ifde‡
HASH_EMIT_KEYS


308 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
) \

310 
_kÀn
 = 
fõldÀn
; \

311 
	`wrôe
(
HASH_EMIT_KEYS
, &
_kÀn
, (_klen)); \

312 
	`wrôe
(
HASH_EMIT_KEYS
, 
key±r
, 
fõldÀn
); \

313 } 0)

	)

315 
	#HASH_EMIT_KEY
(
hh
,
hód
,
key±r
,
fõldÀn
)

	)

319 #ifde‡
HASH_FUNCTION


320 
	#HASH_FCN
 
HASH_FUNCTION


	)

322 
	#HASH_FCN
 
HASH_JEN


	)

326 
	#HASH_BER
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

328 
_hb_keyÀn
=
keyÀn
; \

329 *
_hb_key
=(*)(
key
); \

330 (
hashv
) = 0; \

331 
_hb_keyÀn
--Ë{ (
hashv
Ë((hashvË* 33Ë+ *
_hb_key
++; } \

332 
bkt
 = (
hashv
Ë& (
num_bkts
-1); \

333 } 0)

	)

338 
	#HASH_SAX
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

340 
_sx_i
; \

341 *
_hs_key
=(*)(
key
); \

342 
hashv
 = 0; \

343 
_sx_i
=0; _sx_ò< 
keyÀn
; _sx_i++) \

344 
hashv
 ^(hashv << 5Ë+ (hashv >> 2Ë+ 
_hs_key
[
_sx_i
]; \

345 
bkt
 = 
hashv
 & (
num_bkts
-1); \

346 } 0)

	)

348 
	#HASH_FNV
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

350 
_‚_i
; \

351 *
_hf_key
=(*)(
key
); \

352 
hashv
 = 2166136261UL; \

353 
_‚_i
=0; _‚_ò< 
keyÀn
; _fn_i++) \

354 
hashv
 = (hashv * 16777619Ë^ 
_hf_key
[
_‚_i
]; \

355 
bkt
 = 
hashv
 & (
num_bkts
-1); \

356 } 0);

	)

358 
	#HASH_OAT
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

360 
_ho_i
; \

361 *
_ho_key
=(*)(
key
); \

362 
hashv
 = 0; \

363 
_ho_i
=0; _ho_ò< 
keyÀn
; _ho_i++) { \

364 
hashv
 +
_ho_key
[
_ho_i
]; \

365 
hashv
 += (hashv << 10); \

366 
hashv
 ^= (hashv >> 6); \

368 
hashv
 += (hashv << 3); \

369 
hashv
 ^= (hashv >> 11); \

370 
hashv
 += (hashv << 15); \

371 
bkt
 = 
hashv
 & (
num_bkts
-1); \

372 } 0)

	)

374 
	#HASH_JEN_MIX
(
a
,
b
,
c
) \

376 
a
 -
b
;á -
c
;á ^= ( c >> 13 ); \

377 
b
 -
c
; b -
a
; b ^= (á << 8 ); \

378 
c
 -
a
; c -
b
; c ^= ( b >> 13 ); \

379 
a
 -
b
;á -
c
;á ^= ( c >> 12 ); \

380 
b
 -
c
; b -
a
; b ^= (á << 16 ); \

381 
c
 -
a
; c -
b
; c ^= ( b >> 5 ); \

382 
a
 -
b
;á -
c
;á ^= ( c >> 3 ); \

383 
b
 -
c
; b -
a
; b ^= (á << 10 ); \

384 
c
 -
a
; c -
b
; c ^= ( b >> 15 ); \

385 } 0)

	)

387 
	#HASH_JEN
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

389 
_hj_i
,
_hj_j
,
_hj_k
; \

390 *
_hj_key
=(*)(
key
); \

391 
hashv
 = 0xfeedbeef; \

392 
_hj_i
 = 
_hj_j
 = 0x9e3779b9; \

393 
_hj_k
 = 
keyÀn
; \

394 
_hj_k
 >= 12) { \

395 
_hj_i
 +(
_hj_key
[0] + ( ()_hj_key[1] << 8 ) \

396 + ( ()
_hj_key
[2] << 16 ) \

397 + ( ()
_hj_key
[3] << 24 ) ); \

398 
_hj_j
 +(
_hj_key
[4] + ( ()_hj_key[5] << 8 ) \

399 + ( ()
_hj_key
[6] << 16 ) \

400 + ( ()
_hj_key
[7] << 24 ) ); \

401 
hashv
 +(
_hj_key
[8] + ( ()_hj_key[9] << 8 ) \

402 + ( ()
_hj_key
[10] << 16 ) \

403 + ( ()
_hj_key
[11] << 24 ) ); \

405 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

407 
_hj_key
 += 12; \

408 
_hj_k
 -= 12; \

410 
hashv
 +
keyÀn
; \

411  
_hj_k
 ) { \

412 11: 
hashv
 +–()
_hj_key
[10] << 24 ); \

413 10: 
hashv
 +–()
_hj_key
[9] << 16 ); \

414 9: 
hashv
 +–()
_hj_key
[8] << 8 ); \

415 8: 
_hj_j
 +–()
_hj_key
[7] << 24 ); \

416 7: 
_hj_j
 +–()
_hj_key
[6] << 16 ); \

417 6: 
_hj_j
 +–()
_hj_key
[5] << 8 ); \

418 5: 
_hj_j
 +
_hj_key
[4]; \

419 4: 
_hj_i
 +–()
_hj_key
[3] << 24 ); \

420 3: 
_hj_i
 +–()
_hj_key
[2] << 16 ); \

421 2: 
_hj_i
 +–()
_hj_key
[1] << 8 ); \

422 1: 
_hj_i
 +
_hj_key
[0]; \

424 
	`HASH_JEN_MIX
(
_hj_i
, 
_hj_j
, 
hashv
); \

425 
bkt
 = 
hashv
 & (
num_bkts
-1); \

426 } 0)

	)

429 #unde‡
gë16bôs


430 #i‡(
deföed
(
__GNUC__
Ë&& deföed(
__i386__
)Ë|| deföed(
__WATCOMC__
) \

431 || 
deföed
(
_MSC_VER
Ë|| deföed (
__BORLANDC__
Ë|| 
	$deföed
 (
__TURBOC__
)

432 
	#gë16bôs
(
d
Ë(*((c⁄° 
uöt16_t
 *Ë(d)))

	)

435 #i‡!
	`deföed
 (
gë16bôs
)

436 
	#gë16bôs
(
d
Ë((((
uöt32_t
)(((c⁄° 
uöt8_t
 *)(d))[1])) << 8) \

437 +(
uöt32_t
)(((c⁄° 
uöt8_t
 *)(
d
))[0]Ë)

	)

439 
	#HASH_SFH
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

441 *
_sfh_key
=(*)(
key
); \

442 
uöt32_t
 
_sfh_tmp
, 
_sfh_Àn
 = 
keyÀn
; \

444 
_sfh_ªm
 = 
_sfh_Àn
 & 3; \

445 
_sfh_Àn
 >>= 2; \

446 
hashv
 = 0xcafebabe; \

449 ;
_sfh_Àn
 > 0; _sfh_len--) { \

450 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

451 
_sfh_tmp
 = (
	`gë16bôs
 (
_sfh_key
+2Ë<< 11Ë^ 
hashv
; \

452 
hashv
 = (hashv << 16Ë^ 
_sfh_tmp
; \

453 
_sfh_key
 +2* (
uöt16_t
); \

454 
hashv
 += hashv >> 11; \

458 
_sfh_ªm
) { \

459 3: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

460 
hashv
 ^= hashv << 16; \

461 
hashv
 ^
_sfh_key
[ (
uöt16_t
)] << 18; \

462 
hashv
 += hashv >> 11; \

464 2: 
hashv
 +
	`gë16bôs
 (
_sfh_key
); \

465 
hashv
 ^= hashv << 11; \

466 
hashv
 += hashv >> 17; \

468 1: 
hashv
 +*
_sfh_key
; \

469 
hashv
 ^= hashv << 10; \

470 
hashv
 += hashv >> 1; \

474 
hashv
 ^= hashv << 3; \

475 
hashv
 += hashv >> 5; \

476 
hashv
 ^= hashv << 4; \

477 
hashv
 += hashv >> 17; \

478 
hashv
 ^= hashv << 25; \

479 
hashv
 += hashv >> 6; \

480 
bkt
 = 
hashv
 & (
num_bkts
-1); \

481 
	}
} 0);

	)

483 #ifde‡
HASH_USING_NO_STRICT_ALIASING


494 #i‡(
deföed
(
__i386__
Ë|| deföed(
__x86_64__
))

495 
	#HASH_MUR
 
HASH_MUR_UNALIGNED


	)

497 
	#HASH_MUR
 
HASH_MUR_ALIGNED


	)

501 
	#HASH_MUR_UNALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

503 c⁄° 
_mur_m
 = 0x5bd1e995; \

504 c⁄° 
_mur_r
 = 24; \

505 
hashv
 = 0xˇ„babê^ 
keyÀn
; \

506 *
_mur_key
 = (*)(
key
); \

507 
uöt32_t
 
_mur_tmp
, 
_mur_Àn
 = 
keyÀn
; \

509 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

510 
_mur_tmp
 = *(
uöt32_t
 *)
_mur_key
; \

511 
_mur_tmp
 *
_mur_m
; \

512 
_mur_tmp
 ^_mur_tm∞>> 
_mur_r
; \

513 
_mur_tmp
 *
_mur_m
; \

514 
hashv
 *
_mur_m
; \

515 
hashv
 ^
_mur_tmp
; \

516 
_mur_key
 += 4; \

519 
_mur_Àn
) \

521 3: 
hashv
 ^
_mur_key
[2] << 16; \

522 2: 
hashv
 ^
_mur_key
[1] << 8; \

523 1: 
hashv
 ^
_mur_key
[0]; \

524 
hashv
 *
_mur_m
; \

527 
hashv
 ^= hashv >> 13; \

528 
hashv
 *
_mur_m
; \

529 
hashv
 ^= hashv >> 15; \

531 
bkt
 = 
hashv
 & (
num_bkts
-1); \

532 } 0)

	)

535 
	#HASH_MUR_ALIGNED
(
key
,
keyÀn
,
num_bkts
,
hashv
,
bkt
) \

537 c⁄° 
_mur_m
 = 0x5bd1e995; \

538 c⁄° 
_mur_r
 = 24; \

539 
hashv
 = 0xˇ„babê^ (
keyÀn
); \

540 *
_mur_key
 = (*)(
key
); \

541 
uöt32_t
 
_mur_Àn
 = 
keyÀn
; \

542 
_mur_Æign
 = ()
_mur_key
 & 3; \

544 i‡(
_mur_Æign
 && (
_mur_Àn
 >= 4)) { \

545 
_mur_t
 = 0, 
_mur_d
 = 0; \

546 
_mur_Æign
) { \

547 1: 
_mur_t
 |
_mur_key
[2] << 16; \

548 2: 
_mur_t
 |
_mur_key
[1] << 8; \

549 3: 
_mur_t
 |
_mur_key
[0]; \

551 
_mur_t
 <<(8 * 
_mur_Æign
); \

552 
_mur_key
 +4-
_mur_Æign
; \

553 
_mur_Àn
 -4-
_mur_Æign
; \

554 
_mur_¶
 = 8 * (4-
_mur_Æign
); \

555 
_mur_§
 = 8 * 
_mur_Æign
; \

557 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

558 
_mur_d
 = *(*)
_mur_key
; \

559 
_mur_t
 = (_mur_à>> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

560 
_mur_k
 = 
_mur_t
; \

561 
_mur_k
 *
_mur_m
; \

562 
_mur_k
 ^_mur_k >> 
_mur_r
; \

563 
_mur_k
 *
_mur_m
; \

564 
hashv
 *
_mur_m
; \

565 
hashv
 ^
_mur_k
; \

566 
_mur_t
 = 
_mur_d
; \

567 
_mur_key
 += 4; \

569 
_mur_d
 = 0; \

570 if(
_mur_Àn
 >
_mur_Æign
) { \

571 
_mur_Æign
) { \

572 3: 
_mur_d
 |
_mur_key
[2] << 16; \

573 2: 
_mur_d
 |
_mur_key
[1] << 8; \

574 1: 
_mur_d
 |
_mur_key
[0]; \

576 
_mur_k
 = (
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

577 
_mur_k
 *
_mur_m
; \

578 
_mur_k
 ^_mur_k >> 
_mur_r
; \

579 
_mur_k
 *
_mur_m
; \

580 
hashv
 *
_mur_m
; \

581 
hashv
 ^
_mur_k
; \

582 
_mur_k
 +
_mur_Æign
; \

583 
_mur_Àn
 -
_mur_Æign
; \

585 
_mur_Àn
) \

587 3: 
hashv
 ^
_mur_key
[2] << 16; \

588 2: 
hashv
 ^
_mur_key
[1] << 8; \

589 1: 
hashv
 ^
_mur_key
[0]; \

590 
hashv
 *
_mur_m
; \

593 
_mur_Àn
) \

595 3: 
_mur_d
 ^
_mur_key
[2] << 16; \

596 2: 
_mur_d
 ^
_mur_key
[1] << 8; \

597 1: 
_mur_d
 ^
_mur_key
[0]; \

598 0: 
hashv
 ^(
_mur_t
 >> 
_mur_§
Ë| (
_mur_d
 << 
_mur_¶
); \

599 
hashv
 *
_mur_m
; \

603 
hashv
 ^= hashv >> 13; \

604 
hashv
 *
_mur_m
; \

605 
hashv
 ^= hashv >> 15; \

607 ;
_mur_Àn
 >= 4; _mur_len-=4) { \

608 
_mur_k
 = *(*)
_mur_key
; \

609 
_mur_k
 *
_mur_m
; \

610 
_mur_k
 ^_mur_k >> 
_mur_r
; \

611 
_mur_k
 *
_mur_m
; \

612 
hashv
 *
_mur_m
; \

613 
hashv
 ^
_mur_k
; \

614 
_mur_key
 += 4; \

616 
_mur_Àn
) \

618 3: 
hashv
 ^
_mur_key
[2] << 16; \

619 2: 
hashv
 ^
_mur_key
[1] << 8; \

620 1: 
hashv
 ^
_mur_key
[0]; \

621 
hashv
 *
_mur_m
; \

624 
hashv
 ^= hashv >> 13; \

625 
hashv
 *
_mur_m
; \

626 
hashv
 ^= hashv >> 15; \

628 
bkt
 = 
hashv
 & (
num_bkts
-1); \

629 } 0)

	)

633 
	#HASH_KEYCMP
(
a
,
b
,
Àn
Ë
	`memcmp
◊,b,Àn)

	)

636 
	#HASH_FIND_IN_BKT
(
tbl
,
hh
,
hód
,
key±r
,
keyÀn_ö
,
out
) \

638 i‡(
hód
.
hh_hód
Ë
	`DECLTYPE_ASSIGN
(
out
,
	`ELMT_FROM_HH
(
tbl
,head.hh_head)); \

639 
out
=
NULL
; \

640 
out
) { \

641 i‡(
out
->
hh
.
keyÀn
 =
keyÀn_ö
) { \

642 i‡((
	`HASH_KEYCMP
(
out
->
hh
.
key
,
key±r
,
keyÀn_ö
)) == 0) ; \

644 i‡(
out
->
hh
.
hh_√xt
Ë
	`DECLTYPE_ASSIGN
(out,
	`ELMT_FROM_HH
(
tbl
,out->hh.hh_next)); \

645 
out
 = 
NULL
; \

647 } 0)

	)

650 
	#HASH_ADD_TO_BKT
(
hód
,
addhh
) \

652 
hód
.
cou¡
++; \

653 (
addhh
)->
hh_√xt
 = 
hód
.
hh_hód
; \

654 (
addhh
)->
hh_¥ev
 = 
NULL
; \

655 i‡(
hód
.
hh_hód
Ë{ (hód).hh_hód->
hh_¥ev
 = (
addhh
); } \

656 (
hód
).
hh_hód
=
addhh
; \

657 i‡(
hód
.
cou¡
 >((hód.
ex∑nd_mu…
+1Ë* 
HASH_BKT_CAPACITY_THRESH
) \

658 && (
addhh
)->
tbl
->
n€x∑nd
 != 1) { \

659 
	`HASH_EXPAND_BUCKETS
((
addhh
)->
tbl
); \

661 } 0)

	)

664 
	#HASH_DEL_IN_BKT
(
hh
,
hód
,
hh_dñ
) \

665 (
hód
).
cou¡
--; \

666 i‡((
hód
).
hh_hód
 =
hh_dñ
) { \

667 (
hód
).
hh_hód
 = 
hh_dñ
->
hh_√xt
; \

669 i‡(
hh_dñ
->
hh_¥ev
) { \

670 
hh_dñ
->
hh_¥ev
->
hh_√xt
 = hh_del->hh_next; \

672 i‡(
hh_dñ
->
hh_√xt
) { \

673 
hh_dñ
->
hh_√xt
->
hh_¥ev
 = hh_del->hh_prev; \

674 }

	)

705 
	#HASH_EXPAND_BUCKETS
(
tbl
) \

707 
_he_bkt
; \

708 
_he_bkt_i
; \

709 
UT_hash_h™dÀ
 *
_he_thh
, *
_he_hh_nxt
; \

710 
UT_hash_buckë
 *
_he_√w_buckës
, *
_he_√wbkt
; \

711 
_he_√w_buckës
 = (
UT_hash_buckë
*)
	`uthash_mÆloc
( \

712 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

713 i‡(!
_he_√w_buckës
Ë{ 
	`uthash_Áèl
( "out of memory"); } \

714 
	`mem£t
(
_he_√w_buckës
, 0, \

715 2 * 
tbl
->
num_buckës
 * (
UT_hash_buckë
)); \

716 
tbl
->
idól_chaö_maxÀn
 = \

717 (
tbl
->
num_ôems
 >> (tbl->
log2_num_buckës
+1)) + \

718 ((
tbl
->
num_ôems
 & (—bl->
num_buckës
*2)-1)) ? 1 : 0); \

719 
tbl
->
n⁄idól_ôems
 = 0; \

720 
_he_bkt_i
 = 0; _he_bkt_ò< 
tbl
->
num_buckës
; _he_bkt_i++) \

722 
_he_thh
 = 
tbl
->
buckës
[ 
_he_bkt_i
 ].
hh_hód
; \

723 
_he_thh
) { \

724 
_he_hh_nxt
 = 
_he_thh
->
hh_√xt
; \

725 
	`HASH_TO_BKT
–
_he_thh
->
hashv
, 
tbl
->
num_buckës
*2, 
_he_bkt
); \

726 
_he_√wbkt
 = &(
_he_√w_buckës
[ 
_he_bkt
 ]); \

727 i‡(++(
_he_√wbkt
->
cou¡
Ë> 
tbl
->
idól_chaö_maxÀn
) { \

728 
tbl
->
n⁄idól_ôems
++; \

729 
_he_√wbkt
->
ex∑nd_mu…
 = _he_√wbkt->
cou¡
 / \

730 
tbl
->
idól_chaö_maxÀn
; \

732 
_he_thh
->
hh_¥ev
 = 
NULL
; \

733 
_he_thh
->
hh_√xt
 = 
_he_√wbkt
->
hh_hód
; \

734 i‡(
_he_√wbkt
->
hh_hód
Ë_he_√wbkt->hh_hód->
hh_¥ev
 = \

735 
_he_thh
; \

736 
_he_√wbkt
->
hh_hód
 = 
_he_thh
; \

737 
_he_thh
 = 
_he_hh_nxt
; \

740 
	`uthash_‰ì
–
tbl
->
buckës
,Åbl->
num_buckës
*(
UT_hash_buckë
) ); \

741 
tbl
->
num_buckës
 *= 2; \

742 
tbl
->
log2_num_buckës
++; \

743 
tbl
->
buckës
 = 
_he_√w_buckës
; \

744 
tbl
->
öeff_ex∑nds
 = (tbl->
n⁄idól_ôems
 > (tbl->
num_ôems
 >> 1)) ? \

745 (
tbl
->
öeff_ex∑nds
+1) : 0; \

746 i‡(
tbl
->
öeff_ex∑nds
 > 1) { \

747 
tbl
->
n€x∑nd
=1; \

748 
	`uthash_n€x∑nd_fyi
(
tbl
); \

750 
	`uthash_ex∑nd_fyi
(
tbl
); \

751 } 0)

	)

757 
	#HASH_SORT
(
hód
,
cmpf˙
Ë
	`HASH_SRT
(
hh
,hód,cmpf˙)

	)

758 
	#HASH_SRT
(
hh
,
hód
,
cmpf˙
) \

760 
_hs_i
; \

761 
_hs_lo›ög
,
_hs_nmîges
,
_hs_ösize
,
_hs_psize
,
_hs_qsize
; \

762 
UT_hash_h™dÀ
 *
_hs_p
, *
_hs_q
, *
_hs_e
, *
_hs_li°
, *
_hs_èû
; \

763 i‡(
hód
) { \

764 
_hs_ösize
 = 1; \

765 
_hs_lo›ög
 = 1; \

766 
_hs_li°
 = &((
hód
)->
hh
); \

767 
_hs_lo›ög
) { \

768 
_hs_p
 = 
_hs_li°
; \

769 
_hs_li°
 = 
NULL
; \

770 
_hs_èû
 = 
NULL
; \

771 
_hs_nmîges
 = 0; \

772 
_hs_p
) { \

773 
_hs_nmîges
++; \

774 
_hs_q
 = 
_hs_p
; \

775 
_hs_psize
 = 0; \

776  
_hs_i
 = 0; _hs_ò< 
_hs_ösize
; _hs_i++ ) { \

777 
_hs_psize
++; \

778 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

779 ((*)((*)(
_hs_q
->
√xt
) + \

780 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

781 i‡(! (
_hs_q
) ) ; \

783 
_hs_qsize
 = 
_hs_ösize
; \

784 (
_hs_psize
 > 0Ë|| ((
_hs_qsize
 > 0Ë&& 
_hs_q
 )) { \

785 i‡(
_hs_psize
 == 0) { \

786 
_hs_e
 = 
_hs_q
; \

787 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

788 ((*)((*)(
_hs_q
->
√xt
) + \

789 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

790 
_hs_qsize
--; \

791 } i‡–(
_hs_qsize
 =0Ë|| !(
_hs_q
) ) { \

792 
_hs_e
 = 
_hs_p
; \

793 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

794 ((*)((*)(
_hs_p
->
√xt
) + \

795 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

796 
_hs_psize
--; \

798 
	`cmpf˙
(
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_p
)), \

799 
	`DECLTYPE
(
hód
)(
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
,
_hs_q
))) \

801 
_hs_e
 = 
_hs_p
; \

802 
_hs_p
 = (
UT_hash_h™dÀ
*)((_hs_p->
√xt
) ? \

803 ((*)((*)(
_hs_p
->
√xt
) + \

804 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

805 
_hs_psize
--; \

807 
_hs_e
 = 
_hs_q
; \

808 
_hs_q
 = (
UT_hash_h™dÀ
*)((_hs_q->
√xt
) ? \

809 ((*)((*)(
_hs_q
->
√xt
) + \

810 (
hód
)->
hh
.
tbl
->
hho
)Ë: 
NULL
); \

811 
_hs_qsize
--; \

813 i‡–
_hs_èû
 ) { \

814 
_hs_èû
->
√xt
 = ((
_hs_e
) ? \

815 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_e
Ë: 
NULL
); \

817 
_hs_li°
 = 
_hs_e
; \

819 
_hs_e
->
¥ev
 = ((
_hs_èû
) ? \

820 
	`ELMT_FROM_HH
((
hód
)->
hh
.
tbl
,
_hs_èû
Ë: 
NULL
); \

821 
_hs_èû
 = 
_hs_e
; \

823 
_hs_p
 = 
_hs_q
; \

825 
_hs_èû
->
√xt
 = 
NULL
; \

826 i‡–
_hs_nmîges
 <= 1 ) { \

827 
_hs_lo›ög
=0; \

828 (
hód
)->
hh
.
tbl
->
èû
 = 
_hs_èû
; \

829 
	`DECLTYPE_ASSIGN
(
hód
,
	`ELMT_FROM_HH
((hód)->
hh
.
tbl
, 
_hs_li°
)); \

831 
_hs_ösize
 *= 2; \

833 
	`HASH_FSCK
(
hh
,
hód
); \

835 } 0)

	)

842 
	#HASH_SELECT
(
hh_d°
, 
d°
, 
hh_§c
, 
§c
, 
c⁄d
) \

844 
_§c_bkt
, 
_d°_bkt
; \

845 *
_œ°_ñt
=
NULL
, *
_ñt
; \

846 
UT_hash_h™dÀ
 *
_§c_hh
, *
_d°_hh
, *
_œ°_ñt_hh
=
NULL
; \

847 
±rdiff_t
 
_d°_hho
 = ((*)(&(
d°
)->
hh_d°
) - (*)(dst)); \

848 i‡(
§c
) { \

849 
_§c_bkt
=0; _§c_bkà< (
§c
)->
hh_§c
.
tbl
->
num_buckës
; _src_bkt++) { \

850 
_§c_hh
 = (
§c
)->
hh_§c
.
tbl
->
buckës
[
_§c_bkt
].
hh_hód
; \

851 
_§c_hh
; \

852 
_§c_hh
 = _§c_hh->
hh_√xt
) { \

853 
_ñt
 = 
	`ELMT_FROM_HH
((
§c
)->
hh_§c
.
tbl
, 
_§c_hh
); \

854 i‡(
	`c⁄d
(
_ñt
)) { \

855 
_d°_hh
 = (
UT_hash_h™dÀ
*)(((*)
_ñt
Ë+ 
_d°_hho
); \

856 
_d°_hh
->
key
 = 
_§c_hh
->key; \

857 
_d°_hh
->
keyÀn
 = 
_§c_hh
->keylen; \

858 
_d°_hh
->
hashv
 = 
_§c_hh
->hashv; \

859 
_d°_hh
->
¥ev
 = 
_œ°_ñt
; \

860 
_d°_hh
->
√xt
 = 
NULL
; \

861 i‡(
_œ°_ñt_hh
Ë{ _œ°_ñt_hh->
√xt
 = 
_ñt
; } \

862 i‡(!
d°
) { \

863 
	`DECLTYPE_ASSIGN
(
d°
,
_ñt
); \

864 
	`HASH_MAKE_TABLE
(
hh_d°
,
d°
); \

866 
_d°_hh
->
tbl
 = (
d°
)->
hh_d°
.tbl; \

868 
	`HASH_TO_BKT
(
_d°_hh
->
hashv
, _d°_hh->
tbl
->
num_buckës
, 
_d°_bkt
); \

869 
	`HASH_ADD_TO_BKT
(
_d°_hh
->
tbl
->
buckës
[
_d°_bkt
],_dst_hh); \

870 (
d°
)->
hh_d°
.
tbl
->
num_ôems
++; \

871 
_œ°_ñt
 = 
_ñt
; \

872 
_œ°_ñt_hh
 = 
_d°_hh
; \

877 
	`HASH_FSCK
(
hh_d°
,
d°
); \

878 } 0)

	)

880 
	#HASH_CLEAR
(
hh
,
hód
) \

882 i‡(
hód
) { \

883 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
->
buckës
, \

884 (
hód
)->
hh
.
tbl
->
num_buckës
*(
UT_hash_buckë
)); \

885 
	`uthash_‰ì
((
hód
)->
hh
.
tbl
, (
UT_hash_èbÀ
)); \

886 (
hód
)=
NULL
; \

888 } 0)

	)

890 #ifde‡
NO_DECLTYPE


891 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

892 (
ñ
)=(
hód
), (*(**)(&(
tmp
)))=(*)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

893 
ñ
; (ñ)=(
tmp
),(*(**)(&—mp)))=(*)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

895 
	#HASH_ITER
(
hh
,
hód
,
ñ
,
tmp
) \

896 (
ñ
)=(
hód
),(
tmp
)=
	`DECLTYPE
”l)((hód)?(hód)->
hh
.
√xt
:
NULL
); \

897 
ñ
; (ñ)=(
tmp
),—mp)=
	`DECLTYPE
”l)(—mp)?—mp)->
hh
.
√xt
:
NULL
))

	)

901 
	#HASH_COUNT
(
hód
Ë
	`HASH_CNT
(
hh
,hód)

	)

902 
	#HASH_CNT
(
hh
,
hód
Ë((hód)?((hód)->hh.
tbl
->
num_ôems
):0)

	)

904 
	sUT_hash_buckë
 {

905 
UT_hash_h™dÀ
 *
	mhh_hód
;

906 
	mcou¡
;

920 
	mex∑nd_mu…
;

922 } 
	tUT_hash_buckë
;

925 
	#HASH_SIGNATURE
 0xa0111„1

	)

926 
	#HASH_BLOOM_SIGNATURE
 0xb12220f2

	)

928 
	sUT_hash_èbÀ
 {

929 
UT_hash_buckë
 *
	mbuckës
;

930 
	mnum_buckës
, 
	mlog2_num_buckës
;

931 
	mnum_ôems
;

932 
UT_hash_h™dÀ
 *
	mèû
;

933 
±rdiff_t
 
	mhho
;

937 
	midól_chaö_maxÀn
;

942 
	mn⁄idól_ôems
;

950 
	möeff_ex∑nds
, 
	mn€x∑nd
;

952 
uöt32_t
 
	msig«tuª
;

953 #ifde‡
HASH_BLOOM


954 
uöt32_t
 
	mbloom_sig
;

955 
uöt8_t
 *
	mbloom_bv
;

956 
	mbloom_nbôs
;

959 } 
	tUT_hash_èbÀ
;

961 
	sUT_hash_h™dÀ
 {

962 
UT_hash_èbÀ
 *
	mtbl
;

963 *
	m¥ev
;

964 *
	m√xt
;

965 
UT_hash_h™dÀ
 *
	mhh_¥ev
;

966 
UT_hash_h™dÀ
 *
	mhh_√xt
;

967 *
	mkey
;

968 
	mkeyÀn
;

969 
	mhashv
;

970 } 
	tUT_hash_h™dÀ
;

	@include_lib/net/tinydtls/utlist.h

24 #i‚de‡
_DTLS_UTLIST_H


25 
	#_DTLS_UTLIST_H


	)

27 
	#UTLIST_VERSION
 1.9.1

	)

64 #ifde‡
_MSC_VER


65 #i‡
_MSC_VER
 >1600 && 
__˝lu•lus


66 
	#LDECLTYPE
(
x
Ë
	`de˛ty≥
(x)

	)

68 
	#NO_DECLTYPE


	)

69 
	#LDECLTYPE
(
x
Ë*

	)

72 
	#LDECLTYPE
(
x
Ë
	`__ty≥of
(x)

	)

78 #ifde‡
NO_DECLTYPE


79 
	#_SV
(
ñt
,
li°
Ë
_tmp
 = (*)÷i°); {**
_Æüs
 = (**)&÷i°); *_Æü†”…); }

	)

80 
	#_NEXT
(
ñt
,
li°
Ë((*)(÷i°)->
√xt
))

	)

81 
	#_NEXTASGN
(
ñt
,
li°
,
to
Ë{ **
_Æüs
 = (**)&(÷i°)->
√xt
); *_Æüs=(*)—o); }

	)

82 
	#_PREV
(
ñt
,
li°
Ë((*)(÷i°)->
¥ev
))

	)

83 
	#_PREVASGN
(
ñt
,
li°
,
to
Ë{ **
_Æüs
 = (**)&(÷i°)->
¥ev
); *_Æüs=(*)—o); }

	)

84 
	#_RS
(
li°
Ë{ **
_Æüs
 = (**)&÷i°); *_Æüs=
_tmp
; }

	)

85 
	#_CASTASGN
(
a
,
b
Ë{ **
_Æüs
 = (**)&◊); *_Æüs=(*)(b); }

	)

87 
	#_SV
(
ñt
,
li°
)

	)

88 
	#_NEXT
(
ñt
,
li°
Ë(”…)->
√xt
)

	)

89 
	#_NEXTASGN
(
ñt
,
li°
,
to
Ë(”…)->
√xt
)=—o)

	)

90 
	#_PREV
(
ñt
,
li°
Ë(”…)->
¥ev
)

	)

91 
	#_PREVASGN
(
ñt
,
li°
,
to
Ë(”…)->
¥ev
)=—o)

	)

92 
	#_RS
(
li°
)

	)

93 
	#_CASTASGN
(
a
,
b
Ë◊)=(b)

	)

100 
	#LL_SORT
(
li°
, 
cmp
) \

102 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

103 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

104 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

105 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

106 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

107 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

108 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

109 i‡(
li°
) { \

110 
_ls_ösize
 = 1; \

111 
_ls_lo›ög
 = 1; \

112 
_ls_lo›ög
) { \

113 
	`_CASTASGN
(
_ls_p
,
li°
); \

114 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

115 
li°
 = 
NULL
; \

116 
_ls_èû
 = 
NULL
; \

117 
_ls_nmîges
 = 0; \

118 
_ls_p
) { \

119 
_ls_nmîges
++; \

120 
_ls_q
 = 
_ls_p
; \

121 
_ls_psize
 = 0; \

122 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

123 
_ls_psize
++; \

124 
	`_SV
(
_ls_q
,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
(list); \

125 i‡(!
_ls_q
) ; \

127 
_ls_qsize
 = 
_ls_ösize
; \

128 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

129 i‡(
_ls_psize
 == 0) { \

130 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

131 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

132 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

133 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

134 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

136 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

138 i‡(
_ls_èû
) { \

139 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

141 
	`_CASTASGN
(
li°
,
_ls_e
); \

143 
_ls_èû
 = 
_ls_e
; \

145 
_ls_p
 = 
_ls_q
; \

147 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
NULL
); 
	`_RS
(list); \

148 i‡(
_ls_nmîges
 <= 1) { \

149 
_ls_lo›ög
=0; \

151 
_ls_ösize
 *= 2; \

153 } 
_tmp
=
NULL
; \

154 } 0)

	)

156 
	#DL_SORT
(
li°
, 
cmp
) \

158 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

159 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

160 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

161 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

162 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

163 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

164 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

165 i‡(
li°
) { \

166 
_ls_ösize
 = 1; \

167 
_ls_lo›ög
 = 1; \

168 
_ls_lo›ög
) { \

169 
	`_CASTASGN
(
_ls_p
,
li°
); \

170 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

171 
li°
 = 
NULL
; \

172 
_ls_èû
 = 
NULL
; \

173 
_ls_nmîges
 = 0; \

174 
_ls_p
) { \

175 
_ls_nmîges
++; \

176 
_ls_q
 = 
_ls_p
; \

177 
_ls_psize
 = 0; \

178 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

179 
_ls_psize
++; \

180 
	`_SV
(
_ls_q
,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
(list); \

181 i‡(!
_ls_q
) ; \

183 
_ls_qsize
 = 
_ls_ösize
; \

184 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

185 i‡(
_ls_psize
 == 0) { \

186 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

187 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

188 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

189 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

190 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

192 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

194 i‡(
_ls_èû
) { \

195 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

197 
	`_CASTASGN
(
li°
,
_ls_e
); \

199 
	`_SV
(
_ls_e
,
li°
); 
	`_PREVASGN
(_ls_e,li°,
_ls_èû
); 
	`_RS
(list); \

200 
_ls_èû
 = 
_ls_e
; \

202 
_ls_p
 = 
_ls_q
; \

204 
	`_CASTASGN
(
li°
->
¥ev
, 
_ls_èû
); \

205 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
NULL
); 
	`_RS
(list); \

206 i‡(
_ls_nmîges
 <= 1) { \

207 
_ls_lo›ög
=0; \

209 
_ls_ösize
 *= 2; \

211 } 
_tmp
=
NULL
; \

212 } 0)

	)

214 
	#CDL_SORT
(
li°
, 
cmp
) \

216 
	`LDECLTYPE
(
li°
Ë
_ls_p
; \

217 
	`LDECLTYPE
(
li°
Ë
_ls_q
; \

218 
	`LDECLTYPE
(
li°
Ë
_ls_e
; \

219 
	`LDECLTYPE
(
li°
Ë
_ls_èû
; \

220 
	`LDECLTYPE
(
li°
Ë
_ls_ﬁdhód
; \

221 
	`LDECLTYPE
(
li°
Ë
_tmp
; \

222 
	`LDECLTYPE
(
li°
Ë
_tmp2
; \

223 
_ls_ösize
, 
_ls_nmîges
, 
_ls_psize
, 
_ls_qsize
, 
_ls_i
, 
_ls_lo›ög
; \

224 i‡(
li°
) { \

225 
_ls_ösize
 = 1; \

226 
_ls_lo›ög
 = 1; \

227 
_ls_lo›ög
) { \

228 
	`_CASTASGN
(
_ls_p
,
li°
); \

229 
	`_CASTASGN
(
_ls_ﬁdhód
,
li°
); \

230 
li°
 = 
NULL
; \

231 
_ls_èû
 = 
NULL
; \

232 
_ls_nmîges
 = 0; \

233 
_ls_p
) { \

234 
_ls_nmîges
++; \

235 
_ls_q
 = 
_ls_p
; \

236 
_ls_psize
 = 0; \

237 
_ls_i
 = 0; _ls_ò< 
_ls_ösize
; _ls_i++) { \

238 
_ls_psize
++; \

239 
	`_SV
(
_ls_q
,
li°
); \

240 i‡(
	`_NEXT
(
_ls_q
,
li°
Ë=
_ls_ﬁdhód
) { \

241 
_ls_q
 = 
NULL
; \

243 
_ls_q
 = 
	`_NEXT
(_ls_q,
li°
); \

245 
	`_RS
(
li°
); \

246 i‡(!
_ls_q
) ; \

248 
_ls_qsize
 = 
_ls_ösize
; \

249 
_ls_psize
 > 0 || (
_ls_qsize
 > 0 && 
_ls_q
)) { \

250 i‡(
_ls_psize
 == 0) { \

251 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

252 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

253 } i‡(
_ls_qsize
 =0 || !
_ls_q
) { \

254 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

255 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

256 } i‡(
	`cmp
(
_ls_p
,
_ls_q
) <= 0) { \

257 
_ls_e
 = 
_ls_p
; 
	`_SV
(_ls_p,
li°
); _ls_∞
	`_NEXT
(_ls_p,li°); 
	`_RS
÷i°); 
_ls_psize
--; \

258 i‡(
_ls_p
 =
_ls_ﬁdhód
Ë{ _ls_∞
NULL
; } \

260 
_ls_e
 = 
_ls_q
; 
	`_SV
(_ls_q,
li°
); _ls_q = 
	`_NEXT
(_ls_q,li°); 
	`_RS
÷i°); 
_ls_qsize
--; \

261 i‡(
_ls_q
 =
_ls_ﬁdhód
Ë{ _ls_q = 
NULL
; } \

263 i‡(
_ls_èû
) { \

264 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_ls_e
); 
	`_RS
(list); \

266 
	`_CASTASGN
(
li°
,
_ls_e
); \

268 
	`_SV
(
_ls_e
,
li°
); 
	`_PREVASGN
(_ls_e,li°,
_ls_èû
); 
	`_RS
(list); \

269 
_ls_èû
 = 
_ls_e
; \

271 
_ls_p
 = 
_ls_q
; \

273 
	`_CASTASGN
(
li°
->
¥ev
,
_ls_èû
); \

274 
	`_CASTASGN
(
_tmp2
,
li°
); \

275 
	`_SV
(
_ls_èû
,
li°
); 
	`_NEXTASGN
(_ls_èû,li°,
_tmp2
); 
	`_RS
(list); \

276 i‡(
_ls_nmîges
 <= 1) { \

277 
_ls_lo›ög
=0; \

279 
_ls_ösize
 *= 2; \

281 } 
_tmp
=
NULL
; \

282 } 0)

	)

287 
	#LL_PREPEND
(
hód
,
add
) \

289 (
add
)->
√xt
 = 
hód
; \

290 
hód
 = 
add
; \

291 } 0)

	)

293 
	#LL_APPEND
(
hód
,
add
) \

295 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

296 (
add
)->
√xt
=
NULL
; \

297 i‡(
hód
) { \

298 
_tmp
 = 
hód
; \

299 
_tmp
->
√xt
) { _tmp = _tmp->next; } \

300 
_tmp
->
√xt
=(
add
); \

302 (
hód
)=(
add
); \

304 } 0)

	)

306 
	#LL_DELETE
(
hód
,
dñ
) \

308 
	`LDECLTYPE
(
hód
Ë
_tmp
; \

309 i‡((
hód
Ë=(
dñ
)) { \

310 (
hód
)=(hód)->
√xt
; \

312 
_tmp
 = 
hód
; \

313 
_tmp
->
√xt
 && (_tmp->√xà!(
dñ
))) { \

314 
_tmp
 = _tmp->
√xt
; \

316 i‡(
_tmp
->
√xt
) { \

317 
_tmp
->
√xt
 = ((
dñ
)->next); \

320 } 0)

	)

323 
	#LL_APPEND_VS2008
(
hód
,
add
) \

325 i‡(
hód
) { \

326 (
add
)->
√xt
 = 
hód
; \

327 (
add
)->
√xt
->next) { (add)->next = (add)->next->next; } \

328 (
add
)->
√xt
->next=(add); \

330 (
hód
)=(
add
); \

332 (
add
)->
√xt
=
NULL
; \

333 } 0)

	)

335 
	#LL_DELETE_VS2008
(
hód
,
dñ
) \

337 i‡((
hód
Ë=(
dñ
)) { \

338 (
hód
)=(hód)->
√xt
; \

340 *
_tmp
 = (*)(
hód
); \

341 
hód
->
√xt
 && (hód->√xà!(
dñ
))) { \

342 
hód
 = hód->
√xt
; \

344 i‡(
hód
->
√xt
) { \

345 
hód
->
√xt
 = ((
dñ
)->next); \

348 **
_hód_Æüs
 = (**)&(
hód
); \

349 *
_hód_Æüs
 = 
_tmp
; \

352 } 0)

	)

353 #ifde‡
NO_DECLTYPE


354 #unde‡
LL_APPEND


355 
	#LL_APPEND
 
LL_APPEND_VS2008


	)

356 #unde‡
LL_DELETE


357 
	#LL_DELETE
 
LL_DELETE_VS2008


	)

361 
	#LL_FOREACH
(
hód
,
ñ
) \

362 
ñ
=
hód
;ñ;ñÛl->
√xt
)

	)

364 
	#LL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

365 (
ñ
)=(
hód
);”lË&& (
tmp
 = (ñ)->
√xt
, 1); (ñËtmp)

	)

367 
	#LL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

369 
	`LL_FOREACH
(
hód
,
out
) { \

370 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

372 } 0)

	)

374 
	#LL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

376 
	`LL_FOREACH
(
hód
,
out
) { \

377 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

379 } 0)

	)

384 
	#DL_PREPEND
(
hód
,
add
) \

386 (
add
)->
√xt
 = 
hód
; \

387 i‡(
hód
) { \

388 (
add
)->
¥ev
 = (
hód
)->prev; \

389 (
hód
)->
¥ev
 = (
add
); \

391 (
add
)->
¥ev
 = (add); \

393 (
hód
Ë(
add
); \

394 } 0)

	)

396 
	#DL_APPEND
(
hód
,
add
) \

398 i‡(
hód
) { \

399 (
add
)->
¥ev
 = (
hód
)->prev; \

400 (
hód
)->
¥ev
->
√xt
 = (
add
); \

401 (
hód
)->
¥ev
 = (
add
); \

402 (
add
)->
√xt
 = 
NULL
; \

404 (
hód
)=(
add
); \

405 (
hód
)->
¥ev
 = (head); \

406 (
hód
)->
√xt
 = 
NULL
; \

408 } 0);

	)

410 
	#DL_DELETE
(
hód
,
dñ
) \

412 i‡((
dñ
)->
¥ev
 == (del)) { \

413 (
hód
)=
NULL
; \

414 } i‡((
dñ
)==(
hód
)) { \

415 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

416 (
hód
Ë(
dñ
)->
√xt
; \

418 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

419 i‡((
dñ
)->
√xt
) { \

420 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

422 (
hód
)->
¥ev
 = (
dñ
)->prev; \

425 } 0);

	)

428 
	#DL_FOREACH
(
hód
,
ñ
) \

429 
ñ
=
hód
;ñ;ñÛl->
√xt
)

	)

432 
	#DL_FOREACH_SAFE
(
hód
,
ñ
,
tmp
) \

433 (
ñ
)=(
hód
);”lË&& (
tmp
 = (ñ)->
√xt
, 1); (ñËtmp)

	)

436 
	#DL_SEARCH_SCALAR
 
LL_SEARCH_SCALAR


	)

437 
	#DL_SEARCH
 
LL_SEARCH


	)

442 
	#CDL_PREPEND
(
hód
,
add
) \

444 i‡(
hód
) { \

445 (
add
)->
¥ev
 = (
hód
)->prev; \

446 (
add
)->
√xt
 = (
hód
); \

447 (
hód
)->
¥ev
 = (
add
); \

448 (
add
)->
¥ev
->
√xt
 = (add); \

450 (
add
)->
¥ev
 = (add); \

451 (
add
)->
√xt
 = (add); \

453 (
hód
)=(
add
); \

454 } 0)

	)

456 
	#CDL_DELETE
(
hód
,
dñ
) \

458 i‡–((
hód
)==(
dñ
)Ë&& ((hód)->
√xt
 == (head))) { \

459 (
hód
) = 0L; \

461 (
dñ
)->
√xt
->
¥ev
 = (del)->prev; \

462 (
dñ
)->
¥ev
->
√xt
 = (del)->next; \

463 i‡((
dñ
Ë=(
hód
)Ë(hód)=(dñ)->
√xt
; \

465 } 0);

	)

467 
	#CDL_FOREACH
(
hód
,
ñ
) \

468 
ñ
=
hód
;ñ;ñ=”l->
√xt
==hód ? 0L :Él->√xt))

	)

470 
	#CDL_FOREACH_SAFE
(
hód
,
ñ
,
tmp1
,
tmp2
) \

471 (
ñ
)=(
hód
), ((
tmp1
)=(hód)?((hód)->
¥ev
):
NULL
); \

472 (
ñ
Ë&& ((
tmp2
)=”l)->
√xt
, 1); \

473 ((
ñ
Ë((”l)==(
tmp1
)Ë? 0L : (
tmp2
))))

	)

475 
	#CDL_SEARCH_SCALAR
(
hód
,
out
,
fõld
,
vÆ
) \

477 
	`CDL_FOREACH
(
hód
,
out
) { \

478 i‡((
out
)->
fõld
 =(
vÆ
)) ; \

480 } 0)

	)

482 
	#CDL_SEARCH
(
hód
,
out
,
ñt
,
cmp
) \

484 
	`CDL_FOREACH
(
hód
,
out
) { \

485 i‡((
	`cmp
(
out
,
ñt
))==0) ; \

487 } 0)

	)

	@include_lib/net/turing/turing.h

1 #i‚de‡
_TURING_H_


2 
	#_TURING_H_


	)

5 
	~"sock_≠i/sock_≠i.h
"

6 
	~"js⁄_c/js⁄_tokíî.h
"

10 
	#TURING_DEBUG


	)

11 #ifde‡ 
TURING_DEBUG


13 
	#TR_DEBUG_E
(...Ë
	`¥ötf
("[ERROR] i¿func:%†löe:%d ", 
__func__
, 
__LINE__
), \

14 
	`¥ötf
(
__VA_ARGS__
), \

15 
	`¥ötf
("\r\n");

	)

17 
	#TR_DEBUG_I
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

21 
	#TR_DEBUG_E
(...)

	)

22 
	#TR_DEBUG_I
(...)

	)

28 
	mASR_PCM_16K_16BIT
,

29 
	mASR_PCM_8K_16BIT
,

30 
	mASR_AMR_8K_16BIT
,

31 
	mASR_AMR_16K_16BIT
,

32 
	mASR_OPUS
,

33 
	mASR_SPEEX
,

34 } 
	tASR_TYPE
;

37 
	mTTS_PCM_8K_16BIT
,

38 
	mTTS_MP3_64
,

39 
	mTTS_MP3_24
,

40 
	mTTS_MP3_16
,

41 
	mTTS_AMR_NB
,

42 } 
	tTTS_TYPE
;

45 
	mNOT_OUTPUT_TXT
,

46 
	mOUTPUT_ASR_TXT
,

47 
	mOUTPUT_TTS_TXT
,

48 
	mOUTPUT_ARS_TTS_TXT
,

49 } 
	tOUT_TXT
;

52 
	mNOT_STREAM_IDENTIFY
,

53 
	mSTREAM_IDENTIFY
,

54 } 
	tSTREAM_CTL
;

57 
	mNORMAL_ENCODE
,

58 
	mCUSTORM_ENCODE
,

59 } 
	tENCODE_MODE
;

62 
	mSMARTCHAT
,

63 
	mACTIVE_INTERACTION
,

64 
	mMARKED_WORDS
,

65 } 
	tMUTUAL_TYPE
;

67 
	eturög_sdk_evíts
 {

68 
	mTURING_SPEAK_END
 = 0x01,

69 
	mTURING_MEDIA_END
 = 0x02,

70 
	mTURING_PLAY_PAUSE
 = 0x03,

71 
	mTURING_PREVIOUS_SONG
 = 0x04,

72 
	mTURING_NEXT_SONG
 = 0x05,

73 
	mTURING_VOLUME_CHANGE
 = 0X06,

74 
	mTURING_VOLUME_INCR
 = 0x07,

75 
	mTURING_VOLUME_DECR
 = 0x08,

76 
	mTURING_VOLUME_MUTE
 = 0x09,

77 
	mTURING_RECORD_START
 = 0x0a,

78 
	mTURING_RECORD_SEND
 = 0x0b,

79 
	mTURING_RECORD_STOP
 = 0x0c,

80 
	mTURING_VOICE_MODE
 = 0x0d,

81 
	mTURING_MEDIA_STOP
 = 0x0e,

82 
	mTURING_BIND_DEVICE
 = 0x0f,

83 
	mTURING_RECORD_ERR
 = 0x10,

84 
	mTURING_QUIT
 = 0xff,

88 
	mTURING_EVENT_OPEN
,

89 
	mTURING_EVENT_CLOSE
,

90 
	mTURING_EVENT_START
,

91 
	mTURING_EVENT_STOP
,

92 
	mTURING_EVENT_NLP_URL
,

93 
	mTURING_EVENT_ERR_SEND
,

94 
	mTURING_EVENT_ERR_CODE
,

96 
	mTURING_EVENT_NOT_FUNC
,

98 
	mTURING_EVENT_FUN_CHAT
 = 20000,

99 
	mTURING_EVENT_FUN_SLEEP_CTL
 = 20001,

100 
	mTURING_EVENT_FUN_VOL_CTL
 = 20002,

101 
	mTURING_EVENT_FUN_WEATHER_INQUIRE
 = 20003,

102 
	mTURING_EVENT_FUN_TIME_INQUIRE
 = 20005,

103 
	mTURING_EVENT_FUN_CALCULATOR
 = 20006,

104 
	mTURING_EVENT_FUN_PLAY_MUSIC
 = 20007,

105 
	mTURING_EVENT_FUN_PLAY_STORY
 = 20008,

106 
	mTURING_EVENT_FUN_POETRY
 = 20009,

107 
	mTURING_EVENT_FUN_ANIMAL_SOUND
 = 20011,

108 
	mTURING_EVENT_FUN_KNOWLEDGE
 = 20012,

109 
	mTURING_EVENT_FUN_PHONE_CALL
 = 20013,

110 
	mTURING_EVENT_FUN_GUESS_SOUND
 = 20014,

111 
	mTURING_EVENT_FUN_TRANSLATION
 = 20015,

112 
	mTURING_EVENT_FUN_DANCE
 = 20016,

113 
	mTURING_EVENT_FUN_ENGLISHSPEAK
 = 20018,

114 
	mTURING_EVENT_FUN_INSTRUMENT
 = 20019,

115 
	mTURING_EVENT_FUN_NATURE_SOUND
 = 20020,

116 
	mTURING_EVENT_FUN_SCREEN_LIGHT
 = 20021,

117 
	mTURING_EVENT_FUN_BATTERY_CHECK
 = 20022,

118 
	mTURING_EVENT_FUN_SPORT_CTL
 = 20023,

119 
	mTURING_EVENT_FUN_PHOTO_CTL
 = 20024,

120 
	mTURING_EVENT_FUN_ALARM_CTL
 = 20025,

121 
	mTURING_EVENT_FUN_OPEN_APP
 = 20026,

122 
	mTURING_EVENT_FUN_KNOWLEDGE_REPOSITORY
 = 20027,

123 
	mTURING_EVENT_FUN_ACTIVE_INTERACTION
 = 29998,

124 
	mTURING_EVENT_FUN_PROMPT_TONE
 = 29999,

128 
	mTURING_FUN_PLAY_OPR_NOR
 = 1000,

129 
	mTURING_FUN_PLAY_OPR_PREV
 = 2005,

130 
	mTURING_FUN_PLAY_OPR_NEXT
 = 2006,

131 
	mTURING_FUN_PLAY_OPR_STOP
 = 2002,

132 
	mTURING_FUN_PLAY_OPR_CYCLE
 = 3002,

133 
	mTURING_FUN_PLAY_OPR_PAUSE
 = 1200,

134 
	mTURING_FUN_PLAY_OPR_CONTINUE
 = 1300,

138 
	mTURING_ERR_NON
,

139 
	mTURING_ERR_MALLOC
,

140 
	mTURING_ERR_ENC_INIT
,

141 
	mTURING_ERR_ENC_OPEN
,

142 
	mTURING_ERR_ENC_START
,

143 
	mTURING_ERR_ENC_PAUSE
,

144 
	mTURING_ERR_ENC_STOP
,

145 
	mTURING_ERR_ENC_WRITE
,

146 
	mTURING_ERR_POINT_NULL
,

147 
	mTURING_ERR_THREAD_FORK
,

148 
	mTURING_ERR_SOCKET_FD
,

149 
	mTURING_ERR_BIND
,

150 
	mTURING_ERR_HOST_IP
,

151 
	mTURING_ERR_CONNECT
,

152 
	mTURING_ERR_SEND_DATA
,

153 
	mTURING_ERR_HTTP_CODE
,

154 } 
	tTURING_ERR
;

156 
	sturög_∑ø
 {

157 
u8
 
	ma§
;

158 
u8
 
	mâs
;

159 
u8
 
	mÊag
;

160 
u8
 
	mªÆ_time
;

161 
	mödex
;

162 
u8
 
	mícode
;

163 
u8
 
	mty≥
;

164 
u8
 
	m•ìd
;

165 
u8
 
	mpôch
;

166 
u8
 
	mt⁄e
;

167 
u8
 
	mvﬁume
;

168 
u8
 
	ma§_œn
;

169 
u8
 
	mâs_œn
;

170 
	midítify
[20];

171 
	mtokí
[65];

172 
	mu£r_id
[17];

173 
	m´s_key
[17];

174 
	m≠i_key
[33];

178 
turög_≠p_öô
();

179 
turög_≠p_unöô
();

180 
turög_ªc‹dî_°¨t
(
u16
 
ßm∂e_øã
);

181 
turög_ªc‹dî_°›
();

182 
JL_turög_medü_•ók_∂ay
(c⁄° *
uæ
);

183 
JL_turög_medü_audio_∂ay
(c⁄° *
uæ
);

184 
JL_turög_wech©_•ók_∂ay
(c⁄° *
uæ
);

185 
£t_turög_∑ø
(
turög_∑ø
 *
∑ø
, 
u32
 
timeout
, (*
cb
)(, 
js⁄_obje˘
 *));

186 
	`£t_turög_medü_uæ
(c⁄° *
uæ
);

187 
u8
 
	`gë_turög_msg_nŸify
();

	@include_lib/net/web_socket/websocket_api.h

2 #i‚de‡
WEBSOCKET_API_H


3 
	#WEBSOCKET_API_H


	)

6 
	~"websockë_deföe.h
"

7 
	~"websockë_ba£64.h
"

8 
	~"websockë_sha_1.h
"

9 
	~"websockë_öéib.h
"

10 
	~"websockë_≠i.h
"

11 
	~"°rög.h
"

13 
	~"os/os_com∑t.h
"

14 
	~"mbedés/mbedés_c⁄fig.h
"

16 
	~"mbedés/√t.h
"

19 
	~"mbedés/íå›y.h
"

20 
	~"mbedés/˘r_drbg.h
"

21 
	~"mbedés/îr‹.h
"

22 
	~"gíîic/ty≥def.h
"

23 
	~"mbedés/˚πs.h
"

24 
	~"lwù/sockës.h
"

25 
	~"lwù/öë.h
"

26 
	~"lwù/√tdb.h
"

29 
	#websockës_¶ìp
 
m¶ìp


	)

33 
	mNO_MSG
 = 0,

34 
	mERCV_DATA_MSG
,

35 
	mCLIENT_SEND_DATA_MSG
,

36 
	mCLIENT_RECV_DATA_MSG
,

37 
	mSERVER_SEND_DATA_MSG
,

38 
	mSERVER_ERCV_DATA_MSG
,

39 
	mCLIENT_PING_MSG
,

40 
	mCLIENT_PONG_MSG
,

41 
	mSERVER_PING_MSG
,

42 
	mSERVER_PONG_MSG
,

44 
	mRECV_TIME_OUT_MSG
,

45 
	mDISCONNECT_MSG
,

46 
	mCONNECT_RST_MSG
,

48 
	mMAX_MSG
 = 32,

55 
	mWCT_SEQ
 = 0x00,

56 
	mWCT_TXTDATA
 = 0x01,

57 
	mWCT_BINDATA
 = 0x02,

58 
	mWCT_DISCONN
 = 0x08,

59 
	mWCT_PING
 = 0x09,

60 
	mWCT_PONG
 = 0x0a,

61 
	mWCT_END
 = 0x10,

62 
	mWCT_CLOSE_OK
 = 0xaa,

63 } 
	tWS_CMD_Ty≥
;

66 
	swebsockës_mbedés
 {

68 
mbedés_√t_c⁄ãxt
 
	m£rvî_fd
;

69 
mbedés_íå›y_c⁄ãxt
 
	míå›y
;

70 
mbedés_˘r_drbg_c⁄ãxt
 
	m˘r_drbg
;

71 
mbedés_s¶_c⁄ãxt
 
	ms¶
;

72 
mbedés_s¶_c⁄fig
 
	mc⁄f
;

73 
mbedés_x509_¸t
 
	mˇ˚π
;

74 
	ms¶_fd
;

77 
u8
 
	m¶l_ù_addr
[16];

78 
mbedés_√t_c⁄ãxt
 
	m˛õ¡_fd
;

79 
mbedés_x509_¸t
 
	m§v˚π
;

80 
mbedés_pk_c⁄ãxt
 
	mpkey
;

82 } 
	tWEBSOCKETS_MBTLS_INFO
;

85 
	swebsockë_ªq_hód
 {

86 
u8
 
	mmedthod
[4];

87 
u8
 
	mfûe
[128];

88 
u8
 
	mho°
[32];

89 
u8
 
	mvîsi⁄
[8];

92 
	swebsockë_°ru˘
 {

93 
	msk_fd
;

94 
	ml°_fd
;

95 
	mpög_thªad_id
;

96 
	mªcv_thªad_id
;

97 
	mwebsockë_mode
;

98 
sockaddr_ö
 
	m£rvaddr
;

99 
sockaddr_ö
 
	m˛õ¡addr
;

100 
u8
 *
	mù_‹_uæ
;

101 
	mp‹t
;

102 
u8
 
	mù_addr
[16];

103 
u8
 
	mkey
[32];

104 
u8
 *
	m£nd_buf
;

105 
u8
 *
	mªcv_buf
;

106 
u64
 
	m£nd_Àn
;

107 
u64
 
	mªcv_Àn
;

108 
websockë_ªq_hód
 
	mªq_hód
;

110 
websockës_mbedés
 
	mwebsockës_mbés_öfo
;

112 (*
	m_öô
)(
websockë_°ru˘
 *
	mwebsockë_öfo
);

113 (*
	m_exô
)(
websockë_°ru˘
 *
	mwebsockë_öfo
);

114 (*
	m_h™dshack
)(
websockë_°ru˘
 *
	mwebsockë_öfo
);

115 (*
	m_hóπ_thªad
)(*
	m∑øm
);

116 (*
	m_ªcv_thªad
)(*
	m∑øm
);

117 (*
	m_ªcv
)(
websockë_°ru˘
 *
	mwebsockë_öfo
);

118 (*
	m_£nd
)(
websockë_°ru˘
 *
	mwebsockë_öfo
, 
u8
 *
	mbuf
, 
	mÀn
);

119 (*
	m_ªcv_cb
)(
u8
 *
	mbuf
, 
u32
 
	mÀn
);

121 } 
	gWEBSOCKET_INFO
;

126 
©oi
(c⁄° *
__≈å
);

127 
Gë_IPAddªss
(
u8
 
is_wúñess
, *
ùaddr
) ;

128 
§™d
(
£ed
);

129 
ønd
();

131 
websockë_msg_fifo
(
u8
 
msg
);

132 
u8
 
websockë_msg_gë
();

133 
websockë_msg_˛ór
();

136 
websockës_p⁄g_hóπ_bót
(
websockë_°ru˘
 *
websockës_öfo
, 
u8
 *
buf
, 
ödex
);

137 
websockës_pög_hóπ_bót
(
websockë_°ru˘
 *
websockës_öfo
, 
u8
 *
buf
, 
ödex
);

138 
websockës_˛õ¡_sockë_hóπ_thªad
(*
∑øm
);

139 
websockës_˛õ¡_sockë_ªcv_thªad
(*
∑øm
);

140 
websockës_˛õ¡_sockë_exô
(
websockë_°ru˘
 *
websockë_öfo
);

141 
websockës_˛õ¡_sockë_£nd
(
websockë_°ru˘
 *
websockë_öfo
, 
u8
 *
buf
, 
Àn
);

142 
websockës_˛õ¡_sockë_ªcv
(
websockë_°ru˘
 *
websockë_öfo
);

143 
webcockës_˛õ¡_sockë_h™dshack
(
websockë_°ru˘
 *
websockë_öfo
);

144 
websockës_˛õ¡_sockë_öô
(
websockë_°ru˘
 *
websockë_öfo
);

147 
websockës_˛õ¡_ªg
(
websockë_°ru˘
 *
websockë_öfo
, 
mode
);

148 
websockës_˛õ¡_öô
(
websockë_°ru˘
 *
websockë_öfo
, 
u8
 *
uæ
);

149 
websockës_˛õ¡_h™dshack
(
websockë_°ru˘
 *
websockë_öfo
);

150 
websockës_˛õ¡_£nd
(
websockë_°ru˘
 *
websockë_öfo
, 
u8
 *
buf
, 
Àn
);

151 
websockës_˛õ¡_exô
(
websockë_°ru˘
 *
websockë_öfo
);

155 
websockës_£rv_sockë_hóπ_thªad
(*
∑øm
);

156 
websockës_£rv_sockë_ªcv
(
websockë_°ru˘
 *
websockës_öfo
);

157 
websockës_£rv_sockë_£nd
(
websockë_°ru˘
 *
websockës_öfo
, 
u8
 *
buf
, 
Àn
);

158 
websockës_£rv_sockë_exô
(
websockë_°ru˘
 *
websockës_öfo
);

159 
websockës_£rv_sockë_h™shack
(
websockë_°ru˘
 *
websockës_öfo
);

160 
websockës_£rv_sockë_öô
(
websockë_°ru˘
 *
websockës_öfo
);

162 
websockës_£rv_ªg
(
websockë_°ru˘
 *
websockës_öfo
, 
mode
);

163 
websockës_£rv_öô
(
websockë_°ru˘
 *
websockës_öfo
, 
p‹t
);

164 
websockës_£rv_h™shack
(
websockë_°ru˘
 *
websockës_öfo
);

165 
websockës_£rv_£nd
(
websockë_°ru˘
 *
websockës_öfo
, 
u8
 *
buf
, 
Àn
);

166 
websockës_£rv_ªcv
(
websockë_°ru˘
 *
websockës_öfo
);

167 
websockës_£rv_exô
(
websockë_°ru˘
 *
websockës_öfo
);

170 
websockë_˛õ¡_thªad_¸óã
();

171 
websockë_£rv_thªad_¸óã
();

	@include_lib/net/web_socket/websocket_base64.h

1 #i‚de‡
_BASE64_H_


2 
	#_BASE64_H_


	)

4 
	~"gíîic/ty≥def.h
"

6 *
ba£64_ícode
(c⁄° *
§c
, 
Àn
, *
out_Àn
);

7 *
ba£64_decode
(c⁄° *
§c
, 
Àn
, *
out_Àn
);

	@include_lib/net/web_socket/websocket_define.h

2 #i‚de‡
WEBSOCKET_DEF_H


3 
	#WEBSOCKET_DEF_H


	)

5 
	~"°rög.h
"

7 
	tu8
;

8 
	tu16
;

9 
	tu32
;

10 
	tu64
;

12 
	#BIT
(
n
Ë(1UL << (n))

	)

14 #i‚de‡
MIN


15 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

18 #i‚de‡
MAX


19 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

23 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

27 
	#WEBSOCKET_MODE
 0

28 
	#WEBSOCKETS_MODE
 1

29 

	)

32 
	#CLIENNT_CHECK_INDEX
 0

	)

33 
	#SERVER_CHECK_INDEX
 1

	)

35 
	#SERVER_MASK_DISEN
 3

	)

36 
	#CLIENNT_MASK_EN
 4

	)

38 
	#HAND_SHAKE_BUF_MAX
 2048

	)

39 
	#REQUEST_LEN_MAX
 1462

	)

40 
	#FRAME_LEN_MAX
 1462

	)

41 
	#ALL_FRAME_MAX
 1462*5

	)

42 
	#DEFEULT_SERVER_PORT
 8000

	)

43 
	#WEB_SOCKET_KEY_LEN_MAX
 1024

	)

44 
	#RESPONSE_HEADER_LEN_MAX
 1024

	)

45 
	#LINE_MAX
 256

	)

47 
	#WEBSOCKET_MAIN_THREAD_STK_SIZE
 1024

	)

48 
	#WEBSOCKET_CLI_THREAD_STK_SIZE
 1024

	)

50 
	#websockë_sockë_f‹˚_˛o£
(
sk_fd
Ë{
	`shutdown
(sk_fd,2);
	`˛o£sockë
(sk_fd);sk_fd=0;}

	)

52 *
websockë_∑ckD©a
(
u8
 *
buf
, 
u64
 *
Àn
, 
ty≥
, 
mask_í
);

	@include_lib/net/web_socket/websocket_intlib.h

1 #i‚de‡
_INT_LIB_H_


2 
	#_INT_LIB_H_


	)

5 
	~"gíîic/ty≥def.h
"

7 
tﬁowî
(
c
) ;

9 
htoi
(c⁄° 
s
[], 
°¨t
, 
Àn
);

	@include_lib/net/web_socket/websocket_sha_1.h

2 #i‚de‡
_SHA1_H_


3 
	#_SHA1_H_


	)

5 
	~"gíîic/ty≥def.h
"

8 
	sSHA1C⁄ãxt
 {

9 
	mMesßge_Dige°
[5];

10 
	mLígth_Low
;

11 
	mLígth_High
;

12 
	mMesßge_Block
[64];

13 
	mMesßge_Block_Index
;

14 
	mCompuãd
;

15 
	mC‹ru±ed
;

16 } 
	tSHA1C⁄ãxt
;

18 
SHA1Re£t
(
SHA1C⁄ãxt
 *);

19 
SHA1Resu…
(
SHA1C⁄ãxt
 *);

20 
SHA1I≈ut
(
SHA1C⁄ãxt
 *, const *, );

22 *
sha1_hash
(c⁄° *
sour˚
);

24 
	#SHA1CúcuœrShi·
(
bôs
,
w‹d
Ë((((w‹dË<< (bôs)Ë& 0xFFFFFFFFË| ((w‹dË>> (32-(bôs))))

	)

26 
SHA1Pro˚ssMesßgeBlock
(
SHA1C⁄ãxt
 *);

27 
SHA1PadMesßge
(
SHA1C⁄ãxt
 *);

	@include_lib/net/web_socket/websocket_ssl.h

1 #i‚de‡
WEBSOCKET_SSL_H


2 
	#WEBSOCKET_SSL_H


	)

4 
	~"websockë_deföe.h
"

5 
	~"websockë_≠i.h
"

35 
websockës_mbés_˛õ¡_öô
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

36 
websockës_mbés_˛õ¡_c⁄√˘
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
u8
 *
ho°
, 
p‹t
);

37 
websockës_mbés_˛õ¡_h™dshack
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

38 
websockës_mbés_˛õ¡_wrôe
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
u8
 *
buf
, 
u64
 *
Àn
, 
ty≥
);

39 
websockës_mbés_˛õ¡_ªad
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
u8
 *
buf
, 
Àn
);

40 
websockës_mbés_˛õ¡_˛o£
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

41 
websockës_mbés_˛õ¡_exô
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

44 
websockë_mbedés_£rv_öô
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

45 
websockë_mbedés_£rv_böd
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
p‹t
);

46 
websockë_mbedés_£rv_ac˚±
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

47 
websockës_mbés_£rv_wrôe
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
u8
 *
buf
, 
u64
 *
Àn
, 
ty≥
);

48 
websockës_mbés_£rv_ªad
(
websockës_mbedés
 *
wbsk_mbés_öfo
, 
u8
 *
buf
, 
Àn
);

49 
websockës_mbés_£rv_˛o£
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

50 
websockës_mbés_£rv_exô
(
websockës_mbedés
 *
wbsk_mbés_öfo
);

	@include_lib/net/wechat/dev_net_mqtt.h

1 #i‚de‡
__DEV_NET_MQTT_H


2 
	#__DEV_NET_MQTT_H


	)

4 
	~"ty≥def.h
"

6 (*
	tjl_mqâ_func
)(c⁄° *
	tcmd
, c⁄° *
	t∑rm
);

7 
	`dev_mqâ_msg_cb_ªg
(
jl_mqâ_func
 
sys
, jl_mqâ_fun¯
u£r
);

9 
	`dev_mqâ_push
(*
msg_«me
, *
buf
, 
buf_Àn
);

10 
	`dev_mqâ_push_°©us
(*
°©us_cmd
, *
°©us_∑rm
);

11 
	`dev_mqâ_push_∂ayli°
(*
°©us_cmd
, *
°©us_∑rm
);

	@include_lib/net/wechat/dev_net_oauth.h

2 #i‚de‡
__DEV_NET_OAUTH_H


3 
	#__DEV_NET_OAUTH_H


	)

5 
	~"ty≥def.h
"

10 
≠p_ch©_£nd_voi˚_buf„r
(*
buf„r
, 
u32
 
Àn
);

12 *
dev_√t_gë_ac˚ss_tokí
();

16 (*
	tjl_ch©_voi˚
)(*
	tty≥
, *
	tbuf
);

17 
	`≠p_ch©_voi˚_£t_ªad
();

18 
	`≠p_ch©_gë_√w_voi˚
(
jl_ch©_voi˚
 
cb
);

19 
	`≠p_ch©_gë_⁄e_voi˚
(
jl_ch©_voi˚
 
cb
);

20 
	`≠p_ch©_gë_√xt_voi˚
(
jl_ch©_voi˚
 
cb
);

21 
	`≠p_ch©_gë_¥ev_voi˚
(
jl_ch©_voi˚
 
cb
);

23 
	`≠p_gë_music_uæ
(c⁄° *
°r
, 
u32
 
Æbum_id
, u32 
mëa_¢
, 
u8
 *
d©a
, u32 
d©a_Àn
);

26 
	`Ÿa_upd©e
(c⁄° *
code
, c⁄° *
∂©f‹m
, 
u32
 
maj‹
, u32 
möj‹
, u32 
∑tch
);

	@include_lib/net/wechat/ota_update.h

1 #i‚de‡
__JIELI_OTA_H


2 
	#__JIELI_OTA_H


	)

4 
	~"ty≥def.h
"

6 
is_√ed_Ÿa_upd©e
(c⁄° *
code
, c⁄° *
∂©f‹m
, 
u32
 
maj‹
, u32 
mö‹
, u32 
∑tch
, c⁄° *
ac˚ss_tokí
);

8 
gë_upd©e_uæ
(*
buf„r
, 
u32
 
Àn
, c⁄° *
code
, c⁄° *
∂©f‹m
, c⁄° *
ac˚ss_tokí
);

10 
gë_upd©e_d©a
(c⁄° *
uæ
);

12 
Ÿa_upd©e
(c⁄° *
code
, c⁄° *
∂©f‹m
, 
u32
 
maj‹
, u32 
möj‹
, u32 
∑tch
);

	@include_lib/net/wechat/wechat_core.h

1 #i‚de‡
__JIELI_NET_H


2 
	#__JIELI_NET_H


	)

5 
	mNET_ERROR_OK
 = 0,

6 
	mNET_ERROR_ONLINE
,

8 
	mOAUTH_ERROR_USER
,

9 
	mOAUTH_ERROR_MALLOC
,

10 
	mOAUTH_ERROR_SOCK_CONNECT
,

11 
	mOAUTH_ERROR_SOCK_WRITE
,

12 
	mOAUTH_ERROR_SOCK_READ
,

13 
	mOAUTH_ERROR_BIND
,

14 
	mOAUTH_ERROR_TOKEN
,

15 
	mOAUTH_ERROR_GET_WAN_IP
,

16 
	mOAUTH_ERROR_SEND
,

17 
	mOAUTH_ERROR_FILE
,

18 
	mOAUTH_ERROR_JSON
,

19 
	mOAUTH_ERROR_VOICE_INFO
,

21 
	mMQTT_ERR_MALLOC
,

22 
	mMQTT_ERR_PTR
,

23 
	mMQTT_ERR_STU
,

24 
	mMQTT_ERR_CLOSE
,

25 
	mMQTT_ERR_SEND
,

26 
	mMQTT_ERR_USER
,

27 
	mMQTT_ERR_JSON
,

30 
≠p_√t_⁄löe
();

31 
≠p_√t_ªady
();

33 
wech©_c‹e_›í
();

34 
wech©_c‹e_˛o£
();

	@include_lib/net/wechat/wechat_server.h

15 #i‚de‡
NET_AUDIO_SERVER_H


16 
	#NET_AUDIO_SERVER_H


	)

18 
	~"ty≥def.h
"

19 
	~"os/os_≠i.h
"

22 
	#WECHAT_REQ
 0x1

	)

25 
	mWECHAT_NEXT_SONG
 = 0,

26 
	mWECHAT_PRE_SONG
,

27 
	mWECHAT_PAUSE_SONG
,

28 
	mWECHAT_CONTINUE_SONG
,

29 
	mWECHAT_VOLUME_CHANGE
,

30 
	mWECHAT_MEDIA_END
,

31 
	mWECHAT_PROGRESS_INFO
,

32 
	mWECHAT_MEDIA_STOP
,

33 
	mWECHAT_SEND_INIT_STATE
,

34 
	mWECHAT_KILL_SELF_TASK
 = 0xfe,

38 
	mWECHAT_SERVER_SPEECH_URL_EVENT
 = 0,

39 
	mWECHAT_SERVER_AMR_ERR_EVENT
,

40 
	mWECHAT_SERVER_AMR_END_EVENT
,

45 
	mWECHAT_STATE_OPEN
 = 0x0,

46 
	mWECHAT_STATE_START
,

47 
	mWECHAT_STATE_ENC_AMR_START
,

48 
	mWECHAT_STATE_ENC_AMR_STOP
,

49 
	mWECHAT_STATE_SEND
,

50 
	mWECHAT_STATE_PAUSE
,

51 
	mWECHAT_STATE_STOP
,

52 
	mWECHAT_STATE_CLOSE
,

55 
	swech©_ªq
 {

57 *
	mfûíame
;

58 *
	mu£∫ame
;

59 *
	m∑ssw‹d
;

60 *
	mdev_mac
;

64 
u8
 
	mcmd
;

65 
	mîr
;

66 
OS_SEM
 
	m£m
;

	@include_lib/net/wifi_module/wifi_ext.h

1 #i‚de‡ 
__WIFI_EXT_H__


2 
	#__WIFI_EXT_H__


	)

5 
	~"wifi_moduÀ_evít.h
"

6 
	~"w∑_suµliˇ¡_evít.h
"

8 
u32
 
√tdev_gë_ssid_öfo
(
√tdev_ssid_öfo
 *
öfo
, u32 
√tw‹k_ssid_˙t
);

9 
wifi_moduÀ_£t_cb
((*
cb
)(*, 
WIFI_MODULE_EVENT
, *), *
¥iv
);

10 
	`w∑_suµliˇ¡_£t_cb
((*
cb
)(*, 
w∑_suµliˇ¡_°©e
, *), *
¥iv
);

11 
	`wifi_moduÀ_öô
(
WIFI_INIT_INFO
 *
öfo
);

12 
	`wifi_moduÀ_ªmove
();

14 
	`wifi_moduÀ_íãr_≠_mode
(*
ssid
, *
pwd
);

15 
	`wifi_moduÀ_exô_≠_mode
();

16 
	`wifi_moduÀ_íãr_°a_mode
(*
ssid
, *
pwd
);

17 
	`wifi_moduÀ_exô_°a_mode
();

18 
	`wifi_moduÀ_íãr_smp_mode
();

19 
	`wifi_moduÀ_exô_smp_mode
();

20 
	`wifi_moduÀ_íãr_p2p_mode
(
rﬁe
);

21 
	`wifi_moduÀ_exô_p2p_mode
();

22 
	`wifi_moduÀ_íãr_mp_ã°_mode
();

23 
	`wifi_moduÀ_exô_mp_ã°_mode
();

25 
	`w∑_suµliˇ¡_unöô
();

26 
	`w∑_suµliˇ¡_ªq_sˇn_ssid
(*
w∑_s
, 
£c
);

28 
	`wifi_moduÀ_is_öô
();

29 
u32
 
	`wifi_gë_u∂ﬂd_øã
();

31 
u32
 
	`wifi_gë_dow∆ﬂd_øã
();

32 
u8
 
	`gë_rx_sig«l
();

33 
	`√tdev_£t_powî_ßve
();

34 
	`√tdev_£t_tx_pwr_lmt_íabÀ
(
£l
);

35 
	`√tdev_£t_tx_pwr_by_øã
(
£l
);

36 
u32
 
	`√tdev_gë_ch™√l
();

37 
	`wifi_pm_su•íd
();

38 
	`wifi_pm_ªsume
();

	@include_lib/net/wifi_module/wifi_module_event.h

2 #i‚de‡
_WIFI_MODULE_EVENT_H_


3 
	#_WIFI_MODULE_EVENT_H_


	)

5 
	eWIFI_MODULE
 {

6 
	mRTL8189E
,

7 
	mRTL8189F
,

8 
	mRTL8188E
,

9 
	mRTL8188F
,

10 
	mRTL8822B
,

11 
	mMARVEL_88W8782
,

12 
	mMARVEL_88W8801
,

13 
	mMEDIATEK_7601U
,

14 
	mRALINK_3070
,

15 
	mWL_30
,

16 
	mS9082
,

17 
	mRTL8192E
,

18 
	mRTL8821CS
,

19 
	mNONE_MODULE
 = -1,

22 
	eWIFI_MODE
 {

23 
	mSTA_MODE
,

24 
	mAP_MODE
,

25 
	mSMP_CFG_MODE
,

26 
	mMP_TEST_MODE
,

27 
	mP2P_MODE
,

28 
	mNONE_MODE
,

32 
	eP2P_ROLE
 {

33 
	mP2P_GC_MODE
,

34 
	mP2P_GO_MODE
,

38 
	eSMP_CFG_TYPE
 {

39 
	mPRIV_SMP_CFG1
 = 1,

40 
	mPRIV_SMP_CFG2
,

41 
	mAIRKISS_SMP_CFG
,

44 
	sWIFI_INIT_INFO
 {

45 
WIFI_MODULE
 
	mmoduÀ
;

46 
WIFI_MODE
 
	mmode
;

47 
u8
 
	mpwd
[2][64];

48 
u8
 
	mssid
[2][33];

49 
u8
 
	mp2p_rﬁe
;

50 } 
__©åibuã__
((
∑cked
));

52 
	eWIFI_MODULE_EVENT
 {

53 
	mSMP_CFG_START
 = 0x0,

54 
	mSMP_CFG_STOP
 = 0x1,

55 
	mSMP_CFG_TIMEOUT
 = 0x2,

56 
	mSMP_CFG_COMPLETED
 = 0x3,

57 
	mAP_ON_DISCONNECTED
 = 0x4,

58 
	mAP_ON_ASSOC
 = 0x5,

59 
	mPM_SUSPEND
 = 0x6,

60 
	mPM_RESUME
 = 0x7,

63 
	s√tdev_ssid_öfo
 {

64 
	mssid
[32];

65 
	mssid_Àn
;

66 
	mmac_addr
[6];

67 
	mrssi
;

68 
	mch™√l_numbî
;

69 
	mSig«lSåígth
;

70 
	mSig«lQuÆôy
;

71 
	mSuµ‹ãdR©es
[16];

74 
	ssmp_cfg_ªsu…
 {

75 
SMP_CFG_TYPE
 
	mty≥
;

76 
	mssid_¸c
;

77 
	møndom_vÆ
;

78 
	mssid
[32];

79 
	m∑s•hø£
[64];

	@include_lib/net/zliblite/crc32.h

5 
loˇl
 c⁄° 
z_¸c_t
 
FAR
 
	g¸c_èbÀ
[
TBLS
][256] = {

59 #ifde‡
BYFOUR


	@include_lib/net/zliblite/deflate.h

13 #i‚de‡
DEFLATE_H


14 
	#DEFLATE_H


	)

16 
	~"zutû.h
"

22 #i‚de‡
NO_GZIP


23 
	#GZIP


	)

30 
	#LENGTH_CODES
 29

	)

33 
	#LITERALS
 256

	)

36 
	#L_CODES
 (
LITERALS
+1+
LENGTH_CODES
)

	)

39 
	#D_CODES
 30

	)

42 
	#BL_CODES
 19

	)

45 
	#HEAP_SIZE
 (2*
L_CODES
+1)

	)

48 
	#MAX_BITS
 15

	)

51 
	#Buf_size
 16

	)

54 
	#INIT_STATE
 42

	)

55 #ifde‡
GZIP


56 
	#GZIP_STATE
 57

	)

58 
	#EXTRA_STATE
 69

	)

59 
	#NAME_STATE
 73

	)

60 
	#COMMENT_STATE
 91

	)

61 
	#HCRC_STATE
 103

	)

62 
	#BUSY_STATE
 113

	)

63 
	#FINISH_STATE
 666

	)

68 
	s˘_d©a_s
 {

70 
ush
 
	m‰eq
;

71 
ush
 
	mcode
;

72 } 
	mfc
;

74 
ush
 
	mdad
;

75 
ush
 
	mÀn
;

76 } 
	mdl
;

77 } 
	tFAR
 
	t˘_d©a
;

79 
	#Fªq
 
fc
.
‰eq


	)

80 
	#Code
 
fc
.
code


	)

81 
	#Dad
 
dl
.
dad


	)

82 
	#Lí
 
dl
.
Àn


	)

84 
°©ic_åì_desc_s
 
	t°©ic_åì_desc
;

86 
	såì_desc_s
 {

87 
˘_d©a
 *
	mdyn_åì
;

88 
	mmax_code
;

89 c⁄° 
°©ic_åì_desc
 *
	m°©_desc
;

90 } 
	tFAR
 
	tåì_desc
;

92 
ush
 
	tPos
;

93 
Pos
 
	tFAR
 
	tPosf
;

94 
	tIPos
;

100 
	söã∫Æ_°©e
 {

101 
z_°ªamp
 
	m°rm
;

102 
	m°©us
;

103 
Byãf
 *
	m≥ndög_buf
;

104 
ulg
 
	m≥ndög_buf_size
;

105 
Byãf
 *
	m≥ndög_out
;

106 
ulg
 
	m≥ndög
;

107 
	mwøp
;

108 
gz_hódîp
 
	mgzhód
;

109 
ulg
 
	mgzödex
;

110 
Byã
 
	mmëhod
;

111 
	mœ°_Êush
;

115 
uI¡
 
	mw_size
;

116 
uI¡
 
	mw_bôs
;

117 
uI¡
 
	mw_mask
;

119 
Byãf
 *
	mwödow
;

129 
ulg
 
	mwödow_size
;

134 
Posf
 *
	m¥ev
;

140 
Posf
 *
	mhód
;

142 
uI¡
 
	mös_h
;

143 
uI¡
 
	mhash_size
;

144 
uI¡
 
	mhash_bôs
;

145 
uI¡
 
	mhash_mask
;

147 
uI¡
 
	mhash_shi·
;

154 
	mblock_°¨t
;

159 
uI¡
 
	mm©ch_Àngth
;

160 
IPos
 
	m¥ev_m©ch
;

161 
	mm©ch_avaûabÀ
;

162 
uI¡
 
	m°r°¨t
;

163 
uI¡
 
	mm©ch_°¨t
;

164 
uI¡
 
	mlookahód
;

166 
uI¡
 
	m¥ev_Àngth
;

171 
uI¡
 
	mmax_chaö_Àngth
;

177 
uI¡
 
	mmax_œzy_m©ch
;

182 
	#max_ö£π_Àngth
 
max_œzy_m©ch


	)

188 
	mÀvñ
;

189 
	m°øãgy
;

191 
uI¡
 
	mgood_m©ch
;

194 
	mni˚_m©ch
;

198 
˘_d©a_s
 
	mdyn_…ªe
[
HEAP_SIZE
];

199 
˘_d©a_s
 
	mdyn_dåì
[2 * 
D_CODES
 + 1];

200 
˘_d©a_s
 
	mbl_åì
[2 * 
BL_CODES
 + 1];

202 
åì_desc_s
 
	ml_desc
;

203 
åì_desc_s
 
	md_desc
;

204 
åì_desc_s
 
	mbl_desc
;

206 
ush
 
	mbl_cou¡
[
MAX_BITS
 + 1];

209 
	mhóp
[2 * 
L_CODES
 + 1];

210 
	mhóp_Àn
;

211 
	mhóp_max
;

216 
uch
 
	mdïth
[2 * 
L_CODES
 + 1];

220 
uchf
 *
	ml_buf
;

222 
uI¡
 
	mlô_bufsize
;

242 
uI¡
 
	mœ°_lô
;

244 
ushf
 *
	md_buf
;

250 
ulg
 
	m›t_Àn
;

251 
ulg
 
	m°©ic_Àn
;

252 
uI¡
 
	mm©ches
;

253 
uI¡
 
	mö£π
;

255 #ifde‡
ZLIB_DEBUG


256 
ulg
 
	mcom¥es£d_Àn
;

257 
ulg
 
	mbôs_£¡
;

260 
ush
 
	mbi_buf
;

264 
	mbi_vÆid
;

269 
ulg
 
	mhigh_w©î
;

276 } 
	tFAR
 
	tdeÊ©e_°©e
;

281 
	#put_byã
(
s
, 
c
Ë{s->
≥ndög_buf
[s->
≥ndög
++] = (
Byãf
)(c);}

	)

284 
	#MIN_LOOKAHEAD
 (
MAX_MATCH
+
MIN_MATCH
+1)

	)

289 
	#MAX_DIST
(
s
Ë((s)->
w_size
-
MIN_LOOKAHEAD
)

	)

294 
	#WIN_INIT
 
MAX_MATCH


	)

299 
ZLIB_INTERNAL
 
_å_öô
 
OF
((
deÊ©e_°©e
 *
s
));

300 
ZLIB_INTERNAL
 
_å_èŒy
 
OF
((
deÊ©e_°©e
 *
s
, 
di°
, 
lc
));

301 
ZLIB_INTERNAL
 
_å_Êush_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
,

302 
ulg
 
°‹ed_Àn
, 
œ°
));

303 
ZLIB_INTERNAL
 
_å_Êush_bôs
 
OF
((
deÊ©e_°©e
 *
s
));

304 
ZLIB_INTERNAL
 
_å_Æign
 
OF
((
deÊ©e_°©e
 *
s
));

305 
ZLIB_INTERNAL
 
_å_°‹ed_block
 
OF
((
deÊ©e_°©e
 *
s
, 
ch¨f
 *
buf
,

306 
ulg
 
°‹ed_Àn
, 
œ°
));

308 
	#d_code
(
di°
) \

309 ((
di°
Ë< 256 ? 
_di°_code
[di°] : _di°_code[256+((di°)>>7)])

	)

315 #i‚de‡
ZLIB_DEBUG


318 #i‡
deföed
(
GEN_TREES_H
Ë|| !deföed(
STDC
)

319 
uch
 
ZLIB_INTERNAL
 
_Àngth_code
[];

320 
uch
 
ZLIB_INTERNAL
 
_di°_code
[];

322 c⁄° 
uch
 
ZLIB_INTERNAL
 
_Àngth_code
[];

323 c⁄° 
uch
 
ZLIB_INTERNAL
 
_di°_code
[];

326 
	#_å_èŒy_lô
(
s
, 
c
, 
Êush
) \

327 { 
uch
 
cc
 = (
c
); \

328 
s
->
d_buf
[s->
œ°_lô
] = 0; \

329 
s
->
l_buf
[s->
œ°_lô
++] = 
cc
; \

330 
s
->
dyn_…ªe
[
cc
].
Fªq
++; \

331 
Êush
 = (
s
->
œ°_lô
 =s->
lô_bufsize
-1); \

332 }

	)

333 
	#_å_èŒy_di°
(
s
, 
di°™˚
, 
Àngth
, 
Êush
) \

334 { 
uch
 
Àn
 = (uch)(
Àngth
); \

335 
ush
 
di°
 = (ush)(
di°™˚
); \

336 
s
->
d_buf
[s->
œ°_lô
] = 
di°
; \

337 
s
->
l_buf
[s->
œ°_lô
++] = 
Àn
; \

338 
di°
--; \

339 
s
->
dyn_…ªe
[
_Àngth_code
[
Àn
]+
LITERALS
+1].
Fªq
++; \

340 
s
->
dyn_dåì
[
	`d_code
(
di°
)].
Fªq
++; \

341 
Êush
 = (
s
->
œ°_lô
 =s->
lô_bufsize
-1); \

342 }

	)

344 
	#_å_èŒy_lô
(
s
, 
c
, 
Êush
ËÊush = 
	`_å_èŒy
(s, 0, c)

	)

345 
	#_å_èŒy_di°
(
s
, 
di°™˚
, 
Àngth
, 
Êush
) \

346 
Êush
 = 
	`_å_èŒy
(
s
, 
di°™˚
, 
Àngth
)

	)

	@include_lib/net/zliblite/inffast.h

11 
ZLIB_INTERNAL
 
öÊ©e_Á°
 
OF
((
z_°ªamp
 
°rm
, 
°¨t
));

	@include_lib/net/zliblite/inffixed.h

10 c⁄° 
code
 
	gÀnfix
[512] = {

87 c⁄° 
code
 
	gdi°fix
[32] = {

	@include_lib/net/zliblite/inflate.h

15 #i‚de‡
NO_GZIP


16 
	#GUNZIP


	)

21 
	mHEAD
 = 16180,

22 
	mFLAGS
,

23 
	mTIME
,

24 
	mOS
,

25 
	mEXLEN
,

26 
	mEXTRA
,

27 
	mNAME
,

28 
	mCOMMENT
,

29 
	mHCRC
,

30 
	mDICTID
,

31 
	mDICT
,

32 
	mTYPE
,

33 
	mTYPEDO
,

34 
	mSTORED
,

35 
	mCOPY_
,

36 
	mCOPY
,

37 
	mTABLE
,

38 
	mLENLENS
,

39 
	mCODELENS
,

40 
	mLEN_
,

41 
	mLEN
,

42 
	mLENEXT
,

43 
	mDIST
,

44 
	mDISTEXT
,

45 
	mMATCH
,

46 
	mLIT
,

47 
	mCHECK
,

48 
	mLENGTH
,

49 
	mDONE
,

50 
	mBAD
,

51 
	mMEM
,

52 
	mSYNC


53 } 
	töÊ©e_mode
;

82 
	söÊ©e_°©e
 {

83 
z_°ªamp
 
	m°rm
;

84 
öÊ©e_mode
 
	mmode
;

85 
	mœ°
;

86 
	mwøp
;

88 
	mhavedi˘
;

89 
	mÊags
;

90 
	mdmax
;

91 
	mcheck
;

92 
	mtŸÆ
;

93 
gz_hódîp
 
	mhód
;

95 
	mwbôs
;

96 
	mwsize
;

97 
	mwhave
;

98 
	mw√xt
;

99 
FAR
 *
	mwödow
;

101 
	mhﬁd
;

102 
	mbôs
;

104 
	mÀngth
;

105 
	moff£t
;

107 
	mexåa
;

109 
code
 c⁄° 
FAR
 *
	mÀncode
;

110 
code
 c⁄° 
FAR
 *
	mdi°code
;

111 
	mÀnbôs
;

112 
	mdi°bôs
;

114 
	mncode
;

115 
	m∆í
;

116 
	mndi°
;

117 
	mhave
;

118 
code
 
FAR
 *
	m√xt
;

119 
	mÀns
[320];

120 
	mw‹k
[288];

121 
code
 
	mcodes
[
ENOUGH
];

122 
	mß√
;

123 
	mback
;

124 
	mwas
;

	@include_lib/net/zliblite/inftrees.h

25 
	m›
;

26 
	mbôs
;

27 
	mvÆ
;

28 } 
	tcode
;

49 
	#ENOUGH_LENS
 852

	)

50 
	#ENOUGH_DISTS
 592

	)

51 
	#ENOUGH
 (
ENOUGH_LENS
+
ENOUGH_DISTS
)

	)

55 
	mCODES
,

56 
	mLENS
,

57 
	mDISTS


58 } 
	tcodëy≥
;

60 
ZLIB_INTERNAL
 
öÊ©e_èbÀ
 
OF
((
codëy≥
 
ty≥
, 
FAR
 *
Àns
,

61 
codes
, 
code
 
FAR
 *FAR *
èbÀ
,

62 
FAR
 *
bôs
, FAR *
w‹k
));

	@include_lib/net/zliblite/trees.h

3 
loˇl
 c⁄° 
˘_d©a
 
	g°©ic_…ªe
[
L_CODES
 + 2] = {

64 
loˇl
 c⁄° 
˘_d©a
 
	g°©ic_dåì
[
D_CODES
] = {

73 c⁄° 
uch
 
ZLIB_INTERNAL
 
	g_di°_code
[
DIST_CODE_LEN
] = {

102 c⁄° 
uch
 
ZLIB_INTERNAL
 
	g_Àngth_code
[
MAX_MATCH
 - 
MIN_MATCH
 + 1] = {

118 
loˇl
 c⁄° 
	gba£_Àngth
[
LENGTH_CODES
] = {

123 
loˇl
 c⁄° 
	gba£_di°
[
D_CODES
] = {

	@include_lib/net/zliblite/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

12 
	#Z_SOLO


	)

14 
	#STDC


	)

24 #ifde‡
Z_PREFIX


25 
	#Z_PREFIX_SET


	)

28 
	#_di°_code
 
z__di°_code


	)

29 
	#_Àngth_code
 
z__Àngth_code


	)

30 
	#_å_Æign
 
z__å_Æign


	)

31 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

32 
	#_å_Êush_block
 
z__å_Êush_block


	)

33 
	#_å_öô
 
z__å_öô


	)

34 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

35 
	#_å_èŒy
 
z__å_èŒy


	)

36 
	#adÀr32
 
z_adÀr32


	)

37 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

38 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

39 
	#adÀr32_z
 
z_adÀr32_z


	)

40 #i‚de‡
Z_SOLO


41 
	#com¥ess
 
z_com¥ess


	)

42 
	#com¥ess2
 
z_com¥ess2


	)

43 
	#com¥essBound
 
z_com¥essBound


	)

45 
	#¸c32
 
z_¸c32


	)

46 
	#¸c32_comböe
 
z_¸c32_comböe


	)

47 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

48 
	#¸c32_z
 
z_¸c32_z


	)

49 
	#deÊ©e
 
z_deÊ©e


	)

50 
	#deÊ©eBound
 
z_deÊ©eBound


	)

51 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

52 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

53 
	#deÊ©eGëDi˘i⁄¨y
 
z_deÊ©eGëDi˘i⁄¨y


	)

54 
	#deÊ©eInô
 
z_deÊ©eInô


	)

55 
	#deÊ©eInô2
 
z_deÊ©eInô2


	)

56 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

57 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

58 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

59 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

60 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

61 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

62 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

63 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

64 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

65 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

66 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

67 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

68 #i‚de‡
Z_SOLO


69 
	#gz_îr‹
 
z_gz_îr‹


	)

70 
	#gz_ötmax
 
z_gz_ötmax


	)

71 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

72 
	#gzbuf„r
 
z_gzbuf„r


	)

73 
	#gz˛óªº
 
z_gz˛óªº


	)

74 
	#gz˛o£
 
z_gz˛o£


	)

75 
	#gz˛o£_r
 
z_gz˛o£_r


	)

76 
	#gz˛o£_w
 
z_gz˛o£_w


	)

77 
	#gzdúe˘
 
z_gzdúe˘


	)

78 
	#gzd›í
 
z_gzd›í


	)

79 
	#gzeof
 
z_gzeof


	)

80 
	#gzîr‹
 
z_gzîr‹


	)

81 
	#gzÊush
 
z_gzÊush


	)

82 
	#gz‰ód
 
z_gz‰ód


	)

83 
	#gzfwrôe
 
z_gzfwrôe


	)

84 
	#gzgëc
 
z_gzgëc


	)

85 
	#gzgëc_
 
z_gzgëc_


	)

86 
	#gzgës
 
z_gzgës


	)

87 
	#gzoff£t
 
z_gzoff£t


	)

88 
	#gzoff£t64
 
z_gzoff£t64


	)

89 
	#gz›í
 
z_gz›í


	)

90 
	#gz›í64
 
z_gz›í64


	)

91 #ifde‡
_WIN32


92 
	#gz›í_w
 
z_gz›í_w


	)

94 
	#gz¥ötf
 
z_gz¥ötf


	)

95 
	#gzputc
 
z_gzputc


	)

96 
	#gzputs
 
z_gzputs


	)

97 
	#gzªad
 
z_gzªad


	)

98 
	#gzªwöd
 
z_gzªwöd


	)

99 
	#gz£ek
 
z_gz£ek


	)

100 
	#gz£ek64
 
z_gz£ek64


	)

101 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

102 
	#gzãŒ
 
z_gzãŒ


	)

103 
	#gzãŒ64
 
z_gzãŒ64


	)

104 
	#gzungëc
 
z_gzungëc


	)

105 
	#gzv¥ötf
 
z_gzv¥ötf


	)

106 
	#gzwrôe
 
z_gzwrôe


	)

108 
	#öÊ©e
 
z_öÊ©e


	)

109 
	#öÊ©eBack
 
z_öÊ©eBack


	)

110 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

111 
	#öÊ©eBackInô
 
z_öÊ©eBackInô


	)

112 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

113 
	#öÊ©eCodesU£d
 
z_öÊ©eCodesU£d


	)

114 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

115 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

116 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

117 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

118 
	#öÊ©eInô
 
z_öÊ©eInô


	)

119 
	#öÊ©eInô2
 
z_öÊ©eInô2


	)

120 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

121 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

122 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

123 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

124 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

125 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

126 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

127 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

128 
	#öÊ©eSync
 
z_öÊ©eSync


	)

129 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

130 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

131 
	#öÊ©eVÆid©e
 
z_öÊ©eVÆid©e


	)

132 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

133 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

134 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

135 #i‚de‡
Z_SOLO


136 
	#uncom¥ess
 
z_uncom¥ess


	)

137 
	#uncom¥ess2
 
z_uncom¥ess2


	)

139 
	#zEº‹
 
z_zEº‹


	)

140 #i‚de‡
Z_SOLO


141 
	#zˇŒoc
 
z_zˇŒoc


	)

142 
	#zc‰ì
 
z_zc‰ì


	)

144 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

145 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

148 
	#Byã
 
z_Byã


	)

149 
	#Byãf
 
z_Byãf


	)

150 
	#Æloc_func
 
z_Æloc_func


	)

151 
	#ch¨f
 
z_ch¨f


	)

152 
	#‰ì_func
 
z_‰ì_func


	)

153 #i‚de‡
Z_SOLO


154 
	#gzFûe
 
z_gzFûe


	)

156 
	#gz_hódî
 
z_gz_hódî


	)

157 
	#gz_hódîp
 
z_gz_hódîp


	)

158 
	#ö_func
 
z_ö_func


	)

159 
	#ötf
 
z_ötf


	)

160 
	#out_func
 
z_out_func


	)

161 
	#uI¡
 
z_uI¡


	)

162 
	#uI¡f
 
z_uI¡f


	)

163 
	#uL⁄g
 
z_uL⁄g


	)

164 
	#uL⁄gf
 
z_uL⁄gf


	)

165 
	#voidp
 
z_voidp


	)

166 
	#voidpc
 
z_voidpc


	)

167 
	#voidpf
 
z_voidpf


	)

170 
	#gz_hódî_s
 
z_gz_hódî_s


	)

171 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

175 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

176 
	#MSDOS


	)

178 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

179 
	#OS2


	)

181 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

182 
	#WINDOWS


	)

184 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

185 #i‚de‡
WIN32


186 
	#WIN32


	)

189 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

190 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

191 #i‚de‡
SYS16BIT


192 
	#SYS16BIT


	)

201 #ifde‡
SYS16BIT


202 
	#MAXSEG_64K


	)

204 #ifde‡
MSDOS


205 
	#UNALIGNED_OK


	)

208 #ifde‡
__STDC_VERSION__


209 #i‚de‡
STDC


210 
	#STDC


	)

212 #i‡
__STDC_VERSION__
 >= 199901L

213 #i‚de‡
STDC99


214 
	#STDC99


	)

218 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

219 
	#STDC


	)

221 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

222 
	#STDC


	)

224 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

225 
	#STDC


	)

227 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

228 
	#STDC


	)

231 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

232 
	#STDC


	)

235 #i‚de‡
STDC


237 c⁄°

	)

241 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

242 
	#z_c⁄°
 c⁄°

	)

244 
	#z_c⁄°


	)

247 #ifde‡
Z_SOLO


248 
	tz_size_t
;

250 
	#z_l⁄gl⁄g
 

	)

251 #i‡
deföed
(
NO_SIZE_T
)

252 
	tNO_SIZE_T
 
	tz_size_t
;

253 #ñi‡
deföed
(
STDC
)

254 
	~<°ddef.h
>

255 
size_t
 
	tz_size_t
;

257 
	tz_size_t
;

259 #unde‡
z_l⁄gl⁄g


263 #i‚de‡
MAX_MEM_LEVEL


264 #ifde‡
MAXSEG_64K


265 
	#MAX_MEM_LEVEL
 8

	)

267 
	#MAX_MEM_LEVEL
 9

	)

276 #i‚de‡
MAX_WBITS


277 
	#MAX_WBITS
 9

	)

295 #i‚de‡
OF


296 #ifde‡
STDC


297 
	#OF
(
¨gs
Ë
	)
args

299 
	#OF
(
¨gs
Ë()

	)

303 #i‚de‡
Z_ARG


304 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

305 
	#Z_ARG
(
¨gs
Ë
	)
args

307 
	#Z_ARG
(
¨gs
Ë()

	)

317 #ifde‡
SYS16BIT


318 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

320 
	#SMALL_MEDIUM


	)

321 #ifde‡
_MSC_VER


322 
	#FAR
 
_Ár


	)

324 
	#FAR
 
Ár


	)

327 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

329 
	#SMALL_MEDIUM


	)

330 #ifde‡
__BORLANDC__


331 
	#FAR
 
_Ár


	)

333 
	#FAR
 
Ár


	)

338 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

342 #ifde‡
ZLIB_DLL


343 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

344 #ifde‡
ZLIB_INTERNAL


345 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

355 #ifde‡
ZLIB_WINAPI


356 #ifde‡
FAR


357 #unde‡
FAR


359 
	~<wödows.h
>

362 
	#ZEXPORT
 
WINAPI


	)

363 #ifde‡
WIN32


364 
	#ZEXPORTVA
 
WINAPIV


	)

366 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

371 #i‡
deföed
 (
__BEOS__
)

372 #ifde‡
ZLIB_DLL


373 #ifde‡
ZLIB_INTERNAL


374 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

375 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

377 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

378 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

383 #i‚de‡
ZEXTERN


384 
	#ZEXTERN
 

	)

386 #i‚de‡
ZEXPORT


387 
	#ZEXPORT


	)

389 #i‚de‡
ZEXPORTVA


390 
	#ZEXPORTVA


	)

393 #i‚de‡
FAR


394 
	#FAR


	)

397 #i‡!
deföed
(
__MACTYPES__
)

398 
	tByã
;

400 
	tuI¡
;

401 
	tuL⁄g
;

403 #ifde‡
SMALL_MEDIUM


405 
	#Byãf
 
Byã
 
FAR


	)

407 
Byã
 
	tFAR
 
	tByãf
;

409 
	tFAR
 
	tch¨f
;

410 
	tFAR
 
	tötf
;

411 
uI¡
 
	tFAR
 
	tuI¡f
;

412 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

414 #ifde‡
STDC


415 c⁄° *
	tvoidpc
;

416 
	tFAR
 *
	tvoidpf
;

417 *
	tvoidp
;

419 
Byã
 c⁄° *
	tvoidpc
;

420 
Byã
 
	tFAR
 *
	tvoidpf
;

421 
Byã
 *
	tvoidp
;

424 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

425 
	~<limôs.h
>

426 #i‡(
UINT_MAX
 == 0xffffffffUL)

427 
	#Z_U4
 

	)

428 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

429 
	#Z_U4
 

	)

430 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

431 
	#Z_U4
 

	)

435 #ifde‡
Z_U4


436 
Z_U4
 
	tz_¸c_t
;

438 
	tz_¸c_t
;

442 
	#Z_HAVE_UNISTD_H


	)

446 
	#Z_HAVE_STDARG_H


	)

449 #ifde‡
STDC


450 #i‚de‡
Z_SOLO


451 
	~<sys/ty≥s.h
>

455 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

456 #i‚de‡
Z_SOLO


457 
	~<°d¨g.h
>

461 #ifde‡
_WIN32


462 #i‚de‡
Z_SOLO


463 
	~<°ddef.h
>

473 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

474 #unde‡
_LARGEFILE64_SOURCE


477 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

478 
	#Z_HAVE_UNISTD_H


	)

480 #i‚de‡
Z_SOLO


481 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

482 
	~<uni°d.h
>

483 #ifde‡
VMS


484 
	~<unixio.h
>

486 #i‚de‡
z_off_t


487 
	#z_off_t
 
off_t


	)

492 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

493 
	#Z_LFS64


	)

496 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

497 
	#Z_LARGE64


	)

500 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

501 
	#Z_WANT64


	)

504 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

505 
	#SEEK_SET
 0

	)

506 
	#SEEK_CUR
 1

	)

507 
	#SEEK_END
 2

	)

510 #i‚de‡
z_off_t


511 
	#z_off_t
 

	)

514 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

515 
	#z_off64_t
 
off64_t


	)

517 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

518 
	#z_off64_t
 
__öt64


	)

520 
	#z_off64_t
 
z_off_t


	)

525 #i‡
deföed
(
__MVS__
)

526 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

527 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

528 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

529 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

530 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

531 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

532 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

533 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

534 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

535 #¥agm®
m≠
(
com¥essBound
,"CMBND")

536 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

537 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

538 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@include_lib/net/zliblite/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

83 #ifde‡
__˝lu•lus


87 
	#ZLIB_VERSION
 "1.2.11"

	)

88 
	#ZLIB_VERNUM
 0x12b0

	)

89 
	#ZLIB_VER_MAJOR
 1

	)

90 
	#ZLIB_VER_MINOR
 2

	)

91 
	#ZLIB_VER_REVISION
 11

	)

92 
	#ZLIB_VER_SUBREVISION
 0

	)

95 
voidpf
(*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

96 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

98 
öã∫Æ_°©e
;

100 
	sz_°ªam_s
 {

101 
z_c⁄°
 
Byãf
 *
√xt_ö
;

102 
uI¡
 
avaû_ö
;

103 
uL⁄g
 
tŸÆ_ö
;

105 
Byãf
 *
√xt_out
;

106 
uI¡
 
avaû_out
;

107 
uL⁄g
 
tŸÆ_out
;

109 
z_c⁄°
 *
msg
;

110 
öã∫Æ_°©e
 
FAR
 *
°©e
;

112 
Æloc_func
 
zÆloc
;

113 
‰ì_func
 
z‰ì
;

114 
voidpf
 
›aque
;

116 
d©a_ty≥
;

118 
uL⁄g
 
adÀr
;

119 
uL⁄g
 
ª£rved
;

120 } 
	tz_°ªam
;

122 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

128 
	sgz_hódî_s
 {

129 
ãxt
;

130 
uL⁄g
 
time
;

131 
xÊags
;

132 
os
;

133 
Byãf
 *
exåa
;

134 
uI¡
 
exåa_Àn
;

135 
uI¡
 
exåa_max
;

136 
Byãf
 *
«me
;

137 
uI¡
 
«me_max
;

138 
Byãf
 *
commít
;

139 
uI¡
 
comm_max
;

140 
h¸c
;

141 
d⁄e
;

143 } 
	tgz_hódî
;

145 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

185 
	#Z_NO_FLUSH
 0

	)

186 
	#Z_PARTIAL_FLUSH
 1

	)

187 
	#Z_SYNC_FLUSH
 2

	)

188 
	#Z_FULL_FLUSH
 3

	)

189 
	#Z_FINISH
 4

	)

190 
	#Z_BLOCK
 5

	)

191 
	#Z_TREES
 6

	)

200 
	#Z_OK
 0

	)

201 
	#Z_STREAM_END
 1

	)

202 
	#Z_NEED_DICT
 2

	)

203 
	#Z_ERRNO
 (-1)

	)

204 
	#Z_STREAM_ERROR
 (-2)

	)

205 
	#Z_DATA_ERROR
 (-3)

	)

206 
	#Z_MEM_ERROR
 (-4)

	)

207 
	#Z_BUF_ERROR
 (-5)

	)

208 
	#Z_VERSION_ERROR
 (-6)

	)

215 
	#Z_NO_COMPRESSION
 0

	)

216 
	#Z_BEST_SPEED
 1

	)

217 
	#Z_BEST_COMPRESSION
 9

	)

218 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

226 
	#Z_FILTERED
 1

	)

227 
	#Z_HUFFMAN_ONLY
 2

	)

228 
	#Z_RLE
 3

	)

229 
	#Z_FIXED
 4

	)

230 
	#Z_DEFAULT_STRATEGY
 0

	)

237 
	#Z_BINARY
 0

	)

238 
	#Z_TEXT
 1

	)

239 
	#Z_ASCII
 
Z_TEXT


	)

240 
	#Z_UNKNOWN
 2

	)

243 
	#Z_DEFLATED
 8

	)

245 
	#Z_NULL
 0

	)

248 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

263 
ZEXTERN
 c⁄° *
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

399 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

414 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

558 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

570 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

696 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

697 c⁄° 
Byãf
 *
di˘i⁄¨y
,

698 
uI¡
 
di˘Lígth
));

720 
ZEXTERN
 
ZEXPORT
 
deÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

721 
Byãf
 *
di˘i⁄¨y
,

722 
uI¡
 *
di˘Lígth
));

742 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

743 
z_°ªamp
 
sour˚
));

757 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

795 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

796 
Àvñ
,

797 
°øãgy
));

813 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

814 
good_Àngth
,

815 
max_œzy
,

816 
ni˚_Àngth
,

817 
max_chaö
));

834 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

835 
uL⁄g
 
sour˚Lí
));

851 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

852 *
≥ndög
,

853 *
bôs
));

870 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

871 
bôs
,

872 
vÆue
));

896 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

897 
gz_hódîp
 
hód
));

972 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

973 c⁄° 
Byãf
 *
di˘i⁄¨y
,

974 
uI¡
 
di˘Lígth
));

988 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

989 
Byãf
 *
di˘i⁄¨y
,

990 
uI¡
 *
di˘Lígth
));

1010 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

1026 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

1027 
z_°ªamp
 
sour˚
));

1038 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

1052 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

1053 
wödowBôs
));

1073 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

1074 
bôs
,

1075 
vÆue
));

1104 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

1144 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

1145 
gz_hódîp
 
hód
));

1169 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1170 
	tz_c⁄°
 
	tFAR
 *FAR *));

1171 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1240 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1241 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1242 
out_func
 
out
, 
FAR
 *
out_desc
));

1251 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1293 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1298 #i‚de‡
Z_SOLO


1310 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1311 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1325 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1326 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1327 
Àvñ
));

1341 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1348 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1349 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1366 
ZEXTERN
 
ZEXPORT
 
uncom¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1367 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 *
sour˚Lí
));

1383 
gzFûe_s
 *
	tgzFûe
;

1423 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1446 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1462 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1473 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1503 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gz‰ód
 
OF
((
voidp
 
buf
, z_size_à
size
, z_size_à
nôems
,

1504 
gzFûe
 
fûe
));

1529 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1530 
voidpc
 
buf
, 
Àn
));

1537 
ZEXTERN
 
z_size_t
 
ZEXPORT
 
gzfwrôe
 
OF
((
voidpc
 
buf
, z_size_à
size
,

1538 
z_size_t
 
nôems
, 
gzFûe
 
fûe
));

1551 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1566 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1574 
ZEXTERN
 *
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1587 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1593 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1602 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1614 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1649 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1677 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1692 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1713 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1726 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1727 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1738 
ZEXTERN
 c⁄° *
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1754 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1794 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1800 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1801 
z_size_t
 
Àn
));

1831 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1837 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_z
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
,

1838 
z_size_t
 
Àn
));

1858 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1859 c⁄° *
vîsi⁄
, 
°ªam_size
));

1860 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1861 c⁄° *
vîsi⁄
, 
°ªam_size
));

1862 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1863 
wödowBôs
, 
memLevñ
,

1864 
°øãgy
, c⁄° *
vîsi⁄
,

1865 
°ªam_size
));

1866 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1867 c⁄° *
vîsi⁄
, 
°ªam_size
));

1868 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1869 
FAR
 *
wödow
,

1870 c⁄° *
vîsi⁄
,

1871 
°ªam_size
));

1872 #ifde‡
Z_PREFIX_SET


1873 
	#z_deÊ©eInô
(
°rm
, 
Àvñ
) \

1874 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1875 
	#z_öÊ©eInô
(
°rm
) \

1876 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1877 
	#z_deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1878 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1879 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1880 
	#z_öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1881 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1882 ()(
z_°ªam
))

	)

1883 
	#z_öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1884 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1885 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1887 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1888 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1889 
	#öÊ©eInô
(
°rm
) \

1890 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1891 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1892 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1893 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1894 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1895 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1896 ()(
z_°ªam
))

	)

1897 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1898 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1899 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1902 #i‚de‡
Z_SOLO


1911 
	sgzFûe_s
 {

1912 
have
;

1913 *
√xt
;

1914 
z_off64_t
 
pos
;

1916 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1917 #ifde‡
Z_PREFIX_SET


1918 #unde‡
z_gzgëc


1919 
	#z_gzgëc
(
g
) \

1920 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1922 
	#gzgëc
(
g
) \

1923 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: (
gzgëc
)(g))

	)

1932 #ifde‡
Z_LARGE64


1933 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1934 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1935 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1936 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1937 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1938 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1941 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1942 #ifde‡
Z_PREFIX_SET


1943 
	#z_gz›í
 
z_gz›í64


	)

1944 
	#z_gz£ek
 
z_gz£ek64


	)

1945 
	#z_gzãŒ
 
z_gzãŒ64


	)

1946 
	#z_gzoff£t
 
z_gzoff£t64


	)

1947 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1948 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1950 
	#gz›í
 
gz›í64


	)

1951 
	#gz£ek
 
gz£ek64


	)

1952 
	#gzãŒ
 
gzãŒ64


	)

1953 
	#gzoff£t
 
gzoff£t64


	)

1954 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1955 
	#¸c32_comböe
 
¸c32_comböe64


	)

1957 #i‚de‡
Z_LARGE64


1958 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1959 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1960 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1961 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1962 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1963 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1966 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1967 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1968 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1969 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1970 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1971 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1976 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1977 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1985 
ZEXTERN
 c⁄° *
ZEXPORT
 
zEº‹
 
OF
(());

1986 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1987 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 *
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1988 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1989 
ZEXTERN
 
ZEXPORT
 
öÊ©eVÆid©e
 
OF
((
z_°ªamp
, ));

1990 
ZEXTERN
 
ZEXPORT
 
öÊ©eCodesU£d
 
OF
((
z_°ªamp
));

1991 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1992 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1994 #i‡(
deföed
(
_WIN32
Ë|| deföed(
__CYGWIN__
)Ë&& !deföed(
Z_SOLO
)

1995 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1996 c⁄° *
mode
));

1998 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1999 #i‚de‡
Z_SOLO


2000 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

2001 c⁄° *
f‹m©
,

2002 
va_li°
 
va
));

2006 #ifde‡
__˝lu•lus


	@include_lib/net/zliblite/zutil.h

13 #i‚de‡
ZUTIL_H


14 
	#ZUTIL_H


	)

16 #ifde‡
HAVE_HIDDEN


17 
	#ZLIB_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
 ("hiddí")))

	)

19 
	#ZLIB_INTERNAL


	)

22 
	~"zlib.h
"

24 #i‡
deföed
(
STDC
Ë&& !deföed(
Z_SOLO
)

25 #i‡!(
deföed
(
_WIN32_WCE
Ë&& deföed(
_MSC_VER
))

26 
	~<°ddef.h
>

28 
	~<°rög.h
>

29 
	~<°dlib.h
>

32 #ifde‡
Z_SOLO


33 
	t±rdiff_t
;

36 #i‚de‡
loˇl


37 
	#loˇl
 

	)

43 
	tuch
;

44 
uch
 
	tFAR
 
	tuchf
;

45 
	tush
;

46 
ush
 
	tFAR
 
	tushf
;

47 
	tulg
;

49 
z_c⁄°
 *c⁄° 
z_îrmsg
[10];

52 
	#ERR_MSG
(
îr
Ë
z_îrmsg
[
Z_NEED_DICT
-”º)]

	)

54 
	#ERR_RETURN
(
°rm
,
îr
) \

55  (
°rm
->
msg
 = 
	`ERR_MSG
(
îr
), (îr))

	)

60 #i‚de‡
DEF_WBITS


61 
	#DEF_WBITS
 
MAX_WBITS


	)

65 #i‡
MAX_MEM_LEVEL
 >= 8

66 
	#DEF_MEM_LEVEL
 8

	)

68 
	#DEF_MEM_LEVEL
 
MAX_MEM_LEVEL


	)

72 
	#STORED_BLOCK
 0

	)

73 
	#STATIC_TREES
 1

	)

74 
	#DYN_TREES
 2

	)

77 
	#MIN_MATCH
 3

	)

78 
	#MAX_MATCH
 258

	)

81 
	#PRESET_DICT
 0x20

	)

85 #i‡
deföed
(
MSDOS
Ë|| (deföed(
WINDOWS
Ë&& !deföed(
WIN32
))

86 
	#OS_CODE
 0x00

	)

87 #i‚de‡
Z_SOLO


88 #i‡
deföed
(
__TURBOC__
Ë|| deföed(
__BORLANDC__
)

89 #i‡(
__STDC__
 =1Ë&& (
deföed
(
__LARGE__
Ë|| deföed(
__COMPACT__
))

91 
_Cde˛
 
Ár‰ì
(*
block
);

92 *
_Cde˛
 
ÁrmÆloc
(
nbyãs
);

94 
	~<Æloc.h
>

97 
	~<mÆloc.h
>

102 #ifde‡
AMIGA


103 
	#OS_CODE
 1

	)

106 #i‡
deföed
(
VAXC
Ë|| deföed(
VMS
)

107 
	#OS_CODE
 2

	)

108 
	#F_OPEN
(
«me
, 
mode
) \

109 
	`f›í
((
«me
), (
mode
), "mbc=60", "˘x=°m", "rfm=fix", "mrs=512")

	)

112 #ifde‡
__370__


113 #i‡
__TARGET_LIB__
 < 0x20000000

114 
	#OS_CODE
 4

	)

115 #ñi‡
__TARGET_LIB__
 < 0x40000000

116 
	#OS_CODE
 11

	)

118 
	#OS_CODE
 8

	)

122 #i‡
deföed
(
ATARI
Ë|| deföed(
©¨i°
)

123 
	#OS_CODE
 5

	)

126 #ifde‡
OS2


127 
	#OS_CODE
 6

	)

128 #i‡
deföed
(
M_I86
Ë&& !deföed(
Z_SOLO
)

129 
	~<mÆloc.h
>

133 #i‡
deföed
(
MACOS
Ë|| deföed(
TARGET_OS_MAC
)

134 
	#OS_CODE
 7

	)

135 #i‚de‡
Z_SOLO


136 #i‡
deföed
(
__MWERKS__
Ë&& 
__de°_os
 !
__be_os
 && __de°_o†!
__wö32_os


137 
	~<unix.h
>

139 #i‚de‡
fd›í


140 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

146 #ifde‡
__ac‹n


147 
	#OS_CODE
 13

	)

150 #i‡
deföed
(
WIN32
Ë&& !deföed(
__CYGWIN__
)

151 
	#OS_CODE
 10

	)

154 #ifde‡
_BEOS_


155 
	#OS_CODE
 16

	)

158 #ifde‡
__TOS_OS400__


159 
	#OS_CODE
 18

	)

162 #ifde‡
__APPLE__


163 
	#OS_CODE
 19

	)

166 #i‡
deföed
(
_BEOS_
Ë|| deföed(
RISCOS
)

167 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

170 #i‡(
deföed
(
_MSC_VER
Ë&& (_MSC_VER > 600)Ë&& !deföed 
__INTERIX


171 #i‡
deföed
(
_WIN32_WCE
)

172 
	#fd›í
(
fd
,
mode
Ë
NULL


	)

173 #i‚de‡
_PTRDIFF_T_DEFINED


174 
	t±rdiff_t
;

175 
	#_PTRDIFF_T_DEFINED


	)

178 
	#fd›í
(
fd
,
ty≥
Ë
	`_fd›í
(fd,ty≥)

	)

182 #i‡
deföed
(
__BORLANDC__
Ë&& !deföed(
MSDOS
)

183 #¥agm®
w¨n
 -8004

184 #¥agm®
w¨n
 -8008

185 #¥agm®
w¨n
 -8066

189 #i‡!
deföed
(
_WIN32
) && \

190 (!
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
	g_LFS64_LARGEFILE
-0 == 0)

191 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

192 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

197 #i‚de‡
OS_CODE


198 
	#OS_CODE
 3

	)

201 #i‚de‡
F_OPEN


202 
	#F_OPEN
(
«me
, 
mode
Ë
	`f›í
(“ame), (mode))

	)

207 #i‡
deföed
(
pyr
Ë|| deföed(
Z_SOLO
)

208 
	#NO_MEMCPY


	)

210 #i‡
deföed
(
SMALL_MEDIUM
Ë&& !deföed(
_MSC_VER
Ë&& !deföed(
__SC__
)

215 
	#NO_MEMCPY


	)

217 #i‡
deföed
(
STDC
Ë&& !deföed(
HAVE_MEMCPY
Ë&& !deföed(
NO_MEMCPY
)

218 
	#HAVE_MEMCPY


	)

220 #ifde‡
HAVE_MEMCPY


221 #ifde‡
SMALL_MEDIUM


222 
	#zmem˝y
 
_fmem˝y


	)

223 
	#zmemcmp
 
_fmemcmp


	)

224 
	#zmemzîo
(
de°
, 
Àn
Ë
	`_fmem£t
(de°, 0,Üí)

	)

226 
	#zmem˝y
 
mem˝y


	)

227 
	#zmemcmp
 
memcmp


	)

228 
	#zmemzîo
(
de°
, 
Àn
Ë
	`mem£t
(de°, 0,Üí)

	)

231 
ZLIB_INTERNAL
 
zmem˝y
 
OF
((
Byãf
 *
de°
, c⁄° Byã‡*
sour˚
, 
uI¡
 
Àn
));

232 
ZLIB_INTERNAL
 
zmemcmp
 
OF
((c⁄° 
Byãf
 *
s1
, c⁄° Byã‡*
s2
, 
uI¡
 
Àn
));

233 
ZLIB_INTERNAL
 
zmemzîo
 
OF
((
Byãf
 *
de°
, 
uI¡
 
Àn
));

237 #ifde‡
ZLIB_DEBUG


238 
	~<°dio.h
>

239 
ZLIB_INTERNAL
 
z_vîbo£
;

240 
ZLIB_INTERNAL
 
z_îr‹
 
OF
((*
m
));

241 
	#As£π
(
c⁄d
,
msg
Ë{if(!(c⁄d)Ë
	`z_îr‹
(msg);}

	)

242 
	#Tø˚
(
x
Ë{i‡(
z_vîbo£
>=0Ë
Ârötf
 x ;}

	)

243 
	#Tø˚v
(
x
Ë{i‡(
z_vîbo£
>0Ë
Ârötf
 x ;}

	)

244 
	#Tø˚vv
(
x
Ë{i‡(
z_vîbo£
>1Ë
Ârötf
 x ;}

	)

245 
	#Tø˚c
(
c
,
x
Ë{i‡(
z_vîbo£
>0 && (c)Ë
Ârötf
 x ;}

	)

246 
	#Tø˚cv
(
c
,
x
Ë{i‡(
z_vîbo£
>1 && (c)Ë
Ârötf
 x ;}

	)

248 
	#As£π
(
c⁄d
,
msg
)

	)

249 
	#Tø˚
(
x
)

	)

250 
	#Tø˚v
(
x
)

	)

251 
	#Tø˚vv
(
x
)

	)

252 
	#Tø˚c
(
c
,
x
)

	)

253 
	#Tø˚cv
(
c
,
x
)

	)

256 #i‚de‡
Z_SOLO


257 
voidpf
 
ZLIB_INTERNAL
 
zˇŒoc
 
OF
((voidp‡
›aque
, 
ôems
,

258 
size
));

259 
ZLIB_INTERNAL
 
zc‰ì
 
OF
((
voidpf
 
›aque
, voidp‡
±r
));

262 
	#ZALLOC
(
°rm
, 
ôems
, 
size
) \

263 (*((
°rm
)->
zÆloc
))((°rm)->
›aque
, (
ôems
), (
size
))

	)

264 
	#ZFREE
(
°rm
, 
addr
Ë(*((°rm)->
z‰ì
))((°rm)->
›aque
, (
voidpf
)◊ddr))

	)

265 
	#TRY_FREE
(
s
, 
p
Ë{i‡’Ë
	`ZFREE
(s,Ö);}

	)

268 
	#ZSWAP32
(
q
) ((((q) >> 24) & 0xff) + (((q) >> 8) & 0xff00) + \

269 (((
q
Ë& 0xff00Ë<< 8Ë+ (((qË& 0xffË<< 24))

	)

	@include_lib/server/audio_server.h

1 #i‚de‡
AUDIO_SERVER_H


2 
	#AUDIO_SERVER_H


	)

4 
	~"fs/fs.h
"

8 
	mAUDIO_SERVER_EVENT_CURR_TIME
 = 0x20,

9 
	mAUDIO_SERVER_EVENT_END
,

10 
	mAUDIO_SERVER_EVENT_ERR
,

13 
	#AUDIO_REQ_DEC
 0

	)

14 
	#AUDIO_REQ_ENC
 1

	)

15 
	#AUDIO_REQ_GET_INFO
 2

	)

17 
	#AUDIO_DEC_OPEN
 0

	)

18 
	#AUDIO_DEC_START
 1

	)

19 
	#AUDIO_DEC_PAUSE
 2

	)

20 
	#AUDIO_DEC_STOP
 3

	)

21 
	#AUDIO_DEC_FF
 4

	)

22 
	#AUDIO_DEC_FR
 5

	)

23 
	#AUDIO_DEC_GET_BREAKPOINT
 6

	)

24 
	#AUDIO_DEC_PP
 7

	)

25 
	#AUDIO_DEC_SET_VOLUME
 8

	)

28 
	#AUDIO_ENC_OPEN
 4

	)

29 
	#AUDIO_ENC_START
 5

	)

30 
	#AUDIO_ENC_PAUSE
 6

	)

31 
	#AUDIO_ENC_STOP
 7

	)

32 
	#AUDIO_ENC_CLOSE
 8

	)

34 
	saudio_dec_bªakpoöt
 {

35 
	mÀn
;

36 
u32
 
	mÂå
;

37 
u8
 
	md©a
[128];

40 
	saudio_föfo
 {

41 
u8
 
	mch™√l
;

42 
u8
 
	m«me_code
;

43 
	mßm∂e_øã
;

44 
	mbô_øã
;

45 
	mtŸÆ_time
;

49 
	saudio_vfs_›s
 {

50 *(*
	mf›í
)(c⁄° *
	m∑th
, c⁄° *
	mmode
);

51 (*
	m‰ód
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

52 (*
	mfwrôe
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

53 (*
	mf£ek
)(*
	mfûe
, 
u32
 
	moff£t
, 
	m£ek_mode
);

54 (*
	m·ñl
)(*
	mfûe
);

55 (*
	mÊí
)(*
	mfûe
);

56 (*
	mf˛o£
)(*
	mfûe
);

60 
	saudio_dec_ouçut_›s
 {

61 *(*
	mgë_buf
)(*
	m¥iv
, 
u32
 *
	mÀn
);

62 (*
	mput_buf
)(*
	m¥iv
, *
	mbuf
, 
u32
 
	mÀn
);

63 c⁄° 
audio_vfs_›s
 *
	mvfs_›s
;

66 
	saudio_decodî_›s
 {

67 c⁄° *
	m«me
;

68 *(*
	m›í
)(
FILE
 *
	mfûe
, *
	m¥iv
,

69 c⁄° 
audio_dec_ouçut_›s
 *
	m›s
, 
	maudio_dec_bªakpoöt
 *);

70 *(*
	måy_›í
)(
FILE
 *
	mfûe
, *
	m¥iv
,

71 c⁄° 
audio_dec_ouçut_›s
 *
	m›s
, 
	maudio_dec_bªakpoöt
 *);

72 (*
	mgë_audio_öfo
)(*, 
audio_föfo
 *
	möfo
);

73 (*
	mgë_∂ay_time
)(*);

74 (*
	mÁ°_f‹w¨d
)(*, 
	m°ï_s
);

75 (*
	mÁ°_ªwöd
)(*, 
	m°ï_s
);

76 (*
	mgë_bªakpoöt
)(*, 
	maudio_dec_bªakpoöt
 *);

77 (*
	m°¨t
)(*);

78 (*
	m˛o£
)(*);

83 
	saudio_dec_ªq
 {

84 
u8
 
	mcmd
;

85 
u8
 
	m°©us
;

86 
u8
 
	mch™√l
;

87 
u8
 
	mvﬁume
;

88 
u8
 
	m¥i‹ôy
;

89 
u32
 
	mouçut_buf_Àn
;

90 
u32
 
	mßm∂e_øã
;

91 
u32
 
	mff_‰_°ï
;

92 
u32
 
	mtŸÆ_time
;

93 *
	mouçut_buf
;

94 
FILE
 *
	mfûe
;

95 *
	mdec_ty≥
;

96 
audio_dec_bªakpoöt
 
	mbp
;

97 c⁄° 
audio_vfs_›s
 *
	mvfs_›s
;

101 
	gaudio_íc_ªq
;

103 
	saudio_∑ckage_›s
 {

104 c⁄° *
	m«me
;

105 c⁄° *
	md©a_fmt
;

106 *(*
	m›í
)(*
	mfûe
, c⁄° 
	maudio_vfs_›s
 *, 
	maudio_íc_ªq
 *);

107 (*
	m°¨t
)(*);

108 (*
	möput
)(*, 
u8
 *
	md©a
, 
	mÀn
);

109 (*
	m˛o£
)(*);

112 
	saudio_íc_ªq
 {

113 
u8
 
	mcmd
;

114 
u8
 
	mch™√l
;

115 
u8
 
	mvﬁume
;

116 
u8
 
	m¥i‹ôy
;

117 
u16
 
	mkbps
;

118 
u16
 
	m‰ame_size
;

119 
u32
 
	mouçut_buf_Àn
;

120 
u32
 
	mßm∂e_øã
;

121 
u32
 
	mm£c
;

122 
FILE
 *
	mfûe
;

123 
u8
 *
	mouçut_buf
;

124 
u16
 
	m‰ame_hód_ª£rve_Àn
;

125 c⁄° *
	mf‹m©
;

126 c⁄° *
	mßm∂e_sour˚
;

127 c⁄° 
audio_vfs_›s
 *
	mvfs_›s
;

130 
	uaudio_ªq
 {

131 
audio_dec_ªq
 
	mdec
;

132 
audio_föfo
 
	möfo
;

133 
audio_íc_ªq
 
	míc
;

137 
	#REGISTER_AUDIO_DECODER
(
›s
) \

138 c⁄° 
audio_decodî_›s
 
›s
 
	`£c
(.
audio_decodî
)

	)

141 c⁄° 
audio_decodî_›s
 
audio_decodî_begö
[];

142 c⁄° 
audio_decodî_›s
 
audio_decodî_íd
[];

144 
	#li°_f‹_óch_audio_decodî
(
p
) \

145 
p
 = 
audio_decodî_begö
;Ö < 
audio_decodî_íd
;Ö++)

	)

149 
	#REGISTER_AUDIO_PACKAGE
(
›s
) \

150 c⁄° 
audio_∑ckage_›s
 
›s
 
	`£c
(.
audio_∑ckage
)

	)

152 c⁄° 
audio_∑ckage_›s
 
audio_∑ckage_begö
[];

153 c⁄° 
audio_∑ckage_›s
 
audio_∑ckage_íd
[];

155 
	#li°_f‹_óch_audio_∑ckage
(
p
) \

156 
p
 = 
audio_∑ckage_begö
;Ö < 
audio_∑ckage_íd
;Ö++)

	)

	@include_lib/server/jl_camera_protocol.h

6 
	~"ty≥def.h
"

9 
	sjlc_°ªam_∑ckë
 {

10 
	moff£t
 : 32;

11 
	mÀn
 : 24;

12 
	m∑ylﬂd_öfo
 : 8;

13 
u8
 
	md©a
[2048];

17 
	sjlc_∑ckë_hódî
 {

18 
	mid
 : 8;

19 
	m©å
 : 8;

20 
	mdú
 : 1;

21 
	mª£rved
 : 15;

22 
	mÀn
 : 24;

25 
	#JLC_PID
 0x4A

	)

31 
	ejlc_∑ckë_©åibuã
 {

32 
	mJLC_STREAM
 = 0x4B,

33 
	mJLC_CTL
,

34 
	mJLC_REQUEST
,

35 
	mJLC_RESPONSE
,

36 
	mJLC_ACK
,

40 
	#JLC_CTL_PID
 0x82

	)

41 
	sjlc_c⁄åﬁ_∑ckë
 {

42 
u8
 
	mpid
;

43 
u8
 
	mcmd
;

44 
u16
 
	mÀn
;

45 
u8
 
	md©a
[0];

48 
	#FRAME_START_PID
 0x80

	)

49 
	#FRAME_SUB_PID
 0x81

	)

50 
	sv_‰ame_hódî
 {

51 
u8
 
	mpid
;

52 
u8
 
	mfmt
;

53 
u16
 
	mpkt_Àn
;

54 
	mÀn
;

55 
u32
 
	m‰ame_id
;

56 
u32
 
	moff£t
;

60 
	ejl_ˇmîa_ªc_°©e
 {

61 
	mJLC_REC_START
 = 0x20,

62 
	mJLC_REC_STOP
,

63 
	mJLC_SAVE_FILE
,

64 
	mJLC_SET_REC_INFO
,

65 
	mJLC_SET_INFO
,

66 
	mJLC_GET_INFO
,

67 
	mJLC_SET_OSD
,

68 
	mJLC_SET_MUTE
,

	@include_lib/server/led_ui_server.h

1 #i‚de‡
_LED_UI_SERVER_H_


2 
	#_LED_UI_SERVER_H_


	)

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"ui/ö˛udes.h
"

10 
	mLED_UI_REQ_SHOW
,

11 
	mLED_UI_REQ_HIDE
,

12 
	mLED_UI_REQ_MSG
,

13 
	mLED_UI_REQ_SHOW_SYNC
,

16 
	sÀd_ui_∑øm
 {

17 
u32
 
	mid
;

21 
	sÀd_ui_msg
 {

22 c⁄° *
	mª˚ivî
;

23 c⁄° *
	mmsg
;

24 *
	mexd©a
;

28 
	uÀd_uúeq
 {

29 
Àd_ui_∑øm
 
	mshow
;

30 
Àd_ui_∑øm
 
	mhide
;

31 
Àd_ui_msg
 
	mmsg
;

35 
	sÀd_ui_¨gs
 {

36 
u32
 
	m°yÀ_vî
;

37 
u32
 
	mªs_vî
;

38 
u32
 
	m°r_vî
;

41 
Àd_ui_ªgi°î_msg_h™dÀr
(c⁄° *
ª˚ivî
, c⁄° 
uimsg_h™dl
 *
h™dÀr
);

42 
Àd_ui_uƒegi°î_msg_h™dÀr
(c⁄° *
ª˚ivî
);

	@include_lib/server/server.ld

2 
	g_audio_decodî_begö
 = .;

3 
PROVIDE
(
audio_decodî_begö
 = .);

4 *(.
	gaudio_decodî
)

5 
	g_audio_decodî_íd
 = .;

6 
PROVIDE
(
audio_decodî_íd
 = .);

8 
	g_audio_∑ckage_begö
 = .;

9 
PROVIDE
(
audio_∑ckage_begö
 = .);

10 *(.
	gaudio_∑ckage
)

11 
	g_audio_∑ckage_íd
 = .;

12 
PROVIDE
(
audio_∑ckage_íd
 = .);

	@include_lib/server/server_core.h

1 #i‚de‡
SERVER_H


2 
	#SERVER_H


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"sy°em/èsk.h
"

6 
	~"•ölock.h
"

7 
	~"li°.h
"

10 
	#REQ_COMPLETE_CALLBACK
 0x01000000

	)

11 
	#REQ_WAIT_COMPLETE
 0x02000000

	)

12 
	#REQ_HI_PRIORITY
 0x04000000

	)

15 
	#REQ_TYPE_MASK
 0x00ffffff

	)

18 
	s£rvî_ªq
 {

19 
	mty≥
;

20 
	mîr
;

21 *
	m£rvî_¥iv
;

22 
li°_hód
 
	míåy
;

23 
£rvî
 *
	m£rvî
;

24 *
	mu£r
;

25 c⁄° *
	mow√r
;

26 
OS_SEM
 
	m£m
;

28 
	m°©e
;

29 (*
	mfunc
)(*, *, );

30 } 
	mcom∂ëe
;

31 
u32
 
	m¨g
[0];

35 
	s£rvî_öfo
 {

36 c⁄° *
	m«me
;

37 
u16
 
	mªqÀn
;

38 
u8
 
	mªqnum
;

39 *(*
	m›í
)(*, *);

40 (*
	m˛o£
)(*);

43 
	#REQ_BUF_LEN
 512

	)

45 
	s£rvî
 {

46 
boﬁ
 
	mavÆübÀ
;

47 *
	m£rvî
;

48 
OS_SEM
 
	m£m
;

49 
OS_MUTEX
 
	mmuãx
;

50 
•ölock_t
 
	mlock
;

51 
li°_hód
 *
	mªq_buf
;

52 
li°_hód
 
	m‰ì
;

53 
li°_hód
 
	m≥ndög
;

54 c⁄° 
£rvî_öfo
 *
	möfo
;

55 c⁄° *
	mow√r
;

56 *
	mh™dÀr_¥iv
;

57 (*
	mevít_h™dÀr
)(*, 
	m¨gc
, *
	m¨gv
);

62 
	#SERVER_REGISTER
(
öfo
) \

63 c⁄° 
£rvî_öfo
 
öfo
 
	`£c
(.£rvî_öfo)

	)

66 
	#£rvî_lﬂd
(
£rvî
) \

67 
	`lﬂd_moduÀ
(
£rvî
)

	)

69 
£rvî
 *
£rvî_›í
(c⁄° *
«me
, *
¨g
);

71 
£rvî_ªgi°î_evít_h™dÀr
(
£rvî
 *£rvî, *
¥iv
,

72 (*
h™dÀr
)(*, 
¨gc
, *
¨gv
));

74 
	`£rvî_˛o£
(
£rvî
 *server);

76 
	`£rvî_ªque°
(
£rvî
 *£rvî, 
ªq_ty≥
, *
¨g
);

78 
	`£rvî_ªque°_async
(
£rvî
 *£rvî, 
ªq_ty≥
, *
¨g
, ...);

80 
	`£rvî_ªq_com∂ëe
(
£rvî_ªq
 *
ªq
);

82 
	`£rvî_evít_h™dÀr
(*
_£rvî
, 
¨gc
, *
¨gv
);

	@include_lib/server/ui_server.h

1 #i‚de‡
UI_SERVER_H


2 
	#UI_SERVER_H


	)

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"ui/ö˛udes.h
"

10 
	mUI_REQ_SHOW
,

11 
	mUI_REQ_HIDE
,

12 
	mUI_REQ_MSG
,

13 
	mUI_REQ_SHOW_SYNC
,

18 
	sui_∑øm
 {

19 
u32
 
	mid
;

23 
	sui_msg
 {

24 
u32
 
	mª˚ivî
;

25 c⁄° *
	mmsg
;

26 *
	mexd©a
;

30 
	sui_™im©i⁄
 {

31 
u32
 
	mid
;

32 
u16
 
	mtime
;

33 
u16
 
	ma˘i⁄
;

37 
	uuúeq
 {

38 
ui_∑øm
 
	mshow
;

39 
ui_∑øm
 
	mhide
;

40 
ui_msg
 
	mmsg
;

44 
	sui_¨gs
 {

45 
u32
 
	m°yÀ_vî
;

46 
u32
 
	mªs_vî
;

47 
u32
 
	m°r_vî
;

52 
ui_£rvî_vîsi⁄
();

56 
imp‹t_ui_£rvî
();

58 
ui_míu_gë_busy
();

59 
ui_míu_£t_busy
(
busy
);

62 
ui_£rvî_show_com∂ëed
();

	@include_lib/server/upgrade_server.h

6 #i‚de‡
_UPGRADE_SERVER_H_


7 
	#_UPGRADE_SERVER_H_


	)

9 
	~"£rvî/£rvî_c‹e.h
"

10 
	~"sy°em/ö˛udes.h
"

12 
	#UPGRADE_TYPE_FILE
 0x0

	)

13 
	#UPGRADE_TYPE_BUF
 0x1

	)

15 
	esy°em_upgøde_îr
 {

16 
	mSYS_UPGRADE_ERR_NONE
 = 0x0,

17 
	mSYS_UPGRADE_ERR_TYPE
,

18 
	mSYS_UPGRADE_ERR_MODE
,

19 
	mSYS_UPGRADE_ERR_FILE_ERR
,

20 
	mSYS_UPGRADE_ERR_NO_FILE
,

21 
	mSYS_UPGRADE_ERR_DATA_OFFSET
,

22 
	mSYS_UPGRADE_ERR_CHECK_NO_MEM
,

23 
	mSYS_UPGRADE_ERR_KEY
,

24 
	mSYS_UPGRADE_ERR_FLASH_SPACE
,

25 
	mSYS_UPGRADE_ERR_SYSTEM_FILE
,

26 
	mSYS_UPGRADE_ERR_SAME
,

27 
	mSYS_UPGRADE_ERR_ADDRESS
,

28 
	mSYS_UPGRADE_ERR_BAK_FILE
,

29 
	mSYS_UPGRADE_ERR_DATA_LARGE
,

36 
	mUPGRADE_REQ_CHECK_FILE
,

37 
	mUPGRADE_REQ_LOAD_UI
,

38 
	mUPGRADE_REQ_CHECK_SYSTEM
,

39 
	mUPGRADE_REQ_CORE_START
,

40 
	mUPGRADE_REQ_CORE_STOP
,

43 
	supgøde_d©a
 {

44 
u8
 *
	mbuf
;

45 
u32
 
	msize
;

48 
	supgøde_ui
 {

49 
u8
 
	mty≥
;

51 
upgøde_d©a
 
	md©a
;

52 
FILE
 *
	mfûe
;

53 } 
	möput
;

54 (*
	mshow_¥ogªss
)(
	m≥r˚¡
);

55 (*
	mshow_mesßge
)(
	mmsg
);

56 c⁄° *
	m∑th
;

59 
	supgøde_öfo
 {

60 
u8
 
	mty≥
;

62 
upgøde_d©a
 
	md©a
;

63 
FILE
 *
	mfûe
;

64 } 
	möput
;

65 
u32
 
	moff£t
;

68 
	supgøde_c‹e
 {

69 
u8
 
	mty≥
;

71 
upgøde_d©a
 
	md©a
;

72 
FILE
 *
	mfûe
;

73 } 
	möput
;

74 
u32
 
	moff£t
;

77 
	ssys_upgøde_∑øm
 {

78 
u8
 *
	mbuf
;

79 
u32
 
	mbuf_size
;

80 c⁄° *
	mdev_«me
;

84 
	usys_upgøde_ªq
 {

85 
upgøde_ui
 
	mui
;

86 
upgøde_öfo
 
	möfo
;

87 
upgøde_c‹e
 
	mc‹e
;

	@include_lib/server/usb_server.h

8 #i‚de‡
_USB_SERVER_H


9 
	#_USB_SERVER_H


	)

11 
	~"£rvî/£rvî_c‹e.h
"

12 
	~"sy°em/ö˛udes.h
"

15 
	#USB_REQ_SLAVE_MODE
 0x01

	)

16 
	#USB_REQ_HOST_MODE
 0x02

	)

19 
	#USB_MASS_STORAGE
 0x1

	)

20 
	#USB_CAMERA
 0x2

	)

21 
	#USB_ISD_TOOL
 0x4

	)

22 
	#USB_ISP_TOOL
 0x8

	)

23 
	#USB_SCREEN_TOOL
 0x10

	)

24 
	#USB_MANUAL_CAMERA
 0x20

	)

25 
	#USB_HID
 0x40

	)

27 
	#USB_TOOLS
 0x1C

	)

29 
	#USB_VIDEO_FMT_MJPG
 0x1

	)

30 
	#USB_VIDEO_FMT_H264
 0x2

	)

32 
	#USB_HID_NONE
 0x00

	)

33 
	#USB_HID_KEYBOARD
 0x01

	)

34 
	#USB_HID_USER
 0x02

	)

36 
	#USB_HID_KB_PREFIX_PKG
 0x80

	)

37 
	#USB_HID_KB_PREFIX_SPEC
 0x81

	)

38 
	#USB_HID_KB_PREFIX_HOLD
 0x82

	)

39 
	#USB_HID_KB_PREFIX_HEND
 0x83

	)

41 
	#USER_DEFINED_TOOL_CMD
 0xF9

	)

43 
	mUSB_STATE_SLAVE_CONNECT
,

44 
	mUSB_STATE_SLAVE_DISCONNECT
,

45 
	mUSB_STATE_SLAVE_RESET
,

46 
	mUVC_STATE_GET_FRMAE_BUF
,

47 
	mUVC_STATE_PUT_FRMAE_BUF
,

48 
	mUVC_STATE_GET_FREE_SIZE
,

54 
	mUSB_STATE_SLAVE_DATA_TRANSFER
,

57 
	suvc_ªso
 {

58 
u16
 
	mwidth
;

59 
u16
 
	mheight
;

62 
	suvc_ªso_öfo
 {

63 
	mnum
;

64 
uvc_ªso
 
	mªso
[5];

67 
	susb_toﬁ
 {

68 (*
	mªcv
)(*
	mbuf
, 
	mÀn
);

69 (*
	m£nd
)(*
	mbuf
, 
	mÀn
);

72 
	smass_°‹age_fmt
 {

73 
	mdev_num
;

74 c⁄° **
	mdev
;

75 c⁄° *
	m«me
;

76 (*
	mtoﬁ_ª•⁄£
)(*
	mtoﬁ
, *
	mbuf
, 
	mÀn
);

79 
	smsg_c⁄√˘
 {

80 
mass_°‹age_fmt
 *
	mfmt
;

81 *
	mtoﬁ
;

82 (*
	mª•⁄£
)(*
	mtoﬁ
, *
	m¨g
, 
u8
 
	mty≥
);

85 
	suvc_¥iv©e_ªq
 {

86 
u16
 
	mcmd
;

87 
u16
 
	md©a
;

90 
	susb_ˇmîa
 {

91 c⁄° *
	m«me
;

92 
u8
 
	míabÀ
;

93 
u8
 
	mf‹m©
;

94 
u8
 
	mquÆôy
;

95 
u8
 
	mfmt_num
;

96 
u32
 
	mbôs_øã
;

97 
u16
 
	mwidth
;

98 
u16
 
	mheight
;

99 
u8
 *
	mbuf
;

100 
u32
 
	mbuf_size
;

101 (*
	mvideo_›í
)(
	mwidth
, 
	mheight
, 
	mfmt
, 
	mÂs
);

102 (*
	mvideo_˛o£
)();

103 (*
	m¥o˚ssög_unô_ª•⁄£
)(
uvc_unô_˘æ
 *
	m˘l_ªq
);

104 (*
	m¥iv©e_cmd_ª•⁄£
)(
uvc_¥iv©e_ªq
 *
	mªq
);

105 (*
	mtoﬁ_ª•⁄£
)(*
	mtoﬁ
, *
	mbuf
, 
	mÀn
);

106 
uvc_ªso_öfo
 *
	möfo
;

110 
	suvc_‰ame
 {

111 
u8
 *
	mbuf
;

112 
	msize
;

115 
	shid_keybﬂrd
 {

116 
u8
 *
	mibuf
;

117 
u32
 
	mûí
;

120 
	shid_u£r
 {

121 
u8
 *
	mibuf
;

122 
u32
 
	mûí
;

123 (*
	mouçut
)(
u8
 *
	mobuf
, 
u32
 
	mﬁí
);

124 
u8
 *
	mcu°_Ω_desc
;

125 
u32
 
	mdesc_Àn
;

128 
	susb_hid
 {

129 
u8
 
	mty≥
;

131 
hid_keybﬂrd
 
	mkb
;

132 
hid_u£r
 
	mu£r_dev
;

133 } 
	mdev
;

152 
	susb_ªq
 {

153 
u8
 
	mty≥
;

154 
u8
 
	m°©e
;

156 
mass_°‹age_fmt
 
	m°‹age
;

157 
usb_ˇmîa
 
	mˇmîa
[2];

158 
uvc_‰ame
 
	m‰ame
;

159 
usb_hid
 
	mhid
;

163 
	susb_evít
 {

164 
u32
 
	mty≥
;

165 (*
	mˇŒback
)(*
	m¨g
);

166 *
	m¥iv
;

	@include_lib/server/uvm.h

2 #i‚de‡
__UVM_H__


3 
	#__UVM_H__


	)

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"£rvî/video_£rvî.h
"

8 
	euvm_ªc_°©us
 {

9 
	mUVM_REC_IDLE
,

10 
	mUVM_REC_START
,

11 
	mUVM_REC_STOP
,

12 
	mUVM_REC_STOPING
,

13 
	mUVM_REC_PAUSE
,

14 
	mUVM_REC_ERR
,

17 
	#UVM_CMD_SET_INFO
 1

	)

18 
	#UVM_CMD_GET_INFO
 2

	)

19 
	#UVM_CMD_START
 3

	)

20 
	#UVM_CMD_STOP
 4

	)

21 
	#UVM_CMD_SAVE_FILE
 5

	)

22 
	#UVM_CMD_GET_DATA
 6

	)

23 
	#UVM_CMD_SET_OSD_STR
 7

	)

24 
	#UVM_CMD_PKG_MUTE
 8

	)

27 
	suvm_ªc
 {

28 * 
	mfd
;

29 *
	m¥iv©e_d©a
;

30 c⁄° *
	mdev_«me
;

31 
OS_SEM
 
	m£m
;

32 
OS_SEM
 
	m∑u£
;

33 
	mèsk_«me
[16];

34 * 
	mfûe
;

35 
u8
 
	m‚ame_buf
[64];

38 
u8
 
	m°©us
;

43 
	suvm_ªc_d©a
 {

44 
u8
 *
	mbuf
;

45 
u32
 
	mÀn
;

46 
u32
 
	maddr
;

47 
u32
 
	míd_Êag
;

51 
uvm_ªc_°¨t
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

53 
uvm_ªc_ßve_fûe
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

55 
uvm_ªc_°›
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

57 
uvm_ªc_∑u£
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

59 
uvm_ªc_ªsume
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

61 
uvm_ªc_£t_osd_°r
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

63 
uvm_ªc_gë_öfo
(
uvm_ªc
 * 
uvm
, 
vpkg_gë_öfo
 * 
gë_öfo
);

65 
uvm_ªc_pkg_muã
(
uvm_ªc
 * 
uvm
, 
vs_video_ªc
 *
ªc
);

	@include_lib/server/video_dec_server.h

1 #i‚de‡
VIDEO_DECODE_SERVER_H


2 
	#VIDEO_DECODE_SERVER_H


	)

5 
	~"£rvî/£rvî_c‹e.h
"

6 
	~"fs/fs.h
"

9 
	#VIDEO_DEC_EVENT_END
 0x20

	)

10 
	#VIDEO_DEC_EVENT_CURR_TIME
 0x21

	)

11 
	#VIDEO_DEC_EVENT_ERR
 0x22

	)

60 
	svds_video_öfo
 {

61 
u16
 
	mwidth
;

62 
u16
 
	mheight
;

63 
u32
 
	mtŸÆ_time
;

66 
	svds_audio_∑øm
 {

67 *
	mbuf
;

68 
	mbuf_Àn
;

69 
u32
 
	mvﬁume
;

72 
	svds_image_öfo
 {

73 
u8
 *
	mbuf
;

74 
u32
 
	msize
;

75 
u8
 *
	maux_buf
;

76 
u32
 
	maux_buf_size
;

79 
	svideo_dec_∑øm
 {

80 
u16
 
	mÀ·
;

81 
u16
 
	mt›
;

82 
u16
 
	mwidth
;

83 
u16
 
	mheight
;

84 
u16
 
	mb‹dî_À·
;

85 
u16
 
	mb‹dî_t›
;

86 
u16
 
	mb‹dî_right
;

87 
u16
 
	mb‹dî_bŸtom
;

88 
u8
 
	m¥evõw
;

89 
u8
 
	mthm_fú°
;

90 
u8
 
	mvﬁume
;

91 
FILE
 *
	mfûe
;

92 c⁄° *
	m·y≥
;

93 c⁄° *
	mfb
;

94 
vds_image_öfo
 
	mimage
;

95 
vds_video_öfo
 
	möfo
;

96 
imc_¥esˇ_˘l
 *
	mp˘l
;

99 
	svideo_dec_¥evõw
 {

100 
u8
 
	mshow_mode
;

101 
u8
 
	mrŸ©e
;

102 
u16
 
	mÀ·
;

103 
u16
 
	mt›
;

104 
u16
 
	mwidth
;

105 
u16
 
	mheight
;

106 
u16
 
	mb‹dî_À·
;

107 
u16
 
	mb‹dî_t›
;

108 
u16
 
	mb‹dî_right
;

109 
u16
 
	mb‹dî_bŸtom
;

110 
u16
 
	md°_À·
;

111 
u16
 
	md°_t›
;

112 
u32
 
	mbackcﬁ‹
;

113 
FILE
 *
	mfûe
;

114 c⁄° *
	mfb
;

115 
vds_image_öfo
 
	mimage
;

116 
vds_video_öfo
 
	möfo
;

117 
imc_¥esˇ_˘l
 *
	mp˘l
;

120 
	svideo_dec_ff_‰
 {

121 
u8
 
	m⁄
;

122 
u8
 
	m⁄˚
;

123 
u8
 
	mtimes
;

124 
u16
 
	mm£c_°ï
;

131 
	mVIDEO_REQ_DEC_STOP
,

132 
	mVIDEO_REQ_DEC_START
,

133 
	mVIDEO_REQ_DEC_PLAY_PAUSE
,

134 
	mVIDEO_REQ_DEC_RESUME
,

135 
	mVIDEO_REQ_DEC_FF
,

136 
	mVIDEO_REQ_DEC_FR
,

137 
	mVIDEO_REQ_DEC_IMAGE
,

138 
	mVIDEO_REQ_DEC_PREVIEW_OPEN
,

139 
	mVIDEO_REQ_DEC_PREVIEW
,

140 
	mVIDEO_REQ_DEC_PREVIEW_CLEAR
,

141 
	mVIDEO_REQ_DEC_PREVIEW_MOVE
,

142 
	mVIDEO_REQ_DEC_PREVIEW_FLUSH
,

143 
	mVIDEO_REQ_DEC_PREVIEW_CLOSE
,

146 
	uvideo_dec_ªq
 {

147 
video_dec_∑øm
 
	mdec
;

148 
video_dec_ff_‰
 
	mf
;

149 
video_dec_¥evõw
 
	m¥evõw
;

152 
	svideo_dec_¨g
 {

153 c⁄° *
	mdev_«me
;

154 
	maudio_buf_size
;

155 
	mvideo_buf_size
;

	@include_lib/server/video_engine_server.h

1 #i‚de‡
__VIDEO_ENGINE_SERVER_H__


2 
	#__VIDEO_ENGINE_SERVER_H__


	)

4 
	~"ty≥def.h
"

5 
	~"li°.h
"

8 
	eVE_MODULE_TYPE
 {

9 
	mVE_MODULE_MOTION_DETECT
,

10 
	mVE_MODULE_LANE_DETECT
,

11 
	mVE_MODULE_CUSTOM
,

12 
	mVE_MODULE_MAX
,

13 } 
	tve_moduÀ_ty≥_t
;

15 
	#VE_MODULE_MOTION_DETECT_MASK
 (1<<
VE_MODULE_MOTION_DETECT
)

	)

16 
	#VE_MODULE_LANE_DETECT_MASK
 (1<<
VE_MODULE_LANE_DETECT
)

	)

20 
	mVE_REQ_MODULE_OPEN
,

21 
	mVE_REQ_MODULE_CLOSE
,

22 
	mVE_REQ_MODULE_START
,

23 
	mVE_REQ_MODULE_STOP
,

24 
	mVE_REQ_MODULE_SET_PARAM
,

25 
	mVE_REQ_MODULE_GET_PARAM
,

26 
	mVE_REQ_MODULE_IOCTL
,

27 
	mVE_REQ_MODULE_GET_STATUS
,

28 
	mVE_REQ_GET_STATUS
,

29 
	mVE_REQ_GET_CAPABILITY
,

30 
	mVE_REQ_SET_HINT
,

31 } 
	tve_ªq_ty≥_t
;

34 
	mVE_MSG_MOTION_DETECT_STILL
 = 1,

35 
	mVE_MSG_MOTION_DETECT_MOVING
,

36 
	mVE_MSG_LANE_DETECT_WARNING
,

37 
	mVE_MSG_VEHICLE_DETECT_WARNING
,

38 
	mVE_MSG_LANE_DETCET_LEFT
,

39 
	mVE_MSG_LANE_DETCET_RIGHT
,

40 
	mVE_MSG_CUSTOM_MODULE
,

41 } 
	tve_msg_ty≥_t
;

45 
	mVE_STATUS_IDLE
,

46 
	mVE_STATUS_STOP
,

47 
	mVE_STATUS_RUNNING
,

48 
	mVE_STATUS_ERROR
,

49 } 
	tve_°©us_t
;

52 
	mVE_MOTION_DETECT_MODE_NORMAL
,

53 
	mVE_MOTION_DETECT_MODE_ISP
,

54 } 
	tve_mŸi⁄_dëe˘_mode_t
;

57 
u32
 
	mhöt
;

58 
u32
 
	mmode_höt0
;

59 
u32
 
	mmode_höt1
;

60 } 
	tve_höt_öfo_t
;

63 
u16
 
	mx
;

64 
u16
 
	my
;

65 
u16
 
	mw
;

66 
u16
 
	mh
;

67 } 
	tve_roi_t
;

70 
u8
 
	mÀvñ
;

71 
u32
 
	mmove_dñay_ms
;

72 
u32
 
	m°ûl_dñay_ms
;

73 
ve_roi_t
 
	mroi
;

75 } 
	tve_mŸi⁄_dëe˘_∑øms_t
;

78 
u16
 
	mˇr_hód_y
;

79 
u16
 
	mv™ish_y
;

80 
u16
 
	mÀn_Á˘‹
;

81 } 
	tve_œ√_dëe˘_∑øms_t
;

83 
	svideo_ígöe_ªq
 {

84 
u8
 
	mmoduÀ
;

85 
u32
 
	mcmd
;

87 
u8
 
	m∑øm
[0];

88 
ve_mŸi⁄_dëe˘_mode_t
 
	mmd_mode
;

89 
ve_mŸi⁄_dëe˘_∑øms_t
 
	mmd_∑øms
;

90 
ve_œ√_dëe˘_∑øms_t
 
	mœ√_dëe˘_∑øms
;

91 
ve_höt_öfo_t
 
	mhöt_öfo
;

92 
ve_°©us_t
 
	m°©us
;

93 
u32
 
	mˇ∑bûôõs
;

95 } 
	tvideo_ígöe_ªq_t
;

100 
vehi˛e_dëe˘_›í_˛o£
(
Êag
);

102 
£t_œ√_∑øms
(
ANGLE_LOW
, 
ANGLE_HIGH
, 
LANE_DISTANCE
, 
RATIO_HW
);

105 
	sve_cu°om_moduÀ_≠i
 {

106 *(*
	möô
)(
	mw
, 
	mh
);

107 (*
	m‰ì
)(*
	mh
);

108 (*
	m¥o˚ss
)(*
	mh
, *
	möputFøme
, 
	mwidth
, 
	mheight
);

109 } 
	tve_cu°om_moduÀ_≠i_t
;

112 
ve_cu°om_moduÀ_ªgi°î
(
ve_cu°om_moduÀ_≠i_t
 *
≠i
);

	@include_lib/server/video_server.h

1 #i‚de‡
VIDEO_SERVER_H


2 
	#VIDEO_SERVER_H


	)

4 
	~"£rvî/£rvî_c‹e.h
"

5 
	~"£rvî/vpkg_£rvî.h
"

6 
	~"sy°em/ö˛udes.h
"

9 
	#VIDEO_SERVER_PKG_ERR
 0x01

	)

10 
	#VIDEO_SERVER_UVM_ERR
 0x02

	)

11 
	#VIDEO_SERVER_PKG_END
 0x03

	)

14 
	evideo_°©e
 {

15 
	mVIDEO_STATE_START
,

16 
	mVIDEO_STATE_PAUSE
,

17 
	mVIDEO_STATE_RESUME
,

18 
	mVIDEO_STATE_STOP
,

19 
	mVIDEO_STATE_SAVE_FILE
,

20 
	mVIDEO_STATE_SET_OSD
,

21 
	mVIDEO_STATE_SET_VOICE
,

22 
	mVIDEO_STATE_GET_INFO
,

23 
	mVIDEO_STATE_PKG_MUTE
,

24 
	mVIDEO_STATE_SET_OSD_STR
,

25 
	mVIDEO_STATE_CFG
,

26 
	mVIDEO_STATE_CFG_ROI
,

27 
	mVIDEO_STATE_GET_PKG_TIME
,

28 
	mVIDEO_STATE_SET_NEXT_IFRAME
,

29 
	mVIDEO_STATE_STOP_COUNT_DOWN
,

30 
	mVIDEO_STATE_SET_DR
,

31 
	mVIDEO_STATE_CAP_IFRAME
,

32 
	mVIDEO_STATE_RESET_BITS_RATE
,

35 
	evideo_ªc_f‹m©
 {

36 
	mVIDEO_FMT_AVI
,

37 
	mVIDEO_FMT_MOV
,

38 
	mVIDEO_FMT_YUYV
,

39 
	mVIDEO_FMT_NV12
,

40 
	mVIDEO_FMT_MP4
,

44 
	svs_audio
 {

45 
u8
 
	mch™√l
;

46 
u8
 
	mvﬁume
;

47 
u8
 
	mkbps
;

48 
u16
 
	mßm∂e_øã
;

49 
u8
 *
	mbuf
;

50 
	mbuf_Àn
;

51 c⁄° *
	m‚ame
;

54 
	svs_buf_dev
 {

55 c⁄° *
	m«me
;

56 
u8
 
	míabÀ
;

57 
u32
 
	maddr
;

58 
u32
 
	msize
;

61 
	svs_video_ªc
 {

62 
u8
 
	m°©e
;

63 
u8
 
	mf‹m©
;

64 
u8
 
	mch™√l
;

65 
u8
 
	mªÆ_Âs
;

66 
u8
 
	mÂs
;

67 
u8
 
	m¶ow_mŸi⁄
;

68 
u8
 
	mˇmîa_ty≥
;

69 
u8
 
	mthªe_way_ty≥
;

70 
u8
 
	muvc_id
;

71 
u8
 
	musb_ˇm
;

72 
u8
 
	mèrgë
;

73 
u8
 
	mªc_smÆl_pic
;

74 
u16
 
	mwidth
;

75 
u16
 
	mheight
;

76 
u8
 *
	mbuf
;

77 *
	m√w_osd_°r
;

78 
u32
 
	mcy˛e_time
;

79 
u32
 
	mcou¡_down
;

80 
u32
 
	mbuf_Àn
;

81 
u32
 
	mép_time
;

82 
u32
 
	mabr_kbps
;

83 
u32
 
	mIP_öãrvÆ
;

84 
u32
 
	mdñay_limô
;

85 
roi_cfg
 
	mroi
;

86 
u32
 
	mfsize
;

87 
FILE
 *
	mfûe
;

88 c⁄° *
	musb_ˇm_«me
;

89 
video_ªc_quÆôy
 
	mquÆôy
;

90 
vs_audio
 
	maudio
;

91 
video_ãxt_osd
 *
	mãxt_osd
;

92 
video_gøph_osd
 *
	mgøph_osd
;

93 
vpkg_gë_öfo
 
	mgë_öfo
;

94 
vpkg_aud_muã
 
	mpkg_muã
;

95 
vs_buf_dev
 
	mextbuf_dev
;

96 (*
	mˇmîa_c⁄fig
)(
u32
 
	mlv
, *
	m¨g
);

100 
	svs_video_di•œy
 {

101 
u16
 
	mÀ·
;

102 
u16
 
	mt›
;

103 
u16
 
	mwidth
;

104 
u16
 
	mheight
;

105 
u16
 
	mb‹dî_À·
;

106 
u16
 
	mb‹dî_t›
;

107 
u16
 
	mb‹dî_right
;

108 
u16
 
	mb‹dî_bŸtom
;

109 
u8
 
	mˇmîa_ty≥
;

110 
u8
 
	mthªe_way_ty≥
;

111 
u8
 
	muvc_id
;

112 c⁄° *
	mfb
;

113 
imc_¥esˇ_˘l
 *
	mp˘l
;

114 
video_°©e
 
	m°©e
;

115 (*
	mˇmîa_c⁄fig
)(
u32
 
	mlv
, *
	m¨g
);

118 
	svs_image_ˇ±uª
 {

119 
u16
 
	mwidth
;

120 
u16
 
	mheight
;

121 
u8
 
	mˇmîa_ty≥
;

122 
u8
 
	muvc_id
;

123 
u8
 
	mèrgë
;

124 
u8
 
	mty≥
;

125 
u32
 
	mquÆôy
;

126 
u8
 *
	mbuf
;

127 
u32
 
	mbuf_size
;

128 
u32
 
	mfûe_size
;

129 
iˇp_auxûüry_mem
 *
	maux_mem
;

130 
jpg_thumb«û
 *
	mthumb«ûs
;

131 
video_ãxt_osd
 *
	mãxt_œbñ
;

132 
video_gøph_osd
 *
	mgøph_œbñ
;

133 
image_°ickî
 *
	m°ickî
;

134 c⁄° *
	m∑th
;

135 
jpg_q_èbÀ
 *
	mqt
;

138 
	#SET_CAMERA_MODE
 
	`BIT
(0)

	)

139 
	#SET_CAMERA_EV
 
	`BIT
(1)

	)

140 
	#SET_CAMERA_WB
 
	`BIT
(2)

	)

141 
	#SET_CAMERA_SHP_LEVEL
 
	`BIT
(3)

	)

142 
	#SET_CAMERA_DRC_ENABLE
 
	`BIT
(4)

	)

143 
	#GET_CAMERA_LV
 
	`BIT
(5)

	)

144 
	#GET_CAMERA_INFO
 
	`BIT
(6)

	)

145 
	#SET_CUSTOMIZE_CFG
 
	`BIT
(7)

	)

146 
	#GET_CUSTOMIZE_CFG
 
	`BIT
(8)

	)

148 
	svs_ˇmîa_ef„˘
 {

149 
u8
 
	mmode
;

150 
s8
 
	mev
;

151 
u8
 
	mwhôe_bœn˚
;

152 
u8
 
	msh≤_Àvñ
;

153 
u8
 
	mdrc
;

154 
u32
 
	mcmd
;

155 
	mlv
;

156 *
	mcu°omize_cfg
;

159 
	svs_ˇmîa_sˇ
 {

160 
u8
 
	m°ï
;

161 
u8
 
	mmax_sˇ
;

162 
u8
 
	msˇ_modify
;

165 
	svs_image_öfo
 {

166 
u8
 *
	mbuf
;

167 
u32
 
	msize
;

170 
	#VIDEO_TO_USB
 0x10

	)

175 
	mVIDEO_REQ_REC
,

176 
	mVIDEO_REQ_DISPLAY
,

177 
	mVIDEO_REQ_IMAGE_CAPTURE
,

178 
	mVIDEO_REQ_CAMERA_EFFECT
,

179 
	mVIDEO_REQ_CAMERA_SCA
,

180 
	mVIDEO_REQ_GET_IMAGE
,

183 
	uvideo_ªq
 {

184 
vs_video_ªc
 
	mªc
;

185 
vs_image_ˇ±uª
 
	miˇp
;

186 
vs_video_di•œy
 
	mdi•œy
;

187 
vs_ˇmîa_ef„˘
 
	mˇmîa
;

188 
vs_ˇmîa_sˇ
 
	msˇ
;

189 
vs_image_öfo
 
	mimage
;

	@include_lib/server/vpkg_server.h

1 #i‚de‡
VIDEO_PACKAGE_H


2 
	#VIDEO_PACKAGE_H


	)

4 
	~"ty≥def.h
"

5 
	~"li°.h
"

7 
	#VPKG_WRITE_END
 250

	)

9 
	eVPKG_REQ_TYPE
 {

10 
	mVPKG_REQ_SET_INFO
,

11 
	mVPKG_REQ_GET_INFO
,

12 
	mVPKG_REQ_CTRL
,

13 
	mVPKG_REQ_VID_FRAME
,

14 
	mVPKG_REQ_AUD_FRAME
,

15 
	mVPKG_REQ_AUD_MUTE
,

16 
	mVPKG_REQ_GET_PKG_TIME
,

17 
	mVPKG_REQ_DEL_FILE
,

20 
	eVPKG_CMD
 {

21 
	mVPKG_UNKNOW
,

22 
	mVPKG_OPEN
,

23 
	mVPKG_START
,

24 
	mVPKG_STOP
,

25 
	mVPKG_CLOSE
,

26 
	mVPKG_VID_INPUT
,

27 
	mVPKG_AUD_INPUT
,

31 
	mVPKG_CMD_PKG_RUN
,

32 
	mVPKG_CMD_PKG_START
,

33 
	mVPKG_CMD_PKG_STOP
,

34 
	mVPKG_CMD_PKG_SET_STOP
,

35 
	mVPKG_CMD_PKG_STATUS
,

36 
	mVPKG_CMD_PKG_ADD_SKIP_FRM
,

37 
	mVPKG_CMD_PKG_VIN
,

38 
	mVPKG_CMD_PKG_AIN
,

39 
	mVPKG_CMD_PKG_AUD_LEN
,

40 
	mVPKG_CMD_PKG_FILE
,

41 
	mVPKG_CMD_PKG_CLR_FB
,

42 
	mVPKG_CMD_PKG_SET_SKIP_INTERVAL
,

43 
	mVPKG_CMD_PKG_SET_SKIP_CONTINUE
,

44 
	mVPKG_CMD_PKG_MUTE
,

45 
	mVPKG_CMD_PKG_WEXR_DATA
,

46 
	mVPKG_CMD_PKG_TIME
,

47 
	mVPKG_CMD_DEL_FILE
,

50 
	eVPKG_STATUS
 {

51 
	mVPKG_STATUS_IDLE
,

52 
	mVPKG_STATUS_OPEN
,

53 
	mVPKG_STATUS_RUNING
,

54 
	mVPKG_STATUS_STOP
,

55 
	mVPKG_STATUS_READY_STOP
,

56 
	mVPKG_STATUS_STOPING
,

60 
	mVPKG_ISTA_IDLE
 = 0,

61 
	mVPKG_ISTA_READY
,

62 
	mVPKG_ISTA_RUN
,

63 
	mVPKG_ISTA_SET_STOP
,

64 
	mVPKG_ISTA_STOP
,

65 
	mVPKG_ISTA_STOPING
,

66 
	mVPKG_ISTA_OPEN
,

67 
	mVPKG_ISTA_ERR
,

72 
	mVPKG_AUD_TYPE_UNKNOW
 = 0,

73 
	mVPKG_AUD_TYPE_PCM
,

74 
	mVPKG_AUD_TYPE_ALAW
,

75 
	mVPKG_AUD_TYPE_ULAW
,

76 
	mVPKG_AUD_TYPE_ADPCM_WAV
,

77 
	mVPKG_AUD_TYPE_AAC
,

79 
	mVPKG_AUD_TYPE_END
,

84 
	svpkg_sys_›s
 {

85 *(*
	mf›í
)(c⁄° *
	m∑th
, c⁄° *
	mmode
);

86 (*
	m‰ód
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

87 (*
	mfwrôe
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

88 (*
	mf£ek
)(*
	mfûe
, 
u32
 
	moff£t
, 
	m£ek_mode
);

89 (*
	mfˇt
)(*
	mfûe_«me
, *
	mˇt_‚ame
, 
u8
 
	mˇt_mode
);

90 (*
	m·ñl
)(*
	mfûe
);

91 (*
	mf˛o£
)(*
	mfûe
);

92 (*
	mfdñëe
)(*
	mfûe
);

96 
	svpkg_›s
 {

97 *
	m«me
 ;

98 
s32
(*
öô
)();

99 
s32
(*
›í
)(*
	m¥iv
, *
	m¨g
);

100 
s32
(*
˛o£
)(*
	m¥iv
);

101 
s32
(*
ªad
)(*
	m¥iv
, 
u8
 *
	mbuf
, 
u32
 
	maddr
, u32 
	mÀn
);

102 
s32
(*
wrôe
)(*
	m¥iv
, 
u8
 *
	mbuf
, 
u32
 
	maddr
, u32 
	mÀn
);

103 
s32
(*
io˘æ
)(*
	m¥iv
, *
	m∑rm
, 
u32
 
	mcmd
);

107 
	svpkg_medü_öfo
 {

109 
u8
 
	maud_í
;

110 
u8
 
	maud_ty≥
;

111 
u8
 
	maud_ch
;

112 
u8
 
	maud_bôs
;

113 
u32
 
	maud_§
;

115 
u16
 
	mvid_width
;

116 
u16
 
	mvid_heigh
;

117 
u16
 
	mÁke_w
;

118 
u16
 
	mÁke_h
;

120 
	mi_¥ofûe_idc
;

121 
	mi_Àvñ_idc
;

122 
u32
 
	moff£t_size
;

123 
u8
 
	mIP_öãrvÆ
;

124 
u8
 
	möãrvÆ
;

125 
u8
 
	mvid_Âs
;

130 
	svpkg_v‰ame
 {

131 
li°_hód
 
	míåy
;

132 
u8
 *
	mbuf
;

133 
u32
 
	mÀn
;

134 
u32
 
	mã°_num
;

137 
	svpkg_a‰ame
 {

138 
li°_hód
 
	míåy
;

139 
u8
 *
	mbuf
;

140 
u32
 
	mÀn
;

143 
	svpkg_˘æ
 {

144 
VPKG_CMD
 
	mcmd
;

147 
	svpkg_öfo
 {

148 *
	mfûe
;

149 
vpkg_sys_›s
 *
	msys_›s
;

150 
vpkg_medü_öfo
 
	mmöfo
;

151 
	mch™√l
;

152 (*
	m£t_‰ì
)(*
	m¥iv
, *
	mbuf
);

153 *
	m¥iv
;

154 
u32
 
	m£ek_Àn
;

156 
u8
 *
	m¥e_pic_buf
;

157 
u32
 
	m¥e_pic_Àn
;

159 
u32
 
	mcy˛e_time
;

160 
u8
 
	maud_muã
;

164 
	svpkg_gë_öfo
 {

165 
	maud_size
;

166 *
	mfûe
;

169 
	svpkg_gë_pkg_time
 {

170 
	m£cs
;

173 
	svpkg_aud_muã
 {

174 
	maud_muã
;

179 
	uvpkg_ªq
 {

181 
vpkg_öfo
 
	möfo
;

182 
vpkg_˘æ
 
	m˘æ
;

184 
vpkg_v‰ame
 
	mv‰ame
;

185 
vpkg_a‰ame
 
	ma‰ame
;

187 
vpkg_gë_öfo
 
	mgë_öfo
;

189 
vpkg_aud_muã
 
	mpkg_muã
;

191 
vpkg_gë_pkg_time
 
	mpkg_time
;

	@include_lib/server/vunpkg_server.h

2 #i‚de‡
__VUNPKG_SERVER_H__


3 
	#__VUNPKG_SERVER_H__


	)

5 
	~"ty≥def.h
"

6 
	~"li°.h
"

9 
	mUNPKG_AUD_TYPE_UNKNOW
 = 0,

10 
	mUNPKG_AUD_TYPE_PCM_SOWT
,

11 
	mUNPKG_AUD_TYPE_PCM_TWOS
,

12 
	mUNPKG_AUD_TYPE_ALAW
,

13 
	mUNPKG_AUD_TYPE_ULAW
,

14 
	mUNPKG_AUD_TYPE_ADPCM_WAV
,

15 
	mUNPKG_AUD_TYPE_AAC
,

18 
	mUNPKG_AUD_TYPE_END
,

23 
	eVUNPKG_ISTA
 {

25 
	mVUNPKG_ISTA_IDLE
 = 0,

26 
	mVUNPKG_ISTA_READY
,

27 
	mVUNPKG_ISTA_RUN
,

28 
	mVUNPKG_ISTA_START
,

29 
	mVUNPKG_ISTA_PAUSE
,

30 
	mVUNPKG_ISTA_SET_STOP
,

31 
	mVUNPKG_ISTA_STOP
,

32 
	mVUNPKG_ISTA_STOPING
,

33 
	mVUNPKG_ISTA_ERR
,

36 
	eVUNPKG_ICMD
 {

37 
	mVUNPKG_CMD_UNPKG_RUN
,

38 
	mVUNPKG_CMD_UNPKG_START
,

39 
	mVUNPKG_CMD_UNPKG_STOP
,

40 
	mVUNPKG_CMD_UNPKG_SET_STOP
,

41 
	mVUNPKG_CMD_UNPKG_STATUS
,

42 
	mVUNPKG_CMD_UNPKG_PAUSE
,

43 
	mVUNPKG_CMD_UNPKG_RESUME
,

44 
	mVUNPKG_CMD_UNPKG_FF_FR
,

45 
	mVUNPKG_CMD_UNPKG_FF_FR_END
,

46 
	mVUNPKG_CMD_UNPKG_NOTIFY
,

47 
	mVUNPKG_CMD_UNPKG_GET_MDIF
,

50 
	eVUNPKG_REQ_TYPE
 {

51 
	mVUNPKG_REQ_SET_INFO
,

52 
	mVUNPKG_REQ_GET_INFO
,

53 
	mVUNPKG_REQ_CTRL
,

54 
	mVUNPKG_REQ_FF_FR
,

55 
	mVUNPKG_REQ_GET_STATUS
,

56 
	mVUNPKG_REQ_SET_FILE
,

57 
	mVUNPKG_REQ_GET_PREVIEW_PIC
,

61 
	eVUNPKG_STATUS
 {

62 
	mVUNPKG_STATUS_OPEN
,

63 
	mVUNPKG_STATUS_START
,

64 
	mVUNPKG_STATUS_PAUSE
,

65 
	mVUNPKG_STATUS_STOP
,

66 
	mVUNPKG_STATUS_USER_STOP
,

67 
	mVUNPKG_STATUS_CLOSE
,

68 
	mVUNPKG_STATUS_ERROR
,

71 
	eVUNPKG_CMD
 {

72 
	mVUNPKG_UNKNOW
,

73 
	mVUNPKG_OPEN
,

74 
	mVUNPKG_START
,

75 
	mVUNPKG_STOP
,

76 
	mVUNPKG_CLOSE
,

78 
	mVUNPKG_NOTIFY
,

79 
	mVUNPKG_PAUSE
,

80 
	mVUNPKG_RESUME
,

89 
	svu≈kg_sys_›s
 {

90 *(*
	mf›í
)(c⁄° *
	m∑th
, c⁄° *
	mmode
);

91 (*
	m‰ód
)(*
	mfûe
, *
	mbuf
, 
u32
 
	mÀn
);

92 (*
	mf£ek
)(*
	mfûe
, 
u32
 
	moff£t
, 
	m£ek_mode
);

93 (*
	m·ñl
)(*
	mfûe
);

95 *(*
	mfb_mÆloc
)(*
	mhdl
, 
u32
 
	msize
);

96 (*
	mfb_‰ì
)(*
	mhdl
, *
	mfb_buf
);

97 (*
	mfb_put
)(*
	mhdl
, *
	mfb_buf
);

98 *(*
	mfb_±r
)(*
	mfb_buf
);

99 
u32
(*
fb_size
)(*
	mfb_buf
);

104 
	svu≈kg_›s
 {

105 *
	m«me
 ;

106 
s32
(*
öô
)();

107 
s32
(*
›í
)(*
	m¥iv
, *
	m¨g
);

108 
s32
(*
˛o£
)(*
	m¥iv
);

109 
s32
(*
ªad
)(*
	m¥iv
, 
u8
 *
	mbuf
, 
u32
 
	maddr
, u32 
	mÀn
);

110 
s32
(*
wrôe
)(*
	m¥iv
, 
u8
 *
	mbuf
, 
u32
 
	maddr
, u32 
	mÀn
);

111 
s32
(*
io˘æ
)(*
	m¥iv
, *
	m∑rm
, 
u32
 
	mcmd
);

115 
	svu≈kg_medü_öfo
 {

118 
u8
 
	maud_í
;

119 
u8
 
	maud_ty≥
;

120 
u8
 
	maud_ch
;

121 
u8
 
	maud_bôs
;

122 
u32
 
	maud_§
;

123 
u32
 
	maud_Êí
;

126 
u16
 
	mvid_width
;

127 
u16
 
	mvid_heigh
;

128 
u16
 
	mÁke_w
;

129 
u16
 
	mÁke_h
;

131 
	mi_¥ofûe_idc
;

132 
	mi_Àvñ_idc
;

134 
u32
 
	mexåa_Àn
;

135 
u8
 *
	mexåa_d©a
;

137 
u32
 
	mcur_v‰ame
;

138 
u32
 
	mcur_a‰ame
;

139 
u32
 
	mv‰ame_sum
;

140 
u8
 
	mde°roy_Êag
;

141 
u8
 
	mvid_Âs
;

142 
u8
 
	mIP_öãrvÆ
;

145 
	svu≈kg_öfo
 {

148 
vu≈kg_sys_›s
 *
	msys_›s
;

149 *
	mfb_vhdl
;

150 *
	mfb_ahdl
;

151 
	mch™√l
;

155 
	svu≈kg_fûe_öfo
 {

158 *
	mfûe
;

162 
	#VUNPKG_MODE_FF
 0x01

163 
	#VUNPKG_MODE_FR
 0x02

164 
	#VUNPKG_MODE_FF_FR_END
 0x03

	)

166 
	svu≈kg_ff_‰_öfo
 {

167 
u8
 
	m£ek_mode
 ;

168 
u32
 
	m‰ame_ba£
;

169 
u32
 
	m‰ame_off£t
;

174 
	svu≈kg_˘æ
 {

175 
VUNPKG_CMD
 
	mcmd
;

178 
	svu≈kg_¥evõw
 {

179 
vu≈kg_öfo
 
	möfo
;

180 
vu≈kg_fûe_öfo
 
	mfûe_öfo
;

184 
	uvu≈kg_ªq
 {

186 
vu≈kg_öfo
 
	möfo
;

187 
vu≈kg_fûe_öfo
 
	mfûe_öfo
;

188 
vu≈kg_˘æ
 
	m˘æ
;

189 
vu≈kg_medü_öfo
 
	mmöfo
;

190 
vu≈kg_ff_‰_öfo
 
	mff_‰_˘æ
;

191 
VUNPKG_STATUS
 
	m°©us
;

192 
vu≈kg_¥evõw
 
	m¥ev
;

	@include_lib/system/app_core.h

1 #i‚de‡
SYS_APPLICATION_H


2 
	#SYS_APPLICATION_H


	)

4 
	~"ty≥def.h
"

5 
	~"gíîic/li°.h
"

6 
	~"sy°em/evít.h
"

9 
	#ACTION_BACK
 0x0a1b2c00

	)

10 
	#ACTION_STOP
 0x0a1b2c01

	)

11 
	#ACTION_CLASS_MASK
 0xfffff000

	)

15 
	e≠p_°©e
 {

16 
	mAPP_STA_CREATE
,

17 
	mAPP_STA_START
,

18 
	mAPP_STA_PAUSE
,

19 
	mAPP_STA_RESUME
,

20 
	mAPP_STA_STOP
,

21 
	mAPP_STA_DESTROY
,

24 
	g≠∂iˇti⁄
;

27 
	söã¡
 {

28 c⁄° *
	m«me
;

29 
	ma˘i⁄
;

30 c⁄° *
	md©a
;

31 
u32
 
	mexd©a
;

35 
	s≠∂iˇti⁄_›î©i⁄
 {

36 (*
	m°©e_machöe
)(
	m≠∂iˇti⁄
 *, 
	m≠p_°©e
, 
	möã¡
 *);

37 (*
	mevít_h™dÀr
)(
	m≠∂iˇti⁄
 *, 
	msys_evít
 *);

41 
	s≠∂iˇti⁄
 {

42 
u8
 
	m°©e
;

43 
	ma˘i⁄
;

44 *
	md©a
;

45 c⁄° *
	m«me
;

46 
li°_hód
 
	míåy
;

47 *
	m¥iv©e_d©a
;

48 c⁄° 
≠∂iˇti⁄_›î©i⁄
 *
	m›s
;

53 
	#REGISTER_APPLICATION
(
©
) \

54 
≠∂iˇti⁄
 
©
 
	`£c
(.
≠p
)

	)

57 
	#öô_öã¡
(
ô
) \

59 (
ô
)->
«me
 = 
NULL
; \

60 (
ô
)->
a˘i⁄
= 0; \

61 (
ô
)->
d©a
 = 
NULL
; \

62 }0)

	)

66 
ªgi°î_≠p_evít_h™dÀr
((*
h™dÀr
)(
sys_evít
 *));

68 
≠∂iˇti⁄
 *
	`gë_cuºít_≠p
();

71 
	`°¨t_≠p
(
öã¡
 *
ô
);

73 
	`°¨t_≠p_async
(
öã¡
 *
ô
, (*
ˇŒback
)(*
p
, 
îr
), *p);

	@include_lib/system/cpu/AC521x/asm/AC521x.h

12 #i‚de‡
_AC521x_


13 
	#_AC521x_


	)

21 
	#hs_ba£
 0x0f70000

	)

22 
	#ls_ba£
 0x0f60000

	)

29 
	#ls_io_ba£
 (
ls_ba£
 + 0x000*4)

	)

30 
	#ls_u¨t_ba£
 (
ls_ba£
 + 0x100*4)

	)

31 
	#ls_•i_ba£
 (
ls_ba£
 + 0x200*4)

	)

32 
	#ls_sd_ba£
 (
ls_ba£
 + 0x300*4)

	)

33 
	#ls_tmr_ba£
 (
ls_ba£
 + 0x400*4)

	)

34 
	#ls_fusb_ba£
 (
ls_ba£
 + 0x500*4)

	)

35 
	#ls_husb_ba£
 (
ls_ba£
 + 0x600*4)

	)

36 
	#ls_adda_ba£
 (
ls_ba£
 + 0x700*4)

	)

37 
	#ls_˛k_ba£
 (
ls_ba£
 + 0x800*4)

	)

38 
	#ls_Ÿh_ba£
 (
ls_ba£
 + 0x900*4)

	)

39 
	#ls_Ænk_ba£
 (
ls_ba£
 + 0xa00*4)

	)

41 
	#hs_˝u_ba£
 (
hs_ba£
 + 0x000*4)

	)

42 
	#hs_dbg_ba£
 (
hs_ba£
 + 0x100*4)

	)

43 
	#hs_sdr_ba£
 (
hs_ba£
 + 0x200*4)

	)

44 
	#hs_eva_ba£
 (
hs_ba£
 + 0x300*4)

	)

45 
	#hs_sfc_ba£
 (
hs_ba£
 + 0x400*4)

	)

46 
	#hs_jpg_ba£
 (
hs_ba£
 + 0x500*4)

	)

47 
	#hs_Ÿh_ba£
 (
hs_ba£
 + 0x600*4)

	)

49 
	#PORTA_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x00*4))

50 
	#PORTA_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x01*4))

51 
	#PORTA_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x02*4))

52 
	#PORTA_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x03*4))

53 
	#PORTA_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x04*4))

54 
	#PORTA_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x05*4))

55 
	#PORTA_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x06*4))

56 

	)

57 
	#PORTB_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x10*4))

58 
	#PORTB_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x11*4))

59 
	#PORTB_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x12*4))

60 
	#PORTB_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x13*4))

61 
	#PORTB_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x14*4))

62 
	#PORTB_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x15*4))

63 
	#PORTB_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x16*4))

64 

	)

65 
	#PORTC_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x20*4))

66 
	#PORTC_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x21*4))

67 
	#PORTC_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x22*4))

68 
	#PORTC_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x23*4))

69 
	#PORTC_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x24*4))

70 
	#PORTC_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x25*4))

71 
	#PORTC_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x26*4))

72 

	)

73 
	#PORTD_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x30*4))

74 
	#PORTD_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x31*4))

75 
	#PORTD_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x32*4))

76 
	#PORTD_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x33*4))

77 
	#PORTD_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x34*4))

78 
	#PORTD_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x35*4))

79 
	#PORTD_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x36*4))

80 

	)

81 
	#PORTE_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x40*4))

82 
	#PORTE_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x41*4))

83 
	#PORTE_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x42*4))

84 
	#PORTE_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x43*4))

85 
	#PORTE_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x44*4))

86 
	#PORTE_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x45*4))

87 
	#PORTE_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x46*4))

88 

	)

89 
	#PORTF_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x50*4))

90 
	#PORTF_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x51*4))

91 
	#PORTF_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x52*4))

92 
	#PORTF_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x53*4))

93 
	#PORTF_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x54*4))

94 
	#PORTF_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x55*4))

95 
	#PORTF_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x56*4))

96 

	)

97 
	#PORTG_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x60*4))

98 
	#PORTG_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x61*4))

99 
	#PORTG_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x62*4))

100 
	#PORTG_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x63*4))

101 
	#PORTG_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x64*4))

102 
	#PORTG_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x65*4))

103 
	#PORTG_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x66*4))

104 

	)

105 
	#PORTH_OUT
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x70*4))

106 
	#PORTH_IN
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x71*4))

107 
	#PORTH_DIR
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x72*4))

108 
	#PORTH_DIE
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x73*4))

109 
	#PORTH_PU
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x74*4))

110 
	#PORTH_PD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x75*4))

111 
	#PORTH_HD
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x76*4))

112 

	)

113 
	#IOMC0
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x80*4))

114 
	#IOMC1
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x81*4))

115 
	#IOMC2
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x82*4))

116 
	#IOMC3
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x83*4))

117 
	#IOMC4
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x84*4))

118 
	#WKUP_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x85*4))

119 
	#WKUP_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x86*4))

120 
	#WKUP_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_io_ba£
 + 0x87*4))

121 
	#WKUP_CON3
 (*(vﬁ©ûê
u16
 *)(
ls_io_ba£
 + 0x88*4))

122 

	)

124 
	#UT0_HRXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x00*4))

	)

125 
	#UT0_OTCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x01*4))

	)

126 
	#UT0_TXADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x02*4))

127 
	#UT0_TXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x03*4))

	)

128 
	#UT0_RXEADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x04*4))

129 
	#UT0_CON
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x05*4))

	)

130 
	#UT0_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_u¨t_ba£
 + 0x06*4))

	)

131 
	#UT0_BAUD
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x07*4))

132 
	#UT0_RXSADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x08*4))

133 
	#UT0_RXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x09*4))

	)

135 
	#UT1_HRXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x10*4))

	)

136 
	#UT1_OTCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x11*4))

	)

137 
	#UT1_TXADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x12*4))

138 
	#UT1_TXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x13*4))

	)

139 
	#UT1_RXEADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x14*4))

140 
	#UT1_CON
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x15*4))

	)

141 
	#UT1_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_u¨t_ba£
 + 0x16*4))

	)

142 
	#UT1_BAUD
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x17*4))

143 
	#UT1_RXSADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x18*4))

144 
	#UT1_RXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x19*4))

	)

146 
	#UT2_HRXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x20*4))

	)

147 
	#UT2_OTCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x21*4))

	)

148 
	#UT2_TXADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x22*4))

149 
	#UT2_TXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x23*4))

	)

150 
	#UT2_RXEADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x24*4))

151 
	#UT2_CON
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x25*4))

	)

152 
	#UT2_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_u¨t_ba£
 + 0x26*4))

	)

153 
	#UT2_BAUD
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x27*4))

154 
	#UT2_RXSADR
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x28*4))

155 
	#UT2_RXCNT
 (*(vﬁ©ûê
u32
 *)(
ls_u¨t_ba£
 + 0x29*4))

	)

157 
	#UT3_CON
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x30*4))

	)

158 
	#UT3_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_u¨t_ba£
 + 0x31*4))

	)

159 
	#UT3_BAUD
 (*(vﬁ©ûê
u16
 *)(
ls_u¨t_ba£
 + 0x32*4))

160 

	)

162 
	#SPI0_CON
 (*(vﬁ©ûê
u16
 *)(
ls_•i_ba£
 + 0x00*4))

	)

163 
	#SPI0_BAUD
 (*(vﬁ©ûê
u8
 *)(
ls_•i_ba£
 + 0x01*4))

	)

164 
	#SPI0_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_•i_ba£
 + 0x02*4))

	)

165 
	#SPI0_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_•i_ba£
 + 0x03*4))

166 
	#SPI0_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_•i_ba£
 + 0x04*4))

167 

	)

168 
	#SPI1_CON
 (*(vﬁ©ûê
u16
 *)(
ls_•i_ba£
 + 0x10*4))

	)

169 
	#SPI1_BAUD
 (*(vﬁ©ûê
u8
 *)(
ls_•i_ba£
 + 0x11*4))

	)

170 
	#SPI1_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_•i_ba£
 + 0x12*4))

	)

171 
	#SPI1_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_•i_ba£
 + 0x13*4))

172 
	#SPI1_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_•i_ba£
 + 0x14*4))

173 

	)

175 
	#SD0_CON0
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x00*4))

	)

176 
	#SD0_CON1
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x01*4))

	)

177 
	#SD0_CON2
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x02*4))

	)

178 
	#SD0_CPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x03*4))

179 
	#SD0_DPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x04*4))

180 
	#SD0_CTU_CON
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x05*4))

	)

181 
	#SD0_CTU_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x06*4))

	)

183 
	#SD1_CON0
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x10*4))

	)

184 
	#SD1_CON1
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x11*4))

	)

185 
	#SD1_CON2
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x12*4))

	)

186 
	#SD1_CPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x13*4))

187 
	#SD1_DPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x14*4))

188 
	#SD1_CTU_CON
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x15*4))

	)

189 
	#SD1_CTU_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x16*4))

	)

191 
	#SD2_CON0
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x20*4))

	)

192 
	#SD2_CON1
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x21*4))

	)

193 
	#SD2_CON2
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x22*4))

	)

194 
	#SD2_CPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x23*4))

195 
	#SD2_DPTR
 (*(vﬁ©ûê
u32
 *)(
ls_sd_ba£
 + 0x24*4))

196 
	#SD2_CTU_CON
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x25*4))

	)

197 
	#SD2_CTU_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_sd_ba£
 + 0x26*4))

	)

202 
	#T0_CON
 (*(vﬁ©ûê
u16
 *)(
ls_tmr_ba£
 + 0x00*4))

	)

203 
	#T0_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x01*4))

	)

204 
	#T0_PRD
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x02*4))

	)

205 
	#T0_PWM
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x03*4))

	)

207 
	#T1_CON
 (*(vﬁ©ûê
u16
 *)(
ls_tmr_ba£
 + 0x10*4))

	)

208 
	#T1_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x11*4))

	)

209 
	#T1_PRD
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x12*4))

	)

210 
	#T1_PWM
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x13*4))

	)

212 
	#T2_CON
 (*(vﬁ©ûê
u16
 *)(
ls_tmr_ba£
 + 0x20*4))

	)

213 
	#T2_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x21*4))

	)

214 
	#T2_PRD
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x22*4))

	)

215 
	#T2_PWM
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x23*4))

	)

217 
	#T3_CON
 (*(vﬁ©ûê
u16
 *)(
ls_tmr_ba£
 + 0x30*4))

	)

218 
	#T3_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x31*4))

	)

219 
	#T3_PRD
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x32*4))

	)

220 
	#T3_PWM
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x33*4))

	)

222 
	#PWMTMR0CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x40*4))

	)

223 
	#PWMTMR0CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x41*4))

	)

224 
	#PWMTMR0PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x42*4))

	)

225 
	#PWMCMP0
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x43*4))

	)

226 
	#PWMTMR1CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x44*4))

	)

227 
	#PWMTMR1CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x45*4))

	)

228 
	#PWMTMR1PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x46*4))

	)

229 
	#PWMCMP1
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x47*4))

	)

230 
	#PWMTMR2CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x48*4))

	)

231 
	#PWMTMR2CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x49*4))

	)

232 
	#PWMTMR2PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4a*4))

	)

233 
	#PWMCMP2
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4b*4))

	)

234 
	#PWMTMR3CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4c*4))

	)

235 
	#PWMTMR3CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4d*4))

	)

236 
	#PWMTMR3PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4e*4))

	)

237 
	#PWMCMP3
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x4f*4))

	)

238 
	#PWMTMR4CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x50*4))

	)

239 
	#PWMTMR4CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x51*4))

	)

240 
	#PWMTMR4PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x52*4))

	)

241 
	#PWMCMP4
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x53*4))

	)

242 
	#PWMTMR5CON
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x54*4))

	)

243 
	#PWMTMR5CNT
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x55*4))

	)

244 
	#PWMTMR5PR
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x56*4))

	)

245 
	#PWMCMP5
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x57*4))

	)

246 
	#PWMCON0
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x58*4))

	)

247 
	#PWMCON1
 (*(vﬁ©ûê
u32
 *)(
ls_tmr_ba£
 + 0x59*4))

	)

251 
	#FUSB_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x00*4))

	)

252 
	#FUSB_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x01*4))

	)

253 
	#FUSB_EP0_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_fusb_ba£
 + 0x02*4))

254 
	#FUSB_EP1_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_fusb_ba£
 + 0x03*4))

255 
	#FUSB_EP2_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_fusb_ba£
 + 0x04*4))

256 
	#FUSB_EP3_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_fusb_ba£
 + 0x05*4))

257 
	#FUSB_EP0_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x06*4))

258 
	#FUSB_EP1_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x07*4))

259 
	#FUSB_EP1_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x08*4))

260 
	#FUSB_EP2_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x09*4))

261 
	#FUSB_EP2_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x0a*4))

262 
	#FUSB_EP3_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x0b*4))

263 
	#FUSB_EP3_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_fusb_ba£
 + 0x0c*4))

264 
	#FUSB_IO_CON0
 (*(vﬁ©ûê
u16
 *)(
ls_fusb_ba£
 + 0x0d*4))

265 

	)

266 
	#HUSB_SIE_CON
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x00*4))

	)

267 
	#HUSB_EP0_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_husb_ba£
 + 0x01*4))

268 
	#HUSB_EP1_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_husb_ba£
 + 0x02*4))

269 
	#HUSB_EP2_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_husb_ba£
 + 0x03*4))

270 
	#HUSB_EP3_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x04*4))

271 
	#HUSB_EP4_CNT
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x05*4))

272 
	#HUSB_EP5_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_husb_ba£
 + 0x06*4))

273 
	#HUSB_EP6_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_husb_ba£
 + 0x07*4))

274 
	#HUSB_EP1_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x09*4))

275 
	#HUSB_EP1_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0a*4))

276 
	#HUSB_EP2_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0b*4))

277 
	#HUSB_EP2_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0c*4))

278 
	#HUSB_EP3_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0d*4))

279 
	#HUSB_EP3_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0e*4))

280 
	#HUSB_EP4_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0f*4))

281 
	#HUSB_EP4_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x10*4))

282 
	#HUSB_EP5_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x11*4))

283 
	#HUSB_EP5_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x12*4))

284 
	#HUSB_EP6_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x13*4))

285 
	#HUSB_EP6_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x14*4))

286 

	)

287 
	#HUSB_COM_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x15*4))

	)

288 
	#HUSB_COM_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x16*4))

	)

289 
	#HUSB_PHY_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x17*4))

	)

290 
	#HUSB_PHY_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x18*4))

	)

291 
	#HUSB_PHY_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x19*4))

	)

292 
	#HUSB_ISO_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x1a*4))

	)

293 
	#HUSB_ISO_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x1b*4))

	)

295 
	#DAC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_adda_ba£
 + 0x00*4))

	)

296 
	#DAC_CON1
 (*(vﬁ©ûê
u16
 *)(
ls_adda_ba£
 + 0x01*4))

	)

297 
	#DAC_TRML
 (*(vﬁ©ûê
u8
 *)(
ls_adda_ba£
 + 0x02*4))

298 
	#DAC_TRMR
 (*(vﬁ©ûê
u8
 *)(
ls_adda_ba£
 + 0x03*4))

299 
	#DAC_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x04*4))

300 
	#DAC_LEN
 (*(vﬁ©ûê
u16
 *)(
ls_adda_ba£
 + 0x05*4))

301 

	)

302 
	#ADC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_adda_ba£
 + 0x08*4))

	)

303 
	#ADC_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x09*4))

304 
	#ADC_LEN
 (*(vﬁ©ûê
u16
 *)(
ls_adda_ba£
 + 0x0a*4))

305 

	)

306 
	#DAA_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x10*4))

	)

307 
	#DAA_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x11*4))

	)

308 
	#DAA_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x12*4))

	)

311 
	#DAA_CON5
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x15*4))

	)

313 
	#ADA_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_adda_ba£
 + 0x18*4))

	)

316 
	#PWR_CON
 (*(vﬁ©ûê
u8
 *)(
ls_˛k_ba£
 + 0x00*4))

	)

317 
	#CLK_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x01*4))

	)

318 
	#CLK_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x02*4))

	)

319 
	#CLK_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x03*4))

	)

320 
	#LCLK_GAT
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x04*4))

	)

321 
	#HCLK_GAT
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x05*4))

	)

322 
	#ACLK_GAT
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x06*4))

	)

323 
	#PLL0_NF
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x07*4))

	)

324 
	#PLL0_NR
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x08*4))

	)

325 
	#PLL1_NF
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x09*4))

	)

326 
	#PLL1_NR
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x0a*4))

	)

327 
	#OSA_CON
 (*(vﬁ©ûê
u16
 *)(
ls_˛k_ba£
 + 0x0b*4))

	)

328 
	#PLL_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x0c*4))

	)

329 
	#PLL_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x0d*4))

	)

330 
	#PLL_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x0e*4))

	)

331 
	#PLL3_NF
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x0f*4))

	)

332 
	#PLL3_NR
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x10*4))

	)

333 
	#PLL_CON3
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x11*4))

	)

334 
	#PLL_CON4
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x12*4))

	)

335 
	#PLL_CON5
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x13*4))

	)

336 
	#PLL_CON6
 (*(vﬁ©ûê
u32
 *)(
ls_˛k_ba£
 + 0x14*4))

	)

338 
	#HTC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x00*4))

	)

339 
	#LDO_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x01*4))

	)

340 
	#LVD_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x02*4))

	)

341 
	#IRTC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x03*4))

	)

342 
	#IRTC_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x04*4))

	)

343 
	#MODE_CON
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x05*4))

	)

344 
	#CRC0_FIFO
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x06*4))

345 
	#CRC0_REG
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x07*4))

	)

346 
	#WDT_CON
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x08*4))

	)

347 
	#CHIP_ID
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x09*4))

348 
	#IRFLT_CON
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x0a*4))

	)

349 
	#IIC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x0b*4))

	)

350 
	#IIC_BUF
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x0c*4))

	)

351 
	#IIC_BAUD
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x0d*4))

	)

352 
	#IIC_DMA_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x0e*4))

353 
	#IIC_DMA_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x0f*4))

354 
	#IIC_DMA_NRATE
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x10*4))

355 
	#PWM8_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x11*4))

	)

356 
	#PAP_CON
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x12*4))

	)

357 
	#PAP_BUF
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x13*4))

	)

358 
	#PAP_ADR
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x14*4))

359 
	#PAP_CNT
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x15*4))

360 
	#PAP_DAT0
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x16*4))

361 
	#PAP_DAT1
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x17*4))

362 
	#CRC1_FIFO
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x18*4))

363 
	#CRC1_REG
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x19*4))

	)

365 
	#EFUSE_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x1b*4))

	)

366 
	#MPUCON
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x1c*4))

	)

367 
	#MPUSTART
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x1d*4))

	)

368 
	#MPUEND
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x1e*4))

	)

369 
	#MPUCATCH0
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x1f*4))

	)

370 
	#MPUCATCH1
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x20*4))

	)

371 
	#PLCNTCON
 (*(vﬁ©ûê
u8
 *)(
ls_Ÿh_ba£
 + 0x21*4))

	)

372 
	#PLCNTVL
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x22*4))

373 
	#CS_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x23*4))

	)

374 
	#CS_REG
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x24*4))

	)

375 
	#CS_FIFO
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x25*4))

376 
	#CS_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x26*4))

377 
	#CS_RCNT
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x27*4))

378 
	#RAND64L
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x28*4))

379 
	#RAND64H
 (*(vﬁ©ûê
u32
 *)(
ls_Ÿh_ba£
 + 0x29*4))

380 
	#GPADC_CON
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x2a*4))

	)

381 
	#GPADC_RES
 (*(vﬁ©ûê
u16
 *)(
ls_Ÿh_ba£
 + 0x2b*4))

382 

	)

383 
	#ALNK_CON0
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x00*4))

	)

384 
	#ALNK_CON1
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x01*4))

	)

385 
	#ALNK_CON2
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x02*4))

	)

386 
	#ALNK_CON3
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x03*4))

	)

387 
	#ALNK_ADR0
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x04*4))

	)

388 
	#ALNK_ADR1
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x05*4))

	)

389 
	#ALNK_ADR2
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x06*4))

	)

390 
	#ALNK_ADR3
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x07*4))

	)

391 
	#ALNK_LEN
 (*(vﬁ©ûê
u32
 *)(
ls_Ænk_ba£
 + 0x08*4))

	)

400 
	#DREG00
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x00*4))

401 
	#DREG01
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x01*4))

402 
	#DREG02
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x02*4))

403 
	#DREG03
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x03*4))

404 
	#DREG04
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x04*4))

405 
	#DREG05
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x05*4))

406 
	#DREG06
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x06*4))

407 
	#DREG07
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x07*4))

408 
	#DREG08
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x08*4))

409 
	#DREG09
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x09*4))

410 
	#DREG10
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0a*4))

411 
	#DREG11
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0b*4))

412 
	#DREG12
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0c*4))

413 
	#DREG13
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0d*4))

414 
	#DREG14
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0e*4))

415 
	#DREG15
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x0f*4))

416 

	)

417 
	#SREG00
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x10*4))

418 
	#SREG01
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x11*4))

419 
	#SREG02
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x12*4))

420 
	#SREG03
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x13*4))

421 
	#SREG04
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x14*4))

422 
	#SREG05
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x15*4))

423 
	#SREG06
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x16*4))

424 
	#SREG07
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x17*4))

425 
	#SREG08
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x18*4))

426 
	#SREG09
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x19*4))

427 
	#SREG10
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1a*4))

428 
	#SREG11
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1b*4))

429 
	#SREG12
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1c*4))

430 
	#SREG13
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1d*4))

431 
	#SREG14
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1e*4))

432 
	#SREG15
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x1f*4))

433 

	)

434 
	#ICFG0
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x20*4))

	)

435 
	#ICFG1
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x21*4))

	)

436 
	#ICFG2
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x22*4))

	)

437 
	#ICFG3
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x23*4))

	)

438 
	#ICFG4
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x24*4))

	)

439 
	#ICFG5
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x25*4))

	)

440 
	#ICFG6
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x26*4))

	)

441 
	#ICFG7
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x27*4))

	)

442 
	#ICFG8
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x28*4))

	)

443 
	#ICFG9
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x29*4))

	)

444 
	#ICFG10
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2a*4))

	)

445 
	#ICFG11
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2b*4))

	)

446 
	#ICFG12
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2c*4))

	)

447 
	#ICFG13
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2d*4))

	)

448 
	#ICFG14
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2e*4))

	)

449 
	#ICFG15
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x2f*4))

	)

450 
	#ICFG16
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x30*4))

	)

451 
	#ICFG17
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x31*4))

	)

452 
	#ICFG18
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x32*4))

	)

453 
	#ICFG19
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x33*4))

	)

454 
	#ICFG20
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x34*4))

	)

455 
	#ICFG21
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x35*4))

	)

456 
	#ICFG22
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x36*4))

	)

457 
	#ICFG23
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x37*4))

	)

458 
	#ICFG24
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x38*4))

	)

459 
	#ICFG25
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x39*4))

	)

460 
	#ICFG26
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3a*4))

	)

461 
	#ICFG27
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3b*4))

	)

462 
	#ICFG28
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3c*4))

	)

463 
	#ICFG29
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3d*4))

	)

464 
	#ICFG30
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3e*4))

	)

465 
	#ICFG31
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x3f*4))

	)

467 
	#IPND0
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x40*4))

468 
	#IPND1
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x41*4))

469 
	#IPND2
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x42*4))

470 
	#IPND3
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x43*4))

471 
	#IPND4
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x44*4))

472 
	#IPND5
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x45*4))

473 
	#IPND6
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x46*4))

474 
	#IPND7
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x47*4))

475 
	#ILAT_SET
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x48*4))

476 
	#ILAT_CLR
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x49*4))

477 
	#TTMR_CON
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x4a*4))

	)

478 
	#TTMR_CNT
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x4b*4))

	)

479 
	#TTMR_PRD
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x4c*4))

	)

481 
	#BPCON
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x50*4))

	)

482 
	#BSP
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x51*4))

	)

483 
	#BP0
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x52*4))

	)

484 
	#BP1
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x53*4))

	)

485 
	#BP2
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x54*4))

	)

486 
	#BP3
 (*(vﬁ©ûê
u32
 *)(
hs_˝u_ba£
 + 0x55*4))

	)

489 
	#DSPCON
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x00*4))

	)

491 
	#CPASS_CON
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x10*4))

	)

492 
	#CPASS_ADRH
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x11*4))

	)

493 
	#CPASS_ADRL
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x12*4))

	)

494 
	#CPASS_BUF_LAST
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x13*4))

	)

495 
	#CPASS_CPF_ADRH
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x14*4))

	)

496 
	#CPASS_CPF_ADRL
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x15*4))

	)

498 
	#DSP_BF_CON
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x20*4))

499 
	#DEBUG_WR_EN
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x21*4))

500 
	#DEBUG_MSG
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x22*4))

501 
	#DEBUG_MSG_CLR
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x23*4))

502 
	#DEBUG_WRNUM
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x24*4))

503 
	#PRP_ALLOW_NUM0
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x28*4))

504 
	#PRP_ALLOW_NUM1
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x29*4))

505 
	#DSP_PC_LIMH
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x2e*4))

506 
	#DSP_PC_LIML
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x2f*4))

507 

	)

508 
	#WR_LIM0H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x30*4))

509 
	#WR_LIM0L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x31*4))

510 
	#WR_LIM1H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x32*4))

511 
	#WR_LIM1L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x33*4))

512 
	#WR_LIM2H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x34*4))

513 
	#WR_LIM2L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x35*4))

514 
	#WR_LIM3H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x36*4))

515 
	#WR_LIM3L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x37*4))

516 
	#WR_LIM4H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x38*4))

517 
	#WR_LIM4L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x39*4))

518 
	#WR_LIM5H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3a*4))

519 
	#WR_LIM5L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3b*4))

520 
	#WR_LIM6H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3c*4))

521 
	#WR_LIM6L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3d*4))

522 
	#WR_LIM7H
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3e*4))

523 
	#WR_LIM7L
 (*(vﬁ©ûê
u32
 *)(
hs_dbg_ba£
 + 0x3f*4))

524 

	)

525 
	#SDTAP_CON
 (*(vﬁ©ûê
u16
 *)(
hs_dbg_ba£
 + 0x80*4))

	)

526 
	#FPGA_TRI
 (*(vﬁ©ûê
u16
 *)(
hs_dbg_ba£
 + 0xff*4))

	)

530 
	#SDRCON0
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x00*4))

	)

533 
	#SDRREFREG
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x03*4))

535 
	#SDRCON1
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x05*4))

536 
	#SDRREFSUM
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x06*4))

537 
	#SDRDBG
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x07*4))

538 
	#SDRCON2
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x08*4))

539 
	#SDRCON3
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x09*4))

540 
	#SDRCON4
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0a*4))

541 
	#SDRCON5
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0b*4))

542 
	#SDRCON6
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0c*4))

543 
	#SDRCON7
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0d*4))

544 
	#SDRCON8
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0e*4))

545 
	#SDRCON9
 (*(vﬁ©ûê
u32
 *)(
hs_sdr_ba£
 + 0x0f*4))

546 

	)

548 
	#EVA_CON
 (*(vﬁ©ûê
u32
 *)(
hs_eva_ba£
 + 0x00*4))

	)

551 
	#SFC_CON
 (*(vﬁ©ûê
u32
 *)(
hs_sfc_ba£
 + 0x00*4))

	)

552 
	#SFC_BAUD
 (*(vﬁ©ûê
u16
 *)(
hs_sfc_ba£
 + 0x01*4))

	)

554 
	#SFC_BASE_ADR
 (*(vﬁ©ûê
u32
 *)(
hs_sfc_ba£
 + 0x03*4))

	)

556 
	#SFC_ECON
 (*(vﬁ©ûê
u32
 *)(
hs_sfc_ba£
 + 0x05*4))

	)

559 
	#jpg0_ba£
 0x0f74000

	)

560 
	#jpg1_ba£
 0x0f75000

	)

562 
	#JPG0_CON0
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x00*4))

	)

563 
	#JPG0_CON1
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x01*4))

	)

564 
	#JPG0_CON2
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x02*4))

	)

565 
	#JPG0_YDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x03*4))

	)

566 
	#JPG0_UDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x04*4))

	)

567 
	#JPG0_VDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x05*4))

	)

568 
	#JPG0_YPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x06*4))

	)

569 
	#JPG0_UPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x07*4))

	)

570 
	#JPG0_VPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x08*4))

	)

571 
	#JPG0_YPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x09*4))

	)

572 
	#JPG0_UPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0a*4))

	)

573 
	#JPG0_VPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0b*4))

	)

574 
	#JPG0_BADDR
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0c*4))

	)

575 
	#JPG0_BCNT
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0d*4))

	)

576 
	#JPG0_MCUCNT
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0e*4))

	)

577 
	#JPG0_PRECNT
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x0f*4))

	)

578 
	#JPG0_YUVLINE
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x10*4))

	)

579 
	#JPG0_CFGRAMADDR
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x11*4))

	)

580 
	#JPG0_CFGRAMVAL
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x12*4))

	)

582 
	#JPG0_PTR_NUM
 (*(vﬁ©ûê
u32
 *)(
jpg0_ba£
 + 0x13*4))

	)

584 
	#JPG1_CON0
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x00*4))

	)

585 
	#JPG1_CON1
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x01*4))

	)

586 
	#JPG1_CON2
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x02*4))

	)

587 
	#JPG1_YDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x03*4))

	)

588 
	#JPG1_UDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x04*4))

	)

589 
	#JPG1_VDCVAL
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x05*4))

	)

590 
	#JPG1_YPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x06*4))

	)

591 
	#JPG1_UPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x07*4))

	)

592 
	#JPG1_VPTR0
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x08*4))

	)

593 
	#JPG1_YPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x09*4))

	)

594 
	#JPG1_UPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0a*4))

	)

595 
	#JPG1_VPTR1
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0b*4))

	)

596 
	#JPG1_BADDR
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0c*4))

	)

597 
	#JPG1_BCNT
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0d*4))

	)

598 
	#JPG1_MCUCNT
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0e*4))

	)

599 
	#JPG1_PRECNT
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x0f*4))

	)

600 
	#JPG1_YUVLINE
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x10*4))

	)

601 
	#JPG1_CFGRAMADDR
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x11*4))

	)

602 
	#JPG1_CFGRAMVAL
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x12*4))

	)

604 
	#JPG1_PTR_NUM
 (*(vﬁ©ûê
u32
 *)(
jpg1_ba£
 + 0x13*4))

	)

607 
	#ENC_CON
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x00*4))

	)

608 
	#ENC_KEY
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x01*4))

	)

609 
	#ENC_ADR
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x02*4))

	)

610 
	#SFC_UNENC_ADRH
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x03*4))

	)

611 
	#SFC_UNENC_ADRL
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x04*4))

	)

612 
	#DMA_CON
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x05*4))

	)

613 
	#DMA_CNT
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x06*4))

614 
	#DMA_RADR
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x07*4))

615 
	#DMA_WADR
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x08*4))

616 

	)

617 
	#AES_CON
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x10*4))

	)

618 
	#AES_DAT0
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x11*4))

	)

619 
	#AES_DAT1
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x12*4))

	)

620 
	#AES_DAT2
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x13*4))

	)

621 
	#AES_DAT3
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x14*4))

	)

622 
	#AES_KEY
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x15*4))

	)

624 
	#GPDMA_RD_CON
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x20*4))

	)

625 
	#GPDMA_RD_SPTR
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x21*4))

	)

626 
	#GPDMA_RD_CNT
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x22*4))

	)

628 
	#GPDMA_WR_CON
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x30*4))

	)

629 
	#GPDMA_WR_SPTR
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x31*4))

	)

630 
	#GPDMA_WR_CNT
 (*(vﬁ©ûê
u32
 *)(
hs_Ÿh_ba£
 + 0x32*4))

	)

633 
	#hs_dmac›y_ba£
 0x0f77000

	)

634 
	#DMA_COPY_TASK_ADR
 (*(vﬁ©ûê
u32
 *)(
hs_dmac›y_ba£
 + 0x00*4))

635 
	#DMA_COPY_CON
 (*(vﬁ©ûê
u32
 *)(
hs_dmac›y_ba£
 + 0x01*4))

	)

639 
	#FADDR
 0x00

	)

640 
	#POWER
 0x01

	)

641 
	#INTRTX1
 0x02

	)

642 
	#INTRTX2
 0x03

	)

643 
	#INTRRX1
 0x04

	)

644 
	#INTRRX2
 0x05

	)

645 
	#INTRUSB
 0x06

	)

646 
	#INTRTX1E
 0x07

	)

647 
	#INTRTX2E
 0x08

	)

648 
	#INTRRX1E
 0x09

	)

649 
	#INTRRX2E
 0x0a

	)

650 
	#INTRUSBE
 0x0b

	)

651 
	#FRAME1
 0x0c

	)

652 
	#FRAME2
 0x0d

	)

653 
	#INDEX
 0x0e

	)

654 
	#DEVCTL
 0x0f

	)

655 
	#TXMAXP
 0x10

	)

656 
	#CSR0
 0x11

	)

657 
	#TXCSR1
 0x11

	)

658 
	#TXCSR2
 0x12

	)

659 
	#RXMAXP
 0x13

	)

660 
	#RXCSR1
 0x14

	)

661 
	#RXCSR2
 0x15

	)

662 
	#COUNT0
 0x16

	)

663 
	#RXCOUNT1
 0x16

	)

664 
	#RXCOUNT2
 0x17

	)

665 
	#TXTYPE
 0x18

	)

666 
	#TXINTERVAL
 0x19

	)

667 
	#RXTYPE
 0x1a

	)

668 
	#RXINTERVAL
 0x1b

	)

671 
	#husb_ba£
 
ls_ba£
 + 0x8000

	)

672 
	#H_FADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x000))

	)

673 
	#H_POWER
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x001))

	)

674 
	#H_INTRTX
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x002))

	)

675 
	#H_INTRRX
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x004))

	)

676 
	#H_INTRTXE
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x006))

	)

677 
	#H_INTRRXE
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x008))

	)

678 
	#H_INTRUSB
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x00a))

	)

679 
	#H_INTRUSBE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x00b))

	)

680 
	#H_FRAME
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x00c))

	)

681 
	#H_INDEX
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x00e))

	)

682 
	#H_TESTMODE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x00f))

	)

684 
	#H_FIFO0
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x020))

	)

685 
	#H_FIFO1
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x024))

	)

686 
	#H_FIFO2
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x028))

	)

687 
	#H_FIFO3
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x02c))

	)

688 
	#H_FIFO4
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x030))

	)

689 
	#H_DEVCTL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x060))

	)

691 
	#H_CSR0
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x102))

	)

692 
	#H_COUNT0
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x108))

	)

693 
	#H_NAKLIMIT0
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x10b))

	)

694 
	#H_CFGDATA
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x10f))

	)

696 
	#H_EP1TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x110))

	)

697 
	#H_EP1TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x112))

	)

698 
	#H_EP1RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x114))

	)

699 
	#H_EP1RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x116))

	)

700 
	#H_EP1RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x118))

	)

701 
	#H_EP1TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x11a))

	)

702 
	#H_EP1TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x11b))

	)

703 
	#H_EP1RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x11c))

	)

704 
	#H_EP1RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x11d))

	)

705 
	#H_EP1FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x11f))

	)

707 
	#H_EP2TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x120))

	)

708 
	#H_EP2TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x122))

	)

709 
	#H_EP2RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x124))

	)

710 
	#H_EP2RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x126))

	)

711 
	#H_EP2RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x128))

	)

712 
	#H_EP2TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x12a))

	)

713 
	#H_EP2TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x12b))

	)

714 
	#H_EP2RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x12c))

	)

715 
	#H_EP2RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x12d))

	)

716 
	#H_EP2FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x12f))

	)

718 
	#H_EP3TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x130))

	)

719 
	#H_EP3TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x132))

	)

720 
	#H_EP3RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x134))

	)

721 
	#H_EP3RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x136))

	)

722 
	#H_EP3RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x138))

	)

723 
	#H_EP3TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x13a))

	)

724 
	#H_EP3TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x13b))

	)

725 
	#H_EP3RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x13c))

	)

726 
	#H_EP3RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x13d))

	)

727 
	#H_EP3FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x13f))

	)

729 
	#H_EP4TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x140))

	)

730 
	#H_EP4TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x142))

	)

731 
	#H_EP4RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x144))

	)

732 
	#H_EP4RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x146))

	)

733 
	#H_EP4RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x148))

	)

734 
	#H_EP4TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x14a))

	)

735 
	#H_EP4TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x14b))

	)

736 
	#H_EP4RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x14c))

	)

737 
	#H_EP4RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x14d))

	)

738 
	#H_EP4FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x14f))

	)

740 
	#H_TX_DPBUFDIS
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x342))

	)

745 
	#eva_ba£
 0x0f78000

	)

746 
	#xbus_ba£
 
eva_ba£
 + 0x0000

	)

747 
	#xbus_ch00_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x00*4))

	)

748 
	#xbus_ch01_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x01*4))

	)

749 
	#xbus_ch02_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x02*4))

	)

750 
	#xbus_ch03_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x03*4))

	)

751 
	#xbus_ch04_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x04*4))

	)

752 
	#xbus_ch05_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x05*4))

	)

753 
	#xbus_ch06_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x06*4))

	)

754 
	#xbus_ch07_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x07*4))

	)

755 
	#xbus_ch08_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x08*4))

	)

756 
	#xbus_ch09_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x09*4))

	)

757 
	#xbus_ch10_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0a*4))

	)

758 
	#xbus_ch11_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0b*4))

	)

759 
	#xbus_ch12_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0c*4))

	)

760 
	#xbus_ch13_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0d*4))

	)

761 
	#xbus_ch14_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0e*4))

	)

762 
	#xbus_ch15_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x0f*4))

	)

764 
	#xbus_ch16_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x10*4))

	)

765 
	#xbus_ch17_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x11*4))

	)

766 
	#xbus_ch18_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x12*4))

	)

767 
	#xbus_ch19_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x13*4))

	)

768 
	#xbus_ch20_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x14*4))

	)

769 
	#xbus_ch21_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x15*4))

	)

770 
	#xbus_ch22_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x16*4))

	)

771 
	#xbus_ch23_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x17*4))

	)

772 
	#xbus_ch24_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x18*4))

	)

773 
	#xbus_ch25_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x19*4))

	)

774 
	#xbus_ch26_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1a*4))

	)

775 
	#xbus_ch27_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1b*4))

	)

776 
	#xbus_ch28_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1c*4))

	)

777 
	#xbus_ch29_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1d*4))

	)

778 
	#xbus_ch30_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1e*4))

	)

779 
	#xbus_ch31_lvl
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x1f*4))

	)

781 
	#xbus_lv1_¥d
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x20*4))

	)

782 
	#xbus_lv2_¥d
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x21*4))

	)

783 
	#xbus_di°0_c⁄
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x22*4))

	)

784 
	#xbus_di°1_c⁄
 (*(vﬁ©ûê
u32
 *)(
xbus_ba£
 + 0x23*4))

	)

789 
	#isc_ba£
 
eva_ba£
 + 0x0800

	)

790 
	#isc_≤d_c⁄
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x00*4))

	)

791 
	#isc_dmx_c⁄0
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x01*4))

	)

792 
	#isc_dmx_c⁄1
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x02*4))

	)

794 
	#isc_£n0_c⁄
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x08*4))

	)

795 
	#isc_£n0_vblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x09*4))

	)

796 
	#isc_£n0_va˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x0a*4))

	)

797 
	#isc_£n0_hblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x0b*4))

	)

798 
	#isc_£n0_ha˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x0c*4))

	)

800 
	#isc_£n1_c⁄
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x10*4))

	)

801 
	#isc_£n1_vblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x11*4))

	)

802 
	#isc_£n1_va˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x12*4))

	)

803 
	#isc_£n1_hblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x13*4))

	)

804 
	#isc_£n1_ha˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x14*4))

	)

806 
	#isc_lcds_c⁄
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x18*4))

	)

807 
	#isc_lcds_vblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x19*4))

	)

808 
	#isc_lcds_va˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x1a*4))

	)

809 
	#isc_lcds_hblk
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x1b*4))

	)

810 
	#isc_lcds_ha˘
 (*(vﬁ©ûê
u32
 *)(
isc_ba£
 + 0x1c*4))

	)

815 
	#i•0_ba£
 
eva_ba£
 + 0x1000

	)

816 
	#i•0_≤d_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x000*4))

	)

817 
	#i•0_s˙_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x001*4))

	)

819 
	#i•0_§c_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x004*4))

	)

820 
	#i•0_§c_haw
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x005*4))

	)

821 
	#i•0_§c_vaw
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x006*4))

	)

823 
	#i•0_blc_off_r
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x008*4))

	)

824 
	#i•0_blc_off_gr
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x009*4))

	)

825 
	#i•0_blc_off_gb
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x00a*4))

	)

826 
	#i•0_blc_off_b
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x00b*4))

	)

828 
	#i•0_dpc_th0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x00c*4))

	)

829 
	#i•0_dpc_th1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x00d*4))

	)

830 
	#i•0_dpc_th2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x00e*4))

	)

832 
	#i•0_lsc_˚n_x
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x010*4))

	)

833 
	#i•0_lsc_˚n_y
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x011*4))

	)

834 
	#i•0_lsc_dth_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x012*4))

	)

835 
	#i•0_lsc_dth_¥m0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x013*4))

	)

836 
	#i•0_lsc_dth_¥m1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x014*4))

	)

837 
	#i•0_lsc_lut_r
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x015*4))

	)

838 
	#i•0_lsc_lut_g
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x016*4))

	)

839 
	#i•0_lsc_lut_b
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x017*4))

	)

841 
	#i•0_awb_gaö_r
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x018*4))

	)

842 
	#i•0_awb_gaö_g
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x019*4))

	)

843 
	#i•0_awb_gaö_b
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01a*4))

	)

845 
	#i•0_drc_lut
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01b*4))

	)

847 
	#i•0_är_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01c*4))

	)

848 
	#i•0_är_ba£
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01d*4))

	)

849 
	#i•0_är_size
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01e*4))

	)

850 
	#i•0_är_2d_°r
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x01f*4))

	)

851 
	#i•0_är_3d_th0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x020*4))

	)

852 
	#i•0_är_3d_th1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x021*4))

	)

853 
	#i•0_är_mt_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x022*4))

	)

854 
	#i•0_är_wmax
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x023*4))

	)

855 
	#i•0_är_wmö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x024*4))

	)

856 
	#i•0_är_w¶›e
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x025*4))

	)

857 
	#i•0_är_bªak
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x026*4))

	)

858 
	#i•0_är_sˇÀ0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x027*4))

	)

859 
	#i•0_är_sˇÀ1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x028*4))

	)

860 
	#i•0_är_sˇÀ2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x029*4))

	)

861 
	#i•0_är_sˇÀ3
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x02a*4))

	)

862 
	#i•0_är_sˇÀ4
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x02b*4))

	)

863 
	#i•0_är_sˇÀ5
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x02c*4))

	)

864 
	#i•0_är_sˇÀ6
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x02d*4))

	)

865 
	#i•0_är_sˇÀ7
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x02e*4))

	)

867 
	#i•0_ccm_r_c€0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x030*4))

	)

868 
	#i•0_ccm_r_c€1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x031*4))

	)

869 
	#i•0_ccm_r_c€2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x032*4))

	)

870 
	#i•0_ccm_r_off
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x033*4))

	)

871 
	#i•0_ccm_g_c€0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x034*4))

	)

872 
	#i•0_ccm_g_c€1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x035*4))

	)

873 
	#i•0_ccm_g_c€2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x036*4))

	)

874 
	#i•0_ccm_g_off
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x037*4))

	)

875 
	#i•0_ccm_b_c€0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x038*4))

	)

876 
	#i•0_ccm_b_c€1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x039*4))

	)

877 
	#i•0_ccm_b_c€2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03a*4))

	)

878 
	#i•0_ccm_b_off
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03b*4))

	)

880 
	#i•0_gma_r_lut
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03c*4))

	)

881 
	#i•0_gma_g_lut
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03d*4))

	)

882 
	#i•0_gma_b_lut
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03e*4))

	)

883 
	#i•0_csc_y_lut
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x03f*4))

	)

885 
	#i•0_dƒ_sim_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x040*4))

	)

886 
	#i•0_dƒ_∫g_sgm
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x041*4))

	)

887 
	#i•0_dƒ_gaus_c00
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x042*4))

	)

888 
	#i•0_dƒ_gaus_c01
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x043*4))

	)

889 
	#i•0_dƒ_gaus_c02
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x044*4))

	)

890 
	#i•0_dƒ_gaus_c03
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x045*4))

	)

891 
	#i•0_dƒ_gaus_c11
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x046*4))

	)

892 
	#i•0_dƒ_gaus_c12
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x047*4))

	)

893 
	#i•0_dƒ_gaus_c13
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x048*4))

	)

894 
	#i•0_dƒ_gaus_c22
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x049*4))

	)

895 
	#i•0_dƒ_gaus_c23
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04a*4))

	)

896 
	#i•0_dƒ_gaus_c33
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04b*4))

	)

897 
	#i•0_dƒ_cmid_í
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04c*4))

	)

899 
	#i•0_shp_l⁄e_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04d*4))

	)

900 
	#i•0_shp_ech_mö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04e*4))

	)

901 
	#i•0_shp_ech_max
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x04f*4))

	)

903 
	#i•0_shp_hf_th0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x050*4))

	)

904 
	#i•0_shp_hf_th1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x051*4))

	)

905 
	#i•0_shp_hf_th2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x052*4))

	)

906 
	#i•0_shp_hf_amt
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x053*4))

	)

907 
	#i•0_shp_hf_gaö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x054*4))

	)

908 
	#i•0_shp_hf_c00
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x055*4))

	)

909 
	#i•0_shp_hf_c01
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x056*4))

	)

910 
	#i•0_shp_hf_c02
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x057*4))

	)

911 
	#i•0_shp_hf_c10
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x058*4))

	)

912 
	#i•0_shp_hf_c11
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x059*4))

	)

913 
	#i•0_shp_hf_c12
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x05a*4))

	)

914 
	#i•0_shp_hf_c20
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x05b*4))

	)

915 
	#i•0_shp_hf_c21
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x05c*4))

	)

916 
	#i•0_shp_hf_c22
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x05d*4))

	)

917 
	#i•0_shp_hf_s·
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x05e*4))

	)

919 
	#i•0_shp_mf_th0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x060*4))

	)

920 
	#i•0_shp_mf_th1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x061*4))

	)

921 
	#i•0_shp_mf_amt
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x062*4))

	)

922 
	#i•0_shp_mf_gaö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x063*4))

	)

923 
	#i•0_shp_mf_c00
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x064*4))

	)

924 
	#i•0_shp_mf_c01
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x065*4))

	)

925 
	#i•0_shp_mf_c02
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x066*4))

	)

926 
	#i•0_shp_mf_c10
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x067*4))

	)

927 
	#i•0_shp_mf_c11
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x068*4))

	)

928 
	#i•0_shp_mf_c12
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x069*4))

	)

929 
	#i•0_shp_mf_c20
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x06a*4))

	)

930 
	#i•0_shp_mf_c21
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x06b*4))

	)

931 
	#i•0_shp_mf_c22
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x06c*4))

	)

932 
	#i•0_shp_mf_s·
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x06d*4))

	)

934 
	#i•0_shp_¸_smt_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x070*4))

	)

935 
	#i•0_shp_¸_c00
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x071*4))

	)

936 
	#i•0_shp_¸_c01
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x072*4))

	)

937 
	#i•0_shp_¸_c02
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x073*4))

	)

938 
	#i•0_shp_¸_c10
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x074*4))

	)

939 
	#i•0_shp_¸_c11
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x075*4))

	)

940 
	#i•0_shp_¸_c12
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x076*4))

	)

941 
	#i•0_shp_¸_c20
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x077*4))

	)

942 
	#i•0_shp_¸_c21
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x078*4))

	)

943 
	#i•0_shp_¸_c22
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x079*4))

	)

944 
	#i•0_shp_¸_s·
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x07a*4))

	)

946 
	#i•0_cbs_y_gaö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x080*4))

	)

947 
	#i•0_cbs_u_gaö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x081*4))

	)

948 
	#i•0_cbs_v_gaö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x082*4))

	)

949 
	#i•0_cbs_y_offs
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x083*4))

	)

950 
	#i•0_cbs_u_offs
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x084*4))

	)

951 
	#i•0_cbs_v_offs
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x085*4))

	)

953 
	#i•0_out_h°
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x088*4))

	)

954 
	#i•0_out_hed
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x089*4))

	)

955 
	#i•0_out_v°
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x08a*4))

	)

956 
	#i•0_out_ved
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x08b*4))

	)

958 
	#i•0_°c_´_ba£0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x090*4))

	)

959 
	#i•0_°c_´_ba£1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x091*4))

	)

960 
	#i•0_°c_´_ba£2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x092*4))

	)

961 
	#i•0_°c_´_ba£3
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x093*4))

	)

962 
	#i•0_°c_´_ba£x
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x094*4))

	)

963 
	#i•0_°c_´_í
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x095*4))

	)

964 
	#i•0_°c_´_lv1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x096*4))

	)

965 
	#i•0_°c_´_lv2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x097*4))

	)

966 
	#i•0_°c_´_lv3
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x098*4))

	)

967 
	#i•0_°c_´_lv4
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x099*4))

	)

968 
	#i•0_°c_´_lv5
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x09a*4))

	)

969 
	#i•0_°c_´_lv6
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x09b*4))

	)

970 
	#i•0_°c_´_lv7
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x09c*4))

	)

972 
	#i•0_°c_wb_ba£0
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a0*4))

	)

973 
	#i•0_°c_wb_ba£1
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a1*4))

	)

974 
	#i•0_°c_wb_ba£2
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a2*4))

	)

975 
	#i•0_°c_wb_ba£3
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a3*4))

	)

976 
	#i•0_°c_wb_ba£x
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a4*4))

	)

977 
	#i•0_°c_wb_í
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a5*4))

	)

978 
	#i•0_°c_wb_r_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a6*4))

	)

979 
	#i•0_°c_wb_g_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a7*4))

	)

980 
	#i•0_°c_wb_b_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a8*4))

	)

981 
	#i•0_°c_wb_w_th
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0a9*4))

	)

982 
	#i•0_°c_wb_y_mö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0Ø*4))

	)

983 
	#i•0_°c_wb_y_max
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0ab*4))

	)

984 
	#i•0_°c_wb_rg_mö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0ac*4))

	)

985 
	#i•0_°c_wb_rg_max
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0ad*4))

	)

986 
	#i•0_°c_wb_bg_mö
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0´*4))

	)

987 
	#i•0_°c_wb_bg_max
 (*(vﬁ©ûê
u32
 *)(
i•0_ba£
 + 0x0af*4))

	)

992 
	#i•1_ba£
 
eva_ba£
 + 0x1800

	)

993 
	#i•1_≤d_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•1_ba£
 + 0x000*4))

	)

994 
	#i•1_§c_c⁄
 (*(vﬁ©ûê
u32
 *)(
i•1_ba£
 + 0x001*4))

	)

995 
	#i•1_§c_haw
 (*(vﬁ©ûê
u32
 *)(
i•1_ba£
 + 0x002*4))

	)

996 
	#i•1_§c_vaw
 (*(vﬁ©ûê
u32
 *)(
i•1_ba£
 + 0x003*4))

	)

1001 
	#imc_ba£
 
eva_ba£
 + 0x2000

	)

1002 
	#imc_s‰_±r
(
num
Ë(*(vﬁ©ûê
u32
 *)(
imc_ba£
 +Çum*4))

	)

1004 
	#imc_≤d_c⁄
 
	`imc_s‰_±r
(0x000)

	)

1005 
	#imc_ªp_c⁄
 
	`imc_s‰_±r
(0x001)

	)

1006 
	#imc_ªp_h_cfg
 
	`imc_s‰_±r
(0x002)

	)

1007 
	#imc_ªp_v_cfg
 
	`imc_s‰_±r
(0x003)

	)

1008 
	#imc_ªp_y_ba£
 
	`imc_s‰_±r
(0x004)

	)

1009 
	#imc_ªp_u_ba£
 
	`imc_s‰_±r
(0x005)

	)

1010 
	#imc_ªp_v_ba£
 
	`imc_s‰_±r
(0x006)

	)

1012 
	#imc_çz_c⁄
 
	`imc_s‰_±r
(0x008)

	)

1013 
	#imc_çz_cfg0
 
	`imc_s‰_±r
(0x009)

	)

1014 
	#imc_çz_cfg1
 
	`imc_s‰_±r
(0x00a)

	)

1015 
	#imc_çz_cfg2
 
	`imc_s‰_±r
(0x00b)

	)

1017 
	#imc_ch0_com_c⁄
 
	`imc_s‰_±r
(0x020)

	)

1018 
	#imc_ch0_§c_c⁄
 
	`imc_s‰_±r
(0x021)

	)

1019 
	#imc_ch0_¸›_h
 
	`imc_s‰_±r
(0x022)

	)

1020 
	#imc_ch0_¸›_v
 
	`imc_s‰_±r
(0x023)

	)

1021 
	#imc_ch0_h_°p
 
	`imc_s‰_±r
(0x024)

	)

1022 
	#imc_ch0_h_wth
 
	`imc_s‰_±r
(0x025)

	)

1023 
	#imc_ch0_v_°p
 
	`imc_s‰_±r
(0x026)

	)

1024 
	#imc_ch0_v_wth
 
	`imc_s‰_±r
(0x027)

	)

1025 
	#imc_ch0_osd_c⁄
 
	`imc_s‰_±r
(0x028)

	)

1026 
	#imc_ch0_osd_cﬁ‹0
 
	`imc_s‰_±r
(0x029)

	)

1027 
	#imc_ch0_osd_cﬁ‹1
 
	`imc_s‰_±r
(0x02a)

	)

1028 
	#imc_ch0_osd_cﬁ‹2
 
	`imc_s‰_±r
(0x02b)

	)

1029 
	#imc_ch0_osd_cﬁ‹3
 
	`imc_s‰_±r
(0x02c)

	)

1030 
	#imc_ch0_osd0_h_cfg
 
	`imc_s‰_±r
(0x02d)

	)

1031 
	#imc_ch0_osd0_v_cfg
 
	`imc_s‰_±r
(0x02e)

	)

1032 
	#imc_ch0_osd0_ba£
 
	`imc_s‰_±r
(0x02f)

	)

1033 
	#imc_ch0_osd1_h_cfg
 
	`imc_s‰_±r
(0x030)

	)

1034 
	#imc_ch0_osd1_v_cfg
 
	`imc_s‰_±r
(0x031)

	)

1035 
	#imc_ch0_osd1_ba£
 
	`imc_s‰_±r
(0x032)

	)

1036 
	#imc_ch0_dma_c⁄
 
	`imc_s‰_±r
(0x033)

	)

1037 
	#imc_ch0_dma_˙t
 
	`imc_s‰_±r
(0x034)

	)

1038 
	#imc_ch0_dma_y_bs0
 
	`imc_s‰_±r
(0x035)

	)

1039 
	#imc_ch0_dma_u_bs0
 
	`imc_s‰_±r
(0x036)

	)

1040 
	#imc_ch0_dma_v_bs0
 
	`imc_s‰_±r
(0x037)

	)

1041 
	#imc_ch0_dma_y_bs1
 
	`imc_s‰_±r
(0x038)

	)

1042 
	#imc_ch0_dma_u_bs1
 
	`imc_s‰_±r
(0x039)

	)

1043 
	#imc_ch0_dma_v_bs1
 
	`imc_s‰_±r
(0x03a)

	)

1045 
	#imc_ch1_com_c⁄
 
	`imc_s‰_±r
(0x040)

	)

1046 
	#imc_ch1_§c_c⁄
 
	`imc_s‰_±r
(0x041)

	)

1047 
	#imc_ch1_¸›_h
 
	`imc_s‰_±r
(0x042)

	)

1048 
	#imc_ch1_¸›_v
 
	`imc_s‰_±r
(0x043)

	)

1049 
	#imc_ch1_h_°p
 
	`imc_s‰_±r
(0x044)

	)

1050 
	#imc_ch1_h_wth
 
	`imc_s‰_±r
(0x045)

	)

1051 
	#imc_ch1_v_°p
 
	`imc_s‰_±r
(0x046)

	)

1052 
	#imc_ch1_v_wth
 
	`imc_s‰_±r
(0x047)

	)

1053 
	#imc_ch1_osd_c⁄
 
	`imc_s‰_±r
(0x048)

	)

1054 
	#imc_ch1_osd_cﬁ‹0
 
	`imc_s‰_±r
(0x049)

	)

1055 
	#imc_ch1_osd_cﬁ‹1
 
	`imc_s‰_±r
(0x04a)

	)

1056 
	#imc_ch1_osd_cﬁ‹2
 
	`imc_s‰_±r
(0x04b)

	)

1057 
	#imc_ch1_osd_cﬁ‹3
 
	`imc_s‰_±r
(0x04c)

	)

1058 
	#imc_ch1_osd0_h_cfg
 
	`imc_s‰_±r
(0x04d)

	)

1059 
	#imc_ch1_osd0_v_cfg
 
	`imc_s‰_±r
(0x04e)

	)

1060 
	#imc_ch1_osd0_ba£
 
	`imc_s‰_±r
(0x04f)

	)

1061 
	#imc_ch1_osd1_h_cfg
 
	`imc_s‰_±r
(0x050)

	)

1062 
	#imc_ch1_osd1_v_cfg
 
	`imc_s‰_±r
(0x051)

	)

1063 
	#imc_ch1_osd1_ba£
 
	`imc_s‰_±r
(0x052)

	)

1064 
	#imc_ch1_dma_c⁄
 
	`imc_s‰_±r
(0x053)

	)

1065 
	#imc_ch1_dma_˙t
 
	`imc_s‰_±r
(0x054)

	)

1066 
	#imc_ch1_dma_y_bs0
 
	`imc_s‰_±r
(0x055)

	)

1067 
	#imc_ch1_dma_u_bs0
 
	`imc_s‰_±r
(0x056)

	)

1068 
	#imc_ch1_dma_v_bs0
 
	`imc_s‰_±r
(0x057)

	)

1069 
	#imc_ch1_dma_y_bs1
 
	`imc_s‰_±r
(0x058)

	)

1070 
	#imc_ch1_dma_u_bs1
 
	`imc_s‰_±r
(0x059)

	)

1071 
	#imc_ch1_dma_v_bs1
 
	`imc_s‰_±r
(0x05a)

	)

1073 
	#imc_ch2_com_c⁄
 
	`imc_s‰_±r
(0x060)

	)

1074 
	#imc_ch2_§c_c⁄
 
	`imc_s‰_±r
(0x061)

	)

1075 
	#imc_ch2_¸›_h
 
	`imc_s‰_±r
(0x062)

	)

1076 
	#imc_ch2_¸›_v
 
	`imc_s‰_±r
(0x063)

	)

1077 
	#imc_ch2_h_°p
 
	`imc_s‰_±r
(0x064)

	)

1078 
	#imc_ch2_h_wth
 
	`imc_s‰_±r
(0x065)

	)

1079 
	#imc_ch2_v_°p
 
	`imc_s‰_±r
(0x066)

	)

1080 
	#imc_ch2_v_wth
 
	`imc_s‰_±r
(0x067)

	)

1081 
	#imc_ch2_dma_c⁄
 
	`imc_s‰_±r
(0x073)

	)

1082 
	#imc_ch2_dma_˙t
 
	`imc_s‰_±r
(0x074)

	)

1083 
	#imc_ch2_dma_y_bs0
 
	`imc_s‰_±r
(0x075)

	)

1084 
	#imc_ch2_dma_u_bs0
 
	`imc_s‰_±r
(0x076)

	)

1085 
	#imc_ch2_dma_v_bs0
 
	`imc_s‰_±r
(0x077)

	)

1086 
	#imc_ch2_dma_y_bs1
 
	`imc_s‰_±r
(0x078)

	)

1087 
	#imc_ch2_dma_u_bs1
 
	`imc_s‰_±r
(0x079)

	)

1088 
	#imc_ch2_dma_v_bs1
 
	`imc_s‰_±r
(0x07a)

	)

1090 
	#imc_ch3_com_c⁄
 
	`imc_s‰_±r
(0x080)

	)

1091 
	#imc_ch3_§c_c⁄
 
	`imc_s‰_±r
(0x081)

	)

1092 
	#imc_ch3_¸›_h
 
	`imc_s‰_±r
(0x082)

	)

1093 
	#imc_ch3_¸›_v
 
	`imc_s‰_±r
(0x083)

	)

1094 
	#imc_ch3_h_°p
 
	`imc_s‰_±r
(0x084)

	)

1095 
	#imc_ch3_h_wth
 
	`imc_s‰_±r
(0x085)

	)

1096 
	#imc_ch3_v_°p
 
	`imc_s‰_±r
(0x086)

	)

1097 
	#imc_ch3_v_wth
 
	`imc_s‰_±r
(0x087)

	)

1098 
	#imc_ch3_dma_c⁄
 
	`imc_s‰_±r
(0x093)

	)

1099 
	#imc_ch3_dma_˙t
 
	`imc_s‰_±r
(0x094)

	)

1100 
	#imc_ch3_dma_y_bs0
 
	`imc_s‰_±r
(0x095)

	)

1101 
	#imc_ch3_dma_u_bs0
 
	`imc_s‰_±r
(0x096)

	)

1102 
	#imc_ch3_dma_v_bs0
 
	`imc_s‰_±r
(0x097)

	)

1103 
	#imc_ch3_dma_y_bs1
 
	`imc_s‰_±r
(0x098)

	)

1104 
	#imc_ch3_dma_u_bs1
 
	`imc_s‰_±r
(0x099)

	)

1105 
	#imc_ch3_dma_v_bs1
 
	`imc_s‰_±r
(0x09a)

	)

1107 
	#imc_ch4_com_c⁄
 
	`imc_s‰_±r
(0x0a0)

	)

1108 
	#imc_ch4_çz_cfg0
 
	`imc_s‰_±r
(0x0a1)

	)

1109 
	#imc_ch4_çz_cfg1
 
	`imc_s‰_±r
(0x0a2)

	)

1110 
	#imc_ch4_çz_cfg2
 
	`imc_s‰_±r
(0x0a3)

	)

1111 
	#imc_ch4_sˇ_°p
 
	`imc_s‰_±r
(0x0a4)

	)

1112 
	#imc_ch4_sˇ_pha
 
	`imc_s‰_±r
(0x0a5)

	)

1113 
	#imc_ch4_sˇ_wth
 
	`imc_s‰_±r
(0x0a6)

	)

1114 
	#imc_ch4_dma_c⁄
 
	`imc_s‰_±r
(0x0a7)

	)

1115 
	#imc_ch4_dma_˙t
 
	`imc_s‰_±r
(0x0a8)

	)

1116 
	#imc_ch4_dma_r_bs0
 
	`imc_s‰_±r
(0x0a9)

	)

1117 
	#imc_ch4_dma_g_bs0
 
	`imc_s‰_±r
(0x0Ø)

	)

1118 
	#imc_ch4_dma_b_bs0
 
	`imc_s‰_±r
(0x0ab)

	)

1119 
	#imc_ch4_dma_r_bs1
 
	`imc_s‰_±r
(0x0ac)

	)

1120 
	#imc_ch4_dma_g_bs1
 
	`imc_s‰_±r
(0x0ad)

	)

1121 
	#imc_ch4_dma_b_bs1
 
	`imc_s‰_±r
(0x0´)

	)

1126 
	#imb_ba£
 
eva_ba£
 + 0x2800

	)

1127 
	#imb_s‰_±r
(
num
Ë(*(vﬁ©ûê
u32
 *)(
imb_ba£
 +Çum*4))

	)

1129 
	#imb_c⁄
 
	`imb_s‰_±r
(0x0)

	)

1130 
	#imb_h_cfg
 
	`imb_s‰_±r
(0x1)

	)

1131 
	#imb_v_cfg
 
	`imb_s‰_±r
(0x2)

	)

1132 
	#imb_y_bs0
 
	`imb_s‰_±r
(0x3)

	)

1133 
	#imb_u_bs0
 
	`imb_s‰_±r
(0x4)

	)

1134 
	#imb_v_bs0
 
	`imb_s‰_±r
(0x5)

	)

1135 
	#imb_y_bs1
 
	`imb_s‰_±r
(0x6)

	)

1136 
	#imb_u_bs1
 
	`imb_s‰_±r
(0x7)

	)

1137 
	#imb_v_bs1
 
	`imb_s‰_±r
(0x8)

	)

1138 
	#imb_y_bs2
 
	`imb_s‰_±r
(0x9)

	)

1139 
	#imb_u_bs2
 
	`imb_s‰_±r
(0xa)

	)

1140 
	#imb_v_bs2
 
	`imb_s‰_±r
(0xb)

	)

1145 
	#imd_dmm_ba£
 
eva_ba£
 + 0x3000

	)

1147 
	#imd_l0_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x00*4))

	)

1148 
	#imd_l0_hs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x01*4))

	)

1149 
	#imd_l0_he
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x02*4))

	)

1150 
	#imd_l0_vs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x03*4))

	)

1151 
	#imd_l0_ve
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x04*4))

	)

1152 
	#imd_l0_haw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x05*4))

	)

1153 
	#imd_l0_htw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x06*4))

	)

1154 
	#imd_l0_≠h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x07*4))

	)

1155 
	#imd_l0_badr0a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x08*4))

	)

1156 
	#imd_l0_badr1a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x09*4))

	)

1157 
	#imd_l0_badr2a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x0a*4))

	)

1158 
	#imd_l0_badr0b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x0b*4))

	)

1159 
	#imd_l0_badr1b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x0c*4))

	)

1160 
	#imd_l0_badr2b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x0d*4))

	)

1162 
	#imd_l1_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x10*4))

	)

1163 
	#imd_l1_hs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x11*4))

	)

1164 
	#imd_l1_he
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x12*4))

	)

1165 
	#imd_l1_vs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x13*4))

	)

1166 
	#imd_l1_ve
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x14*4))

	)

1167 
	#imd_l1_haw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x15*4))

	)

1168 
	#imd_l1_htw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x16*4))

	)

1169 
	#imd_l1_≠h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x17*4))

	)

1170 
	#imd_l1_badr0a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x18*4))

	)

1171 
	#imd_l1_badr1a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x19*4))

	)

1172 
	#imd_l1_badr2a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x1a*4))

	)

1173 
	#imd_l1_badr0b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x1b*4))

	)

1174 
	#imd_l1_badr1b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x1c*4))

	)

1175 
	#imd_l1_badr2b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x1d*4))

	)

1177 
	#imd_l2_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x20*4))

	)

1178 
	#imd_l2_hs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x21*4))

	)

1179 
	#imd_l2_he
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x22*4))

	)

1180 
	#imd_l2_vs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x23*4))

	)

1181 
	#imd_l2_ve
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x24*4))

	)

1182 
	#imd_l2_haw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x25*4))

	)

1183 
	#imd_l2_htw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x26*4))

	)

1184 
	#imd_l2_≠h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x27*4))

	)

1185 
	#imd_l2_badr0a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x28*4))

	)

1186 
	#imd_l2_badr1a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x29*4))

	)

1187 
	#imd_l2_badr2a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x2a*4))

	)

1188 
	#imd_l2_badr0b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x2b*4))

	)

1189 
	#imd_l2_badr1b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x2c*4))

	)

1190 
	#imd_l2_badr2b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x2d*4))

	)

1192 
	#imd_l3_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x30*4))

	)

1193 
	#imd_l3_hs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x31*4))

	)

1194 
	#imd_l3_he
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x32*4))

	)

1195 
	#imd_l3_vs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x33*4))

	)

1196 
	#imd_l3_ve
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x34*4))

	)

1197 
	#imd_l3_haw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x35*4))

	)

1198 
	#imd_l3_htw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x36*4))

	)

1199 
	#imd_l3_≠h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x37*4))

	)

1200 
	#imd_l3_badr0a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x38*4))

	)

1201 
	#imd_l3_badr1a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x39*4))

	)

1202 
	#imd_l3_badr2a
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x3a*4))

	)

1203 
	#imd_l3_badr0b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x3b*4))

	)

1204 
	#imd_l3_badr1b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x3c*4))

	)

1205 
	#imd_l3_badr2b
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x3d*4))

	)

1207 
	#imd_r_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x40*4))

	)

1208 
	#imd_g_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x41*4))

	)

1209 
	#imd_b_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x42*4))

	)

1210 
	#imd_r_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x43*4))

	)

1211 
	#imd_g_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x44*4))

	)

1212 
	#imd_b_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x45*4))

	)

1213 
	#imd_r_c€0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x46*4))

	)

1214 
	#imd_r_c€1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x47*4))

	)

1215 
	#imd_r_c€2
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x48*4))

	)

1216 
	#imd_g_c€0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x49*4))

	)

1217 
	#imd_g_c€1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x4a*4))

	)

1218 
	#imd_g_c€2
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x4b*4))

	)

1219 
	#imd_b_c€0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x4c*4))

	)

1220 
	#imd_b_c€1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x4d*4))

	)

1221 
	#imd_b_c€2
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x4e*4))

	)

1223 
	#imd_l2_Ÿ0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x50*4))

	)

1224 
	#imd_l2_Ÿ1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x51*4))

	)

1225 
	#imd_l3_Ÿ0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x52*4))

	)

1226 
	#imd_l3_Ÿ1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x53*4))

	)

1227 
	#imd_gmm_r0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x54*4))

	)

1228 
	#imd_gmm_g0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x55*4))

	)

1229 
	#imd_gmm_b0
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x56*4))

	)

1230 
	#imd_gmm_r1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x57*4))

	)

1231 
	#imd_gmm_g1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x58*4))

	)

1232 
	#imd_gmm_b1
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x59*4))

	)

1233 
	#imd_y_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5a*4))

	)

1234 
	#imd_u_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5b*4))

	)

1235 
	#imd_v_gaö
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5c*4))

	)

1236 
	#imd_y_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5d*4))

	)

1237 
	#imd_u_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5e*4))

	)

1238 
	#imd_v_offs
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x5f*4))

	)

1240 
	#imd_s˙_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x60*4))

	)

1241 
	#imd_lc_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x61*4))

	)

1242 
	#imd_img_hw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x62*4))

	)

1243 
	#imd_img_vw
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x63*4))

	)

1244 
	#imd_mc_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x64*4))

	)

1245 
	#imd_sc_d©
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x65*4))

	)

1247 
	#imd_sˇ_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x70*4))

	)

1248 
	#imd_sˇ_°p_h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x71*4))

	)

1249 
	#imd_sˇ_wth_h
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x72*4))

	)

1250 
	#imd_sˇ_°p_v
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x73*4))

	)

1251 
	#imd_sˇ_wth_v
 (*(vﬁ©ûê
u32
 *)(
imd_dmm_ba£
 + 0x74*4))

	)

1253 
	#imd_dpi_ba£
 
eva_ba£
 + 0x3200

	)

1254 
	#imd_dpi_˛k_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x00*4))

	)

1255 
	#imd_dpi_io_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x01*4))

	)

1256 
	#imd_dpi_c⁄
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x02*4))

	)

1257 
	#imd_dpi_fmt
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x03*4))

	)

1258 
	#imd_dpi_emi
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x04*4))

	)

1259 
	#imd_dpi_hâ_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x05*4))

	)

1260 
	#imd_dpi_hsw_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x06*4))

	)

1261 
	#imd_dpi_h°_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x07*4))

	)

1262 
	#imd_dpi_haw_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x08*4))

	)

1263 
	#imd_dpi_vâ_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x09*4))

	)

1264 
	#imd_dpi_vsw_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x0a*4))

	)

1265 
	#imd_dpi_v°_o_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x0b*4))

	)

1266 
	#imd_dpi_v°_e_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x0c*4))

	)

1267 
	#imd_dpi_vaw_cfg
 (*(vﬁ©ûê
u32
 *)(
imd_dpi_ba£
 + 0x0d*4))

	)

1272 
	#cvbs_ba£
 
eva_ba£
 + 0x3800

	)

1273 
	#cvbs_s‰_±r
(
num
Ë(*(vﬁ©ûê
u32
 *)(
cvbs_ba£
 +Çum*4))

	)

1274 
	#cvbs_˛k_c⁄
 
	`cvbs_s‰_±r
(0x0)

	)

1275 
	#cvbs_dac_c⁄0
 
	`cvbs_s‰_±r
(0x1)

	)

1276 
	#cvbs_dac_c⁄1
 
	`cvbs_s‰_±r
(0x2)

	)

1277 
	#cvbs_dac_c⁄2
 
	`cvbs_s‰_±r
(0x3)

	)

1278 
	#cvbs_dac_c⁄3
 
	`cvbs_s‰_±r
(0x4)

	)

1279 
	#cvbs_dac_c⁄4
 
	`cvbs_s‰_±r
(0x5)

	)

1281 
	#tve_ba£
 
eva_ba£
 + 0x3c00

	)

1282 
	#tve_s‰_±r
(
num
Ë(*(vﬁ©ûê
u32
 *)(
tve_ba£
 +Çum*4))

	)

1283 
	#tve_c⁄0
 
	`tve_s‰_±r
(0)

	)

1284 
	#tve_c⁄1
 
	`tve_s‰_±r
(1)

	)

1285 
	#tve_c⁄2
 
	`tve_s‰_±r
(2)

	)

1286 
	#tve_c⁄3
 
	`tve_s‰_±r
(3)

	)

1287 
	#tve_c⁄4
 
	`tve_s‰_±r
(4)

	)

1288 
	#tve_c⁄5
 
	`tve_s‰_±r
(5)

	)

1289 
	#tve_c⁄6
 
	`tve_s‰_±r
(6)

	)

1290 
	#tve_c⁄7
 
	`tve_s‰_±r
(7)

	)

1291 
	#tve_c⁄8
 
	`tve_s‰_±r
(8)

	)

1292 
	#tve_c⁄9
 
	`tve_s‰_±r
(9)

	)

1293 
	#tve_c⁄10
 
	`tve_s‰_±r
(10)

	)

1294 
	#tve_c⁄11
 
	`tve_s‰_±r
(11)

	)

1295 
	#tve_c⁄12
 
	`tve_s‰_±r
(12)

	)

1296 
	#tve_c⁄13
 
	`tve_s‰_±r
(13)

	)

1297 
	#tve_c⁄14
 
	`tve_s‰_±r
(14)

	)

1298 
	#tve_c⁄15
 
	`tve_s‰_±r
(15)

	)

1299 
	#tve_c⁄16
 
	`tve_s‰_±r
(16)

	)

1300 
	#tve_c⁄17
 
	`tve_s‰_±r
(17)

	)

1301 
	#tve_c⁄18
 
	`tve_s‰_±r
(18)

	)

1302 
	#tve_c⁄19
 
	`tve_s‰_±r
(19)

	)

1303 
	#tve_c⁄20
 
	`tve_s‰_±r
(20)

	)

1304 
	#tve_c⁄21
 
	`tve_s‰_±r
(21)

	)

1305 
	#tve_c⁄22
 
	`tve_s‰_±r
(22)

	)

1306 
	#tve_c⁄23
 
	`tve_s‰_±r
(23)

	)

1307 
	#tve_c⁄24
 
	`tve_s‰_±r
(24)

	)

1308 
	#tve_c⁄25
 
	`tve_s‰_±r
(25)

	)

1309 
	#tve_c⁄26
 
	`tve_s‰_±r
(26)

	)

1310 
	#tve_c⁄27
 
	`tve_s‰_±r
(27)

	)

1311 
	#tve_c⁄28
 
	`tve_s‰_±r
(28)

	)

1312 
	#tve_c⁄29
 
	`tve_s‰_±r
(29)

	)

1313 
	#tve_c⁄30
 
	`tve_s‰_±r
(30)

	)

1314 
	#tve_c⁄31
 
	`tve_s‰_±r
(31)

	)

1316 
	#cve_ba£
 
eva_ba£
 + 0x3e00

	)

1317 
	#cve_s‰_±r
(
num
Ë(*(vﬁ©ûê
u32
 *)(
cve_ba£
 +Çum*4))

	)

1318 
	#cve_so·_ª£t
 
	`cve_s‰_±r
(62)

	)

1319 
	#cve_sy°em_c⁄
 
	`cve_s‰_±r
(52)

	)

1320 
	#cve_¶ave_mode
 
	`cve_s‰_±r
(13)

	)

1321 
	#cve_˛rb¨_mode
 
	`cve_s‰_±r
(5)

	)

1322 
	#cve_chroma_‰eq0
 
	`cve_s‰_±r
(0)

	)

1323 
	#cve_chroma_‰eq1
 
	`cve_s‰_±r
(1)

	)

1324 
	#cve_chroma_‰eq2
 
	`cve_s‰_±r
(2)

	)

1325 
	#cve_chroma_‰eq3
 
	`cve_s‰_±r
(3)

	)

1326 
	#cve_chroma_pha£
 
	`cve_s‰_±r
(4)

	)

1327 
	#cve_bœck_Àvñ_h
 
	`cve_s‰_±r
(14)

	)

1328 
	#cve_bœck_Àvñ_l
 
	`cve_s‰_±r
(15)

	)

1329 
	#cve_bœnk_Àvñ_h
 
	`cve_s‰_±r
(16)

	)

1330 
	#cve_bœnk_Àvñ_l
 
	`cve_s‰_±r
(17)

	)

1331 
	#cve_whôe_Àvñ_h
 
	`cve_s‰_±r
(30)

	)

1332 
	#cve_whôe_Àvñ_l
 
	`cve_s‰_±r
(31)

	)

1333 
	#cve_hsync_width
 
	`cve_s‰_±r
(8)

	)

1334 
	#cve_bur°_width
 
	`cve_s‰_±r
(9)

	)

1335 
	#cve_back_p‹ch
 
	`cve_s‰_±r
(10)

	)

1336 
	#cve_bªeze_way
 
	`cve_s‰_±r
(41)

	)

1337 
	#cve_‰⁄t_p‹ch
 
	`cve_s‰_±r
(44)

	)

1338 
	#cve_°¨t_löe
 
	`cve_s‰_±r
(51)

	)

1339 
	#cve_num_löes_h
 
	`cve_s‰_±r
(23)

	)

1340 
	#cve_num_löes_l
 
	`cve_s‰_±r
(24)

	)

1341 
	#cve_löe_≥riod_h
 
	`cve_s‰_±r
(49)

	)

1342 
	#cve_löe_≥riod_l
 
	`cve_s‰_±r
(50)

	)

1343 
	#cve_cb_bur°_amp
 
	`cve_s‰_±r
(11)

	)

1344 
	#cve_¸_bur°_amp
 
	`cve_s‰_±r
(12)

	)

1345 
	#cve_cb_gaö
 
	`cve_s‰_±r
(32)

	)

1346 
	#cve_¸_gaö
 
	`cve_s‰_±r
(34)

	)

1351 
	#mùi_ba£
 
eva_ba£
 + 0x4000

	)

1352 
	#csi_ba£
 (
mùi_ba£
 + 0x0000)

	)

1353 
	#dsi_s_ba£
 (
mùi_ba£
 + 0x0200)

	)

1354 
	#dsi_d_ba£
 (
mùi_ba£
 + 0x0300)

	)

1355 
	#mp_phy_ba£
 (
mùi_ba£
 + 0x0400)

	)

1357 
	#csi_sys_c⁄
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x00*4))

	)

1358 
	#csi_rm≠_c⁄
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x01*4))

	)

1359 
	#csi_œ√_c⁄
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x02*4))

	)

1360 
	#csi_tvÆ_c⁄
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x03*4))

	)

1361 
	#csi_èsk_c⁄
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x04*4))

	)

1362 
	#csi_èsk_haw
 (*(vﬁ©ûê
u32
 *)(
csi_ba£
 + 0x05*4))

	)

1364 
	#dsi_sys_c⁄
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x00*4))

	)

1365 
	#dsi_vdo_fmt
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x10*4))

	)

1366 
	#dsi_vdo_vß
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x11*4))

	)

1367 
	#dsi_vdo_vbp
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x12*4))

	)

1368 
	#dsi_vdo_va˘
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x13*4))

	)

1369 
	#dsi_vdo_vÂ
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x14*4))

	)

1370 
	#dsi_vdo_hß
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x15*4))

	)

1371 
	#dsi_vdo_hbp
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x16*4))

	)

1372 
	#dsi_vdo_ha˘
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x17*4))

	)

1373 
	#dsi_vdo_hÂ
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x18*4))

	)

1374 
	#dsi_vdo_bŒp0
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x19*4))

	)

1375 
	#dsi_vdo_bŒp1
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x1a*4))

	)

1376 
	#dsi_‰m_tvÆ
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x1b*4))

	)

1377 
	#dsi_tvÆ_c⁄0
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x20*4))

	)

1378 
	#dsi_tvÆ_c⁄1
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x21*4))

	)

1379 
	#dsi_tvÆ_c⁄2
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x22*4))

	)

1380 
	#dsi_tvÆ_c⁄3
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x23*4))

	)

1381 
	#dsi_tvÆ_c⁄4
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x24*4))

	)

1382 
	#dsi_tvÆ_c⁄5
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x25*4))

	)

1383 
	#dsi_rm≠_c⁄
 (*(vﬁ©ûê
u32
 *)(
dsi_s_ba£
 + 0x26*4))

	)

1385 
	#dsi_èsk_c⁄
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x00*4))

	)

1386 
	#dsi_bus_c⁄
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x01*4))

	)

1387 
	#dsi_cmd_c⁄0
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x02*4))

	)

1388 
	#dsi_cmd_c⁄1
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x03*4))

	)

1389 
	#dsi_cmd_c⁄2
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x04*4))

	)

1390 
	#dsi_cmd_fifo
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x05*4))

	)

1391 
	#dsi_œ√_c⁄
 (*(vﬁ©ûê
u32
 *)(
dsi_d_ba£
 + 0x06*4))

	)

1393 
	#mùi_∂l_c⁄0
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x00*4))

	)

1394 
	#mùi_∂l_c⁄1
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x01*4))

	)

1395 
	#mùi_phy_c⁄0
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x10*4))

	)

1396 
	#mùi_phy_c⁄1
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x11*4))

	)

1397 
	#mùi_phy_c⁄2
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x12*4))

	)

1398 
	#mùi_phy_c⁄3
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x13*4))

	)

1399 
	#mùi_phy_c⁄4
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x14*4))

	)

1400 
	#mùi_phy_c⁄5
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x15*4))

	)

1401 
	#mùi_phy_c⁄6
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x16*4))

	)

1402 
	#mùi_phy_c⁄7
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x17*4))

	)

1403 
	#mùi_phy_c⁄8
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x18*4))

	)

1404 
	#mùi_phy_c⁄9
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x19*4))

	)

1405 
	#mùi_phy_c⁄10
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1a*4))

	)

1406 
	#mùi_phy_c⁄11
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1b*4))

	)

1407 
	#mùi_phy_c⁄12
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1c*4))

	)

1408 
	#mùi_phy_c⁄13
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1d*4))

	)

1409 
	#mùi_phy_c⁄14
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1e*4))

	)

1410 
	#mùi_phy_c⁄15
 (*(vﬁ©ûê
u32
 *)(
mp_phy_ba£
 + 0x1f*4))

	)

1415 
	#imr_ba£
 
eva_ba£
 + 0x4800

	)

1417 
	#imr_s˙_c⁄
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x00*4))

	)

1419 
	#imr0_c⁄
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x01*4))

	)

1420 
	#imr0_haw
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x02*4))

	)

1421 
	#imr0_vaw
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x03*4))

	)

1422 
	#imr0_b0_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x04*4))

	)

1423 
	#imr0_b0_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x05*4))

	)

1424 
	#imr0_b0_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x06*4))

	)

1425 
	#imr0_b1_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x07*4))

	)

1426 
	#imr0_b1_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x08*4))

	)

1427 
	#imr0_b1_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x09*4))

	)

1428 
	#imr0_wr_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x0a*4))

	)

1429 
	#imr0_wr_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x0b*4))

	)

1430 
	#imr0_wr_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x0c*4))

	)

1432 
	#imr1_c⁄
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x11*4))

	)

1433 
	#imr1_haw
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x12*4))

	)

1434 
	#imr1_vaw
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x13*4))

	)

1435 
	#imr1_b0_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x14*4))

	)

1436 
	#imr1_b0_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x15*4))

	)

1437 
	#imr1_b0_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x16*4))

	)

1438 
	#imr1_b1_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x17*4))

	)

1439 
	#imr1_b1_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x18*4))

	)

1440 
	#imr1_b1_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x19*4))

	)

1441 
	#imr1_wr_adr0
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x1a*4))

	)

1442 
	#imr1_wr_adr1
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x1b*4))

	)

1443 
	#imr1_wr_adr2
 (*(vﬁ©ûê
u32
 *)(
imr_ba£
 + 0x1c*4))

	)

	@include_lib/system/cpu/AC521x/asm/adc.h

1 #i‚de‡
CPU_ADC_H


2 
	#CPU_ADC_H


	)

4 
	~"ty≥def.h
"

10 
	mAD_CH00_PA02
,

11 
	mAD_CH01_PE07
,

12 
	mAD_CH02_PB03
,

13 
	mAD_CH03_PB12
,

14 
	mAD_CH04_PB14
,

15 
	mAD_CH05_PE03
,

16 
	mAD_CH06_PD05
,

17 
	mAD_CH07_PD15
,

18 
	mAD_CH08_PE05
,

19 
	mAD_CH09_PH12
,

20 
	mAD_CH10_PH14
,

21 
	mAD_CH11_RESERVED
,

22 
	mAD_CH12_PR02
,

23 
	mAD_CH13_PR01
,

24 
	mAD_CH14_V50
,

25 
	mAD_CH15_LDO_VBG
,

28 
	#ADC_WTIME
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~(0xf<<12)Ë| (x<<12)

	)

29 
	#ADCSEL
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~(0xf<<8)Ë| (x<<8)

	)

30 
	#ADC_PND
(Ë(
GPADC_CON
 & 
	`BIT
(7))

	)

31 
	#KITSTART
(Ë
GPADC_CON
 |
	`BIT
(6)

	)

32 
	#ADC_IE
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~
	`BIT
(5)Ë| (x<<5)

	)

33 
	#ADC_EN
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~
	`BIT
(4)Ë| (x<<4)

	)

34 
	#ADCEN
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~
	`BIT
(3)Ë| (x<<3)

	)

35 
	#ADC_BAUD
(
x
Ë
GPADC_CON
 = (GPADC_CON & ~(
	`BIT
(2)| BIT(1)| BIT(0))Ë| (x)

	)

37 
	sadc_sˇn
 {

38 
u8
 
	mch™√l
;

39 
u16
 
	mvÆue
;

40 (*
	mupd©a
)();

43 
adc_sˇn
 
adc_sˇn_begö
[];

44 
adc_sˇn
 
adc_sˇn_íd
[];

46 
	#REGISTER_ADC_SCAN
(
sˇn
) \

47 
adc_sˇn
 
sˇn
 
	`£c
(.adc_sˇnË{

	)

	@include_lib/system/cpu/AC521x/asm/adkey.h

1 #i‚de‡
CPU_ADKEY_H


2 
	#CPU_ADKEY_H


	)

4 
	~"asm/˝u.h
"

5 
	~"asm/adc.h
"

6 
	~"devi˚/key_drivî.h
"

9 
	#ADKEY_MAX_NUM
 16

	)

12 
	~"devi˚/devi˚.h
"

13 
	~"devi˚/adkey.h
"

17 
	#ADKEY_PLATFORM_DATA_BEGIN
(
d©a
) \

18 c⁄° 
adkey_∂©f‹m_d©a
 
d©a
 = {

	)

21 
	#ADKEY_PLATFORM_DATA_END
() \

22 .
ba£_˙t
 = 4, \

23 .
l⁄g_˙t
 = 75, \

24 .
hﬁd_˙t
 = 90, \

25 };

	)

29 c⁄° 
devi˚_›î©i⁄s
 
adkey_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/audio.h

1 #i‚de‡
CPU_AUDIO_H


2 
	#CPU_AUDIO_H


	)

4 
	~"ty≥def.h
"

5 
	~"asm/œdc.h
"

6 
	~"asm/dac.h
"

9 
	saudio_pf_d©a
 {

10 c⁄° 
adc_∂©f‹m_d©a
 *
	madc_pf_d©a
;

11 c⁄° 
dac_∂©f‹m_d©a
 *
	mdac_pf_d©a
;

	@include_lib/system/cpu/AC521x/asm/avc_enc.h

1 #i‚de‡
__AVC_ENC_H__


2 
	#__AVC_ENC_H__


	)

9 
	#AVC_ENC_CMD_BASE
 0x00200000

	)

18 
	#AVC_ENC_SET_NEXT_IFRAME
 (
AVC_ENC_CMD_BASE
 + 9)

	)

19 
	#AVC_ENC_SET_IFRAME_TAIL
 (
AVC_ENC_CMD_BASE
 + 10)

	)

	@include_lib/system/cpu/AC521x/asm/avo_cfg.h

1 #i‚de‡
__CVE_H__


2 
	#__CVE_H__


	)

4 
	~"gíîic/ty≥def.h
"

7 
	#CVE_NTSC_720
 0x01

	)

8 
	#CVE_PAL_720
 0x02

	)

9 
	#CVE_NTSC_960
 0x04

	)

10 
	#CVE_PAL_960
 0x08

	)

11 
	#CVE_PAL_1280
 0x10

	)

12 
	#CVE_COLOR_BAR
 0x20

	)

13 
	#CVE_OSC_12M
 0x40

	)

16 
cve_∂l_öô
(
u8
 
mode
);

17 
cve_dac_öô
();

18 
cve_cfg
(
u8
 
mode
, u8 
v_a˘_°¨t
);

	@include_lib/system/cpu/AC521x/asm/bus_device.h

1 #i‚de‡
CPU_BUS_DEVICE_H


2 
	#CPU_BUS_DEVICE_H


	)

4 
	~"ty≥def.h
"

7 
	s˝u_bus_devi˚
 {

8 c⁄° *
	m«me
;

9 (*
	mb™dwidth
)();

12 
	#REGISTER_CPU_BUS_DEVICE
(
dev
) \

13 c⁄° 
˝u_bus_devi˚
 
dev
 
	`£c
(.
bus_devi˚
)

	)

	@include_lib/system/cpu/AC521x/asm/cache.h

17 #i‚de‡
ASM_CACHE_H


18 
	#ASM_CACHE_H


	)

20 
	~"ty≥def.h
"

22 
	#CACHE_LINE_COUNT
 32

	)

24 
Êush_dˇche
(*
±r
, 
Àn
);

26 
Êushöv_dˇche
(*
±r
, 
Àn
);

28 
dˇche_way_u£_£À˘
(
u8
 
˝u_way
, u8 
¥p_way
);

30 
dˇche_cwt_£t
(
u8
 
íabÀ
, 
u32
 
addr_°¨t
, u32 
addr_íd
);

32 
dˇche_cwt_buf„r_sync
(*
buÁ
, 
u32
 
Àn
);

	@include_lib/system/cpu/AC521x/asm/clock.h

1 #i‚de‡
_CPU_CLOCK_


2 
	#_CPU_CLOCK_


	)

4 
	~"ty≥def.h
"

7 
˛k_óæy_öô
();

9 
˛k_gë
(c⁄° *
«me
);

11 
˛k_£t
(c⁄° *
«me
, 
˛k
);

	@include_lib/system/cpu/AC521x/asm/cpu.h

2 #i‚de‡
ASM_CPU_H


3 
	#ASM_CPU_H


	)

6 
	~"AC521x.h
"

8 #i‚de‡
__ASSEMBLY__


10 
	tu8
, 
	tboﬁ
, 
	tBOOL
;

11 
	ts8
;

12 
	tu16
;

13 sig√d 
	ts16
;

14 
	tu32
;

15 sig√d 
	ts32
;

16 
	tu64
;

17 
u32
 
	tFOURCC
;

18 
	ts64
;

19 
	tu64
;

26 
	#___åig
 
__asm__
 vﬁ©ûê("åiggî")

	)

29 #i‚de‡
BIG_ENDIAN


30 
	#BIG_ENDIAN
 0x3021

	)

32 #i‚de‡
LITTLE_ENDIAN


33 
	#LITTLE_ENDIAN
 0x4576

	)

35 
	#CPU_ENDIAN
 
LITTLE_ENDIAN


	)

38 
	#CPU_CORE_NUM
 1

	)

40 
	#NO_CACHE_ADDR
(
addr
) \

41 (
u32
)(((u32)(
addr
Ë>=0x1000000)?((u32)◊ddr)+0x1000000):(u32)◊ddr))

	)

43 
	#CPU_ADDR
(
addr
) \

44 (
u32
)(((u32)(
addr
Ë>=0x2000000)?((u32)◊ddr)-0x1000000):(u32)◊ddr))

	)

46 
	#CPU_TASK_CLR
(
a
)

	)

47 
	#CPU_TASK_SW
(
a
) \

49 
	`˛r_wdt
(); \

50 
ILAT_SET
|=
	`BIT
(7-
a
); \

51 
	`˛r_wdt
(); \

52 } 0)

	)

55 
	#CPU_INT_NESTING
 2

	)

58 #i‚de‡
__ASSEMBLY__


60 #i‡
CPU_CORE_NUM
 > 1

61 
ölöe
 
	$cuºít_˝u_id
()

63 
id
;

64 
asm
 vﬁ©ûe("%0 = cnum" : "Ù"(
id
) ::);

65  
id
 ;

66 
	}
}

68 
ölöe
 
	$cuºít_˝u_id
()

71 
	}
}

74 
ölöe
 
	$˝u_ö_úq
()

76 
Êag
;

77 
__asm__
 vﬁ©ûe("%0 = icfg" : "Ù"(
Êag
));

78  
Êag
 & 0xff;

79 
	}
}

81 
ölöe
 
	$˝u_úq_dißbÀd
()

83 
Êag
;

84 
__asm__
 vﬁ©ûe("%0 = icfg" : "Ù"(
Êag
));

85  (
Êag
 & 0x300) != 0x300;

86 
	}
}

92 
	#SDRAM
 0

	)

93 
	#MEM_MALLOC
 0

	)

95 #i‡
SDRAM
 > 0

96 
	#PAGE_SHIFT
 14

	)

97 
	#SDRAM_BEGIN_ADDR
 (0x800000)

	)

98 
	#MAX_SDRAM_SIZE
 (4*1024*1024)

	)

99 
	#MMU_MAX_SIZE
 (4*1024*1024)

100 
	#MMU_ADDR_BEGIN
 (0x400000)

	)

101 
	#MMU_ADDR_END
 (0x800000)

	)

102 
	#STACK_TASK_SIZE
 (1024*64)

	)

103 
	#STACK_START
 
MMU_ADDR_BEGIN


	)

104 
	#STACK_END
 (
MMU_ADDR_BEGIN
+
STACK_TASK_SIZE
)

	)

106 
	#PAGE_SHIFT
 9

	)

108 
	#MAX_SDRAM_SIZE
 (128*1024-
PAGE_SIZE
)

	)

109 
	#MMU_MAX_SIZE
 (128*1024-
PAGE_SIZE
)

110 
	#MMU_ADDR_BEGIN
 (0x80000)

	)

111 
	#MMU_ADDR_END
 (
MMU_ADDR_BEGIN
+
MMU_MAX_SIZE
)

	)

112 
	#STACK_TASK_SIZE
 (1024*1)

	)

113 
	#STACK_START
 
MMU_ADDR_BEGIN


	)

114 
	#STACK_TASK_MAX_SIZE
 (1024*4)

	)

118 
	#PAGE_SIZE
 (1UL << 
PAGE_SHIFT
)

	)

119 
	#PAGE_MASK
 (~(
PAGE_SIZE
-1))

	)

120 
	#PAGE_ALIGN
(
addr
Ë((◊ddr)+
PAGE_SIZE
-1)&
PAGE_MASK
)

	)

122 
	#MMU_TAG_ADDR0
 0x49800

	)

124 #i‡
CPU_CORE_NUM
 > 1

125 
	#MMU_TAG_ADDR1
 0x6a000

	)

128 #i‡(
MAX_SDRAM_SIZE
/
PAGE_SIZE
 > 256 )

129 
	#uÁt_t
 
u16


	)

131 
	#uÁt_t
 
u8


	)

138 #i‚de‡
__ASSEMBLY__


140 
	#__asm_csync
() \

142 
asm
 volatile("csync;"); \

143 
asm
 volatile("csync;"); \

144 
asm
 volatile("csync;"); \

145 
asm
 volatile("csync;"); \

146 
asm
 volatile("csync;"); \

147 } 0)

	)

149 
	~"asm/úq.h
"

150 
	~"¥ötf.h
"

151 
	~"sy°em/gíîic/log.h
"

154 
	#¨ch_©omic_ªad
(
v
) \

156 
	`__asm_csync
(); \

157 (*(vﬁ©ûê*)&(
v
)->
cou¡î
); \

158 })

	)

160 vﬁ©ûê
˝u_lock_˙t
[];

161 vﬁ©ûê
úq_lock_˙t
[];

164 
ölöe
 
	$loˇl_úq_dißbÀ
()

166 
	`__buûtö_pi32v2_˛i
();

167 
úq_lock_˙t
[
	`cuºít_˝u_id
()]++;

168 
	}
}

171 
ölöe
 
	$loˇl_úq_íabÀ
()

173 i‡(--
úq_lock_˙t
[
	`cuºít_˝u_id
()] == 0) {

174 
	`__buûtö_pi32v2_°i
();

176 
	}
}

179 
	#¨ch_•ö_åylock
(
lock
) \

181 
	`__asm_csync
(); \

182 (
lock
)->
rwlock
); \

183 (
lock
)->
rwlock
 = 1; \

184 }0)

	)

186 
	#¨ch_•ö_lock
(
lock
) \

188 
ªt
 = 
Ál£
; \

189 
	`__asm_csync
(); \

190 i‡(!(
lock
)->
rwlock
) { \

191 
ªt
 = 
åue
; \

192 (
lock
)->
rwlock
 = 1; \

194 i‡(
ªt
) \

196 }1)

	)

198 
	#¨ch_•ö_u∆ock
(
lock
) \

200 (
lock
)->
rwlock
 = 0; \

201 }0)

	)

206 
	#CPU_SR_ALLOC
() \

208 

	)

209 
	#CPU_CRITICAL_ENTER
() \

211 
	`loˇl_úq_dißbÀ
(); \

212 
	`__asm_csync
(); \

213 }0)

	)

216 
	#CPU_CRITICAL_EXIT
() \

218 
	`loˇl_úq_íabÀ
(); \

219 }0)

	)

221 
ölöe
 
	$˝u_ª£t
()

223 
	`log_Êush
();

225 
	`log_Êush
();

226 
PWR_CON
 |= (1 << 4);

228 
	}
}

230 
	#ASSERT
(
a
,...) \

232 if(!(
a
)){ \

233 
	`log_e
("ASSERT-FAILD: "#a" "
__VA_ARGS__
); \

234 
	`˝u_ª£t
(); \

236 }0);

	)

241 
	#MULU
(
Rm
,
Rn
Ë
	`__buûtö_pi32_umul64
(Rm,Rn);

	)

242 
	#MUL
(
Rm
,
Rn
Ë
	`__buûtö_pi32_smul64
(Rm,Rn);

	)

243 
	#MLA
(
Rm
,
Rn
Ë
	`__buûtö_pi32_smœ64
(Rm,Rn);

	)

244 
	#MLA0
(
Rm
,
Rn
Ë
	`MUL
(Rm,Rn);

	)

245 
	#MLS
(
Rm
,
Rn
Ë
	`__buûtö_pi32_smls64
(Rm,Rn);

	)

246 
	#MLS0
(
Rm
,
Rn
Ë
	`MUL
(-Rm,Rn);

	)

247 
	#MRSIS
(
Rm
,
Rn
Ë(Rm = 
	`__buûtö_pi32_§ódmacc
(Rn));

248 
	#MRSRS
(
Rm
,
Rn
Ë(Rm = 
	`__buûtö_pi32_§ódmacc
(Rn));

249 
	#MACCLR
(Ë
__asm__
 vﬁ©ûê("˛rmacc");

	)

250 
	#MACSET
(
h
,
l
Ë
__asm__
 vﬁ©ûê("mov mac˛, %0; mov macch, %1"::"r" (l), "r" (h));

	)

251 
	#MACRL
(
l
Ë
__asm__
 vﬁ©ûê("mov %0, mac˛":"Ù" (l));

	)

252 
	#MACRH
(
l
Ë
__asm__
 vﬁ©ûê("mov %0, macch":"Ù" (l));

	)

253 
	#MULSIS
(
Ro
,
Rm
,
Rn
,
Rp
Ë
	`MUL
(Rm, Rn); 
	`MRSIS
(Ro, Rp);

	)

254 
	#MULSRS
(
Ro
,
Rm
,
Rn
,
Rp
Ë
	`MUL
(Rm, Rn); 
	`MRSRS
(Ro, Rp);

	)

	@include_lib/system/cpu/AC521x/asm/cpu_api.h

1 #i‚de‡
CPU_API_H


2 
	#CPU_API_H


	)

5 
	~"u¨t.h
"

6 
	~"gpio.h
"

7 
	~"debug.h
"

	@include_lib/system/cpu/AC521x/asm/crc16.h

1 #i‚de‡
__CPU_CRC16_H__


2 
	#__CPU_CRC16_H__


	)

5 
	~"ty≥def.h
"

9 
u16
 
CRC16
(c⁄° *
±r
, 
u32
 
Àn
);

10 
u16
 
CRC16_wôh_code
(c⁄° *
±r
, 
u32
 
Àn
, u16 
code
);

12 
•i_¸c16_£t
(
u16
 
¸c
);

13 
u16
 
•i_¸c16_gë
();

15 
CrcDecode
(*
buf
, 
u16
 
Àn
);

17 
u16
 
gë_∑ge_efu£
(
u32
 
∑ge
, u32 
dñay_˙t
);

18 
öô_íc_key
(
u8
 
cmd
);

19 
u32
 
gë_sfc_íc_key
();

	@include_lib/system/cpu/AC521x/asm/dac.h

1 #i‚de‡
__DAC_H__


2 
	#__DAC_H__


	)

4 
	~"gíîic/ty≥def.h
"

6 
	#DAC_44_1KHZ
 0

	)

7 
	#DAC_48KHZ
 1

	)

8 
	#DAC_32KHZ
 2

	)

9 
	#DAC_22_05KHZ
 3

	)

10 
	#DAC_24KHZ
 4

	)

11 
	#DAC_16KHZ
 5

	)

12 
	#DAC_11_025KHZ
 6

	)

13 
	#DAC_12KHZ
 7

	)

14 
	#DAC_8KHZ
 8

	)

16 
	#DAC_ISEL_FULL_PWR
 4

	)

17 
	#DAC_ISEL_HALF_PWR
 2

	)

18 
	#DAC_ISEL_THREE_PWR
 1

	)

21 
	sdac_∂©f‹m_d©a
 {

22 
u8
 
	mldo_id
;

23 
u8
 
	m∑_muã_p‹t
;

24 
u8
 
	m∑_muã_vÆue
;

25 
u8
 
	mdif„r_ouçut
;

28 
dv15_dac_›í
(
u8
 
ßm∂e_øã
, u8 
ldo_£l
, u8 
pwr_£l
);

30 
dv15_dac_⁄
();

32 
dv15_dac_off
();

34 
dv15_dac_˛o£
();

36 
dv15_dac_£t_vﬁume
(
u8
 
gaö
);

38 
dv15_dac_£t_ßm∂e_øã
(
u32
 
ßm∂e_øã
);

40 
dv15_dac_úq_h™dÀr
();

42 
dv15_dac_£t_d©a_h™dÀr
(*
¥iv
, (*
h™dÀr
)(*, 
s16
 *
d©a
, 
Àn
));

	@include_lib/system/cpu/AC521x/asm/debug.h

1 #i‚de‡
__DEBUG_H__


2 
	#__DEBUG_H__


	)

3 
	~"gíîic/ty≥def.h
"

5 
	#DBG_SD0C
 0x00

	)

6 
	#DBG_SD0D
 0x01

	)

7 
	#DBG_SD1C
 0x02

	)

8 
	#DBG_SD1D
 0x03

	)

9 
	#DBG_SD2C
 0x04

	)

10 
	#DBG_SD2D
 0x05

	)

12 
	#DBG_ALNK
 0x10

	)

13 
	#DBG_AUDIO
 0x11

	)

14 
	#DBG_PAP
 0x12

	)

16 
	#DBG_CHECKSUM
 0x14

17 
	#DBG_ETH
 0x15

	)

18 
	#DBG_SHA1
 0x16

	)

20 
	#DBG_FUSB
 0x20

	)

21 
	#DBG_HUSB
 0x21

	)

23 
	#DBG_SPI0
 0x30

	)

24 
	#DBG_SPI1
 0x31

	)

25 
	#DBG_SPI2
 0x32

	)

27 
	#DBG_UART0_WR
 0x40

	)

28 
	#DBG_UART0_RD
 0x41

	)

29 
	#DBG_UART1_WR
 0x42

	)

30 
	#DBG_UART1_RD
 0x43

	)

31 
	#DBG_UART2_WR
 0x44

	)

32 
	#DBG_UART2_RD
 0x45

	)

33 
	#DBG_UART3_WR
 0x46

	)

34 
	#DBG_UART3_RD
 0x47

	)

36 
	#DBG_IIC0
 0x50

37 
	#DBG_IIC1
 0x51

38 

	)

40 
	#DBG_IMC_CH0
 0x80

	)

41 
	#DBG_IMC_CH1
 0x81

	)

42 
	#DBG_IM


	)

44 
debug_öô
();

61 
u32
 
dev_wrôe_ønge_limô
(u32 
limô_ödex
,

62 *
low_addr
,

63 *
high_addr
,

64 
u32
 
is_Ælow_wrôe
,

65 
u32
 
dev


68 
u32
 
˝u0_wrôe_ønge_limô
(u32 
limô_ödex
, *
low_addr
, *
high_addr
);

69 
u32
 
˝u1_wrôe_ønge_limô
(u32 
limô_ödex
, *
low_addr
, *
high_addr
);

70 
u32
 
˝u_wrôe_ønge_limô
(*
low_addr
, u32 
wö_size
);

71 
pc0_øng_limô
(*
low_addr
, *
high_addr
);

72 
pc1_øng_limô
(*
low_addr
, *
high_addr
);

73 
pc_øng_limô
(*
low_addr
, *
high_addr
);

74 
ex˚±i⁄_i§
();

75 
u32
 
sdr_wrôe_ønge_limô
(*
low_addr
, u32 
wö_size
, u32 
is_Ælow_wrôe
, u32 
dev
);

76 
debug_˛ór
();

78 
	#dev_wrôe_ˇ±uª
(
œddr
,
wö_size
,
is_Ælow_wrôe
,
dev
Ë
	`dev_wrôe_ønge_limô
(-1,\

79 (*)(
œddr
),\

80 ((*)
œddr
)+
wö_size
,\

81 (
is_Ælow_wrôe
),\

82 (
dev
))

	)

85 
u32
 
ãxt_rod©a_begö
;

86 
u32
 
ãxt_rod©a_íd
;

87 
	#löe_öf
 
	`¥ötf
("%†%†%d \r\n" ,
__FILE__
 ,
__FUNCTION__
 ,
__LINE__
)

	)

88 
	#IO_C
 
PORTH_DIR
 &=~
	`BIT
(15Ë;
PORTH_OUT
^=BIT(15)

	)

89 
	#IO_L
 
PORTH_DIR
 &=~
	`BIT
(15Ë;
PORTH_OUT
&=~BIT(15)

	)

90 
	#IO_H
 
PORTH_DIR
 &=~
	`BIT
(15Ë;
PORTH_OUT
|=BIT(15)

	)

92 
	#IO1_C
 
PORTH_DIR
 &=~
	`BIT
(13Ë;
PORTH_OUT
^=BIT(13)

	)

93 
	#IO1_L
 
PORTH_DIR
 &=~
	`BIT
(13Ë;
PORTH_OUT
&=~BIT(13)

	)

94 
	#IO1_H
 
PORTH_DIR
 &=~
	`BIT
(13Ë;
PORTH_OUT
|=BIT(13)

	)

	@include_lib/system/cpu/AC521x/asm/device_drive.h

1 #i‚de‡
__DEVICE_DRIVE_H__


2 
	#__DEVICE_DRIVE_H__


	)

4 
	~"ty≥def.h
"

5 
	~"î∫o-ba£.h
"

6 
	~"io˘l.h
"

8 #i‚de‡
__UBOOT


10 #i‚de‡
_MANGO_OS_


11 
	#_MANGO_OS_


	)

16 #ifde‡
_MANGO_OS_


17 
	~"os/os_≠i.h
"

21 #i‚de‡
__UBOOT


23 #i‚de‡
_WIN_DEBUG_


24 
	#_WIN_DEBUG_


	)

29 #ifde‡
_WIN_DEBUG_


30 
	~<±hªad.h
>

31 
±hªad_muãx_t
 
	tOS_MUTEX
;

32 
u32
 
	tOS_ERR
;

33 
	#OS_ERR_NONE
 0

	)

36 
u32
 
	tOS_MUTEX
, 
	tOS_ERR
;

37 
	#OS_ERR_NONE
 0

	)

43 #ifde‡
__˝lu•lus


47 
	sdev_muãx
 {

48 
OS_MUTEX
 *
wrôe_muãx
;

49 
OS_MUTEX
 *
ªad_muãx
;

51 
	e_dev_ty≥
 {

53 
DEV_SDCRAD_0
 = 0X10,

54 
DEV_SDCRAD_1
,

55 
DEV_SDCRAD_2
,

57 
DEV_UDISK_H0
,

58 
DEV_UDISK_H1
,

59 
DEV_UDISK_F0
,

61 
DEV_NOR_FLASH
,

62 
DEV_NAND_FLASH
,

64 
DEV_STORAGE
 = 0x100,

65 
DEV_LOGIC_DISK
 = 0x101,

66 
DEV_USB_SLAVE
,

67 
DEV_USB_HOST
,

68 
DEV_HID
 = 0x200,

69 
DEV_NET
,

70 
DEV_AUDIO
,

71 
DEV_ISP
,

72 } 
	tdev_ty≥
;

79 
	sDEV_IO
 {

80 c⁄° 
«me
[8];

81 
s32
(*
mou¡
)(*, *
∑rm
);

82 
s32
(*
unmou¡
)();

83 
s32
(*
ªad
)(
u8
 *vﬁ©ûê
buf
, 
u32
 
addr
, u32 
Àn
);

84 
s32
(*
wrôe
)(
u8
 *vﬁ©ûê
buf
, 
u32
 
addr
, u32 
Àn
);

85 
s32
(*
io˘æ
)(*vﬁ©ûê
∑rm
, 
u32
 
cmd
);

86 
s32
(*
powî
)(
u32
 
mod
);

87 
s32
(*
dëe˘
)();

89 
dev_muãx
 *
muãx
;

90 
dev_ty≥
 
devi˚_ty≥
;

92 *
¥iv©e_d©a
;

93 } 
	tdev_io_t
;

98 
	edev_°a
 {

99 
DEV_OFFLINE
 = 0,

100 
DEV_ONLINE
 = 1,

101 
DEV_HOLD
 = 2,

103 
DEV_POWER_ON
 = 0x10,

104 
DEV_POWER_OFF
,

105 
DEV_POWER_STANDBY
,

106 
DEV_POWER_WAKEUP
,

107 } 
	tDEV_STA
;

109 
	edev_îr
 {

110 
DEV_ERR_NONE
 = 0,

111 
DEV_ERR_NOT_MOUNT
,

112 
DEV_ERR_OVER_CAPACITY
,

114 
DEV_ERR_UNKNOW_CLASS
,

116 
DEV_ERR_NOT_READY
,

117 
DEV_ERR_LUN
,

119 
DEV_ERR_TIMEOUT
,

120 
DEV_ERR_CMD_TIMEOUT
,

121 
DEV_ERR_READ_TIMEOUT
,

122 
DEV_ERR_WRITE_TIMEOUT
,

124 
DEV_ERR_OFFLINE
,

126 
DEV_ERR_CRC
,

127 
DEV_ERR_CMD_CRC
,

128 
DEV_ERR_READ_CRC
,

129 
DEV_ERR_WRITE_CRC
,

131 
DEV_ERR_CONTROL_STALL
,

132 
DEV_ERR_RXSTALL
,

133 
DEV_ERR_TXSTALL
,

134 
DEV_ERR_CONTROL
,

136 
DEV_ERR_NOT_STORAGE
,

137 
DEV_ERR_INVALID_PATH
,

138 
DEV_ERR_INVALID_DATA
,

139 
DEV_ERR_OUTOFMEMORY
,

140 
DEV_ERR_HANDLE_FREE
,

141 
DEV_ERR_INVALID_HANDLE
,

142 
DEV_ERR_INVALID_BUF
,

143 
DEV_ERR_INUSE
,

144 
DEV_ERR_NO_READ
,

145 
DEV_ERR_NO_WRITE
,

146 
DEV_ERR_NO_IOCTL
,

147 
DEV_ERR_NO_POWER
,

148 
DEV_ERR_NOT_EXIST
,

149 
DEV_ERR_UNKNOW
,

150 } 
	tDEV_ERR
;

153 
	#DEV_GENERAL_MAGIC
 0xe0

	)

155 
	#DEV_GET_STATUS
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe0,
u32
)

157 
	#DEV_GET_BLOCK_SIZE
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe1,
u32
)

158 
	#DEV_GET_BLOCK_NUM
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe2,
u32
)

159 
	#DEV_GET_DEV_ID
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe3,
u32
)

160 
	#DEV_SECTOR_ERASE
 
	`_IOW
(
DEV_GENERAL_MAGIC
,0xe4,
u32
)

161 
	#DEV_BLOCK_ERASE
 
	`_IOW
(
DEV_GENERAL_MAGIC
,0xe5,
u32
)

162 
	#DEV_CHIP_ERASE
 
	`_IOW
(
DEV_GENERAL_MAGIC
,0xe6,
u32
)

163 
	#DEV_GET_TYPE
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe7,
u32
)

164 
	#DEV_CHECK_WPSTA
 
	`_IOR
(
DEV_GENERAL_MAGIC
,0xe8,
u32
)

165 

	)

179 #ifde‡
__˝lu•lus


	@include_lib/system/cpu/AC521x/asm/devices.h

1 #i‚de‡
ASM_DEVICES_H


2 
	#ASM_DEVICES_H


	)

5 
	~"ty≥def.h
"

	@include_lib/system/cpu/AC521x/asm/dma.h

1 #i‚de‡
__CPU_DMA_H__


2 
	#__CPU_DMA_H__


	)

6 
	sdma_li°
 {

7 *
	m§c_addr
;

8 *
	md°_addr
;

9 
	mÀn
;

14 
dma_c›y
(*
d°
, *
§c
, 
Àn
);

16 
dma_èsk_c›y
(
dma_li°
 *
li°
, 
˙t
);

	@include_lib/system/cpu/AC521x/asm/drv_manage.h

1 #i‚de‡
__DRV_MANAGE_H__


2 
	#__DRV_MANAGE_H__


	)

9 
	#mÆloc_dbg
 
mÆloc


	)

10 
	#mem_mÆloc
 
mÆloc


	)

11 
	#mem_‰ì
 
‰ì


	)

13 
	~"devi˚_drive.h
"

14 
	~"ty≥def.h
"

15 
	~"li°.h
"

17 #ifde‡
__˝lu•lus


20 
	#DRV_MEM_MAGIC
 0x55Ø55Ø

	)

21 
	#DRV_MEM_FREE
 0xØ55Ø55

	)

22 
	#DEV_ACTIVE
 0x55Ø55bb

	)

23 
	#DEV_UNACTIVE
 0xØ5555bb

	)

24 
	sdev_li°_t
 {

25 
li°_hód
 
íåy
;

26 
u32
 
mem_maigc
;

27 c⁄° 
dev_io_t
 *
dev_io
;

28 c⁄° 
dev_li°_t
 *
Áthî
;

29 
u32
 
dev_°©us
;

30 
vﬁume_«me
;

31 } 
	tDEV_LIST_T
;

32 c⁄° 
	tDEV_LIST_T
 *
	tDEV_HANDLE
;

34 
	#DEVICE_REG
(
dev
,
∑rm
Ë
	`dev_ªgi°î
(
dev_ªg_
##
	`dev
(’¨m)))

	)

36 
s32
 
dev_öô
(
u32
 
¥io
, u32 
°ack_size
);

37 c⁄° 
	tdev_io_t
 *(*
	tGET_PART_FUN
)(
	tDEV_HANDLE
 
	thdev
);

38 
dev_£t_gë_∑π_hook
(
GET_PART_FUN
 
gë_∑π_fun
);

40 
s32
 
dev_ªgi°î
(c⁄° 
dev_io_t
 *
dev_io
);

41 
DEV_HANDLE
 
dev_›í
(c⁄° *
«me
, *
∑rm
);

42 
s32
 
dev_ªad
(
DEV_HANDLE
 
hdev
, 
u8
 *
buf
, 
u32
 
addr
, u32 
Àn
);

43 
s32
 
dev_wrôe
(
DEV_HANDLE
 
hdev
, 
u8
 *
buf
, 
u32
 
addr
, u32 
Àn
);

44 
s32
 
dev_io˘l
(
DEV_HANDLE
 
hdev
, *
¥am
, 
u32
 
cmd
);

45 
s32
 
dev_powî
(
DEV_HANDLE
 
hdev
, 
u32
 
mode
);

46 
s32
 
dev_˛o£
(
DEV_HANDLE
 
hdev
);

47 
u32
 
dev_ªg_msg
(*
¥am
);

48 
u32
 
dev_ªmove_msg
(*
¥am
);

49 
DEV_HANDLE
 
dev_gë_√xt
(
u32
 
pos
);

50 
	s__msg_devi˚ch™ge_t
 {

51 
dev_°a
 
°a
;

52 
DEV_HANDLE
 
hdev
;

53 } 
	tmsg_devi˚ch™ge_t
;

55 
	#ls_dev
()

56 
	`¥ötf_dev_li°
(c⁄° *
a
, 
u32
 
b
);

	)

61 
	#drv_îr
(
fmt
,...) do{\

62 
	`¥ötf
("%s-%d"#fmt"\r\n",
__FILE__
,
__LINE__
,##
__VA_ARGS__
);\

63 }0);

	)

66 
	#drv_dbg
(...)

68 
	#drv_¥ötf_buf


69 

	)

72 
	#drv_¥ötf_buf


	)

73 
	#drv_dbg
(...)

	)

74 
	#drv_îr
(...)

	)

77 #ifde‡
__˝lu•lus


	@include_lib/system/cpu/AC521x/asm/dsi.h

1 #i‚de‡
__DSI_H__


2 
	#__DSI_H__


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"asm/imd.h
"

10 
	#œ√_dis
 0x00

	)

11 
	#œ√_í
 0x10

	)

12 
	#œ√_ex
 0x20

13 

	)

14 
	#œ√_d0
 0x00

	)

15 
	#œ√_d1
 0x01

	)

16 
	#œ√_d2
 0x02

	)

17 
	#œ√_d3
 0x03

	)

18 
	#œ√_˛k
 0x04

	)

21 
	#nuŒ_∑ckë
 0x09

	)

22 
	#£t_maximum_ªtu∫_∑ckë_size
 0x37

	)

23 
	#dcs_sh‹t_wrôe_p0
 0x05

	)

24 
	#dcs_sh‹t_wrôe_p1
 0x15

	)

25 
	#dcs_l⁄g_wrôe
 0x39

	)

26 
	#dcs_sh‹t_ªad_p0
 0x06

	)

27 
	#gíîic_sh‹t_wrôe_p0
 0x03

	)

28 
	#gíîic_sh‹t_wrôe_p1
 0x13

	)

29 
	#gíîic_sh‹t_wrôe_p2
 0x23

	)

30 
	#gíîic_sh‹t_ªad_p0
 0x04

	)

31 
	#gíîic_sh‹t_ªad_p1
 0x14

	)

32 
	#gíîic_sh‹t_ªad_p2
 0x24

	)

33 
	#gíîic_l⁄g_wrôe
 0x29

	)

34 
	#∑cked_pixñ_f‹m©_rgb565_16bô
 0x0e

	)

35 
	#∑cked_pixñ_f‹m©_rgb666_18bô
 0x1e

	)

36 
	#∑cked_pixñ_f‹m©_rgb666_18bô_loo£ly
 0x2e

	)

37 
	#∑cked_pixñ_f‹m©_rgb888_24bô
 0x3e

	)

40 
	#vdo_d⁄e_i§_í
 
dsi_sys_c⁄
 |
	`BIT
(2)

	)

41 
	#vdo_d⁄e_i§_dis
 
dsi_sys_c⁄
 &=~
	`BIT
(2)

	)

42 
	#cmd_d⁄e_i§_í
 
dsi_sys_c⁄
 |
	`BIT
(3)

	)

43 
	#cmd_d⁄e_i§_dis
 
dsi_sys_c⁄
 &=~
	`BIT
(3)

	)

44 
	#cmd_i§_°©us
 (
dsi_sys_c⁄
&
	`BIT
(3))

	)

45 
	#bè_d⁄e_i§_í
 
dsi_sys_c⁄
 |
	`BIT
(4)

	)

46 
	#bè_Áû_i§_í
 
dsi_sys_c⁄
 |
	`BIT
(5)

	)

47 
	#cdë_i§_í
 
dsi_sys_c⁄
 |
	`BIT
(6)

	)

48 
	#vdo_d⁄e_≤d
 (
dsi_sys_c⁄
 & 
	`BIT
(9))

	)

49 
	#vdo_d⁄e_≤d_˛r
 
dsi_sys_c⁄
 |
	`BIT
(8)

	)

50 
	#cmd_d⁄e_≤d
 (
dsi_sys_c⁄
 & 
	`BIT
(11))

	)

51 
	#cmd_d⁄e_≤d_˛r
 
dsi_sys_c⁄
 |
	`BIT
(10)

	)

52 
	#bè_d⁄e_≤d
 (
dsi_sys_c⁄
 & 
	`BIT
(13))

	)

53 
	#bè_d⁄e_≤d_˛r
 
dsi_sys_c⁄
 |
	`BIT
(12)

	)

54 
	#bè_Áû_≤d
 (
dsi_sys_c⁄
 & 
	`BIT
(15))

	)

55 
	#bè_Áû_≤d_˛r
 
dsi_sys_c⁄
 |
	`BIT
(14)

	)

56 
	#cdë_≤d
 (
dsi_sys_c⁄
 & 
	`BIT
(17))

	)

57 
	#cdë_≤d_˛r
 
dsi_sys_c⁄
 |
	`BIT
(16)

	)

59 
	#dsi_åi_kick
 
dsi_èsk_c⁄
 |
	`BIT
(4)

	)

60 
	#dsi_cmd_kick
 
dsi_èsk_c⁄
 |
	`BIT
(5)

	)

61 
	#dsi_vdo_kick
 
dsi_èsk_c⁄
 |
	`BIT
(6)

	)

62 
	#˛ock_ªady
 (
dsi_bus_c⁄
 & 
	`BIT
(3))

	)

64 
	#rx_ã
 (
dsi_cmd_c⁄1
&
	`BIT
(16))

	)

65 
	#rx_ack
 (
dsi_cmd_c⁄1
&
	`BIT
(17))

	)

66 
	#rx_îr
 (
dsi_cmd_c⁄1
&
	`BIT
(18))

	)

67 
	#rx_eŸ
 (
dsi_cmd_c⁄1
&
	`BIT
(19))

	)

68 
	#rx_g§1
 (
dsi_cmd_c⁄1
&
	`BIT
(20))

	)

69 
	#rx_g§2
 (
dsi_cmd_c⁄1
&
	`BIT
(21))

	)

70 
	#rx_gÃ
 (
dsi_cmd_c⁄1
&
	`BIT
(22))

	)

71 
	#rx_d§1
 (
dsi_cmd_c⁄1
&
	`BIT
(23))

	)

72 
	#rx_d§2
 (
dsi_cmd_c⁄1
&
	`BIT
(24))

	)

73 
	#rx_dÃ
 (
dsi_cmd_c⁄1
&
	`BIT
(25))

	)

74 
	#cmd_îr
 (
dsi_cmd_c⁄1
&
	`BIT
(26))

	)

76 
	#BTA_TIMEOUT
 0x00

	)

77 
	#BTA_FAIL
 0x01

	)

78 
	#BTA_RX_TE
 0x02

	)

79 
	#BTA_RX_ACK
 0x03

	)

80 
	#BTA_RX_EOT
 0x04

	)

81 
	#BTA_RX_ERR
 0x05

	)

82 
	#BTA_CMD_ERR
 0x06

	)

83 
	#BTA_RX_GSR1
 0x07

	)

84 
	#BTA_RX_GSR2
 0x08

	)

85 
	#BTA_RX_GLR
 0x09

	)

86 
	#BTA_RX_DSR1
 0x0a

	)

87 
	#BTA_RX_DSR2
 0x0b

	)

88 
	#BTA_RX_DLR
 0x0c

	)

89 
	#BTA_DONE
 0x0d

	)

91 
	#_W
 0x00

	)

92 
	#_R
 0x01

	)

93 
	#DELAY
(
t
Ë
	)
t

94 
	#SIZE
(
s
Ë
	)
s

96 
	söô_cmd
 {

97 
u8
 
	mrw
;

98 
u8
 
	mdñay
;

99 
u8
 
	m∑ckë_ty≥
;

100 
u8
 
	msize
;

101 
u8
 
	md©a
[0];

104 
dsi_rd_sh‹t
(
u8
 *
buf
, u8 
Àn
);

105 
dsi_rd_l⁄g
(
u8
 *
buf
, u8 
Àn
);

107 
dcs_£t_max_∑ckë_size
(
u8
 
size
);

108 
dcs_£nd_sh‹t_p0
(
u8
 
cmd
);

109 
u8
 
dcs_£nd_sh‹t_p0_bè
(u8 
cmd
);

110 
dcs_£nd_sh‹t_p1
(
u8
 
cmd
, u8 
vÆ
);

111 
u8
 
dcs_£nd_sh‹t_p1_bè
(u8 
cmd
, u8 
vÆ
);

112 
dcs_£nd_l⁄g_∑ckë
(
u8
 *
buf
, u8 
Àn
);

113 
u8
 
dcs_£nd_l⁄g_∑ckë_bè
(u8 *
buf
, u8 
Àn
);

114 
u8
 
dcs_ªcv_sh‹t_p0_bè
(u8 
cmd
);

115 
u8
 
dcs_ªad_∑rm
(u8 
cmd
, u8 *
buf
, u8 
Àn
);

117 
gíîic_£t_max_∑ckë_size
(
u8
 
size
);

118 
gíîic_£nd_sh‹t_p1
(
u8
 
cmd
);

119 
u8
 
gíîic_£nd_sh‹t_p1_bè
(u8 
cmd
);

120 
gíîic_£nd_sh‹t_p2
(
u8
 
cmd
, u8 
vÆ
);

121 
u8
 
gíîic_£nd_sh‹t_p2_bè
(u8 
cmd
, u8 
vÆ
);

122 
gíîic_£nd_l⁄g_∑ckë
(
u8
 *
buf
, u8 
Àn
);

123 
u8
 
gíîic_£nd_l⁄g_∑ckë_bè
(u8 *
buf
, u8 
Àn
);

124 
u8
 
gíîic_ªcv_sh‹t_p1_bè
(u8 
cmd
);

125 
u8
 
gíîic_ªad_∑rm
(u8 
cmd
, u8 *
buf
, u8 
Àn
);

127 
dcs_£t_debug
(
u8
 
⁄off
);

128 
dsi_video_kick°¨t
();

129 
dsi_dev_öô
(
mùi_dev
 *
dev_t
);

131 
dñay_2ms
(
u32
 
˙t
);

132 
	#dñay_10us
(
t
)

133 
	#dñay_10ms
(
t
Ë
	`dñay_2ms
(5*t)

	)

	@include_lib/system/cpu/AC521x/asm/gpio.h

1 #i‚de‡
ASM_PORT_IO_H


2 
	#ASM_PORT_IO_H


	)

5 
	#IO_GROUP_NUM
 16

	)

7 
	#IO_PORTA_BASE
 (
ls_io_ba£
 + 0x00*4)

	)

9 
	#IO_PORTA_00
 (
IO_GROUP_NUM
 * 0 + 0)

	)

10 
	#IO_PORTA_01
 (
IO_GROUP_NUM
 * 0 + 1)

	)

11 
	#IO_PORTA_02
 (
IO_GROUP_NUM
 * 0 + 2)

	)

12 
	#IO_PORTA_03
 (
IO_GROUP_NUM
 * 0 + 3)

	)

13 
	#IO_PORTA_04
 (
IO_GROUP_NUM
 * 0 + 4)

	)

14 
	#IO_PORTA_05
 (
IO_GROUP_NUM
 * 0 + 5)

	)

15 
	#IO_PORTA_06
 (
IO_GROUP_NUM
 * 0 + 6)

	)

16 
	#IO_PORTA_07
 (
IO_GROUP_NUM
 * 0 + 7)

	)

17 
	#IO_PORTA_08
 (
IO_GROUP_NUM
 * 0 + 8)

	)

18 
	#IO_PORTA_09
 (
IO_GROUP_NUM
 * 0 + 9)

	)

19 
	#IO_PORTA_10
 (
IO_GROUP_NUM
 * 0 + 10)

	)

20 
	#IO_PORTA_11
 (
IO_GROUP_NUM
 * 0 + 11)

	)

21 
	#IO_PORTA_12
 (
IO_GROUP_NUM
 * 0 + 12)

	)

22 
	#IO_PORTA_13
 (
IO_GROUP_NUM
 * 0 + 13)

	)

23 
	#IO_PORTA_14
 (
IO_GROUP_NUM
 * 0 + 14)

	)

24 
	#IO_PORTA_15
 (
IO_GROUP_NUM
 * 0 + 15)

	)

26 
	#IO_PORTB_00
 (
IO_GROUP_NUM
 * 1 + 0)

	)

27 
	#IO_PORTB_01
 (
IO_GROUP_NUM
 * 1 + 1)

	)

28 
	#IO_PORTB_02
 (
IO_GROUP_NUM
 * 1 + 2)

	)

29 
	#IO_PORTB_03
 (
IO_GROUP_NUM
 * 1 + 3)

	)

30 
	#IO_PORTB_04
 (
IO_GROUP_NUM
 * 1 + 4)

	)

31 
	#IO_PORTB_05
 (
IO_GROUP_NUM
 * 1 + 5)

	)

32 
	#IO_PORTB_06
 (
IO_GROUP_NUM
 * 1 + 6)

	)

33 
	#IO_PORTB_07
 (
IO_GROUP_NUM
 * 1 + 7)

	)

34 
	#IO_PORTB_08
 (
IO_GROUP_NUM
 * 1 + 8)

	)

35 
	#IO_PORTB_09
 (
IO_GROUP_NUM
 * 1 + 9)

	)

36 
	#IO_PORTB_10
 (
IO_GROUP_NUM
 * 1 + 10)

	)

37 
	#IO_PORTB_11
 (
IO_GROUP_NUM
 * 1 + 11)

	)

38 
	#IO_PORTB_12
 (
IO_GROUP_NUM
 * 1 + 12)

	)

39 
	#IO_PORTB_13
 (
IO_GROUP_NUM
 * 1 + 13)

	)

40 
	#IO_PORTB_14
 (
IO_GROUP_NUM
 * 1 + 14)

	)

41 
	#IO_PORTB_15
 (
IO_GROUP_NUM
 * 1 + 15)

	)

43 
	#IO_PORTC_00
 (
IO_GROUP_NUM
 * 2 + 0)

	)

44 
	#IO_PORTC_01
 (
IO_GROUP_NUM
 * 2 + 1)

	)

45 
	#IO_PORTC_02
 (
IO_GROUP_NUM
 * 2 + 2)

	)

46 
	#IO_PORTC_03
 (
IO_GROUP_NUM
 * 2 + 3)

	)

47 
	#IO_PORTC_04
 (
IO_GROUP_NUM
 * 2 + 4)

	)

48 
	#IO_PORTC_05
 (
IO_GROUP_NUM
 * 2 + 5)

	)

49 
	#IO_PORTC_06
 (
IO_GROUP_NUM
 * 2 + 6)

	)

50 
	#IO_PORTC_07
 (
IO_GROUP_NUM
 * 2 + 7)

	)

51 
	#IO_PORTC_08
 (
IO_GROUP_NUM
 * 2 + 8)

	)

52 
	#IO_PORTC_09
 (
IO_GROUP_NUM
 * 2 + 9)

	)

53 
	#IO_PORTC_10
 (
IO_GROUP_NUM
 * 2 + 10)

	)

54 
	#IO_PORTC_11
 (
IO_GROUP_NUM
 * 2 + 11)

	)

55 
	#IO_PORTC_12
 (
IO_GROUP_NUM
 * 2 + 12)

	)

56 
	#IO_PORTC_13
 (
IO_GROUP_NUM
 * 2 + 13)

	)

57 
	#IO_PORTC_14
 (
IO_GROUP_NUM
 * 2 + 14)

	)

58 
	#IO_PORTC_15
 (
IO_GROUP_NUM
 * 2 + 15)

	)

60 
	#IO_PORTD_00
 (
IO_GROUP_NUM
 * 3 + 0)

	)

61 
	#IO_PORTD_01
 (
IO_GROUP_NUM
 * 3 + 1)

	)

62 
	#IO_PORTD_02
 (
IO_GROUP_NUM
 * 3 + 2)

	)

63 
	#IO_PORTD_03
 (
IO_GROUP_NUM
 * 3 + 3)

	)

64 
	#IO_PORTD_04
 (
IO_GROUP_NUM
 * 3 + 4)

	)

65 
	#IO_PORTD_05
 (
IO_GROUP_NUM
 * 3 + 5)

	)

66 
	#IO_PORTD_06
 (
IO_GROUP_NUM
 * 3 + 6)

	)

67 
	#IO_PORTD_07
 (
IO_GROUP_NUM
 * 3 + 7)

	)

68 
	#IO_PORTD_08
 (
IO_GROUP_NUM
 * 3 + 8)

	)

69 
	#IO_PORTD_09
 (
IO_GROUP_NUM
 * 3 + 9)

	)

70 
	#IO_PORTD_10
 (
IO_GROUP_NUM
 * 3 + 10)

	)

71 
	#IO_PORTD_11
 (
IO_GROUP_NUM
 * 3 + 11)

	)

72 
	#IO_PORTD_12
 (
IO_GROUP_NUM
 * 3 + 12)

	)

73 
	#IO_PORTD_13
 (
IO_GROUP_NUM
 * 3 + 13)

	)

74 
	#IO_PORTD_14
 (
IO_GROUP_NUM
 * 3 + 14)

	)

75 
	#IO_PORTD_15
 (
IO_GROUP_NUM
 * 3 + 15)

	)

78 
	#IO_PORTE_00
 (
IO_GROUP_NUM
 * 4 + 0)

	)

79 
	#IO_PORTE_01
 (
IO_GROUP_NUM
 * 4 + 1)

	)

80 
	#IO_PORTE_02
 (
IO_GROUP_NUM
 * 4 + 2)

	)

81 
	#IO_PORTE_03
 (
IO_GROUP_NUM
 * 4 + 3)

	)

82 
	#IO_PORTE_04
 (
IO_GROUP_NUM
 * 4 + 4)

	)

83 
	#IO_PORTE_05
 (
IO_GROUP_NUM
 * 4 + 5)

	)

84 
	#IO_PORTE_06
 (
IO_GROUP_NUM
 * 4 + 6)

	)

85 
	#IO_PORTE_07
 (
IO_GROUP_NUM
 * 4 + 7)

	)

86 
	#IO_PORTE_08
 (
IO_GROUP_NUM
 * 4 + 8)

	)

87 
	#IO_PORTE_09
 (
IO_GROUP_NUM
 * 4 + 9)

	)

88 
	#IO_PORTE_10
 (
IO_GROUP_NUM
 * 4 + 10)

	)

89 
	#IO_PORTE_11
 (
IO_GROUP_NUM
 * 4 + 11)

	)

90 
	#IO_PORTE_12
 (
IO_GROUP_NUM
 * 4 + 12)

	)

91 
	#IO_PORTE_13
 (
IO_GROUP_NUM
 * 4 + 13)

	)

92 
	#IO_PORTE_14
 (
IO_GROUP_NUM
 * 4 + 14)

	)

93 
	#IO_PORTE_15
 (
IO_GROUP_NUM
 * 4 + 15)

	)

96 
	#IO_PORTF_00
 (
IO_GROUP_NUM
 * 5 + 0)

	)

97 
	#IO_PORTF_01
 (
IO_GROUP_NUM
 * 5 + 1)

	)

98 
	#IO_PORTF_02
 (
IO_GROUP_NUM
 * 5 + 2)

	)

99 
	#IO_PORTF_03
 (
IO_GROUP_NUM
 * 5 + 3)

	)

100 
	#IO_PORTF_04
 (
IO_GROUP_NUM
 * 5 + 4)

	)

101 
	#IO_PORTF_05
 (
IO_GROUP_NUM
 * 5 + 5)

	)

102 
	#IO_PORTF_06
 (
IO_GROUP_NUM
 * 5 + 6)

	)

103 
	#IO_PORTF_07
 (
IO_GROUP_NUM
 * 5 + 7)

	)

104 
	#IO_PORTF_08
 (
IO_GROUP_NUM
 * 5 + 8)

	)

105 
	#IO_PORTF_09
 (
IO_GROUP_NUM
 * 5 + 9)

	)

106 
	#IO_PORTF_10
 (
IO_GROUP_NUM
 * 5 + 10)

	)

107 
	#IO_PORTF_11
 (
IO_GROUP_NUM
 * 5 + 11)

	)

108 
	#IO_PORTF_12
 (
IO_GROUP_NUM
 * 5 + 12)

	)

109 
	#IO_PORTF_13
 (
IO_GROUP_NUM
 * 5 + 13)

	)

110 
	#IO_PORTF_14
 (
IO_GROUP_NUM
 * 5 + 14)

	)

111 
	#IO_PORTF_15
 (
IO_GROUP_NUM
 * 5 + 15)

	)

114 
	#IO_PORTG_00
 (
IO_GROUP_NUM
 * 6 + 0)

	)

115 
	#IO_PORTG_01
 (
IO_GROUP_NUM
 * 6 + 1)

	)

116 
	#IO_PORTG_02
 (
IO_GROUP_NUM
 * 6 + 2)

	)

117 
	#IO_PORTG_03
 (
IO_GROUP_NUM
 * 6 + 3)

	)

118 
	#IO_PORTG_04
 (
IO_GROUP_NUM
 * 6 + 4)

	)

119 
	#IO_PORTG_05
 (
IO_GROUP_NUM
 * 6 + 5)

	)

120 
	#IO_PORTG_06
 (
IO_GROUP_NUM
 * 6 + 6)

	)

121 
	#IO_PORTG_07
 (
IO_GROUP_NUM
 * 6 + 7)

	)

122 
	#IO_PORTG_08
 (
IO_GROUP_NUM
 * 6 + 8)

	)

123 
	#IO_PORTG_09
 (
IO_GROUP_NUM
 * 6 + 9)

	)

124 
	#IO_PORTG_10
 (
IO_GROUP_NUM
 * 6 + 10)

	)

125 
	#IO_PORTG_11
 (
IO_GROUP_NUM
 * 6 + 11)

	)

126 
	#IO_PORTG_12
 (
IO_GROUP_NUM
 * 6 + 12)

	)

127 
	#IO_PORTG_13
 (
IO_GROUP_NUM
 * 6 + 13)

	)

128 
	#IO_PORTG_14
 (
IO_GROUP_NUM
 * 6 + 14)

	)

129 
	#IO_PORTG_15
 (
IO_GROUP_NUM
 * 6 + 15)

	)

133 
	#IO_PORTH_00
 (
IO_GROUP_NUM
 * 7 + 0)

	)

134 
	#IO_PORTH_01
 (
IO_GROUP_NUM
 * 7 + 1)

	)

135 
	#IO_PORTH_02
 (
IO_GROUP_NUM
 * 7 + 2)

	)

136 
	#IO_PORTH_03
 (
IO_GROUP_NUM
 * 7 + 3)

	)

137 
	#IO_PORTH_04
 (
IO_GROUP_NUM
 * 7 + 4)

	)

138 
	#IO_PORTH_05
 (
IO_GROUP_NUM
 * 7 + 5)

	)

139 
	#IO_PORTH_06
 (
IO_GROUP_NUM
 * 7 + 6)

	)

140 
	#IO_PORTH_07
 (
IO_GROUP_NUM
 * 7 + 7)

	)

141 
	#IO_PORTH_08
 (
IO_GROUP_NUM
 * 7 + 8)

	)

142 
	#IO_PORTH_09
 (
IO_GROUP_NUM
 * 7 + 9)

	)

143 
	#IO_PORTH_10
 (
IO_GROUP_NUM
 * 7 + 10)

	)

144 
	#IO_PORTH_11
 (
IO_GROUP_NUM
 * 7 + 11)

	)

145 
	#IO_PORTH_12
 (
IO_GROUP_NUM
 * 7 + 12)

	)

146 
	#IO_PORTH_13
 (
IO_GROUP_NUM
 * 7 + 13)

	)

147 
	#IO_PORTH_14
 (
IO_GROUP_NUM
 * 7 + 14)

	)

148 
	#IO_PORTH_15
 (
IO_GROUP_NUM
 * 7 + 15)

	)

152 
	#IO_PORTI_00
 (
IO_GROUP_NUM
 * 8 + 0)

	)

153 
	#IO_PORTI_01
 (
IO_GROUP_NUM
 * 8 + 1)

	)

154 
	#IO_PORTI_02
 (
IO_GROUP_NUM
 * 8 + 2)

	)

155 
	#IO_PORTI_03
 (
IO_GROUP_NUM
 * 8 + 3)

	)

156 
	#IO_PORTI_04
 (
IO_GROUP_NUM
 * 8 + 4)

	)

157 
	#IO_PORTI_05
 (
IO_GROUP_NUM
 * 8 + 5)

	)

158 
	#IO_PORTI_06
 (
IO_GROUP_NUM
 * 8 + 6)

	)

159 
	#IO_PORTI_07
 (
IO_GROUP_NUM
 * 8 + 7)

	)

160 
	#IO_PORTI_08
 (
IO_GROUP_NUM
 * 8 + 8)

	)

161 
	#IO_PORTI_09
 (
IO_GROUP_NUM
 * 8 + 9)

	)

162 
	#IO_PORTI_10
 (
IO_GROUP_NUM
 * 8 + 10)

	)

163 
	#IO_PORTI_11
 (
IO_GROUP_NUM
 * 8 + 11)

	)

164 
	#IO_PORTI_12
 (
IO_GROUP_NUM
 * 8 + 12)

	)

165 
	#IO_PORTI_13
 (
IO_GROUP_NUM
 * 8 + 13)

	)

166 
	#IO_PORTI_14
 (
IO_GROUP_NUM
 * 8 + 14)

	)

167 
	#IO_PORTI_15
 (
IO_GROUP_NUM
 * 8 + 15)

	)

171 
	#IO_MAX_NUM
 (
IO_PORTI_15
+1)

	)

174 
	#IO_PORT_PR_00
 (
IO_MAX_NUM
 + 0)

	)

175 
	#IO_PORT_PR_01
 (
IO_MAX_NUM
 + 1)

	)

176 
	#IO_PORT_PR_02
 (
IO_MAX_NUM
 + 2)

	)

177 
	#IO_PORT_PR_03
 (
IO_MAX_NUM
 + 3)

	)

182 
	sgpio_ªg
 {

183 vﬁ©ûê
	mout
;

184 vﬁ©ûê
	mö
;

185 vﬁ©ûê
	mdú
;

186 vﬁ©ûê
	mdõ
;

187 vﬁ©ûê
	mpu
;

188 vﬁ©ûê
	mpd
;

189 vﬁ©ûê
	mhd
;

192 
	sgpio_∂©f‹m_d©a
 {

193 
	mgpio
;

196 
	#GPIO_PLATFORM_DATA_BEGIN
(
d©a
) \

197 c⁄° 
gpio_∂©f‹m_d©a
 
d©a
 = { \

198 

	)

200 
	#GPIO_PLATFORM_DATA_END
() \

201 };

	)

	@include_lib/system/cpu/AC521x/asm/hwi.h

18 #i‚de‡
ASM_HWI_H


19 
	#ASM_HWI_H


	)

21 
	~"ty≥def.h
"

23 
	#EXCEP_INT
 0

	)

24 
	#C0_TTIMER_INT
 8

	)

25 
	#C1_TTIMER_INT
 9

	)

26 
	#TIME0_INT
 10

	)

27 
	#TIME1_INT
 11

	)

28 
	#TIME2_INT
 12

	)

29 
	#TIME3_INT
 13

	)

30 
	#TIME4_INT
 14

	)

31 
	#SPI0_INT
 16

	)

32 
	#SPI1_INT
 17

	)

33 
	#SPI2_INT
 18

	)

34 
	#SD0_INT
 20

	)

35 
	#SD1_INT
 21

	)

36 
	#SD2_INT
 22

	)

37 
	#UART0_INT
 24

	)

38 
	#UART1_INT
 25

	)

39 
	#UART2_INT
 26

	)

40 
	#UART3_INT
 27

	)

41 
	#IIC0_INT
 30

	)

42 
	#IIC1_INT
 31

	)

43 
	#IOPROT_INT
 32

	)

44 
	#PAP_INT
 33

	)

45 
	#DMA_COPY_INT
 34

	)

46 
	#AUDIO_INT
 35

	)

47 
	#SARADC_INT
 36

	)

48 
	#LVD_INT
 40

	)

49 
	#WATCHDOG_INT
 41

	)

50 
	#OSA_INT
 42

	)

51 
	#RTC_INT
 43

	)

52 
	#HUSB_SOF_INT
 50

	)

53 
	#HUSB_CTL_INT
 51

	)

54 
	#HUSB_SOF
 50

	)

55 
	#HUSB_CTL
 51

	)

56 
	#MTPMW_INT
 56

	)

57 
	#ETH_INT
 60

	)

58 
	#JPG0_INT
 64

	)

59 
	#JPG1_INT
 65

	)

60 
	#ISC_INT
 66

	)

61 
	#ISP0_INT
 67

	)

62 
	#ISP1_INT
 68

	)

63 
	#IMC_INT
 69

	)

64 
	#IMB_INT
 70

	)

65 
	#IMD_INT
 71

	)

66 
	#CSI_INT
 72

	)

67 
	#DSI_INT
 73

	)

68 
	#IMR_INT
 74

	)

70 
	#JLMD_INT
 75

	)

72 
	#ISR_ENTRY
 0x0f13c00

	)

74 
sfc_£t_u√nc_addr_ønge
(
u32
 
low_addr
, u32 
high_addr
);

75 
bô_˛r_õ
(
ödex
);

76 
bô_£t_õ
(
ödex
);

77 
ªg_£t_ù
(
ödex
, 
d©
);

78 
ªque°_úq
(
ödex
, 
¥i‹ôy
, (*
h™dÀr
)(), 
˝u_id
);

79 
boﬁ
 
	`check_≥ndög
(
u32
 
ödex
);

80 
	`öãºu±_öô
() ;

81 
u8
 
	`£t_˝u1_íãr_addr
((*
fun
)());

89 #ifde‡
IRQ_TIME_COUNT_EN


90 
	`úq_h™dÀr_íãr
(
úq
);

92 
	`úq_h™dÀr_exô
(
úq
);

94 
	`úq_h™dÀr_times_dump
();

97 
	#úq_h™dÀr_íãr
(
úq
Ëdÿ{ 
	}

	`}whûe
(0)

	)

98 
	#úq_h™dÀr_exô
(
úq
Ëdÿ{ }0)

	)

99 
	#úq_h™dÀr_times_dump
(Ëdÿ{ }0)

	)

	@include_lib/system/cpu/AC521x/asm/iic.h

16 #i‚de‡
ASM_IIC_H


17 
	#ASM_IIC_H


	)

19 
	~"ty≥def.h
"

20 
	~"asm/˝u.h
"

21 
	~"devi˚/iic.h
"

25 
	#IIC_OUTPORT_NUM
 4

	)

28 
	siic_ªg
 {

29 vﬁ©ûê
u16
 
	mc⁄
;

30 vﬁ©ûê
u16
 
	mrvs0
;

31 vﬁ©ûê
u8
 
	mbuf
;

32 vﬁ©ûê
u8
 
	mrvs1
[3];

33 vﬁ©ûê
u8
 
	mbaud
;

34 vﬁ©ûê
u8
 
	mrvs2
[3];

35 vﬁ©ûê
u32
 
	mdma_adr
;

36 vﬁ©ûê
u16
 
	mdma_˙t
;

37 vﬁ©ûê
u16
 
	mrvs3
;

38 vﬁ©ûê
u8
 
	mdma_ƒ©e
;

39 vﬁ©ûê
u8
 
	mrvs4
[3];

42 
	siic_ouç‹t
 {

43 
u8
 
	m˛k_pö
;

44 
u8
 
	md©_pö
;

45 
u32
 
	mvÆue
;

49 
	sh¨dw¨e_iic
 {

50 
u8
 
	m˛k_pö
;

51 
u8
 
	md©_pö
;

52 
u32
 
	mbaudøã
;

53 
u32
 
	moccupy_ªg
;

54 
u32
 
	moccupy_io_mask
;

55 
u32
 
	moccupy_io_vÆue
;

56 
iic_ªg
 *
	mªg
;

57 
iic_ouç‹t
 
	mouç‹t_m≠
[
IIC_OUTPORT_NUM
];

60 
	#iic_≤d
(
iic
Ë(iic->
ªg
->
c⁄
 & 
	`BIT
(15))

	)

61 
	#iic_˛r_≤d
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(13)

62 
	#iic_ack_ö
(
iic
Ë(iic->
ªg
->
c⁄
 & 
	`BIT
(11))

	)

63 
	#iic_pu_ack_out
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(10)

	)

64 
	#iic_pd_ack_out
(
iic
Ëiic->
ªg
->
c⁄
 &~
	`BIT
(10)

	)

65 
	#iic_˛r_°¨t
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(8)

66 

	)

68 
	#iic_˛r_°›
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(12)

69 
	#iic_add_°¨t_bô
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(2)

70 
	#iic_add_íd_bô
(
iic
Ëiic->
ªg
->
c⁄
 |
	`BIT
(3)

71 
	#iic_£t_ack
(
iic
Ëiic->
ªg
->
c⁄
 &~
	`BIT
(10)

	)

74 
	shw_iic_∂©f‹m_d©a
 {

75 
iic_∂©f‹m_d©a
 
	mhód
;

76 
h¨dw¨e_iic
 
	miic
;

80 
	#HW_IIC0_PLATFORM_DATA_BEGIN
(
d©a0
) \

81 c⁄° 
hw_iic_∂©f‹m_d©a
 
d©a0
 = { \

82 .
hód
 = { \

83 .
ty≥
 = 
IIC_TYPE_HW
, \

85 .
iic
 = {

	)

89 
	#HW_IIC0_PLATFORM_DATA_END
() \

90 .
occupy_ªg
 = (
u32
)&
IOMC1
, \

91 .
occupy_io_mask
 = ~(
	`BIT
(6)|BIT(7)), \

92 .
ªg
 = (
iic_ªg
 *)&
IIC_CON
, \

93 .
ouç‹t_m≠
 = { \

94 {
IO_PORTD_01
, 
IO_PORTD_02
, 0}, \

95 {
IO_PORTA_06
, 
IO_PORTA_08
, 
	`BIT
(6)}, \

96 {
IO_PORTA_01
, 
IO_PORTA_02
, 
	`BIT
(7)}, \

97 {
IO_PORTH_00
, 
IO_PORTH_01
, (
	`BIT
(6) | BIT(7))}, \

100 };

	)

104 
	#HW_IIC1_PLATFORM_DATA_BEGIN
(
d©a1
) \

105 c⁄° 
hw_iic_∂©f‹m_d©a
 
d©a1
 = { \

106 .
hód
 = { \

107 .
ty≥
 = 
IIC_TYPE_HW
, \

109 .
iic
 = {

	)

113 
	#HW_IIC1_PLATFORM_DATA_END
() \

114 .
occupy_ªg
 = (
u32
)&
IOMC3
, \

115 .
occupy_io_mask
 = ~(
	`BIT
(18)|BIT(19)), \

116 .
ªg
 = (
iic_ªg
 *)&
IIC1_CON
, \

117 .
ouç‹t_m≠
 = { \

118 {
IO_PORTB_00
, 
IO_PORTB_01
, 0}, \

119 {
IO_PORTA_02
, 
IO_PORTA_01
, 
	`BIT
(18)}, \

120 {
IO_PORTE_02
, 
IO_PORTE_03
, 
	`BIT
(19)}, \

121 {
IO_PORTE_04
, 
IO_PORTE_05
, (
	`BIT
(18) | BIT(19))}, \

124 };

	)

	@include_lib/system/cpu/AC521x/asm/image_enc.h

1 #i‚de‡
_IMAGE_ENC_H_


2 
	#_IMAGE_ENC_H_


	)

3 
	~"devi˚/video.h
"

4 
	~"asm/j≥g_codec.h
"

29 
	simage_íc_s_©å
 {

30 
u16
 
	mwidth
;

31 
u16
 
	mheight
;

32 
u8
 *
	mbuf
;

33 
u16
 
	m§c_width
;

34 
u16
 
	m§c_height
;

35 
u8
 *
	m§c_addr
;

36 
u32
 
	m§c_size
;

40 *
image_íc_›í
(
video_f‹m©
 *
f
, 
u8
 
mu…i_sˇÀ
);

41 *
image_íc_f‹˚_›í
(
video_f‹m©
 *
f
, 
u8
 
mu…i_sˇÀ
, 
id
);

42 
image_íc_£t_fmt
(*
_fh
, 
video_f‹m©
 *
f
, 
u8
 
mu…i_sˇÀ
);

43 
image_h™dl2ch
(*
_fh
);

44 
image_íc_£t_sˇÀ_h™dÀr
(*
_fh
, *
¥iv
, (*
h™dÀr
)(*, 
image_sˇÀ_d©a
 *));

45 
	`image_íc_gë_s_©å
(*
_fh
, 
image_s_©å
 *
©å
);

46 
	`image_íc_£t_s_©å
(*
_fh
, 
image_s_©å
 *
©å
);

47 
	`image_ˇ±uª_íc_°¨t
(*
_fh
, 
image_ˇ±uª_öfo
 *
öfo
);

49 
boﬁ
 
	`image_íc_Ÿhî_°ªam⁄
(*
_fh
);

50 
	`image_íc_∑u£_Ÿhî_°ªam
(*
_fh
);

51 
	`image_íc_ªsume_Ÿhî_°ªam
(*
_fh
);

52 
	`image_íc_£t_sˇÀ_mode
(*
_fh
, 
u8
 
mode
);

53 
	`image_íc_gë_sour˚_©å
(*
_fh
, 
yuv_image
 *
image
);

54 
	`image_íc_£t_sour˚_©å
(*
_fh
, 
yuv_image
 *
image
);

55 
	`image_íc_£t_öput_buf
(*
_fh
, 
video_ˇp_buf„r
 *
b
);

56 
	`image_íc_£t_ouçut_buf_›s
(*
_fh
, *
¥iv
, c⁄° 
mjpg_u£r_›s
 *
›s
);

57 
	`image_íc_gë_osd_©å
(*
_fh
, 
video_osd_©å
 *
©å
);

58 
	`image_íc_£t_osd_©å
(*
_fh
, 
video_osd_©å
 *
©å
);

59 
	`image_íc_˛o£
(*
_fh
);

	@include_lib/system/cpu/AC521x/asm/imb.h

1 #i‚de‡
__IMB_H__


2 
	#__IMB_H__


	)

4 
	~"ty≥def.h
"

6 
	#IMB_YUV420
 0

	)

7 
	#IMB_YUV422
 1

	)

9 
	simb_image_yuv_d©a
 {

10 
u8
 
	mfmt
;

11 
u8
 *
	my
;

12 
u8
 *
	mu
;

13 
u8
 *
	mv
;

16 
	simb_°ick_d©a
 {

17 
u16
 
	mwidth
;

18 
u16
 
	mheight
;

19 
imb_image_yuv_d©a
 
	mba£_image
;

20 
imb_image_yuv_d©a
 
	m°ickî
;

21 
imb_image_yuv_d©a
 
	mimage
;

24 
imb_öô
();

25 
imb_°ick_image
(
imb_°ick_d©a
 *
d©a
);

26 
imb_°ick_›í
(
imb_°ick_d©a
 *
d©a
);

27 
imb_°ick_°¨t
(
u8
 *
y
, u8 *
u
, u8 *
v
, 
u16
 
height
);

28 
imb_°ick_˛o£
();

	@include_lib/system/cpu/AC521x/asm/imb_driver.h

1 #i‚de‡
IMB_DRIVER_H


2 
	#IMB_DRIVER_H


	)

4 
	~"video/fb.h
"

5 
	~"ty≥def.h
"

6 
	~"asm/imd.h
"

10 
	#IMAGE_COLOR_WHITE
 0xeb8080

	)

11 
	#IMAGE_COLOR_RED
 0x515´f

	)

12 
	#IMAGE_COLOR_GREEN
 0x903522

	)

13 
	#IMAGE_COLOR_BLUE
 0x28ef6d

	)

14 
	#IMAGE_COLOR_YELLOW
 0xd21092

	)

15 
	#IMAGE_COLOR_PURPLE
 0x6aˇdd

	)

16 
	#IMAGE_COLOR_CYAN
 0xa9a510

	)

17 
	#IMAGE_COLOR_BLACK
 0x108080

	)

19 
	eLAYER_ERROR_CODE
 {

20 
	mERROR_NONE
,

21 
	mERROR_FORMAT
,

22 
	mERROR_OPENED
,

23 
	mERROR_NONSPEC
,

24 
	mERROR_SPEC_OPENED
,

28 
	mLAYER_STA_CLOSED
,

29 
	mLAYER_STA_READY
,

30 
	mLAYER_STA_OPENED
,

31 
	mLAYER_STA_PAUSE
 = 0x10,

47 
	slcd_s¸ìn_öfo
 {

48 
u16
 
	mxoff£t
;

49 
u16
 
	myoff£t
;

50 
u16
 
	mxªs
;

51 
u16
 
	myªs
;

52 
u8
 
	mrŸ©e
;

55 
	sfb_∂©f‹m_d©a
 {

56 
u8
 
	mz_‹dî
[8];

59 
	#RATIO
(
r
Ë(‘==
FB_COLOR_FORMAT_YUV420
)?12:\

60 ((
r
==
FB_COLOR_FORMAT_YUV422
)?16:\

61 ((
r
==
FB_COLOR_FORMAT_RGB888
)?24:\

62 ((
r
==
FB_COLOR_FORMAT_RGB565
)?16:\

63 ((
r
==
FB_COLOR_FORMAT_16K
)?16:\

64 ((
r
==
FB_COLOR_FORMAT_256
)?8:\

65 ((
r
==
FB_COLOR_FORMAT_2BIT
)?2:\

66 ((
r
==
FB_COLOR_FORMAT_1BIT
)?1:0))))))))

	)

	@include_lib/system/cpu/AC521x/asm/imc.h

1 #i‚de‡
__IMC_H__


2 
	#__IMC_H__


	)

7 
	#IMC_CMD_BASE
 0x00100000

	)

8 
	#IMC_OPEN_OSD
 (
IMC_CMD_BASE
 + 1)

	)

9 
	#IMC_CLOSE_OSD
 (
IMC_CMD_BASE
 + 2)

	)

10 
	#IMC_SET_TLP_TIME
 (
IMC_CMD_BASE
 + 3)

	)

11 
	#IMC_SET_DISP_PRESCA
 (
IMC_CMD_BASE
 + 4)

	)

12 
	#IMC_SET_CROP
 (
IMC_CMD_BASE
 + 5)

	)

13 
	#IMC_CROP_TRIG
 (
IMC_CMD_BASE
 + 6)

	)

14 
	#IMC_ICAP_OPEN_OSD
 (
IMC_CMD_BASE
 + 7)

	)

15 
	#IMC_SET_OSD_STR
 (
IMC_CMD_BASE
 + 8)

	)

16 
	#IMC_ENC_REP_CTRL
 (
IMC_CMD_BASE
 + 9)

	)

17 
	#IMC_KEEP_ENCODE_OSD
 (
IMC_CMD_BASE
 + 10)

	)

18 
	#IMC_RESET_TLP_TIME
 (
IMC_CMD_BASE
 + 11)

	)

21 
	sosd_ic⁄_c⁄fig
 {

22 
u32
 
	mcﬁ‹
[3];

23 
u16
 
	mwidth
;

24 
u16
 
	mheight
;

25 
u8
 *
	mbuf
;

26 
	mbuf_size
;

29 
	simc_osd_öfo
 {

30 
u8
 
	mmode
;

31 
u16
 
	mx
 ;

32 
u16
 
	my
 ;

33 
u32
 
	mosd_yuv
;

35 
osd_ic⁄_c⁄fig
 
	mic⁄
;

37 *
	mosd_°r
;

38 *
	mosd_m©rix_°r
;

39 
u8
 *
	mosd_m©rix_ba£
;

40 
u32
 
	mosd_m©rix_Àn
;

41 
u8
 
	mosd_w
;

42 
u8
 
	mosd_h
;

43 
imc_osd_öfo
 *
	m√xt
;

47 
	simc_iˇp_osd_öfo
 {

48 
u16
 
	mwidth
;

49 
u16
 
	mheight
;

50 
imc_osd_öfo
 *
	mosd
;

53 
	simc_¥esˇ_˘l
 {

54 
u8
 
	m¥esˇ_í
;

55 
u32
 
	mgs_∑rma
;

56 
u32
 
	mgs_∑rmb
;

57 
u32
 
	mgs_∑rmc
;

58 
u32
 
	mgs_∑rmd
;

61 
	sdr›_Âs
 {

62 
u32
 
	mÂs_a
;

63 
u32
 
	mÂs_b
;

	@include_lib/system/cpu/AC521x/asm/imc_driver.h

1 #i‚de‡
IMC_DRIVER_H


2 
	#IMC_DRIVER_H


	)

6 
	~"ty≥def.h
"

7 
	~"sy°em/ö˛udes.h
"

12 
	#IMC_ENC_CH_NUM
 2

	)

13 
	#IMC_DISP_CH_NUM
 2

	)

15 
	eimc_§c_ty≥
 {

16 
	mIMC_SRC0
 = 1,

17 
	mIMC_SRC1
 = 2,

18 
	mIMC_SRC_REP
 = 3,

23 
	eimc_i•_£l
 {

24 
	mIMC_SRC_SEL_ISP0
 = 1,

25 
	mIMC_SRC_SEL_ISP1
,

26 
	mIMC_SRC_SEL_MANUAL
,

30 
	eimc_yuv_mode
 {

31 
	mIMC_YUV420
 = 0,

32 
	mIMC_YUV422
,

35 
	eimc_axi_max_Àn
 {

36 
	mIMC_512B
 = 0,

37 
	mIMC_256B
,

40 
	eimc_evít
 {

41 
	mIMC_EVENT_ERR_IRQ
,

42 
	mIMC_EVENT_FRAME_IRQ
,

43 
	mIMC_EVENT_LINE_IRQ
,

44 
	mIMC_EVENT_PAUSE
,

45 
	mIMC_EVENT_RESUME
,

46 
	mIMC_EVENT_RESET
,

49 
	eimc_úq_mode_e
 {

50 
	mIMC_IRQ_M_DISABLE
,

51 
	mIMC_IRQ_M_16LINE
 = 0x1,

52 
	mIMC_IRQ_M_FRAME
 = 0x2,

61 
	eouçut_mode
 {

62 
	mIMC_ONE_FRAME_MODE
 = 0,

63 
	mIMC_DOUBLE_BUF_MODE
,

64 
	mIMC_CYCLE_BUF_MODE
,

67 
	svideo_sour˚_¸›
 {

68 
u16
 
	mx_off£t
;

69 
u16
 
	my_off£t
;

70 
u16
 
	mwidth
;

71 
u16
 
	mheight
;

74 
	simc_s_©å
 {

75 
imc_§c_ty≥
 
	m§c
;

76 
imc_i•_£l
 
	m§c_i•_£l
;

77 
u8
 
	mdown_smp
;

78 
u8
 
	mmode
;

79 
u8
 
	mˇmîa_ty≥
;

80 
u8
 
	mÂs
;

81 
u32
 
	mªÆ_Âs
;

82 
u16
 
	m§c_w
;

83 
u16
 
	m§c_h
;

84 
u16
 
	mwidth
;

85 
u16
 
	mheight
;

86 
u16
 
	mpixf‹m©
;

87 
u16
 
	mmax_i_width
;

88 
u16
 
	mmax_o_width
;

89 
imc_úq_mode_e
 
	múq_mode
;

93 
imc_öô
(c⁄° *
«me
, c⁄° 
video_∂©f‹m_d©a
 *
d©a
);

95 
imc_h™dl2ch
(*
_hdl
);

97 *
imc_íc_ch_›í
(
video_f‹m©
 *);

99 
imc_íc_£t_ouçut_buf
(*
fh
, 
video_ˇp_buf„r
 *
b
);

101 
imc_íc_£t_ouçut_moduÀ
(*
_fh
, 
ch
);

103 
imc_£t_evít_h™dÀr
(*
_fh
, *
¥iv
,

104 (*
h™dÀr
)(*, 
imc_evít
, 
video_ˇp_buf„r
 *));

106 
	`imc_íc_ª£t_buf„r
(*
_fh
);

107 
	`imc_íc_ª£t_down_buf„r
(*
_fh
);

108 
	`imc_íc_ª£t_up_buf„r
(*
_fh
);

110 
	`imc_íc_ch_°¨t
(*
_fh
);

111 
	`imc_íc_ch_°›
(*
_fh
);

113 
	`imc_íc_ch_˛o£
(*
_fh
);

115 
	simc_d_©å
 {

116 
u8
 
ouçut_Âs
;

119 
	`imc_£t_d_©å
(*
_fh
, 
imc_d_©å
 *
©å
);

121 
	`imc_gë_s_©å
(*
_fh
, 
imc_s_©å
 *
©å
);

122 
	`imc_£t_s_©å
(*
_fh
, 
imc_s_©å
 *
©å
);

124 
	`imc_íc_£t_ouçut_Âs
(*
_fh
, 
Âs
);

126 
	`imc_íc_gë_osd
(*
_fh
, 
video_ãxt_osd
 *
osd
);

127 
	`imc_íc_£t_osd
(*
_fh
, 
video_ãxt_osd
 *
osd
);

128 
	`imc_íc_£t_osd_íabÀ
(*
_fh
);

129 
	`imc_íc_£t_osd_dißbÀ
(*
_fh
);

130 
	`imc_íc_ch_∑u£
(*
_fh
);

131 
	`imc_íc_ch_ªsume
(*
_fh
, 
video_ˇp_buf„r
 *
b
);

132 
	`imc_íc_gë_osd_©å
(*
_fh
, 
video_osd_©å
 *
©å
);

133 
	`imc_íc_£t_osd_©å
(*
_fh
, 
video_osd_©å
 *
©å
);

135 
	`imc_íc_ch_gë_ˇ∑bûôy
(*
_fh
);

136 
	`imc_íc_ch_ˇ±uª_⁄e_‰ame
(*
_fh
, 
yuv_image
 *
image
);

137 
	`imc_íc_ch_image_ˇ±uª
(*
_fh
, 
video_image_ˇ±uª
 *
iˇp
);

138 
	`imc_íc_ch_°›_image_ˇp
(*
_fh
);

139 
	`imc_íc_image_sˇÀ
(*
_fh
, 
image_sˇÀ_d©a
 *
sˇÀ_d©a
);

140 
	`imc_gë_image_ãxt_osd
(*
_fh
, 
video_ãxt_osd
 *
ãxt_osd
);

141 
	`imc_íc_∑u£_image_osd
(*
_fh
);

142 
	`imc_íc_ªsume_image_osd
(*
_fh
);

151 
	`imc_dis_ch_max_width
();

152 
	simc_m™u_i_d©a
 {

153 
u8
 
ª°¨t_ch
;

154 
u8
 
¥oc_waô
;

155 
u8
 
po°_waô
;

156 
YUV_‰ame_d©a
 *
‰ame
;

159 *
	`imc_dis_ch_›í
(
video_f‹m©
 *);

161 
	`imc_gë_s_©å
(*, 
imc_s_©å
 *
©å
);

163 
	`imc_£t_s_©å
(*, 
imc_s_©å
 *
©å
);

165 
	`imc_dis_£t_ouçut_buf
(*
_fh
, 
u8
 *
yaddr
, u8 *
uaddr
, u8 *
vaddr
);

167 
	`imc_dis_£t_pögp⁄g_buf
(*
_fh
, 
fb_m≠_u£r
 *
m≠0
, fb_m≠_u£∏*
m≠1
);

169 
	`imc_dis_£t_ouçut_moduÀ
(*
_fh
, 
ch
);

171 
	`imc_dis_ch_öput_d©a
(*
_fh
, 
imc_m™u_i_d©a
 *
i_d©a
);

173 
	`imc_£t_úq_h™dÀr
(*
_fh
, *
¥iv
, (*
h™dÀr
)(*));

175 
	`imc_dis_ch_°¨t
(*
_fh
);

177 
	`imc_dis_ch_°›
(*
_fh
);

179 
	`imc_dis_ch_˛o£
(*
_ch
);

181 
	`imc_m™u_§c_öput_d©a
(*
_fh
, 
imc_m™u_i_d©a
 *
i_d©a
);

182 
	`imc_dis_ch_öput_d©a
(*
_fh
, 
imc_m™u_i_d©a
 *
i_d©a
);

	@include_lib/system/cpu/AC521x/asm/imd.h

1 #i‚de‡
__IMD_H__


2 
	#__IMD_H__


	)

4 
	~"ty≥def.h
"

5 
	~"video/fb.h
"

6 
	~"asm/imr.h
"

7 
	~"devi˚/devi˚.h
"

8 
	~"asm/p‹t_waked_up.h
"

9 
	~"os/os_≠i.h
"

11 
	#FBIOGET_IMR_DOUBLE_BUFFER0
 
	`_IOR
('A', 0, ())

	)

12 
	#FBIOGET_IMR_DOUBLE_BUFFER1
 
	`_IOR
('A', 1, ())

	)

13 
	#FBIOSET_SLIDER_WINDOW
 
	`_IOR
('A', 2, ())

	)

14 
	#FBIOGET_IMR_ROTATE_BUF
 
	`_IOR
('A', 3, ())

	)

15 
	#FBIOSET_IMR_MODE
 
	`_IOW
('A', 4, ())

	)

17 
	sœyî_©å
 {

24 
u8
 
	mimr_ödex
;

29 
	sfb_fh
 {

30 
fb_öfo
 
	mfb_öfo
;

31 
fb_m≠_u£r
 
	mm≠
;

32 
s8
 
	mªf_˙t
;

33 
OS_SEM
 
	m£m
;

34 
u8
 
	mbuf_num
;

35 
u8
 
	mbuf_°©e
;

36 
u8
 *
	mbuf_öu£d
;

37 
u8
 *
	mbuf_≥ndög
;

38 
u32
 
	mbuf_addr
[3];

39 
u32
 
	mbuf_size
;

40 *
	mimr
;

41 
imr_öfo
 
	mimr_öfo_t
;

42 
u8
 *
	mimr_buf0
;

43 
u8
 *
	mimr_buf1
;

47 
	mIMD_LAYER_OUTPUT_CAPTURE
,

48 
	mIMD_LAYER_OUTPUT_DISPLAY
,

51 c⁄° 
devi˚_›î©i⁄s
 
imd_dev_›s
;

52 c⁄° 
devi˚_›î©i⁄s
 
mùi_dev_›s
;

54 
	#œyî_f‹_fb_öfo
(
fb_öfo
) \

55 
	`c⁄èöî_of
(
fb_öfo
, 
imd_œyî
, 
fb
)

	)

58 
	#IMD_SET_COLOR_CFG
 
	`_IOW
('F', 0, ())

	)

59 
	#IMD_GET_COLOR_CFG
 
	`_IOR
('F', 0, ())

	)

60 
	#IMD_SET_COLOR_VALID
 
	`_IOW
('F', 1, ())

	)

61 
	#IMD_GET_COLOR_CFG_SIZE
 
	`_IOR
('F', 1, ())

	)

62 
	#IMD_SET_DEFAULT_COLOR_CFG
 
	`_IOW
('F', 2, ())

	)

63 
	#IMD_GET_FRAMERATE
 
	`_IOR
('F', 2, ())

	)

64 
	#IMD_SET_REFRESH_STATUS
 
	`_IOW
('F', 3, ())

	)

65 
	#IMD_GET_SCREEN_INFO
 
	`_IOR
('F', 3, ())

	)

68 
	#IMD_DMM_CLK_EN
 (
imd_lc_c⁄
 |
	`BIT
(0))

	)

69 
	#IMD_DMM_CLK_DIS
 (
imd_lc_c⁄
 &=~
	`BIT
(0))

	)

70 
	#IMD_DMM_RST_RELEASE
 (
imd_lc_c⁄
 |
	`BIT
(1))

	)

71 
	#IMD_DMM_RST
 (
imd_lc_c⁄
 &=~
	`BIT
(1))

	)

72 
	#IMD_AXI_LEN_256
 (
imd_lc_c⁄
 |
	`BIT
(2))

	)

73 
	#IMD_AXI_LEN_512
 (
imd_lc_c⁄
 &=~
	`BIT
(2))

	)

74 
	#IMD_INTERLACE_EN
 (
imd_lc_c⁄
 |
	`BIT
(3))

	)

75 
	#IMD_INTERLACE_DIS
 (
imd_lc_c⁄
 &=~
	`BIT
(3))

	)

76 
	#IMD_INTERLACE_ODD_STARTLINE1
 (
imd_lc_c⁄
 |
	`BIT
(4))

	)

77 
	#IMD_INTERLACE_ODD_STARTLINE0
 (
imd_lc_c⁄
 &=~
	`BIT
(4))

	)

80 
	#IMD_LCD_EN
 (
imd_dpi_c⁄
 |
	`BIT
(0))

	)

81 
	#IMD_LCD_DIS
 (
imd_dpi_c⁄
 &=~
	`BIT
(0))

	)

82 
	#IMD_LCD_KICKSTART
 (
imd_dpi_c⁄
 |
	`BIT
(1))

	)

83 
	#IMD_SINGLE_FRAME
 (
imd_dpi_c⁄
 |
	`BIT
(2))

	)

84 
	#IMD_CONTINUE_FRAME
 (
imd_dpi_c⁄
 &=~
	`BIT
(2))

	)

85 
	#IMD_LCD_IE_EN
 (
imd_dpi_c⁄
 |
	`BIT
(3))

	)

86 
	#IMD_LCD_IE_DIS
 (
imd_dpi_c⁄
 &=~
	`BIT
(3))

	)

87 
	#IMD_LCD_CLR_PND
 (
imd_dpi_c⁄
 |
	`BIT
(4))

	)

88 
	#IMD_LCD_PND
 (
imd_dpi_c⁄
 & 
	`BIT
(5))

	)

91 
	#DPI_MULTICYC_ONE
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x03<<0)))

	)

92 
	#DPI_MULTICYC_TWO
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x03<<0))|0x01)

	)

93 
	#DPI_MULTICYC_THREE
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x03<<0))|0x02)

	)

94 
	#DPI_MULTICYC_FOUR
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x03<<0))|0x03)

	)

95 
	#DPI_FMT_RGB333
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(2))

	)

96 
	#DPI_FMT_RGB666
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(3))

	)

97 
	#DPI_FMT_RGB888
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(4))

	)

98 
	#DPI_FMT_RGB565
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(5))

	)

99 
	#DPI_FMT_YUV888
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(6))

	)

100 
	#DPI_FMT_YUV422
 (
imd_dpi_fmt
 |(imd_dpi_fmà& ~(0x3f<<2))|
	`BIT
(7))

	)

101 
	#ITU656_EN
 (
imd_dpi_fmt
 |
	`BIT
(8))

	)

102 
	#ITU656_DIS
 (
imd_dpi_fmt
 &=~
	`BIT
(8))

	)

103 
	#INTERLACE_TIMING_EN
 (
imd_dpi_fmt
 |
	`BIT
(9))

	)

104 
	#INTERLACE_TIMING_DIS
 (
imd_dpi_fmt
 &=~
	`BIT
(9))

	)

105 
	#INTERLACE_DATA_EN
 (
imd_dpi_fmt
 |
	`BIT
(10))

	)

106 
	#INTERLACE_DATA_DIS
 (
imd_dpi_fmt
 &=~
	`BIT
(10))

	)

107 
	#INTERLACE_TOP_MODE
 (
imd_dpi_fmt
 &=~
	`BIT
(11))

	)

108 
	#INTERLACE_BOTTOM_MODE
 (
imd_dpi_fmt
 |
	`BIT
(11))

	)

109 
	#INTERLACE_FILED_EN
 (
imd_dpi_fmt
 |
	`BIT
(12))

	)

110 
	#INTERLACE_FILED_DIS
 (
imd_dpi_fmt
 &=~
	`BIT
(12))

	)

111 
	#RAW_DLT
 (
imd_dpi_fmt
 |
	`BIT
(13))

112 
	#RAW_STR
 (
imd_dpi_fmt
 &=~
	`BIT
(13))

113 
	#DUMMY_EN
 (
imd_dpi_fmt
 |
	`BIT
(18))

114 
	#DUMMY_DIS
 (
imd_dpi_fmt
 &=~
	`BIT
(18))

	)

115 
	#SIGNAL_DCLK_INV
 (
imd_dpi_fmt
 |
	`BIT
(19))

	)

116 
	#SIGNAL_DCLK_NOR
 (
imd_dpi_fmt
 &=~
	`BIT
(19))

	)

117 
	#SIGNAL_SYNC0_INV
 (
imd_dpi_fmt
 |
	`BIT
(20))

	)

118 
	#SIGNAL_SYNC0_NOR
 (
imd_dpi_fmt
 &=~
	`BIT
(20))

	)

119 
	#SIGNAL_SYNC1_INV
 (
imd_dpi_fmt
 |
	`BIT
(21))

	)

120 
	#SIGNAL_SYNC1_NOR
 (
imd_dpi_fmt
 &=~
	`BIT
(21))

	)

121 
	#SIGNAL_SYNC2_INV
 (
imd_dpi_fmt
 |
	`BIT
(22))

	)

122 
	#SIGNAL_SYNC2_NOR
 (
imd_dpi_fmt
 &=~
	`BIT
(22))

	)

123 
	#SIGNAL_SYNC3_INV
 (
imd_dpi_fmt
 |
	`BIT
(23))

	)

124 
	#SIGNAL_SYNC3_NOR
 (
imd_dpi_fmt
 &=~
	`BIT
(23))

	)

126 
	#LCD_IO_CLK_EN
 (
imd_dpi_io_c⁄
 |
	`BIT
(0))

	)

127 
	#LCD_IO_CLK_DIS
 (
imd_dpi_io_c⁄
 &=~
	`BIT
(0))

	)

128 
	#LCD_IO_SYNC0_EN
 (
imd_dpi_io_c⁄
 |
	`BIT
(1))

	)

129 
	#LCD_IO_SYNC0_DIS
 (
imd_dpi_io_c⁄
 &=~
	`BIT
(1))

	)

130 
	#LCD_IO_SYNC1_EN
 (
imd_dpi_io_c⁄
 |
	`BIT
(2))

	)

131 
	#LCD_IO_SYNC1_DIS
 (
imd_dpi_io_c⁄
 &=~
	`BIT
(2))

	)

132 
	#LCD_IO_SYNC2_EN
 (
imd_dpi_io_c⁄
 |
	`BIT
(3))

	)

133 
	#LCD_IO_SYNC2_DIS
 (
imd_dpi_io_c⁄
 &=~
	`BIT
(3))

	)

135 
	#DPI_CLK_EN
 (
imd_dpi_˛k_c⁄
 |
	`BIT
(0))

	)

136 
	#DPI_CLK_DIS
 (
imd_dpi_˛k_c⁄
 &=~
	`BIT
(0))

	)

137 
	#DPI_RESET_RELEASE
 (
imd_dpi_˛k_c⁄
 |
	`BIT
(1))

	)

138 
	#DPI_RESET
 (
imd_dpi_˛k_c⁄
 &=~
	`BIT
(1))

	)

139 
	#DPI_PATTERN_EN
 (
imd_dpi_˛k_c⁄
 |
	`BIT
(10))

	)

140 
	#DPI_PATTERN_DIS
 (
imd_dpi_˛k_c⁄
 &=~
	`BIT
(10))

	)

142 
	#DPI_EMI_EN
 (
imd_dpi_emi
 |
	`BIT
(12))

	)

143 
	#DPI_EMI_DIS
 (
imd_dpi_emi
 &=~
	`BIT
(12))

	)

145 
	#IMD_MIX_PND_IE
 (
imd_mc_c⁄
 |
	`BIT
(2))

	)

146 
	#IMD_MIX_PND_DIS
 (
imd_mc_c⁄
 &=~
	`BIT
(2))

	)

147 
	#IMD_MIX_BANDWIDTH_ERR_IE
 (
imd_mc_c⁄
 |
	`BIT
(3))

	)

148 
	#IMD_MIX_BANDWIDTH_ERR_DIS
 (
imd_mc_c⁄
 &=~
	`BIT
(3))

	)

149 
	#IMD_CLR_MIX_PND
 (
imd_mc_c⁄
 |
	`BIT
(4))

	)

150 
	#IMD_CLR_MIX_BANDWIDTH_ERR_PND
 (
imd_mc_c⁄
 |
	`BIT
(5))

	)

151 
	#IMD_MIX_PND
 (
imd_mc_c⁄
 & 
	`BIT
(6))

	)

152 
	#IMD_MIX_BANDWIDTH_ERR_PND
 (
imd_mc_c⁄
 & 
	`BIT
(7))

	)

153 
	#IMD_LAYER3_LUT_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(8))

	)

154 
	#IMD_LAYER2_LUT_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(9))

	)

155 
	#IMD_GAMMA_B_LUT_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(10))

	)

156 
	#IMD_GAMMA_G_LUT_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(11))

	)

157 
	#IMD_GAMMA_R_LUT_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(12))

	)

158 
	#IMD_RGB_MODE
 (
imd_mc_c⁄
 &=~
	`BIT
(13))

	)

159 
	#IMD_YUV_MODE
 (
imd_mc_c⁄
 |
	`BIT
(13))

	)

160 
	#IMD_SEL_BT601
 (
imd_mc_c⁄
 &=~
	`BIT
(14))

	)

161 
	#IMD_SEL_BT709
 (
imd_mc_c⁄
 |
	`BIT
(14))

	)

162 
	#IMD_COLOR_COMPRESS_DIS
 (
imd_mc_c⁄
 &=~
	`BIT
(15))

	)

163 
	#IMD_COLOR_COMPRESS_EN
 (
imd_mc_c⁄
 |
	`BIT
(15))

	)

164 
	#IMD_MIX_BUSY
 (
imd_mc_c⁄
 & 
	`BIT
(16))

	)

166 
	#IMD_SCA_BANDWIDTH_ERR_IE
 (
imd_sˇ_c⁄
 |
	`BIT
(0))

	)

167 
	#IMD_SCA_BANDWIDTH_ERR_DIS
 (
imd_sˇ_c⁄
 &=~
	`BIT
(0))

	)

168 
	#IMD_CLR_BANDWIDTH_ERR_PND
 (
imd_sˇ_c⁄
 |
	`BIT
(1))

	)

169 
	#IMD_BANDWIDTH_ERR_PND
 (
imd_sˇ_c⁄
 & 
	`BIT
(2))

	)

170 
	#IMD_TEST_EN
 (
imd_sˇ_c⁄
 |
	`BIT
(8))

	)

171 
	#IMD_TEST_DIS
 (
imd_sˇ_c⁄
 &=~
	`BIT
(8))

	)

174 
	#IMD_INTERNAL
 0x8000

	)

175 
	#IMD_EXTERNAL
 0x0000

177 
	#OSC_12M
 0x4000

	)

178 
	#OSC_32K
 0x0000

179 

	)

186 
	#PLL_SEL
 2

	)

187 
	#PLL_DIV1
 6

	)

188 
	#PLL_DIV2
 8

	)

193 
	#PLL0_CLK
 (0<<
PLL_SEL
)

	)

194 
	#PLL1_CLK
 (1<<
PLL_SEL
)

	)

195 
	#PLL2_CLK
 (2<<
PLL_SEL
)

	)

196 
	#PLL3_CLK
 (3<<
PLL_SEL
)

	)

202 
	#DIVA_1
 (0<<
PLL_DIV1
)

	)

203 
	#DIVA_3
 (1<<
PLL_DIV1
)

	)

204 
	#DIVA_5
 (2<<
PLL_DIV1
)

	)

205 
	#DIVA_7
 (3<<
PLL_DIV1
)

	)

207 
	#DIVB_1
 (0<<
PLL_DIV2
)

	)

208 
	#DIVB_2
 (1<<
PLL_DIV2
)

	)

209 
	#DIVB_4
 (2<<
PLL_DIV2
)

	)

210 
	#DIVB_8
 (3<<
PLL_DIV2
)

	)

214 
	eNCYCLE
 {

215 
	mCYCLE_ONE
,

216 
	mCYCLE_TWO
,

217 
	mCYCLE_THREE
,

218 
	mCYCLE_FOUR
,

222 
	eOUT_FORMAT
 {

223 
	mFORMAT_RGB333
,

224 
	mFORMAT_RGB666
,

225 
	mFORMAT_RGB888
,

226 
	mFORMAT_RGB565
,

227 
	mFORMAT_YUV888
,

228 
	mFORMAT_YUV422
,

229 
	mFORMAT_ITU656
,

234 
	eINTERLACED
 {

235 
	mINTERLACED_NONE
,

236 
	mINTERLACED_TIMING
,

237 
	mINTERLACED_DATA
,

238 
	mINTERLACED_ALL
,

243 
	eLCD_PORT
 {

244 
	mPORT_1BIT
 = 0x00,

245 
	mPORT_3BITS
 = 0x01,

246 
	mPORT_6BITS
 = 0x03,

247 
	mPORT_8BITS
 = 0x07,

248 
	mPORT_9BITS
 = 0x0F,

249 
	mPORT_16BITS
 = 0x1F,

250 
	mPORT_18BITS
 = 0x3F,

251 
	mPORT_24BITS
 = 0x7F,

256 
	ePHASE
 {

257 
	mPHASE_R
,

258 
	mPHASE_G
,

259 
	mPHASE_B
,

263 
	eRAW_MODE
 {

264 
	mRAW_STR_MODE
,

265 
	mRAW_DLT_MODE
,

269 
	eLCD_MODE
 {

270 
	mMODE_RGB_SYNC
,

271 
	mMODE_RGB_DE_SYNC
,

272 
	mMODE_RGB_DE
,

273 
	mMODE_MCU
,

274 
	mMODE_AVOUT
,

275 
	mMODE_CCIR656
,

279 
	#CLK_DIS
 0

	)

280 
	#CLK_POSITIVE
 0

	)

281 
	#CLK_EN
 
	`BIT
(0)

	)

282 
	#CLK_NEGATIVE
 
	`BIT
(1)

	)

283 
	#SIGNAL_TYPE_DEN
 
	`BIT
(2)

	)

284 
	#SIGNAL_TYPE_HSYNC
 
	`BIT
(3)

	)

285 
	#SIGNAL_TYPE_VSYNC
 
	`BIT
(4)

	)

286 
	#SIGNAL_TYPE_FIELD
 
	`BIT
(5)

	)

288 
	simd_œyî_ªg
 {

289 vﬁ©ûê
u32
 
	mc⁄
;

290 vﬁ©ûê
u32
 
	mhs
;

291 vﬁ©ûê
u32
 
	mhe
;

292 vﬁ©ûê
u32
 
	mvs
;

293 vﬁ©ûê
u32
 
	mve
;

294 vﬁ©ûê
u32
 
	mhaw
;

295 vﬁ©ûê
u32
 
	mhtw
;

296 vﬁ©ûê
u32
 
	m≠h
;

297 vﬁ©ûê
u32
 
	mbaddr0a
;

298 vﬁ©ûê
u32
 
	mbaddr1a
;

299 vﬁ©ûê
u32
 
	mbaddr2a
;

300 vﬁ©ûê
u32
 
	mbaddr0b
;

301 vﬁ©ûê
u32
 
	mbaddr1b
;

302 vﬁ©ûê
u32
 
	mbaddr2b
;

305 
	simd_œyî
 {

306 
u8
 
	míabÀ
;

307 
u8
 
	mödex
;

308 
u8
 
	m°©us
;

309 
u8
 
	mÆpha
;

310 
u8
 
	md©a_fmt
;

311 
u8
 
	mrŸ©e
;

312 
u8
 
	mh‹i_múr‹
;

313 
u8
 
	mvît_múr‹
;

314 
u8
 
	m¶ide_wödow_í
;

316 
u16
 
	mx
;

317 
u16
 
	my
;

318 
u16
 
	mwidth
;

319 
u16
 
	mheight
;

321 
u16
 
	mbuf_x
;

322 
u16
 
	mbuf_y
;

323 
u16
 
	mbuf_width
;

324 
u16
 
	mbuf_height
;

325 
u32
 
	mdoubÀbuf0
;

326 
u32
 
	mdoubÀbuf1
;

327 
u32
 
	mbaddr
;

328 
u32
 
	mbaddr0
;

329 
u32
 
	mbaddr1
;

330 
u32
 
	mbaddr2
;

331 
fb_öfo
 
	mfb
;

332 
fb_m≠_u£r
 
	mm≠
;

334 *
	mimr
;

335 
imr_öfo
 
	mimr_öfo_t
;

336 
imd_œyî_ªg
 *
	mªg
;

337 
u8
 
	mªg_ödex
;

345 
	#ADJUST_EN
 0x31

346 
	#ADJUST_DIS
 0x32

347 
	#GET_ALL
 0x33

348 
	#SET_ALL
 0x34

349 

	)

350 
	#SET_Y_GAIN
 0x01

351 
	#SET_U_GAIN
 0x02

352 
	#SET_V_GAIN
 0x03

353 
	#SET_Y_OFFS
 0x04

354 
	#SET_U_OFFS
 0x05

355 
	#SET_V_OFFS
 0x06

356 
	#SET_R_GAIN
 0x07

357 
	#SET_G_GAIN
 0x08

358 
	#SET_B_GAIN
 0x09

359 
	#SET_R_OFFS
 0x0a

360 
	#SET_G_OFFS
 0x0b

361 
	#SET_B_OFFS
 0x0c

362 
	#SET_R_COE0
 0x0d

363 
	#SET_R_COE1
 0x0e

364 
	#SET_R_COE2
 0x0f

365 
	#SET_G_COE0
 0x10

366 
	#SET_G_COE1
 0x11

367 
	#SET_G_COE2
 0x12

368 
	#SET_B_COE0
 0x13

369 
	#SET_B_COE1
 0x14

370 
	#SET_B_COE2
 0x15

371 
	#SET_R_GMA
 0x16

372 
	#SET_G_GMA
 0x17

373 
	#SET_B_GMA
 0x18

374 
	#SET_R_GMA_TBL
 0x19

375 
	#SET_G_GMA_TBL
 0x1a

376 
	#SET_B_GMA_TBL
 0x1b

377 
	#SET_ISP_SCENE
 0x1c

378 
	#SET_CAMERA
 0x1d

379 

	)

381 
	#FORE_CAMERA
 0x01

	)

382 
	#BACK_CAMERA
 0x02

	)

383 
	#BOTH_CAMERA
 0x03

	)

386 
	scﬁ‹_c‹ª˘
 {

387 
u16
 
	my_gaö
;

388 
u16
 
	mu_gaö
;

389 
u16
 
	mv_gaö
;

390 
s16
 
	my_offs
;

391 
s16
 
	mu_offs
;

392 
s16
 
	mv_offs
;

394 
u16
 
	mr_gaö
;

395 
u16
 
	mg_gaö
;

396 
u16
 
	mb_gaö
;

397 
s16
 
	mr_offs
;

398 
s16
 
	mg_offs
;

399 
s16
 
	mb_offs
;

401 
u16
 
	mr_c€0
;

402 
s16
 
	mr_c€1
;

403 
s16
 
	mr_c€2
;

405 
s16
 
	mg_c€0
;

406 
u16
 
	mg_c€1
;

407 
s16
 
	mg_c€2
;

409 
s16
 
	mb_c€0
;

410 
s16
 
	mb_c€1
;

411 
u16
 
	mb_c€2
;

415 
u16
 
	mr_gma
;

416 
u16
 
	mg_gma
;

417 
u16
 
	mb_gma
;

419 
u8
 
	mr_gamma_èb
[256];

420 
u8
 
	mg_gamma_èb
[256];

421 
u8
 
	mb_gamma_èb
[256];

424 
	scﬁ‹_ef„˘_cfg
 {

425 c⁄° *
	m‚ame
;

426 
cﬁ‹_c‹ª˘
 *
	madj
;

430 
	eLEN_CFG
 {

431 
	mLEN_256
,

432 
	mLEN_512
,

435 
	eODD_EVEN_FILED
 {

436 
	mSAME_FILED
,

437 
	mODD_FILED
,

438 
	mEVEN_FILED
,

441 
	eROTATE
 {

442 
	mROTATE_0
,

443 
	mROTATE_90
,

444 
	mROTATE_270
,

447 
	simd_dmm_öfo
 {

448 
u16
 
	mxªs
;

449 
u16
 
	myªs
;

450 
u16
 
	mèrgë_xªs
;

451 
u16
 
	mèrgë_yªs
;

452 
u8
 
	mã°_mode
;

453 
u32
 
	mã°_mode_cﬁ‹
;

454 
u32
 
	mbackground_cﬁ‹
;

455 
OUT_FORMAT
 
	mf‹m©
;

456 
INTERLACED
 
	möãæa˚d_mode
;

457 
ODD_EVEN_FILED
 
	möãæa˚d_1°_fûed
;

458 
cﬁ‹_c‹ª˘
 
	madju°
;

459 
LEN_CFG
 
	mÀn
;

460 
ROTATE
 
	mrŸ©e
;

466 
	slcd_timög
 {

467 
u16
 
	mh‹i_tŸÆ
;

468 
u16
 
	mh‹i_sync
;

469 
u16
 
	mh‹i_back_p‹th
;

470 
u16
 
	mh‹i_pixñ
;

472 
u16
 
	mvît_tŸÆ
;

473 
u16
 
	mvît_sync
;

474 
u16
 
	mvît_back_p‹th_odd
;

475 
u16
 
	mvît_back_p‹th_eví
;

476 
u16
 
	mvît_pixñ
;

480 
	eLCD_GROUP
 {

481 
	mPORT_GROUP_A
,

482 
	mPORT_GROUP_B
,

485 
	#IMD_LAYER_NUM
 6

	)

497 
	sã_mode_˘æ
 {

498 
u8
 
	mã_mode_í
;

499 
PORT_EVENT_E
 
	mevít
;

500 
PORT_EDGE_E
 
	medge
;

501 
	mgpio
;

504 
	simd_dev
 {

505 
imd_dmm_öfo
 
	möfo
;

506 
LCD_MODE
 
	mdrive_mode
;

507 
NCYCLE
 
	mncy˛e
;

508 
PHASE
 
	møw_odd_pha£
;

509 
PHASE
 
	møw_eví_pha£
;

510 
RAW_MODE
 
	møw_mode
;

511 
LCD_PORT
 
	md©a_width
;

512 
u8
 
	mavout_mode
;

513 
u8
 
	md˛k_cfg
;

514 
u8
 
	msync0_cfg
;

515 
u8
 
	msync1_cfg
;

516 
u8
 
	msync2_cfg
;

517 
u8
 
	msync3_cfg
;

518 
u32
 
	m˛k_cfg
;

519 
u16
 
	m∂l0_nf
;

520 
u16
 
	m∂l0_ƒ
;

521 
lcd_timög
 
	mtimög
;

522 
ã_mode_˘æ
 
	mã_mode
;

531 
	eLCD_IF
 {

532 
	mLCD_MIPI
,

533 
	mLCD_DVP_MCU
,

534 
	mLCD_DVP_RGB
,

538 
	mBL_CTRL_BACKLIGHT_AND_CONTROLER
,

539 
	mBL_CTRL_BACKLIGHT
,

542 
	slcd_dev_drive
 {

543 c⁄° *
	mlogo
;

544 
u8
 
	míabÀ
;

545 
LCD_IF
 
	mty≥
;

546 (*
	möô
)(*
	m_d©a
);

547 (*
	munöô
)(*
	m_d©a
);

548 (*
	mbl_˘æ
)(*
	m_d©a
, 
u8
 
	m⁄off
);

549 
u8
 
	mbl_˘æ_Êags
;

550 (*
	m£txy
)(
	mx0
, 
	mx1
, 
	my0
, 
	my1
);

551 *
	mdev
;

552 
u8
 
	mbl_°a
;

553 
u8
 
	mã_mode_dbug
;

556 
	#REGISTER_IMD_DEVICE
(
dev
) \

557 
imd_dev
 
dev
 
	`£c
(.
lcd_devi˚
)

	)

559 
	#REGISTER_MIPI_DEVICE
(
dev
) \

560 
mùi_dev
 
dev
 
	`£c
(.
lcd_devi˚
)

	)

562 
	#REGISTER_LCD_DEVICE_DRIVE
(
dev
) \

563 c⁄° 
lcd_dev_drive
 
dev
##
_drive
 
	`£c
(.
lcd_devi˚_drive
)

	)

565 
lcd_dev_drive
 
lcd_devi˚_drive_begö
[];

566 
lcd_dev_drive
 
lcd_devi˚_drive_íd
[];

568 
	#li°_f‹_óch_lcd_devi˚_drive
(
p
) \

569 
p
=
lcd_devi˚_drive_begö
;Ö < 
lcd_devi˚_drive_íd
;Ö++)

	)

578 
	sdsi_œ√_m≠pög
 {

579 
u8
 
	mx0_œ√
;

580 
u8
 
	mx1_œ√
;

581 
u8
 
	mx2_œ√
;

582 
u8
 
	mx3_œ√
;

583 
u8
 
	mx4_œ√
;

588 
	eVIDEO_STREAM_MODE
 {

589 
	mVIDEO_STREAM_COMMAND
,

590 
	mVIDEO_STREAM_VIDEO
,

595 
	eSYNC_MODE
 {

596 
	mSYNC_PULSE_MODE
,

597 
	mSYNC_EVENT_MODE
,

598 
	mBURST_MODE
,

601 
	eCOLOR_FORMAT
 {

602 
	mCOLOR_FORMAT_RGB565
,

603 
	mCOLOR_FORMAT_RGB666
,

604 
	mCOLOR_FORMAT_RGB666_LOOSELY
,

605 
	mCOLOR_FORMAT_RGB888
,

610 
	ePIXEL_TYPE
 {

611 
	mPIXEL_RGB565_COMMAND
,

612 
	mPIXEL_RGB565_VIDEO
,

613 
	mPIXEL_RGB666
,

614 
	mPIXEL_RGB666_LOOSELY
,

615 
	mPIXEL_RGB888
,

620 
	sdsi_video_timög
 {

621 
u8
 
	mvideo_mode
;

622 
u8
 
	msync_mode
;

623 
u8
 
	mcﬁ‹_mode
;

624 
u8
 
	mvútuÆ_ch
;

625 
u8
 
	mhs_eŸp_í
;

626 
u8
 
	mpixñ_ty≥
;

628 
u16
 
	mdsi_vdo_vß_v
;

629 
u16
 
	mdsi_vdo_vbp_v
;

630 
u16
 
	mdsi_vdo_va˘_v
;

631 
u16
 
	mdsi_vdo_vÂ_v
;

633 
u16
 
	mdsi_vdo_hß_v
;

634 
u16
 
	mdsi_vdo_hbp_v
;

635 
u16
 
	mdsi_vdo_ha˘_v
;

636 
u16
 
	mdsi_vdo_hÂ_v
;

638 
u16
 
	mdsi_vdo_bŒp0_v
;

639 
u16
 
	mdsi_vdo_bŒp1_v
;

644 
	sdsi_timög
 {

645 
u16
 
	m‰eq
;

646 
u16
 
	mtvÆ_Õx
;

647 
u32
 
	mtvÆ_wkup
;

648 
u16
 
	mtvÆ_c_¥e
;

649 
u16
 
	mtvÆ_c_sŸ
;

650 
u16
 
	mtvÆ_c_eŸ
;

651 
u16
 
	mtvÆ_c_brk
;

652 
u16
 
	mtvÆ_d_¥e
;

653 
u16
 
	mtvÆ_d_sŸ
;

654 
u16
 
	mtvÆ_d_eŸ
;

655 
u16
 
	mtvÆ_d_brk
;

656 
u16
 
	mtvÆ_c_rdy
;

661 
	eMIPI_PLL_DIV
 {

662 
	mMIPI_PLL_DIV1
,

663 
	mMIPI_PLL_DIV2
,

664 
	mMIPI_PLL_DIV4
,

665 
	mMIPI_PLL_DIV8
,

671 
	ePACKET_TYPE
 {

672 
	mPACKET_DCS
,

673 
	mPACKET_DCS_WITHOUT_BTA
,

674 
	mPACKET_GENERIC
,

675 
	mPACKET_GENERIC_WITHOUT_BTA
,

677 
	smùi_dev
 {

678 
imd_dmm_öfo
 
	möfo
;

679 
dsi_œ√_m≠pög
 
	mœ√_m≠pög
;

680 
dsi_video_timög
 
	mvideo_timög
;

681 
dsi_timög
 
	mtimög
;

682 
ã_mode_˘æ
 
	mã_mode
;

684 
	mª£t_gpio
;

685 (*
	mlcd_ª£t
)(
	mª£t_gpio
);

686 (*
	mlcd_ª£t_ªÀa£
)(
	mª£t_gpio
);

688 c⁄° 
u8
 *
	mcmd_li°
;

689 
u16
 
	mcmd_li°_ôem
;

691 
u8
 
	mdebug_mode
;

693 
u16
 
	m∂l_‰eq
;

694 
MIPI_PLL_DIV
 
	m∂l_divisi⁄
;

697 
imd_°¨t
();

698 
imd_dev_öô
();

699 
_imd_dmm_öô
();

	@include_lib/system/cpu/AC521x/asm/imr.h

1 #i‚de‡
__IMR_H__


2 
	#__IMR_H__


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

6 
	~"io˘l.h
"

8 
	#IMR_SET_CONFIG
 
	`_IOW
('F', 0, ())

	)

9 
	#IMR_SET_KSTART
 
	`_IOW
('F', 1, ())

	)

10 
	#IMR_RESET
 
	`_IOW
('F', 2, ())

	)

12 
	eIMR_FORMAT
 {

13 
	mIMR_FMT_YUV420
,

14 
	mIMR_FMT_YUV422
,

15 
	mIMR_FMT_YUV444
,

16 
	mIMR_FMT_RGB888
,

19 
	#IMR_HORI_MIRROR_EN
 0x01

	)

20 
	#IMR_VERT_MIRROR_EN
 0x02

	)

22 
	eIMR_SOURCE
 {

23 
	mIMR0
,

24 
	mIMR1
,

25 
	mIMR_MAX_NUM
,

28 
	eIMR_STA
 {

29 
	mIMR_IDLE
,

30 
	mIMR_INUSE
,

33 
	simr_ªg
 {

34 vﬁ©ûê
u32
 
	mc⁄
;

35 vﬁ©ûê
u32
 
	mhaw
;

36 vﬁ©ûê
u32
 
	mvaw
;

37 vﬁ©ûê
u32
 
	mb0_adr0
;

38 vﬁ©ûê
u32
 
	mb0_adr1
;

39 vﬁ©ûê
u32
 
	mb0_adr2
;

40 vﬁ©ûê
u32
 
	mb1_adr0
;

41 vﬁ©ûê
u32
 
	mb1_adr1
;

42 vﬁ©ûê
u32
 
	mb1_adr2
;

43 vﬁ©ûê
u32
 
	mwr_adr0
;

44 vﬁ©ûê
u32
 
	mwr_adr1
;

45 vﬁ©ûê
u32
 
	mwr_adr2
;

48 
	simr_rŸ©e_öfo
 {

49 
u8
 *
	msour
;

50 
u8
 *
	mde°
;

51 
u16
 
	mwidth
;

52 
u16
 
	mheight
;

55 
	simr_öfo
 {

56 *
	msour0
;

57 *
	msour0a
;

58 *
	msour0b
;

59 *
	msour1
;

60 *
	msour1a
;

61 *
	msour1b
;

62 *
	mde°
;

63 
u16
 
	mwidth
;

64 
u16
 
	mheight
;

65 
IMR_FORMAT
 
	mf‹m©
;

66 
u8
 
	mrŸ©e
;

67 
u8
 
	mmode
;

68 
u8
 
	mödex
;

69 
u8
 
	mfb
;

70 
fb_m≠_u£r
 
	mm≠
;

73 
	simr
 {

74 *
	msour0
;

75 *
	msour0a
;

76 *
	msour0b
;

77 *
	msour1
;

78 *
	msour1a
;

79 *
	msour1b
;

80 *
	mde°
;

81 
u16
 
	mwidth
;

82 
u16
 
	mheight
;

83 
IMR_FORMAT
 
	mf‹m©
;

84 
IMR_STA
 
	m°©us
;

85 
u8
 
	mödex
;

86 
u8
 
	mrŸ©e
;

87 
u8
 
	mmode
;

88 
u32
 
	mdma_˙t
;

89 
imr_ªg
 *
	mªg
;

90 
imr_öfo
 *
	möfo
;

93 c⁄° 
devi˚_›î©i⁄s
 
imr_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/includes.h

1 #i‚de‡
ASM_INCLUDES_H


2 
	#ASM_INCLUDES_H


	)

5 
	~"adc.h
"

6 
	~"dac.h
"

7 
	~"œdc.h
"

8 
	~"audio.h
"

9 
	~"adkey.h
"

10 
	~"powî_öf.h
"

11 
	~"ˇche.h
"

12 
	~"˝u.h
"

13 
	~"dma.h
"

14 
	~"debug.h
"

15 
	~"gpio.h
"

16 
	~"hwi.h
"

17 
	~"iic.h
"

18 
	~"úq.h
"

19 
	~"lock.h
"

20 
	~"sdmmc.h
"

21 
	~"•iÊash.h
"

22 
	~"°¨tup.h
"

23 
	~"u¨t.h
"

24 
	~"timî.h
"

25 
	~"imc.h
"

26 
	~"πc.h
"

27 
	~"˛ock.h
"

28 
	~"¸c16.h
"

29 
	~"•i.h
"

30 
	~"imd.h
"

31 
	~"imr.h
"

32 
	~"image_íc.h
"

33 
	~"j≥g_codec.h
"

34 
	~"imb_drivî.h
"

35 
	~"uvc_devi˚.h
"

36 
	~"bus_devi˚.h
"

37 
	~"lcd_c⁄fig.h
"

38 
	~"s¸ìn_toﬁ.h
"

39 
	~"video_ígöe.h
"

40 
	~"video_fb.h
"

41 
	~"∑p.h
"

	@include_lib/system/cpu/AC521x/asm/irq.h

1 #i‚de‡
CPU_IRQ_H


2 
	#CPU_IRQ_H


	)

5 
	~"asm/hwi.h
"

7 
	#___öãºu±
 
	`__©åibuã__
((
	`öãºu±
("")))

	)

12 
	#loˇl_úq_ßve
(
Êags
) \

14 
tmp
; \

15 
__asm__
 vﬁ©ûê("%0 = icfg" : "Ù"(
Êags
)); \

16 
tmp
 = 
Êags
 & ~
	`BIT
(8); \

17 
__asm__
 vﬁ©ûê("icfg = %0" :: "r"(
tmp
)); \

18 }0)

	)

21 
	#loˇl_úq_ª°‹e
(
Êags
) \

23 
__asm__
 vﬁ©ûê("icfg = %0" :: "r"(
Êags
)); \

24 }0)

	)

	@include_lib/system/cpu/AC521x/asm/isp_alg.h

3 #i‚de‡
__ISP_ALG_H__


4 
	#__ISP_ALG_H__


	)

6 
	~"ty≥def.h
"

10 
	mISP_ISO_100
 = 0,

11 
	mISP_ISO_200
,

12 
	mISP_ISO_400
,

13 
	mISP_ISO_800
,

14 
	mISP_ISO_1600
,

15 
	mISP_ISO_3200
,

16 
	mISP_ISO_6400
,

17 
	mISP_ISO_AUTO
 = 0xff,

19 
	#ISP_ISO_MAX
 (
ISP_ISO_6400
+1)

	)

23 
	#AE_CURVE_END
 (()(-1))

	)

24 
	#AE_CURVE_INFO_MAX
 4

	)

28 
	mAE_INTERP_EXP
 = 1,

29 
	mAE_INTERP_GAIN
 = 2,

33 
	mAE_CURVE_50HZ
 = 0,

34 
	mAE_CURVE_60HZ
,

38 
	mAE_WIN_WEIGHT_AVG
 = 0,

39 
	mAE_WIN_WEIGHT_CENTRE
,

40 
	mAE_WIN_WEIGHT_SPOT
,

41 
	mAE_WIN_WEIGHT_MULTI
,

42 
	mAE_WIN_WEIGHT_CARDV
,

43 
	mAE_WIN_WEIGHT_CUST
,

44 } 
	ti•_´_ww_ty≥_t
;

46 
	#AE_WIN_WEIGHT_MAX
 
AE_WIN_WEIGHT_CUST


	)

50 
u32
 
	m´_exp_löe
;

51 
u32
 
	m´_exp_˛k
;

52 
u32
 
	m´_gaö
;

53 } 
	ti•_´_shuâî_t
;

56 
u32
(*
ˇlc_shuâî
)(
i•_´_shuâî_t
 *
	mshuâî
, u32 
	mexp_time
, u32 
	mgaö
);

57 
u32
(*
£t_shuâî
)(
i•_´_shuâî_t
 *
	mshuâî
);

58 *(*
	mgë_´_curve
)(
u32
 
	mty≥
, u32 
	mÂs
, *
	mmö_ev
, *
	mmax_ev
);

59 } 
	ti•_´_›s_t
;

61 
	s´_∑øms
 {

63 
u32
 
	m´_max_ev
;

64 
u32
 
	m´_mö_ev
;

65 
u32
 
	m´_öô_ev
;

67 
u32
 
	m´_curve_ty≥
;

69 
u32
 
	m´_èrgë
;

71 
u32
 
	m´_pha£_comp
;

73 
u32
 
	m´_luma_smoŸh_num
;

75 
u32
 
	m´_c⁄vî_h
;

76 
u32
 
	m´_c⁄vî_l
;

77 
u32
 
	m´_divî_h
;

78 
u32
 
	m´_divî_l
;

80 
u32
 
	m´_øtio_max_h
;

81 
u32
 
	m´_øtio_max_l
;

83 
u32
 
	m´_øtio_max2_h
;

84 
u32
 
	m´_øtio_max2_l
;

86 
u32
 
	m´_øtio_¶›e
;

88 
u32
 
	m´_ex∂öe_th
;

90 
u32
 *
	m´_u£r_ev_vÆue_èbÀ
;

91 
u32
 
	m´_u£r_ev_vÆue_èbÀ_size
;

92 
s32
 
	m´_u£r_ev_vÆue
;

94 
u8
 
	m´_öô_weight_ty≥
;

95 
u8
 *
	m´_wö_cu°_weights
;

97 
i•_´_›s_t
 
	m´_›s
;

99 
u32
 
	m´_°ï
;

101 
u32
 
	m´_hl_comp_í
;

102 
u32
 
	m´_hl_cou¡_th0
;

103 
u32
 
	m´_hl_cou¡_th1
;

104 
u32
 
	m´_hl_lv_th
;

105 
u32
 
	m´_hl_comp_max
;

107 
u32
 
	mª£rved
[11];

109 } 
	ti•_´_∑øms_t
;

114 
	mAWB_DAYLIGHT
,

115 
	mAWB_CLOUNDY
,

116 
	mAWB_TUNGSTEN
,

117 
	mAWB_FLUORESCENT1
,

118 
	mAWB_FLUORESCENT2
,

119 
	mAWB_AUTO
,

120 } 
	ti•_wb_ty≥_t
;

122 
	#AWB_SCENE_MAX
 
AWB_AUTO


	)

125 
	mAWB_ALG_GW1
 = 0,

126 
	mAWB_ALG_GW2
,

127 
	mAWB_ALG_CT1
,

128 
	mAWB_ALG_CT2
,

132 
	mAWB_WIN_WEIGHT_AVG
 = 0,

133 
	mAWB_WIN_WEIGHT_CENTRE
,

134 
	mAWB_WIN_WEIGHT_SPOT
,

135 
	mAWB_WIN_WEIGHT_MULTI
,

136 
	mAWB_WIN_WEIGHT_CARDV
,

137 
	mAWB_WIN_WEIGHT_CUST
,

138 } 
	ti•_awb_ww_ty≥_t
;

140 
	#AWB_WIN_WEIGHT_MAX
 
AWB_WIN_WEIGHT_CUST


	)

142 
	#ISP_AWB_ONE
 (1<<10)

	)

144 
u16
 
	mr_gaö
;

145 
u16
 
	mg_gaö
;

146 
u16
 
	mb_gaö
;

147 } 
	ti•_wb_gaö_t
;

150 
s16
 
	mwp_th
;

151 
u8
 
	mr_th
;

152 
u8
 
	mg_th
;

153 
u8
 
	mb_th
;

155 
u16
 
	mwp_øtio_th_numî©‹
;

156 
u16
 
	mwp_øtio_th_díomö©‹
;

158 
u16
 
	mrgaö_mö
;

159 
u16
 
	mrgaö_max
;

160 
u16
 
	mbgaö_mö
;

161 
u16
 
	mbgaö_max
;

162 
u32
 
	mev_th
;

164 
u32
 
	mu…ølow_th
;

165 
u16
 
	mu…ølow_rgaö
;

166 
u16
 
	mu…ølow_bgaö
;

167 } 
	ti•_awb_gw1_∑øms_t
;

170 
u32
 
	m¥ev_w
;

171 
u32
 
	m√w_w
;

173 
u16
 
	mrgaö_mö
;

174 
u16
 
	mrgaö_max
;

175 
u16
 
	mbgaö_mö
;

176 
u16
 
	mbgaö_max
;

177 } 
	ti•_awb_gw2_∑øms_t
;

180 
	mISP_AWB_ZONE_UNKNOWN
 = -1,

181 
	mISP_AWB_ZONE_UHCT
,

182 
	mISP_AWB_ZONE_HCT
,

183 
	mISP_AWB_ZONE_MCT
,

184 
	mISP_AWB_ZONE_LCT
,

185 
	mISP_AWB_ZONE_ULCT
,

186 
	mISP_AWB_ZONE_GREEN
,

187 
	mISP_AWB_ZONE_SKIN
,

188 
	mISP_AWB_ZONE_MAX
,

189 } 
	ti•_awb_z⁄e_ty≥_t
;

192 
i•_awb_z⁄e_ty≥_t
 
	mty≥
;

194 
u16
 
	mrg_mö
;

195 
u16
 
	mbg_mö
;

197 
u16
 
	mrg_max
;

198 
u16
 
	mbg_max
;

200 
u16
 
	mrg_˚¡î
;

201 
u16
 
	mbg_˚¡î
;

204 c⁄° 
u8
 *
	mdesc
;

205 } 
	ti•_awb_z⁄e_t
;

207 
	#ISP_AWB_CT1_WP_WEIGHT_SIZE
 16

	)

210 
i•_awb_z⁄e_t
 *
	mz⁄es
[
ISP_AWB_ZONE_MAX
];

213 
u8
 *
	mwp_weights
;

215 
u8
 
	my_mö
;

216 
u8
 
	my_max
;

217 
u32
 
	mh˘_ev_th
;

218 
u32
 
	ml˘_ev_th
;

220 
u32
 
	m¥ev_w
;

221 
u32
 
	m√w_w
;

223 
u32
 
	mev_th
;

224 } 
	ti•_awb_˘1_∑øms_t
;

228 (*
	mawb_po°_¥o˚ss
)(
u32
 
	m¥ob
, u32 
	mev
, u32 
	mz⁄e_ty≥
, 
u16
 *
	mr_gaö
, u16 *
	mb_gaö
, *
	md©a
);

230 
i•_awb_z⁄e_t
 *
	mz⁄es
[
ISP_AWB_ZONE_MAX
];

232 
u32
 
	m¥ev_w
;

233 
u32
 
	m√w_w
;

235 
u8
 
	my_mö
;

236 
u8
 
	my_max
;

238 
u32
 
	mªföe_ødius
;

241 
u32
 
	msubwö_weight_øtio_th
;

242 
u32
 
	mz⁄e_weight_øtio_th
;

243 
u32
 
	mgªí_weight_øtio_th
;

244 
u32
 
	mgw_weight_øtio_th
;

246 
u32
 
	mdaylight_ev_th
;

247 
u32
 
	moutdo‹_ev_th
;

248 
u32
 
	mlowlight_ev_th
;

250 
u8
 
	mÁŒback_gw
;

251 
u8
 
	mö„ªn˚
;

252 
u8
 
	mö„ªn˚_g
;

253 
u8
 
	mö„ªn˚_d
;

254 
u8
 
	mªföe
;

255 
u32
 
	mskylight_high_ev_th
;

256 
u32
 
	mskylight_low_ev_th
;

258 } 
	ti•_awb_˘2_∑øms_t
;

261 
u8
 
	mawb_Æg_ty≥
;

262 
u8
 
	mawb_s˚√_ty≥
;

263 
u8
 
	mawb_wö_ty≥
;

265 
i•_wb_gaö_t
 
	mawb_öô_gaö
;

266 
i•_wb_gaö_t
 
	mawb_s˚√_gaös
[
AWB_SCENE_MAX
];

268 
u8
 *
	mawb_wö_cu°_weights
;

269 
u8
 *
	mawb_˘_weights
;

271 
i•_awb_gw1_∑øms_t
 *
	mawb_gw1_∑øms
;

272 
i•_awb_gw2_∑øms_t
 *
	mawb_gw2_∑øms
;

273 
i•_awb_˘1_∑øms_t
 *
	mawb_˘1_∑øms
;

274 
i•_awb_˘2_∑øms_t
 *
	mawb_˘2_∑øms
;

276 } 
	ti•_awb_∑øms_t
;

279 
s16
 
	mr
;

280 
s16
 
	mgr
;

281 
s16
 
	mgb
;

282 
s16
 
	mb
;

283 } 
	ti•_blc_t
;

286 
u16
 
	mdth
;

287 
u16
 
	m°h
;

288 
u16
 
	mvth
;

289 } 
	ti•_dpc_t
;

292 
u16
 
	mcx
;

293 
u16
 
	mcy
;

294 
u16
 *
	mÃ
;

295 
u16
 *
	mlg
;

296 
u16
 *
	mlb
;

297 
u16
 
	mdp0
;

298 
u16
 
	mdp1
;

299 
u16
 
	mdth
;

300 } 
	ti•_lsc_t
;

303 
u8
 
	mí3d
;

304 
u8
 
	m°r
;

305 
u16
 
	mmth
;

306 
u16
 
	m…h
;

307 
u16
 
	mhth
;

308 
u8
 
	mwm0
;

309 
u8
 
	mwm1
;

310 
u8
 
	mc
;

311 
u16
 
	ms
[8];

312 } 
	t__©åibuã__
((
	t∑cked
)Ë
	ti•_är_t
;

314 
s16
(
	ti•_ccm_t
)[12];

316 
u8
 *
	ti•_gamma_t
;

319 
u32
 
	míabÀ
;

320 
u8
 *
	mr_gamma
;

321 
u8
 *
	mg_gamma
;

322 
u8
 *
	mb_gamma
;

323 } 
	ti•_thªe_gamma_t
;

326 
u8
 
	ms0
 ;

327 
u8
 
	ms1
;

328 
u16
 
	mth
;

330 } 
	ti•_ƒ_t
;

333 
u8
 
	m…h0
;

334 
u8
 
	m…h1
;

335 
u8
 
	mo0
;

336 
u8
 
	mo1
;

337 
u16
 
	ma0
;

338 
u16
 
	ma1
;

339 
u8
 
	mg0
;

340 
u8
 
	mg1
;

341 
u16
 
	mth00
;

342 
u16
 
	mth01
;

343 
u16
 
	mth02
;

344 
u16
 
	mth10
;

345 
u16
 
	mth11
;

346 } 
	ti•_shp_t
;

350 
u8
 
	mmí
;

351 
u8
 
	mth
;

352 
u8
 
	ms
 ;

353 } 
	ti•_˙r_t
;

357 
u16
 *
	mcurve
;

358 
u32
 
	mg
;

359 } 
	ti•_wdr_t
;

362 
u16
 
	mgc0
;

363 
u16
 
	mgc1
;

364 
u16
 
	mgc2
;

365 
s16
 
	moc0
;

366 
s16
 
	moc1
;

367 
s16
 
	moc2
;

368 } 
	ti•_adj_t
;

371 
i•_blc_t
 
	mblc
;

372 
i•_lsc_t
 
	mlsc
;

373 
i•_wdr_t
 
	mwdr
;

375 
i•_adj_t
 
	madj
;

376 
i•_gamma_t
 
	mgamma
;

378 
i•_ccm_t
 
	mccm
;

380 
i•_dpc_t
 
	mdpc
;

381 
i•_är_t
 
	mär
;

382 
i•_ƒ_t
 
	mƒ
;

383 
i•_shp_t
 
	mshp
;

384 
i•_˙r_t
 
	m˙r
;

386 
u32
 
	mmd_wms
[5];

387 
u32
 
	mmd_Àvñ
;

388 
i•_thªe_gamma_t
 
	mthªe_gamma
;

389 } 
	ti•_iq_∑øms_t
;

392 
i•_´_curve_öãΩ
(
u32
(*
´_curve
)[
AE_CURVE_INFO_MAX
], u32 
ev
, u32 *
time
, u32 *
gaö
 );

	@include_lib/system/cpu/AC521x/asm/isp_customize.h

2 #i‚de‡
__ISP_CUSTOMIZE_H__


3 
	#__ISP_CUSTOMIZE_H__


	)

7 
	~"ty≥def.h
"

8 
	~"asm/i•_Æg.h
"

10 
	#ISPT_DEBUG_LEVEL_AE
 0x01

	)

11 
	#ISPT_DEBUG_LEVEL_AWB
 0x02

	)

12 
	#ISPT_DEBUG_LEVEL_MD
 0x04

	)

13 
	#ISPT_DEBUG_LEVEL_IMP
 0x08

	)

14 
	#ISPT_DEBUG_LEVEL_INFO
 0x10

	)

15 
	#ISPT_DEBUG_LEVEL_CUST
 0x20

	)

17 
i•t_gë_i•_drv_°©us
();

19 
i•t_£t_blc
(
i•_blc_t
 *
p
);

20 
i•t_gë_blc
(
i•_blc_t
 *
p
);

22 
i•t_£t_dpc
(
i•_dpc_t
 *
p
);

23 
i•t_gë_dpc
(
i•_dpc_t
 *
p
);

25 
i•t_£t_lsc
(
i•_lsc_t
 *
p
);

26 
i•t_gë_lsc
(
i•_lsc_t
 *
p
);

28 
i•t_£t_är
(
i•_är_t
 *
p
);

29 
i•t_gë_är
(
i•_är_t
 *
p
);

31 
i•t_£t_ƒ
(
i•_ƒ_t
 *
p
);

32 
i•t_gë_ƒ
(
i•_ƒ_t
 *
p
);

34 
i•t_£t_˙r
(
i•_˙r_t
 *
p
);

35 
i•t_gë_˙r
(
i•_˙r_t
 *
p
);

37 
i•t_£t_shp
(
i•_shp_t
 *
p
);

38 
i•t_gë_shp
(
i•_shp_t
 *
p
);

40 
i•t_£t_ccm
(
i•_ccm_t
 
p
);

41 
i•t_gë_ccm
(
i•_ccm_t
 
p
);

43 
i•t_£t_adj
(
i•_adj_t
 *
p
);

44 
i•t_gë_adj
(
i•_adj_t
 *
p
);

46 
i•t_£t_brighäess
(
s32
 
p
);

47 
i•t_gë_brighäess
(
s32
 *
p
);

49 
i•t_£t_c⁄åa°
(
u32
 
p
);

50 
i•t_gë_c⁄åa°
(
u32
 *
p
);

52 
i•t_£t_ßtuøti⁄_u
(
u32
 
p
);

53 
i•t_gë_ßtuøti⁄_u
(
u32
 *
p
);

55 
i•t_£t_ßtuøti⁄_v
(
u32
 
p
);

56 
i•t_gë_ßtuøti⁄_v
(
u32
 *
p
);

58 
i•t_£t_gamma
(
u8
 *
p
);

59 
i•t_gë_gamma
(
u8
 *
p
);

61 
i•t_£t_thªe_gamma
(
u8
 *
r
, u8 *
g
, u8 *
b
);

62 
i•t_gë_thªe_gamma
(
u8
 *
r
, u8 *
g
, u8 *
b
);

64 
i•t_£t_wb_ty≥
(
i•_wb_ty≥_t
 
p
);

65 
i•t_gë_wb_ty≥
(
i•_wb_ty≥_t
 *
p
);

67 
i•t_£t_awb_ww_ty≥
(
i•_awb_ww_ty≥_t
 
p
);

68 
i•t_gë_awb_ww_ty≥
(
i•_awb_ww_ty≥_t
 *
p
);

70 
i•t_£t_awb_cu°_ww
(
u8
 *
p
);

71 
i•t_gë_awb_cu°_ww
(
u8
 *
p
);

73 
i•t_£t_awb_gaö
(
u8
 
ty≥
, 
u16
 
rgaö
, u16 
ggaö
, u16 
bgaö
);

74 
i•t_gë_awb_gaö
(
u8
 
ty≥
, 
u16
 *
rgaö
, u16 *
ggaö
, u16 *
bgaö
);

76 
i•t_£t_´_ww_ty≥
(
i•_´_ww_ty≥_t
 
p
);

77 
i•t_gë_´_ww_ty≥
(
i•_´_ww_ty≥_t
 *
p
);

79 
i•t_£t_´_cu°_ww
(
u8
 *
p
);

80 
i•t_gë_´_cu°_ww
(
u8
 *
p
);

82 
i•t_£t_ev
(
s8
 
ev
);

83 
i•t_gë_ev
(
s8
 *
ev
);

85 
i•t_£t_´_èrgë
(
s32
 
ev
);

86 
i•t_gë_´_èrgë
(
s32
 *
ev
);

90 
i•t_£t_md_íabÀ
(
u8
 
í
);

91 
i•t_gë_md_íabÀ
(
u8
 *
í
);

93 
i•t_£t_md_Àvñ
(
u8
 
Àvñ
);

94 
i•t_gë_md_Àvñ
(
u8
 *
Àvñ
);

97 
i•t_£t_debug_Àvñ
(
u8
 
Àvñ
);

98 
i•t_gë_debug_Àvñ
(
u8
 *
Àvñ
);

100 
i•t_£t_drc
(
u8
 
íabÀ
, 
u32
 
sˇÀ
);

101 
i•t_gë_drc
(
u8
 *
íabÀ
, 
u32
 *
sˇÀ
);

103 
i•t_£t_drc_œv_limô
(
u32
 
œv_limô
);

104 
i•t_gë_drc_œv_limô
(
u32
 *
œv_limô
);

106 
i•t_£t_c⁄åa°_íh™˚
(
u8
 
mode
, u8 
low
, u8 
high
);

107 
i•t_gë_c⁄åa°_íh™˚
(
u8
 *
mode
, u8 *
low
, u8 *
high
);

110 
i•t_gë_´_lv
(
s32
 *
lv
);

111 
i•t_gë_´_gaö
(
u32
 *
gaö
);

112 
i•t_gë_´_luma
(
u32
 *
luma
);

113 
i•t_gë_md_°©us
(
u8
 *
°©us
);

115 
i•t_£ns‹_wrôe_ªg
(
u16
 
addr
, u16 
vÆ
);

116 
i•t_£ns‹_ªad_ªg
(
u16
 
addr
, u16 *
vÆ
);

119 
i•t_£t_shp_Àvñ
(
s8
 
Àvñ
);

120 
i•t_gë_shp_Àvñ
(
u8
 *
Àvñ
);

122 
i•t_£t_´_ty≥
(
ty≥
);

123 
i•t_gë_´_ty≥
(*
ty≥
);

125 
i•t_£t_nŸify_èsk_«me
(*
«me
);

127 
i•t_£t_block_‰ame_cou¡
(
u32
 
c
);

128 
i•t_Âs_mëî_íabÀ
(
u32
 
í
);

129 
i•t_£t_´_upd©e_ö_i§
(
u8
 
í
);

131 
i•t_∑øms_smoŸh_í
(
u8
 
í
);

132 
i•t_∑øms_Êush
();

133 
i•t_∑øms_£t_smoŸh_°ï
(
°ï
);

135 
i•t_gë_øwd©a
(*
width
, *
height
, 
u8
 *
d©a
);

137 
i•t_awb_gë_cur_gaö
(*
rgaö
, *
ggaö
, *
bgaö
);

138 
i•t_gë_cur_Âs
(*
Âs
);

	@include_lib/system/cpu/AC521x/asm/isp_dev.h

3 #i‚de‡
_ISP_DEV_H


4 
	#_ISP_DEV_H


	)

6 
	~"˝u.h
"

7 
	~"io˘l.h
"

8 
	~"ty≥def.h
"

9 
	~"devi˚_drive.h
"

10 
	~"î∫o-ba£.h
"

12 
	#ISP_ABNORMAL_EVENT
 (10000)

	)

15 
	#ISP_DEV_MAGIC
 'i'

	)

16 
	#ISP_CMD_SET_INPUT_SIZE
 
	`_IOW
(
ISP_DEV_MAGIC
, 5, 
pic_size_t
)

	)

17 
	#ISP_CMD_SET_OUTPUT_SIZE
 
	`_IOW
(
ISP_DEV_MAGIC
, 6, 
pic_size_t
)

	)

18 
	#ISP_CMD_GET_SEN_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 7, 
pic_size_t
)

	)

19 
	#ISP_CMD_GET_ISP_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 8, 
pic_size_t
)

	)

20 
	#ISP_CMD_GET_FREQ
 
	`_IOR
(
ISP_DEV_MAGIC
, 9, 
u8
)

	)

21 
	#ISP_CMD_GET_SEN_STATUS
 
	`_IOR
(
ISP_DEV_MAGIC
, 10, 
u8
)

	)

22 
	#ISP_CMD_GET_VSIGNAL
 
	`_IOR
(
ISP_DEV_MAGIC
, 11, 
u8
)

	)

24 
	#ISP_CMD_SET_CAPTURE_MODE
 
	`_IOR
(
ISP_DEV_MAGIC
, 12, 
u32
)

	)

25 
	#ISP_CMD_SET_RECORD_MODE
 
	`_IOR
(
ISP_DEV_MAGIC
, 13, 
u32
)

	)

27 
	#ISP_CMD_GET_SEN_CAP_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 14, 
pic_size_t
)

	)

28 
	#ISP_CMD_GET_ISP_CAP_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 15, 
pic_size_t
)

	)

29 
	#ISP_CMD_GET_CAP_FREQ
 
	`_IOR
(
ISP_DEV_MAGIC
, 16, 
u8
)

	)

31 
	#ISP_CMD_GET_SEN_REC_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 17, 
pic_size_t
)

	)

32 
	#ISP_CMD_GET_ISP_REC_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 18, 
pic_size_t
)

	)

33 
	#ISP_CMD_GET_REC_FREQ
 
	`_IOR
(
ISP_DEV_MAGIC
, 19, 
u8
)

	)

34 
	#ISP_CMD_IS_NEED_REMOUNT
 
	`_IOR
(
ISP_DEV_MAGIC
, 20, 
u8
)

	)

35 
	#ISP_CMD_SET_CROP_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 21, 
u32
)

	)

36 
	#ISP_CMD_SET_CROP_SIZE_NORESET
 
	`_IOR
(
ISP_DEV_MAGIC
, 22, 
u32
)

	)

37 
	#ISP_CMD_GET_CROP_SIZE
 
	`_IOR
(
ISP_DEV_MAGIC
, 23, 
u32
)

	)

39 
	#ISP_CMD_SET_FPS
 
	`_IOW
(
ISP_DEV_MAGIC
, 24, 
u32
)

	)

40 
	#ISP_CMD_GET_REAL_FREQ
 
	`_IOR
(
ISP_DEV_MAGIC
, 25, 
u32
)

	)

44 
	mISP_RECORD_MODE
,

45 
	mISP_CAPTURE_MODE
,

46 } 
	ti•_ˇp_ªc_mode_t
;

49 
	mSEN_INTERFACE0
,

50 
	mSEN_INTERFACE1
,

51 
	mSEN_INTERFACE_CSI2
,

52 } 
	ti•_£n_if_t
;

56 
	mSEN_IN_FORMAT_RGGB
 = 0,

57 
	mSEN_IN_FORMAT_GRBG
,

58 
	mSEN_IN_FORMAT_GBRG
,

59 
	mSEN_IN_FORMAT_BGGR
,

60 
	mSEN_IN_FORMAT_YUYV
,

61 
	mSEN_IN_FORMAT_YVYU
,

62 
	mSEN_IN_FORMAT_UYVY
,

63 
	mSEN_IN_FORMAT_VYUY
,

64 } 
	t£n_ö_f‹m©_t
;

69 
	mISP_OUT_FORMAT_YUV
 = 0,

70 
	mISP_OUT_FORMAT_RAW
,

71 } 
	ti•_out_f‹m©_t
;

73 
	#SEN_MBUS_HSYNC_ACTIVE_HIGH
 (1 << 2)

	)

74 
	#SEN_MBUS_HSYNC_ACTIVE_LOW
 (1 << 3)

	)

75 
	#SEN_MBUS_VSYNC_ACTIVE_HIGH
 (1 << 4)

	)

76 
	#SEN_MBUS_VSYNC_ACTIVE_LOW
 (1 << 5)

	)

77 
	#SEN_MBUS_PCLK_SAMPLE_RISING
 (1 << 6)

	)

78 
	#SEN_MBUS_PCLK_SAMPLE_FALLING
 (1 << 7)

	)

79 
	#SEN_MBUS_DATA_ACTIVE_HIGH
 (1 << 8)

	)

80 
	#SEN_MBUS_DATA_ACTIVE_LOW
 (1 << 9)

	)

81 
	#SEN_MBUS_DATA_WIDTH_8B
 (1 << 10)

	)

82 
	#SEN_MBUS_DATA_WIDTH_10B
 (1 << 11)

	)

83 
	#SEN_MBUS_DATA_WIDTH_12B
 (1 << 12)

	)

84 
	#SEN_MBUS_DATA_REVERSE
 (1 << 13)

	)

86 
	#SEN_MBUS_FIELD_EVEN_HIGH
 (1 << 14)

	)

88 
	#SEN_MBUS_FIELD_EVEN_LOW
 (1 << 15)

	)

90 
	#SEN_MBUS_FIELDS
 (
SEN_MBUS_FIELD_EVEN_HIGH
 | 
SEN_MBUS_FIELD_EVEN_LOW
)

	)

94 
	#SEN_MBUS_CSI2_1_LANE
 (1 << 0)

	)

95 
	#SEN_MBUS_CSI2_2_LANE
 (1 << 1)

	)

96 
	#SEN_MBUS_CSI2_3_LANE
 (1 << 2)

	)

97 
	#SEN_MBUS_CSI2_4_LANE
 (1 << 3)

	)

99 
	#SEN_MBUS_CSI2_CHANNEL_0
 (1 << 4)

	)

100 
	#SEN_MBUS_CSI2_CHANNEL_1
 (1 << 5)

	)

101 
	#SEN_MBUS_CSI2_CHANNEL_2
 (1 << 6)

	)

102 
	#SEN_MBUS_CSI2_CHANNEL_3
 (1 << 7)

	)

104 
	#SEN_MBUS_CSI2_CONTINUOUS_CLOCK
 (1 << 8)

	)

105 
	#SEN_MBUS_CSI2_NONCONTINUOUS_CLOCK
 (1 << 9)

	)

107 
	#SEN_MBUS_CSI2_LANES
 (
SEN_MBUS_CSI2_1_LANE
 | 
SEN_MBUS_CSI2_2_LANE
 | \

108 
SEN_MBUS_CSI2_3_LANE
 | 
SEN_MBUS_CSI2_4_LANE
)

	)

109 
	#SEN_MBUS_CSI2_CHANNELS
 (
SEN_MBUS_CSI2_CHANNEL_0
 | 
SEN_MBUS_CSI2_CHANNEL_1
 | \

110 
SEN_MBUS_CSI2_CHANNEL_2
 | 
SEN_MBUS_CSI2_CHANNEL_3
)

	)

119 
	e£n_mbus_ty≥
 {

120 
	mSEN_MBUS_PARALLEL
,

121 
	mSEN_MBUS_BT656
,

122 
	mSEN_MBUS_BT601
,

123 
	mSEN_MBUS_CSI2
,

124 } 
	t£n_mbus_ty≥_t
;

127 
	mISP_DEV_0
 = 0x00,

128 
	mISP_DEV_1
 = 0x01,

129 
	mISP_DEV_NONE
 = 0xff,

130 } 
	ti•_id_t
;

135 
u8
(*
avö_Âs
)(*
	m∑rm
);

136 
u8
(*
avö_vÆid_sig«l
)(*
	m∑rm
);

137 
u8
(*
avö_mode_dë
)(*
	m∑rm
);

139 
s32
(*
£ns‹_check
)(
u8
 
	mi•_dev
, 
u32
 
	mª£t_gpio
, u32 
	mpwdn_gpio
);

143 
s32
(*
öô
)(
u8
 
	mi•_dev
, 
u16
 *
	mwidth
, u16 *
	mheight
, u8 *
	mf‹m©
, u8 *
	m‰ame_‰eq
);

144 
s32
(*
£t_size_Âs
)(
u16
 *
	mwidth
, u16 *
	mheight
, 
u8
 *
	m‰eq
);

145 
s32
(*
gë_mùi_˛k
)(
u32
 *
	mmùi_˛k
, u32 *
	mtvÆ_h°t
, u32 *
	mtvÆ_°to
, 
u16
 
	mwidth
, u16 
	mheight
, 
u8
 
	m‰ame_‰eq
);

146 
s32
(*
powî_˘æ
)(
u8
 
	mi•_dev
, u8 
	mis_w‹k
);

148 *(*
	mgë_´_∑øms
)();

149 *(*
	mgë_awb_∑øms
)();

150 *(*
	mgë_iq_∑øms
)();

152 (*
	m¶ìp
)();

153 (*
	mwakeup
)();

154 (*
	mwrôe_ªg
)(
u16
 
	maddr
, u16 
	mvÆ
);

155 
u16
(*
ªad_ªg
)(u16 
	maddr
);

160 } 
	t£ns‹_›s_t
;

163 
	sS_ISP_SEN
 {

164 
u8
 
	mlogo
[8];

165 
i•_id_t
 
	mi•_dev
;

167 
u8
 
	mö_f‹m©
;

169 
i•_out_f‹m©_t
 
	mout_f‹m©
;

171 
£n_mbus_ty≥_t
 
	mmbus_ty≥
;

172 
u32
 
	mmbus_c⁄fig
;

174 
u8
 
	mÂs
;

176 
u32
 
	mªÆ_Âs
;

177 
pic_size_t
 
	m£n_size
;

178 
pic_size_t
 
	mi•_size
;

180 
u8
 
	mˇp_Âs
;

181 
pic_size_t
 
	m£n_ˇp_size
;

182 
pic_size_t
 
	mi•_ˇp_size
;

185 
£ns‹_›s_t
 
	m›s
;

187 } 
	ti•_£n_t
;

190 
i•_£n_t
 
ˇmîa_dev_begö
[];

191 
i•_£n_t
 
ˇmîa_dev_íd
[];

194 
	#REGISTER_CAMERA
(
ˇmîa
) \

195 
i•_£n_t
 
ˇmîa
 
	`£c
(.
ˇmîa_dev
)

	)

198 
	#li°_f‹_óch_ˇmîa
(
c
) \

199 
c
=
ˇmîa_dev_begö
; c<
ˇmîa_dev_íd
; c++)

	)

202 
s32
 
i•1_mou¡
(
i•_£n_t
 *
∑rm
, *
d©a
) ;

203 
s32
 
i•1_unmou¡
();

204 
s32
 
i•1_io˘æ
(*
∑rm
, 
u32
 
cmd
);

205 
s32
 
i•1_powî
(
u32
 
mod
);

208 
s32
 
i•0_mou¡
(
i•_£n_t
 *
∑rm
, *
d©a
) ;

209 
s32
 
i•0_unmou¡
();

210 
s32
 
i•0_io˘æ
(*
∑rm
, 
u32
 
cmd
);

211 
s32
 
i•0_powî
(
u32
 
mod
);

214 c⁄° 
dev_io_t
 *
gë_i•0_›s
(*
∑rm
);

215 c⁄° 
dev_io_t
 *
gë_i•1_›s
(*
∑rm
);

	@include_lib/system/cpu/AC521x/asm/jive.h

11 #i‚de‡
__IMLIB_H__


12 
	#__IMLIB_H__


	)

16 
	~"ty≥def.h
"

17 
	~"os/os_≠i.h
"

19 
	#JIVE_TASK_MAX
 16

	)

21 
	#JIVE_IFMT_YUV420
 0x2

	)

22 
	#JIVE_IFMT_YUV422
 0x3

	)

24 
	#JIVE_FILTER_OFMT_B
 0x0

25 
	#JIVE_FILTER_OFMT_W
 0x1

26 

	)

27 
	#JIVE_CANNY_OFMT_AMP_AGL
 0x0

28 
	#JIVE_CANNY_OFMT_AMP
 0x1

	)

30 
	#JIVE_SUBOP_COPY_THREE_CHANNEL
 0x0

	)

31 
	#JIVE_SUBOP_COPY_SINGLE_CHANNEL
 0x1

	)

33 
	#JIVE_SUBOP_CSC_YUV2RGB
 0x0

	)

34 
	#JIVE_SUBOP_CSC_RGB2YUV
 0x1

	)

35 
	#JIVE_SUBOP_CSC_RGB2HSV
 0x2

	)

37 
	#JIVE_SUBOP_AND
 0x0

	)

38 
	#JIVE_SUBOP_OR
 0x1

	)

39 
	#JIVE_SUBOP_SUB_ABS
 0x2

	)

40 
	#JIVE_SUBOP_SUB_SHIFT
 0x3

	)

42 
	#JIVE_SUBOP_INTERGRAL_2D
 0x0

	)

43 
	#JIVE_SUBOP_INTERGRAL_1D_HORIZONTAL
 0x1

	)

44 
	#JIVE_SUBOP_INTERGRAL_1D_VERTICAL
 0x2

	)

45 
	#JIVE_SUBOP_INTERGRAL_2D_SQR
 0x3

	)

47 
	#JIVE_SUBOP_MORPH_DILATE
 0x0

	)

48 
	#JIVE_SUBOP_MORPH_ERODE
 0x1

	)

50 
	#JIVE_SUBOP_BINARY_NORMAL
 0x0

	)

51 
	#JIVE_SUBOP_BINARY_TRUNC_HIGH
 0x1

	)

52 
	#JIVE_SUBOP_BINARY_TRUNC_LOW
 0x2

	)

55 
	mOPTYPE_COPY
 = 0,

56 
	mOPTYPE_FILTER
,

57 
	mOPTYPE_CSC
,

58 
	mOPTYPE_CANNY
,

59 
	mOPTYPE_MORPH
,

60 
	mOPTYPE_BINARY
,

61 
	mOPTYPE_MATH
,

62 
	mOPTYPE_INTERGRAL
,

63 
	mOPTYPE_HIST
,

64 
	mOPTYPE_GAMMA
,

65 
	mOPTYPE_SCALE
,

66 
	mOPTYPE_MOMENT
,

67 } 
	tjive_›ty≥_t
;

69 
	söãgøl_sq_c€f
 {

70 
	mmö_vÆ
;

71 
	mmax_vÆ
;

72 
	moff£t
;

73 
	mshi·
;

76 
	sjive_èsk
 {

77 
	m√xt_addr
;

78 
	mö_fmt
 : 2;

79 
	msub_›
 : 3;

80 
	mout_fmt
 : 3;

81 
	m›_ty≥
 : 8;

82 
	mid
 : 16;

84 
	md°1_°ride
;

85 
	m§c1_°ride
;

86 
	mheight
 : 9;

87 
	mª£rved0
 : 7;

88 
	mwidth
 : 10;

89 
	mª£rved1
 : 6;

91 
	m§c1
;

92 
	m§c2
;

93 
	md°1
;

94 
	md°2
;

97 
	md°2_°ride
;

98 
	m§c2_°ride
;

100 
	mîode_kî√l
[9];

101 
	mfûãr_c€f
[9];

102 
	mthªshﬁd
;

103 
öãgøl_sq_c€f
 
	môgl_sq_c€f
;

105 
	mshi·
;

106 
	mª£rved2
;

109 
	msˇÀ_hc€f
 : 14;

110 
	mª£rved3
 : 2;

111 
	msˇÀ_vc€f
 : 14;

112 
	mª£rved4
 : 2;

113 
	msˇÀ_height
 : 9;

114 
	mª£rved5
 : 7;

115 
	msˇÀ_width
 : 10;

116 
	mª£rved6
 : 6;

117 
	mª£rved7
[2];

120 
	sjive_fh
 {

121 
jive_èsk
 *
	mèsk_tbl
;

122 
	mmax_èsk_num
;

123 
u8
 
	mem±y_èsk_idx
;

124 
u16
 
	mèsk_id
;

126 
u32
 *
	möãgøl_sq_cou¡_±r
;

127 
OS_SEM
 
	m£m
;

128 
u8
 
	m°©e
;

	@include_lib/system/cpu/AC521x/asm/jlmd.h

2 #i‚de‡
__JLMD_H__


3 
	#__JLMD_H__


	)

6 
	~"ty≥def.h
"

9 
	#JLMD_EN
 (0)

	)

10 
	#JLMD_INT_EN
 (1)

	)

11 
	#JLMD_START
 (2)

	)

12 
	#JLMD_AXI_IDLE
 (3)

	)

13 
	#JLMD_STATUS
 (4)

	)

14 
	#JLMD_ERR
 (10)

	)

15 
	#JLMD_INT_PND
 (11)

	)

16 
	#JLMD_INT_CLR
 (12)

	)

18 
	#JLMD_EN_MASK
 
	`BIT
(0)

	)

19 
	#JLMD_INT_EN_MASK
 
	`BIT
(1)

	)

20 
	#JLMD_START_MASK
 
	`BIT
(2)

	)

21 
	#JLMD_AXI_IDLE_MASK
 
	`BIT
(3)

	)

22 
	#JLMD_STATUS_MASK
 
	`BIT
(4)

	)

23 
	#JLMD_ERR_MASK
 
	`BIT
(10)

	)

24 
	#JLMD_INT_PND_MASK
 
	`BIT
(11)

	)

25 
	#JLMD_INT_CLR_MASK
 
	`BIT
(12)

	)

	@include_lib/system/cpu/AC521x/asm/jpeg_abr.h

1 #i‚de‡
_JPEG_ABR_H


2 
	#_JPEG_ABR_H


	)

3 
	~"ty≥def.h
"

5 
	sj≥g_abr_fd
 {

6 
u8
 
	mÂs
;

7 
u32
 
	mkbps
;

8 
u32
 
	mmbFa˘‹
;

9 
u32
 
	m‰ames
;

10 
u32
 
	mcur_abr
;

11 
u32
 
	mtŸÆ_kbyãs
;

12 
u8
 
	mq_°ï
;

13 
s8
 
	mmax_q
;

14 
s8
 
	mmö_q
;

15 
s8
 
	mq
;

16 } 
	tmabr_t
;

20 
mabr_t
 *
j≥g_abr_öô
(
u32
 
Âs
, u32 
abr_kbps
, u32 
w
, u32 
h
, u32 
öô_q
, u32 
max_q
, u32 
mö_q
, u32 
q_°ï
);

22 
j≥g_abr_upd©e
(
mabr_t
 *
h
, 
u32
 
¥e_kbyãs
);

25 
j≥g_abr_unöô
(
mabr_t
 *
j≥g_abr
);

27 
j≥g_abr_ª£t
(
mabr_t
 *
j≥g_abr
, 
u32
 
abr_kbps
);

29 
j≥g_abr_check_ªmaö_•a˚
(
mabr_t
 *
h
, 
u32
 
size
);

	@include_lib/system/cpu/AC521x/asm/jpeg_codec.h

7 #i‚de‡
_JPEG_CODEC_H_


8 
	#_JPEG_CODEC_H_


	)

9 
	~"ty≥def.h
"

10 
	~"devi˚/video.h
"

14 
	#JPEG0_SFR_BEGIN
 &
JPG0_CON0


	)

15 
	#JPEG1_SFR_BEGIN
 &
JPG1_CON0


	)

23 
	sjpg_dec_©å
 {

24 
u16
 
	mmax_o_width
;

25 
u16
 
	mmax_o_height
;

29 
	mSOURCE_FROM_IMC
,

30 
	mSOURCE_FROM_DDR
,

33 
	ej≥g_íc_mode
 {

34 
	mJPEG_ENC_TYPE_NONE
 = 0x0,

35 
	mJPEG_ENC_TYPE_STREAM
,

36 
	mJPEG_ENC_TYPE_IMAGE
,

37 
	mJPEG_ENC_AUTO_STREAM
,

38 
	mJPEG_ENC_MANU_STREAM
,

39 
	mJPEG_ENC_AUTO_IMAGE
,

40 
	mJPEG_ENC_MANU_IMAGE
,

43 
	#AUTO_STREAM_CAPTURE
 0x0

	)

44 
	#MANU_STREAM_CAPTURE
 0x1

	)

46 
	sj≥g_ªg
 {

47 vﬁ©ûê
u32
 
	mCON0
 ;

48 vﬁ©ûê
u32
 
	mCON1
 ;

49 vﬁ©ûê
u32
 
	mCON2
 ;

50 vﬁ©ûê
u32
 
	mYDCVAL
 ;

51 vﬁ©ûê
u32
 
	mUDCVAL
 ;

52 vﬁ©ûê
u32
 
	mVDCVAL
 ;

53 vﬁ©ûê
u32
 
	mYPTR0
 ;

54 vﬁ©ûê
u32
 
	mUPTR0
 ;

55 vﬁ©ûê
u32
 
	mVPTR0
 ;

56 vﬁ©ûê
u32
 
	mYPTR1
 ;

57 vﬁ©ûê
u32
 
	mUPTR1
 ;

58 vﬁ©ûê
u32
 
	mVPTR1
 ;

59 vﬁ©ûê
u32
 
	mBADDR
 ;

60 vﬁ©ûê
u32
 
	mBCNT
 ;

61 vﬁ©ûê
u32
 
	mMCUCNT
 ;

62 vﬁ©ûê
u32
 
	mPRECNT
 ;

63 vﬁ©ûê
u32
 
	mYUVLINE
 ;

64 vﬁ©ûê
u32
 
	mCFGRAMADDR
 ;

66 vﬁ©ûê
u32
 
	mCFGRAMVAL
 ;

67 vﬁ©ûê
u32
 
	mPTR_NUM
 ;

70 
	emjpg_úq_code
 {

71 
	mMJPG_IRQ_PRECNT
,

72 
	mMJPG_IRQ_BUFFER_FULL
,

73 
	mMJPG_IRQ_SPEED_INTEN
,

74 
	mMJPG_IRQ_NO_BUFF
,

75 
	mMJPG_IRQ_MCU_PEND
,

78 
	emjpg_‰ame_ty≥
 {

79 
	mMJPG_STREAM_FRAME
,

80 
	mMJPG_SINGLE_FRAME
,

83 
	smjpg_u£r_›s
 {

84 *(*
	mmÆloc
)(*
	m_video
, 
u32
 
	msize
);

85 *(*
	mªÆloc
)(*
	m_video
, *
	mfb
, 
	m√wsize
);

86 (*
	m‰ì
)(*
	m_video
, *
	mfb
);

87 (*
	msize
)(*
	mfb
);

88 (*
	m‰ì_size
)(*
	m_video
);

89 (*
	mouçut_‰ame_íd
)(*
	m_video
, *
	mbuf
);

92 
	sj≥g_yuv
 {

93 
u8
 *
	my
;

94 
u8
 *
	mu
;

95 
u8
 *
	mv
;

127 
	#JPG_SAMP_FMT_INVALID
 0x0

128 
	#JPG_SAMP_FMT_YUV444
 0x1

129 
	#JPG_SAMP_FMT_YUV422
 0x2

130 
	#JPG_SAMP_FMT_YUV420
 0x3

131 

	)

132 
	#BITS_MODE_CACHE
 0

	)

133 
	#BITS_MODE_UNCACHE
 1

	)

135 
	#SINGLE_BUF_MODE
 0x0

	)

136 
	#DOUBLE_BUF_MODE
 0x1

	)

137 
	#CIRCLE_BUF_MODE
 0x2

	)

138 
	#WHOLE_BUF_MODE
 0x3

	)

140 
	#INSERT_EMPTY_FRAME
 0x1

	)

141 
	#INSERT_SPECAIL_FRAME
 0x2

	)

142 
	#INVALID_Q_VAL
 0xff

	)

144 
	sj≥g_decodî_∑øm
 {

145 
u8
 
	mbôs_mode
;

146 
u8
 
	mout_mode
;

147 
u8
 
	myuv_ty≥
;

148 *
	m¥iv
;

149 (*
	myuv_out_de°
)(*
	m¥iv
, *
	m¨g
);

150 (*
	mª£t_ouçut
)(*
	m¥iv
);

151 
u8
 *
	mcbuf
;

156 
	mJPEG_INPUT_TYPE_FILE
,

157 
	mJPEG_INPUT_TYPE_DATA
,

161 
	mJPEG_DECODE_TYPE_YUV420
 = 0,

162 
	mJPEG_DECODE_TYPE_DEFAULT
,

165 
	#DEC_YUV_ALIGN_SIZE
(
size
Ë(((sizeË+ 32 - 1Ë& ~(32 - 1))

	)

166 
	sdecodî_yuv_out
 {

167 
	mlöe
;

168 
	mwidth
;

169 
	mtŸÆ_löe
;

170 
j≥g_yuv
 *
	myuv
;

171 
u8
 
	m‰ame_begö
;

172 
u8
 
	mmode
;

173 
u8
 
	myuv_ty≥
;

176 
	sj≥g_fûe
 {

177 c⁄° *
	m«me
;

180 
	sj≥g_d©a
 {

181 
u8
 *
	mbuf
;

182 
u32
 
	mÀn
;

186 
	sj≥g_decode_ªq
 {

187 
u8
 
	möput_ty≥
;

188 
u8
 
	mouçut_ty≥
;

190 
j≥g_fûe
 
	mfûe
;

191 
j≥g_d©a
 
	md©a
;

192 } 
	möput
;

193 
u8
 *
	mbuf_y
;

194 
u8
 *
	mbuf_u
;

195 
u8
 *
	mbuf_v
;

196 
u16
 
	mbuf_width
;

197 
u16
 
	mbuf_height
;

198 
u16
 
	mbuf_xoff£t
;

199 
u16
 
	mbuf_yoff£t
;

200 
u16
 
	mout_width
;

201 
u16
 
	mout_height
;

202 
u16
 
	mout_xoff£t
;

203 
u16
 
	mout_yoff£t
;

204 *
	m¥iv
;

205 (*
	m°ªam_íd
)(*
	m¥iv
);

208 
	sj≥g_image_öfo
 {

210 
j≥g_d©a
 
	md©a
;

211 } 
	möput
;

212 
	mßm∂e_fmt
;

213 
u16
 
	mwidth
;

214 
u16
 
	mheight
;

217 
	sj≥g_ícode_ªq
 {

218 
u8
 
	mf‹m©
;

219 
u8
 
	mq
;

220 
j≥g_d©a
 
	md©a
;

221 
u8
 *
	my
;

222 
u8
 *
	mu
;

223 
u8
 *
	mv
;

224 
u16
 
	mwidth
;

225 
u16
 
	mheight
;

228 
	sj≥g_codec_h™dÀ
 {

229 
	mid
;

230 vﬁ©ûê
	m°©e
;

231 
	mtimî
;

232 
j≥g_ªg
 *
	mªg
;

239 
li°_hód
 
	mícodî
;

240 
li°_hód
 
	mdecodî
;

241 (*
	m‰ame_íd
)(*
	m¥iv
, *
	mfb
);

242 
OS_SEM
 
	m£m
;

245 
	#jpg_be16_to_˝u
(
x
Ë(((x)[0] << 8Ë| (x)[1])

	)

248 
j≥g_codec_öô
();

253 
j≥g_ícode_⁄e_image
(
j≥g_ícode_ªq
 *
ªq
);

254 
j≥g_m™uÆ_ícode_‰ame
(*
fd
, 
j≥g_ícode_ªq
 *
ªq
);

273 
mjpg_h™dl2ch
(*
_fh
);

274 *
mjpg_íc_›í
(*
_öfo
, 
j≥g_íc_mode
 
mode
);

275 
mjpg_íc_gë_s_©å
(*
_fh
, 
mjpg_s_©å
 *
©å
);

276 
mjpg_íc_£t_s_©å
(*
_fh
, 
mjpg_s_©å
 *
©å
);

278 
mjpg_íc_gë_d_©å
(*
_fh
, 
mjpg_d_©å
 *
©å
);

279 
mjpg_íc_£t_d_©å
(*
_fh
, 
mjpg_d_©å
 *
©å
);

281 
mjpg_íc_£t_ouçut_Âs
(*
_fh
, 
Âs
);

283 
mjpg_íc_£t_öput_buf
(*
_fh
, 
video_ˇp_buf„r
 *
b
);

285 
mjpg_íc_£t_ouçut_buf_›s
(*
_fh
, *, c⁄° 
mjpg_u£r_›s
 *
›s
);

287 
mjpg_íc_£t_úq_h™dÀr
(*
_fh
, *
¥iv
,

288 (*
h™dÀr
)(*, 
mjpg_úq_code
, 
mjpg_‰ame_ty≥
));

289 
	`mjpg_íc_°¨t
(*
_fh
);

291 
	`mjpg_íc_∑u£
(*
fd
);

293 
	`mjpg_íc_ªsume
(*
fd
);

295 
	`mjpg_íc_k°¨t
(*
_fh
);

296 
	`mjpg_íc_mlöe_kick
(*
_fh
);

298 
	`mjpg_íc_waô_°›
(*
_fh
);

300 
	`mjpg_íc_°›
(*
_fh
);

301 
	`mjpg_°¨t_√xt_‰ame
(*
_fh
);

302 
	`mjpg_íc_˛o£
(*
_fh
);

304 *
	`mjpg_image_íc_›í
(*
_öfo
, 
j≥g_íc_mode
 
mode
);

305 *
	`mjpg_image_íc_f‹˚_›í
(*
_öfo
, 
j≥g_íc_mode
 
mode
, 
id
);

306 
	`mjpg_image_íc_°¨t
(*
_fh
, 
YUV_‰ame_d©a
 *
öput_‰ame
);

307 
	`mjpg_íc_£t_thumb«ûs
(*
_fh
, *
thumb«û
, 
size
);

308 *
	`mjpg_gë_auto_°ªam_ícodî
(*
_fh
);

309 
	`mjpg_m™u_íc_check_•a˚
(*
fd
, 
u32
 
size
);

315 
u8
 *
	`föd_jpg_‰ame
(u8 *
buf
, 
limô
);

316 *
	`j≥g_decode_›í
(*
¨g
);

317 
	`j≥g_decode_ª£t_∑øm
(*
fd
, *
¨g
);

318 
	`j≥g_decode_˛o£
(*
fd
);

319 
	`j≥g_decode_ª£t
(*
fd
, *
¨g
);

320 
	`j≥g_decode_°¨t
(*
fd
, 
u8
 *
buf
, 
Àn
);

321 
	`j≥g_decode_ªÀa£
(*
fd
);

322 
	`j≥g_dec_ch™ge_omode
(*
fd
, *
buf
, 
u8
 
mode
);

323 
	`j≥g_dec_m™uÆ_°¨t
(*
fd
, 
u8
 *
buf
, 
Àn
);

325 
	`j≥g_yuv_to_yuv420
(
j≥g_yuv
 *
§c_yuv
, j≥g_yuv *
d°_yuv
, 
u16
 
°ride
, u16 
image_w
, u16 
out_w
, 
u8
 
yuv_ty≥
, u16 
löes
);

326 
	`j≥g_decode_image_öfo
(
j≥g_image_öfo
 *
öfo
);

327 
	`j≥g_decode_⁄e_image
(
j≥g_decode_ªq
 *
ªq
);

328 
	`j≥g_yuv_to_yuv420
(
j≥g_yuv
 *
§c_yuv
, j≥g_yuv *
d°_yuv
, 
u16
 
°ride
, u16 
image_w
, u16 
out_w
, 
u8
 
yuv_ty≥
, u16 
löes
);

	@include_lib/system/cpu/AC521x/asm/jpeg_decoder.h

6 #i‚de‡
_JPEG_DECODER_H_


7 
	#_JPEG_DECODER_H_


	)

9 
	~"ty≥def.h
"

10 
	~"•ölock.h
"

11 
	~"j≥g_codec.h
"

13 
u16
 
QT_TBL
[0x80];

14 
u16
 
STD_HUFFMAN_TBL
[258];

16 
	#QTAB_ADDR
 ((
s16
 *)(
QT_TBL
))

	)

17 
	#HTAB_DC0_ADDR
 ((
u16
 *)((
u8
*)
STD_HUFFMAN_TBL
))

18 
	#HTAB_AC0_ADDR
 ((
u16
 *)((
u8
*)
STD_HUFFMAN_TBL
 + 0x30))

19 
	#HTAB_DC1_ADDR
 ((
u16
 *)((
u8
*)
STD_HUFFMAN_TBL
 + 0x30 + 0xd2))

20 
	#HTAB_AC1_ADDR
 ((
u16
 *)((
u8
*)
STD_HUFFMAN_TBL
 + 0x30 + 0xd2 + 0x30))

21 

	)

22 
	e°d_m¨kîs
 {

23 
	mDQT
 = 0xDB,

24 
	mSOF
 = 0xC0,

25 
	mDHT
 = 0xC4,

26 
	mSOI
 = 0xD8,

27 
	mSOS
 = 0xDA,

28 
	mRST
 = 0xD0,

29 
	mRST7
 = 0xD7,

30 
	mEOI
 = 0xD9,

31 
	mDRI
 = 0xDD,

32 
	mAPP0
 = 0xE0,

35 
	sdecodî_öfo
 {

36 
u8
 *
	md©a_out
;

37 
u32
 
	mcur_pos
;

38 
u16
 
	mx_pos
;

39 
u16
 
	my_pos
;

40 
u16
 
	mx
;

41 
u16
 
	my
;

42 
u16
 
	mﬁd_x
;

43 
u16
 
	mﬁd_y
;

44 
u16
 
	mﬁd_x_mcu_num
;

45 
u16
 
	mﬁd_y_mcu_num
;

46 
u16
 
	mx_mcu_num
;

47 
u16
 
	my_mcu_num
;

48 
u16
 
	mx_mcu_˙t
;

49 
u16
 
	my_mcu_˙t
;

50 
u8
 
	mßmp_Y
;

51 
u8
 
	mhèb_Y
;

52 
u8
 
	mhèb_Cr
;

53 
u8
 
	mhèb_Cb
;

54 
u8
 
	mqèb_Y
;

55 
u8
 
	mqèb_Cr
;

56 
u8
 
	mqèb_Cb
;

57 
u8
 
	my_˙t
;

60 
	sj≥g_decodî_fd
 {

61 *
	m∑ª¡
;

62 
decodî_öfo
 
	möfo
;

63 
j≥g_yuv
 
	myuv
[2];

64 
u32
 
	mmcu_num
;

65 
u32
 
	mmcu_Àn
;

66 
u32
 
	mhód_Àn
;

67 
u8
 *
	m°ªam
;

68 
u8
 *
	m°ªam_begö
;

69 
u8
 *
	m°ªam_íd
;

70 
u32
 
	mbôs_˙t
;

71 vﬁ©ûê
u8
 
	ma˘ive
;

72 
u8
 
	mbôs_mode
;

73 
u8
 
	mmode
;

74 
u8
 
	mﬁd_mode
;

75 
u8
 
	m°©e
;

76 
u8
 
	myuv_ty≥
;

77 
u8
 
	mobuf_ödex
;

78 
u8
 
	mm™uÆ_í
;

79 
u8
 
	m‰ame_íd
;

80 
u8
 
	mœ°_r°_m¨kî_£í
;

81 
u8
 
	mDRI_íabÀ
;

82 
u8
 
	m√xt_r°
;

83 
u32
 
	m√xt_r°_bôs_˙t
;

84 
u32
 
	mª°¨t_öãrvÆ
;

85 
u32
 
	mr°_mcu_˙t
;

86 
u32
 
	m‰ame_num
;

88 *
	m¥iv
;

89 (*
	mdecodî_yuv_out
)(*
	m¥iv
, *
	m¨g
);

90 (*
	mª£t_ouçut
)(*
	m¥iv
);

91 
•ölock_t
 
	mlock
;

92 
u8
 *
	mfb
;

93 
	mcb_yÀn
;

94 
	mcb_uÀn
;

95 
	mcb_vÀn
;

97 
li°_hód
 
	míåy
;

100 
j≥g_decodî_öô
(
j≥g_decodî_fd
 *
fd
, *
¨g
);

101 
j≥g_decodî_ª£t_∑øm
(
j≥g_decodî_fd
 *
fd
, *
¨g
);

102 
j≥g_decodî_˛o£
(*
_fd
);

103 
j≥g_decodî_ª£t
(*
_fd
, *
¨g
);

104 
j≥g_∑r£_hódî
(*
_fd
, *
öfo
, 
u8
 *
buf
, 
Àn
);

105 
j≥g_decodî_°¨t
(*
_fd
, 
u8
 *
j‰ame
, 
u32
 
Àn
, u8 
m™uÆ_í
);

106 
j≥g_decodî_m™uÆ_°¨t
(*
_fd
);

107 
j≥g_decodî_ªÀa£
(*
_fd
);

108 
j≥g_decodî_ch™ge_omode
(*
_fd
, 
u8
 *
obuf
, u8 
omode
);

110 
decodî_bôs_úq_h™dÀr
(
j≥g_decodî_fd
 *
fd
);

111 
decodî_mcu_úq_h™dÀr
(
j≥g_decodî_fd
 *
fd
);

	@include_lib/system/cpu/AC521x/asm/jpeg_encoder.h

10 #i‚de‡ 
__JPEG_ENCODER_H__


11 
	#__JPEG_ENCODER_H__


	)

13 
	~"ty≥def.h
"

14 
	~"j≥g_codec.h
"

15 
	~"asm/j≥g_abr.h
"

16 
	~"devi˚/video.h
"

50 
	#JPEG_DEFAULT_EXIF_LEN
 0xA8

52 

	)

56 
	#FRAME_INT
 1

	)

57 
	#JPEG_MODLE_NUM
 1

58 

	)

59 
	#JPEG_ENC_INT_EN
 1

60 

	)

61 
	#JPEG_ENCODE_BITCNT
 0x1000

62 

	)

63 
	#JPEG_INT_EN
(Ë
ªg
->
CON0
 |
	`BIT
(2)|BIT(3)

	)

64 
	#JPEG_INT_DIS
(Ë
ªg
->
CON0
 &=~(
	`BIT
(2)|BIT(3))

	)

66 
	#JPEG_FTYPE_NORMAL
 1

	)

67 
	#JPEG_FTYPE_SKIP
 2

	)

69 
	#BUILD_DYNAMIC_HUFFMAN
 1

	)

70 
	#ENABLE_JPEG_ABR
 1

	)

71 
	#ENABLE_ZOOM_ENC
 0

	)

73 
	#JPEGENC_KSTART
 0x80

	)

74 
	#JPEGENC_RESET
 0x40

	)

75 
	#JPEGENC_BITS_FULL
 0x20

	)

76 
	#JPEGENC_STATUS
 0xf

	)

80 
	#SMP_ENABLE
 0

	)

83 
	mJPEG_SEEK_SET
 = 0x01,

84 
	mJPEG_SEEK_CUR
 = 0x02,

89 
	mJPEGENC_UNINIT
 = 0x0,

90 
	mJPEGENC_INIT
,

91 
	mJPEGENC_IDLE
,

92 
	mJPEGENC_STOP
,

93 
	mJPEGENC_RUNNING
,

94 
	mJPEGENC_STOPING
,

95 
	mJPEGENC_FRAME_END
,

96 
	mJPEGENC_FRAME_ERR
,

99 #i‡
BUILD_DYNAMIC_HUFFMAN


101 
	mHUFFMAN_NO_INIT
 = 0x0,

102 
	mHUFFMAN_OPEN
,

103 
	mHUFFMAN_CLOSE
,

114 
jpg_q_èbÀ
 
	tqtfûehód_t
;

116 
	sfûl_‰ame
 {

117 
u8
 
	mf‹biddí
;

118 vﬁ©ûê
u8
 
	míabÀ
;

119 vﬁ©ûê
u8
 
	m¸i
;

120 
	mtimî
;

121 
	m⁄e_£c_timî
;

122 
u32
 
	mm£cs
;

123 
u32
 
	m⁄e_£c_m£cs
;

124 
u32
 
	m£cs
;

125 
u32
 
	möãrvÆ
;

126 
u32
 
	mc⁄t
;

127 
u32
 
	mfba£
;

128 
u32
 
	m⁄e_£c_fba£
;

129 
u32
 
	m‚um
;

130 
u32
 
	m˙t_‚um
;

131 
u32
 
	mÂs
;

135 
	sj≥g_ícode_öfo
 {

136 
u16
 
	mwidth
;

137 
u16
 
	mheight
;

138 
u32
 
	mkbps
;

139 
u8
 
	mÂs
;

140 
u8
 
	msour˚
;

141 
u8
 
	mfmt
;

142 
u8
 
	mmode
;

143 
u8
 
	mbôs_mode
;

144 
u8
 
	mq_vÆ
;

145 
u8
 
	mvbuf_num
;

146 
jpg_q_èbÀ
 *
	mqt
;

149 
	sj≥g_ícodî_fd
 {

150 *
	m∑ª¡
;

151 
j≥g_ícode_öfo
 
	möfo
;

154 
u8
 
	m∑ª¡_°©e
;

155 vﬁ©ûê
u8
 
	ma˘ive
;

156 
u8
 
	m°d_huffm™
;

157 
u8
 
	mícodî_ru¬ög
;

158 
u8
 
	mícodî_ª£t
;

159 
u8
 
	míabÀ_abr
;

160 
u8
 
	míabÀ_dyhuffm™
;

161 
u8
 
	mh‹i_ßm∂e
;

162 
u8
 
	mvît_ßm∂e
;

163 
u8
 
	mßm∂e_øã
;

164 vﬁ©ûê
u8
 
	m°©e
;

165 vﬁ©ûê
u8
 
	mmcu_≤d
;

166 vﬁ©ûê
u32
 
	mmcu_˙t
;

167 vﬁ©ûê
u32
 
	mmcu_löe_˙t
;

168 vﬁ©ûê
u32
 
	mícode_mcu
;

169 vﬁ©ûê
u32
 
	mbôs_˙t
;

170 vﬁ©ûê
u32
 
	mfûe_size
;

171 
u32
 
	mbuf_Àn
;

173 
video_ˇp_buf„r
 
	mˇp_buf„r
;

174 
u8
 *
	md©a
;

175 
u8
 *
	mexif
;

176 
	mexif_size
;

177 
u8
 *
	mthumb«ûs
;

178 
	mthumb_Àn
;

179 
	mhód_Àn
;

180 
	mf_div_cou¡
;

181 *
	m¥iv
;

182 *
	múq_¥iv
;

183 *
	mfb
;

184 (*
	múq_h™dÀr
)(*
	m¥iv
, 
mjpg_úq_code
 
	mcode
, 
mjpg_‰ame_ty≥
 
	mty≥
);

186 c⁄° 
mjpg_u£r_›s
 *
	m›s
;

187 
OS_SEM
 
	m£m_°›
 ;

188 
OS_SEM
 
	m£m_dhuffm™
;

189 
OS_SEM
 
	m£m_mcu_≤d
;

190 *
	mdync_hufÁn_fh
;

191 #i‡
SMP_ENABLE


192 
•ölock_t
 
	mlock
;

195 #i‡
ENABLE_JPEG_ABR


196 
j≥g_abr_fd
 *
	mabr_fd
;

198 
li°_hód
 
	míåy
;

202 
ölöe
 
u8
 
	$GET_ENCODER_STATE
(
j≥g_ícodî_fd
 *
fd
)

204 
u8
 
°©e
;

205 #i‡
SMP_ENABLE


206 
	`•ö_lock
(&
fd
->
lock
);

208 
°©e
 = 
fd
->state & 0xf;

209 #i‡
SMP_ENABLE


210 
	`•ö_u∆ock
(&
fd
->
lock
);

212  
°©e
;

213 
	}
}

215 
ölöe
 
	$SET_ENCODER_STATE
(
j≥g_ícodî_fd
 *
fd
, 
u8
 
°©e
)

217 #i‡
SMP_ENABLE


218 
	`•ö_lock
(&
fd
->
lock
);

220 
fd
->
°©e
 = (fd->state & 0xf0) | (state & 0xf);

221 
	`__asm_csync
();

222 #i‡
SMP_ENABLE


223 
	`•ö_u∆ock
(&
fd
->
lock
);

225 
	}
}

227 
j≥g_m™uÆ_ícodî_öô
(
j≥g_ícodî_fd
 *
fd
, *
¨g
);

228 
j≥g_ícodî_öô
(
j≥g_ícodî_fd
 *
fd
, *
¨g
, 
j≥g_íc_mode
 
mode
);

229 
j≥g_ícodî_°¨t
(*
_fd
);

230 
gë_j≥g_ícodî_s_©å
(*
_fd
, 
mjpg_s_©å
 *
©å
);

231 
£t_j≥g_ícodî_s_©å
(*
_fd
, 
mjpg_s_©å
 *
©å
);

232 
gë_j≥g_ícodî_d_©å
(*
_fd
, 
mjpg_d_©å
 *
©å
);

233 
£t_j≥g_ícodî_d_©å
(*
_fd
, 
mjpg_d_©å
 *
©å
);

234 
£t_j≥g_ícodî_Âs
(*
_fh
, 
Âs
);

235 
£t_j≥g_ícodî_sbuf
(*
_fh
, 
video_ˇp_buf„r
 *
b
);

236 
£t_j≥g_ícodî_u£r_›s
(*
_fh
, *
¥iv
, c⁄° 
mjpg_u£r_›s
 *
›s
);

237 
£t_j≥g_ícodî_h™dÀr
(*
_fh
, *
¥iv
, (*
h™dÀr
)(*, 
mjpg_úq_code
, 
mjpg_‰ame_ty≥
));

238 
	`j≥g_ícodî_°›
(*
_fh
);

239 
	`j≥g_ícodî_waô_°›
(*
_fh
);

240 
	`j≥g_ícodî_ª°¨t
(*
_fd
);

241 
	`j≥g_ícodî_m™uÆ_°¨t
(*
_fd
, 
YUV_‰ame_d©a
 *
öput_‰ame
);

242 
	`j≥g_ícodî_ª£t_bôs_øã
(*
_fd
, 
u32
 
bôs_øã
);

243 
	`j≥g_ícodî_ª£t
(*
_fd
, 
u8
 
öô_hw
);

244 
	`j≥g_ícodî_∑u£
(*
_fd
);

245 
	`j≥g_ícodî_˛o£
(*
_fd
);

246 
	`j≥g_ícodî_image_°¨t
(*
_fd
, *
¨g
, 
u8
 
f‹_°ªam
);

247 
	`j≥g_ícodî_check_•a˚
(*
_fh
, 
u32
 
size
);

248 
	`j≥g_ícodî_mcu_löe_kick
(*
_fd
);

250 
	`ícodî_dhuffm™_úq_h™dÀr
(
j≥g_ícodî_fd
 *
fd
);

251 
	`ícodî_•ìd_úq_h™dÀr
(
j≥g_ícodî_fd
 *
fd
);

252 
	`ícodî_bôs_úq_h™dÀr
(
j≥g_ícodî_fd
 *
fd
);

253 
	`ícodî_mcu_úq_h™dÀr
(
j≥g_ícodî_fd
 *
fd
);

256 #i‡
BUILD_DYNAMIC_HUFFMAN


257 *
	`huffm™_öô
(
j≥g_ícodî_fd
 *
fd
);

258 
	`huffm™_unöô
(*
fh
);

259 
	`upd©e_huffm™_öfo
(*
fh
, *
ªg
, 
u8
 *
buf
);

260 
	`upd©e_huff_‰eq_d©a
(*
fh
, *
ªg
);

261 
	`ª£t_dy«mic_huffm™
(*
fh
);

	@include_lib/system/cpu/AC521x/asm/jpeg_haffman.h

2 #i‚de‡
__HAFFMAN_H__


3 
	#__HAFFMAN_H__


	)

6 
	~"ty≥def.h
"

39 
	sègHUFFCODE
 {

40 
u16
 
	mcode
;

41 
u8
 
	mÀngth
;

42 } 
	tHUFFCODE
;

44 #¥agm®
∑ck
(1)

45 
	sj≥g_dht
 {

46 
u16
 
	m£gmítTag
;

47 
u8
 
	mª£rved
;

48 
u8
 
	mÀngth
;

49 
u8
 
	mèbÀInfo
;

50 
u8
 
	mhuffCode
[16];

51 } 
	tJPEGDHT
;

52 #¥agm®
∑ck
()

55 
u8
 
	gdc_vÆues
[12] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};

57 
u8
 
	gac_vÆues
[162] = {

	@include_lib/system/cpu/AC521x/asm/jpeg_header.h

6 #i‚de‡
_JPEG_HEADER_H_


7 
	#_JPEG_HEADER_H_


	)

8 
	~"ty≥def.h
"

9 
	~"j≥g_ícodî.h
"

10 c⁄° 
u8
 
	gj≥g_fûe_hódî
[624 + 
JPEG_DEFAULT_EXIF_LEN
] = {

15 #i‡
JPEG_DEFAULT_EXIF_LEN


	@include_lib/system/cpu/AC521x/asm/jpeg_qt_huffman.h

6 #i‚de‡
_JPEG_QT_HUFFMAN_H_


7 
	#_JPEG_QT_HUFFMAN_H_


	)

8 
	~"j≥g_ícodî.h
"

10 
qtfûehód_t
 c⁄° 
	gqtfûehód
[] = {

568 c⁄° 
u32
 
	gSTD_DC_Y_HT
[12] 
__©åibuã__
((
Æig√d
(32))) = {

572 c⁄° 
u32
 
	gSTD_AC_Y_HT
[162] 
__©åibuã__
((
Æig√d
(32))) = {

589 c⁄° 
u32
 
	gSTD_DC_UV_HT
[12] 
__©åibuã__
((
Æig√d
(32))) = {

593 c⁄° 
u32
 
	gSTD_AC_UV_HT
[162] 
__©åibuã__
((
Æig√d
(32))) = {

	@include_lib/system/cpu/AC521x/asm/ladc.h

1 #i‚de‡
__LADC_H__


2 
	#__LADC_H__


	)

4 
	~"gíîic/ty≥def.h
"

8 
	#LADC_BUF_FLAG
(Ë(
ADC_CON
 & 
	`BIT
(8))

9 
	#LADC_PND
(Ë(
ADC_CON
 & 
	`BIT
(7))

	)

10 
	#LADC_CPND
(Ë(
ADC_CON
 |
	`BIT
(6))

	)

11 
	#LADC_IE
(Ë(
ADC_CON
 & 
	`BIT
(5))

	)

14 
	#ADC_SAMPRATE_44_1KHZ
 0

	)

15 
	#ADC_SAMPRATE_48KHZ
 1

	)

16 
	#ADC_SAMPRATE_32KHZ
 2

	)

17 
	#ADC_SAMPRATE_22_05KHZ
 3

	)

18 
	#ADC_SAMPRATE_24KHZ
 4

	)

19 
	#ADC_SAMPRATE_16KHZ
 5

	)

20 
	#ADC_SAMPRATE_11_025KHZ
 6

	)

21 
	#ADC_SAMPRATE_12KHZ
 7

	)

22 
	#ADC_SAMPRATE_8KHZ
 8

	)

26 
	#LADC_CH_MIC_L
 
	`BIT
(0)

27 
	#LADC_CH_MIC_R
 
	`BIT
(1)

28 
	#LADC_CH_LINE0_L
 
	`BIT
(2)

29 
	#LADC_CH_LINE0_R
 
	`BIT
(3)

30 
	#LADC_CH_LINE1_L
 
	`BIT
(4)

31 
	#LADC_CH_LINE1_R
 
	`BIT
(5)

32 

	)

33 
	#LADC_MIC_MASK
 (
	`BIT
(0Ë| BIT(1))

	)

34 
	#LADC_LINE0_MASK
 (
	`BIT
(2Ë| BIT(3))

	)

35 
	#LADC_LINE1_MASK
 (
	`BIT
(4Ë| BIT(5))

	)

37 
	sadc_∂©f‹m_d©a
 {

38 
u8
 
	mmic_ch™√l
;

39 
u8
 
	mlöeö_ch™√l
;

40 
u8
 
	mldo_£l
;

44 
dv15_adc_›í
(
ßm∂e_øã
, 
ch™√l
, 
u8
 
ldo_£l
);

47 
dv15_adc_£t_ßm∂e_øã
(
ßm∂e_øã
);

49 
dv15_adc_°¨t
();

52 
dv15_adc_°›
();

55 
dv15_adc_˛o£
();

57 
dv15_adc_£t_d©a_h™dÀr
(*
¥iv
, (*
h™dÀr
)(*, 
u8
 *
d©a
, 
Àn
));

59 
	`dv15_adc_£t_gaö
(
u8
 
gaö_vÆ
);

	@include_lib/system/cpu/AC521x/asm/lcd_config.h

1 #i‚de‡
__LCD_CONFIG_H__


2 
	#__LCD_CONFIG_H__


	)

4 
	~"≠p_c⁄fig.h
"

5 
	~"devi˚/lcd_drivî.h
"

7 #i‡(
deföed
 
LCD_AVOUT
)

9 
	#NTSC_720
 0

	)

10 
	#PAL_720
 1

	)

11 
	#NTSC_960
 2

	)

12 
	#PAL_960
 3

	)

13 
	#AVOUT_MODE
 
PAL_960


	)

15 
	#RTC_32K
 0

	)

16 
	#OSC1_12M
 1

	)

17 
	#AVOUT_OSC
 
OSC1_12M


	)

22 #i‡(
AVOUT_MODE
 =
NTSC_720
)

23 
	#LCD_DEV_WIDTH
 720

	)

24 
	#LCD_DEV_HIGHT
 480

	)

25 #ñi‡(
AVOUT_MODE
 =
PAL_720
)

26 
	#LCD_DEV_WIDTH
 720

	)

27 
	#LCD_DEV_HIGHT
 576

	)

28 #ñi‡(
AVOUT_MODE
 =
NTSC_960
)

29 
	#LCD_DEV_WIDTH
 960

	)

30 
	#LCD_DEV_HIGHT
 480

	)

31 #ñi‡(
AVOUT_MODE
 =
PAL_960
)

32 
	#LCD_DEV_WIDTH
 960

	)

33 
	#LCD_DEV_HIGHT
 576

	)

38 #i‡(
deföed
 
LCD_AVOUT_HD
)

39 
	#LCD_DEV_WIDTH
 1280

	)

40 
	#LCD_DEV_HIGHT
 720

	)

44 #i‡(
deföed
 
LCD_DSI_DCS_1LANE_16BIT
) ||\

45 (
deföed
 
	gLCD_DSI_DCS_1LANE_24BIT
)

46 
	#LCD_DEV_WIDTH
 640

	)

47 
	#LCD_DEV_HIGHT
 360

	)

51 #i‡(
deföed
 
LCD_DSI_DCS_2LANE_24BIT
)

52 
	#LCD_DEV_WIDTH
 854

	)

53 
	#LCD_DEV_HIGHT
 480

	)

57 #i‡(
deföed
 
LCD_DSI_DCS_4LANE_1080P
)

59 
	#LCD_DEV_WIDTH
 1280

60 
	#LCD_DEV_HIGHT
 720

62 

	)

63 #i‡(
deföed
 
LCD_DSI_DCS_4LANE_720P
)

64 
	#LCD_DEV_WIDTH
 1280

	)

65 
	#LCD_DEV_HIGHT
 720

	)

68 #i‡(
deföed
 
LCD_DSI_VDO_4LANE_720P_RM68200GA1
)

69 
	#LCD_DEV_WIDTH
 1280

	)

70 
	#LCD_DEV_HIGHT
 720

	)

73 #i‡(
deföed
 
LCD_480x272
) || \

74 (
deföed
 
	gLCD_480x272_8BITS
)

75 
	#LCD_DEV_WIDTH
 480

	)

76 
	#LCD_DEV_HIGHT
 272

	)

79 #i‡(
deföed
 
LCD_DSI_VDO_4LANE_MIPI
) || \

80 (
deföed
 
	gLCD_DSI_VDO_2LANE_MIPI_EK79030
) || \

81 (
deföed
 
	gLCD_DSI_VDO_4LANE_MIPI_EK79030
) || \

82 (
deföed
 
	gLCD_DSI_VDO_4LANE_MIPI_ICN9706
)

84 
	#LCD_DEV_WIDTH
 1280

	)

85 
	#LCD_DEV_HIGHT
 480

	)

87 
	#LCD_DEV_WIDTH
 480

	)

88 
	#LCD_DEV_HIGHT
 272

	)

92 #i‡(
deföed
 
LCD_HX8369A_MCU
)|| \

93 (
deföed
 
	gLCD_HX8369A_SPI_RGB
)

94 
	#LCD_DEV_WIDTH
 800

	)

95 
	#LCD_DEV_HIGHT
 480

	)

98 #i‡(
deföed
 
LCD_ST7789S_MCU
)

99 
	#LCD_DEV_WIDTH
 320

	)

100 
	#LCD_DEV_HIGHT
 240

	)

104 #i‡(
deföed
 
LCD_MIPI_4LANE_S8500L0
)

106 
	#LCD_DEV_WIDTH
 864

107 
	#LCD_DEV_HIGHT
 224

109 

	)

111 #i‡(
deföed
 
LCD_DSI_VDO_4LANE_1280x400
)

112 
	#LCD_DEV_WIDTH
 1280

	)

113 
	#LCD_DEV_HIGHT
 400

	)

116 #i‡(
deföed
 
LCD_LX50FWB4001_V2
)

117 
	#LCD_DEV_WIDTH
 480

	)

118 
	#LCD_DEV_HIGHT
 856

	)

121 #i‡(
deföed
 
LCD_DSI_VDO_4LANE_1600x400_WTL098802G01_1
)

122 
	#LCD_DEV_WIDTH
 1600

	)

123 
	#LCD_DEV_HIGHT
 400

	)

126 #ifde‡
MIPI_LCD_800X480_BST40_L5


127 
	#LCD_DEV_WIDTH
 480

	)

128 
	#LCD_DEV_HIGHT
 272

	)

131 #ifde‡
CONFIG_DISPLAY_ENABLE


132 #i‚de‡
LCD_DEV_WIDTH


133 #îr‹ 
lcd
 
i¢
't definition!!!

136 
	#LCD_DEV_WIDTH
 0

	)

137 
	#LCD_DEV_HIGHT
 0

	)

	@include_lib/system/cpu/AC521x/asm/ldo.h

2 #i‚de‡
__LDO_H


3 
	#__LDO_H


	)

6 
	e__AVDD18
 {

7 
	mAVDD18_14922
 = 0x00,

8 
	mAVDD18_15969
 = 0x01,

9 
	mAVDD18_17016
 = 0x02,

10 
	mAVDD18_18063
 = 0x03,

11 
	mAVDD18_19110
 = 0x04,

12 
	mAVDD18_20157
 = 0x05,

13 
	mAVDD18_21205
 = 0x06,

14 
	mAVDD18_22252
 = 0x07,

15 } 
	tAVDD18_LEV
;

18 
	e__AVDD28
 {

19 
	mAVDD28_2499
 = 0x00,

20 
	mAVDD28_2600
 = 0x01,

21 
	mAVDD28_2702
 = 0x02,

22 
	mAVDD28_2803
 = 0x03,

23 
	mAVDD28_2905
 = 0x04,

24 
	mAVDD28_3006
 = 0x05,

25 
	mAVDD28_3107
 = 0x06,

26 
	mAVDD28_3208
 = 0x07,

27 } 
	tAVDD28_LEV
;

30 
	e__DDRVDD
 {

32 
	mDDRVDD_1596_2300
 = 0x00,

33 
	mDDRVDD_1666_2369
 = 0x01,

34 
	mDDRVDD_1736_2439
 = 0x02,

35 
	mDDRVDD_1806_2509
 = 0x03,

36 
	mDDRVDD_1875_2579
 = 0x04,

37 
	mDDRVDD_1945_2649
 = 0x05,

38 
	mDDRVDD_2015_2718
 = 0x06,

39 
	mDDRVDD_2050_2753
 = 0x07,

40 } 
	tDDRVDD_LEV
;

42 
	e__DVDD
 {

43 
	mDVDD_0904
 = 0x00,

45 
	mDVDD_1004
 = 0x02,

46 
	mDVDD_1104
 = 0x03,

47 
	mDVDD_1205
 = 0x04,

48 
	mDVDD_1305
 = 0x05,

49 
	mDVDD_1355
 = 0x06,

50 
	mDVDD_1405
 = 0x07,

51 } 
	tDVDD_LEV
;

53 
avdd28_˘æ
(
AVDD28_LEV
 
Àv
, 
u8
 
avdd28í
);

54 
avdd18_¸é
(
AVDD18_LEV
 
Àv
, 
u8
 
avdd18í
);

55 
ddrvdd_˘æ
(
DDRVDD_LEV
 
Àv
, 
u8
 
sddr1
, u8 
ddrvddí
);

56 
dvdd_˘æ
(
DVDD_LEV
 
Àv
);

57 
lvd_cfg
(
u8
 
Àv
);

	@include_lib/system/cpu/AC521x/asm/lock.h

18 #i‚de‡
_DSP_LOCK_H_


19 
	#_DSP_LOCK_H_


	)

21 
	~"ty≥def.h
"

23 #ifde‡ 
DSP_LOCK_GLOBALS


24 
	#DSP_LOCK_EXT


	)

26 
	#DSP_LOCK_EXT
 

	)

30 
hﬁd_˝u
();

31 
ªÀa£_˝u
();

33 
u8
 
	tlock_§
;

35 
	#DSP_LOCK
(
lock_ödex
Ëdo{
	`asm
("TESTSET (%0Ë;i‡!c¯jum∞-2 ":: "p"÷ock_ödex));}0)

	)

36 
	#DSP_UNLOCK
(
lock_ödex
Ëdo{*lock_ödex = 0;}0)

	)

38 
DSP_LOCK_EXT
 
lock_§
 
dma0_˝y_lock_ödex
 
__©åibuã__
((
£˘i⁄
(".dsp_lock_index")));

39 
	#DMA0_CPY_DSP_LOCK
(Ë
	`DSP_LOCK
(&
dma0_˝y_lock_ödex
)

	)

40 
	#DMA0_CPY_DSP_UNLOCK
(Ë
	`DSP_UNLOCK
(&
dma0_˝y_lock_ödex
)

	)

42 
DSP_LOCK_EXT
 
lock_§
 
dma1_˝y_lock_ödex
 
__©åibuã__
((
£˘i⁄
(".dsp_lock_index")));

43 
	#DMA1_CPY_DSP_LOCK
(Ë
	`DSP_LOCK
(&
dma1_˝y_lock_ödex
)

	)

44 
	#DMA1_CPY_DSP_UNLOCK
(Ë
	`DSP_UNLOCK
(&
dma1_˝y_lock_ödex
)

	)

46 
DSP_LOCK_EXT
 
lock_§
 
checksum_lock_ödex
 
__©åibuã__
((
£˘i⁄
(".dsp_lock_index")));

47 
	#CHECKSUM_DSP_LOCK
(Ë
	`DSP_LOCK
(&
checksum_lock_ödex
)

	)

48 
	#CHECKSUM_DSP_UNLOCK
(Ë
	`DSP_UNLOCK
(&
checksum_lock_ödex
)

	)

	@include_lib/system/cpu/AC521x/asm/pap.h

1 #i‚de‡
_PAP_H_


2 
	#_PAP_H_


	)

4 
	~"ty≥def.h
"

5 
	~"asm/˝u.h
"

8 
	#PAP_WAIT
(Ëdo{!(
PAP_CON
&
	`BIT
(7)));PAP_CON |= BIT(6);}0)

9 
	#PAP_WAIT_NCLR
(Ëdo{!(
PAP_CON
&
	`BIT
(7)));}0)

10 

	)

11 
	#PAPDEN
 14

12 
	#PAPREN
 13

13 
	#PAPWEN
 12

14 

	)

15 
	#PAP_PORT_EN
(Ë
IOMC0
 |((1L<<
PAPDEN
)|(1L<<
PAPREN
)|(1L<<
PAPWEN
))

16 
	#PAP_PORT_DIS
(Ë
IOMC0
 &=~((1L<<
PAPDEN
)|(1L<<
PAPREN
)|(1L<<
PAPWEN
))

17 
	#PAP_PORT_SEL
()

	)

19 
	#PAP_EXT_EN
(Ë
PAP_CON
 |
	`BIT
(16)

20 
	#PAP_EXT_DIS
(Ë
PAP_CON
 &~
	`BIT
(16)

21 
	#PAP_EXT_M2L
(Ë
PAP_CON
 |
	`BIT
(17)

22 
	#PAP_EXT_L2M
(Ë
PAP_CON
 &~
	`BIT
(17)

23 
	#PAP_IE
(
x
Ë
PAP_CON
 = (
PAPCON
 & ~
	`BIT
(18)Ë| ((x & 0x1)<<18)

	)

26 
	#PAP_PORT_8BITS
 0

	)

27 
	#PAP_PORT_16BITS
 1

	)

30 
	#PAP_LE
 0

	)

31 
	#PAP_BE
 1

	)

34 
	#PAP_CYCLE_ONE
 0

35 
	#PAP_CYCLE_TWO
 1

36 

	)

37 
	s∑p_öfo
 {

38 
u8
 
	md©awidth
;

39 
u8
 
	mídün
;

40 
u8
 
	mcy˛e
;

41 
u8
 
	mtimög_£tup
;

42 
u8
 
	mtimög_hﬁd
;

43 
u8
 
	mtimög_width
;

46 c⁄° 
devi˚_›î©i⁄s
 
∑p_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/port_waked_up.h

1 #i‚de‡ 
__PORT_WAKED_UP_H__


2 
	#__PORT_WAKED_UP_H__


	)

4 
	~"ty≥def.h
"

6 
	#CLEAR_PORT_PEND
(Ë
WKUP_CON2
 = 0xffff

	)

7 
	#READ_PORT_PEND
(Ë
WKUP_CON3


	)

8 
	#WKUP_ENABLE
(
x
Ë
WKUP_CON0
 |
	`BIT
(x)

	)

9 
	#WKUP_DISABLE
(
x
Ë
WKUP_CON0
 &(~
	`BIT
(x))

	)

10 
	#WKUP_EDGE
(
x
,
edg
Ë
WKUP_CON1
 = ((WKUP_CON1 & (~
	`BIT
(x))Ë| (edg? BIT(x): 0))

	)

11 
	#WKUP_CLEAR_PEND
(
x
Ë(
WKUP_CON2
 |
	`BIT
(x))

	)

15 
	mEVENT_IO_0
 = 0,

16 
	mEVENT_IO_1
,

17 
	mEVENT_SDC0_DAT1
,

18 
	mEVENT_SDC1_DAT1
,

19 
	mEVENT_SDC2_DAT1
,

20 
	mEVENT_UT0_RX
,

21 
	mEVENT_UT1_RX
,

22 
	mEVENT_UT2_RX
,

23 
	mEVENT_UT3_RX
,

24 
	mEVENT_IO_2
,

25 
	mEVENT_PB03
,

26 
	mEVENT_PB14
,

27 
	mEVENT_PE4
,

28 
	mEVENT_PE5
,

29 
	mEVENT_PH7
,

30 
	mEVENT_PH10
,

31 
	mEVENT_PH14
,

32 
	mEVENT_PH15
,

33 } 
	tPORT_EVENT_E
;

36 
	mEDGE_POSITIVE
 = 0,

37 
	mEDGE_NEGATIVE
,

38 } 
	tPORT_EDGE_E
;

41 *
p‹t_wakeup_ªg
((*
h™dÀr
)(*
¥iv
), *priv);

43 
	`p‹t_wakeup_uƒeg
(*
hdl
);

45 *
	`P‹t_Wakeup_Reg
(
PORT_EVENT_E
 
evít
, 
gpio
, 
PORT_EDGE_E
 
edge
, (*
h™dÀr
)(*
¥iv
), *priv);

46 
	`P‹t_Wakeup_UnReg
(*
hdl
);

	@include_lib/system/cpu/AC521x/asm/power_inf.h

1 #i‚de‡
_POWER_INF_H_


2 
	#_POWER_INF_H_


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"asm/πc.h
"

7 #ifde‡
__˝lu•lus


11 
	swkup_io_m≠
 {

12 c⁄° *
wkup_p‹t
;

13 
p‹å
;

14 
edge
;

17 
	spowî_∂©f‹m_d©a
 {

18 
u16
 
vﬁège_èbÀ
[10][2];

19 
wkup_io_m≠
 
wkup_m≠
[5];

20 
u8
(*
ªad_powî_key
)();

21 
u8
(*
pwr_˘l
)(u8 
⁄_off
);

22 
u16
 
mö_b©_powî_vÆ
;

23 
u16
 
max_b©_powî_vÆ
;

24 
u8
(*
ch¨gî_⁄löe
)();

25 
u32
(*
ch¨gî_gpio
)();

28 
	#POWER_PLATFORM_DATA_BEGIN
(
d©a
) \

29 
powî_∂©f‹m_d©a
 
d©a
 = {

	)

31 
	#POWER_PLATFORM_DATA_END
() \

32 };

	)

34 
	#ENABLE_SAMPLE_VAL
 1

	)

36 #ifde‡
__∂u•lus


	@include_lib/system/cpu/AC521x/asm/pwm.h

1 #i‚de‡
_TIME_PWM_H


2 
	#_TIME_PWM_H


	)

4 
	~"ö˛udes.h
"

5 
	~"devi˚/devi˚.h
"

7 
	#PWM_MAX_NUM
 6

8 

	)

12 
	#PWMCH0
 0

	)

13 
	#PWMCH1
 1

	)

14 
	#PWMCH2
 2

	)

15 
	#PWMCH3
 3

	)

16 
	#PWMCH4
 4

	)

17 
	#PWMCH5
 5

	)

20 
	#PWM_STOP
 
	`_IOW
('P',0,
u32
)

	)

21 
	#PWM_RUN
 
	`_IOW
('P',1,
u32
)

	)

22 
	#PWM_FORDIRC
 
	`_IOW
('P',2,
u32
)

23 
	#PWM_REVDIRC
 
	`_IOW
('P',3,
u32
)

24 
	#PWM_SET_DUTY
 
	`_IOW
('P',4,
u32
)

	)

25 
	#PWM_SLE_TIMER
 
	`_IOW
('P',5,
u32
)

	)

26 
	#PWM_SET_FREQ
 
	`_IOW
('P',6,
u32
)

	)

27 
	#PWM_SET_DEATH_TIME
 
	`_IOW
('P',7,
u32
)

	)

30 
	#PWM_GET_DUTY
 
	`_IOR
('P',0,
u32
)

	)

34 
	#PWMCH0_CMP_REG_W
 
	`_IOW
('P',8,
u32
)

	)

35 
	#PWMCH1_CMP_REG_W
 
	`_IOW
('P',9,
u32
)

	)

36 
	#PWMCH2_CMP_REG_W
 
	`_IOW
('P',10,
u32
)

	)

37 
	#PWMCH3_CMP_REG_W
 
	`_IOW
('P',11,
u32
)

	)

38 
	#PWMCH4_CMP_REG_W
 
	`_IOW
('P',12,
u32
)

	)

39 
	#PWMCH5_CMP_REG_W
 
	`_IOW
('P',13,
u32
)

	)

41 
	#PWMCH0_PRD_REG_R
 
	`_IOR
('P',0,
u32
)

	)

42 
	#PWMCH1_PRD_REG_R
 
	`_IOR
('P',1,
u32
)

	)

43 
	#PWMCH2_PRD_REG_R
 
	`_IOR
('P',2,
u32
)

	)

44 
	#PWMCH3_PRD_REG_R
 
	`_IOR
('P',3,
u32
)

	)

45 
	#PWMCH4_PRD_REG_R
 
	`_IOR
('P',4,
u32
)

	)

46 
	#PWMCH5_PRD_REG_R
 
	`_IOR
('P',5,
u32
)

	)

50 
	#PWM_PORTA
 'A'

	)

51 
	#PWM_PORTF
 'B'

	)

52 
	#PWM_PORTH
 'C'

	)

55 
	spwm_ªg
 {

56 vﬁ©ûê
u32
 
	mc⁄
;

57 vﬁ©ûê
u32
 
	m˙t
;

58 vﬁ©ûê
u32
 
	m¥d
;

59 vﬁ©ûê
u32
 
	mcmp
;

62 
	spwm_∂©f‹m_d©a
 {

63 
pwm_ªg
 *
	mªg
;

64 
u8
 
	mp‹t
;

65 
u8
 
	mpwm_ch
;

66 
u8
 
	mduty
;

67 
u32
 
	m‰eq
;

68 
u32
 
	mdtime_í
;

69 
	mdtime_us
;

72 
	spwm_›î©i⁄s
 {

73 (*
	m›í
)(
pwm_∂©f‹m_d©a
 *
	mpwm_d©a
);

74 (*
	m˛o£
)(
pwm_∂©f‹m_d©a
 *
	mpwm_d©a
);

77 (*
	mio˘l
)(
pwm_∂©f‹m_d©a
 *
	mpwm_d©a
, 
u32
 
	mcmd
, u32 
	m¨g
);

80 
	spwm_devi˚
 {

81 *
	m«me
;

82 
pwm_›î©i⁄s
 *
	m›s
;

83 
devi˚
 
	mdev
;

84 *
	m¥iv
;

87 
	#PWM_PLATFORM_DATA_BEGIN
(
d©a
) \

88 
pwm_∂©f‹m_d©a
 
d©a
={

	)

90 
	#PWM_PLATFORM_DATA_END
() \

91 .
ªg
=
NULL
, \

92 };

	)

94 
	#REGISTER_PWM_DEVICE
(
dev
) \

95 
pwm_devi˚
 
dev
 
	`£c
(.
pwm_dev
)

	)

97 
pwm_devi˚
 
pwm_devi˚_begö
[];

98 
pwm_devi˚
 
pwm_devi˚_íd
[];

100 
	#li°_f‹_óch_pwm_devi˚
(
dev
) \

101 
dev
=
pwm_devi˚_begö
;dev<=
pwm_devi˚_íd
;dev++)

	)

103 c⁄° 
devi˚_›î©i⁄s
 
pwm_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/rtc.h

1 #i‚de‡
__CPU_RTC_H__


2 
	#__CPU_RTC_H__


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

6 
	~"gíîic/io˘l.h
"

7 
	~"sy°em/sys_time.h
"

10 
	#IOCTL_PORT_PR_IN
 
	`_IOR
('R', 'T'+0, 0)

	)

11 
	#IOCTL_PORT_PR_OUT
 
	`_IOW
('R', 'T'+1, 0)

	)

12 
	#IOCTL_PORT_PR_PU
 
	`_IOR
('R', 'T'+2, 0)

	)

13 
	#IOCTL_PORT_PR_PD
 
	`_IOR
('R', 'T'+3, 0)

	)

14 
	#IOCTL_PORT_PR_HD
 
	`_IOW
('R', 'T'+4, 0)

	)

15 
	#IOCTL_PORT_PR_DIE
 
	`_IOW
('R', 'T'+5, 0)

	)

16 
	#IOCTL_PORT_PR_READ
 
	`_IOR
('R', 'T'+6, 0)

	)

18 
	#WKUP_IO_PR0
 0x01

	)

19 
	#WKUP_IO_PR1
 0x02

	)

20 
	#WKUP_IO_PR2
 0x04

	)

21 
	#WKUP_IO_PR3
 0x08

	)

22 
	#WKUP_ALARM
 0x10

	)

23 
	#BAT_POWER_FIRST
 0x20

	)

24 
	#ABNORMAL_RESET
 0x40

	)

26 
	s_¥_wkup
 {

27 
u8
 
	mp‹t
;

28 
u8
 
	medge
;

29 
u8
 
	mp‹t_í
;

32 
	sπc_wkup_cfg
 {

33 
u8
 
	mwkup_í
;

34 
_¥_wkup
 
	m¥1
;

35 
_¥_wkup
 
	m¥2
;

36 
_¥_wkup
 
	m¥3
;

40 c⁄° 
devi˚_›î©i⁄s
 
πc_dev_›s
;

43 
πc_p‹t_¥_ö
(
u8
 
p‹t
);

45 
πc_p‹t_¥_ªad
(
u8
 
p‹t
);

47 
πc_p‹t_¥_out
(
u8
 
p‹t
, 
boﬁ
 
⁄
);

49 
πc_p‹t_¥_hd
(
u8
 
p‹t
, 
boﬁ
 
⁄
);

51 
πc_p‹t_¥_pu
(
u8
 
p‹t
, 
boﬁ
 
⁄
);

53 
πc_p‹t_¥_pd
(
u8
 
p‹t
, 
boﬁ
 
⁄
);

55 
πc_p‹t_¥_dõ
(
u8
 
p‹t
, 
boﬁ
 
⁄
);

57 
πc_óæy_öô
();

59 
πc_pö_ª£t_˘æ
(
u8
 
íabÀ
);

61 
πc_wkup_˘æ
(
πc_wkup_cfg
 *
wkup_cfg
);

63 
Æ¨m_wkup_˘æ
(
íabÀ
, 
u32
 
£c
);

65 
u32
 
πc_wkup_ªas⁄
();

67 
πc_powîoff
();

	@include_lib/system/cpu/AC521x/asm/screen_tool.h

1 #i‚de‡
__SCREEN_TOOL_H__


2 
	#__SCREEN_TOOL_H__


	)

4 
	~"sy°em/ö˛udes.h
"

5 
	~"£rvî/£rvî_c‹e.h
"

7 
	gs¸ìn_toﬁ_cfg
;

9 
	ss¸ìn_toﬁ_öfo
 {

10 (*
	ms¸ìn_toﬁ_video0_°¨t
)(
s¸ìn_toﬁ_cfg
 *
	mp
, 
u16
 
	mwidth
, u16 
	mheight
, u16 
	mxoff
, u16 
	myoff
);

11 (*
	ms¸ìn_toﬁ_video1_°¨t
)(
s¸ìn_toﬁ_cfg
 *
	mp
, 
u16
 
	mwidth
, u16 
	mheight
, u16 
	mxoff
, u16 
	myoff
);

12 (*
	ms¸ìn_toﬁ_video0_°›
)(
s¸ìn_toﬁ_cfg
 *
	mp
);

13 (*
	ms¸ìn_toﬁ_video1_°›
)(
s¸ìn_toﬁ_cfg
 *
	mp
);

15 (*
	mupd©e_i•_s˚√s_begö
)(
£rvî
 *
	m£rvî
);

16 (*
	mupd©e_i•_s˚√s_íd
)();

17 (*
	m£t_i•_s¸_cfg
)(
u32
 
	m¨g
);

20 
	ss¸ìn_toﬁ_cfg
 {

21 
£rvî
 *
	mdi•œy
;

22 
£rvî
 *
	mdi•œy1
;

23 
s8
 
	mi•_s˚√
;

24 
u8
 
	mi•_upd©e
;

25 
s¸ìn_toﬁ_öfo
 
	möfo
;

	@include_lib/system/cpu/AC521x/asm/sd_ddr_file.h

1 #i‚de‡
__DDR_FILE_H__


2 
	#__DDR_FILE_H__


	)

4 
	~"ty≥def.h
"

7 
	mYUV444
,

8 
	mYUV422
,

9 
	mYUV420
,

10 
	mYUV411
,

11 
	mRGB565
,

12 
	mRGB888
,

13 
	mOSD16
,

14 
	mOSD8
,

15 
	mOSD2
,

16 
	mOSD1
,

17 
	mINVALID_FORMAT
,

21 
	sfûehód
 {

22 
u32
 
	mvîsi⁄
;

23 
u32
 
	mtŸÆ_fûe
;

24 
u32
 
	mtŸÆ_size
;

25 
u8
 
	mª£rved
[4];

28 
	sfûeöfo
 {

29 
u8
 
	m‚ame
[30];

30 
u8
 
	mf‹m©
;

31 
u8
 
	mÆpha
;

32 
u16
 
	mx
;

33 
u16
 
	my
;

34 
u16
 
	mwidth
;

35 
u16
 
	mheight
;

36 
u32
 
	maddr
;

37 
u32
 
	mÀn
;

40 
fûehód
 *
ddr_gë_fûehód
();

41 
u8
 
ddr_f›í
(u8 *
fûíame
, 
fûeöfo
 **
öf
);

42 
u8
 
gë_f‹m©
(u8 
fmt
);

43 
u8
 *
ddr_gë_baddr
();

45 
	#DATA_START_ADDR
 0x5C00000

	)

	@include_lib/system/cpu/AC521x/asm/sdmmc.h

1 #i‚de‡
ARCH_SDMMC_H


2 
	#ARCH_SDMMC_H


	)

5 
	~"devi˚/sdmmc.h
"

7 
	ssdmmc_∂©f‹m_d©a
 {

8 
	mp‹t
;

9 
u8
 
	múq
;

10 
u8
 
	md©a_width
;

11 
u8
 
	m¥i‹ôy
;

12 
u8
 
	mdëe˘_mode
;

13 
u8
 
	mdëe˘_time_öãrvÆ
;

14 
u32
 
	m•ìd
;

15 vﬁ©ûê
u16
 *
	ms‰
;

16 (*
	mdëe˘_func
)(c⁄° 
	msdmmc_∂©f‹m_d©a
 *);

17 (*
	mp‹t_öô
)(c⁄° 
	msdmmc_∂©f‹m_d©a
 *, 
	mmode
);

18 (*
	mpowî
)(
	m⁄
);

21 
	#SD0_PLATFORM_DATA_BEGIN
(
d©a
) \

22 c⁄° 
sdmmc_∂©f‹m_d©a
 
d©a
 = {

	)

25 
	#SD0_PLATFORM_DATA_END
() \

26 .
úq
 = 
SD0_INT
, \

27 .
s‰
 = &
SD0_CON0
, \

28 .
p‹t_öô
 = 
sdmmc_0_p‹t_öô
, \

29 .
dëe˘_time_öãrvÆ
 = 50, \

30 };

	)

32 c⁄° 
devi˚_›î©i⁄s
 
sd0_dev_›s
;

34 
sdmmc_0_p‹t_öô
(c⁄° 
sdmmc_∂©f‹m_d©a
 *, 
mode
);

35 
sdmmc_0_˛k_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *);

43 
	#SD1_PLATFORM_DATA_BEGIN
(
d©a
) \

44 c⁄° 
sdmmc_∂©f‹m_d©a
 
d©a
 = {

	)

47 
	#SD1_PLATFORM_DATA_END
() \

48 .
úq
 = 
SD1_INT
, \

49 .
s‰
 = &
SD1_CON0
, \

50 .
p‹t_öô
 = 
sdmmc_1_p‹t_öô
, \

51 .
dëe˘_time_öãrvÆ
 = 50, \

52 };

	)

55 
sdmmc_1_p‹t_öô
(c⁄° 
sdmmc_∂©f‹m_d©a
 *, 
mode
);

56 
sdmmc_1_˛k_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *);

60 c⁄° 
devi˚_›î©i⁄s
 
sd_dev_›s
;

67 
	#SD2_PLATFORM_DATA_BEGIN
(
d©a
) \

68 c⁄° 
sdmmc_∂©f‹m_d©a
 
d©a
 = {

	)

71 
	#SD2_PLATFORM_DATA_END
() \

72 .
úq
 = 
SD2_INT
, \

73 .
s‰
 = &
SD2_CON0
, \

74 .
p‹t_öô
 = 
sdmmc_2_p‹t_öô
, \

75 .
dëe˘_time_öãrvÆ
 = 50, \

76 };

	)

78 c⁄° 
devi˚_›î©i⁄s
 
sd2_dev_›s
;

80 
sdmmc_2_p‹t_öô
(c⁄° 
sdmmc_∂©f‹m_d©a
 *, 
mode
);

81 
sdmmc_2_˛k_dëe˘
(c⁄° 
sdmmc_∂©f‹m_d©a
 *);

	@include_lib/system/cpu/AC521x/asm/spi.h

1 #i‚de‡
__SPI_H__


2 
	#__SPI_H__


	)

5 
	~"ty≥def.h
"

15 
	#IOCTL_SPI_SET_CS
 
	`_IOW
('S', 1, 1)

	)

16 
	#IOCTL_SPI_SEND_BYTE
 
	`_IOW
('S', 2, 1)

	)

17 
	#IOCTL_SPI_SEND_CMD
 
	`_IOW
('S', 3, 1)

	)

18 
	#IOCTL_SPI_GET_BIT_MODE
 
	`_IOW
('S', 4, 1)

	)

19 
	#IOCTL_SPI_READ_BYTE
 
	`_IOW
('S', 5, 1)

	)

20 
	#IOCTL_SPI_SET_CRC
 
	`_IOW
('S', 6, 1)

	)

21 
	#IOCTL_SPI_READ_CRC
 
	`_IOR
('S', 7, 1)

	)

25 
	s•i_io
 {

26 
u8
 
	mcs_pö
;

27 
u8
 
	mdi_pö
;

28 
u8
 
	mdo_pö
;

29 
u8
 
	m˛k_pö
;

30 
u8
 
	md2_pö
;

31 
u8
 
	md3_pö
;

34 
	s•i_ªgs
 {

35 vﬁ©ûê
u32
 
	mc⁄
;

36 vﬁ©ûê
u8
 
	mbaud
;

37 vﬁ©ûê
u8
 
	mªg1
[3];

38 vﬁ©ûê
u8
 
	mbuf
;

39 vﬁ©ûê
u8
 
	mªg2
[3];

40 vﬁ©ûê
u32
 
	madr
;

41 vﬁ©ûê
u32
 
	m˙t
;

44 
	s•i_∂©f‹m_d©a
 {

45 
u8
 
	mp‹t
;

46 
u8
 
	mmode
;

47 
u8
 
	múq
;

48 
u32
 
	m˛k
;

49 c⁄° 
•i_io
 *
	mio
;

50 vﬁ©ûê
•i_ªgs
 *
	mªg
;

51 (*
	möô
)(c⁄° 
	m•i_∂©f‹m_d©a
 *);

54 
	#SPI0_PLATFORM_DATA_BEGIN
(
•i0_d©a
) \

55 c⁄° 
•i_io
 
•i0_io
[] = { \

57 .
cs_pö
 = 
IO_PORTA_00
, \

58 .
di_pö
 = 
IO_PORTA_01
, \

59 .
do_pö
 = 
IO_PORTA_03
, \

60 .
˛k_pö
 = 
IO_PORTA_04
, \

61 .
d2_pö
 = 
IO_PORTA_02
, \

62 .
d3_pö
 = 
IO_PORTH_13
, \

65 .
cs_pö
 = 
IO_PORTH_06
, \

66 .
di_pö
 = 
IO_PORTH_07
, \

67 .
do_pö
 = 
IO_PORTH_09
, \

68 .
˛k_pö
 = 
IO_PORTH_10
, \

69 .
d2_pö
 = 
IO_PORTH_08
, \

70 .
d3_pö
 = 
IO_PORTH_11
, \

73 
	`__•i0_iomc_öô
(c⁄° 
•i_∂©f‹m_d©a
 *
pd
) \

75 
IOMC1
 &~
	`BIT
(1); \

76 i‡(
pd
->
p‹t
 == 'A') { \

77 
IOMC0
 &~
	`BIT
(15); \

79 
IOMC0
 |
	`BIT
(15); \

82 c⁄° 
•i_∂©f‹m_d©a
 
•i0_d©a
 = { \

83 .
úq
 = 
SPI0_INT
, \

84 

	)

87 
	#SPI0_PLATFORM_DATA_END
() \

88 .
io
 = 
•i0_io
, \

89 .
ªg
 = (vﬁ©ûê
•i_ªgs
 *)&
SPI0_CON
, \

90 .
öô
 = 
__•i0_iomc_öô
, \

91 };

	)

97 
	#SPI1_PLATFORM_DATA_BEGIN
(
•i1_d©a
) \

98 c⁄° 
•i_io
 
•i1_io
[] = { \

100 .
cs_pö
 = -1, \

101 .
di_pö
 = 
IO_PORTH_05
, \

102 .
do_pö
 = 
IO_PORTH_04
, \

103 .
˛k_pö
 = 
IO_PORTH_03
, \

104 .
d2_pö
 = -1, \

105 .
d3_pö
 = -1, \

108 .
cs_pö
 = -1, \

109 .
di_pö
 = 
IO_PORTD_02
, \

110 .
do_pö
 = 
IO_PORTD_01
, \

111 .
˛k_pö
 = 
IO_PORTD_00
, \

112 .
d2_pö
 = -1, \

113 .
d3_pö
 = -1, \

116 .
cs_pö
 = -1, \

117 .
di_pö
 = 
IO_PORTG_05
, \

118 .
do_pö
 = 
IO_PORTG_07
, \

119 .
˛k_pö
 = 
IO_PORTG_06
, \

120 .
d2_pö
 = -1, \

121 .
d3_pö
 = -1, \

124 .
cs_pö
 = -1, \

125 .
di_pö
 = 
IO_PORTF_04
, \

126 .
do_pö
 = 
IO_PORTF_06
, \

127 .
˛k_pö
 = 
IO_PORTF_05
, \

128 .
d2_pö
 = -1, \

129 .
d3_pö
 = -1, \

132 
	`__•i1_iomc_öô
(c⁄° 
•i_∂©f‹m_d©a
 *
pd
) \

134 
IOMC1
 &~(
	`BIT
(4) | BIT(5)); \

135 i‡(
pd
->
p‹t
 == 'B') { \

136 
IOMC1
 |
	`BIT
(4); \

137 } i‡(
pd
->
p‹t
 == 'C') { \

138 
IOMC1
 |
	`BIT
(5); \

139 } i‡(
pd
->
p‹t
 == 'D') { \

140 
IOMC1
 |
	`BIT
(4) | BIT(5); \

143 c⁄° 
•i_∂©f‹m_d©a
 
•i1_d©a
 = { \

144 .
úq
 = 
SPI1_INT
, \

145 

	)

148 
	#SPI1_PLATFORM_DATA_END
() \

149 .
io
 = 
•i1_io
, \

150 .
ªg
 = (vﬁ©ûê
•i_ªgs
 *)&
SPI1_CON
, \

151 .
öô
 = 
__•i1_iomc_öô
, \

152 };

	)

157 
	#SPI2_PLATFORM_DATA_BEGIN
(
•i2_d©a
) \

158 c⁄° 
•i_io
 
•i2_io
[] = { \

160 .
cs_pö
 = 
IO_PORTD_05
, \

161 .
di_pö
 = 
IO_PORTD_02
, \

162 .
do_pö
 = 
IO_PORTD_01
, \

163 .
˛k_pö
 = 
IO_PORTD_00
, \

164 .
d2_pö
 = 
IO_PORTD_03
, \

165 .
d3_pö
 = 
IO_PORTD_04
, \

168 .
cs_pö
 = 
IO_PORTB_05
, \

169 .
di_pö
 = 
IO_PORTB_06
, \

170 .
do_pö
 = 
IO_PORTB_08
, \

171 .
˛k_pö
 = 
IO_PORTB_09
, \

172 .
d2_pö
 = 
IO_PORTB_07
, \

173 .
d3_pö
 = 
IO_PORTB_10
, \

176 
	`__•i2_iomc_öô
(c⁄° 
•i_∂©f‹m_d©a
 *
pd
) \

178 i‡(
pd
->
p‹t
 =
SPI_PORTD_0_5
) { \

179 
IOMC2
 &~(
	`BIT
(28) | BIT(29)); \

181 
IOMC2
 |
	`BIT
(28); \

182 
IOMC2
 &~
	`BIT
(29); \

185 c⁄° 
•i_∂©f‹m_d©a
 
•i2_d©a
 = { \

186 .
úq
 = 
SPI2_INT
, \

187 

	)

190 
	#SPI2_PLATFORM_DATA_END
() \

191 .
io
 = 
•i2_io
, \

192 .
ªg
 = (vﬁ©ûê
•i_ªgs
 *)&
SPI2_CON
, \

193 .
öô
 = 
__•i2_iomc_öô
, \

194 };

	)

198 c⁄° 
devi˚_›î©i⁄s
 
•i_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/spiflash.h

1 #i‚de‡
ASM_SPIFLASH_H


2 
	#ASM_SPIFLASH_H


	)

6 
	~"devi˚/devi˚.h
"

7 
	~"devi˚/•iÊash.h
"

20 c⁄° 
devi˚_›î©i⁄s
 
•iÊash_dev_›s
;

21 c⁄° 
devi˚_›î©i⁄s
 
sfcÊash_dev_›s
;

	@include_lib/system/cpu/AC521x/asm/startup.h

8 
	#STARTUP_SECTION
 
¥ogøm


	)

22 
	#SYSCFG_VALUE
 0x30

23 

	)

	@include_lib/system/cpu/AC521x/asm/sync_buf.h

1 #i‚de‡
__SYNC_BUF_H__


2 
	#__SYNC_BUF_H__


	)

4 
	~"ty≥def.h
"

5 
	~"li°.h
"

6 
	~"•ölock.h
"

7 
	~"asm/imd.h
"

11 
	mBUF_IDLE
,

12 
	mBUF_READ
,

13 
	mBUF_WRITE
,

14 
	mBUF_READY
,

17 
	ssb_buf„r
 {

18 
li°_hód
 
	míåy
;

19 
u8
 
	mödex
;

20 vﬁ©ûê
u8
 
	mwrôe_°©us
;

21 vﬁ©ûê
u8
 
	mªad_°©us
;

22 
u8
 *
	mbaddr
;

25 
sb_buf„r
 *
sync_buf_öô
(
imd_dmm_öfo
 *
öfo
);

26 
sb_buf„r
 *
sync_buf_ªad
();

27 
sb_buf„r
 *
sync_buf_wrôe
();

28 
sb_buf„r
 *
sync_buf_wrôe_d⁄e
();

29 
sync_buf_‰ì
(
sb_buf„r
 *
hód
);

	@include_lib/system/cpu/AC521x/asm/sysinfo.h

1 #i‚de‡
CPU_SYS_INFO_H


2 
	#CPU_SYS_INFO_H


	)

4 
	~"ty≥def.h
"

7 
	sboŸ_sysöfo
 {

8 
u32
 
	mcmd_z⁄e_addr
;

9 
u32
 
	msdfûe_hód_addr
[2];

11 
u32
 
	mu¨t
: 5;

12 
u32
 
	mªs
: 7;

13 
u32
 
	m•i_˛k_div
: 8;

14 
u32
 
	m•i_cs_de£À˘
: 4;

15 
u32
 
	m•i_öput_dñay
: 4;

16 
u32
 
	m•i_d©a_width
: 2;

17 
u32
 
	m•i_is_c⁄töue_ªad
: 1;

18 
u32
 
	m•i_is_ouçut
: 1;

20 
u32
 
	msys_˛k
;

21 
u32
 
	mosc_‰eq
;

22 
u32
 
	mosc_ty≥
: 2;

23 
u32
 
	mosc_hc_í
: 1;

24 
u32
 
	mosc_1pö_í
: 1;

26 
u32
 
	msdøm_˛k
;

27 
u32
 
	msdøm_size
;

28 
u32
 
	msdøm_ª‰esh_time
;

29 
u32
 
	msdøm_ª‰esh_cy˛es
;

31 
u32
 
	msdøm_mode
: 1;

32 
u32
 
	msdøm_˛
: 3;

33 
u32
 
	msdøm_cﬁum
: 4;

34 
u32
 
	msdøm_åfc
: 7;

35 
u32
 
	msdøm_åp
: 7;

36 
u32
 
	msdøm_åcd
: 7;

37 
u32
 
	msdøm_wl˙t
: 3;

39 
u32
 
	msdøm_ård
 : 4;

40 
u32
 
	msdøm_wå
 : 4;

41 
u32
 
	msdøm_πw
 : 4;

42 
u32
 
	msdøm_wr
 : 4;

43 
u32
 
	msdøm_wl
 : 4;

44 
u32
 
	msdøm_æ
 : 4;

45 
u32
 
	msdøm_rc
 : 4;

46 
u32
 
	msdøm_æ˙t
: 4;

48 
u32
 
	msdøm_d_dly
: 1;

49 
u32
 
	msdøm_q_dly
: 1;

50 
u32
 
	msdøm_ªf_˛k
: 30;

52 
u32
 
	meva_˛k
;

53 
u32
 
	mcfg_¸c
;

	@include_lib/system/cpu/AC521x/asm/timer.h

1 #i‚de‡
ASM_TIMER_H


2 
	#ASM_TIMER_H


	)

15 
timî1_öô
();

	@include_lib/system/cpu/AC521x/asm/uart.h

1 #i‚de‡
ASM_UART_H


2 
	#ASM_UART_H


	)

5 
	#UART_NUM
 4

	)

6 
	#UART_OUTPORT_NUM
 4

	)

9 
	~"devi˚/u¨t.h
"

10 
	~"devi˚/devi˚.h
"

12 
	#UART0_PLATFORM_DATA_BEGIN
(
d©a
) \

13 c⁄° 
u¨t_∂©f‹m_d©a
 
d©a
 = {

	)

16 
	#UART0_PLATFORM_DATA_END
() \

17 .
úq
 = 
UART0_INT
, \

18 };

	)

21 
	#UART1_PLATFORM_DATA_BEGIN
(
d©a
) \

22 c⁄° 
u¨t_∂©f‹m_d©a
 
d©a
 = {

	)

25 
	#UART1_PLATFORM_DATA_END
() \

26 .
úq
 = 
UART1_INT
, \

27 };

	)

30 
	#UART2_PLATFORM_DATA_BEGIN
(
d©a
) \

31 c⁄° 
u¨t_∂©f‹m_d©a
 
d©a
 = {

	)

33 
	#UART2_PLATFORM_DATA_END
() \

34 .
úq
 = 
UART2_INT
, \

35 };

	)

38 
	#UART3_PLATFORM_DATA_BEGIN
(
d©a
) \

39 c⁄° 
u¨t_∂©f‹m_d©a
 
d©a
 = {

	)

41 
	#UART3_PLATFORM_DATA_END
() \

42 .
úq
 = 
UART3_INT
, \

43 };

	)

45 c⁄° 
devi˚_›î©i⁄s
 
u¨t_dev_›s
;

48 
u¨t_öô
(c⁄° 
u¨t_∂©f‹m_d©a
 *);

	@include_lib/system/cpu/AC521x/asm/usb_inc.h

1 #i‚de‡
__USB_INC_H__


2 
	#__USB_INC_H__


	)

3 
	~"asm/˝u.h
"

6 
	#HUSB_EP5_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x0f*4))

7 
	#HUSB_EP5_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x10*4))

8 

	)

9 
	#HUSB_EP6_TADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x11*4))

10 
	#HUSB_EP6_RADR
 (*(vﬁ©ûê
u32
 *)(
ls_husb_ba£
 + 0x12*4))

11 

	)

13 
	#H_EP5TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x150))

	)

14 
	#H_EP5TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x152))

	)

15 
	#H_EP5RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x154))

	)

16 
	#H_EP5RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x156))

	)

17 
	#H_EP5RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x158))

	)

18 
	#H_EP5TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x15a))

	)

19 
	#H_EP5TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x15b))

	)

20 
	#H_EP5RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x15c))

	)

21 
	#H_EP5RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x15d))

	)

22 
	#H_EP5FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x15f))

	)

27 
	#H_EP6TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x160))

	)

28 
	#H_EP6TXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x162))

	)

29 
	#H_EP6RXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x164))

	)

30 
	#H_EP6RXCSR
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x166))

	)

31 
	#H_EP6RXCOUNT
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x168))

	)

32 
	#H_EP6TXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x16a))

	)

33 
	#H_EP6TXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x16b))

	)

34 
	#H_EP6RXTYPE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x16c))

	)

35 
	#H_EP6RXINTERVAL
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x16d))

	)

36 
	#H_EP6FIFOSIZE
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x16f))

	)

40 
	#H_EP0_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x080))

	)

41 
	#H_EP0_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x082))

	)

42 
	#H_EP0_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x083))

	)

43 
	#H_EP0_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x084))

	)

44 
	#H_EP0_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x086))

	)

45 
	#H_EP0_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x087))

	)

47 
	#H_EP1_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x088))

	)

48 
	#H_EP1_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x08a))

	)

49 
	#H_EP1_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x08b))

	)

50 
	#H_EP1_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x08c))

	)

51 
	#H_EP1_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x08e))

	)

52 
	#H_EP1_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x08f))

	)

54 
	#H_EP2_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x090))

	)

55 
	#H_EP2_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x092))

	)

56 
	#H_EP2_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x093))

	)

57 
	#H_EP2_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x094))

	)

58 
	#H_EP2_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x096))

	)

59 
	#H_EP2_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x097))

	)

61 
	#H_EP3_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x098))

	)

62 
	#H_EP3_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x09a))

	)

63 
	#H_EP3_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x09b))

	)

64 
	#H_EP3_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x09c))

	)

65 
	#H_EP3_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x09e))

	)

66 
	#H_EP3_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x09f))

	)

68 
	#H_EP4_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a0))

	)

70 
	#H_EP4_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a2))

	)

71 
	#H_EP4_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a3))

	)

72 
	#H_EP4_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a4))

	)

73 
	#H_EP4_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a6))

	)

74 
	#H_EP4_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a7))

	)

76 
	#H_EP5_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0a8))

	)

78 
	#H_EP5_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0Ø))

	)

79 
	#H_EP5_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0ab))

	)

80 
	#H_EP5_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0ac))

	)

81 
	#H_EP5_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0´))

	)

82 
	#H_EP5_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0af))

	)

84 
	#H_EP6_TXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b0))

	)

86 
	#H_EP6_TXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b2))

	)

87 
	#H_EP6_TXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b3))

	)

88 
	#H_EP6_RXFUNCADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b4))

	)

89 
	#H_EP6_RXHUBADDR
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b6))

	)

90 
	#H_EP6_RXHUBPORT
 (*(vﬁ©ûê
u8
 *)(
husb_ba£
 + 0x0b7))

	)

94 
	#HUSB_FADDR
 &
H_FADDR


	)

95 
	#HUSB_POWER
 &
H_POWER


	)

96 
	#HUSB_INTRTX
 &
H_INTRTX


	)

97 
	#HUSB_INTRRX
 &
H_INTRRX


	)

98 
	#HUSB_INTRTXE
 &
H_INTRTXE


	)

99 
	#HUSB_INTRRXE
 &
H_INTRRXE


	)

100 
	#HUSB_INTRUSB
 &
H_INTRUSB


	)

101 
	#HUSB_INTRUSBE
 &
H_INTRUSBE


	)

102 
	#HUSB_FRAME
 &
H_FRAME


	)

103 
	#HUSB_INDEX
 &
H_INDEX


	)

104 
	#HUSB_TESTMODE
 &
H_TESTMODE


	)

106 
	#HUSB_FIFO0
 &
H_FIFO0


	)

107 
	#HUSB_FIFO1
 &
H_FIFO1


	)

108 
	#HUSB_FIFO2
 &
H_FIFO2


	)

109 
	#HUSB_FIFO3
 &
H_FIFO3


	)

110 
	#HUSB_FIFO4
 &
H_FIFO4


	)

111 
	#HUSB_DEVCTL
 &
H_DEVCTL


	)

112 
	#HUSB_TYPE0
 &
H_TYPE0


	)

114 
	#HUSB_EP0_TXFUNCADDR
 &
H_EP0_TXFUNCADDR


	)

115 
	#HUSB_EP0_TXHUBADDR
 &
H_EP0_TXHUBADDR


	)

116 
	#HUSB_EP0_TXHUBPORT
 &
H_EP0_TXHUBPORT


	)

117 
	#HUSB_EP0_RXFUNCADDR
 &
H_EP0_RXFUNCADDR


	)

118 
	#HUSB_EP0_RXHUBADDR
 &
H_EP0_RXHUBADDR


	)

119 
	#HUSB_EP0_RXHUBPORT
 &
H_EP0_RXHUBPORT


	)

121 
	#HUSB_EP1_TXFUNCADDR
 &
H_EP1_TXFUNCADDR


	)

122 
	#HUSB_EP1_TXHUBADDR
 &
H_EP1_TXHUBADDR


	)

123 
	#HUSB_EP1_TXHUBPORT
 &
H_EP1_TXHUBPORT


	)

124 
	#HUSB_EP1_RXFUNCADDR
 &
H_EP1_RXFUNCADDR


	)

125 
	#HUSB_EP1_RXHUBADDR
 &
H_EP1_RXHUBADDR


	)

126 
	#HUSB_EP1_RXHUBPORT
 &
H_EP1_RXHUBPORT


	)

128 
	#HUSB_EP2_TXFUNCADDR
 &
H_EP2_TXFUNCADDR


	)

129 
	#HUSB_EP2_TXHUBADDR
 &
H_EP2_TXHUBADDR


	)

130 
	#HUSB_EP2_TXHUBPORT
 &
H_EP2_TXHUBPORT


	)

131 
	#HUSB_EP2_RXFUNCADDR
 &
H_EP2_RXFUNCADDR


	)

132 
	#HUSB_EP2_RXHUBADDR
 &
H_EP2_RXHUBADDR


	)

133 
	#HUSB_EP2_RXHUBPORT
 &
H_EP2_RXHUBPORT


	)

135 
	#HUSB_EP3_TXFUNCADDR
 &
H_EP3_TXFUNCADDR


	)

136 
	#HUSB_EP3_TXHUBADDR
 &
H_EP3_TXHUBADDR


	)

137 
	#HUSB_EP3_TXHUBPORT
 &
H_EP3_TXHUBPORT


	)

138 
	#HUSB_EP3_RXFUNCADDR
 &
H_EP3_RXFUNCADDR


	)

139 
	#HUSB_EP3_RXHUBADDR
 &
H_EP3_RXHUBADDR


	)

140 
	#HUSB_EP3_RXHUBPORT
 &
H_EP3_RXHUBPORT


	)

142 
	#HUSB_EP4_TXFUNCADDR
 &
H_EP4_TXFUNCADDR


	)

143 
	#HUSB_EP4_TXHUBADDR
 &
H_EP4_TXHUBADDR


	)

144 
	#HUSB_EP4_TXHUBPORT
 &
H_EP4_TXHUBPORT


	)

145 
	#HUSB_EP4_RXFUNCADDR
 &
H_EP4_RXFUNCADDR


	)

146 
	#HUSB_EP4_RXHUBADDR
 &
H_EP4_RXHUBADDR


	)

147 
	#HUSB_EP4_RXHUBPORT
 &
H_EP4_RXHUBPORT


	)

149 
	#HUSB_EP5_TXFUNCADDR
 &
H_EP5_TXFUNCADDR


	)

150 
	#HUSB_EP5_TXHUBADDR
 &
H_EP5_TXHUBADDR


	)

151 
	#HUSB_EP5_TXHUBPORT
 &
H_EP5_TXHUBPORT


	)

152 
	#HUSB_EP5_RXFUNCADDR
 &
H_EP5_RXFUNCADDR


	)

153 
	#HUSB_EP5_RXHUBADDR
 &
H_EP5_RXHUBADDR


	)

154 
	#HUSB_EP5_RXHUBPORT
 &
H_EP5_RXHUBPORT


	)

156 
	#HUSB_EP6_TXFUNCADDR
 &
H_EP6_TXFUNCADDR


	)

157 
	#HUSB_EP6_TXHUBADDR
 &
H_EP6_TXHUBADDR


	)

158 
	#HUSB_EP6_TXHUBPORT
 &
H_EP6_TXHUBPORT


	)

159 
	#HUSB_EP6_RXFUNCADDR
 &
H_EP6_RXFUNCADDR


	)

160 
	#HUSB_EP6_RXHUBADDR
 &
H_EP6_RXHUBADDR


	)

161 
	#HUSB_EP6_RXHUBPORT
 &
H_EP6_RXHUBPORT


	)

163 
	#HUSB_CSR0
 &
H_CSR0


	)

164 
	#HUSB_COUNT0
 &
H_COUNT0


	)

165 
	#HUSB_NAKLIMIT0
 &
H_NAKLIMIT0


	)

166 
	#HUSB_CFGDATA
 &
H_CFGDATA


	)

168 
	#H_EP0TXMAXP
 (*(vﬁ©ûê
u16
 *)(
husb_ba£
 + 0x100))

	)

169 
	#HUSB_EP0TXMAXP
 &
H_EP0TXMAXP


	)

171 
	#HUSB_EP1TXMAXP
 &
H_EP1TXMAXP


	)

172 
	#HUSB_EP1TXCSR
 &
H_EP1TXCSR


	)

173 
	#HUSB_EP1RXMAXP
 &
H_EP1RXMAXP


	)

174 
	#HUSB_EP1RXCSR
 &
H_EP1RXCSR


	)

175 
	#HUSB_EP1RXCOUNT
 &
H_EP1RXCOUNT


	)

176 
	#HUSB_EP1TXTYPE
 &
H_EP1TXTYPE


	)

177 
	#HUSB_EP1TXINTERVAL
 &
H_EP1TXINTERVAL


	)

178 
	#HUSB_EP1RXTYPE
 &
H_EP1RXTYPE


	)

179 
	#HUSB_EP1RXINTERVAL
 &
H_EP1RXINTERVAL


	)

180 
	#HUSB_EP1FIFOSIZE
 &
H_EP1FIFOSIZE


	)

182 
	#HUSB_EP2TXMAXP
 &
H_EP2TXMAXP


	)

183 
	#HUSB_EP2TXCSR
 &
H_EP2TXCSR


	)

184 
	#HUSB_EP2RXMAXP
 &
H_EP2RXMAXP


	)

185 
	#HUSB_EP2RXCSR
 &
H_EP2RXCSR


	)

186 
	#HUSB_EP2RXCOUNT
 &
H_EP2RXCOUNT


	)

187 
	#HUSB_EP2TXTYPE
 &
H_EP2TXTYPE


	)

188 
	#HUSB_EP2TXINTERVAL
 &
H_EP2TXINTERVAL


	)

189 
	#HUSB_EP2RXTYPE
 &
H_EP2RXTYPE


	)

190 
	#HUSB_EP2RXINTERVAL
 &
H_EP2RXINTERVAL


	)

191 
	#HUSB_EP2FIFOSIZE
 &
H_EP2FIFOSIZE


	)

193 
	#HUSB_EP3TXMAXP
 &
H_EP3TXMAXP


	)

194 
	#HUSB_EP3TXCSR
 &
H_EP3TXCSR


	)

195 
	#HUSB_EP3RXMAXP
 &
H_EP3RXMAXP


	)

196 
	#HUSB_EP3RXCSR
 &
H_EP3RXCSR


	)

197 
	#HUSB_EP3RXCOUNT
 &
H_EP3RXCOUNT


	)

198 
	#HUSB_EP3TXTYPE
 &
H_EP3TXTYPE


	)

199 
	#HUSB_EP3TXINTERVAL
 &
H_EP3TXINTERVAL


	)

200 
	#HUSB_EP3RXTYPE
 &
H_EP3RXTYPE


	)

201 
	#HUSB_EP3RXINTERVAL
 &
H_EP3RXINTERVAL


	)

202 
	#HUSB_EP3FIFOSIZE
 &
H_EP3FIFOSIZE


	)

204 
	#HUSB_EP4TXMAXP
 &
H_EP4TXMAXP


	)

205 
	#HUSB_EP4TXCSR
 &
H_EP4TXCSR


	)

206 
	#HUSB_EP4RXMAXP
 &
H_EP4RXMAXP


	)

207 
	#HUSB_EP4RXCSR
 &
H_EP4RXCSR


	)

208 
	#HUSB_EP4RXCOUNT
 &
H_EP4RXCOUNT


	)

209 
	#HUSB_EP4TXTYPE
 &
H_EP4TXTYPE


	)

210 
	#HUSB_EP4TXINTERVAL
 &
H_EP4TXINTERVAL


	)

211 
	#HUSB_EP4RXTYPE
 &
H_EP4RXTYPE


	)

212 
	#HUSB_EP4RXINTERVAL
 &
H_EP4RXINTERVAL


	)

213 
	#HUSB_EP4FIFOSIZE
 &
H_EP4FIFOSIZE


	)

215 
	#HUSB_EP5TXMAXP
 &
H_EP5TXMAXP


	)

216 
	#HUSB_EP5TXCSR
 &
H_EP5TXCSR


	)

217 
	#HUSB_EP5RXMAXP
 &
H_EP5RXMAXP


	)

218 
	#HUSB_EP5RXCSR
 &
H_EP5RXCSR


	)

219 
	#HUSB_EP5RXCOUNT
 &
H_EP5RXCOUNT


	)

220 
	#HUSB_EP5TXTYPE
 &
H_EP5TXTYPE


	)

221 
	#HUSB_EP5TXINTERVAL
 &
H_EP5TXINTERVAL


	)

222 
	#HUSB_EP5RXTYPE
 &
H_EP5RXTYPE


	)

223 
	#HUSB_EP5RXINTERVAL
 &
H_EP5RXINTERVAL


	)

224 
	#HUSB_EP5FIFOSIZE
 &
H_EP5FIFOSIZE


	)

226 
	#HUSB_EP6TXMAXP
 &
H_EP6TXMAXP


	)

227 
	#HUSB_EP6TXCSR
 &
H_EP6TXCSR


	)

228 
	#HUSB_EP6RXMAXP
 &
H_EP6RXMAXP


	)

229 
	#HUSB_EP6RXCSR
 &
H_EP6RXCSR


	)

230 
	#HUSB_EP6RXCOUNT
 &
H_EP6RXCOUNT


	)

231 
	#HUSB_EP6TXTYPE
 &
H_EP6TXTYPE


	)

232 
	#HUSB_EP6TXINTERVAL
 &
H_EP6TXINTERVAL


	)

233 
	#HUSB_EP6RXTYPE
 &
H_EP6RXTYPE


	)

234 
	#HUSB_EP6RXINTERVAL
 &
H_EP6RXINTERVAL


	)

235 
	#HUSB_EP6FIFOSIZE
 &
H_EP6FIFOSIZE


	)

237 
	#HUSB_TX_DPKTDIS
 &
H_TX_DPBUFDIS


	)

238 
	#HUSB_C_T_UCH
 &
H_C_T_UCH


	)

241 
	mHUSB
 = 0,

242 
	mMAX_USB_PHY_NUM
,

246 
	mUSB_EP0
 = 0,

247 
	mUSB_EP1
,

248 
	mUSB_EP2
,

249 
	mUSB_EP3
,

250 
	mUSB_EP4
,

251 
	mUSB_EP5
,

252 
	mUSB_EP6
,

253 
	mUSB_EP_MAX
,

256 
	smusb_ªgs
 {

257 vﬁ©ûê
u8
 
	mÁddr
;

258 vﬁ©ûê
u8
 
	mpowî
;

259 vﬁ©ûê
u16
 
	möåtx
;

260 vﬁ©ûê
u16
 
	möårx
;

261 vﬁ©ûê
u16
 
	möåtxe
;

262 vﬁ©ûê
u16
 
	möårxe
;

263 vﬁ©ûê
u8
 
	möåusb
;

264 vﬁ©ûê
u8
 
	möåusbe
;

265 vﬁ©ûê
u16
 
	m‰ame
;

266 vﬁ©ûê
u8
 
	mödex
;

267 vﬁ©ûê
u8
 
	mã°mode
;

270 
	ssõ_ªgs
 {

271 vﬁ©ûê
u32
 
	msõ_c⁄
;

272 vﬁ©ûê
u32
 
	mï0_˙t
;

273 vﬁ©ûê
u32
 
	mï1_˙t
;

274 vﬁ©ûê
u32
 
	mï2_˙t
;

275 vﬁ©ûê
u32
 
	mï3_˙t
;

276 vﬁ©ûê
u32
 
	mï4_˙t
;

277 vﬁ©ûê
u32
 
	mï5_˙t
;

278 vﬁ©ûê
u32
 
	mï6_˙t
;

279 vﬁ©ûê
u32
 
	mï0_adr
 ;

280 vﬁ©ûê
u32
 
	mï1_èdr
;

281 vﬁ©ûê
u32
 
	mï1_ødr
;

282 vﬁ©ûê
u32
 
	mï2_èdr
;

283 vﬁ©ûê
u32
 
	mï2_ødr
;

284 vﬁ©ûê
u32
 
	mï3_èdr
;

285 vﬁ©ûê
u32
 
	mï3_ødr
;

286 vﬁ©ûê
u32
 
	mï4_èdr
;

287 vﬁ©ûê
u32
 
	mï4_ødr
;

288 vﬁ©ûê
u32
 
	mï5_èdr
;

289 vﬁ©ûê
u32
 
	mï5_ødr
;

290 vﬁ©ûê
u32
 
	mï6_èdr
;

291 vﬁ©ûê
u32
 
	mï6_ødr
;

292 vﬁ©ûê
u32
 
	mcom_c⁄
;

293 vﬁ©ûê
u32
 
	mª£rved0
;

294 vﬁ©ûê
u32
 
	mphy_c⁄0
;

295 vﬁ©ûê
u32
 
	mphy_c⁄1
;

296 vﬁ©ûê
u32
 
	mphy_c⁄2
;

297 vﬁ©ûê
u32
 
	miso_c⁄0
;

298 vﬁ©ûê
u32
 
	miso_c⁄1
;

301 
	sï_ªgs
 {

302 vﬁ©ûê
u16
 
	mtxmaxp
 ;

303 vﬁ©ûê
u16
 
	mtxc§
 ;

304 vﬁ©ûê
u16
 
	mrxmaxp
 ;

305 vﬁ©ûê
u16
 
	mrxc§
 ;

306 vﬁ©ûê
u16
 
	mrxcou¡
 ;

307 vﬁ©ûê
u8
 
	mtxty≥
 ;

308 vﬁ©ûê
u8
 
	mtxöãrvÆ
;

309 vﬁ©ûê
u8
 
	mrxty≥
 ;

310 vﬁ©ûê
u8
 
	mrxöãrvÆ
;

311 vﬁ©ûê
u8
 
	mª£rve
;

312 vﬁ©ûê
u8
 
	mfifosize
 ;

315 
	shub_ªgs
 {

316 vﬁ©ûê
u8
 
	mtxfunˇddr
;

317 vﬁ©ûê
u8
 
	munu£d_0
;

318 vﬁ©ûê
u8
 
	mtxhubaddr
;

319 vﬁ©ûê
u8
 
	mtxhubp‹t
;

320 vﬁ©ûê
u8
 
	mrxfunˇddr
;

321 vﬁ©ûê
u8
 
	munu£d_1
;

322 vﬁ©ûê
u8
 
	mrxhubaddr
;

323 vﬁ©ûê
u8
 
	mrxhubp‹t
;

327 
	smusb_hw_ï
 {

328 
sõ_ªgs
 *
	msõ
;

329 
ï_ªgs
 *
	mï
[
USB_EP_MAX
];

330 
musb_ªgs
 *
	mªgs
;

331 
hub_ªgs
 *
	mhªgs
[
USB_EP_MAX
];

332 vﬁ©ûê
u8
 *c⁄° 
	mdev˘l
;

333 vﬁ©ûê
u8
 *c⁄° 
	mfifo0
;

334 vﬁ©ûê
u16
 *
	mtx_dpktdis
;

339 vﬁ©ûê
u16
 *c⁄° 
	gc§0
;

340 vﬁ©ûê
u16
 *c⁄° 
	gcou¡0
;

341 vﬁ©ûê
u8
 *c⁄° 
	gty≥0
;

345 
	#USB_EP
(
ï
Ë((
ï_ªgs
*Îp##
TXMAXP
)

	)

347 
	#USB_SIE
(
x
Ë((
sõ_ªgs
*)&x##
_CON
)

	)

349 
	#USB_REGS
(
x
Ë((
musb_ªgs
*)x##
_FADDR
)

	)

351 
	#USB_HUB_REGS
(
x
Ë((
hub_ªgs
*)x##
_TXFUNCADDR
)

	)

353 
	#MULTIPOINT
 1

	)

355 
	#DEFINE_USB_PHY
(
phy
)\

356 c⁄° 
musb_hw_ï
 
phy
##
_phy_desc
=\

358 .
sõ
 = 
	`USB_SIE
(
phy
##
_SIE
),\

359 .
ï
[0] =
	`USB_EP
(
phy
##
_EP0
),\

360 .
ï
[1] =
	`USB_EP
(
phy
##
_EP1
),\

361 .
ï
[2] =
	`USB_EP
(
phy
##
_EP2
),\

362 .
ï
[3] =
	`USB_EP
(
phy
##
_EP3
),\

363 .
ï
[4] =
	`USB_EP
(
phy
##
_EP4
),\

364 .
ï
[5] =
	`USB_EP
(
phy
##
_EP5
),\

365 .
ï
[6] =
	`USB_EP
(
phy
##
_EP6
),\

366 .
ªgs
 = 
	`USB_REGS
(
phy
),\

367 .
hªgs
[0] = 
	`USB_HUB_REGS
(
phy
##
_EP0
),\

368 .
hªgs
[1] = 
	`USB_HUB_REGS
(
phy
##
_EP1
),\

369 .
hªgs
[2] = 
	`USB_HUB_REGS
(
phy
##
_EP2
),\

370 .
hªgs
[3] = 
	`USB_HUB_REGS
(
phy
##
_EP3
),\

371 .
hªgs
[4] = 
	`USB_HUB_REGS
(
phy
##
_EP4
),\

372 .
hªgs
[5] = 
	`USB_HUB_REGS
(
phy
##
_EP5
),\

373 .
hªgs
[6] = 
	`USB_HUB_REGS
(
phy
##
_EP6
),\

374 .
dev˘l
 = 
phy
##
_DEVCTL
,\

375 .
fifo0
 = 
phy
##
_FIFO0
,\

376 .
tx_dpktdis
 = 
phy
##
_TX_DPKTDIS
,\

377 };

	)

379 .
	gty≥0
 = 
phy
##
_TYPE0
,\

380 .
	gc§0
 = 
phy
##
_CSR0
,\

381 .
	gcou¡0
 = 
phy
##
_COUNT0
,\

385 
	#USB_MSD_SCSI_DATA
 \

421 }

	)

423 
	#USB_UVC_SLAVE_MULTI_CNT
 8

424 

	)

	@include_lib/system/cpu/AC521x/asm/uvc_device.h

6 #i‚de‡
_UVC_DEVICE_H_


7 
	#_UVC_DEVICE_H_


	)

8 
	~"devi˚/video.h
"

9 
	~"devi˚/ˇmîa.h
"

11 
	#UVC_CMD_BASE
 0x00010000

	)

13 
	#UVC_GET_CUR_FPS
 (
UVC_CMD_BASE
 + 1)

	)

14 
	#UVC_GET_CUR_BITS_RATE
 (
UVC_CMD_BASE
 + 2)

	)

16 
	eå™s_mode
 {

17 
	mUVC_PUSH_PHY_MODE
,

18 
	mUVC_PUSH_VIRTUAL_MODE
,

21 
	susb_ˇmîa_öfo
 {

22 
u16
 
	mwidth
;

23 
u16
 
	mheight
;

24 
	mÂs
;

25 
	mßm∂e_fmt
;

26 
å™s_mode
 
	mmode
;

29 
uvc_gë_§c_pixf‹m©
(*
fh
);

30 
uvc_£t_ouçut_buf
(*
fh
, *
buf
, 
size
);

32 *
uvc_ouçut_›í
(
u8
 
mij‹
, 
ˇmîa_devi˚_öfo
 *
öfo
);

33 
uvc_ouçut_£t_fmt
(*
fh
, 
video_f‹m©
 *
f
);

34 
uvc_gë_ªÆ_Âs
(*
fh
);

35 
uvc_ouçut_⁄e_‰ame
(*
fh
);

36 
uvc_ouçut_°›
(*
fh
);

37 
uvc_ouçut_˛o£
(*
fh
);

38 
uvc_£t_ouçut_buf„r
(*
fh
, *
buf
, 
num
);

39 
uvc_£t_sˇÀr_h™dÀr
(*
fh
, *
¥iv
, (*
h™dÀr
)(*, 
YUV_‰ame_d©a
 *));

	@include_lib/system/cpu/AC521x/asm/video_engine.h

8 #i‚de‡
_VIDEO_ENGINE_H


9 
	#_VIDEO_ENGINE_H


	)

10 
	~"ty≥def.h
"

11 
	~"devi˚/devi˚.h
"

13 
	#JIVE_OP_ATTR_APPEND
 (1<<31)

	)

14 
	#JIVE_OP_ATTR_BATCH
 (1<<30)

	)

15 
	#JIVE_OP_ATTR_TAIL
 (1<<29)

	)

16 
	#JIVE_OP_ATTR_MASK
 (0xf<<28)

	)

18 
	#JIVE_MD_OBJS_MAX
 512

	)

21 
	mJIVE_OP_MD
,

22 
	mJIVE_OP_COPY
,

23 
	mJIVE_OP_FILTER
,

24 
	mJIVE_OP_CSC
,

25 
	mJIVE_OP_CANNY
,

26 
	mJIVE_OP_ERODE
,

27 
	mJIVE_OP_DILATE
,

28 
	mJIVE_OP_BINARY
,

29 
	mJIVE_OP_AND
,

30 
	mJIVE_OP_OR
,

31 
	mJIVE_OP_SUB_ABS
,

32 
	mJIVE_OP_SUB_SHIFT
,

33 
	mJIVE_OP_INTEGRAL_2D
,

34 
	mJIVE_OP_INTEGRAL_2D_SQR
,

35 
	mJIVE_OP_INTEGRAL_1D
,

36 
	mJIVE_OP_HISTOGRAM
,

37 
	mJIVE_OP_GAMMA
,

38 
	mJIVE_OP_RESIZE
,

39 
	mJIVE_OP_MOMENT
,

40 
	mJIVE_OP_JIVE_LOCK
,

41 
	mJIVE_OP_JIVE_UNLOCK
,

42 
	mJIVE_OP_JLMD_LOCK
,

43 
	mJIVE_OP_JLMD_UNLOCK
,

45 
	mJIVE_OP_MAX
,

47 } 
	tjive_›î©e_t
;

50 
	mJIVE_FORMAT_NULL
,

51 
	mJIVE_FORMAT_GRAY
,

52 
	mJIVE_FORMAT_RGB
,

53 
	mJIVE_FORMAT_RGB_P
,

54 
	mJIVE_FORMAT_YUV420P
,

55 
	mJIVE_FORMAT_YUV422P
,

56 
	mJIVE_FORMAT_YUV444P
,

57 
	mJIVE_FORMAT_HSV
,

58 
	mJIVE_FORMAT_HSV_P
,

59 
	mJIVE_FORMAT_DATA_S8
,

60 
	mJIVE_FORMAT_DATA_U16
,

61 
	mJIVE_FORMAT_DATA_S16
,

62 
	mJIVE_FORMAT_DATA_U32
,

63 
	mJIVE_FORMAT_DATA_S32
,

64 } 
	tjive_f‹m©_t
;

67 
	mJIVE_INTERGRAL_HORIZONTAL
,

68 
	mJIVE_INTERGRAL_VERTICAL
,

69 } 
	tjive_öãgøl_mode_t
;

72 
	mJIVE_BINARY_NORMAL
,

73 
	mJIVE_BINARY_TRUNC_HIGH
,

74 
	mJIVE_BINARY_TRUNC_LOW
,

75 } 
	tjive_bö¨y_mode_t
;

78 
	mJIVE_MD_MORPH_KERNEL_RECT
,

79 
	mJIVE_MD_MORPH_KERNEL_CROSS
,

80 } 
	tjive_md_m‹ph_kî√l_t
;

83 
	mJIVE_ERR_NONE
 = 0,

84 
	mJIVE_ERR_TIMEOUT
 = -1,

85 
	mJIVE_ERR_PARAM
 = -2,

86 
	mJIVE_ERR_MD_FULL
 = -3,

87 } 
	tjive_î∫o_t
;

90 
	simage
 {

91 
u16
 
	mw
;

92 
u16
 
	mh
;

93 
u16
 
	m°ride
;

94 
jive_f‹m©_t
 
	mf‹m©
;

97 
u8
 *
	mpixñs
;

98 
u8
 *
	md©a
;

99 
s8
 *
	md©a_s8
;

100 
u16
 *
	md©a_u16
;

101 
s16
 *
	md©a_s16
;

102 
u32
 *
	md©a_u32
;

105 } 
	tjive_image_t
;

108 
jive_image_t
 *
	m§c
;

109 
jive_image_t
 *
	md°
;

110 } 
	tjive_∑øm_gíîic_t
;

113 
jive_image_t
 *
	m§c
;

114 
jive_image_t
 *
	md°
;

115 
s8
 
	mc€f
[9];

116 
u8
 
	mright_shi·
;

117 } 
	tjive_∑øm_fûãr_t
;

120 
jive_image_t
 *
	m§c
;

121 
jive_image_t
 *
	mmag
;

122 
jive_image_t
 *
	m™gÀ
;

123 } 
	tjive_∑øm_ˇ¬y_t
;

126 
jive_image_t
 *
	m§c
;

127 
jive_image_t
 *
	md°
;

128 
u8
 
	mthªshﬁd
;

129 
jive_bö¨y_mode_t
 
	mbö¨y_mode
;

130 } 
	tjive_∑øm_bö¨y_t
;

133 
jive_image_t
 *
	m§c
;

134 
jive_image_t
 *
	md°
;

135 
s8
 
	mc€f
[9];

136 } 
	tjive_∑øm_m‹ph_t
;

139 
jive_image_t
 *
	m§c
;

140 
u32
 *
	md©a_u32
;

141 
jive_öãgøl_mode_t
 
	möãrgøl_dúe˘i⁄
;

142 } 
	tjive_∑øm_öãgøl_1d_t
;

145 
jive_image_t
 *
	m§c
;

146 
jive_image_t
 *
	md°
;

147 
u8
 
	mmö
;

148 
u8
 
	mmax
;

149 
u8
 
	moff£t
;

150 
u8
 
	mright_shi·
;

151 
u32
 
	mcou¡
;

152 } 
	tjive_∑øm_öãgøl_2d_sqr_t
;

155 
jive_image_t
 *
	m§c
;

156 
u32
 *
	md©a_u32
;

157 } 
	tjive_∑øm_hi°_t
;

160 
jive_image_t
 *
	m§c
;

161 
jive_image_t
 *
	md°
;

162 
u32
 *
	mgamma
;

163 } 
	tjive_∑øm_gamma_t
;

166 
jive_image_t
 *
	m§c
;

167 
u8
 
	mright_shi·
;

168 
u32
 *
	md©a_u32
;

169 } 
	tjive_∑øm_momít_t
;

173 
u32
 
	mcou¡
;

174 
u8
 
	my2
;

175 
u8
 
	my1
;

176 
u8
 
	mx2
;

177 
u8
 
	mx1
;

178 } 
	tjive_md_obj_öfo_t
;

181 
jive_image_t
 *
	m§c
;

182 
jive_image_t
 *
	mbg
;

183 
jive_image_t
 *
	mªf
;

184 
jive_md_obj_öfo_t
 *
	mobjs
;

186 
u16
 
	mweight
;

187 
u16
 
	mth
;

188 
u8
 
	m›í_times
;

189 
u8
 
	m˛o£_times
;

190 
jive_md_m‹ph_kî√l_t
 
	mdû©e_kî√l
;

191 
jive_md_m‹ph_kî√l_t
 
	mîode_kî√l
;

192 
u16
 
	mobj_num
;

193 
u32
 
	mfg_tŸÆ
;

194 
u32
 
	m‰ame_num
;

195 
s32
 
	mî∫o
;

197 } 
	tjive_md_c⁄ãxt_t
;

200 
	sígöe_›s
 {

201 (*
	möô
)();

202 *(*
	m›í
)(*
	m∑øm
);

203 (*
	mio˘l
)(*
	mh™dÀ
, 
u32
 
	mcmd
, *
	m∑øm
);

204 (*
	m˛o£
)(*
	mh™dÀ
);

207 
	sígöe_devi˚
 {

208 c⁄° *
	m«me
;

209 c⁄° 
ígöe_›s
 *
	m›s
;

210 *
	m¥iv
;

213 c⁄° 
devi˚_›î©i⁄s
 
video_ígöe_›s
;

217 
ígöe_devi˚
 
video_ígöe_jive_dev
;

218 
ígöe_devi˚
 
video_ígöe_jlmd_dev
;

	@include_lib/system/cpu/AC521x/asm/video_fb.h

1 #i‚de‡
__ASM_FBDEV_H


2 
	#__ASM_FBDEV_H


	)

4 
	~"devi˚/video.h
"

7 
	#FBDEV_FULL_SCREEN_FIRST
 1

	)

8 
	#FBDEV_FULL_IMAGE_FIRST
 2

	)

10 
	svideo_fb_s_©å
 {

11 
u8
 
	mrŸ©e
;

12 
u8
 
	mimr_id
;

13 
u16
 
	mwidth
;

14 
u16
 
	mheight
;

17 *
video_fb_›í
(
video_f‹m©
 *, , );

18 
video_fb_gë_m≠
(*, 
fb_m≠_u£r
 *
m≠
);

19 
video_fb_put_m≠
(*, 
fb_m≠_u£r
 *
m≠
);

20 
video_fb_˛o£
(*
fb
);

21 
video_fb_gë_pögp⁄g_buf„r
(*
_hdl
, 
id
, 
fb_m≠_u£r
 *
m≠
);

22 
video_fb_gë_s_©å
(*
_hdl
, 
video_fb_s_©å
 *
©å
);

24 
video_fb_£t_evít_h™dÀr
(*
_hdl
,

25 (*
h™dÀr
)(*, 
fb_evít
), *
¥iv
);

	@include_lib/system/cpu/AC521x/device.ld

2 
	g_ˇmîa_dev_begö
 = .;

3 
PROVIDE
(
ˇmîa_dev_begö
 = .);

4 *(.
	gˇmîa_dev
)

5 
	g_ˇmîa_dev_íd
 = .;

6 
PROVIDE
(
ˇmîa_dev_íd
 = .);

8 
	g_adc_sˇn_begö
 = .;

9 
PROVIDE
(
adc_sˇn_begö
 = .);

10 *(.
	gadc_sˇn
)

11 
	g_adc_sˇn_íd
 = .;

12 
PROVIDE
(
adc_sˇn_íd
 = .);

14 
	g_•i_devi˚_begö
 = .;

15 
PROVIDE
(
•i_devi˚_begö
 = .);

16 *(.
	g•i_devi˚
)

17 
	g_•i_devi˚_íd
 = .;

18 
PROVIDE
(
•i_devi˚_íd
 = .);

	@include_lib/system/database.h

1 #i‚de‡
DATABASE_H


2 
	#DATABASE_H


	)

4 
	~"ty≥def.h
"

7 
	sdb_èbÀ
 {

8 c⁄° *
	m«me
;

9 
u8
 
	mvÆue_bôs
;

10 
	mvÆue
;

14 
db_£À˘_buf„r
(
u8
 
ödex
, *
buf„r
, 
Àn
);

16 
db_upd©e_buf„r
(
u8
 
ödex
, *
buf„r
, 
Àn
);

18 
db_¸óã
(c⁄° *
°‹e_dev
);

21 
db_¸óã_èbÀ
(c⁄° 
db_èbÀ
 *
èbÀ
, 
num
);

23 
u32
 
db_£À˘
(c⁄° *
èbÀ
);

25 
db_upd©e
(c⁄° *
èbÀ
, 
u32
 
vÆue
);

27 
db_Êush
();

29 
db_ª£t
();

31 
db_îa£
();

	@include_lib/system/device/adkey.h

1 #i‚de‡
DEVICE_ADKEY_H


2 
	#DEVICE_ADKEY_H


	)

5 
	~"ty≥def.h
"

9 
	sadkey_vÆue_èbÀ
 {

10 
u16
 
	mad_vÆue
[
ADKEY_MAX_NUM
];

11 
u8
 
	mkey_vÆue
[
ADKEY_MAX_NUM
];

14 
	sadkey_∂©f‹m_d©a
 {

15 
u8
 
	mio
;

16 
u8
 
	mad_ch™√l
;

17 
u8
 
	mba£_˙t
;

18 
u8
 
	ml⁄g_˙t
;

19 
u8
 
	mhﬁd_˙t
;

21 
adkey_vÆue_èbÀ
 
	mèbÀ
;

	@include_lib/system/device/audio_dev.h

1 #i‚de‡
AUDIO_DEV_H


2 
	#AUDIO_DEV_H


	)

4 
	~"gíîic/li°.h
"

5 
	~"ty≥def.h
"

6 
	~"devi˚/devi˚.h
"

9 
	#AUDIOC_QUERYCAP
 
	`_IOR
('A', 0, (
audio_ˇ∑bûôy
))

	)

10 
	#AUDIOC_GET_FMT
 
	`_IOR
('A', 1, (
audio_f‹m©
))

	)

11 
	#AUDIOC_SET_FMT
 
	`_IOW
('A', 1, (
audio_f‹m©
))

	)

12 
	#AUDIOC_REQBUFS
 
	`_IOR
('A', 2, ())

	)

13 
	#AUDIOC_DQBUF
 
	`_IOR
('A', 3, ())

	)

14 
	#AUDIOC_QBUF
 
	`_IOR
('A', 4, ())

	)

15 
	#AUDIOC_STREAM_ON
 
	`_IOR
('A', 5, ())

	)

16 
	#AUDIOC_STREAM_OFF
 
	`_IOR
('A', 6, ())

	)

21 
	#AUD_SUBDEV_REQ_GET_PCM_DATA
 0

	)

22 
	#AUD_SUBDEV_REQ_PUT_PCM_DATA
 0

	)

25 
	#AUDIO_TYPE_DEC
 0x01

	)

26 
	#AUDIO_TYPE_ENC
 0x02

	)

28 
	saudio_ªq_d©a
 {

29 
u8
 
	mch™√l
;

30 
u8
 *
	md©a
;

31 
	mÀn
;

32 
	mßm∂e_øã
;

35 
	gaudio_ídpoöt
;

37 
	saudio_∂©f‹m_d©a
 {

38 
u8
 
	mty≥
;

39 *
	m¥iv©e_d©a
;

44 
	#AUDIO_CAP_SAMPLING
 0x00000001

	)

45 
	#AUDIO_CAP_MP3_ENC
 0x00000002

	)

47 
	saudio_ˇ∑bûôy
 {

48 
u32
 
	mˇ∑bûôõs
;

52 
	#AUDIO_FMT_PCM
 0x01

	)

53 
	#AUDIO_FMT_SPEEX
 0x02

	)

54 
	#AUDIO_FMT_AMR
 0x03

	)

55 
	#AUDIO_FMT_AAC
 0x04

	)

57 
	saudio_f‹m©
 {

58 
u8
 
	mvﬁume
;

59 
u8
 
	mch™√l
;

60 
u8
 
	mkbps
;

61 
u8
 
	m¥i‹ôy
;

62 
u16
 
	m‰ame_Àn
;

63 
u16
 
	m‰ame_hód_ª£rve_Àn
;

64 
	mßm∂e_øã
;

65 c⁄° *
	mf‹m©
;

66 c⁄° *
	mßm∂e_sour˚
;

70 
	saudio_subdevi˚_›s
 {

71 (*
	möô
)(
	maudio_∂©f‹m_d©a
 *);

73 (*
	mquîyˇp
)(
audio_ˇ∑bûôy
 *
	mˇp
);

75 (*
	mgë_f‹m©
)(
	maudio_f‹m©
 *);

76 (*
	m£t_f‹m©
)(
	maudio_f‹m©
 *);

78 
	maudio_ídpoöt
 *(*
	m›í
)(
	maudio_f‹m©
 *);

80 (*
	m°ªam⁄
)(
	maudio_ídpoöt
 *);

82 (*
	m°ªamoff
)(
	maudio_ídpoöt
 *);

84 (*
	mª•⁄£
)(
	maudio_ídpoöt
 *, 
	mcmd
, *);

86 (*
	mwrôe
)(
	maudio_ídpoöt
 *, *
	mbuf
, 
u32
 
	mÀn
);

88 (*
	m˛o£
)(
	maudio_ídpoöt
 *);

90 (*
	mio˘l
)(
	maudio_ídpoöt
 *, 
u32
 
	mcmd
, u32 
	m¨g
);

93 
	saudio_subdevi˚
 {

94 
u8
 
	mid
;

96 
u8
 
	mty≥
;

97 
u32
 
	mf‹m©
;

101 c⁄° 
audio_subdevi˚_›s
 *
	m›s
;

105 
	saudio_ídpoöt
 {

106 
li°_hód
 
	míåy
;

107 
audio_subdevi˚
 *
	mdev
;

108 
	möu£d
;

109 *
	m∑ª¡
;

110 *
	m¥iv©e_d©a
;

114 
audio_subdevi˚_ªque°
(
audio_ídpoöt
 *
ï
, 
ªq
, *
¨g
);

116 *
audio_buf_mÆloc
(
audio_ídpoöt
 *
ï
, 
u32
 
size
);

119 *
audio_buf_ªÆloc
(
audio_ídpoöt
 *
ï
, *
buf
, 
size
);

122 
audio_buf_°ªam_föish
(
audio_ídpoöt
 *
ï
, *
buf
);

124 
audio_buf_‰ì
(
audio_ídpoöt
 *
ï
, *
buf
);

126 
audio_buf_£t_time
(
audio_ídpoöt
 *
ï
, *
buf
, 
u32
 
m£c
);

129 
audio_subdevi˚
 
audio_subdev_begö
[];

130 
audio_subdevi˚
 
audio_subdev_íd
[];

133 
	#REGISTER_AUDIO_SUBDEVICE
(
dev
, 
_id
) \

134 c⁄° 
audio_subdevi˚
 
dev
 
	`£c
(.
audio_subdev
.##
_id
) = { \

135 .
id
 = 
_id
, \

136 

	)

139 c⁄° 
devi˚_›î©i⁄s
 
audio_dev_›s
;

	@include_lib/system/device/av10_spi.h

1 #i‚de‡
_AV10_SPI_H


2 
	#_AV10_SPI_H


	)

5 
	~"asm/i•_dev.h
"

6 
	~"gpio.h
"

8 
	~"ty≥def.h
"

9 
	~"devi˚/devi˚.h
"

10 
	~"gíîic/io˘l.h
"

11 
	~"sy°em/èsk.h
"

14 
av10_f_x‹
(
u16
 
addr
, 
u8
 
wd©
);

15 
av10_f_™d
(
u16
 
addr
, 
u8
 
wd©
);

16 
av10_f_‹
(
u16
 
addr
, 
u8
 
wd©
);

17 
av10_f_mov
(
u16
 
addr
, 
u8
 
wd©
);

18 
av10_drv_r°
(
u16
 
addr
, 
u8
 
wd©
);

19 
u8
 
av10_drv_rx
(
u16
 
addr
);

20 
av10_drv_tx
(
u16
 
addr
, 
u8
 
wd©
);

21 
u8
 
•i1_ª˚ive
(u8 
buf
);

22 
•i1_£nd
(
u8
 
d©
);

25 
	gavö_•i_devi˚
;

28 
	sso·w¨e_•i
 {

29 
u8
 
	mpö_cs
;

30 
u8
 
	mpö_˛k
;

31 
u8
 
	mpö_ö
;

32 
u8
 
	mpö_out
;

35 
	ssw_•i_∂©f‹m_d©a
 {

36 
so·w¨e_•i
 
	m•i
;

40 
	#SW_SPI_PLATFORM_DATA_BEGIN
(
d©a
) \

41 c⁄° 
sw_•i_∂©f‹m_d©a
 
d©a
 = { \

42 .
•i
 = {

	)

44 
	#SW_SPI_PLATFORM_DATA_END
() \

46 };

	)

49 
	savö_•i_›î©i⁄s
 {

50 (*
	möô
)(const *);

51 (*
	mªad
)(c⁄° *, *
	mbuf
, 
	mÀn
);

52 (*
	mwrôe
)(c⁄° *, *
	mbuf
, 
	mÀn
);

53 (*
	mio˘l
)(c⁄° *, 
	mcmd
, 
	m¨g
);

56 
	savö_•i_devi˚
 {

57 c⁄° *
	m•i_d©
;

58 
devi˚
 
	mdev
;

59 c⁄° 
avö_•i_›î©i⁄s
 *
	m›s
;

60 
OS_MUTEX
 
	mmuãx
;

64 
	#REGISTER_AVIN_SPI_DEVICE
–
_›s
) \

65 
avö_•i_devi˚
 
__sw_•i
 
	`£c
(.
sw_•i
) = { \

66 .
›s
 = 
_›s
,\

67 };

	)

69 
avö_•i_devi˚
 
avö_•i_devi˚_begö
[], 
avö_•i_devi˚_íd
[];

71 
	#li°_f‹_óch_avö_•i_devi˚
(
p
) \

72 
p
=
avö_•i_devi˚_begö
;Ö<
avö_•i_devi˚_íd
;Ö++)

	)

	@include_lib/system/device/camera.h

1 #i‚de‡
DEVICE_CAMERA_H


2 
	#DEVICE_CAMERA_H


	)

7 
	~"devi˚/devi˚.h
"

8 
	~"asm/i•_dev.h
"

9 
	~"devi˚/video.h
"

12 
	#VIDEO_TAG_CAMERA
 
	`VIDEO_TAG
('c', 'a', 'm', 'e')

	)

13 
	#VIDEO_TAG_UVC
 
	`VIDEO_TAG
('u', 'v', 'c', ' ')

	)

14 
	#VIDEO_TAG_MASS
 
	`VIDEO_TAG
('m', 'a', 's', 's')

	)

17 
	#CAMERA_DEVICE_NUM
 2

	)

19 
	#CSI2_X0_LANE
 0

	)

20 
	#CSI2_X1_LANE
 1

	)

21 
	#CSI2_X2_LANE
 2

	)

22 
	#CSI2_X3_LANE
 3

	)

23 
	#CSI2_X4_LANE
 4

	)

25 
	sˇmîa_∂©f‹m_d©a
 {

26 
u8
 
	mx˛k_gpio
;

27 
u8
 
	mª£t_gpio
;

28 
u8
 
	mpwdn_gpio
;

29 
u8
 
	mpowî_vÆue
;

30 
u32
 
	möãrÁ˚
;

31 
boﬁ
 (*
⁄löe_dëe˘
)();

34 
u32
 
	mp˛k_gpio
;

35 
u32
 
	mhsync_gpio
;

36 
u32
 
	mvsync_gpio
;

37 
u32
 
	mio_fun˘i⁄_£l
;

38 
u32
 
	md©a_gpio
[10];

39 } 
	mdvp
;

41 
u8
 
	md©a_œ√_num
;

42 
u8
 
	m˛k_öv
;

43 
u8
 
	md0_rm≠
;

44 
u8
 
	md0_öv
;

45 
u8
 
	md1_rm≠
;

46 
u8
 
	md1_öv
;

47 
u8
 
	md2_rm≠
;

48 
u8
 
	md2_öv
;

49 
u8
 
	md3_rm≠
;

50 
u8
 
	md3_öv
;

51 
u8
 
	mtvÆ_h°t
;

52 
u8
 
	mtvÆ_°to
;

53 } 
	mcsi2
;

57 
	sˇmîa_devi˚_öfo
 {

58 
u16
 
	mÂs
;

59 
u16
 
	mwidth
;

60 
u16
 
	mheight
;

61 
u32
 
	mªÆ_Âs
;

65 
	#CAMERA_PLATFORM_DATA_BEGIN
(
d©a
) \

66 c⁄° 
ˇmîa_∂©f‹m_d©a
 
d©a
 = { \

67 

	)

69 
	#CAMERA_PLATFORM_DATA_END
() \

70 };

	)

72 
	#CAMERA_CMD_BASE
 0x00400000

	)

73 
	#CAMERA_GET_ISP_SRC_SIZE
 (
CAMERA_CMD_BASE
 + 1)

	)

74 
	#CAMERA_GET_ISP_SIZE
 (
CAMERA_CMD_BASE
 + 2)

	)

75 
	#CAMERA_SET_CROP_SIZE
 (
CAMERA_CMD_BASE
 + 3)

	)

76 
	#CAMERA_CROP_TRIG
 (
CAMERA_CMD_BASE
 + 4)

	)

77 
	#CAMERA_NEED_REMOUNT
 (
CAMERA_CMD_BASE
 + 5)

	)

78 
	#CAMERA_GET_SENSOR_ID
 (
CAMERA_CMD_BASE
 + 6)

	)

80 c⁄° 
devi˚_›î©i⁄s
 
ˇmîa_dev_›s
;

83 
	#DVP_SENSOR0
(
£l
) (((sel?1:0) << 24) | (22))

84 
	#DVP_SENSOR1
(
£l
) (((sel?1:0) << 24) | (23))

85 

	)

87 
ˇmîa_öô
(c⁄° *
«me
, c⁄° 
video_∂©f‹m_d©a
 *
d©a
);

89 *
ˇmîa_drivî_›í
(
id
, 
ˇmîa_devi˚_öfo
 *
öfo
);

91 
ˇmîa_drivî_io˘l
(*
_ˇmîa
, 
u32
 
cmd
, *
¨g
);

93 
ˇmîa_drivî_˛o£
(*
_ˇmîa
);

	@include_lib/system/device/card.h

1 #i‚de‡
_CARD_H_


2 
	#_CARD_H_


	)

4 
	~"ty≥def.h
"

6 
	smmc_cid
 {

7 
	mm™fid
;

8 
	m¥od_«me
[8];

9 
	m¥v
;

10 
	m£rül
;

11 
	m€mid
;

12 
	myór
;

13 
	mhwªv
;

14 
	mfwªv
;

15 
	mm⁄th
;

18 
	smmc_csd
 {

19 
	m°ru˘uª
;

20 
	mmmˇ_v¢
;

21 
	mcmd˛ass
;

22 
	mècc_˛ks
;

23 
	mècc_ns
;

24 
	mc_size
;

25 
	mr2w_Á˘‹
;

26 
	mmax_då
;

27 
	mîa£_size
;

28 
	mªad_blkbôs
;

29 
	mwrôe_blkbôs
;

30 
	mˇ∑côy
;

31 
	mªad_∑πül
: 1,

32 
	mªad_mißlign
: 1,

33 
	mwrôe_∑πül
: 1,

34 
	mwrôe_mißlign
: 1;

37 
	smmc_ext_csd
 {

38 
u8
 
	mªv
;

39 
u8
 
	mîa£_group_def
;

40 
u8
 
	m£c_„©uª_suµ‹t
;

41 
u8
 
	mªl_£˘‹s
;

42 
u8
 
	mªl_∑øm
;

43 
u8
 
	m∑π_c⁄fig
;

44 
u8
 
	mˇche_˘æ
;

45 
u8
 
	mr°_n_fun˘i⁄
;

46 
u8
 
	mmax_∑cked_wrôes
;

47 
u8
 
	mmax_∑cked_ªads
;

48 
u8
 
	m∑cked_evít_í
;

49 
	m∑π_time
;

50 
	mß_timeout
;

51 
	mgíîic_cmd6_time
;

52 
	mpowî_off_l⁄gtime
;

53 
u8
 
	mpowî_off_nŸifiˇti⁄
;

54 
	mhs_max_då
;

55 
	mhs200_max_då
;

56 
	#MMC_HIGH_26_MAX_DTR
 26000000

	)

57 
	#MMC_HIGH_52_MAX_DTR
 52000000

	)

58 
	#MMC_HIGH_DDR_MAX_DTR
 52000000

	)

59 
	#MMC_HS200_MAX_DTR
 200000000

	)

60 
	m£˘‹s
;

61 
	mhc_îa£_size
;

62 
	mhc_îa£_timeout
;

63 
	m£c_åim_mu…
;

64 
	m£c_îa£_mu…
;

65 
	måim_timeout
;

66 
boﬁ
 
	míh™˚d_¨ó_í
;

67 
	míh™˚d_¨ó_off£t
;

68 
	míh™˚d_¨ó_size
;

69 
	mˇche_size
;

70 
boﬁ
 
	mhpi_í
;

71 
boﬁ
 
	mhpi
;

72 
	mhpi_cmd
;

73 
boﬁ
 
	mbk›s
;

74 
boﬁ
 
	mbk›s_í
;

75 
	md©a_£˘‹_size
;

76 
	md©a_èg_unô_size
;

77 
	mboŸ_ro_lock
;

78 
boﬁ
 
	mboŸ_ro_lockabÀ
;

79 
u8
 
	møw_ex˚±i⁄_°©us
;

80 
u8
 
	møw_∑πôi⁄_suµ‹t
;

81 
u8
 
	møw_Ωmb_size_mu…
;

82 
u8
 
	møw_îa£d_mem_cou¡
;

83 
u8
 
	møw_ext_csd_°ru˘uª
;

84 
u8
 
	møw_ˇrd_ty≥
;

85 
u8
 
	mout_of_öt_time
;

86 
u8
 
	møw_pwr_˛_52_195
;

87 
u8
 
	møw_pwr_˛_26_195
;

88 
u8
 
	møw_pwr_˛_52_360
;

89 
u8
 
	møw_pwr_˛_26_360
;

90 
u8
 
	møw_s_a_timeout
;

91 
u8
 
	møw_hc_îa£_g≠_size
;

92 
u8
 
	møw_îa£_timeout_mu…
;

93 
u8
 
	møw_hc_îa£_gΩ_size
;

94 
u8
 
	møw_£c_åim_mu…
;

95 
u8
 
	møw_£c_îa£_mu…
;

96 
u8
 
	møw_£c_„©uª_suµ‹t
;

97 
u8
 
	møw_åim_mu…
;

98 
u8
 
	møw_pwr_˛_200_195
;

99 
u8
 
	møw_pwr_˛_200_360
;

100 
u8
 
	møw_pwr_˛_ddr_52_195
;

101 
u8
 
	møw_pwr_˛_ddr_52_360
;

102 
u8
 
	møw_pwr_˛_ddr_200_360
;

103 
u8
 
	møw_bk›s_°©us
;

104 
u8
 
	møw_£˘‹s
[4];

106 
	m„©uª_suµ‹t
;

107 
	#MMC_DISCARD_FEATURE
 
	`BIT
(0Ë

	)

110 
	ssd_s¸
 {

111 
	msda_v¢
;

112 
	msda_•ec3
;

113 
	mbus_widths
;

114 
	#SD_SCR_BUS_WIDTH_1
 (1<<0)

	)

115 
	#SD_SCR_BUS_WIDTH_4
 (1<<2)

	)

116 
	mcmds
;

117 
	#SD_SCR_CMD20_SUPPORT
 (1<<0)

	)

118 
	#SD_SCR_CMD23_SUPPORT
 (1<<1)

	)

121 
	ssd_s§
 {

122 
	mau
;

123 
	mîa£_timeout
;

124 
	mîa£_off£t
;

127 
	ssd_swôch_ˇps
 {

128 
	mhs_max_då
;

129 
	muhs_max_då
;

130 
	#HIGH_SPEED_MAX_DTR
 50000000

	)

131 
	#UHS_SDR104_MAX_DTR
 208000000

	)

132 
	#UHS_SDR50_MAX_DTR
 100000000

	)

133 
	#UHS_DDR50_MAX_DTR
 50000000

	)

134 
	#UHS_SDR25_MAX_DTR
 
UHS_DDR50_MAX_DTR


	)

135 
	#UHS_SDR12_MAX_DTR
 25000000

	)

136 
	msd3_bus_mode
;

137 
	#UHS_SDR12_BUS_SPEED
 0

	)

138 
	#HIGH_SPEED_BUS_SPEED
 1

	)

139 
	#UHS_SDR25_BUS_SPEED
 1

	)

140 
	#UHS_SDR50_BUS_SPEED
 2

	)

141 
	#UHS_SDR104_BUS_SPEED
 3

	)

142 
	#UHS_DDR50_BUS_SPEED
 4

	)

144 
	#SD_MODE_HIGH_SPEED
 (1 << 
HIGH_SPEED_BUS_SPEED
)

	)

145 
	#SD_MODE_UHS_SDR12
 (1 << 
UHS_SDR12_BUS_SPEED
)

	)

146 
	#SD_MODE_UHS_SDR25
 (1 << 
UHS_SDR25_BUS_SPEED
)

	)

147 
	#SD_MODE_UHS_SDR50
 (1 << 
UHS_SDR50_BUS_SPEED
)

	)

148 
	#SD_MODE_UHS_SDR104
 (1 << 
UHS_SDR104_BUS_SPEED
)

	)

149 
	#SD_MODE_UHS_DDR50
 (1 << 
UHS_DDR50_BUS_SPEED
)

	)

150 
	msd3_drv_ty≥
;

151 
	#SD_DRIVER_TYPE_B
 0x01

	)

152 
	#SD_DRIVER_TYPE_A
 0x02

	)

153 
	#SD_DRIVER_TYPE_C
 0x04

	)

154 
	#SD_DRIVER_TYPE_D
 0x08

	)

155 
	msd3_cuº_limô
;

156 
	#SD_SET_CURRENT_LIMIT_200
 0

	)

157 
	#SD_SET_CURRENT_LIMIT_400
 1

	)

158 
	#SD_SET_CURRENT_LIMIT_600
 2

	)

159 
	#SD_SET_CURRENT_LIMIT_800
 3

	)

160 
	#SD_SET_CURRENT_NO_CHANGE
 (-1)

	)

162 
	#SD_MAX_CURRENT_200
 (1 << 
SD_SET_CURRENT_LIMIT_200
)

	)

163 
	#SD_MAX_CURRENT_400
 (1 << 
SD_SET_CURRENT_LIMIT_400
)

	)

164 
	#SD_MAX_CURRENT_600
 (1 << 
SD_SET_CURRENT_LIMIT_600
)

	)

165 
	#SD_MAX_CURRENT_800
 (1 << 
SD_SET_CURRENT_LIMIT_800
)

	)

168 
	ssdio_cc¸
 {

169 
	msdio_v¢
;

170 
	msd_v¢
;

171 
	mmu…i_block
: 1,

172 
	mlow_•ìd
: 1,

173 
	mwide_bus
: 1,

174 
	mhigh_powî
: 1,

175 
	mhigh_•ìd
: 1,

176 
	mdißbÀ_cd
: 1;

179 
	ssdio_cis
 {

180 
	mvíd‹
;

181 
	mdevi˚
;

182 
	mblksize
;

183 
	mmax_då
;

186 
	#SDIO_MAX_FUNCS
 7

	)

191 
	smmc_ˇrd
 {

192 
mmc_ho°
 *
	mho°
;

193 
u32
 
	mo¸
;

194 
	mrˇ
;

195 
	mty≥
;

196 
	#MMC_TYPE_MMC
 0

	)

197 
	#MMC_TYPE_SD
 1

	)

198 
	#MMC_TYPE_SDIO
 2

	)

199 
	#MMC_TYPE_SD_COMBO
 3

	)

200 
	m°©e
;

201 
	#MMC_STATE_PRESENT
 (1<<0Ë

	)

202 
	#MMC_STATE_READONLY
 (1<<1Ë

	)

203 
	#MMC_STATE_BLOCKADDR
 (1<<2Ë

	)

204 
	#MMC_CARD_SDXC
 (1<<3Ë

	)

205 
	#MMC_CARD_REMOVED
 (1<<4Ë

	)

206 
	#MMC_STATE_DOING_BKOPS
 (1<<5Ë

	)

207 
	#MMC_STATE_SUSPENDED
 (1<<6Ë

	)

208 
	mquúks
;

209 
	#MMC_QUIRK_LENIENT_FN0
 (1<<0Ë

	)

210 
	#MMC_QUIRK_BLKSZ_FOR_BYTE_MODE
 (1<<1Ë

	)

212 
	#MMC_QUIRK_NONSTD_SDIO
 (1<<2Ë

	)

214 
	#MMC_QUIRK_BROKEN_CLK_GATING
 (1<<3Ë

	)

215 
	#MMC_QUIRK_NONSTD_FUNC_IF
 (1<<4Ë

	)

216 
	#MMC_QUIRK_DISABLE_CD
 (1<<5Ë

	)

217 
	#MMC_QUIRK_INAND_CMD38
 (1<<6Ë

	)

218 
	#MMC_QUIRK_BLK_NO_CMD23
 (1<<7Ë

	)

219 
	#MMC_QUIRK_BROKEN_BYTE_MODE_512
 (1<<8Ë

	)

221 
	#MMC_QUIRK_LONG_READ_TIME
 (1<<9Ë

	)

222 
	#MMC_QUIRK_SEC_ERASE_TRIM_BROKEN
 (1<<10Ë

	)

223 
	#MMC_QUIRK_BROKEN_IRQ_POLLING
 (1<<11Ë

	)

225 
	mîa£_size
;

226 
	mîa£_shi·
;

227 
	m¥ef_îa£
;

228 
u8
 
	mîa£d_byã
;

229 
u32
 
	møw_cid
[4];

230 
u32
 
	møw_csd
[4];

231 
u32
 
	møw_s¸
[2];

232 
mmc_cid
 
	mcid
;

233 
mmc_csd
 
	mcsd
;

234 
mmc_ext_csd
 
	mext_csd
;

235 
sd_s¸
 
	ms¸
;

236 
sd_s§
 
	ms§
;

237 
sd_swôch_ˇps
 
	msw_ˇps
;

238 
	msdio_funcs
;

239 
sdio_cc¸
 
	mcc¸
;

240 
sdio_cis
 
	mcis
;

241 
sdio_func
 *
	msdio_func
[
SDIO_MAX_FUNCS
];

242 
	mnum_öfo
;

243 c⁄° **
	möfo
;

244 
sdio_func_tu∂e
 *
	mtu∂es
;

247 
ölöe
 
	$add_quúk
(
mmc_ˇrd
 *
ˇrd
, 
d©a
)

249 
ˇrd
->
quúks
 |
d©a
;

250 
	}
}

252 
ölöe
 
	$ªmove_quúk
(
mmc_ˇrd
 *
ˇrd
, 
d©a
)

254 
ˇrd
->
quúks
 &~
d©a
;

255 
	}
}

257 
	#mmc_ˇrd_mmc
(
c
Ë((c)->
ty≥
 =
MMC_TYPE_MMC
)

	)

258 
	#mmc_ˇrd_sd
(
c
Ë((c)->
ty≥
 =
MMC_TYPE_SD
)

	)

259 
	#mmc_ˇrd_sdio
(
c
Ë((c)->
ty≥
 =
MMC_TYPE_SDIO
)

	)

261 
	#mmc_ˇrd_¥e£¡
(
c
Ë((c)->
°©e
 & 
MMC_STATE_PRESENT
)

	)

262 
	#mmc_ˇrd_ªad⁄ly
(
c
Ë((c)->
°©e
 & 
MMC_STATE_READONLY
)

	)

263 
	#mmc_ˇrd_blockaddr
(
c
Ë((c)->
°©e
 & 
MMC_STATE_BLOCKADDR
)

	)

264 
	#mmc_ˇrd_ext_ˇ∑côy
(
c
Ë((c)->
°©e
 & 
MMC_CARD_SDXC
)

	)

265 
	#mmc_ˇrd_ªmoved
(
c
Ë((cË&& ((c)->
°©e
 & 
MMC_CARD_REMOVED
))

	)

266 
	#mmc_ˇrd_doög_bk›s
(
c
Ë((c)->
°©e
 & 
MMC_STATE_DOING_BKOPS
)

	)

267 
	#mmc_ˇrd_su•íded
(
c
Ë((c)->
°©e
 & 
MMC_STATE_SUSPENDED
)

	)

269 
	#mmc_ˇrd_£t_¥e£¡
(
c
Ë((c)->
°©e
 |
MMC_STATE_PRESENT
)

	)

270 
	#mmc_ˇrd_£t_ªad⁄ly
(
c
Ë((c)->
°©e
 |
MMC_STATE_READONLY
)

	)

271 
	#mmc_ˇrd_£t_blockaddr
(
c
Ë((c)->
°©e
 |
MMC_STATE_BLOCKADDR
)

	)

272 
	#mmc_ˇrd_£t_ext_ˇ∑côy
(
c
Ë((c)->
°©e
 |
MMC_CARD_SDXC
)

	)

273 
	#mmc_ˇrd_£t_ªmoved
(
c
Ë((c)->
°©e
 |
MMC_CARD_REMOVED
)

	)

274 
	#mmc_ˇrd_£t_doög_bk›s
(
c
Ë((c)->
°©e
 |
MMC_STATE_DOING_BKOPS
)

	)

275 
	#mmc_ˇrd_˛r_doög_bk›s
(
c
Ë((c)->
°©e
 &~
MMC_STATE_DOING_BKOPS
)

	)

276 
	#mmc_ˇrd_£t_su•íded
(
c
Ë((c)->
°©e
 |
MMC_STATE_SUSPENDED
)

	)

277 
	#mmc_ˇrd_˛r_su•íded
(
c
Ë((c)->
°©e
 &~
MMC_STATE_SUSPENDED
)

	)

279 
ölöe
 
	$mmc_ˇrd_Ànõ¡_‚0
(c⁄° 
mmc_ˇrd
 *
c
)

281  
c
->
quúks
 & 
MMC_QUIRK_LENIENT_FN0
;

282 
	}
}

284 
ölöe
 
	$mmc_blksz_f‹_byã_mode
(c⁄° 
mmc_ˇrd
 *
c
)

286  
c
->
quúks
 & 
MMC_QUIRK_BLKSZ_FOR_BYTE_MODE
;

287 
	}
}

289 
ölöe
 
	$mmc_ˇrd_dißbÀ_cd
(c⁄° 
mmc_ˇrd
 *
c
)

291  
c
->
quúks
 & 
MMC_QUIRK_DISABLE_CD
;

292 
	}
}

294 
ölöe
 
	$mmc_ˇrd_n⁄°d_func_öãrÁ˚
(c⁄° 
mmc_ˇrd
 *
c
)

296  
c
->
quúks
 & 
MMC_QUIRK_NONSTD_FUNC_IF
;

297 
	}
}

299 
ölöe
 
	$mmc_ˇrd_brokí_byã_mode_512
(c⁄° 
mmc_ˇrd
 *
c
)

301  
c
->
quúks
 & 
MMC_QUIRK_BROKEN_BYTE_MODE_512
;

302 
	}
}

304 
ölöe
 
	$mmc_ˇrd_l⁄g_ªad_time
(c⁄° 
mmc_ˇrd
 *
c
)

306  
c
->
quúks
 & 
MMC_QUIRK_LONG_READ_TIME
;

307 
	}
}

309 
ölöe
 
	$mmc_ˇrd_brokí_úq_pﬁlög
(c⁄° 
mmc_ˇrd
 *
c
)

311  
c
->
quúks
 & 
MMC_QUIRK_BROKEN_IRQ_POLLING
;

312 
	}
}

	@include_lib/system/device/device.h

1 #i‚de‡
CHRDEV_H


2 
	#CHRDEV_H


	)

5 
	~"gíîic/ty≥def.h
"

6 
	~"gíîic/li°.h
"

8 
	~"gíîic/©omic.h
"

10 
	~"devi˚/io˘l_cmds.h
"

13 
	gdev_node
;

14 
	gdevi˚
;

17 
	sdevi˚_›î©i⁄s
 {

18 
boﬁ
 (*
⁄löe
)(c⁄° 
dev_node
 *
	mnode
);

19 (*
	möô
)(c⁄° 
dev_node
 *
	mnode
, *);

20 (*
	m›í
)(c⁄° *
	m«me
, 
devi˚
 **
	mdevi˚
, *
	m¨g
);

21 (*
	mªad
)(
devi˚
 *
	mdevi˚
, *
	mbuf
, 
u32
 
	mÀn
, 
	mu32
);

22 (*
	mwrôe
)(
devi˚
 *
	mdevi˚
, *
	mbuf
, 
u32
 
	mÀn
, 
	mu32
);

23 (*
	m£ek
)(
devi˚
 *
	mdevi˚
, 
u32
 
	moff£t
, 
	m‹ig
);

24 (*
	mio˘l
)(
devi˚
 *
	mdevi˚
, 
u32
 
	mcmd
, u32 
	m¨g
);

25 (*
	m˛o£
)(
devi˚
 *
	mdevi˚
);

28 
	sdev_node
 {

29 c⁄° *
	m«me
;

30 c⁄° 
devi˚_›î©i⁄s
 *
	m›s
;

31 *
	m¥iv_d©a
;

35 
	sdevi˚
 {

36 
©omic_t
 
	mªf
;

37 *
	m¥iv©e_d©a
;

38 c⁄° 
devi˚_›î©i⁄s
 *
	m›s
;

39 *
	m∂©f‹m_d©a
;

40 *
	mdrivî_d©a
;

44 
	#REGISTER_DEVICE
(
node
) \

45 c⁄° 
dev_node
 
node
 
	`£c
(.
devi˚
)

	)

47 
	#REGISTER_DEVICES
(
node
) \

48 c⁄° 
dev_node
 
node
[] 
	`£c
(.
devi˚
)

	)

51 
devi˚s_öô
();

53 
boﬁ
 
dev_⁄löe
(c⁄° *
«me
);

55 *
dev_›í
(c⁄° *
«me
, *
¨g
);

58 
dev_ªad
(*
devi˚
, *
buf
, 
u32
 
Àn
);

61 
dev_wrôe
(*
devi˚
, *
buf
, 
u32
 
Àn
);

64 
dev_£ek
(*
devi˚
, 
u32
 
off£t
, 
‹ig
);

67 
dev_io˘l
(*
devi˚
, 
cmd
, 
u32
 
¨g
);

70 
dev_˛o£
(*
devi˚
);

73 
dev_bulk_ªad
(*
_devi˚
, *
buf
, 
u32
 
off£t
, u32 
Àn
);

75 
dev_bulk_wrôe
(*
_devi˚
, *
buf
, 
u32
 
off£t
, u32 
Àn
);

	@include_lib/system/device/device.ld

1 
	g_devi˚_node_begö
 = .;

2 
PROVIDE
(
devi˚_node_begö
 = .);

3 *(.
	gdevi˚
)

4 
	g_devi˚_node_íd
 = .;

5 
PROVIDE
(
devi˚_node_íd
 = .);

	@include_lib/system/device/device_data.ld

2 
	g_video_subdev_begö
 = .;

3 
PROVIDE
(
video_subdev_begö
 = .);

4 *(.
	gvideo_subdev
.0)

5 *(.
	gvideo_subdev
.1)

6 *(.
	gvideo_subdev
.2)

7 *(.
	gvideo_subdev
.3)

8 *(.
	gvideo_subdev
.4)

9 *(.
	gvideo_subdev
.5)

10 
	g_video_subdev_íd
 = .;

11 
PROVIDE
(
video_subdev_íd
 = .);

13 
	g_audio_subdev_begö
 = .;

14 
PROVIDE
(
audio_subdev_begö
 = .);

15 *(.
	gaudio_subdev
.0)

16 *(.
	gaudio_subdev
.1)

17 *(.
	gaudio_subdev
.2)

18 *(.
	gaudio_subdev
.3)

19 
	g_audio_subdev_íd
 = .;

20 
PROVIDE
(
audio_subdev_íd
 = .);

22 
	g_iic_devi˚_begö
 = .;

23 
PROVIDE
(
iic_devi˚_begö
 = .);

24 *(.
	giic
)

25 
	g_iic_devi˚_íd
 = .;

26 
PROVIDE
(
iic_devi˚_íd
 = .);

29 
	g_avö_•i_devi˚_begö
 = .;

30 
PROVIDE
(
avö_•i_devi˚_begö
 = .);

31 *(.
	gsw_•i
)

32 
	g_avö_•i_devi˚_íd
 = .;

33 
PROVIDE
(
avö_•i_devi˚_íd
 = .);

35 
	g_video_dev_begö
 = .;

36 
PROVIDE
(
video_dev_begö
 = .);

37 *(.
	gvideo_devi˚
)

38 
	g_video_dev_íd
 = .;

39 
PROVIDE
(
video_dev_íd
 = .);

	@include_lib/system/device/iic.h

1 #i‚de‡
DEVICE_IIC_H


2 
	#DEVICE_IIC_H


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

6 
	~"gíîic/io˘l.h
"

7 
	~"sy°em/èsk.h
"

12 
	#IIC_IOCTL_TX_START_BIT
 
	`_IOW
('I', 0, 0)

	)

13 
	#IIC_IOCTL_TX_WITH_START_BIT
 
	`_IOW
('I', 1, 1)

	)

14 
	#IIC_IOCTL_TX_STOP_BIT
 
	`_IOW
('I', 2, 1)

	)

15 
	#IIC_IOCTL_TX
 
	`_IOW
('I', 3, 8)

	)

16 
	#IIC_IOCTL_TX_WITH_STOP_BIT
 
	`_IOW
('I', 4, 9)

	)

17 
	#IIC_IOCTL_RX
 
	`_IOR
('I', 5, 8)

	)

18 
	#IIC_IOCTL_RX_WITH_STOP_BIT
 
	`_IOR
('I', 6, 9)

	)

19 
	#IIC_IOCTL_RX_WITH_NOACK
 
	`_IOR
('I', 7, 9)

	)

20 
	#IIC_IOCTL_RX_WITH_ACK
 
	`_IOR
('I', 8, 9)

	)

21 
	#IIC_IOCTL_SET_NORMAT_RATE
 
	`_IOW
('I', 9, 0)

	)

23 
	#IIC_IOCTL_START
 
	`_IOW
('I', 10, 0)

	)

24 
	#IIC_IOCTL_STOP
 
	`_IOW
('I', 11, 0)

	)

27 
	giic_devi˚
;

31 
	eiic_devi˚_ty≥
 {

32 
	mIIC_TYPE_HW
,

33 
	mIIC_TYPE_SW
,

36 
	sso·w¨e_iic
 {

37 
u8
 
	m˛k_pö
;

38 
u8
 
	md©_pö
;

39 
u32
 
	msw_iic_dñay
;

43 
	siic_∂©f‹m_d©a
 {

44 
iic_devi˚_ty≥
 
	mty≥
;

45 
u32
 
	md©a
[0];

48 
	ssw_iic_∂©f‹m_d©a
 {

49 
iic_∂©f‹m_d©a
 
	mhód
;

50 
so·w¨e_iic
 
	miic
;

55 
	#SW_IIC_PLATFORM_DATA_BEGIN
(
d©a
) \

56 c⁄° 
sw_iic_∂©f‹m_d©a
 
d©a
 = { \

57 .
hód
 = { \

58 .
ty≥
 = 
IIC_TYPE_SW
, \

60 .
iic
 = {

	)

64 
	#SW_IIC_PLATFORM_DATA_END
() \

66 };

	)

72 
	siic_›î©i⁄s
 {

73 
iic_devi˚_ty≥
 
	mty≥
;

74 (*
	m›í
)(
	miic_devi˚
 *);

75 (*
	mªad
)(
	miic_devi˚
 *, *
	mbuf
, 
	mÀn
);

76 (*
	mwrôe
)(
	miic_devi˚
 *, *
	mbuf
, 
	mÀn
);

77 (*
	mio˘l
)(
	miic_devi˚
 *, 
	mcmd
, 
	m¨g
);

81 
	siic_devi˚
 {

82 
u8
 
	mid
;

83 
u8
 
	mty≥
;

84 
u8
 
	mƒ©e
;

85 
u8
 
	m›í_°©us
;

86 
li°_hód
 
	míåy
;

87 c⁄° *
	mhw
;

88 
devi˚
 
	mdev
;

89 c⁄° 
iic_›î©i⁄s
 *
	m›s
;

90 
OS_MUTEX
 
	mmuãx
;

91 
devi˚
 *
	mcuº_devi˚
;

95 
	#REGISTER_IIC_DEVICE
(
«me
) \

96 c⁄° 
iic_›î©i⁄s
 
«me
 
	`£c
(.
iic
)

	)

98 c⁄° 
iic_›î©i⁄s
 
iic_devi˚_begö
[], 
iic_devi˚_íd
[];

100 
	#li°_f‹_óch_iic_devi˚_›s
(
p
) \

101 
p
=
iic_devi˚_begö
;Ö<
iic_devi˚_íd
;Ö++)

	)

105 c⁄° 
devi˚_›î©i⁄s
 
iic_dev_›s
;

	@include_lib/system/device/includes.h

1 #i‚de‡
DEVICE_INCLUDES_H


2 
	#DEVICE_INCLUDES_H


	)

7 
	~"devi˚.h
"

8 
	~"io˘l_cmds.h
"

10 
	~"key_drivî.h
"

11 
	~"iokey.h
"

12 
	~"ˇmîa.h
"

13 
	~"iic.h
"

14 
	~"vm.h
"

16 
	~"video.h
"

17 
	~"videobuf.h
"

19 
	~"video/fb.h
"

20 
	~"video/video_io˘l.h
"

22 
	~"i•.h
"

25 
	~"audio_dev.h
"

27 
	~"usb.h
"

28 
	~"•iÊash.h
"

29 
	~"lcd_drivî.h
"

30 
	~"usb_ˇm_dev.h
"

32 
	~"vm_≠i.h
"

	@include_lib/system/device/ioctl_cmds.h

1 #i‚de‡
IOCTL_INF_H


2 
	#IOCTL_INF_H


	)

7 
	#IOCTL_SET_IRQ_NUM
 1

	)

8 
	#IOCTL_SET_PRIORITY
 2

	)

9 
	#IOCTL_SET_DATA_WIDTH
 3

	)

10 
	#IOCTL_SET_SPEED
 4

	)

11 
	#IOCTL_SET_DETECT_MODE
 5

	)

12 
	#IOCTL_SET_DETECT_FUNC
 6

	)

13 
	#IOCTL_SET_DETECT_TIME_INTERVAL
 7

	)

14 
	#IOCTL_SET_PORT
 8

	)

15 
	#IOCTL_SET_PORT_FUNC
 9

	)

16 
	#IOCTL_SET_CS_PORT_FUNC
 10

	)

17 
	#IOCTL_SET_READ_MODE
 11

	)

18 
	#IOCTL_SET_WRITE_MODE
 12

	)

19 
	#IOCTL_SET_WRITE_PROTECT
 13

	)

20 
	#IOCTL_SET_START_BIT
 14

	)

21 
	#IOCTL_SET_STOP_BIT
 15

	)

22 
	#IOCTL_FLUSH
 16

	)

23 
	#IOCTL_REGISTER_IRQ_HANDLER
 17

	)

24 
	#IOCTL_UNREGISTER_IRQ_HANDLER
 18

	)

25 
	#IOCTL_GET_SYS_TIME
 19

	)

26 
	#IOCTL_SET_SYS_TIME
 20

	)

27 
	#IOCTL_GET_ALARM
 21

	)

28 
	#IOCTL_SET_ALARM
 22

	)

29 
	#IOCTL_SET_CAP_LOWSPEED_CARD
 23

	)

30 
	#IOCTL_SET_VDD50_EN
 30

	)

31 
	#IOCTL_GET_WEEKDAY
 32

	)

32 
	#IOCTL_CLR_READ_MODE
 33

	)

33 
	#IOCTL_SET_READ_CRC
 34

	)

34 
	#IOCTL_GET_READ_CRC
 35

	)

35 
	#IOCTL_GET_VOLUME
 36

	)

36 
	#IOCTL_SET_VOLUME
 37

	)

38 
	#IOCTL_GET_ID
 100

	)

39 
	#IOCTL_GET_SECTOR_SIZE
 101

	)

40 
	#IOCTL_GET_BLOCK_SIZE
 102

	)

41 
	#IOCTL_GET_CAPACITY
 103

	)

42 
	#IOCTL_GET_WIDTH
 104

	)

43 
	#IOCTL_GET_HEIGHT
 105

	)

44 
	#IOCTL_GET_BLOCK_NUMBER
 106

	)

45 
	#IOCTL_CHECK_WRITE_PROTECT
 107

	)

46 
	#IOCTL_GET_STATUS
 108

	)

47 
	#IOCTL_GET_TYPE
 109

	)

50 
	#IOCTL_ERASE_SECTOR
 200

	)

51 
	#IOCTL_ERASE_BLOCK
 201

	)

52 
	#IOCTL_ERASE_CHIP
 202

	)

56 
	sio˘l_úq_h™dÀr
 {

57 *
	m¥iv
;

58 *
	mh™dÀr
;

	@include_lib/system/device/iokey.h

1 #i‚de‡
DEVICE_IOKEY_H


2 
	#DEVICE_IOKEY_H


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

8 
	siokey_p‹t
 {

9 
u8
 
	mp‹t
;

10 
u8
 
	m¥ess_vÆue
: 1;

11 
u8
 
	mkey_vÆue
: 7;

14 
	siokey_∂©f‹m_d©a
 {

15 
u8
 
	mnum
;

16 c⁄° 
iokey_p‹t
 *
	mp‹t
;

24 c⁄° 
devi˚_›î©i⁄s
 
iokey_dev_›s
;

	@include_lib/system/device/isp.h

8 #i‚de‡
_DEVICE_ISP_H_


9 
	#_DEVICE_ISP_H_


	)

11 
	~"ty≥def.h
"

12 
	~"devi˚/devi˚.h
"

13 
	~"gíîic/io˘l.h
"

15 
	ei•_mode
 {

16 
	mISP_MODE_NONE
 = 0x0,

17 
	mISP_MODE_REC
,

18 
	mISP_MODE_IMAGE_CAPTURE
,

22 
	mISP_CFG_MODE_GENERIC
 = 0x0,

23 
	mISP_CFG_MODE_CUSTOMIZE
,

27 
	ei•_gíîic_cmd
 {

28 
	mISP_SET_INPUT_SIZE
 = 0x4A4C0000,

29 
	mISP_SET_OUTPUT_SIZE
,

30 
	mISP_SET_MODE
,

31 
	mISP_SET_EV
,

32 
	mISP_SET_WB
,

33 
	mISP_SET_SHP
,

34 
	mISP_SET_DRC
,

37 
	mISP_GET_LV
,

38 
	mISP_GET_FREQ
,

39 
	mISP_GET_SEN_STATUS
,

40 
	mISP_GET_VISGNAL
,

41 
	mISP_GET_SEN_SIZE
,

42 
	mISP_GET_ISP_SIZE
,

45 
	ei•_•ecül_cmd
 {

46 
	mISP_SET_CCM
,

47 
	mISP_SET_NR
,

48 
	mISP_SET_SHPN
,

49 
	mISP_SET_SATURATION
,

50 
	mISP_SET_GAMMA
,

51 
	mISP_SET_BRIGHTNESS
,

52 
	mISP_SET_CONTRAST
,

55 
	#ISP_CUSTOMIZE_MODE_TOOL
 0x1

	)

56 
	#ISP_CUSTOMIZE_MODE_FILE
 0x2

	)

57 
	#ISP_CUSTOMIZE_MODE_SPECIAL
 0x3

	)

61 
	si•_pix_f‹m©
 {

62 
u32
 
	mÂs
;

63 
u16
 
	mwidth
;

64 
u16
 
	mheight
;

67 
	si•_gíîic_cfg
 {

68 
u32
 
	mid
;

69 
u8
 
	mmode
;

70 
u8
 
	m£n_°©us
;

71 
u8
 
	mvsig«l
;

72 
s8
 
	mev
;

73 
u8
 
	mwhôe_bœn˚
;

74 
u8
 
	msh¨≤ess
;

75 
u8
 
	mdrc
;

76 
s32
 
	mlv
;

78 
i•_pix_f‹m©
 
	mö_fmt
;

79 
i•_pix_f‹m©
 
	mout_fmt
;

80 
i•_pix_f‹m©
 
	m£n_fmt
;

83 
	si•t_cu°omize_cfg
 {

85 
u8
 
	mmode
;

86 
u8
 
	mcmd
;

87 
u8
 *
	md©a
;

88 
	mÀn
;

89 
u16
 
	mvîsi⁄
;

90 
u16
 
	m¸c
;

91 *
	m¥iv©e
;

94 
	#ISP_IOCTL_SET_GENERIC_CFG
 
	`_IOW
('I', 0, 
i•_gíîic_cfg
)

	)

95 
	#ISP_IOCTL_GET_GENERIC_CFG
 
	`_IOR
('I', 1, 
i•_gíîic_cfg
)

	)

96 
	#ISP_IOCTL_SET_CUSTOMIZE_CFG
 
	`_IOW
('I', 2, 
i•t_cu°omize_cfg
)

	)

97 
	#ISP_IOCTL_GET_CUSTOMIZE_CFG
 
	`_IOR
('I', 3, 
i•t_cu°omize_cfg
)

	)

98 
	#ISP_IOCTL_SET_FPS
 
	`_IOW
('I', 4, )

	)

	@include_lib/system/device/jl_camera.h

6 #i‚de‡
_JL_CAMERA_H


7 
	#_JL_CAMERA_H


	)

9 
	~"devi˚/usb.h
"

10 
	~"video/video_io˘l.h
"

11 
	~"£rvî/jl_ˇmîa_¥Ÿocﬁ.h
"

13 
	#JLCIOC_WAIT_RESPONSE
 
	`_IOR
('J', 0, (
jlc_c⁄åﬁ_∑ckë
))

	)

14 
	#JLCIOC_RESET
 
	`_IOW
('J', 1, ())

	)

15 
	#JLCIOC_SET_REC_INFO
 
	`_IOW
('J', 2, ())

	)

18 c⁄° 
devi˚_›î©i⁄s
 
jlc_dev_›s
;

	@include_lib/system/device/key_driver.h

1 #i‚de‡
SYS_KEY_DRIVER_H


2 
	#SYS_KEY_DRIVER_H


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

8 
	#NO_KEY
 0xff

	)

11 
	gkey_drivî
;

14 
	skey_drivî_›s
 {

15 (*
	möô
)(
	mkey_drivî
 *, *
	m¨g
);

16 
u16
(*
gë_vÆue
)(
	mkey_drivî
 *);

19 
	skey_drivî
 {

20 
u8
 
	m¥ev_vÆue
;

21 
u8
 
	m¥ev_evít
;

22 
u8
 
	mœ°_key
;

23 
u8
 
	mfûãr_˙t
;

24 
u8
 
	mba£_˙t
;

25 
u8
 
	ml⁄g_˙t
;

26 
u8
 
	mhﬁd_˙t
;

27 
u8
 
	m¥ess_˙t
;

28 
u32
 
	msˇn_time
;

29 c⁄° *
	m«me
;

30 c⁄° 
key_drivî_›s
 *
	m›s
;

33 
key_drivî
 
key_drivî_begö
[];

34 
key_drivî
 
key_drivî_íd
[];

36 c⁄° 
devi˚_›î©i⁄s
 
key_dev_›s
;

38 
	#REGISTER_KEY_DRIVER
(
drivî
) \

39 
key_drivî
 
drivî
 
	`£c
(.key_drivî)

	)

42 
	#li°_f‹_óch_key_dúvî
(
p
) \

43 
p
=
key_drivî_begö
;Ö<
key_drivî_íd
;Ö++)

	)

	@include_lib/system/device/lcd_driver.h

1 #i‚de‡
__LCD_DRIVER_H__


2 
	#__LCD_DRIVER_H__


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

6 
	~"asm/˝u.h
"

7 
	~"asm/imd.h
"

9 
	#LCD_ESD_CHECK_CTRL
 
	`_IOW
('F', 0, ())

	)

11 
	slcd_∂©f‹m_d©a
 {

12 
LCD_IF
 
	möãrÁ˚
;

13 
u8
 
	mlcd_mode
;

15 
u8
 
	mbacklight
;

16 
u8
 
	mbacklight_vÆue
;

18 
u8
 
	mlcd_ª£t
;

19 
u8
 
	mlcd_cs
;

20 
u8
 
	mlcd_rs
;

21 
u8
 
	mlcd_•i_ck
;

22 
u8
 
	mlcd_•i_di
;

23 
u8
 
	mlcd_•i_do
;

24 } 
	mlcd_io
;

27 
	#LCD_PLATFORM_DATA_BEGIN
(
d©a
) \

28 c⁄° 
lcd_∂©f‹m_d©a
 
d©a
 = { \

29 

	)

30 
	#LCD_PLATFORM_DATA_END
() \

31 };

	)

33 c⁄° 
devi˚_›î©i⁄s
 
lcd_dev_›s
;

35 
lcd_ªöô
();

36 
lcd_dev_drive
 *
lcd_gë_dev_hdl
();

37 
lcd_£txy
();

38 
lcd_backlight_˘æ
(
u8
 
⁄off
);

39 
lcd_gë_ty≥
();

40 
lcd_esd_check_ª£t
();

41 
u8
 
lcd_gë_bl_°a
();

42 
u8
 
lcd_gë_esd_‰eq
();

	@include_lib/system/device/mmc.h

24 #i‚de‡
_MMC_H_


25 
	#_MMC_H_


	)

52 
	#R1_OUT_OF_RANGE
 (1 << 31Ë

	)

53 
	#R1_ADDRESS_ERROR
 (1 << 30Ë

	)

54 
	#R1_BLOCK_LEN_ERROR
 (1 << 29Ë

	)

55 
	#R1_ERASE_SEQ_ERROR
 (1 << 28Ë

	)

56 
	#R1_ERASE_PARAM
 (1 << 27Ë

	)

57 
	#R1_WP_VIOLATION
 (1 << 26Ë

	)

58 
	#R1_CARD_IS_LOCKED
 (1 << 25Ë

	)

59 
	#R1_LOCK_UNLOCK_FAILED
 (1 << 24Ë

	)

60 
	#R1_COM_CRC_ERROR
 (1 << 23Ë

	)

61 
	#R1_ILLEGAL_COMMAND
 (1 << 22Ë

	)

62 
	#R1_CARD_ECC_FAILED
 (1 << 21Ë

	)

63 
	#R1_CC_ERROR
 (1 << 20Ë

	)

64 
	#R1_ERROR
 (1 << 19Ë

	)

65 
	#R1_UNDERRUN
 (1 << 18Ë

	)

66 
	#R1_OVERRUN
 (1 << 17Ë

	)

67 
	#R1_CID_CSD_OVERWRITE
 (1 << 16Ë

	)

68 
	#R1_WP_ERASE_SKIP
 (1 << 15Ë

	)

69 
	#R1_CARD_ECC_DISABLED
 (1 << 14Ë

	)

70 
	#R1_ERASE_RESET
 (1 << 13Ë

	)

71 
	#R1_STATUS
(
x
Ë(x & 0xFFFFE000)

	)

72 
	#R1_CURRENT_STATE
(
x
Ë((x & 0x00001E00Ë>> 9Ë

	)

73 
	#R1_READY_FOR_DATA
 (1 << 8Ë

	)

74 
	#R1_SWITCH_ERROR
 (1 << 7Ë

	)

75 
	#R1_EXCEPTION_EVENT
 (1 << 6Ë

	)

76 
	#R1_APP_CMD
 (1 << 5Ë

	)

78 
	#R1_STATE_IDLE
 0

	)

79 
	#R1_STATE_READY
 1

	)

80 
	#R1_STATE_IDENT
 2

	)

81 
	#R1_STATE_STBY
 3

	)

82 
	#R1_STATE_TRAN
 4

	)

83 
	#R1_STATE_DATA
 5

	)

84 
	#R1_STATE_RCV
 6

	)

85 
	#R1_STATE_PRG
 7

	)

86 
	#R1_STATE_DIS
 8

	)

92 
	#R1_SPI_IDLE
 (1 << 0)

	)

93 
	#R1_SPI_ERASE_RESET
 (1 << 1)

	)

94 
	#R1_SPI_ILLEGAL_COMMAND
 (1 << 2)

	)

95 
	#R1_SPI_COM_CRC
 (1 << 3)

	)

96 
	#R1_SPI_ERASE_SEQ
 (1 << 4)

	)

97 
	#R1_SPI_ADDRESS
 (1 << 5)

	)

98 
	#R1_SPI_PARAMETER
 (1 << 6)

	)

100 
	#R2_SPI_CARD_LOCKED
 (1 << 8)

	)

101 
	#R2_SPI_WP_ERASE_SKIP
 (1 << 9Ë

	)

102 
	#R2_SPI_LOCK_UNLOCK_FAIL
 
R2_SPI_WP_ERASE_SKIP


	)

103 
	#R2_SPI_ERROR
 (1 << 10)

	)

104 
	#R2_SPI_CC_ERROR
 (1 << 11)

	)

105 
	#R2_SPI_CARD_ECC_ERROR
 (1 << 12)

	)

106 
	#R2_SPI_WP_VIOLATION
 (1 << 13)

	)

107 
	#R2_SPI_ERASE_PARAM
 (1 << 14)

	)

108 
	#R2_SPI_OUT_OF_RANGE
 (1 << 15Ë

	)

109 
	#R2_SPI_CSD_OVERWRITE
 
R2_SPI_OUT_OF_RANGE


	)

113 
	#MMC_CARD_BUSY
 0x80000000

	)

118 
	#CCC_BASIC
 (1<<0Ë

	)

121 
	#CCC_STREAM_READ
 (1<<1Ë

	)

123 
	#CCC_BLOCK_READ
 (1<<2Ë

	)

125 
	#CCC_STREAM_WRITE
 (1<<3Ë

	)

127 
	#CCC_BLOCK_WRITE
 (1<<4Ë

	)

129 
	#CCC_ERASE
 (1<<5Ë

	)

131 
	#CCC_WRITE_PROT
 (1<<6Ë

	)

133 
	#CCC_LOCK_CARD
 (1<<7Ë

	)

135 
	#CCC_APP_SPEC
 (1<<8Ë

	)

137 
	#CCC_IO_MODE
 (1<<9Ë

	)

139 
	#CCC_SWITCH
 (1<<10Ë

	)

148 
	#CSD_STRUCT_VER_1_0
 0

	)

149 
	#CSD_STRUCT_VER_1_1
 1

	)

150 
	#CSD_STRUCT_VER_1_2
 2

	)

151 
	#CSD_STRUCT_EXT_CSD
 3

	)

153 
	#CSD_SPEC_VER_0
 0

	)

154 
	#CSD_SPEC_VER_1
 1

	)

155 
	#CSD_SPEC_VER_2
 2

	)

156 
	#CSD_SPEC_VER_3
 3

	)

157 
	#CSD_SPEC_VER_4
 4

	)

163 
	#EXT_CSD_FLUSH_CACHE
 32

	)

164 
	#EXT_CSD_CACHE_CTRL
 33

	)

165 
	#EXT_CSD_POWER_OFF_NOTIFICATION
 34

	)

166 
	#EXT_CSD_PACKED_FAILURE_INDEX
 35

	)

167 
	#EXT_CSD_PACKED_CMD_STATUS
 36

	)

168 
	#EXT_CSD_EXP_EVENTS_STATUS
 54

	)

169 
	#EXT_CSD_EXP_EVENTS_CTRL
 56

	)

170 
	#EXT_CSD_DATA_SECTOR_SIZE
 61

	)

171 
	#EXT_CSD_GP_SIZE_MULT
 143

	)

172 
	#EXT_CSD_PARTITION_ATTRIBUTE
 156

	)

173 
	#EXT_CSD_PARTITION_SUPPORT
 160

	)

174 
	#EXT_CSD_HPI_MGMT
 161

	)

175 
	#EXT_CSD_RST_N_FUNCTION
 162

	)

176 
	#EXT_CSD_BKOPS_EN
 163

	)

177 
	#EXT_CSD_BKOPS_START
 164

	)

178 
	#EXT_CSD_SANITIZE_START
 165

	)

179 
	#EXT_CSD_WR_REL_PARAM
 166

	)

180 
	#EXT_CSD_RPMB_MULT
 168

	)

181 
	#EXT_CSD_BOOT_WP
 173

	)

182 
	#EXT_CSD_ERASE_GROUP_DEF
 175

	)

183 
	#EXT_CSD_PART_CONFIG
 179

	)

184 
	#EXT_CSD_ERASED_MEM_CONT
 181

	)

185 
	#EXT_CSD_BUS_WIDTH
 183

	)

186 
	#EXT_CSD_HS_TIMING
 185

	)

187 
	#EXT_CSD_POWER_CLASS
 187

	)

188 
	#EXT_CSD_REV
 192

	)

189 
	#EXT_CSD_STRUCTURE
 194

	)

190 
	#EXT_CSD_CARD_TYPE
 196

	)

191 
	#EXT_CSD_OUT_OF_INTERRUPT_TIME
 198

	)

192 
	#EXT_CSD_PART_SWITCH_TIME
 199

	)

193 
	#EXT_CSD_PWR_CL_52_195
 200

	)

194 
	#EXT_CSD_PWR_CL_26_195
 201

	)

195 
	#EXT_CSD_PWR_CL_52_360
 202

	)

196 
	#EXT_CSD_PWR_CL_26_360
 203

	)

197 
	#EXT_CSD_SEC_CNT
 212

	)

198 
	#EXT_CSD_S_A_TIMEOUT
 217

	)

199 
	#EXT_CSD_REL_WR_SEC_C
 222

	)

200 
	#EXT_CSD_HC_WP_GRP_SIZE
 221

	)

201 
	#EXT_CSD_ERASE_TIMEOUT_MULT
 223

	)

202 
	#EXT_CSD_HC_ERASE_GRP_SIZE
 224

	)

203 
	#EXT_CSD_BOOT_MULT
 226

	)

204 
	#EXT_CSD_SEC_TRIM_MULT
 229

	)

205 
	#EXT_CSD_SEC_ERASE_MULT
 230

	)

206 
	#EXT_CSD_SEC_FEATURE_SUPPORT
 231

	)

207 
	#EXT_CSD_TRIM_MULT
 232

	)

208 
	#EXT_CSD_PWR_CL_200_195
 236

	)

209 
	#EXT_CSD_PWR_CL_200_360
 237

	)

210 
	#EXT_CSD_PWR_CL_DDR_52_195
 238

	)

211 
	#EXT_CSD_PWR_CL_DDR_52_360
 239

	)

212 
	#EXT_CSD_BKOPS_STATUS
 246

	)

213 
	#EXT_CSD_POWER_OFF_LONG_TIME
 247

	)

214 
	#EXT_CSD_GENERIC_CMD6_TIME
 248

	)

215 
	#EXT_CSD_CACHE_SIZE
 249

	)

216 
	#EXT_CSD_PWR_CL_DDR_200_360
 253

	)

217 
	#EXT_CSD_TAG_UNIT_SIZE
 498

	)

218 
	#EXT_CSD_DATA_TAG_SUPPORT
 499

	)

219 
	#EXT_CSD_MAX_PACKED_WRITES
 500

	)

220 
	#EXT_CSD_MAX_PACKED_READS
 501

	)

221 
	#EXT_CSD_BKOPS_SUPPORT
 502

	)

222 
	#EXT_CSD_HPI_FEATURES
 503

	)

228 
	#EXT_CSD_WR_REL_PARAM_EN
 (1<<2)

	)

230 
	#EXT_CSD_BOOT_WP_B_PWR_WP_DIS
 (0x40)

	)

231 
	#EXT_CSD_BOOT_WP_B_PERM_WP_DIS
 (0x10)

	)

232 
	#EXT_CSD_BOOT_WP_B_PERM_WP_EN
 (0x04)

	)

233 
	#EXT_CSD_BOOT_WP_B_PWR_WP_EN
 (0x01)

	)

235 
	#EXT_CSD_PART_CONFIG_ACC_MASK
 (0x7)

	)

236 
	#EXT_CSD_PART_CONFIG_ACC_BOOT0
 (0x1)

	)

237 
	#EXT_CSD_PART_CONFIG_ACC_RPMB
 (0x3)

	)

238 
	#EXT_CSD_PART_CONFIG_ACC_GP0
 (0x4)

	)

240 
	#EXT_CSD_PART_SUPPORT_PART_EN
 (0x1)

	)

242 
	#EXT_CSD_CMD_SET_NORMAL
 (1<<0)

	)

243 
	#EXT_CSD_CMD_SET_SECURE
 (1<<1)

	)

244 
	#EXT_CSD_CMD_SET_CPSECURE
 (1<<2)

	)

246 
	#EXT_CSD_CARD_TYPE_HS_26
 (1<<0Ë

	)

247 
	#EXT_CSD_CARD_TYPE_HS_52
 (1<<1Ë

	)

248 
	#EXT_CSD_CARD_TYPE_HS
 (
EXT_CSD_CARD_TYPE_HS_26
 | \

249 
EXT_CSD_CARD_TYPE_HS_52
)

	)

250 
	#EXT_CSD_CARD_TYPE_DDR_1_8V
 (1<<2Ë

	)

252 
	#EXT_CSD_CARD_TYPE_DDR_1_2V
 (1<<3Ë

	)

254 
	#EXT_CSD_CARD_TYPE_DDR_52
 (
EXT_CSD_CARD_TYPE_DDR_1_8V
 \

255 | 
EXT_CSD_CARD_TYPE_DDR_1_2V
)

	)

256 
	#EXT_CSD_CARD_TYPE_HS200_1_8V
 (1<<4Ë

	)

257 
	#EXT_CSD_CARD_TYPE_HS200_1_2V
 (1<<5Ë

	)

259 
	#EXT_CSD_CARD_TYPE_HS200
 (
EXT_CSD_CARD_TYPE_HS200_1_8V
 | \

260 
EXT_CSD_CARD_TYPE_HS200_1_2V
)

	)

261 
	#EXT_CSD_CARD_TYPE_HS400_1_8V
 (1<<6Ë

	)

262 
	#EXT_CSD_CARD_TYPE_HS400_1_2V
 (1<<7Ë

	)

263 
	#EXT_CSD_CARD_TYPE_HS400
 (
EXT_CSD_CARD_TYPE_HS400_1_8V
 | \

264 
EXT_CSD_CARD_TYPE_HS400_1_2V
)

	)

266 
	#EXT_CSD_BUS_WIDTH_1
 0

	)

267 
	#EXT_CSD_BUS_WIDTH_4
 1

	)

268 
	#EXT_CSD_BUS_WIDTH_8
 2

	)

269 
	#EXT_CSD_DDR_BUS_WIDTH_4
 5

	)

270 
	#EXT_CSD_DDR_BUS_WIDTH_8
 6

	)

272 
	#EXT_CSD_TIMING_BC
 0

	)

273 
	#EXT_CSD_TIMING_HS
 1

	)

274 
	#EXT_CSD_TIMING_HS200
 2

	)

275 
	#EXT_CSD_TIMING_HS400
 3

	)

277 
	#EXT_CSD_SEC_ER_EN
 
	`BIT
(0)

	)

278 
	#EXT_CSD_SEC_BD_BLK_EN
 
	`BIT
(2)

	)

279 
	#EXT_CSD_SEC_GB_CL_EN
 
	`BIT
(4)

	)

280 
	#EXT_CSD_SEC_SANITIZE
 
	`BIT
(6Ë

	)

282 
	#EXT_CSD_RST_N_EN_MASK
 0x3

	)

283 
	#EXT_CSD_RST_N_ENABLED
 1

	)

285 
	#EXT_CSD_NO_POWER_NOTIFICATION
 0

	)

286 
	#EXT_CSD_POWER_ON
 1

	)

287 
	#EXT_CSD_POWER_OFF_SHORT
 2

	)

288 
	#EXT_CSD_POWER_OFF_LONG
 3

	)

290 
	#EXT_CSD_PWR_CL_8BIT_MASK
 0xF0

	)

291 
	#EXT_CSD_PWR_CL_4BIT_MASK
 0x0F

	)

292 
	#EXT_CSD_PWR_CL_8BIT_SHIFT
 4

	)

293 
	#EXT_CSD_PWR_CL_4BIT_SHIFT
 0

	)

295 
	#EXT_CSD_PACKED_EVENT_EN
 
	`BIT
(3)

	)

300 
	#EXT_CSD_URGENT_BKOPS
 
	`BIT
(0)

	)

301 
	#EXT_CSD_DYNCAP_NEEDED
 
	`BIT
(1)

	)

302 
	#EXT_CSD_SYSPOOL_EXHAUSTED
 
	`BIT
(2)

	)

303 
	#EXT_CSD_PACKED_FAILURE
 
	`BIT
(3)

	)

305 
	#EXT_CSD_PACKED_GENERIC_ERROR
 
	`BIT
(0)

	)

306 
	#EXT_CSD_PACKED_INDEXED_ERROR
 
	`BIT
(1)

	)

311 
	#EXT_CSD_BKOPS_LEVEL_2
 0x2

	)

317 
	#MMC_SWITCH_MODE_CMD_SET
 0x00

	)

318 
	#MMC_SWITCH_MODE_SET_BITS
 0x01

	)

319 
	#MMC_SWITCH_MODE_CLEAR_BITS
 0x02

	)

320 
	#MMC_SWITCH_MODE_WRITE_BYTE
 0x03

	)

321 
mmc_£À˘_ˇrd
(
mmc_ˇrd
 *
ˇrd
);

323 
mmc_de£À˘_ˇrds
(
mmc_ho°
 *
ho°
);

324 
ölöe
 
mmc_˛aim_ho°_unöô
();

325 
ölöe
 
mmc_˛aim_ho°_öô
();

326 
ölöe
 
mmc_˛aim_ho°
(
mmc_ho°
 *
ho°
);

327 
ölöe
 
mmc_ªÀa£_ho°
(
mmc_ho°
 *
ho°
);

328 
_mmc_dëe˘_ˇrd_ªmoved
(
mmc_ho°
 *
ho°
);

329 
mmc_£nd_io_›_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
ro¸
);

330 
mmc_•i_£t_¸c
(
mmc_ho°
 *
ho°
, 
u£_¸c
);

331 
mmc_ˇrd
 *
mmc_Æloc_ˇrd
(
mmc_ho°
 *
ho°
);

332 
mmc_£t_sig«l_vﬁège
(
mmc_ho°
 *
ho°
, 
sig«l_vﬁège
, 
u32
 
o¸
);

333 
sdio_ª£t
(
mmc_ho°
 *
ho°
);

334 
mmc_go_idÀ
(
mmc_ho°
 *
ho°
);

335 
mmc_£nd_if_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
);

336 
mmc_ªmove_ˇrd
(
mmc_ˇrd
 *
ˇrd
);

337 
mmc_£nd_ªœtive_addr
(
mmc_ho°
 *
ho°
, *
rˇ
);

338 
mmc_fixup_devi˚
(
mmc_ˇrd
 *
ˇrd
);

339 
u32
 
mmc_£À˘_vﬁège
(
mmc_ho°
 *
ho°
, u32 
o¸
);

340 
mmc_add_ˇrd
(
mmc_ˇrd
 *
ˇrd
);

341 
mmc_£nd_csd
(
mmc_ˇrd
 *
ˇrd
, 
u32
 *
csd
);

342 
mmc_Æl_£nd_cid
(
mmc_ho°
 *
ho°
, 
u32
 *
cid
);

343 
mmc_£nd_cid
(
mmc_ho°
 *
ho°
, 
u32
 *
cid
);

344 
mmc_sd_swôch
(
mmc_ˇrd
 *
ˇrd
, 
mode
, 
group
,

345 
u8
 
vÆue
, u8 *
ª•
);

346 
mmc_≠p_sd_°©us
(
mmc_ˇrd
 *
ˇrd
, *
s§
);

349 
mmc_≠p_£nd_s¸
(
mmc_ˇrd
 *
ˇrd
, 
u32
 *
s¸
);

350 
mmc_öô_îa£
(
mmc_ˇrd
 *
ˇrd
);

351 
mmc_io_rw_exãnded
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

352 
addr
, 
ö¸_addr
, 
u8
 *
buf
, 
blocks
, 
blksz
);

353 
mmc_hw_ª£t_f‹_öô
(
mmc_ho°
 *
ho°
);

354 
mmc_©èch_sdio
(
mmc_ho°
 *
ho°
);

355 
mmc_sdio_Æive
(
mmc_ho°
 *
ho°
);

356 
mmc_ªsˇn
();

	@include_lib/system/device/sd.h

12 #i‚de‡
_SD_H_


13 
	#_SD_H_


	)

14 
	#MMC_CMD_RETRIES
 3

	)

16 
	#SD_OCR_S18R
 (1 << 24Ë

	)

17 
	#SD_ROCR_S18A
 
SD_OCR_S18R


	)

18 
	#SD_OCR_XPC
 (1 << 28Ë

	)

19 
	#SD_OCR_CCS
 (1 << 30Ë

	)

46 
	#SCR_SPEC_VER_0
 0

	)

47 
	#SCR_SPEC_VER_1
 1

	)

48 
	#SCR_SPEC_VER_2
 2

	)

53 
	#SD_BUS_WIDTH_1
 0

	)

54 
	#SD_BUS_WIDTH_4
 2

	)

59 
	#SD_SWITCH_CHECK
 0

	)

60 
	#SD_SWITCH_SET
 1

	)

65 
	#SD_SWITCH_GRP_ACCESS
 0

	)

70 
	#SD_SWITCH_ACCESS_DEF
 0

	)

71 
	#SD_SWITCH_ACCESS_HS
 1

	)

72 
mmc_≠p_cmd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

73 
mmc_sd_gë_max_˛ock
(
mmc_ˇrd
 *
ˇrd
);

74 
mmc_£nd_≠p_›_c⁄d
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
ro¸
);

75 
mmc_sd_gë_cid
(
mmc_ho°
 *
ho°
, 
u32
 
o¸
, u32 *
cid
, u32 *
ro¸
);

76 
mmc_sd_gë_csd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

77 
mmc_sd_swôch_hs
(
mmc_ˇrd
 *
ˇrd
);

78 
mmc_≠p_cmd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
);

79 
mmc_waô_f‹_≠p_cmd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
,

80 
cmd_¨g
, 
cmd_›code
, 
ªåõs
);

81 
mmc_≠p_£t_bus_width
(
mmc_ˇrd
 *
ˇrd
, 
width
);

82 
mmc_sd_£tup_ˇrd
(
mmc_ho°
 *
ho°
, 
mmc_ˇrd
 *
ˇrd
, 
boﬁ
 
ªöô
);

83 
mmc_decode_cid
(
mmc_ˇrd
 *
ˇrd
);

	@include_lib/system/device/sdio.h

12 #i‚de‡ 
_SDIO_H


13 
	#_SDIO_H


	)

36 
	#R4_18V_PRESENT
 (1<<24)

	)

37 
	#R4_MEMORY_PRESENT
 (1 << 27)

	)

54 
	#R5_COM_CRC_ERROR
 (1 << 15Ë

	)

55 
	#R5_ILLEGAL_COMMAND
 (1 << 14Ë

	)

56 
	#R5_ERROR
 (1 << 11Ë

	)

57 
	#R5_FUNCTION_NUMBER
 (1 << 9Ë

	)

58 
	#R5_OUT_OF_RANGE
 (1 << 8Ë

	)

59 
	#R5_STATUS
(
x
Ë(x & 0xCB00)

	)

60 
	#R5_IO_CURRENT_STATE
(
x
Ë((x & 0x3000Ë>> 12Ë

	)

66 
	#SDIO_CCCR_CCCR
 0x00

	)

68 
	#SDIO_CCCR_REV_1_00
 0

	)

69 
	#SDIO_CCCR_REV_1_10
 1

	)

70 
	#SDIO_CCCR_REV_1_20
 2

	)

71 
	#SDIO_CCCR_REV_3_00
 3

	)

73 
	#SDIO_SDIO_REV_1_00
 0

	)

74 
	#SDIO_SDIO_REV_1_10
 1

	)

75 
	#SDIO_SDIO_REV_1_20
 2

	)

76 
	#SDIO_SDIO_REV_2_00
 3

	)

77 
	#SDIO_SDIO_REV_3_00
 4

	)

79 
	#SDIO_CCCR_SD
 0x01

	)

81 
	#SDIO_SD_REV_1_01
 0

	)

82 
	#SDIO_SD_REV_1_10
 1

	)

83 
	#SDIO_SD_REV_2_00
 2

	)

84 
	#SDIO_SD_REV_3_00
 3

	)

86 
	#SDIO_CCCR_IOEx
 0x02

	)

87 
	#SDIO_CCCR_IORx
 0x03

	)

89 
	#SDIO_CCCR_IENx
 0x04

	)

90 
	#SDIO_CCCR_INTx
 0x05

	)

92 
	#SDIO_CCCR_ABORT
 0x06

	)

94 
	#SDIO_CCCR_IF
 0x07

	)

96 
	#SDIO_BUS_WIDTH_MASK
 0x03

	)

97 
	#SDIO_BUS_WIDTH_1BIT
 0x00

	)

98 
	#SDIO_BUS_WIDTH_RESERVED
 0x01

	)

99 
	#SDIO_BUS_WIDTH_4BIT
 0x02

	)

100 
	#SDIO_BUS_ECSI
 0x20

	)

101 
	#SDIO_BUS_SCSI
 0x40

	)

103 
	#SDIO_BUS_ASYNC_INT
 0x20

	)

105 
	#SDIO_BUS_CD_DISABLE
 0x80

	)

107 
	#SDIO_CCCR_CAPS
 0x08

	)

109 
	#SDIO_CCCR_CAP_SDC
 0x01

	)

110 
	#SDIO_CCCR_CAP_SMB
 0x02

	)

111 
	#SDIO_CCCR_CAP_SRW
 0x04

	)

112 
	#SDIO_CCCR_CAP_SBS
 0x08

	)

113 
	#SDIO_CCCR_CAP_S4MI
 0x10

	)

114 
	#SDIO_CCCR_CAP_E4MI
 0x20

	)

115 
	#SDIO_CCCR_CAP_LSC
 0x40

	)

116 
	#SDIO_CCCR_CAP_4BLS
 0x80

	)

118 
	#SDIO_CCCR_CIS
 0x09

	)

121 
	#SDIO_CCCR_SUSPEND
 0x0c

	)

122 
	#SDIO_CCCR_SELx
 0x0d

	)

123 
	#SDIO_CCCR_EXECx
 0x0e

	)

124 
	#SDIO_CCCR_READYx
 0x0f

	)

126 
	#SDIO_CCCR_BLKSIZE
 0x10

	)

128 
	#SDIO_CCCR_POWER
 0x12

	)

130 
	#SDIO_POWER_SMPC
 0x01

	)

131 
	#SDIO_POWER_EMPC
 0x02

	)

133 
	#SDIO_CCCR_SPEED
 0x13

	)

135 
	#SDIO_SPEED_SHS
 0x01

	)

136 
	#SDIO_SPEED_BSS_SHIFT
 1

	)

137 
	#SDIO_SPEED_BSS_MASK
 (7<<
SDIO_SPEED_BSS_SHIFT
)

	)

138 
	#SDIO_SPEED_SDR12
 (0<<
SDIO_SPEED_BSS_SHIFT
)

	)

139 
	#SDIO_SPEED_SDR25
 (1<<
SDIO_SPEED_BSS_SHIFT
)

	)

140 
	#SDIO_SPEED_SDR50
 (2<<
SDIO_SPEED_BSS_SHIFT
)

	)

141 
	#SDIO_SPEED_SDR104
 (3<<
SDIO_SPEED_BSS_SHIFT
)

	)

142 
	#SDIO_SPEED_DDR50
 (4<<
SDIO_SPEED_BSS_SHIFT
)

	)

143 
	#SDIO_SPEED_EHS
 
SDIO_SPEED_SDR25


	)

145 
	#SDIO_CCCR_UHS
 0x14

	)

146 
	#SDIO_UHS_SDR50
 0x01

	)

147 
	#SDIO_UHS_SDR104
 0x02

	)

148 
	#SDIO_UHS_DDR50
 0x04

	)

150 
	#SDIO_CCCR_DRIVE_STRENGTH
 0x15

	)

151 
	#SDIO_SDTx_MASK
 0x07

	)

152 
	#SDIO_DRIVE_SDTA
 (1<<0)

	)

153 
	#SDIO_DRIVE_SDTC
 (1<<1)

	)

154 
	#SDIO_DRIVE_SDTD
 (1<<2)

	)

155 
	#SDIO_DRIVE_DTSx_MASK
 0x03

	)

156 
	#SDIO_DRIVE_DTSx_SHIFT
 4

	)

157 
	#SDIO_DTSx_SET_TYPE_B
 (0 << 
SDIO_DRIVE_DTSx_SHIFT
)

	)

158 
	#SDIO_DTSx_SET_TYPE_A
 (1 << 
SDIO_DRIVE_DTSx_SHIFT
)

	)

159 
	#SDIO_DTSx_SET_TYPE_C
 (2 << 
SDIO_DRIVE_DTSx_SHIFT
)

	)

160 
	#SDIO_DTSx_SET_TYPE_D
 (3 << 
SDIO_DRIVE_DTSx_SHIFT
)

	)

165 
	#SDIO_FBR_BASE
(
f
Ë((fË* 0x100Ë

	)

167 
	#SDIO_FBR_STD_IF
 0x00

	)

169 
	#SDIO_FBR_SUPPORTS_CSA
 0x40

	)

170 
	#SDIO_FBR_ENABLE_CSA
 0x80

	)

172 
	#SDIO_FBR_STD_IF_EXT
 0x01

	)

174 
	#SDIO_FBR_POWER
 0x02

	)

176 
	#SDIO_FBR_POWER_SPS
 0x01

	)

177 
	#SDIO_FBR_POWER_EPS
 0x02

	)

179 
	#SDIO_FBR_CIS
 0x09

	)

182 
	#SDIO_FBR_CSA
 0x0C

	)

184 
	#SDIO_FBR_CSA_DATA
 0x0F

	)

186 
	#SDIO_FBR_BLKSIZE
 0x10

	)

	@include_lib/system/device/sdio_err.h

1 #i‚de‡
_SDIO_ERR_H_


2 
	#_SDIO_ERR_H_


	)

5 
	mEIO
 = 1 ,

6 
	mEINVAL
 ,

7 
	mERANGE
 ,

8 
	mETIMEDOUT
 ,

9 
	mETIME
 ,

10 
	mEBUSY
 ,

11 
	mEAGAIN
 ,

12 
	mEOPNOTSUPP
 ,

13 
	mEILSEQ
 ,

14 
	mENOENT
 ,

15 
	mENOMEM
 ,

16 
	mENOSYS
 ,

17 
	mEFAULT
 ,

	@include_lib/system/device/sdio_func.h

12 #i‚de‡
_SDIO_FUNC_H_


13 
	#_SDIO_FUNC_H_


	)

15 
	~"ty≥def.h
"

16 
	~"öc/löux/devi˚.h
"

17 
	~"öc/löux/mod_devi˚èbÀ.h
"

18 #i‚de‡
mö


19 
	#mö
(
a
,
b
Ë◊)>(b)?b:
	)
a

21 (
	tsdio_úq_h™dÀr_t
)(
	tsdio_func
 *);

26 
	ssdio_func_tu∂e
 {

27 
sdio_func_tu∂e
 *
√xt
;

28 
code
;

29 
size
;

30 
d©a
[0];

40 
	ssdio_func
 {

41 
mmc_ˇrd
 *
ˇrd
;

42 
devi˚
 
dev
;

43 
sdio_úq_h™dÀr_t
 *
úq_h™dÀr
;

44 
num
;

45 
˛ass
;

46 
víd‹
;

47 
devi˚
;

48 
max_blksize
;

49 
cur_blksize
;

51 
íabÀ_timeout
;

52 
u8
 
tmpbuf
[4];

53 
num_öfo
;

54 c⁄° **
öfo
;

55 
sdio_func_tu∂e
 *
tu∂es
;

58 
	#sdio_func_¥e£¡
(
f
Ë((f)->
°©e
 & 
SDIO_STATE_PRESENT
)

	)

60 
	#sdio_func_£t_¥e£¡
(
f
Ë((f)->
°©e
 |
SDIO_STATE_PRESENT
)

	)

62 
	#sdio_func_id
(
f
Ë(
	`dev_«me
(&(f)->
dev
))

	)

64 
	#sdio_gë_drvd©a
(
f
Ë
	`dev_gë_drvd©a
(&(f)->
dev
)

	)

65 
	#sdio_£t_drvd©a
(
f
,
d
Ë
	`dev_£t_drvd©a
(&(f)->
dev
, d)

	)

66 
	#dev_to_sdio_func
(
d
Ë
	`c⁄èöî_of
(d, 
sdio_func
, 
dev
)

	)

67 
	#to_sdio_drivî
(
d
Ë
	`c⁄èöî_of
(d, 
sdio_drivî
, 
drv
)

	)

77 
	#SDIO_DEVICE
(
víd
,
dev
) \

78 .
˛ass
 = 
SDIO_ANY_ID
, \

79 .
víd‹
 = (
víd
), .
devi˚
 = (
dev
)

	)

89 
	#SDIO_DEVICE_CLASS
(
dev_˛ass
) \

90 .
˛ass
 = (
dev_˛ass
), \

91 .
víd‹
 = 
SDIO_ANY_ID
, .
devi˚
 = 
	)
SDIO_ANY_ID

93 
	`sdio_ªgi°î_drivî
(
sdio_drivî
 *);

94 
	`sdio_uƒegi°î_drivî
(
sdio_drivî
 *);

99 
	`sdio_˛aim_ho°
(
sdio_func
 *
func
);

100 
	`sdio_ªÀa£_ho°
(
sdio_func
 *
func
);

102 
	`sdio_íabÀ_func
(
sdio_func
 *
func
);

103 
	`sdio_dißbÀ_func
(
sdio_func
 *
func
);

105 
	`sdio_£t_block_size
(
sdio_func
 *
func
, 
blksz
);

107 
	`sdio_˛aim_úq
(
sdio_func
 *
func
, 
sdio_úq_h™dÀr_t
 *
h™dÀr
);

108 
	`sdio_ªÀa£_úq
(
sdio_func
 *
func
);

110 
	`sdio_Æign_size
(
sdio_func
 *
func
, 
sz
);

112 
u8
 
	`sdio_ªadb
(
sdio_func
 *
func
, 
addr
, *
îr_ªt
);

113 
u16
 
	`sdio_ªadw
(
sdio_func
 *
func
, 
addr
, *
îr_ªt
);

114 
u32
 
	`sdio_ªadl
(
sdio_func
 *
func
, 
addr
, *
îr_ªt
);

116 
	`sdio_mem˝y_‰omio
(
sdio_func
 *
func
, *
d°
,

117 
addr
, 
cou¡
);

118 
	`sdio_ªadsb
(
sdio_func
 *
func
, *
d°
,

119 
addr
, 
cou¡
);

121 
	`sdio_wrôeb
(
sdio_func
 *
func
, 
u8
 
b
,

122 
addr
, *
îr_ªt
);

123 
	`sdio_wrôew
(
sdio_func
 *
func
, 
u16
 
b
,

124 
addr
, *
îr_ªt
);

125 
	`sdio_wrôñ
(
sdio_func
 *
func
, 
u32
 
b
,

126 
addr
, *
îr_ªt
);

128 
u8
 
	`sdio_wrôeb_ªadb
(
sdio_func
 *
func
, u8 
wrôe_byã
,

129 
addr
, *
îr_ªt
);

131 
	`sdio_mem˝y_toio
(
sdio_func
 *
func
, 
addr
,

132 *
§c
, 
cou¡
);

133 
	`sdio_wrôesb
(
sdio_func
 *
func
, 
addr
,

134 *
§c
, 
cou¡
);

136 
	`sdio_f0_ªadb
(
sdio_func
 *
func
,

137 
addr
, *
îr_ªt
);

138 
	`sdio_f0_wrôeb
(
sdio_func
 *
func
, 
b
,

139 
addr
, *
îr_ªt
);

140 
	`mmc_io_rw_dúe˘
(
mmc_ˇrd
 *
ˇrd
, 
wrôe
, 
‚
,

141 
addr
, 
u8
 
ö
, u8 *
out
);

	@include_lib/system/device/sdio_host.h

1 #i‚de‡
_SDIO_HOST_H_


2 
	#_SDIO_HOST_H_


	)

4 
	~"os/os_≠i.h
"

5 
	~"asm/úq.h
"

7 
	~"devi˚/ˇrd.h
"

8 
	#SDIO_DBG
(
fmt
,...Ëdo{
	`¥ötf
("%s-%d"#fmt"\r\n",
__FILE__
,
__LINE__
,##
__VA_ARGS__
);}0)

	)

9 
	#SDIO_WARN
(
fmt
,...Ëdo{
	`¥ötf
("%s-%d"#fmt"\r\n",
__FILE__
,
__LINE__
,##
__VA_ARGS__
);}0)

	)

10 
	#SDIO_ERR
(
fmt
,...Ëdo{
	`¥ötf
("%s-%d"#fmt"\r\n",
__FILE__
,
__LINE__
,##
__VA_ARGS__
);}0)

	)

12 
	#SDIO_BYTE_ORDER_BIG_ENDIAN
 1234

	)

13 
	#SDIO_BYTE_ORDER_LITTLE_ENDIAN
 4321

	)

14 
	#SDIO_BYTE_ORDER
 
SDIO_BYTE_ORDER_LITTLE_ENDIAN


	)

16 #i‡
SDIO_BYTE_ORDER
 =
SDIO_BYTE_ORDER_LITTLE_ENDIAN


17 
	#À16_to_˝up
(
x
Ë*(x)

	)

18 
	#˝u_to_À16
(
x
Ë
	)
x

19 
	#À32_to_˝up
(
x
Ë*(x)

	)

20 
	#˝u_to_À32
(
x
Ë
	)
x

21 
	#be32_to_˝u
(
x
Ë((((
u32
)(x) & (u32)0x000000ffUL) << 24) | \

22 (((
u32
)(
x
) & (u32)0x0000ff00UL) << 8) | \

23 (((
u32
)(
x
) & (u32)0x00ff0000UL) >> 8) | \

24 (((
u32
)(
x
Ë& (u32)0xff000000ULË>> 24))

	)

26 
	#À16_to_˝up
(
x
Ë((((
u16
)(*(x)Ë& (u16)0x00ffUË<< 8Ë| (((u16)(*(x)Ë& (u16)0xff00UË>> 8))))

	)

27 
	#˝u_to_À16
(
x
Ë((((
u16
)(xË& (u16)0x00ffUË<< 8Ë| (((u16)(xË& (u16)0xff00UË>> 8))))

	)

28 
	#À32_to_˝up
(
x
Ë((((
u32
)(*(x)) & (u32)0x000000ffUL) << 24) | \

29 (((
u32
)(*(
x
))) & (u32)0x0000ff00UL) << 8) | \

30 (((
u32
)(*(
x
)) & (u32)0x00ff0000UL) >> 8) | \

31 (((
u32
)(*(
x
)Ë& (u32)0xff000000ULË>> 24)))

	)

32 
	#˝u_to_À32
(
x
Ë((((
u32
)(x) & (u32)0x000000ffUL) << 24) | \

33 (((
u32
)(
x
) & (u32)0x0000ff00UL) << 8) | \

34 (((
u32
)(
x
) & (u32)0x00ff0000UL) >> 8) | \

35 (((
u32
)(
x
Ë& (u32)0xff000000ULË>> 24))

	)

37 
	#be32_to_˝u
(
x
Ë(
	`u32
(x))

	)

42 
	#RSP6BUSY
 0x1

	)

43 
	#RSP17BUSY
 0x2

	)

44 
	#NORSPBUSY
 0x3

	)

45 
	#RSP6NOBUSY
 0x5

	)

46 
	#RSP17NOBUSY
 0x6

	)

47 
	#NORSPNOBUSY
 0x7

	)

50 
	#NORSP
 
NORSPNOBUSY


	)

51 
	#R1
 
RSP6NOBUSY


	)

52 
	#R1B
 
RSP6BUSY


	)

53 
	#R2
 
RSP17NOBUSY


	)

54 
	#R3
 
RSP6NOBUSY


	)

55 
	#R4
 
RSP6NOBUSY


	)

56 
	#R5
 
RSP6NOBUSY


	)

57 
	#R6
 
RSP6NOBUSY


	)

58 
	#R7
 
RSP6NOBUSY


	)

60 
	#CMD_STR_HOST
 0x40L

	)

62 
	#CARD_CMD0
 ((0 | 
CMD_STR_HOST
)<<8)

	)

63 
	#CARD_CMD1
 ((1 | 
CMD_STR_HOST
)<<8)

	)

64 
	#CARD_CMD2
 ((2 | 
CMD_STR_HOST
)<<8)

	)

65 
	#CARD_CMD3
 ((3 | 
CMD_STR_HOST
)<<8)

	)

67 
	#CARD_CMD5
 ((5 | 
CMD_STR_HOST
)<<8)

	)

69 
	#CARD_CMD6
 ((6 | 
CMD_STR_HOST
)<<8)

	)

70 
	#CARD_CMD7
 ((7 | 
CMD_STR_HOST
)<<8)

	)

71 
	#CARD_CMD8
 ((8 | 
CMD_STR_HOST
)<<8)

	)

72 
	#CARD_CMD9
 ((9 | 
CMD_STR_HOST
)<<8)

	)

73 
	#CARD_CMD10
 ((10 | 
CMD_STR_HOST
)<<8)

	)

74 
	#CARD_CMD11
 ((11 | 
CMD_STR_HOST
)<<8)

	)

75 
	#CARD_CMD12
 ((12 | 
CMD_STR_HOST
)<<8)

	)

76 
	#CARD_CMD13
 ((13 | 
CMD_STR_HOST
)<<8)

	)

77 
	#CARD_CMD15
 ((15 | 
CMD_STR_HOST
)<<8)

	)

78 
	#CARD_CMD16
 ((16 | 
CMD_STR_HOST
)<<8)

	)

79 
	#CARD_CMD17
 ((17 | 
CMD_STR_HOST
)<<8)

	)

80 
	#CARD_CMD18
 ((18 | 
CMD_STR_HOST
)<<8)

	)

81 
	#CARD_CMD25
 ((25 | 
CMD_STR_HOST
)<<8)

	)

82 
	#CARD_CMD41
 ((41 | 
CMD_STR_HOST
)<<8)

	)

83 
	#CARD_CMD55
 ((55 | 
CMD_STR_HOST
)<<8)

	)

84 
	#CARD_CMD51
 ((51 | 
CMD_STR_HOST
)<<8)

	)

85 
	#CARD_CMD52
 ((52 | 
CMD_STR_HOST
)<<8)

	)

86 
	#CARD_CMD53
 ((53 | 
CMD_STR_HOST
)<<8)

	)

87 
	#CARD_CMD59
 ((59 | 
CMD_STR_HOST
)<<8)

	)

89 
	#CMD0_NR
 (
CARD_CMD0
 | 
NORSP
)

	)

90 
	#CMD1_R1
 (
CARD_CMD1
 | 
R1
)

	)

91 
	#CMD1_R3
 (
CARD_CMD1
 | 
R3
)

	)

92 
	#CMD1_R1B
 (
CARD_CMD1
 | 
R1B
)

	)

93 
	#CMD2_R2
 (
CARD_CMD2
 | 
R2
)

	)

94 
	#CMD3_R1
 (
CARD_CMD3
 | 
R1
)

	)

95 
	#CMD3_R6
 (
CARD_CMD3
 | 
R6
)

	)

96 
	#CMD5_R4
 (
CARD_CMD5
 | 
R4
)

	)

97 
	#CMD6_R1
 (
CARD_CMD6
 | 
R1
)

	)

98 
	#CMD6_R1B
 (
CARD_CMD6
 | 
R1B
)

	)

99 
	#CMD7_R1B
 (
CARD_CMD7
 | 
R1B
)

	)

100 
	#CMD8_R1
 (
CARD_CMD8
 | 
R1
)

	)

101 
	#CMD8_R7
 (
CARD_CMD8
 | 
R7
)

	)

102 
	#CMD9_R2
 (
CARD_CMD9
 | 
R2
)

	)

103 
	#CMD10_R2
 (
CARD_CMD10
 | 
R2
)

	)

104 
	#CMD11_R1
 (
CARD_CMD11
 | 
R1
)

	)

105 
	#CMD12_R1B
 (
CARD_CMD12
 | 
R1B
)

	)

106 
	#CMD13_R1
 (
CARD_CMD13
 | 
R1
)

	)

107 
	#CMD15_NR
 (
CARD_CMD15
 | 
NORSP
)

	)

108 
	#CMD16_NR
 (
CARD_CMD16
 | 
R1
)

	)

109 
	#CMD18_R1
 (
CARD_CMD18
 | 
R1
)

	)

110 
	#CMD25_R1
 (
CARD_CMD25
 | 
R1
)

	)

111 
	#CMD41_R3
 (
CARD_CMD41
 | 
R3
)

	)

112 
	#CMD55_R1
 (
CARD_CMD55
 | 
R1
)

	)

113 
	#CMD51_R1
 (
CARD_CMD51
 | 
R1
)

	)

114 
	#CMD52_R5
 (
CARD_CMD52
 | 
R5
)

	)

115 
	#CMD53_R5
 (
CARD_CMD53
 | 
R5
)

	)

116 
	#CMD59_R1
 (
CARD_CMD59
 | 
R1
)

	)

118 
	#GO_IDLE_ATATE
 
CMD0_NR


	)

119 
	#MMC_ALL_SEND_CID
 
CMD2_R2


	)

120 
	#SD_SEND_IF_COND
 
CMD8_R7


	)

121 
	#SD_SWITCH_VOLTAGE
 
CMD11_R1


	)

122 
	#SD_SEND_RELATIVE_ADDR
 
CMD3_R6


	)

123 
	#MMC_SELECT_CARD
 
CMD7_R1B


	)

124 
	#SD_APP_OP_COND
 
CMD41_R3


	)

125 
	#MMC_SEND_CSD
 
CMD9_R2


	)

126 
	#MMC_SPI_CRC_ON_OFF
 
CMD59_R1


	)

127 
	#SD_APP_SET_BUS_WIDTH
 
CMD6_R1


	)

128 
	#MMC_APP_CMD
 
CMD55_R1


	)

129 
	#MMC_DATA_READ
 
CMD51_R1


	)

130 
	#SD_IO_SEND_OP_COND
 
CMD5_R4


	)

131 
	#SD_IO_RW_EXTENDED
 
CMD53_R5


	)

132 
	#SD_APP_SD_STATUS
 
CMD13_R1


	)

133 
	#SD_APP_SEND_SCR
 
CMD51_R1


	)

134 
	#MMC_SEND_CID
 
CMD10_R2


	)

135 
	#SD_SWITCH
 
CMD6_R1


	)

136 
	#SD_IO_RW_DIRECT
 
CMD52_R5


	)

139 
	#CMD_RESP
 &
sdio_ho°
.
cmd_buf
[6+1]

	)

140 
	#CMD_RESP_0
 ()((
sdio_ho°
.
cmd_buf
[6+1] << 24Ë| (sdio_ho°.cmd_buf[6+2] << 16Ë| (sdio_ho°.cmd_buf[6+3] << 8Ë| (sdio_ho°.cmd_buf[6+4]))

	)

141 
	#CMD_RESP_1
 ()((
sdio_ho°
.
cmd_buf
[6+5] << 24Ë| (sdio_ho°.cmd_buf[6+6] << 16Ë| (sdio_ho°.cmd_buf[6+7] << 8Ë| (sdio_ho°.cmd_buf[6+8]))

	)

144 
	#ty≥check
(
ty≥
,
x
) \

145 ({ 
ty≥
 
__dummy
; \

146 
	`ty≥of
(
x
Ë
__dummy2
; \

147 ()(&
__dummy
 =&
__dummy2
); \

149 })

	)

151 
ty≥check
(
u32
, 
b
) &&\

152 ((
	gs32
)(
	gb
Ë- (s32)(
	ga
) < 0))

154 
	#time_bef‹e
(
a
,
b
Ë
	`time_a·î
(b,a)

	)

158 
	mSDIO_SUCC
 = 0x0,

159 
	mSDIO_ERR_CMD_TIMEOUT
,

160 
	mSDIO_ERR_DATA_TIMEOUT
,

161 
	mSDIO_ERR_CRC_COMMAND
,

162 
	mSDIO_ERR_CRC_READ
,

163 
	mSDIO_ERR_CRC_WRITE
,

164 } 
	tsdio_îr
;

166 
	smmc_ios
 {

168 
	#SDIO_HOST_MAX_CLK
 (80*1000000)

	)

176 
	#MMC_BUSMODE_OPENDRAIN
 1

	)

177 
	#MMC_BUSMODE_PUSHPULL
 2

	)

181 
	#MMC_CS_DONTCARE
 0

	)

182 
	#MMC_CS_HIGH
 1

	)

183 
	#MMC_CS_LOW
 2

	)

187 
	#MMC_POWER_OFF
 0

	)

188 
	#MMC_POWER_UP
 1

	)

189 
	#MMC_POWER_ON
 2

	)

193 
	#MMC_BUS_WIDTH_1
 0

	)

194 
	#MMC_BUS_WIDTH_4
 2

	)

195 
	#MMC_BUS_WIDTH_8
 3

	)

197 
	mtimög
;

199 
	#MMC_TIMING_LEGACY
 0

	)

200 
	#MMC_TIMING_MMC_HS
 1

	)

201 
	#MMC_TIMING_SD_HS
 2

	)

202 
	#MMC_TIMING_UHS_SDR12
 3

	)

203 
	#MMC_TIMING_UHS_SDR25
 4

	)

204 
	#MMC_TIMING_UHS_SDR50
 5

	)

205 
	#MMC_TIMING_UHS_SDR104
 6

	)

206 
	#MMC_TIMING_UHS_DDR50
 7

	)

207 
	#MMC_TIMING_MMC_DDR52
 8

	)

208 
	#MMC_TIMING_MMC_HS200
 9

	)

209 
	#MMC_TIMING_MMC_HS400
 10

	)

213 
	#MMC_SIGNAL_VOLTAGE_330
 0

	)

214 
	#MMC_SIGNAL_VOLTAGE_180
 1

	)

215 
	#MMC_SIGNAL_VOLTAGE_120
 2

	)

219 
	#MMC_SET_DRIVER_TYPE_B
 0

	)

220 
	#MMC_SET_DRIVER_TYPE_A
 1

	)

221 
	#MMC_SET_DRIVER_TYPE_C
 2

	)

222 
	#MMC_SET_DRIVER_TYPE_D
 3

	)

225 
	smmc_ho°
 {

226 
u8
 
	mcmd_buf
[6 + 18 + 8];

227 *
	m«me
;

228 
u32
 
	mˇps
;

229 
	#MMC_CAP_4_BIT_DATA
 (1 << 0Ë

	)

230 
	#MMC_CAP_MMC_HIGHSPEED
 (1 << 1Ë

	)

231 
	#MMC_CAP_SD_HIGHSPEED
 (1 << 2Ë

	)

232 
	#MMC_CAP_SDIO_IRQ
 (1 << 3Ë

	)

233 
	#MMC_CAP_SPI
 (1 << 4Ë

	)

234 
	#MMC_CAP_NEEDS_POLL
 (1 << 5Ë

	)

235 
	#MMC_CAP_8_BIT_DATA
 (1 << 6Ë

	)

236 
	#MMC_CAP_AGGRESSIVE_PM
 (1 << 7Ë

	)

237 
	#MMC_CAP_NONREMOVABLE
 (1 << 8Ë

	)

238 
	#MMC_CAP_WAIT_WHILE_BUSY
 (1 << 9Ë

	)

239 
	#MMC_CAP_ERASE
 (1 << 10Ë

	)

240 
	#MMC_CAP_1_8V_DDR
 (1 << 11Ë

	)

242 
	#MMC_CAP_1_2V_DDR
 (1 << 12Ë

	)

244 
	#MMC_CAP_POWER_OFF_CARD
 (1 << 13Ë

	)

245 
	#MMC_CAP_BUS_WIDTH_TEST
 (1 << 14Ë

	)

246 
	#MMC_CAP_UHS_SDR12
 (1 << 15Ë

	)

247 
	#MMC_CAP_UHS_SDR25
 (1 << 16Ë

	)

248 
	#MMC_CAP_UHS_SDR50
 (1 << 17Ë

	)

249 
	#MMC_CAP_UHS_SDR104
 (1 << 18Ë

	)

250 
	#MMC_CAP_UHS_DDR50
 (1 << 19Ë

	)

251 
	#MMC_CAP_RUNTIME_RESUME
 (1 << 20Ë

	)

252 
	#MMC_CAP_DRIVER_TYPE_A
 (1 << 23Ë

	)

253 
	#MMC_CAP_DRIVER_TYPE_C
 (1 << 24Ë

	)

254 
	#MMC_CAP_DRIVER_TYPE_D
 (1 << 25Ë

	)

255 
	#MMC_CAP_CMD23
 (1 << 30Ë

	)

256 
	#MMC_CAP_HW_RESET
 (1 << 31Ë

	)

257 
	#mmc_ho°_is_•i
(
ho°
Ë((ho°)->
ˇps
 & 
MMC_CAP_SPI
)

	)

258 
	#USE_SPI_CRC
 1

	)

259 
u32
 
	mo¸_avaû
;

260 
	#MMC_VDD_165_195
 0x00000080

	)

261 
	#MMC_VDD_20_21
 0x00000100

	)

262 
	#MMC_VDD_21_22
 0x00000200

	)

263 
	#MMC_VDD_22_23
 0x00000400

	)

264 
	#MMC_VDD_23_24
 0x00000800

	)

265 
	#MMC_VDD_24_25
 0x00001000

	)

266 
	#MMC_VDD_25_26
 0x00002000

	)

267 
	#MMC_VDD_26_27
 0x00004000

	)

268 
	#MMC_VDD_27_28
 0x00008000

	)

269 
	#MMC_VDD_28_29
 0x00010000

	)

270 
	#MMC_VDD_29_30
 0x00020000

	)

271 
	#MMC_VDD_30_31
 0x00040000

	)

272 
	#MMC_VDD_31_32
 0x00080000

	)

273 
	#MMC_VDD_32_33
 0x00100000

	)

274 
	#MMC_VDD_33_34
 0x00200000

	)

275 
	#MMC_VDD_34_35
 0x00400000

	)

276 
	#MMC_VDD_35_36
 0x00800000

	)

278 
mmc_ios
 
	mios
;

280 
mmc_ˇrd
 *
	mˇrd
;

283 
u32
 
	mmax_blk_size
;

284 
u32
 
	mmax_blk_cou¡
;

286 
OS_SEM
 
	m£m
;

287 
OS_MUTEX
 
	mmuãx
;

288 
u32
 
	mtimeout
;

289 *
	mp‹t_wakeup_hdl
;

291 
u32
 
	mmax_˛ock
;

292 
u32
 
	mgΩ_£l
;

293 
u32
 
	mp‹t_£l
;

294 
u8
 
	m¸c_îr_Êag
;

296 } 
__©åibuã__
((
Æig√d
(32)));

297 
mmc_ho°
 
sdio_ho°
;

300 
ölöe
 
	$mmc_ˇrd_hs
(
mmc_ˇrd
 *
ˇrd
)

302  
ˇrd
->
ho°
->
ios
.
timög
 =
MMC_TIMING_SD_HS
 ||

303 
ˇrd
->
ho°
->
ios
.
timög
 =
MMC_TIMING_MMC_HS
;

304 
	}
}

306 
ölöe
 
	$mmc_ˇrd_uhs
(
mmc_ˇrd
 *
ˇrd
)

308  
ˇrd
->
ho°
->
ios
.
timög
 >
MMC_TIMING_UHS_SDR12
 &&

309 
ˇrd
->
ho°
->
ios
.
timög
 <
MMC_TIMING_UHS_DDR50
;

310 
	}
}

312 
ölöe
 
boﬁ
 
	$mmc_ˇrd_hs200
(
mmc_ˇrd
 *
ˇrd
)

314  
ˇrd
->
ho°
->
ios
.
timög
 =
MMC_TIMING_MMC_HS200
;

315 
	}
}

317 
ölöe
 
boﬁ
 
	$mmc_ˇrd_ddr52
(
mmc_ˇrd
 *
ˇrd
)

319  
ˇrd
->
ho°
->
ios
.
timög
 =
MMC_TIMING_MMC_DDR52
;

320 
	}
}

322 
ölöe
 
boﬁ
 
	$mmc_ˇrd_hs400
(
mmc_ˇrd
 *
ˇrd
)

324  
ˇrd
->
ho°
->
ios
.
timög
 =
MMC_TIMING_MMC_HS400
;

325 
	}
}

327 
ölöe
 
	$mmc_ho°_uhs
(
mmc_ho°
 *
ho°
)

329  
ho°
->
ˇps
 &

330 (
MMC_CAP_UHS_SDR12
 | 
MMC_CAP_UHS_SDR25
 |

331 
MMC_CAP_UHS_SDR50
 | 
MMC_CAP_UHS_SDR104
 |

332 
MMC_CAP_UHS_DDR50
);

333 
	}
}

335 
sdio_ho°_öô
(
u32
 
∑rm
);

336 
sdio_ho°_unöô
();

337 
sdio_îr
 
sdio_ho°_£nd_comm™d
(
u32
 
¨g
, 
u16
 
cmd
);

338 
sdio_îr
 
sdio_ho°_ªq
(
u8
 
wrôe
, 
u32
 
cmd_¨g
, 
u16
 
cmd_›code
, u8 *
buf
, u16 
blocks
, u16 
blksz
);

339 *
mmc_ho°«me
(
mmc_ho°
 *
ho°
);

340 
mmc_dñay
(
u32
 
˙t
);

341 
mmc_£t_˛ock
(*
ho°
, 
hz
);

342 
mmc_£t_bus_width
(*
ho°
, 
width
);

343 
mmc_£t_timög
(
mmc_ho°
 *
ho°
, 
timög
);

344 
sdio_ªad_comm⁄_cis
(
mmc_ˇrd
 *
ˇrd
);

345 
sdio_ªad_func_cis
(
sdio_func
 *
func
);

346 
sdio_ªmove_func
(
sdio_func
 *
func
);

347 
sdio_add_func
(
sdio_func
 *
func
);

348 
u32
 
sd_gë_ho°_max_cuºít
(
mmc_ho°
 *
ho°
);

349 
sdio_gë_ro
(
mmc_ho°
 *
ho°
);

350 
u32
 
sdio_ho°_gë_jiffõs
();

351 
ho°_gë_cd
(
mmc_ho°
 *
ho°
);

352 
ho°_£t_sig«l_vﬁège_swôch
(
mmc_ho°
 *
ho°
, 
sig«l_vﬁège
);

353 
sdio_func
 *
sdio_gë_func
(
‚
);

354 
sdio_d©1_úq_unöô
();

355 
sdio_d©1_úq_öô
();

	@include_lib/system/device/sdio_host_init.h

1 #i‚de‡
_SDIO_HOST_INIT_H_


2 
	#_SDIO_HOST_INIT_H_


	)

16 
	#SDIO_GRP_0
 0

	)

17 
	#SDIO_GRP_1
 (1 << 31)

	)

18 
	#SDIO_GRP_2
 (1 << 30)

	)

19 
	#SDIO_GRP_MASK
 (1 << 31|1 << 30)

	)

22 
	#SDIO_PORT_0
 0

	)

23 
	#SDIO_PORT_1
 (1 << 29)

	)

24 
	#SDIO_PORT_2
 (1 << 28)

	)

25 
	#SDIO_PORT_3
 (1 << 29|1 << 28)

	)

26 
	#SDIO_PORT_MASK
 (1 << 29|1 << 28)

	)

29 
	#SDIO_1_BIT_DATA
 0

	)

30 
	#SDIO_4_BIT_DATA
 (1 << 27)

	)

31 
	#SDIO_4_BIT_DATA_MASK
 (1 << 27)

	)

34 
	#SDIO_POLLING
 0

	)

35 
	#SDIO_DATA1_IRQ
 (1 << 26)

	)

36 
	#SDIO_DATA1_IRQ_MASK
 (1 << 26)

	)

39 
	#SDIO_MAX_CLK_MASK
 ((1 << 26)-1)

	)

41 
	#SDIO_CLOCK_80M
 (0)

42 
	#SDIO_CLOCK_40M
 (40 * 1000000)

	)

43 
	#SDIO_CLOCK_26M
 (26 * 1000000)

	)

44 
	#SDIO_CLOCK_20M
 (20 * 1000000)

	)

45 
	#SDIO_CLOCK_16M
 (16 * 1000000)

	)

46 
	#SDIO_CLOCK_8M
 (8 * 1000000)

	)

47 
	#SDIO_CLOCK_4M
 (4 * 1000000)

	)

48 
	#SDIO_CLOCK_2M
 (2 * 1000000)

	)

57 
sdio_ho°_öô
(
∑rm
);

58 *
SDIO_GET_CMD_BUF
();

59 
SDIO_SET_GRP_PORT
(
u32
 
gΩ
, u32 
p‹t
);

60 
˝u_sdio_ho°_unöô
();

61 
sdio_d©1_úq_unöô
();

62 
sdio_d©1_úq_öô
();

63 
ho°_£t_timög
(*
ho°
, 
timög
);

64 
mmc_£t_bus_width
(*
ho°
, 
width
);

65 
mmc_£t_˛ock
(*
ho°
, 
hz
);

66 
SDIO_CONTROLLER_RESET
();

67 
SDIO_IDLE_CLK_EN
(
u8
 
íabÀ
) ;

68 
SDIO_CONTROLLER_START
();

69 
SDIO_CONTROLLER_SET_IRQ
();

70 
SDIO_SET_4WIRE_MODE
(
u8
 
íabÀ
);

	@include_lib/system/device/sdmmc.h

1 #i‚de‡
SDMMC_MODULE_H


2 
	#SDMMC_MODULE_H


	)

5 
	~"gíîic/ty≥def.h
"

6 
	~"gíîic/io˘l.h
"

9 
	#SD_CMD_DECT
 0

	)

10 
	#SD_CLK_DECT
 1

	)

11 
	#SD_IO_DECT
 2

	)

13 
	#SD_CLASS_0
 0

	)

14 
	#SD_CLASS_2
 1

	)

15 
	#SD_CLASS_4
 2

	)

16 
	#SD_CLASS_6
 3

	)

17 
	#SD_CLASS_10
 4

	)

19 
	#SD_IOCTL_GET_CLASS
 
	`_IOR
('S', 0, 4)

	)

	@include_lib/system/device/spiflash.h

1 #i‚de‡
__SPIFLASH_H__


2 
	#__SPIFLASH_H__


	)

6 
	~"ty≥def.h
"

7 
	~"gíîic/li°.h
"

8 
	~"gíîic/io˘l.h
"

9 
	~"devi˚/devi˚.h
"

10 
	~"sy°em/èsk.h
"

13 
	g•i_devi˚
;

15 
	e•iÊash_bô_mode
 {

16 
	mSPI_2WIRE_MODE
,

17 
	mSPI_ODD_MODE
,

18 
	mSPI_DUAL_MODE
,

19 
	mSPI_QUAD_MODE
,

22 
	e•iÊash_ªad_mode
 {

23 
	mFAST_READ_OUTPUT_MODE
,

24 
	mFAST_READ_IO_MODE
,

25 
	mFAST_READ_IO_CONTINUOUS_READ_MODE
,

28 
	esfc_run_mode
 {

30 
	mSFC_READ_DATA_MODE
 = (1 << 0),

31 
	mSFC_FAST_READ_MODE
 = (1 << 1),

33 
	mSFC_FAST_READ_DUAL_IO_NORMAL_READ_MODE
 = (1 << 2),

34 
	mSFC_FAST_READ_DUAL_IO_CONTINUOUS_READ_MODE
 = (1 << 3),

35 
	mSFC_FAST_READ_DUAL_OUTPUT_MODE
 = (1 << 4),

37 
	mSFC_FAST_READ_QUAD_IO_NORMAL_READ_MODE
 = (1 << 5),

38 
	mSFC_FAST_READ_QUAD_IO_CONTINUOUS_READ_MODE
 = (1 << 6),

39 
	mSFC_FAST_READ_QUAD_OUTPUT_MODE
 = (1 << 7),

42 
	s•i_›s
 {

43 (*
	m£t_cs
)();

44 (*
	möô
)(*);

45 
u8
(*
ªad_byã
)(*
	mîr
);

46 (*
	mªad
)(
	mu8
 *, 
u32
 
	mÀn
, 
u8
 
	mmode
);

47 (*
	mwrôe_byã
)(
u8
 
	mcmd
);

48 (*
	mwrôe_cmd
)(
u8
 *
	mcmd
, 
u32
 
	mÀn
);

49 (*
	mwrôe
)(
	mu8
 *, 
u32
 
	mÀn
);

50 
u8
(*
gë_bô_mode
)();

54 
	ssf_öfo
 {

55 
u32
 
	mid
;

56 
u16
 
	m∑ge_size
;

57 
u16
 
	mblock_size
;

58 
u32
 
	mchù_size
;

61 
	esf_îa£_ty≥
 {

62 
	mSF_SECTOR_ERASE
,

63 
	mSF_BLOCK_ERASE
,

64 
	mSF_CHIP_ERASE
,

79 
	s•i_devi˚
 {

80 c⁄° *
	m«me
;

81 c⁄° 
•i_›s
 *
	m›s
;

84 
	s•iÊash_∂©f‹m_d©a
 {

85 c⁄° *
	m«me
;

86 
•iÊash_ªad_mode
 
	mmode
;

87 
sfc_run_mode
 
	msfc_run_mode
;

88 *
	m¥iv©e_d©a
;

92 
	s•iÊash
 {

93 
li°_hód
 
	míåy
;

94 *
	mdevi˚
;

95 
devi˚
 
	mdev
;

96 
sf_öfo
 
	möfo
;

97 c⁄° 
•iÊash_∂©f‹m_d©a
 *
	mpd
;

98 c⁄° *
	m«me
;

99 #ifde‡
CONFIG_USE_RTOS


100 
OS_MUTEX
 
	mmuãxt
;

102 
u8
 
	möôed
;

103 
u8
 
	mªad_mode
;

104 
u8
 
	mªad_cmd_mode
;

105 
u8
 
	mwrôe_cmd_mode
;

106 
u8
 
	mc⁄töuous_ªad_mode
;

110 
	#REGISTER_SPIFLASH_DEVICE
(
dev
) \

111 c⁄° 
•i_devi˚
 
dev
 
	`£c
(.•i_devi˚)

	)

114 
•i_devi˚
 
•i_devi˚_begö
[];

115 
•i_devi˚
 
•i_devi˚_íd
[];

120 
•iÊash
 *
__gë_•iÊash
(c⁄° *
«me
);

	@include_lib/system/device/timer.h

	@include_lib/system/device/uart.h

1 #i‚de‡
DEVICE_UART_H


2 
	#DEVICE_UART_H


	)

4 
	~"ty≥def.h
"

5 
	~"devi˚/devi˚.h
"

6 
	~"gíîic/io˘l.h
"

7 
	~"sy°em/èsk.h
"

9 
	#UART_DMA_SUPPORT
 0x00000001

	)

10 
	#UART_TX_USE_DMA
 0x00000003

	)

11 
	#UART_RX_USE_DMA
 0x00000005

	)

12 
	#UART_DEBUG
 0x00000008

	)

14 
	su¨t_ouç‹t
 {

15 
u8
 
	mtx_pö
;

16 
u8
 
	mrx_pö
;

17 
u16
 
	mvÆue
;

20 
putbyã
(
a
);

25 
	eu¨t_˛k_§c
 {

26 
	mLSB_CLK
,

27 
	mOSC_CLK
,

28 
	mPLL_48M
,

32 
	e_u¨t_p‹t_out
 {

34 
	mPORTC_0_1
 = 0x00001000,

35 
	mPORTG_6_7
 = 0x00002000,

36 
	mPORTH_12_13
 = 0x00003000,

37 
	mPORTB_14_15
 = 0x00004000,

39 
	mPORTC_2_3
 = 0x00005000,

40 
	mPORTH_2_5
 = 0x00006000,

41 
	mPORTH_14_15
 = 0x00007000,

42 
	mPORTC_6_7
 = 0x00008000,

44 
	mPORTE_0_1
 = 0x00009000,

45 
	mPORTB_4_3
 = 0x0000A000,

46 
	mPORTD_9_10
 = 0x0000B000,

47 
	mPORTD_14_15
 = 0x0000C000,

49 
	mPORT_REMAP
 = 0x0000D000,

52 
	su¨t_∂©f‹m_d©a
 {

53 
u8
 *
	m«me
;

55 
u8
 
	múq
;

56 
u8
 
	mtx_pö
;

57 
u8
 
	mrx_pö
;

58 
u32
 
	mÊags
;

59 
u32
 
	mbaudøã
;

61 
_u¨t_p‹t_out
 
	mp‹t
;

62 (*
	mp‹t_ªm≠_func
)();

63 
u32
 
	mmax_c⁄töue_ªcv_˙t
;

64 
u32
 
	midÀ_sys_˛k_˙t
;

65 
u¨t_˛k_§c
 
	m˛k_§c
;

69 
	mUART_CIRCULAR_BUFFER_WRITE_OVERLAY
 = -1,

70 
	mUART_RECV_TIMEOUT
 = -2,

71 
	mUART_RECV_EXIT
 = -3,

74 
	#UART_MAGIC
 'U'

	)

75 
	#UART_FLUSH
 
	`_IO
(
UART_MAGIC
,1)

	)

76 
	#UART_SET_RECV_ALL
 
	`_IOW
(
UART_MAGIC
,2,
boﬁ
)

	)

77 
	#UART_SET_RECV_BLOCK
 
	`_IOW
(
UART_MAGIC
,3,
boﬁ
)

	)

78 
	#UART_SET_RECV_TIMEOUT
 
	`_IOW
(
UART_MAGIC
,4,
u32
)

	)

79 
	#UART_SET_RECV_TIMEOUT_CB
 
	`_IOW
(
UART_MAGIC
,5,(*)())

	)

80 
	#UART_GET_RECV_CNT
 
	`_IOR
(
UART_MAGIC
,6,
u32
)

	)

81 
	#UART_START
 
	`_IO
(
UART_MAGIC
,7)

	)

82 
	#UART_SET_CIRCULAR_BUFF_ADDR
 
	`_IOW
(
UART_MAGIC
,8,*)

	)

83 
	#UART_SET_CIRCULAR_BUFF_LENTH
 
	`_IOW
(
UART_MAGIC
,9,
u32
)

	)

86 
	#UART_PLATFORM_DATA_BEGIN
(
d©a
) \

87 c⁄° 
u¨t_∂©f‹m_d©a
 
d©a
 = {

	)

90 
	#UART_PLATFORM_DATA_END
() \

91 };

	)

94 
	su¨t_devi˚
 {

95 *
	m«me
;

96 c⁄° 
u¨t_›î©i⁄s
 *
	m›s
;

97 
devi˚
 
	mdev
;

98 c⁄° 
u¨t_∂©f‹m_d©a
 *
	m¥iv
;

99 
OS_MUTEX
 
	mmuãx
;

105 
	su¨t_›î©i⁄s
 {

106 (*
	möô
)(
	mu¨t_devi˚
 *);

107 (*
	mªad
)(
	mu¨t_devi˚
 *, *
	mbuf
, 
u32
 
	mÀn
);

108 (*
	mwrôe
)(
	mu¨t_devi˚
 *, *
	mbuf
, 
u16
 
	mÀn
);

109 (*
	mio˘l
)(
	mu¨t_devi˚
 *, 
u32
 
	mcmd
, u32 
	m¨g
);

110 (*
	m˛o£
)(
	mu¨t_devi˚
 *);

115 
	#REGISTER_UART_DEVICE
(
dev
) \

116 
u¨t_devi˚
 
dev
 
	`£c
(.
u¨t
)

	)

118 
u¨t_devi˚
 
u¨t_devi˚_begö
[], 
u¨t_devi˚_íd
[];

120 
	#li°_f‹_óch_u¨t_devi˚
(
p
) \

121 
p
=
u¨t_devi˚_begö
;Ö<
u¨t_devi˚_íd
;Ö++)

	)

125 c⁄° 
devi˚_›î©i⁄s
 
u¨t_dev_›s
;

	@include_lib/system/device/usb.h

2 #i‚de‡
__USB__API_H__


3 
	#__USB__API_H__


	)

4 
	~"ty≥def.h
"

5 
	~"io˘l.h
"

6 #ifde‡
__˝lu•lus


18 
	suvc_∑rm
 {

19 
s16
 
brighäess_mö
;

20 
s16
 
brighäess_max
;

21 
s16
 
brighäess_def
;

22 
s16
 
brighäess_ªs
;

23 
s16
 
brighäess_cur
;

25 
s16
 
c⁄åa°_mö
;

26 
s16
 
c⁄åa°_max
;

27 
s16
 
c⁄åa°_def
;

28 
s16
 
c⁄åa°_ªs
;

29 
s16
 
c⁄åa°_cur
;

31 
s16
 
hue_mö
;

32 
s16
 
hue_max
;

33 
s16
 
hue_def
;

34 
s16
 
hue_ªs
;

35 
s16
 
hue_cur
;

37 
s16
 
ßtuøti⁄_mö
;

38 
s16
 
ßtuøti⁄_max
;

39 
s16
 
ßtuøti⁄_def
;

40 
s16
 
ßtuøti⁄_ªs
;

41 
s16
 
ßtuøti⁄_cur
;

43 
s16
 
sh¨≤ess_mö
;

44 
s16
 
sh¨≤ess_max
;

45 
s16
 
sh¨≤ess_def
;

46 
s16
 
sh¨≤ess_ªs
;

47 
s16
 
sh¨≤ess_cur
;

49 
s16
 
gamma_mö
;

50 
s16
 
gamma_max
;

51 
s16
 
gamma_def
;

52 
s16
 
gamma_ªs
;

53 
s16
 
gamma_cur
;

55 
s16
 
whôe_bÆ™˚_ãmp_mö
;

56 
s16
 
whôe_bÆ™˚_ãmp_max
;

57 
s16
 
whôe_bÆ™˚_ãmp_def
;

58 
s16
 
whôe_bÆ™˚_ãmp_ªs
;

59 
s16
 
whôe_bÆ™˚_ãmp_cur
;

61 
s16
 
powî_löe_‰eq_mö
;

62 
s16
 
powî_löe_‰eq_max
;

63 
s16
 
powî_löe_‰eq_def
;

64 
s16
 
powî_löe_‰eq_ªs
;

65 
s16
 
powî_löe_‰eq_cur
;

67 
	susb_ho°_∑rm
 {

68 
u32
 
h•ìd
;

69 
u32
 
Ÿ
;

74 #i‚de‡ 
USB_MSD_EN


75 
	#USB_MSD_EN
 1

	)

76 
	#USB_MIC_EN
 0

	)

77 
	#USB_SPEAKER_EN
 0

	)

78 
	#USB_HID_EN
 0

	)

79 
	#USB_VIDEO_EN
 1

	)

80 
	#USB_VIDEO_PRIVATE_EN
 1

	)

82 #i‡
USB_HID_EN
 && 
USB_VIDEO_PRIVATE_EN


83 #îr‹ 
USB_HID_EN
 
™d
 
USB_VIDEO_PRIVATE_EN
 
c⁄Êi˘s


87 
	#MASSSTORAGE_CLASS
 (
	`BIT
(0))

	)

88 
	#SPEAKER_CLASS
 (
	`BIT
(1))

	)

89 
	#MIC_CLASS
 (
	`BIT
(2))

	)

90 
	#AUDIO_CLASS
 ((
	`BIT
(1)|BIT(2)))

	)

91 
	#HID_CLASS
 (
	`BIT
(3))

	)

92 
	#VIDEO_CLASS
 (
	`BIT
(4))

	)

94 
	s_usb_¶v_°r_desc
 {

95 
u32
 
vid_pid
;

96 c⁄° 
u8
 *
m™uÁ˘uª
;

97 c⁄° 
u8
 *
¥odu˘_desc
;

98 c⁄° 
u8
 *
chù£rül
;

99 c⁄° 
u8
 *
msd_desc
;

100 c⁄° 
u8
 *
•k_desc
;

101 c⁄° 
u8
 *
mic_desc
;

102 c⁄° 
u8
 *
video_desc
;

103 } 
	tUSB_SLV_STR_DESC
;

105 
	susb_¶v_¨g
 {

106 
u16
 
Ÿ
;

107 c⁄° 
USB_SLV_STR_DESC
 *
p°r_desc
;

108 *
∑rm
;

111 
	suvc_‰ame_öfo
 {

112 
u16
 
width
;

113 
u16
 
height
;

115 
	sˇmîa_öfo
 {

116 
uvc_‰ame_öfo
 
‰ame
[5];

117 } 
	tCAMERA_INFO
;

120 
	e_usb_audio_˘l_ty≥
 {

121 
USB_MIC_VOLUME
 = 0x10,

122 
USB_MIC_LEFT_VOLUME
,

123 
USB_MIC_RIGHT_VOLUME
,

124 
USB_MIC_MUTE
,

126 
USB_SPK_VOLUME
 = 0x20,

127 
USB_SPK_LEFT_VOLUME
,

128 
USB_SPK_RIGHT_VOLUME
,

129 
USB_SPK_MUTE
,

130 } 
	tUSB_AUDIO_CTL_TYPE
;

133 
	euvc_evít
 {

134 
UVC_BUTTON_PRESSED
 = 0,

135 
UVC_BUTTON_RELEASED
,

136 
UVC_STREAM_ERROR
,

137 
UVC_CONTROL_CHANGE
,

140 
u16
(* 
	tUSB_MIC_GET_DATA
)(*
	t±r
, 
	tu16
 
	tÀn
);

141 (* 
USB_SPK_WRITE_DATA
)(*
	t±r
, 
	tu16
 
	tÀn
);

142 
u32
(* 
	tUSB_AUDIO_VOLUME_CTL
)(
	tUSB_AUDIO_CTL_TYPE
 
	tty≥
, 
	tu32
 
	tvﬁume
);

144 (*
OPEN_CAMERA
)(
	tu32
 
	t‰ame_ödex
);

145 (*
CLOSE_CAMERA
)();

146 *(*
	tCONFIG_CMAERA
)(
	tu32
 
	tcmd
, *
	t∑rm
);

147 
u32
(*
	tUSB_VIDEO_INDATA
)(*
	t±r
, 
	tu32
 
	tÀn
, u32 *
	tis_‰ame_íd
);

149 
	sjl_msg_›s
 {

150 (*
ªad
)(*
dev
, *
buf
, 
u32
 
Àn
);

151 (*
£nd
)(*
dev
, c⁄° *
buf
, 
u32
 
Àn
);

154 
	sscsi_¥iv©e_ªque°
 {

155 
jl_msg_›s
 
›s
;

156 *
dev
;

157 
u8
 *
cmd
;

158 
u32
 
cmd_Àn
;

161 
	suvc_unô_˘æ
 {

162 
u8
 
ªque°
;

163 
u8
 
unô
;

164 
u32
 
Àn
;

165 
u8
 *
d©a
;

168 
	susb_mass_°‹age
 {

169 (*
dev_©åibuã
)(
id
);

170 (*
dev_ªad
)(
id
, 
u8
 *
buf
, 
u32
 
addr
, 
Àn
);

171 (*
dev_wrôe
)(
id
, 
u8
 *
buf
, 
u32
 
addr
, 
Àn
);

172 (*
dev_ask_block_num
)(
id
);

173 (*
dev_ask_block_size
)(
id
);

174 (*
dev_ask_lun_num
)();

175 (*
dev_°©e_check
)(
id
);

176 (*
scsi_¥iv©e
)(
scsi_¥iv©e_ªque°
 *
ªq
);

179 
	#FMT_MAX_RESO_NUM
 5

	)

181 
	suvc_f‹m©
 {

182 
u8
 
f‹m©
;

183 
u8
 
a˘ive_num
;

184 
u16
 
width
[2][
FMT_MAX_RESO_NUM
 * 2];

185 
u16
 
height
[2][
FMT_MAX_RESO_NUM
 * 2];

186 (*
video_›í
)(
id
, 
fmt
, 
‰ame_id
, 
Âs
);

187 (*
video_ªqbuf
)(
id
, *
buf
, 
u32
 
Àn
, u32 *
‰ame_íd
);

188 (*
video_˛o£
)(
id
);

189 (*
¥o˚ssög_unô_ª•⁄£
)(
uvc_unô_˘æ
 *
˘l_ªq
);

190 (*
¥iv©e_cmd_ª•⁄£
)(
u16
 
cmd
, u16 
d©a
);

193 
	susb_uvc_ˇmîa
 {

194 
u8
 
böd
;

195 
u8
 
f‹m©
;

196 
u8
 
öãrÁ˚_num
;

197 
u16
 
width
[2][
FMT_MAX_RESO_NUM
 * 2];

198 
u16
 
height
[2][
FMT_MAX_RESO_NUM
 * 2];

199 (*
video_›í
)(
id
, 
fmt
, 
‰ame_id
, 
Âs
);

200 (*
video_ªqbuf
)(
id
, *
buf
, 
u32
 
Àn
, u32 *
‰ame_íd
);

201 (*
video_˛o£
)(
id
);

202 (*
¥o˚ssög_unô_ª•⁄£
)(
uvc_unô_˘æ
 *
˘l_ªq
);

203 (*
¥iv©e_cmd_ª•⁄£
)(
u16
 
cmd
, u16 
d©a
);

206 
	s_usb_audio_¨g
 {

207 
u32
 
uac_magic
;

208 
USB_SPK_WRITE_DATA
 
usb_•k_wrôe_d©a
;

209 
USB_MIC_GET_DATA
 
usb_mic_gë_d©a
;

210 
USB_AUDIO_VOLUME_CTL
 
usb_audio_vﬁume_˘l
;

211 } 
	tUSB_AUDIO_ARG
;

214 
	#HID_FMT_NONE
 0x00

	)

215 
	#HID_FMT_KEYBOARD
 0x01

	)

216 
	#HID_FMT_USER
 0x02

	)

218 
	#HID_FMT_KB_PKG
 0x80

	)

219 
	#HID_FMT_KB_SPEC
 0x81

	)

220 
	#HID_FMT_KB_HOLD
 0x82

	)

221 
	#HID_FMT_KB_HEND
 0x83

	)

223 
	susb_hid_¨g
 {

224 
subty≥
;

225 
kb_°©e
;

226 *
cbuf
;

227 
u32
(*
gë_⁄e_‰ame
)(
usb_hid_¨g
 *, 
u8
 *
buf
, u32 
Àn
);

228 (*
ouçut
)(
u8
 *
buf
, 
u32
 
Àn
);

229 
u8
 
cu°_Ω_desc
[128];

230 
u32
 
desc_Àn
;

231 *
£m
;

232 
timî
;

233 
cfg_d⁄e
;

240 
	suvc_ªqbufs
 {

241 *
buf
;

242 
size
;

245 
	suvc_ˇ∑bûôy
 {

246 
fmt
;

247 
Âs
;

248 
ªso_num
;

249 
uvc_‰ame_öfo
 
ªso
[8];

252 
	suvc_¥o˚ssög_unô
 {

253 
u8
 
ªque°
;

254 
u8
 
ty≥
;

255 
u16
 
vÆue
;

256 
u16
 
ödex
;

257 
u8
 
buf
[4];

258 
Àn
;

261 
	suvc_evít_li°íî
 {

262 *
¥iv
;

263 (*
h™dÀr
)(*
¥iv
, 
uvc_evít
 
evít
);

266 
	susb_devi˚_id
 {

267 
u16
 
víd‹
;

268 
u16
 
¥odu˘
;

271 
	susb_°rög
 {

272 
u8
 
code_ty≥
;

273 
u16
 
œnguage
;

274 
Àn
;

275 
u8
 *
°rög
;

278 
	#UVC_CAMERA_FMT_YUY2
 0x1

	)

279 
	#UVC_CAMERA_FMT_MJPG
 0x2

	)

280 
	#UVC_CAMERA_FMT_H264
 0x3

	)

282 
	#USBIOC_MASS_STORAGE_CONNECT
 
	`_IOW
('U', 0, (
usb_mass_°‹age
))

	)

283 
	#USBIOC_UVC_CAMERA_CONNECT
 
	`_IOW
('U', 1, (
uvc_f‹m©
))

	)

285 
	#USBIOC_SLAVE_MODE_START
 
	`_IOW
('U', 3, ())

	)

286 
	#USBIOC_SLAVE_DISCONNECT
 
	`_IOW
('U', 4, ())

	)

287 
	#UVCIOC_QUERYCAP
 
	`_IOR
('U', 5, (
uvc_ˇ∑bûôy
))

	)

288 
	#UVCIOC_SET_CAP_SIZE
 
	`_IOW
('U', 5, ())

	)

289 
	#UVCIOC_STREAM_ON
 
	`_IOW
('U', 7, ())

	)

290 
	#UVCIOC_STREAM_OFF
 
	`_IOW
('U', 8, ())

	)

291 
	#UVCIOC_REQBUFS
 
	`_IOW
('U', 9, ())

	)

292 
	#UVCIOC_DQBUF
 
	`_IOW
('U', 10, ())

	)

293 
	#UVCIOC_QBUF
 
	`_IOW
('U', 11, ())

	)

294 
	#UVCIOC_RESET
 
	`_IOW
('U', 12, ())

	)

295 
	#UVCIOC_REQ_PROCESSING_UNIT
 
	`_IOR
('U', 13, (
uvc_¥o˚ssög_unô
))

	)

296 
	#UVCIOC_SET_PROCESSING_UNIT
 
	`_IOW
('U', 14, (
uvc_¥o˚ssög_unô
))

	)

297 
	#UVCIOC_GET_DEVICE_ID
 
	`_IOR
('U', 15, (
usb_devi˚_id
))

	)

299 
	#USBIOC_SLAVE_RESET
 
	`_IOW
('U', 16, ())

	)

302 
	#USBIOC_GET_MANUFACTURER
 
	`_IOR
('U', 17, (
usb_°rög
))

	)

303 
	#USBIOC_GET_PRODUCT_NAME
 
	`_IOR
('U', 18, (
usb_°rög
))

	)

306 
	#UVCIOC_SET_EVENT_LISTENER
 
	`_IOW
('U', 19, (
uvc_evít_li°íî
))

	)

309 
	#USBIOC_HID_CONNECT
 
	`_IOW
('U', 19, (
usb_hid_¨g
))

	)

310 
	#USBIOC_HID_CONTROL
 
	`_IOW
('U', 20, (
usb_hid_¨g
))

	)

312 
	#USB_SLAVE_RUN
 1002

	)

313 
	#USB_DISABLECONNECT
 1003

	)

314 
	#USB_ENABLECONNECT
 1004

	)

315 
	#USB_FORCE_RESET
 1005

	)

317 
	#IOCTL_GET_MAX_LUN
 1006

	)

318 
	#IOCTL_GET_CUR_LUN
 1007

	)

319 
	#IOCTL_SET_CUR_LUN
 1008

	)

321 
	susb_∂©f‹m_d©a
 {

322 
u32
 
id
;

323 
u32
 
˘l_úq_öt
;

324 
u32
 
⁄löe_check_˙t
;

325 
u32
 
ofÊöe_check_˙t
;

326 
u32
 
i§_¥i‹ôy
;

327 
u32
 
ho°_Ÿ
;

328 
u32
 
ho°_•ìd
;

329 
u32
 
¶ave_Ÿ
;

331 
	#USB_PLATFORM_DATA_BEGIN
(
d©a
) \

332 c⁄° 
usb_∂©f‹m_d©a
 
d©a
 = {\

333 

	)

335 
	#USB_PLATFORM_DATA_END
() \

336 };

	)

338 
	suvc_∂©f‹m_d©a
 {

339 
u16
 
width
;

340 
u16
 
height
;

341 
Âs
;

342 
fmt
;

343 
mem_size
;

344 
timeout
;

345 
u8
 
put_msg
;

348 
	#UVC_PLATFORM_DATA_BEGIN
(
d©a
) \

349 c⁄° 
uvc_∂©f‹m_d©a
 
d©a
 = {\

350 

	)

351 
	#UVC_PLATFORM_DATA_END
() \

352 };

	)

354 c⁄° 
devi˚_›î©i⁄s
 
usb_dev_›s
;

355 c⁄° 
devi˚_›î©i⁄s
 
mass_°‹age_›s
;

356 c⁄° 
devi˚_›î©i⁄s
 
uvc_ho°_›s
;

357 c⁄° 
devi˚_›î©i⁄s
 
uvc_dev_›s
;

359 #ifde‡
__˝lu•lus


	@include_lib/system/device/usb_cam_dev.h

7 #i‚de‡
_USB_CAM_DEV_H


8 
	#_USB_CAM_DEV_H


	)

9 
	~"ty≥def.h
"

10 
	~"io˘l.h
"

12 
	susb_ˇmîa_∂©f‹m_d©a
 {

13 
u8
 
	m›í_log
;

16 
	#USB_CAMERA_PLATFORM_DATA_BEGIN
(
d©a
) \

17 c⁄° 
usb_ˇmîa_∂©f‹m_d©a
 
d©a
 = {\

18 

	)

19 
	#USB_CAMERA_PLATFORM_DATA_END
() \

20 };

	)

22 
	#USB_CAM_TYPE_JPEG
 0x01

	)

23 
	#USB_CAM_TYPE_H264
 0x02

	)

24 
	#USB_CAM_TYPE_YUV
 0x03

	)

25 
	#USB_CAM_TYPE_IMAGE
 0x04

	)

27 
	susb_ˇmîa_v‰ame
 {

28 
u8
 
	mty≥
;

29 *
	md©a
;

30 
u32
 
	mÀn
;

31 
	mtimeout
;

34 
	#USBCAM_STATE_FRAME_START
 0x0

	)

35 
	#USBCAM_STATE_FRAME_TRANS
 0x80

	)

36 
	#USBCAM_STATE_FRAME_END
 0xff

	)

38 
	#USBCAM_IOCTL_GET_FRAME_STATE
 
	`_IOR
('U', 0, ())

	)

39 
	#USBCAM_IOCTL_SET_READ_MODE
 
	`_IOW
('U', 1, ())

	)

41 c⁄° 
devi˚_›î©i⁄s
 
usb_ˇm_dev_›s
;

	@include_lib/system/device/video.h

1 #i‚de‡
DEVICE_VIDEO_H


2 
	#DEVICE_VIDEO_H


	)

4 
	~"video/video_io˘l.h
"

5 
	~"devi˚/devi˚.h
"

8 
	#VIDEO_TAG
(
a
,
b
,
c
,
d
Ë((◊Ë<< 24Ë| ((bË<< 16Ë| ((cË<< 8Ë| (d))

	)

12 
	mVIDREQ_GET_OVERLAY_BUFFER
,

13 
	mVIDREQ_PUT_OVERLAY_BUFFER
,

14 
	mVIDREQ_FREE_OVERLAY_BUFFER
,

15 
	mVIDREQ_GET_CAPTURE_BUFFER
,

16 
	mVIDREQ_SET_CAPTURE_BUFFER
,

17 
	mVIDREQ_PUT_CAPTURE_BUFFER
,

18 
	mVIDREQ_FREE_CAPTURE_BUFFER
,

19 
	mVIDREQ_GET_IMAGE_CAPTURE_BUFFER
,

20 
	mVIDREQ_PUT_IMAGE_CAPTURE_BUFFER
,

21 
	mVIDREQ_IMAGE_CAPTURE_COMPLETED
,

22 
	mVIDREQ_IMAGE_ZOOM
,

24 
	mVIDREQ_IMAGE_ENC_START
,

26 
	mVIDREQ_GET_ENCODER_CHANNEL
,

29 
	mVIDREQ_RESET_CBUFFER
,

31 
	mVIDREQ_GET_DEC_DATA
,

32 
	mVIDREQ_RESET_DOWN_CBUFFER
,

33 
	mVIDREQ_RESET_UP_CBUFFER
,

34 
	mVIDREQ_RESET_ENCODER
,

35 
	mVIDREQ_REKSTART_ENCODER
,

36 
	mVIDREQ_WAIT_ENC_END_STOP_IMC
,

37 
	mVIDREQ_GET_FNUM
,

38 
	mVIDREQ_PAUSE_ENC
,

39 
	mVIDREQ_CONTINUE_ENC
,

40 
	mVIDREQ_PAUSE_ENC_CHANNEL
,

41 
	mVIDREQ_CONTINUE_ENC_CHANNEL
,

42 
	mVIDREQ_GET_TIME_LABEL
,

43 
	mVIDREQ_SET_SOFT_IMAGE_LABEL
,

44 
	mVIDREQ_CAMERA_OUT
,

45 
	mVIDREQ_RESET_UVC_ENC
,

46 
	mVIDREQ_ENCODE_ONE_IMAGE
,

47 
	mVIDREQ_SET_JPG_THUMBNAILS
,

48 
	mVIDREQ_ASYNC_PUT_DEC_DATA
,

49 
	mVIDREQ_BUFF_MOVE
,

50 
	mVIDREQ_GET_MANUAL_ENC_YUV
,

51 
	mVIDREQ_MANUAL_ENC_STREAM
,

52 
	mVIDREQ_GET_SRC_FMT
,

53 
	mVIDREQ_FLUSHINV_DEC_DATA
,

54 
	mVIDREQ_INSERT_WATERMARKIGN
,

55 
	mVIDREQ_MANUAL_DISP_PUTMAP
,

56 
	mVIDREQ_KICK_UP_ONE_FRMAE
,

57 
	mVIDREQ_GET_CORRECT_SIZE
,

60 
	evideo_ªc_quÆôy
 {

61 
	mVIDEO_LOW_Q
,

62 
	mVIDEO_MID_Q
,

63 
	mVIDEO_HIG_Q
,

66 
	evideo_ˇmîa_ty≥
 {

67 
	mVIDEO_CAMERA_NORMAL
 = 0,

68 
	mVIDEO_CAMERA_UVC
,

69 
	mVIDEO_CAMERA_VIRTUAL
,

70 
	mVIDEO_CAMERA_JLC
,

73 
	sYUV_‰ame_d©a
 {

74 
u16
 
	mwidth
;

75 
u16
 
	mheight
;

76 
u16
 
	mlöe_num
;

77 
u16
 
	md©a_height
;

78 
	mpixf‹m©
;

79 
u8
 *
	my
;

80 
u8
 *
	mu
;

81 
u8
 *
	mv
;

84 
	svideo_‰ame_yuv
 {

85 
u16
 
	mwidth
;

86 
u16
 
	mheight
;

87 
u8
 *
	my
;

88 
u8
 *
	mu
;

89 
u8
 *
	mv
;

92 
	svideo_yuv_buf„r
 {

93 
u8
 *
	my
;

94 
u8
 *
	mu
;

95 
u8
 *
	mv
;

98 
	simage_sˇÀ_d©a
 {

99 
u8
 
	mz°©e
;

100 
u32
 
	m§c_ªg_d©a
;

101 
u16
 
	mout_width
;

102 
u16
 
	mout_height
;

103 
u8
 *
	mouçut_buf
;

104 
YUV_‰ame_d©a
 
	möput_‰ame
;

107 
	svideo_image_íc
 {

108 
u8
 
	mmk°¨t
;

109 
u16
 
	mimg_width
;

110 
u16
 
	mimg_height
;

111 
u16
 
	mblk_width
;

112 
u16
 
	mblk_height
;

113 
video_yuv_buf„r
 *
	mblk_buf
;

116 
	svideo_image_dec
 {

117 
u8
 
	mfk°¨t
;

118 
u16
 
	mwidth
;

119 
u16
 
	mheight
;

120 
u8
 *
	mbuf
;

121 
u32
 
	msize
;

122 
video_yuv_buf„r
 *
	mblk_buf
;

125 
	svideo_decode_‰ame
 {

126 
u8
 
	mty≥
;

127 
	mª£t
 : 1;

128 
	mmode
 : 7;

129 
u16
 
	mwidth
;

130 
	mlöe
;

131 
u8
 *
	mbuf
;

132 
u8
 *
	mcú˛e_y
;

133 
u8
 *
	mcú˛e_u
;

134 
u8
 *
	mcú˛e_v
;

135 
	m˙t
;

138 
	svideo_ícode_‰ame
 {

139 
u8
 
	mty≥
;

140 
u8
 
	mª£t
;

141 
u8
 *
	mbuf
;

142 
	m˙t
;

143 
	mlöes
;

146 
	svideo_ˇp_buf„r
 {

147 
u8
 
	mnum
;

148 
u32
 
	msize
;

149 
u8
 *
	mbuf
;

150 
u8
 *
	mbuf2
;

151 
u8
 
	mch_num
;

155 
	gvideo_subdevi˚
;

156 
	gvideo_v¨_∑øm_öfo
;

158 
	svideo_subdevi˚_d©a
 {

159 
	mèg
;

160 *
	md©a
;

163 
	svideo_∂©f‹m_d©a
 {

164 
	mnum
;

165 c⁄° 
video_subdevi˚_d©a
 *
	md©a
;

168 
	sroi_cfg
 {

169 
u32
 
	mroio_xy
;

170 
u32
 
	mroi1_xy
;

171 
u32
 
	mroi2_xy
;

172 
u32
 
	mroi3_xy
;

173 
u32
 
	mroio_øtio
;

174 
u32
 
	mroio_øtio1
;

175 
u32
 
	mroio_øtio2
;

176 
u32
 
	mroio_øtio3
;

177 
u32
 
	mroio_c⁄fig
;

180 
	sjpg_q_èbÀ
 {

181 
u16
 
	mYQT_DCT
[0x40] ;

182 
u16
 
	mUVQT_DCT
[0x40];

183 
u8
 
	mDQT
[138];

186 
	evideo_pix_f‹m©
 {

187 
	mVID_PIX_FMT_H264
,

188 
	mVID_PIX_FMT_MJPG
,

189 
	mVID_PIX_FMT_IMG
,

190 
	mVID_PIX_FMT_YUV
,

193 
	eimage_pix_f‹m©
 {

194 
	mIMG_PIX_FMT_JPG
,

195 
	mIMG_PIX_FMT_YUV
,

198 
	sh264_u£r_d©a
 {

199 
u8
 *
	md©a
;

200 
u32
 
	mÀn
;

203 
	sh264_s_©å
 {

204 
u8
 
	mquÆôy
;

205 
u8
 
	mIP_öãrvÆ
;

206 
u8
 
	m°d_hód
;

207 
u16
 
	mwidth
;

208 
u16
 
	mheight
;

212 
	sh264_d_©å
 {

213 
u32
 
	mabr_kbps
;

214 
roi_cfg
 
	mroi
;

217 
	smjpg_s_©å
 {

218 
u8
 
	míc_mode
;

219 
u8
 
	mquÆôy
;

220 
u8
 
	mßmp_fmt
;

221 
u8
 
	msour˚
;

222 
	mhód_Àn
;

223 
u16
 
	mwidth
;

224 
u16
 
	mheight
;

225 
u32
 
	mabr_kbps
;

226 
u32
 
	mdiv_size
;

229 
	smjpg_d_©å
 {

230 
jpg_q_èbÀ
 *
	mqt
;

231 
u8
 *
	mthumb«ûs
;

232 
	mthumb_Àn
;

235 
	siˇp_auxûüry_mem
 {

236 
u8
 *
	maddr
;

237 
u32
 
	msize
;

240 
	simage_s_©å
 {

241 
u8
 
	mquÆôy
;

242 
u16
 
	mwidth
;

243 
u16
 
	mheight
;

244 
image_pix_f‹m©
 
	mf‹m©
;

245 
	mÆig√d_width
;

246 
jpg_q_èbÀ
 *
	mjpg_qt
;

247 
iˇp_auxûüry_mem
 *
	maux_mem
;

248 
jpg_thumb«û
 *
	mthumb
;

251 
	sjpg_dec_mem
 {

252 
u8
 *
	maddr
;

253 
u32
 
	msize
;

256 
	sjpg_dec_s_©å
 {

257 
u16
 
	mmax_o_width
;

258 
u16
 
	mmax_o_height
;

259 
jpg_dec_mem
 
	mdec_mem
;

262 
	svideo_íc_©å
 {

263 
video_pix_f‹m©
 
	mf‹m©
;

264 *
	m©å
;

267 
	svideo_dec_©å
 {

268 
video_pix_f‹m©
 
	mf‹m©
;

269 *
	m©å
;

272 
	syuv_image
 {

273 
u8
 
	mf‹m©
;

274 
u16
 
	mwidth
;

275 
u16
 
	mheight
;

276 
u8
 *
	maddr
;

277 
u32
 
	msize
;

280 
	svideo_dev_Âs
 {

281 
u8
 
	mˇmîa_Âs
;

282 
u8
 
	mªÆ_Âs
;

283 
u8
 
	mèrgë_Âs
;

286 
	svideo_osd
 {

288 
u16
 
	mx
 ;

289 
u16
 
	my
 ;

290 
u32
 
	mosd_yuv
;

293 *
	mosd_°r
;

294 *
	mosd_m©rix_°r
;

295 
u8
 *
	mosd_m©rix_ba£
;

296 
u32
 
	mosd_m©rix_Àn
;

297 
u8
 
	mosd_w
;

298 
u8
 
	mosd_h
;

301 
	simage_ˇ±uª_öfo
 {

302 
u8
 
	mmu…i_sˇÀ
;

303 
video_image_ˇ±uª
 *
	miˇp
;

306 
	evideo_osd_mode
 {

307 
	mVID_OSD_TEXT
 = 0,

308 
	mVID_OSD_GRAPH
,

311 
	evideo_osd_ty≥
 {

312 
	mVIDEO_STREAM_OSD
,

313 
	mVIDEO_IMAGE_OSD
,

316 
	svideo_ãxt_osd
 {

317 
u16
 
	mx
;

318 
u16
 
	my
;

319 
u32
 
	mosd_yuv
;

321 *
	mãxt_f‹m©
;

322 *
	mf⁄t_m©rix_èbÀ
;

323 
u8
 *
	mf⁄t_m©rix_ba£
;

324 
u32
 
	mf⁄t_m©rix_Àn
;

325 
u8
 
	mf⁄t_w
;

326 
u8
 
	mf⁄t_h
;

327 
u8
 
	mdúe˘i⁄
;

330 
	svideo_gøph_osd
 {

331 
u8
 
	mbô_mode
;

332 
u16
 
	mx
;

333 
u16
 
	my
;

334 
u32
 
	mcﬁ‹
[3];

335 
u16
 
	mwidth
;

336 
u16
 
	mheight
;

337 
u8
 *
	mic⁄
;

338 
	mic⁄_size
;

341 
	svideo_osd_c⁄fig
 {

342 
video_ãxt_osd
 
	mãxt_osd
;

343 
video_gøph_osd
 
	mic⁄_osd
;

346 
	svideo_osd_©å
 {

347 
u32
 
	míabÀ
;

348 
u32
 
	mabûôy
;

349 
video_osd_ty≥
 
	mty≥
;

350 
video_ãxt_osd
 *
	mãxt_osd
;

351 
video_gøph_osd
 *
	mgøph_osd
;

355 
	#VIDEO_REC_NUM
 2

356 

	)

357 
	#VIDEO_PLATFORM_DATA_BEGIN
(
vd©a
) \

358 c⁄° 
video_∂©f‹m_d©a
 
vd©a
 = { \

359 

	)

361 
	#VIDEO_PLATFORM_DATA_END
() \

362 };

	)

366 
	simage_ˇ∑bûôy
 {

367 
u8
 
	mzoom
;

368 
u16
 
	mwidth
;

369 
u16
 
	mheight
;

370 
video_image_ˇ±uª
 *
	miˇp
;

373 
	svideo_subdevi˚_›s
 {

374 (*
	möô
)(c⁄° *
	m«me
, 
	mvideo_∂©f‹m_d©a
 *);

376 
boﬁ
 (*
⁄löe
)(c⁄° *
	m«me
);

378 (*
	mgë_fmt
)(
video_f‹m©
 *
	mf
);

380 (*
	m£t_fmt
)(
video_f‹m©
 *
	mf
);

382 
	mvideo_ídpoöt
 *(*
	m›í
)(
	mvideo_v¨_∑øm_öfo
 *);

384 (*
	movîœy
)(
	mvideo_ídpoöt
 *, 
	mi
);

386 (*
	m°ªam⁄
)(
	mvideo_ídpoöt
 *);

388 (*
	m°ªamoff
)(
	mvideo_ídpoöt
 *);

390 (*
	mgë_image_ˇ∑bûôy
)(
	mvideo_ídpoöt
 *, 
	mimage_ˇ∑bûôy
 *);

391 (*
	mimage_ˇ±uª
)(
	mvideo_ídpoöt
 *, 
	mimage_ˇ∑bûôy
 *);

393 (*
	mª•⁄£
)(
	mvideo_ídpoöt
 *, 
	mcmd
, *);

395 (*
	mwrôe
)(
	mvideo_ídpoöt
 *, *
	mbuf
, 
u32
 
	mÀn
);

397 (*
	m˛o£
)(
	mvideo_ídpoöt
 *);

399 (*
	mquîyˇp
)(
	mvideo_ídpoöt
 *, 
video_ˇ∑bûôy
 *
	mˇp
);

401 (*
	mio˘æ
)(
	mvideo_ídpoöt
 *, 
u32
 
	mcmd
, *
	m¨g
);

405 
	#MANUAL_CHANNEL
 3

	)

406 
	svideo_v¨_∑øm_öfo
 {

407 
u32
 
	mÂs
;

408 
u16
 
	mwidth
;

409 
u16
 
	mheight
;

411 
u8
 
	mch
;

412 
u8
 
	mch™√l
;

413 
	msour˚
;

414 
video_f‹m©
 *
	mf
;

417 
	svideo_subdevi˚
 {

418 
u8
 
	msubid
;

419 c⁄° *
	m«me
;

421 
u32
 
	mouçut_pixñf‹m©
;

422 c⁄° 
video_subdevi˚_›s
 *
	m›s
;

423 (*
	mªque°
)(
	mvideo_ídpoöt
 *, 
	mcmd
, *);

427 
	svideo_ídpoöt
 {

428 
li°_hód
 
	míåy
;

429 
video_subdevi˚
 *
	mdev
;

430 
	möu£d
;

431 *
	m∑ª¡
;

432 *
	m¥iv©e_d©a
;

433 *
	mimc_d©a
;

436 
	svideo_¸›_˘æ
 {

437 
u16
 
	m¸›_sx
;

438 
u16
 
	m¸›_ex
;

439 
u16
 
	m¸›_sy
;

440 
u16
 
	m¸›_ey
;

443 
	svideo_¸›_sˇ
 {

444 
u16
 
	m§c_w
;

445 
u16
 
	m§c_h
;

446 
u16
 
	m¸›_w
;

447 
u16
 
	m¸›_h
;

450 
	svideo_¸›_åi
 {

451 (*
	mdo_¸›
)(*
	m¥iv
, *
	m∑rm
);

452 *
	m¥iv
;

453 *
	m∑rm
;

457 
video_subdevi˚
 
video_subdev_begö
[];

458 
video_subdevi˚
 
video_subdev_íd
[];

460 c⁄° 
devi˚_›î©i⁄s
 
video_dev_›s
;

461 c⁄° 
devi˚_›î©i⁄s
 
usb_ˇm_dev_›s
;

463 
	#REGISTER_VIDEO_SUBDEVICE
(
dev
, 
id
) \

464 
video_subdevi˚
 
dev
 
	`£c
(.
video_subdev
.##
id
) = { \

465 .
subid
 = 
id
, \

466 .
«me
 = #dev, \

467 

	)

468 
	gvideo_devi˚
;

470 
	svideo_devi˚_›s
 {

471 c⁄° *
	g«me
;

472 
boﬁ
 (*
⁄löe
)();

473 (*
	göô
)(c⁄° *
	g«me
, c⁄° 
video_∂©f‹m_d©a
 *
	gd©a
);

474 (*
	g›í
)(
	gvideo_devi˚
 *);

475 (*
	g£t_fmt
)(
	gvideo_devi˚
 *, 
	gvideo_f‹m©
 *);

476 (*
	govîœy
)(
	gvideo_devi˚
 *, 
	g⁄
);

477 (*
	g°ªam⁄
)(
	gvideo_devi˚
 *);

478 (*
	g°ªamoff
)(
	gvideo_devi˚
 *);

479 (*
	gimage_ˇ±uª
)(
	gvideo_devi˚
 *, 
video_image_ˇ±uª
 *
	giˇp
);

480 (*
	g°¨t_I_‰ame
)(
	gvideo_devi˚
 *);

481 (*
	gadju°_Âs
)(
	gvideo_devi˚
 *, *);

482 (*
	gio˘l
)(
	gvideo_devi˚
 *, 
	gcmd
, 
u32
 
	g¨g
);

483 (*
	gwrôe
)(
	gvideo_devi˚
 *, *
	gd©a
, 
u32
 
	gÀn
);

484 (*
	g˛o£
)(
	gvideo_devi˚
 *);

487 
video_devi˚_›s
 
video_dev_begö
[];

488 
video_devi˚_›s
 
video_dev_íd
[];

490 
	#REGISTER_VIDEO_DEVICE
(
dev
, 
_«me
) \

491 
video_devi˚_›s
 
__devi˚_
##
dev
 
	`£c
(.
video_devi˚
) = { \

492 .
«me
 = 
_«me
, \

493 

	)

494 
	svideo_fûl_‰ames
 {

495 
u8
 
	gª£t_timî
;

496 
u8
 
	gtime_˙t
;

497 vﬁ©ûê
	go_‰ame_˙t
;

498 
	göãrvÆ
;

499 
	gfûl_dly
;

500 
	gÂs_ªmaö
;

501 
	glo°_‰ames
;

502 
	gtimî
;

503 
	gtimî_⁄e_‰ame
;

504 
•ölock_t
 
	glock
;

507 
	svideo_devi˚
 {

508 
devi˚
 
	gdevi˚
;

509 
li°_hód
 
	gídpoöt
;

510 
li°_hód
 
	gíåy
;

511 
videobuf_queue
 
	gvideo_q
;

512 
video_v¨_∑øm_öfo
 
	göfo
;

513 
video_subdevi˚
 *
	gsubdev
[4];

514 
video_image_ˇ±uª
 *
	giˇp
;

515 
video_devi˚_›s
 *
	gdev_›s
;

516 
video_dev_Âs
 
	gÂs
;

517 
video_fûl_‰ames
 
	gff
;

518 *
	g¥iv©e_d©a
;

519 
OS_SEM
 
	g£m
;

520 
u8
 
	gªf
;

521 
u8
 
	gtime_ba£
;

522 
u8
 
	g°ªam⁄
;

523 
u8
 
	gsubdev_num
;

524 
u8
 
	gmaj‹
, 
	gmij‹
;

525 
u32
 
	g‰ame_˙t
;

526 
u32
 
	g°›_‰ame_˙t
;

527 
u32
 
	g°›_‰ame_öãrvÆ
;

528 
u32
 
	gpixñf‹m©
;

531 
video_subdevi˚_ªgi°î
(
video_subdevi˚
 *
dev
);

534 
u32
 
video_buf_‰ì_•a˚
(
video_devi˚
 *);

536 *
video_buf_mÆloc
(
video_devi˚
 *, 
u32
 
size
);

538 *
video_buf_ªÆloc
(
video_devi˚
 *, *
buf
, 
size
);

540 
video_buf_‰ì
(
video_devi˚
 *, *
buf
);

542 *
video_buf_±r
(*
buf
);

544 
u32
 
video_buf_size
(*
buf
);

546 
video_buf_°ªam_föish
(
video_devi˚
 *, *
buf
);

548 
video_buf_quîy
(
video_devi˚
 *
ï
, 
videobuf_°©e
 *
°a
);

550 
video_subdev_ªque°
(
video_ídpoöt
 *
ï
, 
ªq
, *
¨g
);

553 
video_dev_√ed_fûl_‰ame
(
video_devi˚
 *);

555 
video_dev_ªÆ_‰ame_dec
(
video_devi˚
 *);

557 
video_dev_ª£t_‰ame_öãrvÆ_timî
(
video_devi˚
 *);

	@include_lib/system/device/video/fb.h

1 #i‚de‡
FRAMEBUFFER_H


2 
	#FRAMEBUFFER_H


	)

4 
	~"ty≥def.h
"

5 
	~"io˘l.h
"

6 
	~"devi˚/devi˚.h
"

7 
	~"sy°em/•ölock.h
"

10 
	#FBIOGET_VSCREENINFO
 
	`_IOR
('F', 0, (
fb_v¨_s¸ìnöfo
))

	)

11 
	#FBIOSET_VSCREENINFO
 
	`_IOW
('F', 0, (
fb_v¨_s¸ìnöfo
))

	)

12 
	#FBIOGETMAP
 
	`_IOR
('F', 1, (
fb_m≠_u£r
))

	)

13 
	#FBIOPUTMAP
 
	`_IOW
('F', 1, (
fb_m≠_u£r
))

	)

14 
	#FBIOBLANK
 
	`_IOW
('F', 2, ())

	)

15 
	#FBIOSET_TRANSP
 
	`_IOW
('F', 3, ())

	)

16 
	#FBIOSET_PALLET
 
	`_IOW
('F', 4, ())

	)

17 
	#FBIOSET_FBUFFER_NUM
 
	`_IOW
('F', 5, ())

	)

18 
	#FBIOGET_FBUFFER_NUM
 
	`_IOR
('F', 5, ())

	)

19 
	#FBIOGET_FBUFFER
 
	`_IOW
('F', 6, ())

	)

20 
	#FBIOPUT_FBUFFER
 
	`_IOW
('F', 7, ())

	)

21 
	#FBIOSET_ENABLE
 
	`_IOW
('F', 8, ())

	)

22 
	#FBIOSET_BACKCOLOR
 
	`_IOW
('F', 9, ())

	)

23 
	#FBIOGET_FBUFFER_INUSED
 
	`_IOR
('F', 10, ())

	)

24 
	#FBIOPUT_FBUFFER_INUSED
 
	`_IOW
('F', 10, ())

	)

25 
	#FBIOGET_DEVSCREENINFO
 
	`_IOR
('F', 11, (
lcd_s¸ìn_öfo
))

	)

26 
	#FBIOSET_BLOCK
 
	`_IOW
('F', 12, ())

	)

27 
	#FBIOGET_PRIVATE_ATTR
 
	`_IOR
('F', 13, (*))

	)

28 
	#FBIOSET_EVENT_HANDLER
 
	`_IOR
('F', 14, (*))

	)

30 
	efb_evít
 {

31 
	mFB_EVT_PAUSE
,

32 
	mFB_EVT_RESUME
,

36 
	mFB_BUFFER_IDLE
,

37 
	mFB_BUFFER_LOCK
,

38 
	mFB_BUFFER_PENDING
,

39 
	mFB_BUFFER_INUSED
,

43 
	mMODE_SHARED
,

48 
	mFB_COLOR_FORMAT_SOLID_COLOR
,

49 
	mFB_COLOR_FORMAT_YUV420
,

50 
	mFB_COLOR_FORMAT_YUV422
,

51 
	mFB_COLOR_FORMAT_RGB888
,

52 
	mFB_COLOR_FORMAT_RGB565
,

53 
	mFB_COLOR_FORMAT_16K
,

54 
	mFB_COLOR_FORMAT_256
,

55 
	mFB_COLOR_FORMAT_2BIT
,

56 
	mFB_COLOR_FORMAT_1BIT
,

57 
	mFB_COLOR_FORMAT_OSD16
,

58 
	mFB_COLOR_FORMAT_OSD8A
,

59 
	mFB_COLOR_FORMAT_OSD8
,

62 
	sfb_buf„r
 {

63 
li°_hód
 
	míåy
;

64 
u8
 
	m°©us
;

65 
u8
 *
	mbaddr
;

68 
	sfb_m≠_u£r
 {

69 
u16
 
	mxoff£t
;

70 
u16
 
	myoff£t
;

71 
u16
 
	mwidth
;

72 
u16
 
	mheight
;

73 
u8
 *
	mbaddr
;

74 
u8
 *
	myaddr
;

75 
u8
 *
	muaddr
;

76 
u8
 *
	mvaddr
;

77 
u8
 
	må™•
;

78 
u8
 
	mf‹m©
;

81 
	sfb_v¨_s¸ìnöfo
 {

82 
u16
 
	ms_xoff£t
;

83 
u16
 
	ms_yoff£t
;

84 
u16
 
	ms_xªs
;

85 
u16
 
	ms_yªs
;

86 
u16
 
	mv_xoff£t
;

87 
u16
 
	mv_yoff£t
;

88 
u16
 
	mv_xªs
;

89 
u16
 
	mv_yªs
;

90 
u16
 
	mrŸ©e
;

93 
	gfb_öfo
;

95 
	sfb_›s
 {

96 (*
	mfb_›í
)(
fb_öfo
 *
	mfb
, *
	m¨g
);

97 (*
	mfb_io˘l
)(
fb_öfo
 *
	mfb
, 
	mcmd
, 
	m¨g
);

98 (*
	mfb_˛o£
)(
fb_öfo
 *
	mfb
);

101 
	sfb_evt_h™dÀr
 {

102 *
	m¥iv
;

103 (*
	mh™dÀr
)(*, 
fb_evít
 
	mevt
);

106 
	sfb_öfo
 {

107 c⁄° *
	m«me
;

108 
u8
 
	mf‹m©
;

109 
u8
 
	mblock
;

110 
u8
 
	m∑u£
;

111 
fb_v¨_s¸ìnöfo
 
	mv¨
;

112 c⁄° 
fb_›s
 *
	mfb›s
;

113 
devi˚
 
	mdevi˚
;

114 *
	m¥iv©e_d©a
;

115 *
	mpd
;

116 
•ölock_t
 
	mlock
;

117 
fb_buf„r
 *
	m≥ndög
;

118 
fb_buf„r
 *
	möu£d
;

119 
fb_buf„r
 
	mfb_buf
[3];

120 
li°_hód
 
	mhód
;

121 
fb_evt_h™dÀr
 
	mevt_hdl
;

126 c⁄° 
devi˚_›î©i⁄s
 
fb_dev_›s
;

128 *
fb_gë_∂©f‹m_d©a
(c⁄° *
fb_«me
);

130 
ªgi°î_‰amebuf„r
(
fb_öfo
 *
fb
);

132 
fb_∑u£
(
fb_öfo
 *
fb
);

134 
fb_ªsume
(
fb_öfo
 *
fb
);

136 
fb_mÆloc_buf„r
(
fb_öfo
 *
fb
);

138 
fb_‰ì_buf„r
(
fb_öfo
 *
fb
);

140 
__fb_put_m≠_com∂ëe
(
fb_öfo
 *
fb
, 
u32
 
baddr
);

	@include_lib/system/device/video/video_ioctl.h

1 #i‚de‡
VIDEO_IOCTL_H


2 
	#VIDEO_IOCTL_H


	)

6 
	~"ty≥def.h
"

7 
	~"gíîic/li°.h
"

8 
	~"gíîic/io˘l.h
"

9 
	~"gíîic/lbuf.h
"

10 
	~"sy°em/èsk.h
"

13 
	svideo_ˇ∑bûôy
 {

14 
	m«me
[16];

15 
u32
 
	mˇ∑bûôõs
;

19 
	#VIDEO_CAP_VIDEO_CAPTURE
 0x00000001

	)

20 
	#VIDEO_CAP_VIDEO_OUTPUT
 0x00000002

	)

21 
	#VIDEO_CAP_VIDEO_OVERLAY
 0x00000004

	)

23 
	#VIDEO_CAP_CAMERA_FPS
 "ˇmîa_Âs"

	)

26 
	#VIDEO_CAP_TUNER
 0x00010000

	)

27 
	#VIDEO_CAP_AUDIO
 0x00020000

	)

28 
	#VIDEO_CAP_RADIO
 0x00040000

	)

29 
	#VIDEO_CAP_MODULATOR
 0x00080000

	)

31 
	#VIDEO_CAP_READWRITE
 0x01000000

	)

32 
	#VIDEO_CAP_ASYNCIO
 0x02000000

	)

33 
	#VIDEO_CAP_STREAMING
 0x04000000

	)

40 
	#VIDEO_REC_SET_FPS
 4

	)

41 
	#VIDEO_REC_SET_FILL_FRAME
 5

	)

42 
	#VIDEO_REC_SET_CAMERA_FPS
 6

	)

43 
	#VIDEO_REC_SET_CYC_TIME
 8

	)

44 
	#VIDEO_REC_SET_DELAY_LIMIT
 9

	)

45 
	#VIDEO_REC_RESET_BITS_RATE
 10

	)

46 
	#VIDEO_REC_SET_TIME_STAMP
 11

	)

49 
	#VIDEO_PIX_FMT_RAW
 0x00000001

	)

50 
	#VIDEO_PIX_FMT_JPEG
 0x00000002

	)

51 
	#VIDEO_PIX_FMT_H264
 0x00000004

	)

53 
	#VIDEO_PIX_FMT_YUV420
 0x00000100

	)

54 
	#VIDEO_PIX_FMT_YUYV
 0x00000200

	)

55 
	#VIDEO_PIX_FMT_YV12
 0x00000400

	)

56 
	#VIDEO_PIX_FMT_NV12
 0x00000800

	)

57 
	#VIDEO_PIX_FMT_YUV422
 0x00001000

	)

58 
	#VIDEO_PIX_FMT_YUV
 0x0000ff00

	)

62 
	#VIDIOC_QUERYCAP
 
	`_IOR
('V', 0, (
video_ˇ∑bûôy
))

	)

63 
	#VIDIOC_GET_FMT
 
	`_IOR
('V', 1, (
video_f‹m©
))

	)

64 
	#VIDIOC_SET_FMT
 
	`_IOW
('V', 1, (
video_f‹m©
))

	)

65 
	#VIDIOC_OVERLAY
 
	`_IOW
('V', 2, ())

	)

66 
	#VIDIOC_STREAM_ON
 
	`_IOW
('V', 3, (
video_buf_ty≥
))

	)

67 
	#VIDIOC_STREAM_OFF
 
	`_IOW
('V', 4, (
video_buf_ty≥
))

	)

68 
	#VIDIOC_REQBUFS
 
	`_IOW
('V', 5, (
video_ªqbufs
))

	)

69 
	#VIDIOC_QUERYBUF
 
	`_IOR
('V', 6, (
videobuf_buf„r
))

	)

70 
	#VIDIOC_QBUF
 
	`_IOR
('V', 7, (
videobuf_buf„r
))

	)

71 
	#VIDIOC_DQBUF
 
	`_IOW
('V', 8, (
videobuf_buf„r
))

	)

74 
	#VIDIOC_IMAGE_CAPTURE
 
	`_IOR
('V', 10, (
video_image_ˇ±uª
))

	)

75 
	#VIDIOC_DEL_IMAGE
 
	`_IOW
('V', 11, (
video_image_ˇ±uª
))

	)

76 
	#VIDIOC_PLAY
 
	`_IOW
('V', 12, ())

	)

77 
	#VIDIOC_GET_S_ATTR
 
	`_IOR
('V', 13, (
video_íc_©å
))

	)

78 
	#VIDIOC_SET_S_ATTR
 
	`_IOW
('V', 13, (
video_íc_©å
))

	)

79 
	#VIDIOC_GET_D_ATTR
 
	`_IOR
('V', 14, (
video_íc_©å
))

	)

80 
	#VIDIOC_SET_D_ATTR
 
	`_IOW
('V', 14, (
video_íc_©å
))

	)

81 
	#VIDIOC_GET_FPS
 
	`_IOR
('V', 15, (
video_dev_Âs
))

	)

82 
	#VIDIOC_SET_FPS
 
	`_IOW
('V', 15, (
video_dev_Âs
))

	)

83 
	#VIDIOC_GET_OSD
 
	`_IOR
('V', 16, (
video_osd
))

	)

84 
	#VIDIOC_SET_OSD
 
	`_IOW
('V', 16, (
video_osd
))

	)

85 
	#VIDIOC_OSD_ENABLE
 
	`_IOW
('V', 17, (
boﬁ
))

	)

86 
	#VIDIOC_OSD_DISABLE
 
	`_IOW
('V', 18, (
boﬁ
))

	)

87 
	#VIDIOC_GET_FRAME_CNT
 
	`_IOW
('V', 19, ())

	)

88 
	#VIDIOC_TRY_STOP_FRAME_INTERVAL
 
	`_IOW
('V', 20, ())

	)

89 
	#VIDIOC_SET_STOP_FRAME_INTERVAL
 
	`_IOW
('V', 21, ())

	)

90 
	#VIDIOC_GET_OSD_ATTR
 
	`_IOR
('V', 22, (
video_osd_©å
))

	)

91 
	#VIDIOC_SET_OSD_ATTR
 
	`_IOW
('V', 23, (
video_osd_©å
))

	)

92 
	#VIDIOC_START_IFREME
 
	`_IOW
('V', 24, ())

	)

93 
	#VIDIOC_APPEND_USER_DATA
 
	`_IOW
('V', 25, (
h264_u£r_d©a
))

	)

96 
	evideo_buf_ty≥
 {

97 
	mVIDEO_BUF_TYPE_VIDEO_CAPTURE
,

98 
	mVIDEO_BUF_TYPE_IMAGE_CAPTURE
,

99 
	mVIDEO_BUF_TYPE_VIDEO_OVERLAY
,

100 
	mVIDEO_BUF_TYPE_VIDEO_PLAY
,

103 
	evideo_thªe_way_ty≥
 {

104 
	mVIDEO_THREE_WAY_NONE
,

105 
	mVIDEO_THREE_WAY_JPEG
,

106 
	mVIDEO_THREE_WAY_H264
,

111 
	svideo_wödow
 {

112 
u16
 
	mÀ·
;

113 
u16
 
	mt›
;

114 
u16
 
	mwidth
;

115 
u16
 
	mheight
;

116 
u16
 
	mb‹dî_À·
;

117 
u16
 
	mb‹dî_t›
;

118 
u16
 
	mb‹dî_right
;

119 
u16
 
	mb‹dî_bŸtom
;

123 
	svideo_f‹m©
 {

124 
video_buf_ty≥
 
	mty≥
;

125 
u8
 
	mˇmîa_ty≥
;

126 
u8
 
	mthªe_way_ty≥
;

127 
u8
 
	mdi•_yuv_ty≥
;

128 
u8
 
	muvc_id
;

129 
u8
 
	mÂs
;

130 
u16
 
	m§c_width
;

131 
u16
 
	m§c_height
;

132 
u32
 
	mpixñf‹m©
;

133 
video_wödow
 
	mwö
;

134 *
	m¥iv©e_d©a
;

137 
	sjpg_thumb«û
 {

138 
u8
 
	míabÀ
;

139 
u8
 
	mquÆôy
;

140 
u16
 
	mwidth
;

141 
u16
 
	mheight
;

142 
u8
 *
	mbuf
;

143 
	mÀn
;

146 
	simage_°ickî
 {

147 
u8
 
	míabÀ
;

148 
u8
 
	mf‹m©
;

149 
u8
 
	mthªshﬁd
;

150 
u16
 
	mwidth
;

151 
u16
 
	mheight
;

152 
u8
 *
	maddr
;

153 
u32
 
	msize
;

156 
	svideo_image_ˇ±uª
 {

157 
u16
 
	mwidth
;

158 
u16
 
	mheight
;

159 
u8
 *
	mbaddr
;

160 
u32
 
	msize
;

161 
jpg_thumb«û
 *
	mthumb«û
;

162 
image_°ickî
 *
	m°ickî
;

165 
	svideo_ªqbufs
 {

166 *
	mbuf
;

167 
	msize
;

168 
	sbuf„r_dev
 {

169 *
	mfd
;

170 
u32
 
	mhód_size
;

171 
u32
 
	maddr
;

172 
u32
 
	msize
;

173 (*
	mªad
)(*
	mfd
, *
	mbuf
, 
u32
 
	maddr
, 
	mÀn
);

174 (*
	mwrôe
)(*
	mfd
, *
	mbuf
, 
u32
 
	maddr
, 
	mÀn
);

175 } 
	mdev
;

178 
	svideobuf_buf„r
 {

179 
u32
 
	mÀn
;

180 
u32
 
	mmagic
;

181 
u32
 
	mm£c
;

182 *
	m¥iv
;

183 
u8
 
	md©a
[0];

186 
	svideobuf_°©e
 {

187 
u32
 
	mavaûabÀ_Àn
;

188 
u32
 
	mmax_c⁄töue_Àn
;

191 
	svideobuf_devi˚
 {

192 *
	mfd
;

193 
lbuff_hód
 *
	mlbuf
;

194 
OS_SEM
 
	m£m_dev_Êush
;

195 
	mèsk_«me
[32];

196 (*
	mªad
)(*
	mfd
, *
	mbuf
, 
u32
 
	maddr
, 
	mÀn
);

197 (*
	mwrôe
)(*
	mfd
, *
	mbuf
, 
u32
 
	maddr
, 
	mÀn
);

200 
	svideobuf_queue
 {

201 
u8
 
	mªf
;

202 
u8
 
	mÆign
;

203 
u8
 
	m°ªamög
;

204 
OS_SEM
 
	m£m
;

205 *
	mbuf
;

206 c⁄° *
	m«me
;

207 
lbuff_hód
 *
	mlbuf
;

208 
videobuf_devi˚
 *
	mdev
;

209 *
	m¥iv©e_d©a
;

212 
	svideo_buf„r
 {

213 
u8
 
	mödex
;

214 
u8
 
	mnoblock
;

215 
u16
 
	mtimeout
;

216 
u32
 
	mtime_m£c
;

217 
u32
 
	mÀn
;

218 
u32
 
	mbaddr
;

219 *
	m¥iv
;

220 
u32
 
	mã°_num
;

	@include_lib/system/device/videobuf.h

1 #i‚de‡
VIDEOBUF_H


2 
	#VIDEOBUF_H


	)

5 
	~"devi˚/video.h
"

8 
videobuf_queue_öô
(
videobuf_queue
 *
q
, 
Æign
, c⁄° *
«me
);

10 
videobuf_ªqbufs
(
videobuf_queue
 *
q
, 
video_ªqbufs
 *
ªq
);

13 
videobuf_dqbuf
(
videobuf_queue
 *
q
, 
video_buf„r
 *
b
);

15 
videobuf_qbuf
(
videobuf_queue
 *
q
, 
video_buf„r
 *
b
);

17 
videobuf_°ªam⁄
(
videobuf_queue
 *
q
, 
u8
 *
ch™√l
);

19 
videobuf_°ªamoff
(
videobuf_queue
 *
q
, 
u8
 
ch™√l
);

21 
videobuf_˛ór_°ªam
(
videobuf_queue
 *
q
, 
u8
 
ch™√l
);

23 
videobuf_buf„r
 *
videobuf_°ªam_Æloc
(
videobuf_queue
 *
q
, 
u32
 
size
);

25 
videobuf_buf„r
 *
videobuf_°ªam_ªÆloc
(
videobuf_queue
 *
q
,

26 
videobuf_buf„r
 *
b
, 
size
);

28 
u32
 
videobuf_°ªam_‰ì_•a˚
(
videobuf_queue
 *
q
);

30 
videobuf_°ªam_‰ì
(
videobuf_queue
 *
q
, 
videobuf_buf„r
 *
b
);

33 
videobuf_°ªam_föish
(
videobuf_queue
 *
q
, 
videobuf_buf„r
 *
b
);

36 
videobuf_quîy
(
videobuf_queue
 *
q
, 
videobuf_°©e
 *
°a
);

38 
videobuf_queue_ªÀa£
(
videobuf_queue
 *
q
);

	@include_lib/system/device/vm.h

1 #i‚de‡
_VM_H_


2 
	#_VM_H_


	)

4 
	~"io˘l.h
"

5 #ifde‡
CONFIG_CHRDEV


6 
	~"devi˚/devi˚.h
"

11 
	e_vm_îr
 {

12 
	mVM_ERR_NONE
 = 0,

13 
	mVM_WRITE_OVERFLOW
 = -1,

14 
	mVM_READ_NO_INDEX
 = -2,

15 
	mVM_PARM_ERR
 = -4,

16 
	mVM_READ_CRC_ERR
 = -5,

17 } 
	tvm_îr
;

19 
u8
 
	tvm_hdl
;

22 
vm_îa£r
();

28 
vm_îr
 
vm_öô
(*
dev_hdl
, 
u32
 
vm_addr
, 
boﬁ
 
√ed_de‰ag_whí_wrôe_fuŒ
);

36 
vm_îr
 
vm_wrôe
(
vm_hdl
 
hdl
, c⁄° *
d©a_buf
, 
u8
 
d©a_Àn
);

42 
vm_îr
 
vm_ªad
(
vm_hdl
 
hdl
, *
d©a_buf
, 
u8
 
d©a_Àn
);

45 
vm_îr
 
vm_de‰ag
();

48 
vm_°©us
();

50 c⁄° 
DEV_IO
 *
dev_ªg_vm
(*
∑rm
);

	@include_lib/system/device/vm_api.h

1 #i‚de‡ 
__VM_API_H__


2 
	#__VM_API_H__


	)

5 
	~"gíîic/io˘l.h
"

6 
	~"devi˚/devi˚.h
"

8 c⁄° 
devi˚_›î©i⁄s
 
vm_dev_›s
;

11 
	#DEV_VM_ERASE
 
	`_IO
('M', 1)

	)

12 
	#DEV_VM_GET_STATUS
 
	`_IOR
('M', 2, (
u32
))

	)

13 
	#DEV_GET_VM_BASE_ADDR
 
	`_IOR
('M', 3, (
u32
))

	)

	@include_lib/system/event.h

1 #i‚de‡
SYS_EVENT_H


2 
	#SYS_EVENT_H


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"gíîic/li°.h
"

6 
	~"gíîic/ª˘.h
"

9 
	#KEY_POWER
 12

	)

10 
	#KEY_OK
 13

	)

11 
	#KEY_CANCLE
 14

	)

12 
	#KEY_MENU
 15

	)

13 
	#KEY_MODE
 16

	)

14 
	#KEY_PHOTO
 17

	)

15 
	#KEY_ENC
 18

	)

18 
	#KEY_LEFT
 37

	)

19 
	#KEY_UP
 38

	)

20 
	#KEY_RIGHT
 39

	)

21 
	#KEY_DOWN
 40

	)

23 
	#KEY_0
 48

	)

24 
	#KEY_1
 49

	)

25 
	#KEY_2
 50

	)

26 
	#KEY_3
 51

	)

27 
	#KEY_4
 52

	)

28 
	#KEY_5
 53

	)

29 
	#KEY_6
 54

	)

30 
	#KEY_7
 55

	)

31 
	#KEY_8
 56

	)

32 
	#KEY_9
 57

	)

35 
	#KEY_F1
 60

	)

37 
	#SYS_KEY_EVENT
 0x01

	)

38 
	#SYS_TOUCH_EVENT
 0x02

	)

39 
	#SYS_DEVICE_EVENT
 0x04

	)

40 
	#SYS_NET_EVENT
 0x08

	)

44 
	mKEY_EVENT_CLICK
,

45 
	mKEY_EVENT_LONG
,

46 
	mKEY_EVENT_HOLD
,

47 
	mKEY_EVENT_DOWN
,

48 
	mKEY_EVENT_UP
,

53 
	mDEVICE_EVENT_IN
,

54 
	mDEVICE_EVENT_OUT
,

55 
	mDEVICE_EVENT_ONLINE
,

56 
	mDEVICE_EVENT_OFFLINE
,

57 
	mDEVICE_EVENT_CHANGE
,

61 
	mTOUCH_EVENT_DOWN
,

62 
	mTOUCH_EVENT_MOVE
,

63 
	mTOUCH_EVENT_HOLD
,

64 
	mTOUCH_EVENT_UP
,

65 
	mTOUCH_EVENT_CLICK
,

66 
	mTOUCH_EVENT_DOUBLE_CLICK
,

70 
	mNET_EVENT_CMD
,

71 
	mNET_EVENT_DATA
,

72 
	mNET_EVENT_CONNECTED
,

73 
	mNET_EVENT_DISCONNECTED
,

74 
	mNET_EVENT_SMP_CFG_TIMEOUT
,

77 
	skey_evít
 {

78 
u8
 
	mevít
;

79 
u8
 
	mvÆue
;

83 
	stouch_evít
 {

84 
u8
 
	mevít
;

85 
posôi⁄
 
	mpos
;

88 
	sdevi˚_evít
 {

89 
u8
 
	mevít
;

90 
	mvÆue
;

93 
	s√t_evít
 {

94 
u8
 
	mevít
;

95 
u8
 
	mvÆue
;

97 
	ssys_evít
 {

98 
u8
 
	mty≥
;

99 
u8
 
	mc⁄sumed
;

100 *
	m¨g
;

102 
key_evít
 
	mkey
;

103 
touch_evít
 
	mtouch
;

104 
devi˚_evít
 
	mdev
;

105 
√t_evít
 
	m√t
;

106 } 
	mu
;

112 
	s°©ic_evít_h™dÀr
 {

113 
	mevít_ty≥
;

114 (*
	mh™dÀr
)(
	msys_evít
 *);

118 
	#SYS_EVENT_HANDLER
(
ty≥
, 
‚
, 
¥i
) \

119 c⁄° 
°©ic_evít_h™dÀr
 
__evít_h™dÀr_
##
‚
 
	`£c
(.
sys_evít
.
¥i
.
h™dÀr
) = { \

120 .
evít_ty≥
 = 
ty≥
, \

121 .
h™dÀr
 = 
‚
, \

122 }

	)

124 
°©ic_evít_h™dÀr
 
sys_evít_h™dÀr_begö
[];

125 
°©ic_evít_h™dÀr
 
sys_evít_h™dÀr_íd
[];

127 
	#li°_f‹_óch_°©ic_evít_h™dÀr
(
p
) \

128 
p
 = 
sys_evít_h™dÀr_begö
;Ö < 
sys_evít_h™dÀr_íd
;Ö++)

	)

132 
u16
 
ªgi°î_sys_evít_h™dÀr
(
evít_ty≥
, 
u8
 
¥i‹ôy
, *
¥iv
,

133 (*
h™dÀr
)(
sys_evít
 *, *));

136 
	`uƒegi°î_sys_evít_h™dÀr
(
u16
 
id
);

142 
	`sys_evít_nŸify
(
sys_evít
 *
e
);

144 
	`sys_evít_˛ór
(
sys_evít
 *
e
);

146 
	`sys_key_evít_dißbÀ
();

149 
	`sys_key_evít_íabÀ
();

151 
	`sys_touch_evít_dißbÀ
();

154 
	`sys_touch_evít_íabÀ
();

160 
	`sys_evít_c⁄sume
(
sys_evít
 *
e
);

162 
	`sys_key_evít_c⁄sume
(
key_evít
 *
e
);

164 
	`sys_touch_evít_c⁄sume
(
touch_evít
 *
e
);

166 
	`sys_devi˚_evít_c⁄sume
(
devi˚_evít
 *
e
);

177 
	`sys_key_evít_èkeovî
(
boﬁ
 
⁄
, boﬁ 
⁄˚
);

179 
	`sys_touch_evít_èkeovî
(
boﬁ
 
⁄
, boﬁ 
⁄˚
);

182 
	`sys_key_evít_m≠
(
key_evít
 *
‹g
, key_evíà*
√w
);

183 
	`sys_key_evít_unm≠
(
key_evít
 *
‹g
, key_evíà*
√w
);

	@include_lib/system/fs/fs.h

1 #i‚de‡
__FS_H__


2 
	#__FS_H__


	)

6 
	~"gíîic/ty≥def.h
"

7 
	~"gíîic/li°.h
"

8 
	~"gíîic/io˘l.h
"

9 
	~"gíîic/©omic.h
"

10 
	~"sy°em/èsk.h
"

11 
	~"sy°em/mÆloc.h
"

12 
	~"sy°em/sys_time.h
"

13 
	~"°d¨g.h
"

16 
	#SEEK_SET
 0

	)

17 
	#SEEK_CUR
 1

	)

18 
	#SEEK_END
 2

	)

20 #i‚de‡
FSELECT_MODE


22 
	#FSELECT_MODE


	)

24 
	#FSEL_FIRST_FILE
 0

	)

25 
	#FSEL_LAST_FILE
 1

	)

26 
	#FSEL_NEXT_FILE
 2

	)

27 
	#FSEL_PREV_FILE
 3

	)

28 
	#FSEL_CURR_FILE
 4

	)

29 
	#FSEL_BY_NUMBER
 5

	)

30 
	#FSEL_BY_SCLUST
 6

	)

35 
	#F_ATTR_RO
 0x01

	)

36 
	#F_ATTR_ARC
 0x02

	)

37 
	#F_ATTR_DIR
 0x04

	)

38 
	#F_ATTR_VOL
 0x08

	)

41 
	mFS_IOCTL_GET_FILE_NUM
,

42 
	mFS_IOCTL_FILE_CHECK
,

43 
	mFS_IOCTL_GET_ERR_CODE
,

44 
	mFS_IOCTL_FREE_CACHE
,

48 
	gvfs_devöfo
;

49 
	gvfsˇn
;

50 
	gvfs_›î©i⁄s
;

54 
	svfs_devöfo
 {

55 *
	mfd
;

56 
u32
 
	m£˘‹_size
;

57 *
	m¥iv©e_d©a
;

60 
	#VFS_PART_DIR_MAX
 16

	)

63 
	svfs_∑πôi⁄
 {

64 
vfs_∑πôi⁄
 *
	m√xt
;

65 
u32
 
	moff£t
;

66 
u32
 
	m˛u°_size
;

67 
u32
 
	mtŸÆ_size
;

68 
u8
 
	mfs_©å
;

69 
	mdú
[
VFS_PART_DIR_MAX
];

70 *
	m¥iv©e_d©a
;

73 
	sfôî
 {

74 
u32
 
	mödex
;

80 
	simou¡
 {

81 
	mfd
;

82 c⁄° *
	m∑th
;

83 
vfs_›î©i⁄s
 *
	m›s
;

84 
vfs_devöfo
 
	mdev
;

85 
vfs_∑πôi⁄
 
	m∑π
;

86 
li°_hód
 
	míåy
;

87 
©omic_t
 
	mªf
;

88 
OS_MUTEX
 
	mmuãx
;

89 
u8
 
	mavÆübÀ
;

90 
u8
 
	m∑π_num
;

93 
	svfs_©å
 {

94 
u8
 
	m©å
;

95 
u32
 
	mfsize
;

96 
u32
 
	ms˛u°
;

97 
sys_time
 
	m¸t_time
;

98 
sys_time
 
	mwπ_time
;

102 
imou¡
 *
	mmt
;

103 
vfs_devöfo
 *
	mdev
;

104 
vfs_∑πôi⁄
 *
	m∑π
;

105 *
	m¥iv©e_d©a
;

106 } 
	tFILE
;

109 
	svfsˇn
 {

110 
u8
 
	msˇn_fûe
;

111 
u8
 
	msub∑th
;

112 
u8
 
	msˇn_dú
;

113 
u8
 
	m©å
;

114 
	ms‹t
;

115 
	m·y≥
[16];

116 
u16
 
	mfûe_numbî
;

117 *
	m¥iv
;

118 
vfs_devöfo
 *
	mdev
;

119 
vfs_∑πôi⁄
 *
	m∑π
;

123 
	svfs_›î©i⁄s
 {

124 c⁄° *
	mfs_ty≥
;

125 (*
	mmou¡
)(
	mimou¡
 *, );

126 (*
	munmou¡
)(
	mimou¡
 *);

127 (*
	mf‹m©
)(
	mvfs_devöfo
 *, 
	mvfs_∑πôi⁄
 *);

128 (*
	mf£t_vﬁ
)(
	mvfs_∑πôi⁄
 *, c⁄° *
	m«me
);

129 (*
	mfgë_‰ì_•a˚
)(
	mvfs_devöfo
 *, 
	mvfs_∑πôi⁄
 *, 
u32
 *
	m•a˚
);

130 (*
	mf›í
)(
	mFILE
 *, c⁄° *
	m∑th
, c⁄° *
	mmode
);

131 (*
	m‰ód
)(
	mFILE
 *, *
	mbuf
, 
u32
 
	mÀn
);

132 (*
	mfwrôe
)(
	mFILE
 *, *
	mbuf
, 
u32
 
	mÀn
);

133 (*
	mf£ek
)(
	mFILE
 *, 
	moff£t
, );

134 (*
	mÊí
)(
	mFILE
 *);

135 (*
	mÂos
)(
	mFILE
 *);

136 (*
	mfc›y
)(
	mFILE
 *, FILE *);

137 (*
	mfgë_«me
)(
	mFILE
 *, 
u8
 *
	m«me
, 
	mÀn
);

138 (*
	m‰íame
)(
	mFILE
 *, c⁄° *
	m∑th
);

139 (*
	mf˛o£
)(
	mFILE
 *);

140 (*
	mfdñëe
)(
	mFILE
 *);

141 (*
	mfsˇn
)(
	mvfsˇn
 *, c⁄° *
	m∑th
);

142 (*
	mfsˇn_ªÀa£
)(
	mvfsˇn
 *);

143 (*
	mf£l
)(
	mvfsˇn
 *, 
	m£l_mode
, 
	mFILE
 *, );

144 (*
	mfgë_©å
)(
	mFILE
 *, *
	m©å
);

145 (*
	mf£t_©å
)(
	mFILE
 *, 
	m©å
);

146 (*
	mfgë_©ås
)(
	mFILE
 *, 
	mvfs_©å
 *);

147 (*
	mfmove
)(
FILE
 *
	mfûe
, c⁄° *
	m∑th_d°
, 
	mFILE
 *, 
	m˛r_©å
);

148 (*
	mio˘l
)(*, 
	mcmd
, 
	m¨g
);

151 
	#REGISTER_VFS_OPERATIONS
(
›s
) \

152 c⁄° 
vfs_›î©i⁄s
 
›s
 
	`£c
(.vfs_›î©i⁄s)

	)

155 
ölöe
 
vfs_∑πôi⁄
 *
	$vfs_∑πôi⁄_√xt
(
vfs_∑πôi⁄
 *
p
)

157 
vfs_∑πôi⁄
 *
n
 = (vfs_∑πôi⁄ *)
	`zÆloc
((*n));

159 i‡(
n
) {

160 
p
->
√xt
 = 
n
;

162  
n
;

163 
	}
}

166 
ölöe
 
	$vfs_∑πôi⁄_‰ì
(
vfs_∑πôi⁄
 *
p
)

168 
vfs_∑πôi⁄
 *
n
 = 
p
->
√xt
;

170 
n
) {

171 
p
 = 
n
->
√xt
;

172 
	`‰ì
(
n
);

173 
n
 = 
p
;

175 
	}
}

179 
imou¡
 *
mou¡
(c⁄° *
dev_«me
, c⁄° *
∑th
, c⁄° *
fs_ty≥
,

180 
ˇche_num
, *
dev_¨g
);

182 
unmou¡
(c⁄° *
∑th
);

184 
f_f‹m©
(c⁄° *
∑th
, c⁄° *
fs_ty≥
, 
u32
 
˛u°_size
);

186 
f_‰ì_ˇche
(c⁄° *
∑th
);

188 
FILE
 *
f›í
(c⁄° *
∑th
, c⁄° *
mode
);

190 
‰ód
(
FILE
 *
fûe
, *
buf
, 
u32
 
Àn
);

192 
fwrôe
(
FILE
 *
fûe
, *
buf
, 
u32
 
Àn
);

194 
f£ek
(
FILE
 *
fûe
, 
off£t
, 
‹ig
);

196 
Êí
(
FILE
 *
fûe
);

198 
Âos
(
FILE
 *
fûe
);

200 
fc›y
(c⁄° *
f‹m©
, ...);

202 
fgë_«me
(
FILE
 *
fûe
, 
u8
 *
«me
, 
Àn
);

204 
‰íame
(
FILE
 *
fûe
, c⁄° *
∑th
);

206 
f˛o£
(
FILE
 *
fûe
);

208 
fdñëe
(
FILE
 *
fûe
);

209 
fdñëe_by_«me
(c⁄° *
‚ame
);

211 
fgë_‰ì_•a˚
(c⁄° *
∑th
, 
u32
 *
•a˚
);

220 
vfsˇn
 *
fsˇn
(c⁄° *
∑th
, c⁄° *
¨g
);

222 
fsˇn_ªÀa£
(
vfsˇn
 *
fs
);

224 
FILE
 *
f£À˘
(
vfsˇn
 *
fs
, 
£…_mode
, 
¨g
);

226 
fdú_exi°
(c⁄° *
dú
);

228 
fdú
(
FILE
 *
fûe
, c⁄° *
¨g
, *
«me
, 
Àn
, 
fôî
 *
ôî
);

230 
fgë_©å
(
FILE
 *
fûe
, *
©å
);

232 
f£t_©å
(
FILE
 *
fûe
, 
©å
);

234 
fgë_©ås
(
FILE
 *
fûe
, 
vfs_©å
 *
©å
);

236 
vfs_∑πôi⁄
 *
fgë_∑πôi⁄
(c⁄° *
∑th
);

238 
f£t_vﬁ
(c⁄° *
∑th
, c⁄° *
«me
);

240 
fmove
(
FILE
 *
fûe
, c⁄° *
∑th_d°
, FILE **
√wFûe
, 
˛r_©å
);

242 
fcheck
(
FILE
 *
fûe
);

244 
fgë_îr_code
(c⁄° *
∑th
);

246 
‚ame_to_∑th
(*
ªsu…
, c⁄° *
∑th
, c⁄° *
‚ame
, 
Àn
);

	@include_lib/system/generic/ascii.h

1 #i‚de‡
ASCII_LIB_H


2 
	#ASCII_LIB_H


	)

5 #ifde‡
__˝lu•lus


9 
	~"ty≥def.h
"

12 
ASCII_ToLowî
(*
buf
, 
u32
 
Àn
);

14 
ASCII_ToUµî
(*
buf
, 
u32
 
Àn
);

16 
u32
 
ASCII_SåCmp
(c⁄° *
§c
, c⁄° *
d°
, u32 
Àn
);

18 
ASCII_SåCmpNoCa£
(c⁄° *
§c
, c⁄° *
d°
, 
Àn
);

20 
ASCII_I¡ToSå
(*
pSå
, 
u32
 
ötNum
, u32 
°rLí
, u32 
bufLí
);

22 
u32
 
ASCII_SåToI¡
(c⁄° *
pSå
, u32 *
pRöt
, u32 
°rLí
);

24 
u32
 
ASCII_SåLí
(*
°r
, u32 
Àn
);

26 
u32
 
ASCII_WSåLí
(*
°r
, u32 
Àn
);

40 #ifde‡
__˝lu•lus


	@include_lib/system/generic/atomic.h

1 #i‚de‡
ATOMIC_H


2 
	#ATOMIC_H


	)

4 
	~"˝u.h
"

5 
	~"úq.h
"

8 
	mcou¡î
;

9 } 
	t©omic_t
;

11 
ölöe
 
	$©omic_add_ªtu∫
(
i
, 
©omic_t
 *
v
)

13 
vÆ
;

14 
	`CPU_SR_ALLOC
();

16 
	`CPU_CRITICAL_ENTER
();

18 
vÆ
 = 
v
->
cou¡î
;

19 
v
->
cou¡î
 = 
vÆ
 +
i
;

21 
	`CPU_CRITICAL_EXIT
();

23  
vÆ
;

24 
	}
}

27 
ölöe
 
	$©omic_sub_ªtu∫
(
i
, 
©omic_t
 *
v
)

29 
vÆ
;

30 
	`CPU_SR_ALLOC
();

32 
	`CPU_CRITICAL_ENTER
();

34 
vÆ
 = 
v
->
cou¡î
;

35 
v
->
cou¡î
 = 
vÆ
 -
i
;

37 
	`CPU_CRITICAL_EXIT
();

39  
vÆ
;

40 
	}
}

42 
ölöe
 
	$©omic_£t
(
©omic_t
 *
v
, 
i
)

44 
vÆ
 = 0;

45 
	`CPU_SR_ALLOC
();

47 
	`CPU_CRITICAL_ENTER
();

49 
v
->
cou¡î
 = 
i
;

51 
	`CPU_CRITICAL_EXIT
();

53  
vÆ
;

54 
	}
}

57 
	#DEFINE_ATOMIC
(
x
) \

58 
©omic_t
 
x
 = {.
cou¡î
 = 0}

	)

60 
	#©omic_add
(
i
, 
v
Ë
	`©omic_add_ªtu∫
(i, v)

	)

61 
	#©omic_sub
(
i
, 
v
Ë
	`©omic_sub_ªtu∫
(i, v)

	)

63 
	#©omic_ªad
(
v
Ë
	`¨ch_©omic_ªad
(v)

	)

66 
	#©omic_öc
(
v
Ë
	`©omic_add
(1, v)

	)

67 
	#©omic_dec
(
v
Ë
	`©omic_sub
(1, v)

	)

69 
	#©omic_öc_™d_ã°
(
v
Ë(
	`©omic_add_ªtu∫
(1, vË=0)

	)

70 
	#©omic_dec_™d_ã°
(
v
Ë(
	`©omic_sub_ªtu∫
(1, vË=0)

	)

71 
	#©omic_öc_ªtu∫
(
v
Ë(
	`©omic_add_ªtu∫
(1, v))

	)

72 
	#©omic_dec_ªtu∫
(
v
Ë(
	`©omic_sub_ªtu∫
(1, v))

	)

73 
	#©omic_sub_™d_ã°
(
i
, 
v
Ë(
	`©omic_sub_ªtu∫
(i, vË=0)

	)

75 
	#©omic_add_√g©ive
(
i
,
v
Ë(
	`©omic_add_ªtu∫
(i, vË< 0)

	)

	@include_lib/system/generic/circular_buf.h

1 #i‚de‡
CIRCULAR_BUF_INTERFACE_H


2 
	#CIRCULAR_BUF_INTERFACE_H


	)

4 
	~"ty≥def.h
"

5 
	~"sy°em/•ölock.h
"

11 
	s_cbuf„r
 {

12 
u8
 *
	mbegö
;

13 
u8
 *
	míd
;

14 
u8
 *
	mªad_±r
;

15 
u8
 *
	mwrôe_±r
;

16 
u8
 *
	mtmp_±r
 ;

17 
u32
 
	mtmp_Àn
;

18 
u32
 
	md©a_Àn
;

19 
u32
 
	mtŸÆ_Àn
;

20 
•ölock_t
 
	mlock
;

21 } 
	tcbuf„r_t
;

24 
cbuf_öô
(
cbuf„r_t
 *
cbuf„r
, *
buf
, 
u32
 
size
);

26 
u32
 
cbuf_ªad
(
cbuf„r_t
 *
cbuf„r
, *
buf
, u32 
Àn
);

28 
u32
 
cbuf_wrôe
(
cbuf„r_t
 *
cbuf„r
, *
buf
, u32 
Àn
);

30 
u32
 
cbuf_is_wrôe_abÀ
(
cbuf„r_t
 *
cbuf„r
, u32 
Àn
);

32 *
cbuf_wrôe_Æloc
(
cbuf„r_t
 *
cbuf„r
, 
u32
 *
Àn
);

34 
cbuf_wrôe_upd©a
(
cbuf„r_t
 *
cbuf„r
, 
u32
 
Àn
);

36 *
cbuf_ªad_Æloc
(
cbuf„r_t
 *
cbuf„r
, 
u32
 *
Àn
);

38 
cbuf_ªad_upd©a
(
cbuf„r_t
 *
cbuf„r
, 
u32
 
Àn
);

40 
cbuf_˛ór
(
cbuf„r_t
 *
cbuf„r
);

42 
u32
 
cbuf_ªwrôe
(
cbuf„r_t
 *
cbuf„r
, *
begö
, *
buf
, u32 
Àn
);

44 
cbuf_disˇrd_¥ewrôe
(
cbuf„r_t
 *
cbuf„r
);

46 
cbuf_upd©a_¥ewrôe
(
cbuf„r_t
 *
cbuf„r
);

48 
u32
 
cbuf_¥ewrôe
(
cbuf„r_t
 *
cbuf„r
, *
buf
, u32 
Àn
);

50 *
cbuf_gë_wrôïå
(
cbuf„r_t
 *
cbuf„r
);

52 
u32
 
cbuf_gë_d©a_size
(
cbuf„r_t
 *
cbuf„r
);

54 *
cbuf_gë_ªad±r
(
cbuf„r_t
 *
cbuf„r
);

56 
u32
 
cbuf_ªad_goback
(
cbuf„r_t
 *
cbuf„r
, u32 
Àn
);

	@include_lib/system/generic/cpu.h

1 #i‚de‡
GENERIC_CPU_H


2 
	#GENERIC_CPU_H


	)

4 
	~<asm/˝u.h
>

	@include_lib/system/generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@include_lib/system/generic/gpio.h

1 #i‚de‡
ASM_GPIO_H


2 
	#ASM_GPIO_H


	)

5 
	~"asm/gpio.h
"

7 
	#GPIO2PORT
(
gpio
Ë(gpiÿ/ 
IO_GROUP_NUM
)

	)

9 
gpio_p‹t_lock
(
p‹t
);

11 
gpio_p‹t_u∆ock
(
p‹t
);

13 
__gpio_dúe˘i⁄_öput
(
gpio
);

14 
gpio_dúe˘i⁄_öput
(
gpio
);

16 
__gpio_dúe˘i⁄_ouçut
(
gpio
, 
vÆue
);

17 
gpio_dúe˘i⁄_ouçut
(
gpio
, 
vÆue
);

19 
__gpio_£t_puŒ_up
(
gpio
, 
vÆue
);

20 
gpio_£t_puŒ_up
(
gpio
, 
vÆue
);

22 
__gpio_£t_puŒ_down
(
gpio
, 
vÆue
);

23 
gpio_£t_puŒ_down
(
gpio
, 
vÆue
);

25 
__gpio_£t_hd
(
gpio
, 
vÆue
);

26 
gpio_£t_hd
(
gpio
, 
vÆue
);

28 
__gpio_£t_dõ
(
gpio
, 
vÆue
);

29 
gpio_£t_dõ
(
gpio
, 
vÆue
);

31 
__gpio_£t_ouçut_˛k
(
gpio
, 
˛k
);

32 
gpio_£t_ouçut_˛k
(
gpio
, 
˛k
);

34 
__gpio_ªad
(
gpio
);

35 
gpio_ªad
(
gpio
);

	@include_lib/system/generic/includes.h

1 #i‚de‡
GENERIC_INCLUDES_H


2 
	#GENERIC_INCLUDES_H


	)

5 
	~"î∫o-ba£.h
"

6 
	~"ty≥def.h
"

7 
	~"ascii.h
"

8 
	~"©omic.h
"

9 
	~"io˘l.h
"

10 
	~"˝u.h
"

11 
	~"gpio.h
"

12 
	~"úq.h
"

13 
	~"jiffõs.h
"

14 
	~"li°.h
"

15 
	~"¥ötf.h
"

16 
	~"ª˘.h
"

17 
	~"vîsi⁄.h
"

18 
	~"lbuf.h
"

19 
	~"cúcuœr_buf.h
"

20 
	~"ödex.h
"

	@include_lib/system/generic/index.h

1 #i‚de‡
INDEX_H


2 
	#INDEX_H


	)

5 
	~"ty≥def.h
"

8 
	#TABLE
(
t
Ët, 
	`ARRAY_SIZE
—)

	)

11 
ödex_of_èbÀ8
(
u8
 
vÆue
, c⁄° u8 *
èbÀ
, 
èbÀ_size
);

13 
ödex_of_èbÀ16
(
u16
 
vÆue
, c⁄° u16 *
èbÀ
, 
èbÀ_size
);

15 
ödex_of_èbÀ32
(
u32
 
vÆue
, c⁄° u32 *
èbÀ
, 
èbÀ_size
);

	@include_lib/system/generic/io.h

1 #i‚de‡
__GENERIC_IO_H__


2 
	#__GENERIC_IO_H__


	)

5 
	#ªadb
(
a
Ë(*((vﬁ©ûê*)◊)))

	)

6 
	#ªadw
(
a
Ë(*((vﬁ©ûê*)◊)))

	)

7 
	#ªadl
(
a
Ë(*((vﬁ©ûê*)◊)))

	)

10 
	#wrôeb
(
a
, 
v
Ë(*((vﬁ©ûê*)◊))Ë()(v)

	)

11 
	#wrôew
(
a
, 
v
Ë(*((vﬁ©ûê*)◊))Ë=()(v)

	)

12 
	#wrôñ
(
a
, 
v
Ë(*((vﬁ©ûê*)◊))Ë()(v)

	)

	@include_lib/system/generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 #ifde‡
__KERNEL__


73 
__övÆid_size_¨gumít_f‹_IOC
;

74 
	#_IOC_TYPECHECK
(
t
) \

75 (((
t
) == (t[1]) && \

76 (
t
Ë< (1 << 
_IOC_SIZEBITS
)) ? \

77 (
t
Ë: 
__övÆid_size_¨gumít_f‹_IOC
)

	)

79 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

84 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

85 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

86 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

87 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

88 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

89 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

90 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

93 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

94 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

95 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

96 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

100 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

101 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

102 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

103 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

104 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@include_lib/system/generic/irq.h

1 #i‚de‡
__IRQ_H_


2 
	#__IRQ_H_


	)

5 
	~"asm/úq.h
"

	@include_lib/system/generic/jiffies.h

1 #i‚de‡
JIFFIES_H


2 
	#JIFFIES_H


	)

5 
	#HZ
 100L

	)

6 
	#MSEC_PER_SEC
 1000L

	)

7 
	#USEC_PER_MSEC
 1000L

	)

8 
	#NSEC_PER_USEC
 1000L

	)

9 
	#NSEC_PER_MSEC
 1000000L

	)

10 
	#USEC_PER_SEC
 1000000L

	)

11 
	#NSEC_PER_SEC
 1000000000L

	)

12 
	#FSEC_PER_SEC
 1000000000000000LL

	)

15 #i‚de‡
__ASSEMBLY__


16 vﬁ©ûê
jiffõs
;

20 
	#time_a·î
(
a
,
b
Ë(()(bË- ()◊Ë<0)

	)

21 
	#time_bef‹e
(
a
,
b
Ë
	`time_a·î
(b,a)

	)

25 
	#m£cs_to_jiffõs
(
m£c
Ë((m£c)/2)

	)

27 
	#jiffõs_to_m£cs
(
j
Ë((j)*2)

	)

	@include_lib/system/generic/lbuf.h

1 #i‚de‡
LBUF_H


2 
	#LBUF_H


	)

5 
	~"ty≥def.h
"

6 
	~"li°.h
"

7 
	~"sy°em/•ölock.h
"

10 
	slbuff_hód
 {

11 
	mmagic_a
;

12 
li°_hód
 
	mhód
;

13 
li°_hód
 
	m‰ì
;

14 
•ölock_t
 
	mlock
;

15 
u8
 
	mÆign
;

16 
u16
 
	m¥iv_Àn
;

17 
u32
 
	mtŸÆ_size
;

18 
u32
 
	mœ°_addr
;

19 *
	m¥iv
;

20 
	mmagic_b
;

23 
	slbuff_°©e
 {

24 
u32
 
	mavÆübÀ
;

25 
u32
 
	m‰agmít
;

26 
u32
 
	mmax_c⁄töue_Àn
;

27 
	mnum
;

32 
lbuff_hód
 *
lbuf_öô
(*
buf
, 
u32
 
Àn
, 
Æign
, 
¥iv_hód_Àn
);

34 *
lbuf_Æloc
(
lbuff_hód
 *
hód
, 
u32
 
Àn
);

36 *
lbuf_ªÆloc
(
lbuff_hód
 *
hód
, *
lbuf
, 
size
);

38 
lbuf_em±y
(
lbuff_hód
 *
hód
);

40 
lbuf_˛ór
(
lbuff_hód
 *
hód
);

42 
lbuf_push
(
lbuff_hód
 *
hód
, *
lbuf
, 
u8
 
ch™√l_m≠
);

44 *
lbuf_p›
(
lbuff_hód
 *
hód
, 
u8
 
ch™√l
);

46 
lbuf_‰ì
(
lbuff_hód
 *
hód
, *
lbuf
);

48 
u32
 
lbuf_‰ì_•a˚
(
lbuff_hód
 *
hód
);

50 
lbuf_°©e
(
lbuff_hód
 *
hód
, 
lbuff_°©e
 *
°©e
);

52 
lbuf_dump
(
lbuff_hód
 *
hód
);

54 
lbuf_åavîßl
(
lbuff_hód
 *
hód
);

61 
	sdev_lbuf_m≠
 {

62 *
	mhód_buf
;

63 
u32
 
	mhód_Àn
;

64 
u32
 
	maddr
;

65 
u32
 
	mÀn
;

66 
	mÆign
;

67 
	m¥iv_Àn
;

70 
u32
 
dlbuf_m≠pög
(*
lbuf
);

72 
lbuff_hód
 *
dlbuf_öô
(
dev_lbuf_m≠
 *
m≠
);

74 *
dlbuf_Æloc
(
lbuff_hód
 *
hód
, 
u32
 
Àn
);

76 *
dlbuf_ªÆloc
(
lbuff_hód
 *
hód
, *
lbuf
, 
size
);

78 
dlbuf_em±y
(
lbuff_hód
 *
hód
);

80 
dlbuf_˛ór
(
lbuff_hód
 *
hód
);

82 
dlbuf_push
(
lbuff_hód
 *
hód
, *
lbuf
, 
u8
 
ch™√l_m≠
);

84 
dlbuf_ªpush
(
lbuff_hód
 *
hód
, *
lbuf
, 
u8
 
ch™√l_m≠
);

86 *
dlbuf_p›
(
lbuff_hód
 *
hód
, 
u8
 
ch™√l
);

88 
dlbuf_‰ì
(
lbuff_hód
 *
hód
, *
lbuf
);

90 
u32
 
dlbuf_‰ì_•a˚
(
lbuff_hód
 *
hód
);

92 
dlbuf_°©e
(
lbuff_hód
 *
hód
, 
lbuff_°©e
 *
°©e
);

94 
dlbuf_dump
(
lbuff_hód
 *
hód
);

96 
dlbuf_åavîßl
(
lbuff_hód
 *
hód
);

	@include_lib/system/generic/list.h

1 #i‚de‡
LIST_H


2 
	#LIST_H


	)

11 #ifde‡
li°_off£tof


12 #unde‡
li°_off£tof


14 #ifde‡
c⁄èöî_of


15 #unde‡
c⁄èöî_of


18 
	#li°_off£tof
(
ty≥
, 
memb
) \

19 (()(&((
ty≥
 *)0)->
memb
))

	)

21 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
memb
) \

22 ((
ty≥
 *)((*)(
±r
Ë- 
	`li°_off£tof
—y≥, 
memb
)))

	)

25 
	sli°_hód
 {

26 
li°_hód
 *
	m√xt
, *
	m¥ev
;

30 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

32 
	#LIST_HEAD
(
«me
) \

33 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

41 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

42 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

54 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

55 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

62 
	#li°_f‹_óch
(
pos
, 
hód
) \

63 
pos
 = (
hód
)->
√xt
;Öos != (head); \

64 
pos
 =Öos->
√xt
)

	)

72 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

73 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

74 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

82 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

83 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

84 &
pos
->
membî
 !(
hód
); \

85 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

93 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

94 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

95 &
pos
->
membî
 !(
hód
); \

96 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

105 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

106 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

107 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

108 &
pos
->
membî
 !(
hód
); \

109 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

112 
	#li°_f‹_óch_íåy_ªvî£_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

113 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
), \

114 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

115 &
pos
->
membî
 !(
hód
); \

116 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
	`ty≥of
(*n), membî))

	)

122 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

124  
hód
->
√xt
 == head;

125 
	}
}

133 
ölöe
 
	$__li°_add
(
li°_hód
 *
_√w
,

134 
li°_hód
 *
¥ev
,

135 
li°_hód
 *
√xt
)

137 
√xt
->
¥ev
 = 
_√w
;

138 
_√w
->
√xt
 =Çext;

139 
_√w
->
¥ev
 =Örev;

140 
¥ev
->
√xt
 = 
_√w
;

141 
	}
}

152 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
_√w
, li°_hód *
hód
)

154 
	`__li°_add
(
_√w
, 
hód
->
¥ev
, head);

155 
	}
}

157 
ölöe
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

159 
√xt
->
¥ev
 =Örev;

160 
¥ev
->
√xt
 =Çext;

161 
	}
}

163 
ölöe
 
	$__li°_dñ_íåy
(
li°_hód
 *
íåy
)

165 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

166 
	}
}

169 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

171 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

172 
íåy
->
√xt
 =Éntry;

173 
íåy
->
¥ev
 =Éntry;

174 
	}
}

186 
ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

188 
li°
->
√xt
 =Üist;

189 
li°
->
¥ev
 =Üist;

190 
	}
}

192 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

194 
	`__li°_dñ_íåy
(
íåy
);

195 
	`INIT_LIST_HEAD
(
íåy
);

196 
	}
}

202 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

203 
li°_hód
 *
hód
)

205 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

206 
	`li°_add_èû
(
li°
, 
hód
);

207 
	}
}

217 
ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

219 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

220 
	}
}

223 
ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

224 
li°_hód
 *
¥ev
,

225 
li°_hód
 *
√xt
)

227 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

228 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

230 
fú°
->
¥ev
 =Örev;

231 
¥ev
->
√xt
 = 
fú°
;

233 
œ°
->
√xt
 =Çext;

234 
√xt
->
¥ev
 = 
œ°
;

235 
	}
}

245 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

246 
li°_hód
 *
hód
)

248 i‡(!
	`li°_em±y
(
li°
)) {

249 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

250 
	`INIT_LIST_HEAD
(
li°
);

252 
	}
}

258 
ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

260  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

261 
	}
}

268 
ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

269 
li°_hód
 *
hód
)

271 i‡(!
	`li°_em±y
(
li°
)) {

272 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

274 
	}
}

277 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
membî
) \

278 ; &
pos
->
membî
 !(
hód
); \

279 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

281 
	#li°_f‹_óch_íåy_‰om_ªvî£
(
pos
, 
hód
, 
membî
) \

282 ; &
pos
->
membî
 !(
hód
); \

283 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

	@include_lib/system/generic/log.h

1 #i‚de‡
__LOG_H


2 
	#__LOG_H


	)

5 
	~"sy°em/gíîic/¥ötf.h
"

7 
	#__LOG_VERBOSE
 0

	)

8 
	#__LOG_DEBUG
 1

	)

9 
	#__LOG_INFO
 2

	)

10 
	#__LOG_WARN
 3

	)

11 
	#__LOG_ERROR
 4

	)

13 
	slogbuf
 {

14 
u16
 
	mÀn
;

15 
u16
 
	mbuf_Àn
;

16 
	mbuf
[0];

19 
	#__LOG_ENABLE


	)

22 #i‡
__LOG_LEVEL
 > 
__LOG_VERBOSE


23 
	#log_v
(...Ëdÿ{} 0)

	)

24 #ñi‡
deföed
 
__LOG_ENABLE


25 
	#log_v
(...Ë
	`log_¥öt
(
__LOG_VERBOSE
, 
NULL
, 
__VA_ARGS__
)

	)

27 
	#log_v
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

32 #i‡
__LOG_LEVEL
 > 
__LOG_DEBUG


33 
	#log_d
(...Ëdÿ{} 0)

	)

34 #ñi‡
deföed
 
__LOG_ENABLE


35 
	#log_d
(...Ë
	`log_¥öt
(
__LOG_DEBUG
, 
NULL
, 
__VA_ARGS__
);

	)

37 
	#log_d
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

40 #i‡
__LOG_LEVEL
 > 
__LOG_INFO


41 
	#log_i
(...Ëdÿ{} 0)

	)

42 #ñi‡
deföed
 
__LOG_ENABLE


43 
	#log_i
(...Ë
	`log_¥öt
(
__LOG_INFO
, 
NULL
, 
__VA_ARGS__
);

	)

45 
	#log_i
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

48 #i‡
__LOG_LEVEL
 > 
__LOG_WARN


49 
	#log_w
(...Ëdÿ{} 0)

	)

50 #ñi‡
deföed
 
__LOG_ENABLE


51 
	#log_w
(...Ë
	`log_¥öt
(
__LOG_WARN
, 
NULL
, 
__VA_ARGS__
);

	)

53 
	#log_w
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

56 #i‡
__LOG_LEVEL
 > 
__LOG_ERROR


57 
	#log_e
(...Ëdÿ{} 0)

	)

58 #ñi‡
deföed
 
__LOG_ENABLE


59 
	#log_e
(...Ë
	`log_¥öt
(
__LOG_ERROR
, 
NULL
, 
__VA_ARGS__
);

	)

61 
	#log_e
(...Ë
	`¥ötf
(
__VA_ARGS__
)

	)

65 #i‚de‡
__LOG_ENABLE


66 
	#log_dump
(
a
, 
b
Ëdÿ{} 0)

	)

67 
	#log_putch¨
(Ëdÿ{} 0)

	)

68 
	#log_óæy_öô
(
a
Ëdÿ{} 0)

	)

69 
	#log_Àvñ
(
a
Ëdÿ{} 0)

	)

73 
log_ouçut_lock
();

75 
log_ouçut_u∆ock
();

77 
log_¥öt_time
();

79 
log_óæy_öô
(
buf_size
);

81 
log_Àvñ
(
Àvñ
);

83 
log_¥öt
(
Àvñ
, c⁄° *
èg
, c⁄° *
f‹m©
, ...);

85 
log_dump
(c⁄° 
u8
 *
buf
, 
Àn
);

87 
logbuf
 *
log_ouçut_°¨t
(
Àn
);

89 
log_ouçut_íd
(
logbuf
 *);

91 
log_putch¨
(
logbuf
 *
lb
, 
c
);

93 
log_put_u8hex
(
logbuf
 *
lb
, 
d©
);

95 
log_putbyã
();

100 
log_Êush
();

	@include_lib/system/generic/printf.h

1 #i‚de‡
_PRINTF_H_


2 
	#_PRINTF_H_


	)

4 
	~<°d¨g.h
>

5 
	~"ty≥def.h
"

8 
putch¨
(
a
);

9 
puts
(c⁄° *
out
);

13 
put_u32hex
(
d©
);

14 
put_buf
(c⁄° 
u8
 *
buf
, 
Àn
);

15 
¥ötf
(c⁄° *
f‹m©
, ...);

16 
•rötf
(*
out
, c⁄° *
f‹m©
, ...);

17 
v¥ötf
(c⁄° *
fmt
, 
__buûtö_va_li°
 
va
);

18 
v¢¥ötf
(*, , c⁄° *, 
__buûtö_va_li°
);

19 
¢¥ötf
(*
buf
, 
size
, c⁄° *
fmt
, ...);

20 
¥öt
(**
out
, *
íd
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
);

23 
ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...);

25 
≥º‹
(c⁄° *
fmt
, ...);

	@include_lib/system/generic/rect.h

1 #i‚de‡
RECT_H


2 
	#RECT_H


	)

4 
	~"ty≥def.h
"

8 
	sposôi⁄
 {

9 
	mx
;

10 
	my
;

13 
	sª˘
 {

14 
	mÀ·
;

15 
	mt›
;

16 
	mwidth
;

17 
	mheight
;

21 
	#ª˘_right
(
r
Ë(‘)->
À·
 + (r)->
width
)

	)

22 
	#ª˘_bŸtom
(
r
Ë(‘)->
t›
 + (r)->
height
)

	)

28 
ölöe
 
	$ö_ª˘
(c⁄° 
ª˘
 *ª˘, 
posôi⁄
 *
pos
)

30 i‡(
ª˘
->
À·
 <
pos
->
x
 && 
	`ª˘_right
(rect) >Öos->x) {

31 i‡(
ª˘
->
t›
 <
pos
->
y
 && 
	`ª˘_bŸtom
(rect) >Öos->y) {

32  
åue
;

35  
Ál£
;

36 
	}
}

39 
ölöe
 
boﬁ
 
	$gë_ª˘_covî
(c⁄° 
ª˘
 *
a
, c⁄° ª˘ *
b
, ª˘ *
c
)

41 
right
, 
bŸtom
;

43 
c
->
t›
 = 
	`MAX
(
a
->t›, 
b
->top);

44 
c
->
À·
 = 
	`MAX
(
a
->À·, 
b
->left);

45 
right
 = 
	`MIN
(
	`ª˘_right
(
a
),Ñe˘_right(
b
));

46 
bŸtom
 = 
	`MIN
(
	`ª˘_bŸtom
(
a
),Ñe˘_bŸtom(
b
));

48 i‡((
c
->
t›
 < 
bŸtom
Ë&& (c->
À·
 < 
right
)) {

49 
c
->
width
 = 
right
 - c->
À·
;

50 
c
->
height
 = 
bŸtom
 - c->
t›
;

51  
åue
;

54  
Ál£
;

55 
	}
}

	@include_lib/system/generic/typedef.h

9 #i‚de‡
_ty≥def_h_


10 
	#_ty≥def_h_


	)

13 
	~"asm/˝u.h
"

17 #ifde‡
__GNUC__


18 
	#ALIGNE
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

19 
	#£c
(
x
Ë
	`__©åibuã__
((
	`£˘i⁄
(#x),
u£d
))

	)

20 
	#_GNU_PACKED_
 
	`__©åibuã__
((
∑cked
))

	)

22 
	#£c
(
x
)

	)

23 
	#AT
(
x
)

	)

24 
	#SET
(
x
)

	)

25 
	#_GNU_PACKED_


	)

29 #i‡
CPU_ENDIAN
 =
LITTLE_ENDIAN


33 
	#¡ohl
(
x
Ë(
u32
)((((u32)(x))>>24Ë| ((((u32)(x))>>8)&0xff00Ë| (((u32)(x))<<24Ë| ((((u32)(x))&0xff00)<<8))

	)

34 
	#¡oh
(
x
Ë(
u16
)((((
u32
)(x))>>8&0x00ffË| (((u32)(x))<<8&0xff00))

	)

36 
	#NTOH
(
x
Ë(xË
	`¡oh
(x)

	)

37 
	#NTOHL
(
x
Ë(xË
	`¡ohl
(x)

	)

38 
	#LD_WORD
(
±r
Ë(
u16
)(*(u16*)(
u8
*)’å))

	)

39 
	#LD_DWORD
(
±r
Ë(
u32
)(*(u32*)(
u8
*)’å))

	)

40 
	#ST_WORD
(
±r
,
vÆ
Ë*(
u16
*)(
u8
*)’å)=(u16)(vÆ)

	)

41 
	#ST_DWORD
(
±r
,
vÆ
Ë*(
u32
*)(
u8
*)’å)=(u32)(vÆ)

	)

43 
	#¡ohl
(
x
Ë(x)

	)

44 
	#¡oh
(
x
Ë(x)

	)

45 
	#NTOH
(
x
Ë(xË
	`¡oh
(x)

	)

46 
	#NTOHL
(
x
Ë(xË
	`¡ohl
(x)

	)

51 
	#FALSE
 0

	)

52 
	#TRUE
 1

	)

53 
	#Ál£
 0

	)

54 
	#åue
 1

	)

56 #i‚de‡
NULL


57 
	#NULL
 (*)0

	)

60 #i‚de‡
__ASSEMBLY__


61 
	sS_PICTURE_SIZE
 {

62 
u16
 
	mw
;

63 
u16
 
	mh
;

64 } 
	tpic_size_t
;

68 
	#BIT
(
n
Ë(1UL << (n))

	)

69 
	#BôSET
(
REG
,
POS
Ë((REGË|(1L << (POS)))

	)

70 
	#BôCLR
(
REG
,
POS
Ë((REGË&(~(1L<< (POS))))

	)

71 
	#BôXOR
(
REG
,
POS
Ë((REGË^(~(1L << (POS))))

	)

72 
	#BôCHK_1
(
REG
,
POS
Ë(((REGË& (1L << (POS))Ë=(1L << (POS)))

	)

73 
	#BôCHK_0
(
REG
,
POS
Ë(((REGË& (1L << (POS))Ë=0x00)

	)

74 
	#ã°Bô
(
REG
,
POS
Ë((REGË& (1L << (POS)))

	)

76 
	#˛rBô
(
x
,
y
Ë(xË&~(1L << (y))

	)

77 
	#£tBô
(
x
,
y
Ë(xË|(1L << (y))

	)

80 
	#ªadb
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

81 
	#ªadw
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

82 
	#ªadl
(
addr
Ë*((vﬁ©ûê*)◊ddr))

	)

84 
	#wrôeb
(
addr
, 
vÆ
Ë*((vﬁ©ûê*)◊ddr)Ë(
u8
)(vÆ)

	)

85 
	#wrôew
(
addr
, 
vÆ
Ë*((vﬁ©ûê*)◊ddr)Ë(
u16
)(vÆ)

	)

86 
	#wrôñ
(
addr
, 
vÆ
Ë*((vﬁ©ûê*)◊ddr)Ë(
u32
)(vÆ)

	)

88 
	#ALIGN_4BYTE
(
size
Ë((size+3)&0xfffffffc)

	)

92 #i‚de‡
MIN


93 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

96 #i‚de‡
MAX


97 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

101 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºay)/◊ºay[0]))

	)

104 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

105 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

107 
	#SFR
(
s‰
, 
°¨t
, 
Àn
, 
d©
) \

108 (
s‰
 = (s‰ & ~((~(0xfffffff‡<< (
Àn
))Ë<< (
°¨t
))) | \

109 (((
d©
Ë& (~(0xfffffff‡<< (
Àn
)))Ë<< (
°¨t
)))

	)

112 #ifde‡
off£tof


113 #unde‡
off£tof


116 #ifde‡
c⁄èöî_of


117 #unde‡
c⁄èöî_of


120 
	#off£tof
(
ty≥
, 
memb
) \

121 (()(&((
ty≥
 *)0)->
memb
))

	)

123 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
memb
) \

124 ((
ty≥
 *)((*)(
±r
Ë- 
	`off£tof
—y≥, 
memb
)))

	)

126 
	~"gíîic/î∫o-ba£.h
"

127 
	~"°rög.h
"

128 
	~"°rögs.h
"

129 
	~"sy°em/mÆloc.h
"

132 
dñay
();

134 
dñay_us
();

	@include_lib/system/generic/version.h

1 #i‚de‡
VERSION_H


2 
	#VERSION_H


	)

4 
	~"ty≥def.h
"

7 (*
	tvîsi⁄_t
)();

12 
	#VERSION
(
maj‹
, 
mö‹
Ë(((maj‹)<<8Ë| (mö‹))

	)

14 
	#MAJOR
(
v
Ë((vË>> 16)

	)

15 
	#MINOR
(
v
Ë(((vË>> 8Ë& 0xff)

	)

17 
	#vîsi⁄_m©ch
(
moduÀ_a
, 
moduÀ_b
) \

19 
moduÀ_a
##
	`_vîsi⁄
(); \

20 
moduÀ_b
##
	`_vîsi⁄
(); \

21 
vîsi⁄_a
 = 
moduÀ_a
##
	`_vîsi⁄
(0); \

22 
vîsi⁄_b
 = 
moduÀ_b
##
	`_vîsi⁄
(0); \

23 
	`MAJOR
(
vîsi⁄_a
Ë=MAJOR(
vîsi⁄_b
);\

24 
	}
})

	)

27 
	#__MODULE_VERSION_EXPORT
(
moduÀ
, 
vîsi⁄
) \

28 
moduÀ
##
	`_vîsi⁄
(
¥t
) \

30 i‡(
¥t
) { \

31 
	`log_i
(#moduÀ": %d.%d.%d buûdát: %s\n", (
vîsi⁄
)>>16, \

32 ((
vîsi⁄
Ë>> 8Ë& 0xff, (vîsi⁄Ë& 0xff, 
__DATE__
); \

34  
vîsi⁄
; \

36 c⁄° 
vîsi⁄_t
 
__vîsi⁄_
##
moduÀ
 \

37 
	`__©åibuã__
((
	`£˘i⁄
(".lib_vîsi⁄"),
u£d
)Ë
moduÀ
##
_vîsi⁄


	)

40 
	#_MODULE_VERSION_EXPORT
(
moduÀ
, 
vîsi⁄
) \

41 
	`__MODULE_VERSION_EXPORT
(
moduÀ
, 
vîsi⁄
)

	)

44 
	#__MODULE_DEPEND_BEGIN
(
moduÀ
) \

45 
moduÀ
##
	`_vîsi⁄_check
() \

47 

	)

49 
	#_MODULE_DEPEND_BEGIN
(
moduÀ
) \

50 
	`__MODULE_DEPEND_BEGIN
(
moduÀ
)

	)

53 
	#__VERSION_CHECK
(
moduÀ
, 
vîsi⁄
) \

55 
moduÀ
##
	`_vîsi⁄
(
¥t
); \

56 
v
 = 
moduÀ
##
	`_vîsi⁄
(0); \

57 i‡(
	`MAJOR
(
vîsi⁄
Ë!MAJOR(
v
Ë|| 
	`MINOR
(version) > MINOR(v)) { \

58 
	`log_i
("=======versionÇot match=======\n"); \

59 
moduÀ
##
	`_vîsi⁄
(1); \

60 
	`log_i
("==================================\n"); \

63 } 0)

	)

72 
	#MODULE_VERSION_EXPORT
(
moduÀ
, 
vîsi⁄
) \

73 
	`__MODULE_VERSION_EXPORT
(
moduÀ
, 
vîsi⁄
)

	)

76 
	#MODULE_DEPEND_BEGIN
() \

77 
	`_MODULE_DEPEND_BEGIN
(
THIS_MODULE
)

	)

79 
	#MODULE_DEPEND
(
moduÀ_d
, 
vîsi⁄
) \

80 
	`__VERSION_CHECK
(
moduÀ_d
, 
vîsi⁄
)

	)

82 
	#MODULE_DEPEND_END
() \

84 }

	)

87 
	#VERSION_CHECK
(
moduÀ
, 
vîsi⁄
) \

88 
	`__VERSION_CHECK
(
moduÀ
, 
vîsi⁄
)

	)

92 
	#lﬂd_moduÀ
(
moduÀ
) \

94 
ªt
; \

95 
moduÀ
##
	`_vîsi⁄_check
(); \

96 
ªt
 = 
moduÀ
##
	`_vîsi⁄_check
();\

97 
ªt
; \

98 })

	)

100 
vîsi⁄_t
 
lib_vîsi⁄_begö
[], 
lib_vîsi⁄_íd
[];

102 
	#lib_vîsi⁄_check
() \

104 
vîsi⁄_t
 *
vîsi⁄
; \

105 
	`log_i
("=========version check===========\n"); \

106 
vîsi⁄
 = 
lib_vîsi⁄_begö
; vîsi⁄ < 
lib_vîsi⁄_íd
; version++) { \

107 (*
vîsi⁄
)(1); \

109 
	`log_i
("==================================\n\n"); \

110 } 0)

	)

	@include_lib/system/includes.h

1 #i‚de‡
SYS_INCLUDES_H


2 
	#SYS_INCLUDES_H


	)

5 
	~"öô.h
"

6 
	~"evít.h
"

7 
	~"mÆloc.h
"

8 
	~"•ölock.h
"

9 
	~"èsk.h
"

10 
	~"timî.h
"

11 
	~"waô.h
"

12 
	~"≠p_c‹e.h
"

13 
	~"d©aba£.h
"

14 
	~"fs/fs.h
"

15 
	~"powî_m™age.h
"

18 
	~"gíîic/ö˛udes.h
"

19 
	~"devi˚/ö˛udes.h
"

20 
	~"asm/ö˛udes.h
"

21 
	~"devi˚/sdio_ho°_öô.h
"

	@include_lib/system/init.h

1 #i‚de‡
SYS_INIT_H


2 
	#SYS_INIT_H


	)

10 (*
	töôˇŒ_t
)();

12 
	#__öôˇŒ
(
‚
) \

13 c⁄° 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
	`£c
(.
öôˇŒ
Ë
	)
fn

15 
	#óæy_öôˇŒ
(
‚
) \

16 c⁄° 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
	`£c
(.
óæy
.
öôˇŒ
Ë
	)
fn

19 
	#œã_öôˇŒ
(
‚
) \

20 c⁄° 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
	`£c
(.
œã
.
öôˇŒ
Ë
	)
fn

23 
	#∂©f‹m_öôˇŒ
(
‚
) \

24 c⁄° 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
	`£c
(.
∂©f‹m
.
öôˇŒ
Ë
	)
fn

27 
	#moduÀ_öôˇŒ
(
‚
) \

28 c⁄° 
öôˇŒ_t
 
__öôˇŒ_
##
‚
 
	`£c
(.
moduÀ
.
öôˇŒ
Ë
	)
fn

33 
	#__do_öôˇŒ
(
¥efix
) \

35 
öôˇŒ_t
 *
öô
; \

36 
öôˇŒ_t
 
¥efix
##
_begö
[],Öªfix##
_íd
[]; \

37 
öô
=
¥efix
##
_begö
; inô<¥efix##
_íd
; init++) { \

38 (*
öô
)(); \

40 
	}

	`}whûe
(0)

	)

	@include_lib/system/malloc.h

1 #i‚de‡
_MEM_HEAP_H_


2 
	#_MEM_HEAP_H_


	)

4 #ifde‡
__˝lu•lus


8 *
mÆloc
(
size
);

9 *
zÆloc
(
size
);

10 *
ˇŒoc
(
cou¡
, 
size
);

11 *
ªÆloc
(*
rmem
, 
√wsize
);

12 
‰ì
(*
mem
);

15 *
kmÆloc
(
size
, 
Êags
);

16 *
vmÆloc
(
size
);

17 
v‰ì
(*
addr
);

18 *
kzÆloc
(
Àn
, 
a
);

19 
k‰ì
(*
p
);

21 
mÆloc_°©s
();

23 
mÆloc_dump
();

26 #ifde‡
__˝lu•lus


	@include_lib/system/mem_leak_test.h

1 #i‚de‡
__MEM_LEAK_TEST_H__


2 
	#__MEM_LEAK_TEST_H__


	)

4 *
_vªÆloc_dbg
(*
pv
, 
sz
, c⁄° *
func
, 
löe
);

5 *
_vmÆloc_dbg
(
sz
, c⁄° *
func
, 
löe
);

6 *
_vˇŒoc_dbg
(
n
, 
sz
, c⁄° *
func
, 
löe
);

7 
_v‰ì_dbg
(*
pbuf
);

9 
	#mÆloc
(
sz
Ë
	`_vmÆloc_dbg
((sz), 
__FUNCTION__
, 
__LINE__
)

	)

10 
	#ˇŒoc
(
n
, 
sz
Ë
	`_vˇŒoc_dbg
(“), (sz), 
__FUNCTION__
, 
__LINE__
)

	)

11 
	#‰ì
(
pbuf
Ë
	`_v‰ì_dbg
’buf)

	)

12 
	#k‰ì
(
pbuf
Ë
	`_v‰ì_dbg
’buf)

	)

13 
	#v‰ì
(
pbuf
Ë
	`_v‰ì_dbg
’buf)

	)

14 
	#ªÆloc
(
pv
, 
sz
Ë
	`_vªÆloc_dbg
’v, (sz), 
__FUNCTION__
, 
__LINE__
)

	)

15 
	#kmÆloc
(
sz
, 
Êags
Ë
	`_vmÆloc_dbg
((sz), 
__FUNCTION__
, 
__LINE__
)

	)

16 
	#vmÆloc
(
sz
Ë
	`_vmÆloc_dbg
((sz), 
__FUNCTION__
, 
__LINE__
)

	)

17 
	#kzÆloc
(
sz
, 
Êags
Ë
	`_vˇŒoc_dbg
(1, (sz), 
__FUNCTION__
, 
__LINE__
)

	)

18 
	#zÆloc
(
sz
Ë
	`_vˇŒoc_dbg
(1, (sz), 
__FUNCTION__
, 
__LINE__
)

	)

23 
mÆloc_debug_°¨t
();

24 
mÆloc_debug_°›
();

25 
mÆloc_debug_show
();

	@include_lib/system/os/FreeRTOS/FreeRTOS.h

70 #i‚de‡
INC_FREERTOS_H


71 
	#INC_FREERTOS_H


	)

93 #ifde‡
__˝lu•lus


98 
	~"FªeRTOSC⁄fig.h
"

101 
	~"¥ojdefs.h
"

104 
	~"p‹èbÀ.h
"

107 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


108 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

112 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

113 
	~<ªít.h
>

121 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


122 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

125 #i‚de‡
c⁄figMAX_PRIORITIES


126 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

129 #i‚de‡
c⁄figUSE_PREEMPTION


130 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

133 #i‚de‡
c⁄figUSE_IDLE_HOOK


134 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

137 #i‚de‡
c⁄figUSE_TICK_HOOK


138 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

141 #i‚de‡
c⁄figUSE_16_BIT_TICKS


142 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

145 #i‚de‡
c⁄figMAX_PRIORITIES


146 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

149 #i‚de‡
c⁄figUSE_CO_ROUTINES


150 
	#c⁄figUSE_CO_ROUTINES
 0

	)

153 #i‚de‡
INCLUDE_vTaskPri‹ôySë


154 
	#INCLUDE_vTaskPri‹ôySë
 0

	)

157 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


158 
	#INCLUDE_uxTaskPri‹ôyGë
 0

	)

161 #i‚de‡
INCLUDE_vTaskDñëe


162 
	#INCLUDE_vTaskDñëe
 0

	)

165 #i‚de‡
INCLUDE_vTaskSu•íd


166 
	#INCLUDE_vTaskSu•íd
 0

	)

169 #i‚de‡
INCLUDE_vTaskDñayU¡û


170 
	#INCLUDE_vTaskDñayU¡û
 0

	)

173 #i‚de‡
INCLUDE_vTaskDñay


174 
	#INCLUDE_vTaskDñay
 0

	)

177 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


178 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

181 #i‚de‡
INCLUDE_xTaskAb‹tDñay


182 
	#INCLUDE_xTaskAb‹tDñay
 0

	)

185 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


186 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

189 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


190 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

193 #i‚de‡
INCLUDE_xTaskGëH™dÀ


194 
	#INCLUDE_xTaskGëH™dÀ
 0

	)

197 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


198 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

201 #i‚de‡
INCLUDE_eTaskGëSèã


202 
	#INCLUDE_eTaskGëSèã
 0

	)

205 #i‚de‡
INCLUDE_xTaskResumeFromISR


206 
	#INCLUDE_xTaskResumeFromISR
 1

	)

209 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


210 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

213 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


214 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

217 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


218 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

221 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

222 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


223 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

227 #i‚de‡
c⁄figUSE_DAEMON_TASK_STARTUP_HOOK


228 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 0

	)

231 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


232 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

235 #i‚de‡
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS


236 
	#c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 0

	)

239 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


240 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

243 #i‚de‡
c⁄figUSE_MUTEXES


244 
	#c⁄figUSE_MUTEXES
 0

	)

247 #i‚de‡
c⁄figUSE_TIMERS


248 
	#c⁄figUSE_TIMERS
 0

	)

251 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


252 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

255 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


256 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

259 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


260 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

263 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


264 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

267 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


268 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

271 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

272 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


275 #i‚de‡
c⁄figASSERT


276 
	#c⁄figASSERT
–
x
 )

	)

277 
	#c⁄figASSERT_DEFINED
 0

	)

279 
	#c⁄figASSERT_DEFINED
 1

	)

283 #i‡
c⁄figUSE_TIMERS
 == 1

285 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


286 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

289 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


290 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

293 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


294 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

299 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


300 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

303 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


304 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

307 #i‚de‡
p‹tCLEAN_UP_TCB


308 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

311 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


312 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

315 #i‚de‡
p‹tSETUP_TCB


316 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

319 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


320 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

323 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

324 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

325 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

326 
	#pcQueueGëName
–
xQueue
 )

	)

329 #i‚de‡
p‹tPOINTER_SIZE_TYPE


330 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

334 #i‚de‡
åa˚START


337 
	#åa˚START
()

	)

340 #i‚de‡
åa˚END


343 
	#åa˚END
()

	)

346 #i‚de‡
åa˚TASK_SWITCHED_IN


349 
	#åa˚TASK_SWITCHED_IN
()

	)

352 #i‚de‡
åa˚INCREASE_TICK_COUNT


355 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

358 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


360 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

363 #i‚def 
åa˚LOW_POWER_IDLE_END


365 
	#åa˚LOW_POWER_IDLE_END
()

	)

368 #i‚de‡
åa˚TASK_SWITCHED_OUT


371 
	#åa˚TASK_SWITCHED_OUT
()

	)

374 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


380 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

383 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


388 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

391 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


396 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

399 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


404 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

407 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


408 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

413 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


414 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

417 #i‚de‡
åa˚POST_MOVED_TASK_TO_READY_STATE


418 
	#åa˚POST_MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

421 #i‚de‡
åa˚QUEUE_CREATE


422 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

425 #i‚de‡
åa˚QUEUE_CREATE_FAILED


426 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

429 #i‚de‡
åa˚CREATE_MUTEX


430 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

433 #i‚de‡
åa˚CREATE_MUTEX_FAILED


434 
	#åa˚CREATE_MUTEX_FAILED
()

	)

437 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


438 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

441 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


442 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

445 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


446 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

449 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


450 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

453 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


454 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

457 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


458 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

461 #i‚de‡
åa˚QUEUE_SEND


462 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

465 #i‚de‡
åa˚QUEUE_SEND_FAILED


466 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

469 #i‚de‡
åa˚QUEUE_RECEIVE


470 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

473 #i‚de‡
åa˚QUEUE_PEEK


474 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

477 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


478 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

481 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


482 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

485 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


486 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

489 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


490 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

493 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


494 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

497 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


498 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

501 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


502 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

505 #i‚de‡
åa˚QUEUE_DELETE


506 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

509 #i‚de‡
åa˚TASK_CREATE


510 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

513 #i‚de‡
åa˚TASK_CREATE_FAILED


514 
	#åa˚TASK_CREATE_FAILED
()

	)

517 #i‚de‡
åa˚TASK_DELETE


518 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

521 #i‚de‡
åa˚TASK_DELAY_UNTIL


522 
	#åa˚TASK_DELAY_UNTIL
–
x
 )

	)

525 #i‚de‡
åa˚TASK_DELAY


526 
	#åa˚TASK_DELAY
()

	)

529 #i‚de‡
åa˚TASK_PRIORITY_SET


530 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

533 #i‚de‡
åa˚TASK_SUSPEND


534 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

537 #i‚de‡
åa˚TASK_RESUME


538 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

541 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


542 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

545 #i‚de‡
åa˚TASK_INCREMENT_TICK


546 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

549 #i‚de‡
åa˚TIMER_CREATE


550 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

553 #i‚de‡
åa˚TIMER_CREATE_FAILED


554 
	#åa˚TIMER_CREATE_FAILED
()

	)

557 #i‚de‡
åa˚TIMER_COMMAND_SEND


558 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

561 #i‚de‡
åa˚TIMER_EXPIRED


562 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

565 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


566 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

569 #i‚de‡
åa˚MALLOC


570 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

573 #i‚de‡
åa˚FREE


574 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

577 #i‚de‡
åa˚EVENT_GROUP_CREATE


578 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

581 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


582 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

585 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


586 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

589 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


590 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

593 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


594 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

597 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


598 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

601 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


602 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

605 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


606 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

609 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


610 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

613 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


614 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

617 #i‚de‡
åa˚EVENT_GROUP_DELETE


618 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

621 #i‚de‡
åa˚PEND_FUNC_CALL


622 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

625 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


626 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

629 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


630 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

633 #i‚de‡
åa˚TASK_NOTIFY_TAKE_BLOCK


634 
	#åa˚TASK_NOTIFY_TAKE_BLOCK
()

	)

637 #i‚de‡
åa˚TASK_NOTIFY_TAKE


638 
	#åa˚TASK_NOTIFY_TAKE
()

	)

641 #i‚de‡
åa˚TASK_NOTIFY_WAIT_BLOCK


642 
	#åa˚TASK_NOTIFY_WAIT_BLOCK
()

	)

645 #i‚de‡
åa˚TASK_NOTIFY_WAIT


646 
	#åa˚TASK_NOTIFY_WAIT
()

	)

649 #i‚de‡
åa˚TASK_NOTIFY


650 
	#åa˚TASK_NOTIFY
()

	)

653 #i‚de‡
åa˚TASK_NOTIFY_FROM_ISR


654 
	#åa˚TASK_NOTIFY_FROM_ISR
()

	)

657 #i‚de‡
åa˚TASK_NOTIFY_GIVE_FROM_ISR


658 
	#åa˚TASK_NOTIFY_GIVE_FROM_ISR
()

	)

661 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


662 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

665 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

667 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


668 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

671 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


672 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


673 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

679 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


680 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

683 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


684 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

687 #i‚de‡
p‹tPRIVILEGE_BIT


688 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

691 #i‚de‡
p‹tYIELD_WITHIN_API


692 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

695 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


696 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

698 

	)

699 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


700 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

703 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

704 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

707 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


708 
	#c⁄figUSE_TICKLESS_IDLE
 1

	)

711 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


712 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

715 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


716 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

719 #i‚de‡
c⁄figUSE_QUEUE_SETS


720 
	#c⁄figUSE_QUEUE_SETS
 0

	)

723 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


724 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

727 #i‚de‡
c⁄figUSE_TIME_SLICING


728 
	#c⁄figUSE_TIME_SLICING
 1

	)

731 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


732 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

735 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


736 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

739 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


740 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

743 #i‚de‡
c⁄figUSE_TRACE_FACILITY


744 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

747 #i‚de‡
mtCOVERAGE_TEST_MARKER


748 
	#mtCOVERAGE_TEST_MARKER
()

	)

751 #i‚de‡
mtCOVERAGE_TEST_DELAY


752 
	#mtCOVERAGE_TEST_DELAY
()

	)

755 #i‚de‡
p‹tASSERT_IF_IN_ISR


756 
	#p‹tASSERT_IF_IN_ISR
()

	)

759 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


760 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

763 #i‚de‡
c⁄figAPPLICATION_ALLOCATED_HEAP


764 
	#c⁄figAPPLICATION_ALLOCATED_HEAP
 0

	)

767 #i‚de‡
c⁄figUSE_TASK_NOTIFICATIONS


768 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

771 #i‚de‡
p‹tTICK_TYPE_IS_ATOMIC


772 
	#p‹tTICK_TYPE_IS_ATOMIC
 0

	)

775 #i‚de‡
c⁄figSUPPORT_STATIC_ALLOCATION


777 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 0

	)

780 #i‚de‡
c⁄figSUPPORT_DYNAMIC_ALLOCATION


782 
	#c⁄figSUPPORT_DYNAMIC_ALLOCATION
 1

	)

786 #if–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

787 #if–
INCLUDE_vTaskSu•íd
 != 1 )

788 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

792 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =0 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 0 ) )

793 #îr‹ 
c⁄figSUPPORT_STATIC_ALLOCATION
 
™d
 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 
ˇ¬Ÿ
 
bŸh
 
be
 0, 
but
 
ˇn
 both be 1.

796 #if––
c⁄figUSE_RECURSIVE_MUTEXES
 =1 ) && ( 
c⁄figUSE_MUTEXES
 != 1 ) )

797 #îr‹ 
c⁄figUSE_MUTEXES
 
mu°
 
be
 
£t
 
to
 1Åÿ
u£
 
ªcursive
 
muãxes


800 #if–
p‹tTICK_TYPE_IS_ATOMIC
 == 0 )

804 
	#p‹tTICK_TYPE_ENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

805 
	#p‹tTICK_TYPE_EXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

806 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

807 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
––x ) )

	)

811 
	#p‹tTICK_TYPE_ENTER_CRITICAL
()

	)

812 
	#p‹tTICK_TYPE_EXIT_CRITICAL
()

	)

813 
	#p‹tTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

814 
	#p‹tTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR
–
x
 ) ( Ë
	)
x

819 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


820 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

823 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

824 
	#eTaskSèãGë
 
eTaskGëSèã


	)

825 
	#p‹tTickTy≥
 
TickTy≥_t


	)

826 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

827 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

828 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

829 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

830 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

831 
	#xTimeOutTy≥
 
TimeOut_t


	)

832 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

833 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

834 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

835 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

836 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

837 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

838 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

839 
	#pcTaskGëTaskName
 
pcTaskGëName


	)

840 
	#pcTimîGëTimîName
 
pcTimîGëName


	)

841 
	#pcQueueGëQueueName
 
pcQueueGëName


	)

842 
	#vTaskGëTaskInfo
 
vTaskGëInfo


	)

846 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

847 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

848 
	#xLi°Iãm
 
Li°Iãm_t


	)

849 
	#xLi°
 
Li°_t


	)

852 #if–
c⁄figUSE_ALTERNATIVE_API
 != 0 )

853 #îr‹ 
The
 
Æã∫©ive
 
API
 
was
 
dïªˇãd
 
some
 
time
 
ago
, 
™d
 wa†
ªmoved
 
ö
 
FªeRTOS
 
V9
.0 0

860 #i‚de‡
c⁄figUSE_TASK_FPU_SUPPORT


861 
	#c⁄figUSE_TASK_FPU_SUPPORT
 1

	)

874 
	sxSTATIC_LIST_ITEM
 {

875 
TickTy≥_t
 
xDummy1
;

876 *
pvDummy2
[ 4 ];

878 
xSTATIC_LIST_ITEM
 
	tSèticLi°Iãm_t
;

881 
	sxSTATIC_MINI_LIST_ITEM
 {

882 
TickTy≥_t
 
xDummy1
;

883 *
pvDummy2
[ 2 ];

885 
xSTATIC_MINI_LIST_ITEM
 
	tSèticMöiLi°Iãm_t
;

888 
	sxSTATIC_LIST
 {

889 
UBa£Ty≥_t
 
uxDummy1
;

890 *
pvDummy2
;

891 
SèticMöiLi°Iãm_t
 
xDummy3
;

892 } 
	tSèticLi°_t
;

907 
	sxSTATIC_TCB
 {

908 *
pxDummy1
;

909 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

910 
xMPU_SETTINGS
 
xDummy2
;

912 
SèticLi°Iãm_t
 
xDummy3
[ 2 ];

913 
UBa£Ty≥_t
 
uxDummy5
;

914 *
pxDummy6
;

915 
uöt8_t
 
ucDummy7
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

916 #i‡–
p‹tSTACK_GROWTH
 > 0 )

917 *
pxDummy8
;

919 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

920 
UBa£Ty≥_t
 
uxDummy9
;

922 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

923 
UBa£Ty≥_t
 
uxDummy10
[ 2 ];

925 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

926 
UBa£Ty≥_t
 
uxDummy12
[ 2 ];

928 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

929 *
pxDummy14
;

931 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

932 *
pvDummy15
[ 
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 ];

934 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

935 
uöt32_t
 
ulDummy16
;

937 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

938 
_ªít
 
xDummy17
;

940 #i‡–
c⁄figUSE_TASK_NOTIFICATIONS
 == 1 )

941 
uöt32_t
 
ulDummy18
;

942 
uöt8_t
 
ucDummy19
;

944 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

945 
uöt8_t
 
uxDummy20
;

948 } 
	tSèticTask_t
;

964 
	sxSTATIC_QUEUE
 {

965 *
pvDummy1
[ 3 ];

968 *
pvDummy2
;

969 
UBa£Ty≥_t
 
uxDummy2
;

970 } 
u
;

972 
SèticLi°_t
 
xDummy3
[ 2 ];

973 
UBa£Ty≥_t
 
uxDummy4
[ 3 ];

974 
uöt8_t
 
ucDummy5
[ 2 ];

976 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

977 
uöt8_t
 
ucDummy6
;

980 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

981 *
pvDummy7
;

984 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

985 
UBa£Ty≥_t
 
uxDummy8
;

986 
uöt8_t
 
ucDummy9
;

989 } 
	tSèticQueue_t
;

990 
SèticQueue_t
 
	tSèticSem≠h‹e_t
;

1006 
	sxSTATIC_EVENT_GROUP
 {

1007 
TickTy≥_t
 
xDummy1
;

1008 
SèticLi°_t
 
xDummy2
;

1010 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1011 
UBa£Ty≥_t
 
uxDummy3
;

1014 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1015 
uöt8_t
 
ucDummy4
;

1018 } 
	tSèticEvítGroup_t
;

1034 
	sxSTATIC_TIMER
 {

1035 *
pvDummy1
;

1036 
SèticLi°Iãm_t
 
xDummy2
;

1037 
TickTy≥_t
 
xDummy3
;

1038 
UBa£Ty≥_t
 
uxDummy4
;

1039 *
pvDummy5
[ 2 ];

1040 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1041 
UBa£Ty≥_t
 
uxDummy6
;

1044 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 ) )

1045 
uöt8_t
 
ucDummy7
;

1048 } 
	tSèticTimî_t
;

1050 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/FreeRTOSConfig.h

71 #i‚de‡
FREERTOS_CONFIG_H


72 
	#FREERTOS_CONFIG_H


	)

84 
	~"pi32v2/p‹tma¸o.h
"

85 
	#c⁄figUSE_PREEMPTION
 1

	)

86 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

87 
	#c⁄figUSE_IDLE_HOOK
 1

	)

88 
	#c⁄figUSE_TICK_HOOK
 0

	)

89 
	#c⁄figUSE_DAEMON_TASK_STARTUP_HOOK
 1

	)

90 
	#c⁄figTICK_RATE_HZ
 ( 100 )

	)

91 
	#c⁄figMINIMAL_STACK_SIZE
 ( ( Ë512 )

	)

92 
	#c⁄figTOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 30 * 1024 ) )

	)

93 
	#c⁄figMAX_TASK_NAME_LEN
 ( 24 )

	)

94 
	#c⁄figUSE_TRACE_FACILITY
 1

	)

95 
	#c⁄figUSE_16_BIT_TICKS
 0

	)

96 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

97 
	#c⁄figUSE_MUTEXES
 1

	)

98 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 1

	)

99 
	#c⁄figUSE_RECURSIVE_MUTEXES
 1

	)

100 
	#c⁄figQUEUE_REGISTRY_SIZE
 20

	)

101 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 1

	)

102 
	#c⁄figUSE_APPLICATION_TASK_TAG
 1

	)

103 
	#c⁄figUSE_COUNTING_SEMAPHORES
 1

	)

104 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

105 
	#c⁄figUSE_QUEUE_SETS
 0

	)

106 
	#c⁄figUSE_TASK_NOTIFICATIONS
 1

	)

107 
	#c⁄figSUPPORT_STATIC_ALLOCATION
 1

	)

112 
	#c⁄figUSE_TIMERS
 0

	)

113 
	#c⁄figTIMER_TASK_PRIORITY
 ( 
c⁄figMAX_PRIORITIES
 - 1 )

	)

114 
	#c⁄figTIMER_QUEUE_LENGTH
 20

	)

115 
	#c⁄figTIMER_TASK_STACK_DEPTH
 ( 
c⁄figMINIMAL_STACK_SIZE
 * 2 )

	)

117 
	#c⁄figMAX_PRIORITIES
 ( 31 )

	)

120 
ulGëRunTimeCou¡îVÆue
();

121 
vC⁄figuªTimîF‹RunTimeSèts
();

122 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

123 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
(Ë
	`vC⁄figuªTimîF‹RunTimeSèts
()

	)

124 
	#p‹tGET_RUN_TIME_COUNTER_VALUE
(Ë
	`ulGëRunTimeCou¡îVÆue
()

	)

127 
	#c⁄figUSE_CO_ROUTINES
 1

	)

128 
	#c⁄figMAX_CO_ROUTINE_PRIORITIES
 ( 2 )

	)

134 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 1

	)

139 
	#INCLUDE_vTaskPri‹ôySë
 1

	)

140 
	#INCLUDE_uxTaskPri‹ôyGë
 1

	)

141 
	#INCLUDE_vTaskDñëe
 1

	)

142 
	#INCLUDE_vTaskCÀ™UpResour˚s
 0

	)

143 
	#INCLUDE_vTaskSu•íd
 1

	)

144 
	#INCLUDE_vTaskDñayU¡û
 1

	)

145 
	#INCLUDE_vTaskDñay
 1

	)

146 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 1

	)

147 
	#INCLUDE_xTaskGëScheduÀrSèã
 1

	)

148 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 1

	)

149 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 1

	)

150 
	#INCLUDE_xTaskGëH™dÀ
 1

	)

151 
	#INCLUDE_eTaskGëSèã
 1

	)

152 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 1

	)

153 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

154 
	#INCLUDE_xTaskAb‹tDñay
 1

	)

158 
	~"¥ötf.h
"

159 
ölöe
 
	$vAs£πCÆÀd
(*
°r
, 
ulLöe
, c⁄° *c⁄° 
pcFûeName
)

170 
	`¥ötf
("%†%luáà˝u%d %†\n", 
pcFûeName
, 
ulLöe
, 
OS_CPU_ID
, 
°r
) ;

173 
	}
}

174 
	#c⁄figASSERT
–
x
 ) if––x ) =0 ) 
	`vAs£πCÆÀd
(#x, 
__LINE__
, 
__FILE__
 )

	)

177 
	#TRACE_ENTER_CRITICAL_SECTION
(Ë
	`p‹tENTER_CRITICAL
()

	)

178 
	#TRACE_EXIT_CRITICAL_SECTION
(Ë
	`p‹tEXIT_CRITICAL
()

	)

	@include_lib/system/os/FreeRTOS/StackMacros.h

70 #i‚de‡
STACK_MACROS_H


71 
	#STACK_MACROS_H


	)

89 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

92 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

95 if–
pxCuºítTCB
->
pxT›OfSèck
 <pxCuºítTCB->
pxSèck
 ) \

97 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

99 }

	)

104 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 =1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

107 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

111 if–
pxCuºítTCB
->
pxT›OfSèck
 >pxCuºítTCB->
pxEndOfSèck
 ) \

113 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

115 }

	)

120 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

122 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

124 c⁄° 
uöt32_t
 * c⁄° 
pulSèck
 = ( uöt32_à* ) 
pxCuºítTCB
->
pxSèck
; \

125 c⁄° 
uöt32_t
 
ulCheckVÆue
 = ( uint32_t ) 0xa5a5a5a5; \

127 if––
pulSèck
[ 0 ] !
ulCheckVÆue
 ) || \

128 –
pulSèck
[ 1 ] !
ulCheckVÆue
 ) || \

129 –
pulSèck
[ 2 ] !
ulCheckVÆue
 ) || \

130 –
pulSèck
[ 3 ] !
ulCheckVÆue
 ) ) \

132 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

134 }

	)

139 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

141 
	#èskCHECK_FOR_STACK_OVERFLOW
() \

143 
öt8_t
 *
pcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

144 c⁄° 
uöt8_t
 
ucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

145 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

146 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

147 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

148 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

151 
pcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

154 if–
	`memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

156 
	`vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

158 }

	)

164 #i‚de‡
èskCHECK_FOR_STACK_OVERFLOW


165 
	#èskCHECK_FOR_STACK_OVERFLOW
()

	)

	@include_lib/system/os/FreeRTOS/croutine.h

70 #i‚de‡
CO_ROUTINE_H


71 
	#CO_ROUTINE_H


	)

73 #i‚de‡
INC_FREERTOS_H


77 
	~"li°.h
"

79 #ifde‡
__˝lu•lus


86 *
	tCoRoutöeH™dÀ_t
;

89 (*
¸COROUTINE_CODE
)(
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
);

91 
	sc‹CoRoutöeC⁄åﬁBlock
 {

92 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

93 
Li°Iãm_t
 
xGíîicLi°Iãm
;

94 
Li°Iãm_t
 
xEvítLi°Iãm
;

95 
UBa£Ty≥_t
 
uxPri‹ôy
;

96 
UBa£Ty≥_t
 
uxIndex
;

97 
uöt16_t
 
uxSèã
;

98 } 
	tCRCB_t
;

172 
Ba£Ty≥_t
 
xCoRoutöeCª©e
(
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
);

214 
vCoRoutöeScheduÀ
();

245 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

276 
	#¸END
(Ë}

	)

282 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

283 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

331 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

332 if––
xTicksToDñay
 ) > 0 ) \

334 
	`vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

336 
	`¸SET_STATE0
––
xH™dÀ
 ) );

	)

421 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

423 *–
pxResu…
 ) = 
	`xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

424 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

426 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

427 *
pxResu…
 = 
	`xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

429 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

431 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

432 *
pxResu…
 = 
pdPASS
; \

434 }

	)

513 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

515 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

516 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

518 
	`¸SET_STATE0
––
xH™dÀ
 ) ); \

519 *–
pxResu…
 ) = 
	`xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

521 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

523 
	`¸SET_STATE1
––
xH™dÀ
 ) ); \

524 *–
pxResu…
 ) = 
pdPASS
; \

526 }

	)

622 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

735 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

746 
vCoRoutöeAddToDñayedLi°
(
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
);

755 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
(c⁄° 
Li°_t
 *
pxEvítLi°
);

757 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/deprecated_definitions.h

70 #i‚de‡
DEPRECATED_DEFINITIONS_H


71 
	#DEPRECATED_DEFINITIONS_H


	)

83 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


84 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

85 (
__öãºu±
 
	t__Ár
 *
	tpxISR
)();

88 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


89 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

90 (
__öãºu±
 
	t__Ár
 *
	tpxISR
)();

93 #ifde‡
GCC_MEGA_AVR


94 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

97 #ifde‡
IAR_MEGA_AVR


98 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

101 #ifde‡
MPLAB_PIC24_PORT


102 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

105 #ifde‡
MPLAB_DSPIC_PORT


106 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

109 #ifde‡
MPLAB_PIC18F_PORT


110 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

113 #ifde‡
MPLAB_PIC32MX_PORT


114 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

117 #ifde‡
_FEDPICC


118 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

121 #ifde‡
SDCC_CYGNAL


122 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

125 #ifde‡
GCC_ARM7


126 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

129 #ifde‡
GCC_ARM7_ECLIPSE


130 
	~"p‹tma¸o.h
"

133 #ifde‡
ROWLEY_LPC23xx


134 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

137 #ifde‡
IAR_MSP430


138 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

141 #ifde‡
GCC_MSP430


142 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

145 #ifde‡
ROWLEY_MSP430


146 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

149 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


150 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

153 #ifde‡
SAM7_GCC


154 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

157 #ifde‡
SAM7_IAR


158 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

161 #ifde‡
SAM9XE_IAR


162 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

165 #ifde‡
LPC2000_IAR


166 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

169 #ifde‡
STR71X_IAR


170 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

173 #ifde‡
STR75X_IAR


174 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

177 #ifde‡
STR75X_GCC


178 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

181 #ifde‡
STR91X_IAR


182 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

185 #ifde‡
GCC_H8S


186 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

189 #ifde‡
GCC_AT91FR40008


190 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

193 #ifde‡
RVDS_ARMCM3_LM3S102


194 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

197 #ifde‡
GCC_ARMCM3_LM3S102


198 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

201 #ifde‡
GCC_ARMCM3


202 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

205 #ifde‡
IAR_ARM_CM3


206 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

209 #ifde‡
IAR_ARMCM3_LM


210 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

213 #ifde‡
HCS12_CODE_WARRIOR


214 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

217 #ifde‡
MICROBLAZE_GCC


218 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

221 #ifde‡
TERN_EE


222 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

225 #ifde‡
GCC_HCS12


226 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

229 #ifde‡
GCC_MCF5235


230 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

233 #ifde‡
COLDFIRE_V2_GCC


234 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

237 #ifde‡
COLDFIRE_V2_CODEWARRIOR


238 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

241 #ifde‡
GCC_PPC405


242 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

245 #ifde‡
GCC_PPC440


246 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

249 #ifde‡
_16FX_SOFTUNE


250 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

253 #ifde‡
BCC_INDUSTRIAL_PC_PORT


256 
	~"‰c⁄fig.h
"

257 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

258 (
__öãºu±
 
	t__Ár
 *
	tpxISR
)();

261 #ifde‡
BCC_FLASH_LITE_186_PORT


264 
	~"‰c⁄fig.h
"

265 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

266 (
__öãºu±
 
	t__Ár
 *
	tpxISR
)();

269 #ifde‡
__GNUC__


270 #ifde‡
__AVR32_AVR32A__


271 
	~"p‹tma¸o.h
"

275 #ifde‡
__ICCAVR32__


276 #ifde‡
__CORE__


277 #i‡
__CORE__
 =
__AVR32A__


278 
	~"p‹tma¸o.h
"

283 #ifde‡
__91467D


284 
	~"p‹tma¸o.h
"

287 #ifde‡
__96340


288 
	~"p‹tma¸o.h
"

292 #ifde‡
__IAR_V850ES_Fx3__


293 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

296 #ifde‡
__IAR_V850ES_Jx3__


297 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

300 #ifde‡
__IAR_V850ES_Jx3_L__


301 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

304 #ifde‡
__IAR_V850ES_Jx2__


305 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

308 #ifde‡
__IAR_V850ES_Hx2__


309 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

312 #ifde‡
__IAR_78K0R_Kx3__


313 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

316 #ifde‡
__IAR_78K0R_Kx3L__


317 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

	@include_lib/system/os/FreeRTOS/event_groups.h

70 #i‚de‡
EVENT_GROUPS_H


71 
	#EVENT_GROUPS_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

78 
	~"timîs.h
"

80 #ifde‡
__˝lu•lus


123 *
	tEvítGroupH™dÀ_t
;

133 
TickTy≥_t
 
	tEvítBôs_t
;

187 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

188 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
(Ë
PRIVILEGED_FUNCTION
;

240 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

241 
EvítGroupH™dÀ_t
 
xEvítGroupCª©eSètic
(
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
Ë
PRIVILEGED_FUNCTION
;

336 
EvítBôs_t
 
xEvítGroupWaôBôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

393 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
Ë
PRIVILEGED_FUNCTION
;

448 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

449 
Ba£Ty≥_t
 
xEvítGroupCÀ¨BôsFromISR
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
Ë
PRIVILEGED_FUNCTION
;

451 
	#xEvítGroupCÀ¨BôsFromISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupCÀ¨BôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToCÀ¨, 
NULL
 )

	)

526 
EvítBôs_t
 
xEvítGroupSëBôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
Ë
PRIVILEGED_FUNCTION
;

600 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

601 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

603 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

730 
EvítBôs_t
 
xEvítGroupSync
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

749 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

766 
EvítBôs_t
 
xEvítGroupGëBôsFromISR
(
EvítGroupH™dÀ_t
 
xEvítGroup
Ë
PRIVILEGED_FUNCTION
;

780 
vEvítGroupDñëe
(
EvítGroupH™dÀ_t
 
xEvítGroup
Ë
PRIVILEGED_FUNCTION
;

783 
vEvítGroupSëBôsCÆlback
(*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
Ë
PRIVILEGED_FUNCTION
;

784 
vEvítGroupCÀ¨BôsCÆlback
(*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToCÀ¨
Ë
PRIVILEGED_FUNCTION
;

787 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

788 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
(*
xEvítGroup
Ë
PRIVILEGED_FUNCTION
;

791 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/list.h

98 #i‚de‡
INC_FREERTOS_H


99 #îr‹ 
FªeRTOS
.
h
 
mu°
 
be
 
ö˛uded
 
bef‹e
 
li°
.h

102 #i‚de‡
FREERTOS_LIST_H


103 
	#FREERTOS_LIST_H


	)

133 #i‚de‡
c⁄figLIST_VOLATILE


134 
	#c⁄figLIST_VOLATILE


	)

137 #ifde‡
__˝lu•lus


146 #if–
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 == 0 )

148 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

149 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


	)

150 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE


	)

151 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE


	)

152 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

153 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 )

	)

154 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 )

	)

155 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 )

	)

156 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 )

	)

157 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 )

	)

160 
	#li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue1
;

	)

161 
	#li°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°IãmI¡egrôyVÆue2
;

	)

162 
	#li°FIRST_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue1
;

	)

163 
	#li°SECOND_LIST_INTEGRITY_CHECK_VALUE
 
TickTy≥_t
 
xLi°I¡egrôyVÆue2
;

	)

166 
	#li°SET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

167 
	#li°SET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE
–
pxIãm
 ) (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

168 
	#li°SET_LIST_INTEGRITY_CHECK_1_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue1
 = 
pdINTEGRITY_CHECK_VALUE


	)

169 
	#li°SET_LIST_INTEGRITY_CHECK_2_VALUE
–
pxLi°
 ) (ÖxLi° )->
xLi°I¡egrôyVÆue2
 = 
pdINTEGRITY_CHECK_VALUE


	)

173 
	#li°TEST_LIST_ITEM_INTEGRITY
–
pxIãm
 ) 
	`c⁄figASSERT
–––pxIãm )->
xLi°IãmI¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxIãm )->
xLi°IãmI¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

174 
	#li°TEST_LIST_INTEGRITY
–
pxLi°
 ) 
	`c⁄figASSERT
–––pxLi° )->
xLi°I¡egrôyVÆue1
 =
pdINTEGRITY_CHECK_VALUE
 ) && ( (ÖxLi° )->
xLi°I¡egrôyVÆue2
 =pdINTEGRITY_CHECK_VALUE ) )

	)

181 
	sxLIST_ITEM
 {

182 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


183 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

184 
xLIST_ITEM
 *
c⁄figLIST_VOLATILE
 
	gpxNext
;

185 
xLIST_ITEM
 *
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

186 *
	gpvOw√r
;

187 *
c⁄figLIST_VOLATILE
 
	gpvC⁄èöî
;

188 
	gli°SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE


190 
xLIST_ITEM
 
	tLi°Iãm_t
;

192 
	sxMINI_LIST_ITEM
 {

193 
li°FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE


194 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
	gxIãmVÆue
;

195 
xLIST_ITEM
 *
c⁄figLIST_VOLATILE
 
	gpxNext
;

196 
xLIST_ITEM
 *
c⁄figLIST_VOLATILE
 
	gpxPªvious
;

198 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

203 
	sxLIST
 {

204 
li°FIRST_LIST_INTEGRITY_CHECK_VALUE


205 
c⁄figLIST_VOLATILE
 
UBa£Ty≥_t
 
	guxNumbîOfIãms
;

206 
Li°Iãm_t
 *
c⁄figLIST_VOLATILE
 
	gpxIndex
;

207 
MöiLi°Iãm_t
 
	gxLi°End
;

208 
	gli°SECOND_LIST_INTEGRITY_CHECK_VALUE


209 } 
	tLi°_t
;

218 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

227 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

236 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

246 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

255 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

263 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

271 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

279 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

288 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) )

	)

293 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

315 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

317 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

320 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

321 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

323 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

325 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

326 }

	)

345 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

356 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) ) )

	)

364 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 )

	)

371 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

383 
vLi°Inôüli£
(
Li°_t
 *c⁄° 
pxLi°
Ë
	gPRIVILEGED_FUNCTION
;

394 
vLi°Inôüli£Iãm
(
Li°Iãm_t
 *c⁄° 
pxIãm
Ë
	gPRIVILEGED_FUNCTION
;

407 
vLi°In£π
(
Li°_t
 *c⁄° 
pxLi°
, 
Li°Iãm_t
 *c⁄° 
pxNewLi°Iãm
Ë
	gPRIVILEGED_FUNCTION
;

428 
vLi°In£πEnd
(
Li°_t
 *c⁄° 
pxLi°
, 
Li°Iãm_t
 *c⁄° 
pxNewLi°Iãm
Ë
	gPRIVILEGED_FUNCTION
;

443 
UBa£Ty≥_t
 
uxLi°Remove
(
Li°Iãm_t
 *c⁄° 
pxIãmToRemove
Ë
	gPRIVILEGED_FUNCTION
;

445 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/mpu_prototypes.h

79 #i‚de‡
MPU_PROTOTYPES_H


80 
	#MPU_PROTOTYPES_H


	)

83 
Ba£Ty≥_t
 
MPU_xTaskCª©e
(
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° *c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, *c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 *c⁄° 
pxCª©edTask
);

84 
TaskH™dÀ_t
 
MPU_xTaskCª©eSètic
(
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° *c⁄° 
pcName
, c⁄° 
uöt32_t
 
ulSèckDïth
, *c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
SèckTy≥_t
 *c⁄° 
puxSèckBuf„r
, 
SèticTask_t
 *c⁄° 
pxTaskBuf„r
);

85 
Ba£Ty≥_t
 
MPU_xTaskCª©eRe°ri˘ed
(c⁄° 
TaskP¨amëîs_t
 *c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
);

86 
MPU_vTaskAŒoˇãMPURegi⁄s
(
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 *c⁄° 
pxRegi⁄s
);

87 
MPU_vTaskDñëe
(
TaskH™dÀ_t
 
xTaskToDñëe
);

88 
MPU_vTaskDñay
(c⁄° 
TickTy≥_t
 
xTicksToDñay
);

89 
MPU_vTaskDñayU¡û
(
TickTy≥_t
 *c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
);

90 
Ba£Ty≥_t
 
MPU_xTaskAb‹tDñay
(
TaskH™dÀ_t
 
xTask
);

91 
UBa£Ty≥_t
 
MPU_uxTaskPri‹ôyGë
(
TaskH™dÀ_t
 
xTask
);

92 
eTaskSèã
 
MPU_eTaskGëSèã
(
TaskH™dÀ_t
 
xTask
);

93 
MPU_vTaskGëInfo
(
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
);

94 
MPU_vTaskPri‹ôySë
(
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
);

95 
MPU_vTaskSu•íd
(
TaskH™dÀ_t
 
xTaskToSu•íd
);

96 
MPU_vTaskResume
(
TaskH™dÀ_t
 
xTaskToResume
);

97 
MPU_vTaskSèπScheduÀr
();

98 
MPU_vTaskSu•ídAŒ
();

99 
Ba£Ty≥_t
 
MPU_xTaskResumeAŒ
();

100 
TickTy≥_t
 
MPU_xTaskGëTickCou¡
();

101 
UBa£Ty≥_t
 
MPU_uxTaskGëNumbîOfTasks
();

102 *
MPU_pcTaskGëName
(
TaskH™dÀ_t
 
xTaskToQuîy
);

103 
TaskH™dÀ_t
 
MPU_xTaskGëH™dÀ
(c⁄° *
pcNameToQuîy
);

104 
UBa£Ty≥_t
 
MPU_uxTaskGëSèckHighW©îM¨k
(
TaskH™dÀ_t
 
xTask
);

105 
MPU_vTaskSëAµliˇti⁄TaskTag
(
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
);

106 
TaskHookFun˘i⁄_t
 
MPU_xTaskGëAµliˇti⁄TaskTag
(
TaskH™dÀ_t
 
xTask
);

107 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr
(
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
);

108 *
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr
(
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
);

109 
Ba£Ty≥_t
 
MPU_xTaskCÆlAµliˇti⁄TaskHook
(
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
);

110 
TaskH™dÀ_t
 
MPU_xTaskGëIdÀTaskH™dÀ
();

111 
UBa£Ty≥_t
 
MPU_uxTaskGëSy°emSèã
(
TaskSètus_t
 *c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 *c⁄° 
pulTŸÆRunTime
);

112 
MPU_vTaskLi°
(*
pcWrôeBuf„r
);

113 
MPU_vTaskGëRunTimeSèts
(*
pcWrôeBuf„r
);

114 
Ba£Ty≥_t
 
MPU_xTaskGíîicNŸify
(
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
);

115 
Ba£Ty≥_t
 
MPU_xTaskNŸifyWaô
(
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
);

116 
uöt32_t
 
MPU_ulTaskNŸifyTake
(
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
);

117 
Ba£Ty≥_t
 
MPU_xTaskNŸifySèãCÀ¨
(
TaskH™dÀ_t
 
xTask
);

118 
Ba£Ty≥_t
 
MPU_xTaskIn¸emítTick
();

119 
TaskH™dÀ_t
 
MPU_xTaskGëCuºítTaskH™dÀ
();

120 
MPU_vTaskSëTimeOutSèã
(
TimeOut_t
 *c⁄° 
pxTimeOut
);

121 
Ba£Ty≥_t
 
MPU_xTaskCheckF‹TimeOut
(
TimeOut_t
 *c⁄° 
pxTimeOut
, 
TickTy≥_t
 *c⁄° 
pxTicksToWaô
);

122 
MPU_vTaskMis£dYõld
();

123 
Ba£Ty≥_t
 
MPU_xTaskGëScheduÀrSèã
();

126 
Ba£Ty≥_t
 
MPU_xQueueGíîicSíd
(
QueueH™dÀ_t
 
xQueue
, c⁄° *c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
);

127 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe˚ive
(
QueueH™dÀ_t
 
xQueue
, *c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
);

128 
UBa£Ty≥_t
 
MPU_uxQueueMesßgesWaôög
(c⁄° 
QueueH™dÀ_t
 
xQueue
);

129 
UBa£Ty≥_t
 
MPU_uxQueueS∑˚sAvaûabÀ
(c⁄° 
QueueH™dÀ_t
 
xQueue
);

130 
MPU_vQueueDñëe
(
QueueH™dÀ_t
 
xQueue
);

131 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãx
(c⁄° 
uöt8_t
 
ucQueueTy≥
);

132 
QueueH™dÀ_t
 
MPU_xQueueCª©eMuãxSètic
(c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
);

133 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹e
(c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
);

134 
QueueH™dÀ_t
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic
(c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
);

135 *
MPU_xQueueGëMuãxHﬁdî
(
QueueH™dÀ_t
 
xSem≠h‹e
);

136 
Ba£Ty≥_t
 
MPU_xQueueTakeMuãxRecursive
(
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
);

137 
Ba£Ty≥_t
 
MPU_xQueueGiveMuãxRecursive
(
QueueH™dÀ_t
 
pxMuãx
);

138 
MPU_vQueueAddToRegi°ry
(
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
);

139 
MPU_vQueueUƒegi°îQueue
(
QueueH™dÀ_t
 
xQueue
);

140 c⁄° *
MPU_pcQueueGëName
(
QueueH™dÀ_t
 
xQueue
);

141 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©e
(c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
);

142 
QueueH™dÀ_t
 
MPU_xQueueGíîicCª©eSètic
(c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
);

143 
QueueSëH™dÀ_t
 
MPU_xQueueCª©eSë
(c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
);

144 
Ba£Ty≥_t
 
MPU_xQueueAddToSë
(
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
);

145 
Ba£Ty≥_t
 
MPU_xQueueRemoveFromSë
(
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
);

146 
QueueSëMembîH™dÀ_t
 
MPU_xQueueSñe˘FromSë
(
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
);

147 
Ba£Ty≥_t
 
MPU_xQueueGíîicRe£t
(
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
);

148 
MPU_vQueueSëQueueNumbî
(
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
);

149 
UBa£Ty≥_t
 
MPU_uxQueueGëQueueNumbî
(
QueueH™dÀ_t
 
xQueue
);

150 
uöt8_t
 
MPU_ucQueueGëQueueTy≥
(
QueueH™dÀ_t
 
xQueue
);

153 
TimîH™dÀ_t
 
MPU_xTimîCª©e
(c⁄° *c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, *c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
);

154 
TimîH™dÀ_t
 
MPU_xTimîCª©eSètic
(c⁄° *c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, *c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
, 
SèticTimî_t
 *
pxTimîBuf„r
);

155 *
MPU_pvTimîGëTimîID
(c⁄° 
TimîH™dÀ_t
 
xTimî
);

156 
MPU_vTimîSëTimîID
(
TimîH™dÀ_t
 
xTimî
, *
pvNewID
);

157 
Ba£Ty≥_t
 
MPU_xTimîIsTimîA˘ive
(
TimîH™dÀ_t
 
xTimî
);

158 
TaskH™dÀ_t
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ
();

159 
Ba£Ty≥_t
 
MPU_xTimîPídFun˘i⁄CÆl
(
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
);

160 c⁄° *
MPU_pcTimîGëName
(
TimîH™dÀ_t
 
xTimî
);

161 
TickTy≥_t
 
MPU_xTimîGëPîiod
(
TimîH™dÀ_t
 
xTimî
);

162 
TickTy≥_t
 
MPU_xTimîGëExpúyTime
(
TimîH™dÀ_t
 
xTimî
);

163 
Ba£Ty≥_t
 
MPU_xTimîCª©eTimîTask
();

164 
Ba£Ty≥_t
 
MPU_xTimîGíîicComm™d
(
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à*c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
);

167 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©e
();

168 
EvítGroupH™dÀ_t
 
MPU_xEvítGroupCª©eSètic
(
SèticEvítGroup_t
 *
pxEvítGroupBuf„r
);

169 
EvítBôs_t
 
MPU_xEvítGroupWaôBôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
);

170 
EvítBôs_t
 
MPU_xEvítGroupCÀ¨Bôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
);

171 
EvítBôs_t
 
MPU_xEvítGroupSëBôs
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
);

172 
EvítBôs_t
 
MPU_xEvítGroupSync
(
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
);

173 
MPU_vEvítGroupDñëe
(
EvítGroupH™dÀ_t
 
xEvítGroup
);

174 
UBa£Ty≥_t
 
MPU_uxEvítGroupGëNumbî
(*
xEvítGroup
);

	@include_lib/system/os/FreeRTOS/mpu_wrappers.h

70 #i‚de‡
MPU_WRAPPERS_H


71 
	#MPU_WRAPPERS_H


	)

75 #ifde‡
p‹tUSING_MPU_WRAPPERS


80 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


91 
	#xTaskCª©e
 
MPU_xTaskCª©e


	)

92 
	#xTaskCª©eSètic
 
MPU_xTaskCª©eSètic


	)

93 
	#xTaskCª©eRe°ri˘ed
 
MPU_xTaskCª©eRe°ri˘ed


	)

94 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

95 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

96 
	#vTaskDñay
 
MPU_vTaskDñay


	)

97 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

98 
	#xTaskAb‹tDñay
 
MPU_xTaskAb‹tDñay


	)

99 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

100 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

101 
	#vTaskGëInfo
 
MPU_vTaskGëInfo


	)

102 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

103 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

104 
	#vTaskResume
 
MPU_vTaskResume


	)

105 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

106 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

107 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

108 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

109 
	#pcTaskGëName
 
MPU_pcTaskGëName


	)

110 
	#xTaskGëH™dÀ
 
MPU_xTaskGëH™dÀ


	)

111 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

112 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

113 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

114 
	#vTaskSëThªadLoˇlSt‹agePoöãr
 
MPU_vTaskSëThªadLoˇlSt‹agePoöãr


	)

115 
	#pvTaskGëThªadLoˇlSt‹agePoöãr
 
MPU_pvTaskGëThªadLoˇlSt‹agePoöãr


	)

116 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

117 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

118 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

119 
	#vTaskLi°
 
MPU_vTaskLi°


	)

120 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

121 
	#xTaskGíîicNŸify
 
MPU_xTaskGíîicNŸify


	)

122 
	#xTaskNŸifyWaô
 
MPU_xTaskNŸifyWaô


	)

123 
	#ulTaskNŸifyTake
 
MPU_ulTaskNŸifyTake


	)

124 
	#xTaskNŸifySèãCÀ¨
 
MPU_xTaskNŸifySèãCÀ¨


	)

126 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

127 
	#vTaskSëTimeOutSèã
 
MPU_vTaskSëTimeOutSèã


	)

128 
	#xTaskCheckF‹TimeOut
 
MPU_xTaskCheckF‹TimeOut


	)

129 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

132 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

133 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

134 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

135 
	#uxQueueS∑˚sAvaûabÀ
 
MPU_uxQueueS∑˚sAvaûabÀ


	)

136 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

137 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

138 
	#xQueueCª©eMuãxSètic
 
MPU_xQueueCª©eMuãxSètic


	)

139 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

140 
	#xQueueCª©eCou¡ögSem≠h‹eSètic
 
MPU_xQueueCª©eCou¡ögSem≠h‹eSètic


	)

141 
	#xQueueGëMuãxHﬁdî
 
MPU_xQueueGëMuãxHﬁdî


	)

142 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

143 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

144 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

145 
	#xQueueGíîicCª©eSètic
 
MPU_xQueueGíîicCª©eSètic


	)

146 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

147 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

148 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

149 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

150 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

152 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

153 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

154 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

155 
	#pcQueueGëName
 
MPU_pcQueueGëName


	)

159 
	#xTimîCª©e
 
MPU_xTimîCª©e


	)

160 
	#xTimîCª©eSètic
 
MPU_xTimîCª©eSètic


	)

161 
	#pvTimîGëTimîID
 
MPU_pvTimîGëTimîID


	)

162 
	#vTimîSëTimîID
 
MPU_vTimîSëTimîID


	)

163 
	#xTimîIsTimîA˘ive
 
MPU_xTimîIsTimîA˘ive


	)

164 
	#xTimîGëTimîD´m⁄TaskH™dÀ
 
MPU_xTimîGëTimîD´m⁄TaskH™dÀ


	)

165 
	#xTimîPídFun˘i⁄CÆl
 
MPU_xTimîPídFun˘i⁄CÆl


	)

166 
	#pcTimîGëName
 
MPU_pcTimîGëName


	)

167 
	#xTimîGëPîiod
 
MPU_xTimîGëPîiod


	)

168 
	#xTimîGëExpúyTime
 
MPU_xTimîGëExpúyTime


	)

169 
	#xTimîGíîicComm™d
 
MPU_xTimîGíîicComm™d


	)

172 
	#xEvítGroupCª©e
 
MPU_xEvítGroupCª©e


	)

173 
	#xEvítGroupCª©eSètic
 
MPU_xEvítGroupCª©eSètic


	)

174 
	#xEvítGroupWaôBôs
 
MPU_xEvítGroupWaôBôs


	)

175 
	#xEvítGroupCÀ¨Bôs
 
MPU_xEvítGroupCÀ¨Bôs


	)

176 
	#xEvítGroupSëBôs
 
MPU_xEvítGroupSëBôs


	)

177 
	#xEvítGroupSync
 
MPU_xEvítGroupSync


	)

178 
	#vEvítGroupDñëe
 
MPU_vEvítGroupDñëe


	)

181 
	#PRIVILEGED_FUNCTION


	)

186 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

187 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

193 
	#PRIVILEGED_FUNCTION


	)

194 
	#PRIVILEGED_DATA


	)

195 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@include_lib/system/os/FreeRTOS/pi32v2/portmacro.h

70 #i‚de‡
PORTMACRO_H


71 
	#PORTMACRO_H


	)

72 
	~"asm/˝u.h
"

73 
	~<°döt.h
>

78 
	#p‹tCHAR
 

	)

79 
	#p‹tFLOAT
 

	)

80 
	#p‹tDOUBLE
 

	)

81 
	#p‹tLONG
 

	)

82 
	#p‹tSHORT
 

	)

83 
	#p‹tSTACK_TYPE
 

	)

84 
	#p‹tBASE_TYPE
 

	)

85 
	#p‹tPOINTER_SIZE_TYPE
 
size_t


	)

87 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

88 
	tBa£Ty≥_t
;

89 
	tUBa£Ty≥_t
;

92 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

93 
uöt16_t
 
	tTickTy≥_t
;

94 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

101 
	#p‹tTICK_TYPE_IS_ATOMIC
 1

	)

105 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

106 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

107 
	#p‹tINLINE
 
__ölöe


	)

109 #i‡
deföed
–
__x86_64__
Ë|| deföed–
_M_X64
 )

110 
	#p‹tBYTE_ALIGNMENT
 8

	)

112 
	#p‹tBYTE_ALIGNMENT
 4

	)

114 
vP‹tYõld
() ;

115 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

116 
	#OS_CPU_ID
 
	`cuºít_˝u_id
()

	)

117 
cuºít_˝u_id
() ;

118 
	#OS_CPU_NUM
 
CPU_CORE_NUM


	)

122 
	#p‹tYIELD_FROM_ISR
–
x
 )  
	)
x

123 
	#p‹tEND_SWITCHING_ISR
–
x
 ) 
	`p‹tYIELD_FROM_ISR
––x ) )

	)

125 
vP‹tClo£Ru¬ögThªad
(*
pvTaskToDñëe
, vﬁ©ûê
Ba£Ty≥_t
 *
pxPídYõld
);

127 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 )

128 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxPídYõld
 )

129 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`CPU_CRITICAL_ENTER
()

	)

130 
	#p‹tENABLE_INTERRUPTS
(Ë
	`CPU_CRITICAL_EXIT
()

	)

134 
vP‹tE¡îCrôiˇl
();

135 
vP‹tExôCrôiˇl
();

139 
	#pvP‹tMÆloc
 
mÆloc


	)

140 
	#vP‹tFªe
 
‰ì


	)

188 
	#p‹tENTER_CRITICAL
(Ë
	`CPU_CRITICAL_ENTER
()

189 
	#p‹tEXIT_CRITICAL
(Ë
	`CPU_CRITICAL_EXIT
()

190 

	)

192 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


193 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 1

	)

196 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

199 #if–
c⁄figMAX_PRIORITIES
 > 32 )

200 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

204 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

205 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) \

207 –
uxRódyPri‹ôõs
 ) &~–1UL << ( 
uxPri‹ôy
 ) ); \

208 } 0)

	)

214 #ifde‡
__GNUC__


215 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) \

216 
uxT›Pri‹ôy
 = 31- 
	`__buûtö_pi32v2_˛z
(
uxRódyPri‹ôõs
)

	)

220 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) 
	`_BôSˇnRevî£
––
DWORD
 * ) &–uxT›Pri‹ôy ), ( uxRódyPri‹ôõ†Ë)

	)

225 #i‚de‡
__GNUC__


226 
__¥agma
(
w¨nög
(
dißbÀ
: 4211))

231 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

232 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

234 
	#p‹tINTERRUPT_YIELD
 ( 0UL )

	)

235 
	#p‹tINTERRUPT_TICK
 ( 1UL )

	)

242 
vP‹tGíî©eSimuœãdI¡îru±
(
uöt32_t
 
ulI¡îru±Numbî
);

253 
vP‹tSëI¡îru±H™dÀr
(
uöt32_t
 
ulI¡îru±Numbî
, 
	$uöt32_t
 (*
pvH™dÀr
)());

	@include_lib/system/os/FreeRTOS/portable.h

74 #i‚de‡
PORTABLE_H


75 
	#PORTABLE_H


	)

87 
	~"dïªˇãd_deföôi⁄s.h
"

93 #i‚de‡
p‹tENTER_CRITICAL


94 
	~"p‹tma¸o.h
"

97 #i‡
p‹tBYTE_ALIGNMENT
 == 32

98 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x001‡)

	)

101 #i‡
p‹tBYTE_ALIGNMENT
 == 16

102 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x000‡)

	)

105 #i‡
p‹tBYTE_ALIGNMENT
 == 8

106 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

109 #i‡
p‹tBYTE_ALIGNMENT
 == 4

110 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

113 #i‡
p‹tBYTE_ALIGNMENT
 == 2

114 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

117 #i‡
p‹tBYTE_ALIGNMENT
 == 1

118 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

121 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


125 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


126 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

129 #ifde‡
__˝lu•lus


133 
	~"mpu_wøµîs.h
"

141 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

142 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
(SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
Ë
PRIVILEGED_FUNCTION
;

144 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
(
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
Ë
PRIVILEGED_FUNCTION
;

148 
	sHópRegi⁄
 {

149 
uöt8_t
 *
pucSèπAddªss
;

150 
size_t
 
xSizeInByãs
;

151 } 
	tHópRegi⁄_t
;

164 
	`vP‹tDeföeHópRegi⁄s
(c⁄° 
HópRegi⁄_t
 *c⁄° 
pxHópRegi⁄s
Ë
PRIVILEGED_FUNCTION
;

170 *
	`pvP‹tMÆloc
(
size_t
 
xSize
Ë
PRIVILEGED_FUNCTION
;

171 
	`vP‹tFªe
(*
pv
Ë
PRIVILEGED_FUNCTION
;

172 
	`vP‹tInôüli£Blocks
(Ë
PRIVILEGED_FUNCTION
;

173 
size_t
 
	`xP‹tGëFªeHópSize
(Ë
PRIVILEGED_FUNCTION
;

174 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
(Ë
PRIVILEGED_FUNCTION
;

180 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
(Ë
PRIVILEGED_FUNCTION
;

187 
	`vP‹tEndScheduÀr
(Ë
PRIVILEGED_FUNCTION
;

196 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

197 
xMEMORY_REGION
;

198 
	`vP‹tSt‹eTaskMPUSëtögs
(
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 *c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt32_t
 
ulSèckDïth
Ë
PRIVILEGED_FUNCTION
;

201 #ifde‡
__˝lu•lus


202 
	}
}

	@include_lib/system/os/FreeRTOS/projdefs.h

70 #i‚de‡
PROJDEFS_H


71 
	#PROJDEFS_H


	)

77 (*
	tTaskFun˘i⁄_t
)(*);

82 #i‚de‡
pdMS_TO_TICKS


83 
	#pdMS_TO_TICKS
–
xTimeInMs
 ) ( ( 
TickTy≥_t
 ) ( ( ( TickTy≥_àË–xTimeInM†Ë* ( TickTy≥_àË
c⁄figTICK_RATE_HZ
 ) / ( TickTy≥_àË1000 ) )

	)

86 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

87 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

89 
	#pdPASS
 ( 
pdTRUE
 )

	)

90 
	#pdFAIL
 ( 
pdFALSE
 )

	)

91 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

92 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

95 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

96 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

97 
	#îrQUEUE_YIELD
 ( -5 )

	)

100 #i‚de‡
c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES


101 
	#c⁄figUSE_LIST_DATA_INTEGRITY_CHECK_BYTES
 0

	)

104 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

105 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a

	)

107 
	#pdINTEGRITY_CHECK_VALUE
 0x5a5a5a5aUL

	)

112 
	#pdFREERTOS_ERRNO_NONE
 0

	)

113 
	#pdFREERTOS_ERRNO_ENOENT
 2

	)

114 
	#pdFREERTOS_ERRNO_EINTR
 4

	)

115 
	#pdFREERTOS_ERRNO_EIO
 5

	)

116 
	#pdFREERTOS_ERRNO_ENXIO
 6

	)

117 
	#pdFREERTOS_ERRNO_EBADF
 9

	)

118 
	#pdFREERTOS_ERRNO_EAGAIN
 11

	)

119 
	#pdFREERTOS_ERRNO_EWOULDBLOCK
 11

	)

120 
	#pdFREERTOS_ERRNO_ENOMEM
 12

	)

121 
	#pdFREERTOS_ERRNO_EACCES
 13

	)

122 
	#pdFREERTOS_ERRNO_EFAULT
 14

	)

123 
	#pdFREERTOS_ERRNO_EBUSY
 16

	)

124 
	#pdFREERTOS_ERRNO_EEXIST
 17

	)

125 
	#pdFREERTOS_ERRNO_EXDEV
 18

	)

126 
	#pdFREERTOS_ERRNO_ENODEV
 19

	)

127 
	#pdFREERTOS_ERRNO_ENOTDIR
 20

	)

128 
	#pdFREERTOS_ERRNO_EISDIR
 21

	)

129 
	#pdFREERTOS_ERRNO_EINVAL
 22

	)

130 
	#pdFREERTOS_ERRNO_ENOSPC
 28

	)

131 
	#pdFREERTOS_ERRNO_ESPIPE
 29

	)

132 
	#pdFREERTOS_ERRNO_EROFS
 30

	)

133 
	#pdFREERTOS_ERRNO_EUNATCH
 42

	)

134 
	#pdFREERTOS_ERRNO_EBADE
 50

	)

135 
	#pdFREERTOS_ERRNO_EFTYPE
 79

	)

136 
	#pdFREERTOS_ERRNO_ENMFILE
 89

	)

137 
	#pdFREERTOS_ERRNO_ENOTEMPTY
 90

	)

138 
	#pdFREERTOS_ERRNO_ENAMETOOLONG
 91

	)

139 
	#pdFREERTOS_ERRNO_EOPNOTSUPP
 95

	)

140 
	#pdFREERTOS_ERRNO_ENOBUFS
 105

	)

141 
	#pdFREERTOS_ERRNO_ENOPROTOOPT
 109

	)

142 
	#pdFREERTOS_ERRNO_EADDRINUSE
 112

	)

143 
	#pdFREERTOS_ERRNO_ETIMEDOUT
 116

	)

144 
	#pdFREERTOS_ERRNO_EINPROGRESS
 119

	)

145 
	#pdFREERTOS_ERRNO_EALREADY
 120

	)

146 
	#pdFREERTOS_ERRNO_EADDRNOTAVAIL
 125

	)

147 
	#pdFREERTOS_ERRNO_EISCONN
 127

	)

148 
	#pdFREERTOS_ERRNO_ENOTCONN
 128

	)

149 
	#pdFREERTOS_ERRNO_ENOMEDIUM
 135

	)

150 
	#pdFREERTOS_ERRNO_EILSEQ
 138

	)

151 
	#pdFREERTOS_ERRNO_ECANCELED
 140

	)

155 
	#pdFREERTOS_LITTLE_ENDIAN
 0

	)

156 
	#pdFREERTOS_BIG_ENDIAN
 1

	)

	@include_lib/system/os/FreeRTOS/queue.h

71 #i‚de‡
QUEUE_H


72 
	#QUEUE_H


	)

74 #i‚de‡
INC_FREERTOS_H


75 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

78 #ifde‡
__˝lu•lus


88 *
	tQueueH™dÀ_t
;

95 *
	tQueueSëH™dÀ_t
;

102 *
	tQueueSëMembîH™dÀ_t
;

105 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

106 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

107 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

110 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

111 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

112 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

113 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

114 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

115 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 5U )

	)

185 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

186 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
––uxQueueLígth ), ( uxIãmSizê), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

271 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

272 
	#xQueueCª©eSètic
–
uxQueueLígth
, 
uxIãmSize
, 
pucQueueSt‹age
, 
pxQueueBuf„r
 ) 
	`xQueueGíîicCª©eSètic
––uxQueueLígth ), ( uxIãmSizê), (ÖucQueueSt‹agê), (ÖxQueueBuf„∏), ( 
queueQUEUE_TYPE_BASE
 ) )

	)

355 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

437 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

521 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

604 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

692 
Ba£Ty≥_t
 
xQueueGíîicSíd
(
QueueH™dÀ_t
 
xQueue
, c⁄° *c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
Ë
PRIVILEGED_FUNCTION
;

788 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

821 
Ba£Ty≥_t
 
xQueuePìkFromISR
(
QueueH™dÀ_t
 
xQueue
, *c⁄° 
pvBuf„r
Ë
PRIVILEGED_FUNCTION
;

914 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1013 
Ba£Ty≥_t
 
xQueueGíîicRe˚ive
(
QueueH™dÀ_t
 
xQueue
, *c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
Ë
PRIVILEGED_FUNCTION
;

1028 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
(c⁄° 
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1045 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
(c⁄° 
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1059 
vQueueDñëe
(
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1129 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1200 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1287 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1361 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1440 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
(
QueueH™dÀ_t
 
xQueue
, c⁄° *c⁄° 
pvIãmToQueue
, Ba£Ty≥_à*c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
Ë
PRIVILEGED_FUNCTION
;

1441 
Ba£Ty≥_t
 
xQueueGiveFromISR
(
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à*c⁄° 
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

1530 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
(
QueueH™dÀ_t
 
xQueue
, *c⁄° 
pvBuf„r
, Ba£Ty≥_à*c⁄° 
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

1536 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
(c⁄° 
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1537 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
(c⁄° 
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1538 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
(c⁄° 
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1549 
Ba£Ty≥_t
 
xQueueCRSídFromISR
(
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
);

1550 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
(
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
);

1551 
Ba£Ty≥_t
 
xQueueCRSíd
(
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
);

1552 
Ba£Ty≥_t
 
xQueueCRRe˚ive
(
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
);

1559 
QueueH™dÀ_t
 
xQueueCª©eMuãx
(c⁄° 
uöt8_t
 
ucQueueTy≥
Ë
PRIVILEGED_FUNCTION
;

1560 
QueueH™dÀ_t
 
xQueueCª©eMuãxSètic
(c⁄° 
uöt8_t
 
ucQueueTy≥
, 
SèticQueue_t
 *
pxSèticQueue
Ë
PRIVILEGED_FUNCTION
;

1561 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
(c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
Ë
PRIVILEGED_FUNCTION
;

1562 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹eSètic
(c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
, 
SèticQueue_t
 *
pxSèticQueue
Ë
PRIVILEGED_FUNCTION
;

1563 *
xQueueGëMuãxHﬁdî
(
QueueH™dÀ_t
 
xSem≠h‹e
Ë
PRIVILEGED_FUNCTION
;

1569 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
(
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

1570 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
(
QueueH™dÀ_t
 
pxMuãx
Ë
PRIVILEGED_FUNCTION
;

1576 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1600 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1601 
vQueueAddToRegi°ry
(
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
Ë
PRIVILEGED_FUNCTION
;

1614 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1615 
vQueueUƒegi°îQueue
(
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1629 #if–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1630 c⁄° *
pcQueueGëName
(
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1638 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1639 
QueueH™dÀ_t
 
xQueueGíîicCª©e
(c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
Ë
PRIVILEGED_FUNCTION
;

1647 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1648 
QueueH™dÀ_t
 
xQueueGíîicCª©eSètic
(c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 *
pucQueueSt‹age
, 
SèticQueue_t
 *
pxSèticQueue
, c⁄° uöt8_à
ucQueueTy≥
Ë
PRIVILEGED_FUNCTION
;

1699 
QueueSëH™dÀ_t
 
xQueueCª©eSë
(c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
Ë
PRIVILEGED_FUNCTION
;

1723 
Ba£Ty≥_t
 
xQueueAddToSë
(
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
Ë
PRIVILEGED_FUNCTION
;

1742 
Ba£Ty≥_t
 
xQueueRemoveFromSë
(
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
Ë
PRIVILEGED_FUNCTION
;

1778 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
(
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

1783 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
(
QueueSëH™dÀ_t
 
xQueueSë
Ë
PRIVILEGED_FUNCTION
;

1786 
vQueueWaôF‹MesßgeRe°ri˘ed
(
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
Ë
PRIVILEGED_FUNCTION
;

1787 
Ba£Ty≥_t
 
xQueueGíîicRe£t
(
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
Ë
PRIVILEGED_FUNCTION
;

1788 
vQueueSëQueueNumbî
(
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
Ë
PRIVILEGED_FUNCTION
;

1789 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
(
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1790 
uöt8_t
 
ucQueueGëQueueTy≥
(
QueueH™dÀ_t
 
xQueue
Ë
PRIVILEGED_FUNCTION
;

1792 
UBa£Ty≥_t
 
uxQueueMesßgesSë
(c⁄° 
QueueH™dÀ_t
 
xQueue
, 
˙t
);

1794 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/semphr.h

70 #i‚de‡
SEMAPHORE_H


71 
	#SEMAPHORE_H


	)

73 #i‚de‡
INC_FREERTOS_H


74 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

77 
	~"queue.h
"

79 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

81 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

82 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

83 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

135 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

136 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

138 –
xSem≠h‹e
 ) = 
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

139 if––
xSem≠h‹e
 ) !
NULL
 ) \

141 –Ë
	`xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

143 }

	)

203 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

204 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

262 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

263 
	#xSem≠h‹eCª©eBö¨ySètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueGíîicCª©eSètic
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
NULL
,ÖxSèticSem≠h‹e, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

331 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

424 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

425 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

489 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

573 #if–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

574 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

666 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGiveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

700 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

757 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

758 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

818 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

819 
	#xSem≠h‹eCª©eMuãxSètic
–
pxMuãxBuf„r
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_MUTEX
, (ÖxMuãxBuf„∏Ë)

	)

886 #if––
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

887 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

959 #if––
c⁄figSUPPORT_STATIC_ALLOCATION
 =1 ) && ( 
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 ) )

960 
	#xSem≠h‹eCª©eRecursiveMuãxSètic
–
pxSèticSem≠h‹e
 ) 
	`xQueueCª©eMuãxSètic
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
,ÖxSèticSem≠h‹ê)

	)

1039 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

1040 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

1124 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

1125 
	#xSem≠h‹eCª©eCou¡ögSètic
–
uxMaxCou¡
, 
uxInôülCou¡
, 
pxSem≠h‹eBuf„r
 ) 
	`xQueueCª©eCou¡ögSem≠h‹eSètic
––uxMaxCou¡ ), ( uxInôülCou¡ ), (ÖxSem≠h‹eBuf„∏Ë)

	)

1140 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1155 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

1167 
	#uxSem≠h‹eGëCou¡
–
xSem≠h‹e
 ) 
	`uxQueueMesßgesWaôög
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

1169 
	#uxSem≠h‹eSëCou¡
–
xSem≠h‹e
, 
˙t
) \

1170 
	`uxQueueMesßgesSë
((
QueueH™dÀ_t
)
xSem≠h‹e
, 
˙t
)

	)

	@include_lib/system/os/FreeRTOS/task.h

71 #i‚de‡
INC_TASK_H


72 
	#INC_TASK_H


	)

74 #i‚de‡
INC_FREERTOS_H


78 
	~"li°.h
"

80 #ifde‡
__˝lu•lus


88 
	#tskKERNEL_VERSION_NUMBER
 "V9.0.0"

	)

89 
	#tskKERNEL_VERSION_MAJOR
 9

	)

90 
	#tskKERNEL_VERSION_MINOR
 0

	)

91 
	#tskKERNEL_VERSION_BUILD
 0

	)

103 *
	tTaskH™dÀ_t
;

109 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)(*);

113 
eRu¬ög
 = 0,

114 
eRódy
,

115 
eBlocked
,

116 
eSu•íded
,

117 
eDñëed
,

118 
eInvÆid


119 } 
	teTaskSèã
;

123 
eNoA˘i⁄
 = 0,

124 
eSëBôs
,

125 
eIn¸emít
,

126 
eSëVÆueWôhOvîwrôe
,

127 
eSëVÆueWôhoutOvîwrôe


128 } 
	teNŸifyA˘i⁄
;

133 
	sxTIME_OUT
 {

134 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

135 
TickTy≥_t
 
xTimeOnE¡îög
;

136 } 
	tTimeOut_t
;

141 
	sxMEMORY_REGION
 {

142 *
pvBa£Addªss
;

143 
uöt32_t
 
ulLígthInByãs
;

144 
uöt32_t
 
ulP¨amëîs
;

145 } 
	tMem‹yRegi⁄_t
;

150 
	sxTASK_PARAMETERS
 {

151 
TaskFun˘i⁄_t
 
pvTaskCode
;

152 c⁄° *c⁄° 
pcName
;

153 
uöt16_t
 
usSèckDïth
;

154 *
pvP¨amëîs
;

155 
UBa£Ty≥_t
 
uxPri‹ôy
;

156 
SèckTy≥_t
 *
puxSèckBuf„r
;

157 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

158 } 
	tTaskP¨amëîs_t
;

162 
	sxTASK_STATUS
 {

163 
TaskH™dÀ_t
 
xH™dÀ
;

164 c⁄° *
pcTaskName
;

165 
UBa£Ty≥_t
 
xTaskNumbî
;

166 
eTaskSèã
 
eCuºítSèã
;

167 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

168 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

169 
uöt32_t
 
ulRunTimeCou¡î
;

170 
SèckTy≥_t
 *
pxSèckBa£
;

171 
uöt16_t
 
usSèckHighW©îM¨k
;

172 } 
	tTaskSètus_t
;

176 
eAb‹tSÀï
 = 0,

177 
eSènd¨dSÀï
,

178 
eNoTasksWaôögTimeout


179 } 
	teSÀïModeSètus
;

186 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

196 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

210 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

211 
	#èskENTER_CRITICAL_FROM_ISR
(Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
()

	)

225 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

226 
	#èskEXIT_CRITICAL_FROM_ISR
–
x
 ) 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–x )

	)

235 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

245 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

250 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

251 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

252 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

352 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

353 
Ba£Ty≥_t
 
xTaskCª©e
(
TaskFun˘i⁄_t
 
pxTaskCode
,

354 c⁄° *c⁄° 
pcName
,

355 c⁄° 
uöt16_t
 
usSèckDïth
,

356 *c⁄° 
pvP¨amëîs
,

357 
UBa£Ty≥_t
 
uxPri‹ôy
,

358 
TaskH™dÀ_t
 *c⁄° 
pxCª©edTask
Ë
PRIVILEGED_FUNCTION
;

468 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

469 
TaskH™dÀ_t
 
xTaskCª©eSètic
(
TaskFun˘i⁄_t
 
pxTaskCode
,

470 c⁄° *c⁄° 
pcName
,

471 c⁄° 
uöt32_t
 
ulSèckDïth
,

472 *c⁄° 
pvP¨amëîs
,

473 
UBa£Ty≥_t
 
uxPri‹ôy
,

474 
SèckTy≥_t
 *c⁄° 
puxSèckBuf„r
,

475 
SèticTask_t
 *c⁄° 
pxTaskBuf„r
Ë
PRIVILEGED_FUNCTION
;

545 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

546 
Ba£Ty≥_t
 
xTaskCª©eRe°ri˘ed
(c⁄° 
TaskP¨amëîs_t
 *c⁄° 
pxTaskDeföôi⁄
, 
TaskH™dÀ_t
 *
pxCª©edTask
Ë
PRIVILEGED_FUNCTION
;

595 
vTaskAŒoˇãMPURegi⁄s
(
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 *c⁄° 
pxRegi⁄s
Ë
PRIVILEGED_FUNCTION
;

636 
vTaskDñëe
(
TaskH™dÀ_t
 
xTaskToDñëe
Ë
PRIVILEGED_FUNCTION
;

688 
vTaskDñay
(c⁄° 
TickTy≥_t
 
xTicksToDñay
Ë
PRIVILEGED_FUNCTION
;

747 
vTaskDñayU¡û
(
TickTy≥_t
 *c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
Ë
PRIVILEGED_FUNCTION
;

772 
Ba£Ty≥_t
 
xTaskAb‹tDñay
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

819 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

827 
UBa£Ty≥_t
 
uxTaskPri‹ôyGëFromISR
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

845 
eTaskSèã
 
eTaskGëSèã
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

901 
vTaskGëInfo
(
TaskH™dÀ_t
 
xTask
, 
TaskSètus_t
 *
pxTaskSètus
, 
Ba£Ty≥_t
 
xGëFªeSèckS∑˚
, 
eTaskSèã
 
eSèã
Ë
PRIVILEGED_FUNCTION
;

943 
vTaskPri‹ôySë
(
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
Ë
PRIVILEGED_FUNCTION
;

994 
vTaskSu•íd
(
TaskH™dÀ_t
 
xTaskToSu•íd
Ë
PRIVILEGED_FUNCTION
;

1043 
vTaskResume
(
TaskH™dÀ_t
 
xTaskToResume
Ë
PRIVILEGED_FUNCTION
;

1072 
Ba£Ty≥_t
 
xTaskResumeFromISR
(
TaskH™dÀ_t
 
xTaskToResume
Ë
PRIVILEGED_FUNCTION
;

1105 
vTaskSèπScheduÀr
(Ë
PRIVILEGED_FUNCTION
;

1161 
vTaskEndScheduÀr
(Ë
PRIVILEGED_FUNCTION
;

1212 
vTaskSu•ídAŒ
(Ë
PRIVILEGED_FUNCTION
;

1266 
Ba£Ty≥_t
 
xTaskResumeAŒ
(Ë
PRIVILEGED_FUNCTION
;

1281 
TickTy≥_t
 
xTaskGëTickCou¡
(Ë
PRIVILEGED_FUNCTION
;

1297 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
(Ë
PRIVILEGED_FUNCTION
;

1311 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
(Ë
PRIVILEGED_FUNCTION
;

1324 *
pcTaskGëName
(
TaskH™dÀ_t
 
xTaskToQuîy
Ë
PRIVILEGED_FUNCTION
;

1340 
TaskH™dÀ_t
 
xTaskGëH™dÀ
(c⁄° *
pcNameToQuîy
Ë
PRIVILEGED_FUNCTION
;

1361 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

1369 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1370 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1379 
vTaskSëAµliˇti⁄TaskTag
(
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
Ë
PRIVILEGED_FUNCTION
;

1387 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

1391 #if–
c⁄figNUM_THREAD_LOCAL_STORAGE_POINTERS
 > 0 )

1398 
vTaskSëThªadLoˇlSt‹agePoöãr
(
TaskH™dÀ_t
 
xTaskToSë
, 
Ba£Ty≥_t
 
xIndex
, *
pvVÆue
Ë
PRIVILEGED_FUNCTION
;

1399 *
pvTaskGëThªadLoˇlSt‹agePoöãr
(
TaskH™dÀ_t
 
xTaskToQuîy
, 
Ba£Ty≥_t
 
xIndex
Ë
PRIVILEGED_FUNCTION
;

1414 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
(
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
Ë
PRIVILEGED_FUNCTION
;

1423 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
(Ë
PRIVILEGED_FUNCTION
;

1522 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
(
TaskSètus_t
 *c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 *c⁄° 
pulTŸÆRunTime
Ë
PRIVILEGED_FUNCTION
;

1569 
vTaskLi°
(*
pcWrôeBuf„r
Ë
PRIVILEGED_FUNCTION
;

1623 
vTaskGëRunTimeSèts
(*
pcWrôeBuf„r
Ë
PRIVILEGED_FUNCTION
;

1704 
Ba£Ty≥_t
 
xTaskGíîicNŸify
(
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
Ë
PRIVILEGED_FUNCTION
;

1705 
	#xTaskNŸify
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
 )

	)

1706 
	#xTaskNŸifyAndQuîy
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifyVÆue
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifyVÆuêË)

	)

1795 
Ba£Ty≥_t
 
xTaskGíîicNŸifyFromISR
(
TaskH™dÀ_t
 
xTaskToNŸify
, 
uöt32_t
 
ulVÆue
, 
eNŸifyA˘i⁄
 
eA˘i⁄
, uöt32_à*
pulPªviousNŸifiˇti⁄VÆue
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

1796 
	#xTaskNŸifyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

1797 
	#xTaskNŸifyAndQuîyFromISR
–
xTaskToNŸify
, 
ulVÆue
, 
eA˘i⁄
, 
pulPªviousNŸifiˇti⁄VÆue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTaskGíîicNŸifyFromISR
––xTaskToNŸify ), ( ulVÆuê), (ÉA˘i⁄ ), (ÖulPªviousNŸifiˇti⁄VÆuê), (ÖxHighîPri‹ôyTaskWokí ) )

	)

1872 
Ba£Ty≥_t
 
xTaskNŸifyWaô
(
uöt32_t
 
ulBôsToCÀ¨OnE¡ry
, uöt32_à
ulBôsToCÀ¨OnExô
, uöt32_à*
pulNŸifiˇti⁄VÆue
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

1918 
	#xTaskNŸifyGive
–
xTaskToNŸify
 ) 
	`xTaskGíîicNŸify
––xTaskToNŸify ), ( 0 ), 
eIn¸emít
, 
NULL
 )

	)

1973 
vTaskNŸifyGiveFromISR
(
TaskH™dÀ_t
 
xTaskToNŸify
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

2042 
uöt32_t
 
ulTaskNŸifyTake
(
Ba£Ty≥_t
 
xCÀ¨Cou¡OnExô
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

2058 
Ba£Ty≥_t
 
xTaskNŸifySèãCÀ¨
(
TaskH™dÀ_t
 
xTask
);

2079 
Ba£Ty≥_t
 
xTaskIn¸emítTick
(Ë
PRIVILEGED_FUNCTION
;

2112 
vTaskPœ˚OnEvítLi°
(
Li°_t
 *c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

2113 
vTaskPœ˚OnUn‹dîedEvítLi°
(
Li°_t
 *
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

2126 
vTaskPœ˚OnEvítLi°Re°ri˘ed
(
Li°_t
 *c⁄° 
pxEvítLi°
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xWaôIndeföôñy
Ë
PRIVILEGED_FUNCTION
;

2152 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
(c⁄° 
Li°_t
 *c⁄° 
pxEvítLi°
Ë
PRIVILEGED_FUNCTION
;

2153 
Ba£Ty≥_t
 
xTaskRemoveFromUn‹dîedEvítLi°
(
Li°Iãm_t
 *
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
Ë
PRIVILEGED_FUNCTION
;

2163 
xTaskSwôchC⁄ãxt
(Ë
PRIVILEGED_FUNCTION
;

2169 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
(Ë
PRIVILEGED_FUNCTION
;

2174 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
(Ë
PRIVILEGED_FUNCTION
;

2179 
vTaskSëTimeOutSèã
(
TimeOut_t
 *c⁄° 
pxTimeOut
Ë
PRIVILEGED_FUNCTION
;

2185 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
(
TimeOut_t
 *c⁄° 
pxTimeOut
, 
TickTy≥_t
 *c⁄° 
pxTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

2191 
vTaskMis£dYõld
(Ë
PRIVILEGED_FUNCTION
;

2197 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
(Ë
PRIVILEGED_FUNCTION
;

2203 
vTaskPri‹ôyInhîô
(
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
Ë
PRIVILEGED_FUNCTION
;

2209 
Ba£Ty≥_t
 
xTaskPri‹ôyDisöhîô
(
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
Ë
PRIVILEGED_FUNCTION
;

2214 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
(
TaskH™dÀ_t
 
xTask
Ë
PRIVILEGED_FUNCTION
;

2220 
vTaskSëTaskNumbî
(
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
Ë
PRIVILEGED_FUNCTION
;

2230 
vTaskSãpTick
(c⁄° 
TickTy≥_t
 
xTicksToJump
Ë
PRIVILEGED_FUNCTION
;

2246 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
(Ë
PRIVILEGED_FUNCTION
;

2252 *
pvTaskIn¸emítMuãxHñdCou¡
(Ë
PRIVILEGED_FUNCTION
;

2254 
vP‹tSèπFú°Task
() ;

2257 #ifde‡
__˝lu•lus


	@include_lib/system/os/FreeRTOS/timers.h

71 #i‚de‡
TIMERS_H


72 
	#TIMERS_H


	)

74 #i‚de‡
INC_FREERTOS_H


80 
	~"èsk.h
"

83 #ifde‡
__˝lu•lus


96 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

97 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

98 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

99 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

100 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

101 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

102 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

103 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

105 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

106 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

107 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

108 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

109 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

118 *
	tTimîH™dÀ_t
;

123 (*
TimîCÆlbackFun˘i⁄_t
)(
	tTimîH™dÀ_t
 
	txTimî
);

129 (*
PídedFun˘i⁄_t
)(*, 
	tuöt32_t
);

268 #if–
c⁄figSUPPORT_DYNAMIC_ALLOCATION
 == 1 )

269 
TimîH™dÀ_t
 
xTimîCª©e
(c⁄° *c⁄° 
pcTimîName
,

270 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

271 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

272 *c⁄° 
pvTimîID
,

273 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
Ë
PRIVILEGED_FUNCTION
;

398 #if–
c⁄figSUPPORT_STATIC_ALLOCATION
 == 1 )

399 
TimîH™dÀ_t
 
xTimîCª©eSètic
(c⁄° *c⁄° 
pcTimîName
,

400 c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
,

401 c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
,

402 *c⁄° 
pvTimîID
,

403 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
,

404 
SèticTimî_t
 *
pxTimîBuf„r
Ë
PRIVILEGED_FUNCTION
;

427 *
pvTimîGëTimîID
(c⁄° 
TimîH™dÀ_t
 
xTimî
Ë
PRIVILEGED_FUNCTION
;

448 
vTimîSëTimîID
(
TimîH™dÀ_t
 
xTimî
, *
pvNewID
Ë
PRIVILEGED_FUNCTION
;

485 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
(
TimîH™dÀ_t
 
xTimî
Ë
PRIVILEGED_FUNCTION
;

493 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
(Ë
PRIVILEGED_FUNCTION
;

545 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

587 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

667 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

705 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

829 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

915 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

978 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1051 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1137 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1228 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
(
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
Ë
PRIVILEGED_FUNCTION
;

1262 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
(
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

1273 c⁄° *
pcTimîGëName
(
TimîH™dÀ_t
 
xTimî
Ë
PRIVILEGED_FUNCTION
;

1284 
TickTy≥_t
 
xTimîGëPîiod
(
TimîH™dÀ_t
 
xTimî
Ë
PRIVILEGED_FUNCTION
;

1299 
TickTy≥_t
 
xTimîGëExpúyTime
(
TimîH™dÀ_t
 
xTimî
Ë
PRIVILEGED_FUNCTION
;

1305 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
(Ë
PRIVILEGED_FUNCTION
;

1306 
Ba£Ty≥_t
 
xTimîGíîicComm™d
(
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à*c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
Ë
PRIVILEGED_FUNCTION
;

1308 #ifde‡
__˝lu•lus


	@include_lib/system/os/msg_pool.h

18 #i‚de‡
__msg_poﬁ_h


19 
	#__msg_poﬁ_h


	)

20 
	~"ty≥def.h
"

23 
	#MSG_TO_SELF
 0x00

	)

24 
	#MSG_TO_MODULE
 0x01

	)

25 
	#MSG_TO_APP
 0x02

	)

26 
	#MSG_TO_ALL
 0x03

	)

27 
	#MSG_TO_PROCESS
 0x04

	)

28 
	#MSG_TO_CHILD
 0x05

	)

29 
	#MSG_TO_FATHER
 0x06

	)

31 
	#MSG_TYPE_FIFO
 0x00

	)

32 
	#MSG_TYPE_LIFO
 0x01

	)

	@include_lib/system/os/os_api.h

1 #i‚de‡ 
OS_API_H


2 
	#OS_API_H


	)

5 #ifde‡
__˝lu•lus


13 
	~"gíîic/ty≥def.h
"

15 
	~"os/os_˝u.h
"

16 
	~"os/os_îr‹.h
"

17 
	~"os/os_ty≥.h
"

21 
	#Q_MSG
 0x100000

	)

22 
	#Q_EVENT
 0x200000

	)

23 
	#Q_CALLBACK
 0x300000

	)

24 
	#Q_USER
 0x400000

	)

26 
	#OS_DEL_NO_PEND
 0u

	)

27 
	#OS_DEL_ALWAYS
 1u

	)

29 
	#OS_TASK_DEL_REQ
 0x01u

	)

30 
	#OS_TASK_DEL_RES
 0x02u

	)

31 
	#OS_TASK_DEL_OK
 0x03u

	)

34 
	#OS_TASK_SELF
 (*)0x1

	)

35 
	#OS_TASK_FATHER
 (*)0x2

	)

38 
	#OS_MSG_KEY
 1

	)

39 
	#OS_MSG_TOUCH
 2

	)

40 
	#OS_MSG_EVENT
 3

	)

41 
	#OS_MSG_CALLBACK
 4

	)

42 
	#OS_MSG_DEL_REQ
 5

	)

43 
	#OS_MSG_MSG
 6

	)

67 
os_öô
();

68 
os_°¨t
();

69 
os_öô_tick
();

71 
os_èsk_¸óã
((*
èsk
)(*
p_¨g
),

72 *
p_¨g
,

73 
u8
 
¥io
,

74 
u32
 
°ksize
,

75 
qsize
,

76 c⁄° *
«me
);

78 c⁄° *
os_cuºít_èsk
();

80 
os_èsk_exô
();

82 
os_èsk_dñ_ªq
(c⁄° *
«me
);

84 
os_èsk_dñ_ªs
(c⁄° *
«me
);

86 
os_èsk_dñ
(c⁄° *
«me
);

89 
os_time_dly
(
time_tick
);

92 
os_èskq_ac˚±
(, *);

94 
os_èskq_≥nd
(c⁄° *
fmt
, *
¨gv
, 
¨gc
);

96 
os_èsk_≥nd
(c⁄° *
fmt
, *
¨gv
, 
¨gc
);

98 
os_èskq_po°
(c⁄° *
«me
, 
¨gc
, ...);

100 
os_èskq_dñ
(c⁄° *
«me
, 
ty≥
);

102 
os_èskq_po°_ty≥
(c⁄° *
«me
, 
ty≥
, 
¨gc
, *
¨gv
);

104 
èsk_queue_po°_msg
(c⁄° *
«me
, *
d©a
, 
Àn
);

105 
èsk_queue_po°_evít
(c⁄° *
«me
, *
d©a
, 
Àn
);

107 
os_èskq_po°_msg
(c⁄° *
«me
, 
¨gc
, ...);

109 
os_èskq_po°_evít
(c⁄° *
«me
, 
¨gc
, ...);

111 
os_èskq_dñ_ty≥
(c⁄° *
«me
, 
ty≥
);

114 
os_£m_¸óã
(
OS_SEM
 *, );

116 
os_£m_ac˚±
(
OS_SEM
 *);

118 
os_£m_≥nd
(
OS_SEM
 *, 
timeout
);

120 
os_£m_po°
(
OS_SEM
 *);

122 
os_£m_dñ
(
OS_SEM
 *, 
block
);

124 
os_£m_£t
(
OS_SEM
 *, 
u16
 
˙t
);

126 
os_£m_vÆid
(
OS_SEM
 *);

128 
os_£m_quîy
(
OS_SEM
 *);

130 
os_muãx_¸óã
(
OS_MUTEX
 *);

132 
os_muãx_ac˚±
(
OS_MUTEX
 *);

134 
os_muãx_≥nd
(
OS_MUTEX
 *, 
timeout
);

136 
os_muãx_po°
(
OS_MUTEX
 *);

138 
os_muãx_dñ
(
OS_MUTEX
 *, 
block
);

140 
os_muãx_vÆid
(
OS_MUTEX
 *);

152 
os_q_¸óã
(
OS_QUEUE
 *
≥vít
, 
QS
 
size
);

154 
os_q_dñ
(
OS_QUEUE
 *
≥vít
, 
u8
 
›t
);

156 
os_q_Êush
(
OS_QUEUE
 *
≥vít
);

158 
os_q_≥nd
(
OS_QUEUE
 *
≥vít
, 
timeout
, *
msg
);

160 
os_q_po°
(
OS_QUEUE
 *
≥vít
, *
msg
);

162 
os_q_quîy
(
OS_QUEUE
 *
≥vít
);

164 
os_q_vÆid
(
OS_QUEUE
 *
≥vít
);

168 #ifde‡
__˝lu•lus


	@include_lib/system/os/os_cfg.h

7 #i‚de‡
OS_CFG_H


8 
	#OS_CFG_H


	)

9 
	~"os/os_˝u.h
"

11 
	#OS_TIME_SLICE_EN
 1

	)

13 
	#OS_PRIORITY_INVERSION
 1

	)

16 
	#OS_ARG_CHK_EN
 0

	)

17 
	#OS_CPU_HOOKS_EN
 1

	)

19 #i‡
OS_TIME_SLICE_EN
 > 0

20 
	#OS_LOWEST_PRIO
 (0Ë

	)

22 
	#OS_LOWEST_PRIO
 (0+
OS_CPU_CORE
-1)

	)

25 
	#OS_IDLE_PRIO
 (
OS_LOWEST_PRIO
Ë

	)

27 
	#OS_MAX_TASKS
 31

	)

29 
	#OS_SCHED_LOCK_EN
 1

	)

31 
	#OS_TICKS_PER_SEC
 100

	)

33 
	#OS_PARENT_TCB
 1

	)

35 
	#OS_CHILD_TCB
 0

	)

38 
	#OS_TASKQ_EN
 1

	)

39 
	#OS_TASKQ_ACCEPT_EN
 1

	)

40 
	#OS_TASKQ_PEND_EN
 1

	)

41 
	#OS_TASKQ_FLUSH_EN
 1

	)

42 
	#OS_TASKQ_POST_EN
 1

	)

43 
	#OS_TASKQ_POST_FRONT_EN
 1

	)

44 
	#OS_TASKQ_QUERY_EN
 1

	)

47 
	#OS_MUTEX_EN
 1

	)

48 
	#OS_MUTEX_ACCEPT_EN
 1

	)

49 
	#OS_MUTEX_DEL_EN
 1

	)

50 
	#OS_MUTEX_QUERY_EN
 0

	)

53 
	#OS_SEM_EN
 1

	)

54 
	#OS_SEM_ACCEPT_EN
 1

	)

55 
	#OS_SEM_DEL_EN
 1

	)

56 
	#OS_SEM_QUERY_EN
 0

	)

57 
	#OS_SEM_SET_EN
 1

	)

60 
	#OS_Q_EN
 1

	)

61 
	#OS_Q_ACCEPT_EN
 1

	)

62 
	#OS_Q_DEL_EN
 1

	)

63 
	#OS_Q_FLUSH_EN
 1

	)

64 
	#OS_Q_POST_EN
 1

	)

65 
	#OS_Q_POST_FRONT_EN
 1

	)

66 
	#OS_Q_POST_OPT_EN
 1

	)

67 
	#OS_Q_QUERY_EN
 0

	)

70 
	#OS_TASK_CHANGE_PRIO_EN
 1

	)

71 
	#OS_TASK_CREATE_EN
 1

	)

72 
	#OS_TASK_DEL_EN
 1

	)

73 
	#OS_TASK_QUERY_EN
 0

	)

74 
	#OS_TASK_SUSPEND_EN
 1

	)

75 
	#OS_TASK_SW_HOOK_EN
 0

	)

76 
	#OS_TASK_STK_CHK
 0

	)

79 
	#OS_TIME_DLY_HMSM_EN
 0

	)

80 
	#OS_TIME_DLY_RESUME_EN
 1

	)

81 
	#OS_TIME_GET_SET_EN
 1

	)

82 
	#OS_TIME_TICK_HOOK_EN
 0

	)

84 
	#OS_EVENT_EN
 ((
OS_Q_EN
 > 0Ë|| (
OS_SEM_EN
 > 0Ë|| (
OS_MUTEX_EN
 > 0))

	)

	@include_lib/system/os/os_compat.h

1 #i‚de‡
_OS_COMPAT_H_


2 
	#_OS_COMPAT_H_


	)

4 
	~"os/os_≠i.h
"

6 
	ekûl_mode
 {

7 
	mKILL_WAIT
,

8 
	mKILL_REQ
,

9 
	mKILL_FORCE
,

14 
£m_öô
(*
£m
, 
˙t
);

16 
£m_≥nd
(*
£m
, 
timeout
);

18 
£m_po°
(*
£m
);

20 
£m_£t
(*
£m
, 
öô_vÆ
);

22 
£m_dñ
(*
£m
);

24 
thªad_f‹k_öô
();

25 
thªad_f‹k
(c⁄° *
thªad_«me
, 
¥io
, 
°k_size
, 
u32
 
q_size
, *
pid
, (*
func
)(*), *
∑rm
);

26 
	`thªad_kûl
(vﬁ©ûê*
pid
, 
kûl_mode
 
mode
);

27 
	`thªad_kûl_ªq
();

28 
u16
 
	`thªad_put_msg_fifo
(
u32
 
msg
, 
u8
 
ty≥
, *
pid
);

29 
u16
 
	`thªad_put_msg_lifo
(
u32
 
msg
, 
u8
 
ty≥
, *
pid
);

30 *
	`gë_cur_thªad_pid
();

31 
	`thªad_Ωc
(
boﬁ
 
waô_föish
, (*
Ωc_föish_cb
)(*
¥iv
), 
¥io
, 
°k_size
, (*
thªad_func
)(*priv), *priv);

33 
	`udñay
(
t
);

35 
	`u¶ìp
(
t
);

37 
	`mdñay
(
ms
);

39 
	`m¶ìp
(
ms
);

40 
	`±hªad_muãx©å_öô
(*
©å
);

41 
	`±hªad_muãx_öô
(*
muãx
, c⁄° *
©å
);

42 
	`±hªad_muãx_lock
(*
muãx
);

43 
	`±hªad_muãx_u∆ock
(*
muãx
);

44 
	`±hªad_muãx_de°roy
(*
muãx
);

	@include_lib/system/os/os_cpu.h

6 #i‚de‡
_OS_CPU_H


7 
	#_OS_CPU_H


	)

9 
	~"asm/˝u.h
"

10 
	~"jiffõs.h
"

13 #i‚de‡
__ASSEMBLY__


14 
	tQS
;

15 
	tOS_STK
;

16 
	tOS_CPU_SR
;

17 
	tOS_CPU_DATA
;

20 
	#OS_CPU_EXT
 

	)

21 
	#OS_CPU_CORE
 
CPU_CORE_NUM


	)

23 
	#OS_CPU_ID
 
	`cuºít_˝u_id
()

	)

24 
	#OS_STK_GROWTH
 1

	)

26 
	#OS_CPU_MMU
 0

	)

28 
	#OS_TASK_CLR
(
a
Ë
	`CPU_TASK_CLR
◊)

	)

29 
	#OS_TASK_SW
(
a
Ë
	`CPU_TASK_SW
◊Ë

	)

30 
	#OS_INT_NESTING
 
CPU_INT_NESTING


	)

34 
	#OS_ENTER_CRITICAL
() \

35 
	`CPU_CRITICAL_ENTER
(); \

36 

	)

37 
	#OS_EXIT_CRITICAL
() \

38 
	`CPU_CRITICAL_EXIT
()

	)

43 #i‚de‡
__ASSEMBLY__


56 
OSCtxSw
();

58 
E«bÀOthîCpu
() ;

60 
	#os_˘x_sw
 
OSCtxSw


	)

62 
OSInôTick
(
u32
 
hz
);

64 
In°ÆlOSISR
();

66 
os_èsk_dód
(c⁄° *
èsk_«me
);

77 
	#OS_CRITICAL_METHOD
 3

	)

78 #i‡
OS_CRITICAL_METHOD
 == 3

	@include_lib/system/os/os_error.h

1 #i‚de‡
__OS_ERROR_H__


2 
	#__OS_ERROR_H__


	)

4 
	#OS_ERR_NONE
 0

	)

8 
	mOS_NO_ERR
 = 0,

9 
	mOS_TRUE
,

10 
	mOS_ERR_EVENT_TYPE
,

11 
	mOS_ERR_PEND_ISR
,

12 
	mOS_ERR_POST_NULL_PTR
,

13 
	mOS_ERR_PEVENT_NULL
,

14 
	mOS_ERR_POST_ISR
,

15 
	mOS_ERR_QUERY_ISR
,

16 
	mOS_ERR_INVALID_OPT
,

17 
	mOS_ERR_TASK_WAITING
,

18 
	mOS_ERR_PDATA_NULL
,

19 
	mOS_TIMEOUT
,

20 
	mOS_TIMER
,

21 
	mOS_TASKQ
,

22 
	mOS_TASK_NOT_EXIST
,

23 
	mOS_ERR_EVENT_NAME_TOO_LONG
,

24 
	mOS_ERR_FLAG_NAME_TOO_LONG
,

25 
	mOS_ERR_TASK_NAME_TOO_LONG
,

26 
	mOS_ERR_PNAME_NULL
,

27 
	mOS_ERR_TASK_CREATE_ISR
,

28 
	mOS_MBOX_FULL
,

29 
	mOS_Q_FULL
,

30 
	mOS_Q_EMPTY
,

31 
	mOS_Q_ERR
,

32 
	mOS_ERR_NO_QBUF
,

33 
	mOS_PRIO_EXIST
,

34 
	mOS_PRIO_ERR
,

35 
	mOS_PRIO_INVALID
,

36 
	mOS_SEM_OVF
,

37 
	mOS_TASK_DEL_ERR
,

38 
	mOS_TASK_DEL_IDLE
,

39 
	mOS_TASK_DEL_ISR
,

40 
	mOS_NO_MORE_TCB
,

41 
	mOS_TIME_NOT_DLY
,

42 
	mOS_TIME_INVALID_MINUTES
,

43 
	mOS_TIME_INVALID_SECONDS
,

44 
	mOS_TIME_INVALID_MILLI
,

45 
	mOS_TIME_ZERO_DLY
,

46 
	mOS_TASK_SUSPEND_PRIO
,

47 
	mOS_TASK_SUSPEND_IDLE
,

48 
	mOS_TASK_RESUME_PRIO
,

49 
	mOS_TASK_NOT_SUSPENDED
,

50 
	mOS_MEM_INVALID_PART
,

51 
	mOS_MEM_INVALID_BLKS
,

52 
	mOS_MEM_INVALID_SIZE
,

53 
	mOS_MEM_NO_FREE_BLKS
,

54 
	mOS_MEM_FULL
,

55 
	mOS_MEM_INVALID_PBLK
,

56 
	mOS_MEM_INVALID_PMEM
,

57 
	mOS_MEM_INVALID_PDATA
,

58 
	mOS_MEM_INVALID_ADDR
,

59 
	mOS_MEM_NAME_TOO_LONG
,

60 
	mOS_ERR_MEM_NO_MEM
,

61 
	mOS_ERR_NOT_MUTEX_OWNER
,

62 
	mOS_TASK_OPT_ERR
,

63 
	mOS_ERR_DEL_ISR
,

64 
	mOS_ERR_CREATE_ISR
,

65 
	mOS_FLAG_INVALID_PGRP
,

66 
	mOS_FLAG_ERR_WAIT_TYPE
,

67 
	mOS_FLAG_ERR_NOT_RDY
,

68 
	mOS_FLAG_INVALID_OPT
,

69 
	mOS_FLAG_GRP_DEPLETED
,

70 
	mOS_ERR_PIP_LOWER
,

71 
	mOS_ERR_MSG_POOL_EMPTY
,

72 
	mOS_ERR_MSG_POOL_NULL_PTR
,

73 
	mOS_ERR_MSG_POOL_FULL
,

	@include_lib/system/os/os_type.h

1 #i‚de‡
__OS_TYPE_H


2 
	#__OS_TYPE_H


	)

5 
	#OS_TICKS_PER_SEC
 100

	)

7 #i‡
deföed
 
CONFIG_UCOS_ENABLE


10 
	#OS_EVENT_TYPE_UNUSED
 0u

	)

11 
	#OS_EVENT_TYPE_Q
 1u

	)

12 
	#OS_EVENT_TYPE_SEM
 2u

	)

13 
	#OS_EVENT_TYPE_MUTEX
 3u

	)

16 
	mOSEvítTy≥
;

17 
	mØ
;

18 *
	mbb
;

19 
	mvÆue
;

20 
	m¥io
;

21 
	mcc
;

22 } 
	tOS_SEM
, 
	tOS_MUTEX
, 
	tOS_QUEUE
;

25 #ñi‡
deföed
 
CONFIG_FREE_RTOS_ENABLE


27 
	~"FªeRTOS/FªeRTOS.h
"

28 
	~"FªeRTOS/£mphr.h
"

30 
SèticSem≠h‹e_t
 
	tOS_SEM
, 
	tOS_MUTEX
;

31 
SèticQueue_t
 
	tOS_QUEUE
;

	@include_lib/system/power_manage.h

1 #i‚de‡
__POWER_MANAGE_H_


2 
	#__POWER_MANAGE_H_


	)

4 
	~"gíîic/ty≥def.h
"

6 #ifde‡
__˝lu•lus


11 
DEVICE_EVENT_POWER_SHUTDOWN
 = 0x10,

12 
DEVICE_EVENT_POWER_STARTUP
,

13 
DEVICE_EVENT_POWER_PERCENT
,

14 
DEVICE_EVENT_POWER_CHARGER_IN
,

15 
DEVICE_EVENT_POWER_CHARGER_OUT


18 
	#PWR_SCAN_TIMES
 3

	)

20 
	#PWR_DELAY_INFINITE
 0xffffffff

	)

22 
	#PWR_WKUP_PORT
 "wkup_p‹t"

	)

23 
	#PWR_WKUP_ALARM
 "wkup_Æ¨m"

	)

24 
	#PWR_WKUP_PWR_ON
 "wkup_pwr_⁄"

	)

25 
	#PWR_WKUP_ABNORMAL
 "wkup_abn‹mÆ"

	)

26 
	#PWR_WKUP_SHORT_KEY
 "wkup_sh‹t_key"

	)

28 
	ssys_powî_hÆ_›s
 {

29 (*
öô
)();

30 (*
powîoff
)(*
¨g
);

31 (*
wakeup_check
)(*
ªas⁄
, 
max_Àn
);

32 (*
p‹t_wakeup_c⁄fig
)(c⁄° *
p‹t
, 
íabÀ
);

33 (*
Æ¨m_wakeup_c⁄fig
)(
u32
 
£c
, 
íabÀ
);

34 (*
gë_b©ãry_vﬁège
)();

35 (*
gë_b©ãry_≥r˚¡
)();

36 (*
ch¨gî_⁄löe
)();

39 c⁄° 
sys_powî_hÆ_›s
 
sys_powî_hÆ_›s_begö
[];

40 c⁄° 
sys_powî_hÆ_›s
 
sys_powî_hÆ_›s_íd
[];

42 
	#REGISTER_SYS_POWER_HAL_OPS
(
›s
) \

43 c⁄° 
sys_powî_hÆ_›s
 
›s
 
	`£c
(.sys_powî_hÆ_›s)

	)

46 
sys_powî_óæy_öô
();

50 
sys_powî_powîoff
();

54 
sys_powî_shutdown
();

56 
sys_powî_£t_p‹t_wakeup
(c⁄° *
p‹t
, 
íabÀ
);

58 
sys_powî_£t_Æ¨m_wakeup
(
u32
 
£c
, 
íabÀ
);

60 c⁄° *
sys_powî_gë_wakeup_ªas⁄
();

62 
sys_powî_˛r_wakeup_ªas⁄
(c⁄° *
°r
);

64 
sys_powî_gë_b©ãry_vﬁège
();

66 
sys_powî_gë_b©ãry_≥r£¡
();

68 
sys_powî_is_ch¨gög
();

70 
sys_powî_ch¨gî_⁄löe
();

76 
sys_powî_auto_shutdown_°¨t
(
u32
 
dly_£cs
);

77 
sys_powî_auto_shutdown_∑u£
();

78 
sys_powî_auto_shutdown_ªsume
();

79 
sys_powî_auto_shutdown_˛ór
();

80 
sys_powî_auto_shutdown_°›
();

83 
sys_powî_low_vﬁège
(
u32
 
vﬁège
);

91 
sys_powî_low_vﬁège_shutdown
(
u32
 
vﬁège
, u32 
dly_£cs
);

97 
sys_powî_ch¨gî_off_shutdown
(
u32
 
dly_£cs
);

100 #ifde‡
__˝lu•lus


	@include_lib/system/spinlock.h

1 #i‚de‡
SYS_SPINLOCK_H


2 
	#SYS_SPINLOCK_H


	)

4 
	~"ty≥def.h
"

5 
	~"˝u.h
"

6 
	~"úq.h
"

9 
	s__•ölock
 {

10 vﬁ©ûê
u32
 
	mrwlock
;

13 
__•ölock
 
	t•ölock_t
;

17 
	#¥ìm±_dißbÀ
() \

18 
	`loˇl_úq_dißbÀ
()

	)

20 
	#¥ìm±_íabÀ
() \

21 
	`loˇl_úq_íabÀ
()

	)

24 #i‡
CPU_CORE_NUM
 > 1

26 
	#•ö_acquúe
(
lock
) \

28 
	`¨ch_•ö_lock
(
lock
); \

29 }0)

	)

31 
	#•ö_ªÀa£
(
lock
) \

33 
	`¨ch_•ö_u∆ock
(
lock
); \

34 }0)

	)

38 
	#•ö_acquúe
(
lock
) \

40 (
lock
)->
rwlock
); \

41 (
lock
)->
rwlock
 = 1; \

42 }0)

	)

45 
	#•ö_ªÀa£
(
lock
) \

47 (
lock
)->
rwlock
 = 0; \

48 }0)

	)

53 
	#DEFINE_SPINLOCK
(
x
) \

54 
•ölock_t
 
x
 = { .
rwlock
 = 0 }

	)

57 
ölöe
 
	$•ö_lock_öô
(
•ölock_t
 *
lock
)

59 
lock
->
rwlock
 = 0;

60 
	}
}

61 
u32
 
•ö_lock_˙t
[];

64 
ölöe
 
	$•ö_lock
(
•ölock_t
 *
lock
)

66 
	`¥ìm±_dißbÀ
();

69 
	`•ö_acquúe
(
lock
);

70 
	}
}

73 
ölöe
 
	$•ö_u∆ock
(
•ölock_t
 *
lock
)

76 
	`•ö_ªÀa£
(
lock
);

77 
	`¥ìm±_íabÀ
();

78 
	}
}

83 
	#•ö_lock
(
lock
) \

85 
	`¥ìm±_dißbÀ
(); \

86 i‡(!(
T2_CON
 & (1<<0))) { \

87 
T2_CNT
 = 0; \

88 
T2_PRD
 = 120000000 / 10; \

89 
T2_CON
 = 1; \

91 
•ö_lock_˙t
[
	`cuºít_˝u_id
()] = 
T2_CNT
; \

92 
	`•ö_acquúe
(
lock
); \

93 } 0)

	)

96 
	#•ö_u∆ock
(
lock
) \

98 
u32
 
t
 = 
T2_CNT
;\

99 if(
t
 < 
•ö_lock_˙t
[
	`cuºít_˝u_id
()]) \

100 
t
 +
T2_PRD
 - 
•ö_lock_˙t
[
	`cuºít_˝u_id
()]; \

102 
t
 -
•ö_lock_˙t
[
	`cuºít_˝u_id
()]; \

103 
	`•ö_ªÀa£
(
lock
); \

104 
	`¥ìm±_íabÀ
(); \

105 i‡(
t
 > 100000) { \

106 
	`¥ötf
("???????•ölock: %d, %s\n", 
t
, 
__func__
); \

108 } 0)

	)

	@include_lib/system/sys_config.h

1 #i‚de‡
SYS_CONFIG_H


2 
	#SYS_CONFIG_H


	)

4 
	~"ty≥def.h
"

7 
	ssyscfg_d©a
 {

8 c⁄° *
	m«me
;

9 
	mÀn
;

12 
	sdi˘_li°
 {

13 c⁄° *
	mkey
;

14 
u8
 
	mvÆue_bôs
;

15 
u32
 
	mvÆue
;

18 
	#REGISTER_SYS_CONFIG
(
_«me
, 
_Àn
) \

19 c⁄° 
syscfg_d©a
 
syscfg_d©a_
##
_«me
 
	`£c
(.
sys_cfg
) = { \

20 .
«me
 = #_name, \

21 .
Àn
 = 
_Àn
 + 2, \

22 }

	)

27 
sys_c⁄fig_°‹e
(c⁄° *
«me
, *
d©a
, 
off£t
, 
Àn
);

30 
sys_c⁄fig_ª°‹e
(c⁄° *
«me
, *
d©a
, 
off£t
, 
Àn
);

33 
sys_c⁄fig_öô
(c⁄° *
dev_«me
);

	@include_lib/system/sys_time.h

1 #i‚de‡
SYS_TIME_H


2 
	#SYS_TIME_H


	)

4 
	~"ty≥def.h
"

7 
	ssys_time
 {

8 
u16
 
	myór
;

9 
u8
 
	mm⁄th
;

10 
u8
 
	mday
;

11 
u8
 
	mhour
;

12 
u8
 
	mmö
;

13 
u8
 
	m£c
;

17 
	stm
 {

18 
	mtm_£c
;

19 
	mtm_mö
;

20 
	mtm_hour
;

21 
	mtm_mday
;

22 
	mtm_m⁄
;

23 
	mtm_yór
;

24 
	mtm_wday
;

25 
	mtm_yday
;

26 
	mtm_isd°
;

28 #ifdef 
__USE_MISC


29 
	mtm_gmtoff
;

30 c⁄° *
	mtm_z⁄e
;

32 
	m__tm_gmtoff
;

33 c⁄° *
	m__tm_z⁄e
;

	@include_lib/system/syscfg.h

1 #i‚de‡
__SYSTEM_CONFIG_H


2 
	#__SYSTEM_CONFIG_H


	)

5 
	~"gíîic/ty≥def.h
"

6 
	~"sys/ègs.h
"

9 
	ssyscfg_¨g
 {

10 
u32
 
	mèg
;

11 
u32
 
	m¨g
;

15 
	ssyscfg_h™dÀr
 {

16 
u32
 
	mèg
;

17 (*
	mh™dÀr
)(*
	md©a
);

21 
	#__sy°em_cfg_¨g
(
_èg
, 
_¨g
) \

22 c⁄° 
syscfg_¨g
 
__cfg¨g_
##
_èg
 
	`£c
(.
syscfg
.
¨g
) = { \

23 .
èg
 = 
_èg
, \

24 .
¨g
 = 
_¨g
, \

25 }

	)

29 
	#__sy°em_cfg_h™dÀr
(
_èg
, 
_h™dÀr
) \

30 c⁄° 
syscfg_h™dÀr
 
__cfgh™dÀr
##
_èg
 
	`£c
(.
syscfg
.
h™dÀr
) = { \

31 .
èg
 = 
_èg
, \

32 .
h™dÀr
 = 
_h™dÀr
, \

33 }

	)

37 
sy°em_cfg
(
u32
 
èg
, u32 
¨g
);

	@include_lib/system/system.ld

2 
	g_lib_vîsi⁄_begö
 = .;

3 
PROVIDE
(
lib_vîsi⁄_begö
 = .);

4 *(.
	glib_vîsi⁄
)

5 
	g_lib_vîsi⁄_íd
 = .;

6 
PROVIDE
(
lib_vîsi⁄_íd
 = .);

8 
	g_öôˇŒ_begö
 = .;

9 
PROVIDE
(
öôˇŒ_begö
 = .);

10 *(.
	göôˇŒ
)

11 
	g_öôˇŒ_íd
 = .;

12 
PROVIDE
(
öôˇŒ_íd
 = .);

14 
	g_óæy_öôˇŒ_begö
 = .;

15 
PROVIDE
(
óæy_öôˇŒ_begö
 = .);

16 *(.
	góæy
.
	göôˇŒ
)

17 
	g_óæy_öôˇŒ_íd
 = .;

18 
PROVIDE
(
óæy_öôˇŒ_íd
 = .);

20 
	g_œã_öôˇŒ_begö
 = .;

21 
PROVIDE
(
œã_öôˇŒ_begö
 = .);

22 *(.
	gœã
.
	göôˇŒ
)

23 
	g_œã_öôˇŒ_íd
 = .;

24 
PROVIDE
(
œã_öôˇŒ_íd
 = .);

26 
	g_∂©f‹m_öôˇŒ_begö
 = .;

27 
PROVIDE
(
∂©f‹m_öôˇŒ_begö
 = .);

28 *(.
	g∂©f‹m
.
	göôˇŒ
)

29 
	g_∂©f‹m_öôˇŒ_íd
 = .;

30 
PROVIDE
(
∂©f‹m_öôˇŒ_íd
 = .);

32 
	g_moduÀ_öôˇŒ_begö
 = .;

33 
PROVIDE
(
moduÀ_öôˇŒ_begö
 = .);

34 *(.
	gmoduÀ
.
	göôˇŒ
)

35 
	g_moduÀ_öôˇŒ_íd
 = .;

36 
PROVIDE
(
moduÀ_öôˇŒ_íd
 = .);

38 
	g_sys_evít_h™dÀr_begö
 = .;

39 
PROVIDE
(
sys_evít_h™dÀr_begö
 = .);

40 *(.
	gsys_evít
.4.
	gh™dÀr
)

41 *(.
	gsys_evít
.3.
	gh™dÀr
)

42 *(.
	gsys_evít
.2.
	gh™dÀr
)

43 *(.
	gsys_evít
.1.
	gh™dÀr
)

44 *(.
	gsys_evít
.0.
	gh™dÀr
)

45 
	g_sys_evít_h™dÀr_íd
 = .;

46 
PROVIDE
(
sys_evít_h™dÀr_íd
 = .);

48 
	g_syscfg_¨g_begö
 = .;

49 
PROVIDE
(
syscfg_¨g_begö
 = .);

50 *(.
	gsyscfg
.
	g¨g
)

51 
	g_syscfg_¨g_íd
 = .;

52 
PROVIDE
(
syscfg_¨g_íd
 = .);

54 
	g_syscfg_h™dÀr_begö
 = .;

55 
PROVIDE
(
syscfg_h™dÀr_begö
 = .);

56 *(.
	gsyscfg
.
	gh™dÀr
)

57 
	g_syscfg_h™dÀr_íd
 = .;

58 
PROVIDE
(
syscfg_h™dÀr_íd
 = .);

60 
	g_£rvî_öfo_begö
 = .;

61 
PROVIDE
(
£rvî_öfo_begö
 = .);

62 *(.
	g£rvî_öfo
)

63 
	g_£rvî_öfo_íd
 = .;

64 
PROVIDE
(
£rvî_öfo_íd
 = .);

66 
	g_≠p_begö
 = .;

67 
PROVIDE
(
≠p_begö
 = .);

68 *(.
	g≠p
)

69 
	g_≠p_íd
 = .;

70 
PROVIDE
(
≠p_íd
 = .);

72 
	g_bus_devi˚_begö
 = .;

73 
PROVIDE
(
bus_devi˚_begö
 = .);

74 *(.
	gbus_devi˚
)

75 
	g_bus_devi˚_íd
 = .;

76 
PROVIDE
(
bus_devi˚_íd
 = .);

78 
	g_sys_powî_hÆ_›s_begö
 = .;

79 
PROVIDE
(
sys_powî_hÆ_›s_begö
 = .);

80 *(.
	gsys_powî_hÆ_›s
)

81 
	g_sys_powî_hÆ_›s_íd
 = .;

82 
PROVIDE
(
sys_powî_hÆ_›s_íd
 = .);

	@include_lib/system/system_data.ld

2 
	g_key_drivî_begö
 = .;

3 
PROVIDE
(
key_drivî_begö
 = .);

4 *(.
	gkey_drivî
)

5 
	g_key_drivî_íd
 = .;

6 
PROVIDE
(
key_drivî_íd
 = .);

8 
	g_touch_drivî_begö
 = .;

9 
PROVIDE
(
touch_drivî_begö
 = .);

10 *(.
	gtouch_drivî
)

11 
	g_touch_drivî_íd
 = .;

12 
PROVIDE
(
touch_drivî_íd
 = .);

14 
	g_°©ic_hi_timî_begö
 = .;

15 
PROVIDE
(
°©ic_hi_timî_begö
 = .);

16 *(.
	ghi_timî
)

17 
	g_°©ic_hi_timî_íd
 = .;

18 
PROVIDE
(
°©ic_hi_timî_íd
 = .);

20 
	g_sys_˝u_timî_begö
 = .;

21 
PROVIDE
(
sys_˝u_timî_begö
 = .);

22 *(.
	gsys_˝u_timî
)

23 
	g_sys_˝u_timî_íd
 = .;

24 
PROVIDE
(
sys_˝u_timî_íd
 = .);

26 
	g_sys_c⁄fig_begö
 = .;

27 
PROVIDE
(
sys_c⁄fig_begö
 = .);

28 *(.
	gsys_cfg
)

29 
	g_sys_c⁄fig_íd
 = .;

30 
PROVIDE
(
sys_c⁄fig_íd
 = .);

	@include_lib/system/tags.h

1 #i‚de‡
__TAGS_H


2 
	#__TAGS_H


	)

5 
	#__TAG
(
a
, 
b
, 
c
, 
d
Ë((◊)<<24Ë| ((b)<<16Ë| ((c)<<8Ë| (d))

	)

10 
	#TAG_SDMMC_INFO
 
	`__TAG
('S', 'D', 'M', 0)

	)

12 
	#TAG_UART_INFO
 
	`__TAG
('U', 'A', 'R', 0)

	)

14 
	#TAG_SPIFLASH_INFO
 
	`__TAG
('F', 'L', 'H', 0)

	)

	@include_lib/system/task.h

1 #i‚de‡
TASK_PRIORITY_H


2 
	#TASK_PRIORITY_H


	)

5 
	~"os/os_≠i.h
"

8 
	sèsk_öfo
 {

9 c⁄° *
	m«me
;

10 
u8
 
	m¥io
;

11 
u16
 
	m°ack_size
;

12 
u16
 
	mqsize
;

17 
OS_SEM
 
	t£m_t
;

18 
OS_MUTEX
 
	tmuãx_t
;

21 
èsk_¸óã
((*
èsk
)(*
p
), *p, c⁄° *
«me
);

24 
	`èsk_exô
(c⁄° *
«me
);

26 
	`èsk_dñëe
(c⁄° *
«me
);

28 
	`èsk_kûl
(c⁄° *
«me
);

	@include_lib/system/timeout.h

1 #i‚de‡
SYS_TIMEOUT_H


2 
	#SYS_TIMEOUT_H


	)

4 
	~"ty≥def.h
"

5 
	~"li°.h
"

	@include_lib/system/timer.h

1 #i‚de‡
SYS_TIMER_H


2 
	#SYS_TIMER_H


	)

5 
	~"ty≥def.h
"

6 
	~"gíîic/li°.h
"

12 
	s°©ic_sys_timî
 {

13 (*
	mfunc
)(*
	m¥iv
);

14 *
	m¥iv
;

15 
u32
 
	mm£c
;

16 
u32
 
	mjiffõs
;

20 
	#SYS_HI_TIMER_ADD
(
_func
, 
_¥iv
, 
_m£c
) \

21 
°©ic_sys_timî
 
hi_timî
 
	`£c
(.hi_timer) = { \

22 .
func
 = 
_func
, \

23 .
¥iv
 = 
_¥iv
, \

24 .
m£c
 = 
_m£c
, \

25 }

	)

27 
°©ic_sys_timî
 
°©ic_hi_timî_begö
[];

28 
°©ic_sys_timî
 
°©ic_hi_timî_íd
[];

30 
	#li°_f‹_óch_°©ic_hi_timî
(
p
) \

31 
p
=
°©ic_hi_timî_begö
;Ö<
°©ic_hi_timî_íd
;Ö++)

	)

35 
	ssys_˝u_timî
 {

36 
u8
 
	mbusy
;

37 *
	m¥iv
;

38 (*
	m£t
)(
u32
 
	mu£c
);

39 (*
	mun£t
)();

42 
	#DEFINE_SYS_CPU_TIMER
(
t
) \

43 
sys_˝u_timî
 
t
 
	`£c
(.sys_˝u_timî);

	)

45 
	#REGISTER_SYS_CPU_TIMER
(
t
) \

46 
sys_˝u_timî
 
t
 
	`£c
(.sys_˝u_timî)

	)

49 
sys_˝u_timî
 
sys_˝u_timî_begö
[];

50 
sys_˝u_timî
 
sys_˝u_timî_íd
[];

52 
	#li°_f‹_óch_˝u_u£c_timî
(
p
) \

53 
p
 = 
sys_˝u_timî_begö
;Ö < 
sys_˝u_timî_íd
;Ö++)

	)

57 
sys_timî_add
(*
¥iv
, (*
func
)(*¥iv), 
u32
 
m£c
);

59 
	`sys_timî_dñ
();

61 
	`sys_timeout_add
(*
¥iv
, (*
func
)(*¥iv), 
u32
 
m£c
);

63 
	`sys_timeout_dñ
();

65 
	`sys_timî_scheduÀ
();

67 
	`sys_timî_modify
(
id
, 
u32
 
m£c
);

69 
	`sys_hi_timî_dñ
();

71 
	`sys_hi_timî_add
(*
¥iv
, (*
func
)(*¥iv), 
u32
 
m£c
);

73 
	`sys_hi_timî_modify
(, 
u32
 
m£c
);

75 
	`sys_hi_timî_scheduÀ
();

77 
	`sys_hi_timeout_dñ
();

79 
	`sys_hi_timeout_add
(*
¥iv
, (*
func
)(*¥iv), 
u32
 
m£c
);

82 
	`sys_u£c_timî_add
(*
¥iv
, (*
func
)(*¥iv), 
u32
 
u£c
);

84 
	`sys_u£c_timî_scheduÀ
(
sys_˝u_timî
 *);

86 
	`sys_u£c_timî_£t
(
_t
, 
u32
 
u£c
);

88 
	`sys_u£c_timî_dñ
();

	@include_lib/system/wait.h

1 #i‚de‡
WAIT_COMPLETION_H


2 
	#WAIT_COMPLETION_H


	)

8 
waô_com∂ëi⁄_scheduÀ
();

10 
u16
 
waô_com∂ëi⁄
((*
c⁄dôi⁄
)(), (*
ˇŒback
)(*), *
¥iv
);

12 
	`waô_com∂ëi⁄_dñ
(
u16
 
id
);

	@include_lib/ui/font/font_all.h

1 #i‚de‡
__FONT_ALL_H__


2 
	#__FONT_ALL_H__


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"f⁄t/f⁄t_sdfs.h
"

8 
u8
 
	mwidth
;

9 
u8
 
	msize
;

10 
u16
 
	maddr
;

11 } 
	tASCSTRUCT
;

14 
	#FONT_GET_WIDTH
 0x01

	)

15 
	#FONT_SHOW_PIXEL
 0x02

	)

16 
	#FONT_SHOW_MULTI_LINE
 0x04

	)

17 
	#FONT_DEFAULT
 (
FONT_SHOW_PIXEL
)

	)

19 
	#FONT_ENCODE_ANSI
 0x00

	)

20 
	#FONT_ENCODE_UNICODE
 0x01

	)

21 
	#FONT_ENCODE_UTF8
 0x02

	)

23 
	#FONT_ENDIAN_BIG
 0x00

	)

24 
	#FONT_ENDIAN_SMALL
 0x01

	)

26 
	sf⁄t_fûe
 {

27 *
	m«me
;

28 
FILE
 *
	mfd
;

31 
	sf⁄t
 {

32 
f⁄t_fûe
 
	mfûe
;

33 
u16
 
	mnbyãs
;

34 
u8
 
	msize
;

35 
u8
 *
	mpixñbuf
;

37 
	sdi•buf
 {

38 
	mf‹m©
;

39 
u32
 
	mcﬁ‹
;

40 *
	mª˘
;

41 *
	mm≠
;

44 
	eFONT_STATUS
 {

45 
	mFT_ERROR_NONE
,

46 
	mFT_ERROR_NOPIXFILE
 = 0x01,

47 
	mFT_ERROR_NOASCPIXFILE
 = 0x02,

48 
	mFT_ERROR_NOTABFILE
 = 0x04,

49 
	mFT_ERROR_NOMEM
 = 0x08,

50 
	mFT_ERROR_CODEPAGE
 = 0x10,

53 
	sf⁄t_öfo
 {

54 
f⁄t
 
	mas˝ixñ
;

55 
f⁄t
 
	mpixñ
;

56 
f⁄t_fûe
 
	mèbfûe
;

57 
u8
 
	m°a
;

58 
u8
 
	møtio
;

59 
u8
 
	mœnguage_id
;

60 
u8
 
	mbigídün
;

61 
u8
 
	misgb2312
;

62 
u8
 
	mcodïage
;

63 
u16
 
	mx
;

64 
u16
 
	my
;

65 
u16
 
	mãxt_width
;

66 
u16
 
	mãxt_height
;

67 
u16
 
	m°rög_width
;

68 
u32
 
	mÊags
;

69 
di•buf
 
	mdi•
;

70 (*
	mputch¨
)(
f⁄t_öfo
 *
	möfo
, 
u8
 *
	mpixñ
, 
u16
 
	mwidth
, u16 
	mheight
, u16 
	mx
, u16 
	my
);

73 
	#f⁄t_¡ohl
(
x
Ë()((x>>24)|((x>>8)&0xff00)|(x<<24)|((x&0xff00)<<8))

	)

74 
	#f⁄t_¡oh
(
x
Ë()((x>>8&0x00ff)|x<<8&0xff00)

	)

76 
	#REGISTER_LANGUAGE_BEGIN
(
œng
) \

77 
f⁄t_öfo
 
f⁄t_
##
œng
##
_t
 
	`£c
(.
f⁄t_öfo_t
)

	)

80 
f⁄t_öfo
 
f⁄t_öfo_begö
[];

81 
f⁄t_öfo
 
f⁄t_öfo_íd
[];

83 
	#li°_f‹_óch_f⁄t_öfo
(
p
) \

84 
p
=
f⁄t_öfo_begö
;Ö < 
f⁄t_öfo_íd
;Ö++)

	)

	@include_lib/ui/font/font_ascii.h

1 #i‚de‡
__FONT_ASCII_H__


2 
	#__FONT_ASCII_H__


	)

4 
	~"ty≥def.h
"

5 
boﬁ
 
InôF⁄t_ASCII
(
f⁄t_öfo
 *
öfo
);

6 
u8
 
GëASCIICh¨a˘îD©a
(
f⁄t_öfo
 *
öfo
, 
u16
 
asc
);

7 
u8
 
GëASCIICh¨a˘îWidth
(
f⁄t_öfo
 *
öfo
, 
u16
 
asc
);

	@include_lib/ui/font/font_big5.h

1 #i‚de‡
__FONT_BIG5_H__


2 
	#__FONT_BIG5_H__


	)

4 
	~"ty≥def.h
"

6 
boﬁ
 
InôF⁄t_BIG5
(
f⁄t_öfo
 *
öfo
);

7 
u16
 
TextOut_BIG5
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

8 
u16
 
TextOutW_BIG5
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

9 
u16
 
C⁄vîtUTF16toBIG5
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

	@include_lib/ui/font/font_gbk.h

1 #i‚de‡
__FONT_GBK_H__


2 
	#__FONT_GBK_H__


	)

4 
	~"ty≥def.h
"

6 
boﬁ
 
InôF⁄t_GBK
(
f⁄t_öfo
 *
öfo
);

7 
u16
 
TextOut_GBK
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

8 
u16
 
TextOutW_GBK
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

9 
u16
 
C⁄vîtUTF16toGB2312
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

10 
u16
 
C⁄vîtUTF16toGBK
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

	@include_lib/ui/font/font_ksc.h

1 #i‚de‡
__FONT_KSC_H__


2 
	#__FONT_KSC_H__


	)

4 
	~"ty≥def.h
"

6 
boﬁ
 
InôF⁄t_KSC
(
f⁄t_öfo
 *
öfo
);

7 
u16
 
TextOut_KSC
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

8 
u16
 
TextOutW_KSC
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

9 
u16
 
C⁄vîtUTF16toKSC
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

	@include_lib/ui/font/font_other_language.h

1 #i‚de‡
__FONT_OTHERLANGUAGE_H__


2 
	#__FONT_OTHERLANGUAGE_H__


	)

4 
	~"ty≥def.h
"

6 
boﬁ
 
InôF⁄t_OthîL™guage
(
f⁄t_öfo
 *
öfo
);

7 
u16
 
TextOut_OthîL™guage
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

8 
u16
 
TextOutW_OthîL™guage
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

9 
u16
 
C⁄vîtUTF16toOthîL™guage
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

	@include_lib/ui/font/font_sdfs.h

1 #i‚de‡
__UI_SDFS_H__


2 
	#__UI_SDFS_H__


	)

4 #ifde‡
__˝lu•lus


8 
	~"gíîic/ty≥def.h
"

9 
	~"fs/fs.h
"

11 
	#SD_SEEK_SET
 0x00

	)

12 
	#SD_SEEK_CUR
 0x01

	)

14 
FILE
 *
f⁄t_sd_f›í
(c⁄° *
fûíame
, *
¨g
);

15 
f⁄t_sd_‰ód
(
FILE
 *
Â
, *
buf
, 
u32
 
Àn
);

16 
f⁄t_sd_f£ek
(
FILE
 *
Â
, 
u8
 
£ek_mode
, 
u32
 
off£t
);

18 #ifde‡
__˝lu•lus


	@include_lib/ui/font/font_sjis.h

1 #i‚de‡
__FONT_SJIS_H__


2 
	#__FONT_SJIS_H__


	)

4 
	~"ty≥def.h
"

6 
boﬁ
 
InôF⁄t_SJIS
(
f⁄t_öfo
 *
öfo
);

7 
u16
 
TextOut_SJIS
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

8 
u16
 
TextOutW_SJIS
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
Àn
, u16 
x
, u16 
y
);

9 
u16
 
C⁄vîtUTF16toSJIS
(
f⁄t_öfo
 *
öfo
, u16 
utf
);

	@include_lib/ui/font/font_textout.h

1 #i‚de‡
__FONT_OUT_H__


2 
	#__FONT_OUT_H__


	)

4 
	~"gíîic/ty≥def.h
"

5 
	~"f⁄t/f⁄t_Æl.h
"

15 
f⁄t_öfo
 *
f⁄t_›í
(f⁄t_öfÿ*
öfo
, 
u8
 
œnguage
);

25 
u16
 
f⁄t_ãxt_width
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
°æí
);

35 
u16
 
f⁄t_ãxtout
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
°æí
, u16 
x
, u16 
y
);

47 
u16
 
f⁄t_ãxtout_unicode
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
°æí
, u16 
x
, u16 
y
);

59 
u16
 
f⁄t_ãxtout_utf8
(
f⁄t_öfo
 *
öfo
, 
u8
 *
°r
, u16 
°æí
, u16 
x
, u16 
y
);

70 
u16
 
f⁄t_utf8tﬂnsi
(
f⁄t_öfo
 *
öfo
, 
u8
 *
utf8
, u16 
utf8Àn
, u8 *
™si
);

81 
u16
 
f⁄t_utf16tﬂnsi
(
f⁄t_öfo
 *
öfo
, 
u8
 *
utf
, u16 
Àn
, u8 *
™si
);

92 
u16
 
f⁄t_utf8toutf16
(
f⁄t_öfo
 *
öfo
, 
u8
 *
utf8
, u16 
utf8Àn
, u16 *
utf16
);

98 
f⁄t_˛o£
(
f⁄t_öfo
 *
öfo
);

	@include_lib/ui/font/language_list.h

1 #i‚de‡
__LANGUAGE_LIST_H__


2 
	#__LANGUAGE_LIST_H__


	)

4 
	#Chöe£_Sim∂ifõd
 1

5 
	#Chöe£_Tødôi⁄Æ
 2

6 
	#J≠™e£
 3

7 
	#K‹ón
 4

8 
	#English
 5

9 
	#Fªnch
 6

10 
	#Gîm™
 7

11 
	#Ièlün
 8

12 
	#Dutch
 9

13 
	#P‹tugue£
 10

14 
	#S∑nish
 11

15 
	#Swedish
 12

16 
	#Czech
 13

17 
	#D™ish
 14

18 
	#Pﬁish
 15

19 
	#Russün
 16

20 
	#Turkey
 17

21 
	#Hebªw
 18

22 
	#Thai
 19

23 
	#Hung¨ün
 20

24 
	#Rom™ün
 21

25 
	#Aøbic
 22

26 
	#Võäam
 23

27 

	)

	@include_lib/ui/includes.h

1 #i‚de‡
UI_INCLUDES_H


2 
	#UI_INCLUDES_H


	)

8 
	~"ui/ui.h
"

10 
	~"ªs/ªsfûe.h
"

11 
	~"ªs/f⁄t_ascii.h
"

15 
	#UI_TOUCH_DEBUG
 1

	)

17 #i‡(
UI_TOUCH_DEBUG
 == 1)

18 
	#UI_ONTOUCH_DEBUG
 
log_d


	)

20 
	#UI_ONTOUCH_DEBUG
(...)

	)

	@include_lib/ui/res/font_ascii.h

1 #i‚de‡
FONT_ASCII_H


2 
	#FONT_ASCII_H


	)

5 
	~"ty≥def.h
"

8 
f⁄t_ascii_gë_pix
(
code
, 
u8
 *
pixbuf
, *
height
, *
width
);

10 
f⁄t_ascii_width_check
(c⁄° *
°r
);

	@include_lib/ui/res/quicklz.h

1 #i‚de‡
QLZ_HEADER


2 
	#QLZ_HEADER


	)

21 #i‚de‡
QLZ_COMPRESSION_LEVEL


27 
	#QLZ_COMPRESSION_LEVEL
 3

	)

31 
	#QLZ_STREAMING_BUFFER
 0

	)

40 
	#QLZ_VERSION_MAJOR
 1

	)

41 
	#QLZ_VERSION_MINOR
 5

	)

42 
	#QLZ_VERSION_REVISION
 0

	)

45 
	~<°rög.h
>

48 #i‡
QLZ_COMPRESSION_LEVEL
 != 1 && QLZ_COMPRESSION_LEVEL != 2 && QLZ_COMPRESSION_LEVEL != 3

49 #îr‹ 
QLZ_COMPRESSION_LEVEL
 
mu°
 
be
 1, 2 
‹
 3

52 
	tui32
;

53 
	tui16
;

56 #i‡
QLZ_COMPRESSION_LEVEL
 == 1

57 
	#QLZ_POINTERS
 1

	)

58 
	#QLZ_HASH_VALUES
 4096

	)

59 #ñi‡
QLZ_COMPRESSION_LEVEL
 == 2

60 
	#QLZ_POINTERS
 4

	)

61 
	#QLZ_HASH_VALUES
 2048

	)

62 #ñi‡
QLZ_COMPRESSION_LEVEL
 == 3

63 
	#QLZ_POINTERS
 16

	)

64 
	#QLZ_HASH_VALUES
 4096

	)

68 #i‡
deföed
 
_LP64
 || deföed 
__LP64__
 || deföed 
__64BIT__
 || 
_ADDR64
 || deföed 
_WIN64
 || deföed 
__¨ch64__
 || 
__WORDSIZE
 =64 || (deföed 
__•¨c
 && deföed 
__•¨cv9
Ë|| deföed 
__x86_64
 || deföed 
__amd64
 || deföed 
__x86_64__
 || deföed 
_M_X64
 || deföed 
_M_IA64
 || deföed 
__ü64
 || deföed 
__IA64__


69 
	#QLZ_PTR_64


	)

71 
	#ENABLE_COMPRESSION
 0

	)

72 
	#ENABLE_DECOMPRESSION
 1

	)

75 #i‡
QLZ_COMPRESSION_LEVEL
 == 1

76 
ui32
 
	mˇche
;

77 #i‡
deföed
 
QLZ_PTR_64
 && 
QLZ_STREAMING_BUFFER
 == 0

78 
	moff£t
;

80 c⁄° *
	moff£t
;

83 c⁄° *
	moff£t
[
QLZ_POINTERS
];

86 } 
	tqlz_hash_com¥ess
;

89 #i‡
QLZ_COMPRESSION_LEVEL
 == 1

90 c⁄° *
	moff£t
;

92 c⁄° *
	moff£t
[
QLZ_POINTERS
];

94 } 
	tqlz_hash_decom¥ess
;

99 #i‡
QLZ_STREAMING_BUFFER
 > 0

100 
	m°ªam_buf„r
[
QLZ_STREAMING_BUFFER
];

102 
size_t
 
	m°ªam_cou¡î
;

103 
qlz_hash_com¥ess
 
	mhash
[
QLZ_HASH_VALUES
];

104 
	mhash_cou¡î
[
QLZ_HASH_VALUES
];

105 } 
	tqlz_°©e_com¥ess
;

108 #i‡
QLZ_COMPRESSION_LEVEL
 == 1 || QLZ_COMPRESSION_LEVEL == 2

110 #i‡
QLZ_STREAMING_BUFFER
 > 0

111 
	m°ªam_buf„r
[
QLZ_STREAMING_BUFFER
];

113 
qlz_hash_decom¥ess
 
	mhash
[
QLZ_HASH_VALUES
];

114 
	mhash_cou¡î
[
QLZ_HASH_VALUES
];

115 
size_t
 
	m°ªam_cou¡î
;

116 } 
	tqlz_°©e_decom¥ess
;

117 #ñi‡
QLZ_COMPRESSION_LEVEL
 == 3

119 #i‡
QLZ_STREAMING_BUFFER
 > 0

120 
	m°ªam_buf„r
[
QLZ_STREAMING_BUFFER
];

122 #i‡
QLZ_COMPRESSION_LEVEL
 <= 2

123 
qlz_hash_decom¥ess
 
	mhash
[
QLZ_HASH_VALUES
];

125 
size_t
 
	m°ªam_cou¡î
;

126 } 
	tqlz_°©e_decom¥ess
;

130 #i‡
deföed
 (
__˝lu•lus
)

135 
size_t
 
qlz_size_decom¥es£d
(c⁄° *
sour˚
);

136 
size_t
 
qlz_size_com¥es£d
(c⁄° *
sour˚
);

137 
size_t
 
qlz_com¥ess
(c⁄° *
sour˚
, *
de°ö©i⁄
, size_à
size
, 
qlz_°©e_com¥ess
 *
°©e
);

138 
size_t
 
qlz_decom¥ess
(c⁄° *
sour˚
, *
de°ö©i⁄
, 
qlz_°©e_decom¥ess
 *
°©e
);

139 
qlz_gë_£âög
(
£âög
);

141 #i‡
deföed
 (
__˝lu•lus
)

	@include_lib/ui/res/resfile.h

1 #i‚de‡
RESFILE_H


2 
	#RESFILE_H


	)

5 
	~"ty≥def.h
"

7 
	#FILE_TYPE_JPEG
 5

	)

9 
	simage_fûe
 {

10 
u8
 
	mf‹m©
;

11 
u8
 
	mcom¥ess
;

12 
u16
 
	md©a_¸c
;

13 
u16
 
	mwidth
;

14 
u16
 
	mheight
;

15 
u32
 
	moff£t
;

16 
u32
 
	mÀn
;

19 
›í_ªsfûe
(c⁄° *
«me
);

20 
˛o£_ªsfûe
();

22 
ªs_fûe_vîsi⁄_com∑ª
(
ªs_vî
);

24 
›í_°r_fûe
(c⁄° *
«me
);

25 
˛o£_°r_fûe
();

26 
°r_fûe_vîsi⁄_com∑ª
(
°r_vî
);

28 
›í_°yÀ_fûe
(c⁄° *
«me
);

30 
f⁄t_ascii_öô
(c⁄° *
«me
);

31 
›í_image_by_id
(
image_fûe
 *
f
, 
id
, 
∑ge
);

32 
ªad_image_d©a
(
image_fûe
 *
f
, 
u8
 *
d©a
, 
Àn
);

33 
u32
 
image_decode
(c⁄° *
pSour
, *
pDe°
, u32 
SourLí
, u32 
De°Lí
, 
u8
 
com¥ess
);

34 
›í_°rög_pic
(
image_fûe
 *
fûe
, 
id
);

35 
ªad_°r_d©a
(
image_fûe
 *
f
, 
u8
 *
d©a
, 
Àn
);

36 
lﬂd_∑Œë_èbÀ
(
id
, 
u32
 *
d©a
);

37 
ui_œnguage_£t
(
œnguage
);

38 
ui_œnguage_gë
();

	@include_lib/ui/ui/control.h

1 #i‚de‡
UI_CONTROL_H


2 
	#UI_CONTROL_H


	)

4 
	~"ui/ui_c‹e.h
"

6 
	gui_c⁄åﬁ_öfo
;

7 
	gœyout_öfo
;

10 
	#CTRL_TYPE_WINDOW
 2

	)

11 
	#CTRL_TYPE_LAYOUT
 3

	)

12 
	#CTRL_TYPE_LAYER
 4

	)

13 
	#CTRL_TYPE_GRID
 5

	)

14 
	#CTRL_TYPE_LIST
 6

	)

15 
	#CTRL_TYPE_BUTTON
 7

	)

16 
	#CTRL_TYPE_PIC
 8

	)

17 
	#CTRL_TYPE_BATTERY
 9

	)

18 
	#CTRL_TYPE_TIME
 10

	)

19 
	#CTRL_TYPE_CAMERA_VIEW
 11

	)

20 
	#CTRL_TYPE_TEXT
 12

	)

21 
	#CTRL_TYPE_ANIMATION
 13

	)

22 
	#CTRL_TYPE_PLAYER
 14

	)

24 
	#CTRL_TYPE_WATCH
 40

	)

25 
	#CTRL_WATCH_CHILD_BEGIN
 (
CTRL_TYPE_WATCH
 + 1)

	)

26 
	#CTRL_WATCH_CHILD_HOUR
 (
CTRL_WATCH_CHILD_BEGIN
)

	)

27 
	#CTRL_WATCH_CHILD_MIN
 (
CTRL_WATCH_CHILD_BEGIN
+1)

	)

28 
	#CTRL_WATCH_CHILD_SEC
 (
CTRL_WATCH_CHILD_BEGIN
+2)

	)

29 
	#CTRL_WATCH_CHILD_END
 (
CTRL_WATCH_CHILD_BEGIN
+3)

	)

32 
	#CTRL_TYPE_SLIDER
 50

	)

34 
	#SLIDER_CHILD_BEGIN
 (
CTRL_TYPE_SLIDER
+1)

	)

35 
	#SLIDER_CHILD_UNSELECT_PIC
 (
SLIDER_CHILD_BEGIN
)

	)

36 
	#SLIDER_CHILD_SELECTED_PIC
 (
SLIDER_CHILD_BEGIN
+1)

	)

37 
	#SLIDER_CHILD_SLIDER_PIC
 (
SLIDER_CHILD_BEGIN
+2)

	)

38 
	#SLIDER_CHILD_PERSENT_TEXT
 (
SLIDER_CHILD_BEGIN
+3)

	)

39 
	#SLIDER_CHILD_END
 (
SLIDER_CHILD_BEGIN
+4)

	)

42 
	#CTRL_TYPE_BROWSER
 60

	)

43 
	#CTRL_TYPE_BROWSER_ITEM
 61

	)

45 
	#CTRL_TYPE_FILE_ATTRS
 70

	)

46 
	#CTRL_TYPE_FILE_PREVIEW
 71

	)

47 
	#CTRL_TYPE_FILE_TYPE_ICON
 72

	)

48 
	#CTRL_TYPE_FILE_RW_PIC
 73

	)

49 
	#CTRL_TYPE_FILE_FILM_LEN
 74

	)

50 
	#CTRL_TYPE_FILE_NAME
 75

	)

51 
	#CTRL_TYPE_FILE_SIZE
 76

	)

52 
	#CTRL_TYPE_FILE_CREATE_TIME
 77

	)

55 
	sui_˘æ_öfo_hód
 {

56 
u8
 
	mty≥
;

57 
u8
 
	m˘æ_num
;

58 
u8
 
	mcss_num
;

59 
u8
 
	mÀn
;

60 
u8
 
	m∑ge
;

61 
u8
 
	mªv
[3];

62 
	mid
;

63 
ñemít_css
 *
	mcss
;

66 
	sui_image_li°
 {

67 
u16
 
	mnum
;

68 
u16
 
	mimage
[0];

71 
	sui_ãxt_li°
 {

72 
u16
 
	mnum
;

73 
	m°r
[0];

76 
	sui_buâ⁄_öfo
 {

77 
ui_˘æ_öfo_hód
 
	mhód
;

78 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

83 
	sui_ˇmîa_öfo
 {

84 
ui_˘æ_öfo_hód
 
	mhód
;

85 
	mdevi˚
[8];

86 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

89 
	sui_∂ayî_öfo
 {

90 
ui_˘æ_öfo_hód
 
	mhód
;

91 
	mdevi˚
[8];

92 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

95 
	sui_time_öfo
 {

96 
ui_˘æ_öfo_hód
 
	mhód
;

97 
u8
 
	mauto_˙t
;

98 
u8
 
	mªv
[3];

99 
	mf‹m©
[16];

100 
	mcﬁ‹
;

101 
u16
 
	mnumbî
[10];

102 
u16
 
	mdñimôî
[10];

103 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

107 
	sui_pic_öfo
 {

108 
ui_˘æ_öfo_hód
 
	mhód
;

109 
u8
 
	mhighlight
;

110 
u16
 
	m˚¡_x
;

111 
u16
 
	m˚¡_y
;

112 
ui_image_li°
 *
	mn‹mÆ_img
;

113 
ui_image_li°
 *
	mhighlight_img
;

114 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

118 
	sui_b©ãry_öfo
 {

119 
ui_˘æ_öfo_hód
 
	mhód
;

120 
ui_image_li°
 *
	mn‹mÆ_image
;

121 
ui_image_li°
 *
	mch¨ge_image
;

122 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

126 
	sui_ãxt_öfo
 {

127 
ui_˘æ_öfo_hód
 
	mhód
;

128 
	mcode
[8];

129 
	mcﬁ‹
;

130 
	mhighlight_cﬁ‹
;

131 
ui_ãxt_li°
 *
	m°r
;

132 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

136 
	sui_grid_öfo
 {

137 
ui_˘æ_öfo_hód
 
	mhód
;

138 
u8
 
	m∑ge_mode
;

139 
	mhighlight_ödex
;

140 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

141 
œyout_öfo
 *
	möfo
;

144 
	sui_™im©i⁄_öfo
 {

145 
ui_˘æ_öfo_hód
 
	mhód
;

146 
u16
 
	mlo›_num
;

147 
u32
 
	möãrvÆ
;

148 
ui_image_li°
 *
	mimg
;

149 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

152 
	sui_¶idî_öfo
 {

153 
ui_˘æ_öfo_hód
 
	mhód
;

154 
u8
 
	m°ï
;

155 
ui_˘æ_öfo_hód
 *
	m˘æ
;

156 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

159 
	sui_brow£r_öfo
 {

160 
ui_˘æ_öfo_hód
 
	mhód
;

161 
u8
 
	mrow
;

162 
u8
 
	mcﬁumn
;

163 
u8
 
	möãrvÆ
;

164 
u8
 
	ms¸ﬁl
;

165 
u8
 
	mauto_highlight
;

166 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

167 
ui_˘æ_öfo_hód
 *
	m˘æ
;

170 
	sui_Áârs_öfo
 {

171 
ui_˘æ_öfo_hód
 
	mhód
;

172 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

173 
ui_˘æ_öfo_hód
 *
	m˘æ
;

176 
	uui_c⁄åﬁ_öfo
 {

177 
ui_˘æ_öfo_hód
 
	mhód
;

178 
ui_buâ⁄_öfo
 
	mbuâ⁄
;

179 
ui_ˇmîa_öfo
 
	mˇmîa
;

180 
ui_time_öfo
 
	mtime
;

181 
ui_pic_öfo
 
	mpic
;

182 
ui_b©ãry_öfo
 
	mb©ãry
;

183 
ui_ãxt_öfo
 
	mãxt
;

184 
ui_grid_öfo
 
	mgrid
;

187 
	sœyout_öfo
 {

188 
ui_˘æ_öfo_hód
 
	mhód
;

189 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

190 
ui_c⁄åﬁ_öfo
 *
	m˘æ
;

194 
	sœyî_öfo
 {

195 
ui_˘æ_öfo_hód
 
	mhód
;

196 
u8
 
	mf‹m©
;

197 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

198 
œyout_öfo
 *
	mœyout
;

201 
	swödow_öfo
 {

202 
u8
 
	mty≥
;

203 
u8
 
	m˘æ_num
;

204 
u8
 
	mcss_num
;

205 
u8
 
	mÀn
;

206 
u8
 
	mªv
[4];

207 
ª˘
 
	mª˘
;

208 
œyî_öfo
 *
	mœyî
;

212 
	sc⁄åﬁ_›s
 {

213 
	mty≥
;

214 *(*
	m√w
)(c⁄° *, 
	mñemít
 *);

218 c⁄° 
c⁄åﬁ_›s
 
c⁄åﬁ_›s_begö
[];

219 c⁄° 
c⁄åﬁ_›s
 
c⁄åﬁ_›s_íd
[];

222 
	#REGISTER_CONTROL_OPS
(
_ty≥
) \

223 c⁄° 
c⁄åﬁ_›s
 
c⁄åﬁ_›s_
##
_ty≥
 
	`£c
(.control_ops) = { \

224 .
ty≥
 = 
_ty≥
,

	)

228 
	#gë_c⁄åﬁ_›s_by_ty≥
(
_ty≥
) \

230 c⁄° 
c⁄åﬁ_›s
 *
›s
, *
ªt
=
NULL
; \

231 
›s
 = 
c⁄åﬁ_›s_begö
; op†< 
c⁄åﬁ_›s_íd
; ops++) { \

232 i‡(
›s
->
ty≥
 =
_ty≥
) { \

233 
ªt
 = 
›s
; \

237 
ªt
; \

238 })

	)

242 
	sc⁄åﬁ_evít_hódî
 {

243 
	gid
;

244 
	gÀn
;

247 
c⁄åﬁ_evít_hódî
 
c⁄åﬁ_evít_h™dÀr_begö
[];

248 
c⁄åﬁ_evít_hódî
 
c⁄åﬁ_evít_h™dÀr_íd
[];

251 
	#REGISTER_CONTROL_EVENT_HANDLER
(
c⁄åﬁ
, 
_id
) \

252 c⁄° 
c⁄åﬁ
##
_evít_h™dÀr
 
__
##c⁄åﬁ##
_evít_h™dÀr_
##
_id
 \

253 
	`£c
(.
c⁄åﬁ_evít_h™dÀr
) = { \

254 .
hódî
 = { \

255 .
id
 = 
_id
, \

256 .
Àn
 = (
c⁄åﬁ
##
_evít_h™dÀr
), \

258 

	)

262 
ölöe
 *
c⁄åﬁ_evít_h™dÀr_f‹_id
(
id
)

264 
c⁄åﬁ_evít_hódî
 *
	gp
;

266 
	gp
 = 
c⁄åﬁ_evít_h™dÀr_begö
;Ö < 
	gc⁄åﬁ_evít_h™dÀr_íd
;) {

267 i‡(
	gp
->
	gid
 =
id
) {

268  
p
;

270 
	gp
 = (
u8
 *)
p
 +Ö->
Àn
;

273  
	gNULL
;

	@include_lib/ui/ui/img.h

1 #i‚de‡
UI_IMG_H


2 
	#UI_IMG_H


	)

4 
	~"ui/ui_c‹e.h
"

21 
	#image_£t_css
(
img
, 
css
) \

22 
	`ui_c‹e_£t_ñemít_css
(&(
img
)->
ñm
, 
css
)

	)

	@include_lib/ui/ui/layer.h

1 #i‚de‡
LAYER_H


2 
	#LAYER_H


	)

5 
	~"ui/œyout.h
"

6 
	~"ui/c⁄åﬁ.h
"

9 
	sœyî
 {

10 
ñemít
 
	mñm
;

11 
u8
 
	mhide
;

12 
u8
 
	möôed
;

13 
u8
 
	mhighlight
;

14 
døw_c⁄ãxt
 
	mdc
;

15 
œyout
 *
	mœyout
;

16 c⁄° 
œyî_öfo
 *
	möfo
;

17 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

21 
	#œyî_f‹_id
(
id
) \

22 (
œyî
 *)
	`ui_c‹e_gë_ñemít_by_id
(
id
);

	)

25 
œyî
 *
œyî_√w
(c⁄° 
œyî_öfo
 *
öfo
, 
num
, 
ñemít
 *
∑ª¡
);

28 
œyî_dñëe_¥obe
(
œyî
 *œyî, 
num
);

30 
œyî_dñëe
(
œyî
 *œyî, 
num
);

32 
œyî_show
(
id
);

34 
œyî_hide
(
id
);

36 
œyî_toggÀ
(
id
);

	@include_lib/ui/ui/layout.h

1 #i‚de‡
LAYOUT_H


2 
	#LAYOUT_H


	)

5 
	~"ui/ui_c‹e.h
"

6 
	~"ui/c⁄åﬁ.h
"

12 
	sœyout
 {

13 
ñemít
 
	mñm
;

14 
u8
 
	mhide
;

15 
u8
 
	möôed
;

16 
u8
 
	mªÀa£
;

17 
œyout
 *
	mœyout
;

18 c⁄° 
œyout_öfo
 *
	möfo
;

19 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

24 
	#œyout_f‹_id
(
id
) \

25 (
œyout
 *)
	`ui_c‹e_gë_ñemít_by_id
(
id
);

	)

28 
œyout
 *
œyout_√w
(c⁄° 
œyout_öfo
 *, , 
ñemít
 *);

30 
œyout_dñëe_¥obe
(
œyout
 *œyout, 
num
);

32 
œyout_dñëe
(
œyout
 *œyout, 
num
);

34 
œyout_show
(
id
);

36 
œyout_hide
(
id
);

38 
œyout_toggÀ
(
id
);

40 
œyout_⁄_focus
(
œyout
 *layout);

41 
œyout_lo£_focus
(
œyout
 *layout);

	@include_lib/ui/ui/p.h

1 #i‚de‡
UI_P_H


2 
	#UI_P_H


	)

4 
	~"ui/ui_c‹e.h
"

6 
	sui_°r
 {

7 c⁄° *
	mf‹m©
;

8 *
	m°r
;

11 
	sñemít_ãxt
 {

12 
ñemít
 
	mñm
;

13 *
	m°r
;

14 c⁄° *
	mf‹m©
;

15 *
	m¥iv
;

16 
	mcﬁ‹
;

17 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

22 
ãxt_ñemít_£t_ãxt
(
ñemít_ãxt
 *
ãxt
, *
°r
,

23 c⁄° *
f‹m©
, 
cﬁ‹
);

26 
ãxt_ñemít_öô
(
ñemít_ãxt
 *
ãxt
, 
id
,

27 c⁄° 
ñemít_css
 *
css
,

28 c⁄° 
ñemít_evít_a˘i⁄
 *
a˘i⁄
);

31 
ãxt_ñemít_£t_evít_h™dÀr
(
ñemít_ãxt
 *
ãxt
, *
¥iv
,

32 c⁄° 
ñemít_evít_h™dÀr
 *
h™dÀr
);

	@include_lib/ui/ui/play_control.h

1 #i‚de‡
PLAY_CONTROL_H


2 
	#PLAY_CONTROL_H


	)

5 
	~"võw.h
"

8 
	s∂ay_˘æ
 {

9 
võw_group
 *
	mgroup
;

11 (*
	m⁄_˛ick
)(
	m∂ay_˘æ
 *, );

12 (*
	m⁄_touch
)(
	m∂ay_˘æ
 *, 
	mtouch_evít
 *);

13 } 
	mh
;

14 (*
	m⁄_hﬁd
)(
	m∂ay_˘æ
 *, );

15 (*
	m⁄_ch™ge
)(
	m∂ay_˘æ
 *, );

23 
	#REGISTER_PLAY_CTRL_ON_CLICK
(
id
, 
⁄_˛ick
) \

24 
	`REGISTER_VIEW_ON_CLICK
(
id
, 
⁄_˛ick
)

	)

26 
	#REGISTER_PLAY_CTRL_ON_HOLD
(
id
, 
⁄_hﬁd
) \

27 
	`REGISTER_VIEW_ON_HOLD
(
id
, 
⁄_hﬁd
)

	)

	@include_lib/ui/ui/slider.h

1 #i‚de‡
SLIDER_H


2 
	#SLIDER_H


	)

8 
	mUNIT_TIME
,

9 
	mUINT_PERSENT
,

12 
	s¶idî_öfo
 {

14 c⁄° *
	mf‹m©
;

15 
u32
 
	mvÆ
;

19 
	s¶idî
 {

22 
u32
 
	mcuº_vÆ
;

23 
u32
 
	mtŸÆ_vÆ
;

24 (*
	m⁄_ch™ge
)(*, );

32 
	#REGISTER_SLIDER_ON_CHANGE
(
id
, 
⁄_ch™ge
) \

33 
	`REGISTER_VIEW_ON_CHANGE
(
id
, 
⁄_ch™ge
)

	)

	@include_lib/ui/ui/ui.h

1 #i‚de‡
UI_CORE_H


2 
	#UI_CORE_H


	)

4 
	~"wödow.h
"

5 
	~"ui_buâ⁄.h
"

6 
	~"ui_grid.h
"

7 
	~"ui_time.h
"

8 
	~"ui_ˇmîa.h
"

9 
	~"ui_pic.h
"

10 
	~"ui_ãxt.h
"

11 
	~"ui_b©ãry.h
"

12 
	~"ui_brow£r.h
"

14 
	~<°d¨g.h
>

17 
	suimsg_h™dl
 {

18 c⁄° *
	mmsg
;

19 (*
	mh™dÀr
)(c⁄° *
	mty≥
, 
u32
 
	m¨gs
);

22 
ui_‰amew‹k_öô
();

24 
ui_£t_°yÀ_fûe
(
ui_°yÀ
 *
°yÀ
);

26 
ui_°yÀ_fûe_vîsi⁄_com∑ª
(
vîsi⁄
);

28 
ui_show
(
id
);

30 
ui_hide
(
id
);

32 
ui_£t_ˇŒ
((*
func
)(), 
∑øm
);

34 
	`ui_evít_⁄key
(
ñemít_key_evít
 *
e
);

36 
	`ui_evít_⁄touch
(
ñemít_touch_evít
 *
e
);

38 
ñemít
 *
	`ui_gë_highlight_chûd_by_id
(
id
);

40 
	`ui_no_highlight_ñemít
(
ñemít
 *
ñm
);

41 
	`ui_no_highlight_ñemít_by_id
(
id
);

42 
	`ui_highlight_ñemít
(
ñemít
 *
ñm
);

43 
	`ui_highlight_ñemít_by_id
(
id
);

45 
	`ui_gë_cuºít_wödow_id
();

47 
	`ui_ªgi°î_msg_h™dÀr
(
id
, c⁄° 
uimsg_h™dl
 *
h™dl
);

49 
	`ui_mesßge_h™dÀr
(
id
, c⁄° *
msg
, 
va_li°
);

55 
	`ui_⁄touch_lock
(*
ñm
);

56 
	`ui_⁄touch_u∆ock
(*
ñm
);

61 
	`ui_lock_œyî
(
id
);

62 
	`ui_u∆ock_œyî
(
id
);

	@include_lib/ui/ui/ui.ld

2 
	g_ui_°yÀ_begö
 = .;

3 
PROVIDE
(
ui_°yÀ_begö
 = .);

4 *(.
	gui_°yÀ
)

5 
	g_ui_°yÀ_íd
 = .;

6 
PROVIDE
(
ui_°yÀ_íd
 = .);

8 
	g_ñm_evít_h™dÀr_begö_UPGRADE
 = .;

9 
PROVIDE
(
ñm_evít_h™dÀr_begö_UPGRADE
 = .);

10 *(.
	gñm_evít_h™dÀr_UPGRADE
)

11 
	g_ñm_evít_h™dÀr_íd_UPGRADE
 = .;

12 
PROVIDE
(
ñm_evít_h™dÀr_íd_UPGRADE
 = .);

14 
	g_ñm_evít_h™dÀr_begö_JL02
 = .;

15 
PROVIDE
(
ñm_evít_h™dÀr_begö_JL02
 = .);

16 *(.
	gñm_evít_h™dÀr_JL02
)

17 
	g_ñm_evít_h™dÀr_íd_JL02
 = .;

18 
PROVIDE
(
ñm_evít_h™dÀr_íd_JL02
 = .);

20 
	g_ñm_evít_h™dÀr_begö_ANI
 = .;

21 
PROVIDE
(
ñm_evít_h™dÀr_begö_ANI
 = .);

22 *(.
	gñm_evít_h™dÀr_ANI
)

23 
	g_ñm_evít_h™dÀr_íd_ANI
 = .;

24 
PROVIDE
(
ñm_evít_h™dÀr_íd_ANI
 = .);

26 
	g_ñm_evít_h™dÀr_begö_LY
 = .;

27 
PROVIDE
(
ñm_evít_h™dÀr_begö_LY
 = .);

28 *(.
	gñm_evít_h™dÀr_LY
)

29 
	g_ñm_evít_h™dÀr_íd_LY
 = .;

30 
PROVIDE
(
ñm_evít_h™dÀr_íd_LY
 = .);

32 
	g_c⁄åﬁ_evít_h™dÀr_begö
 = .;

33 
PROVIDE
(
c⁄åﬁ_evít_h™dÀr_begö
 = .);

34 *(.
	gc⁄åﬁ_evít_h™dÀr
)

35 
	g_c⁄åﬁ_evít_h™dÀr_íd
 = .;

36 
PROVIDE
(
c⁄åﬁ_evít_h™dÀr_íd
 = .);

38 
	g_c⁄åﬁ_›s_begö
 = .;

39 
PROVIDE
(
c⁄åﬁ_›s_begö
 = .);

40 *(.
	gc⁄åﬁ_›s
)

41 
	g_c⁄åﬁ_›s_íd
 = .;

42 
PROVIDE
(
c⁄åﬁ_›s_íd
 = .);

44 
	g_vg_evít_h™dÀr_begö
 = .;

45 
PROVIDE
(
vg_evít_h™dÀr_begö
 = .);

46 *(.
	gvg_evít_h™dÀr
)

47 
	g_vg_evít_h™dÀr_íd
 = .;

48 
PROVIDE
(
vg_evít_h™dÀr_íd
 = .);

50 
	g_⁄_show_m≠_begö
 = .;

51 
PROVIDE
(
⁄_show_m≠_begö
 = .);

52 *(.
	g⁄_show_m≠
)

53 
	g_⁄_show_m≠_íd
 = .;

54 
PROVIDE
(
⁄_show_m≠_íd
 = .);

56 
	g_⁄_˛ick_m≠_begö
 = .;

57 
PROVIDE
(
⁄_˛ick_m≠_begö
 = .);

58 *(.
	g⁄_˛ick_m≠
)

59 
	g_⁄_˛ick_m≠_íd
 = .;

60 
PROVIDE
(
⁄_˛ick_m≠_íd
 = .);

62 
	g_⁄_touch_m≠_begö
 = .;

63 
PROVIDE
(
⁄_touch_m≠_begö
 = .);

64 *(.
	g⁄_touch_m≠
)

65 
	g_⁄_touch_m≠_íd
 = .;

66 
PROVIDE
(
⁄_touch_m≠_íd
 = .);

68 
	g_⁄_ch™ge_m≠_begö
 = .;

69 
PROVIDE
(
⁄_ch™ge_m≠_begö
 = .);

70 *(.
	g⁄_ch™ge_m≠
)

71 
	g_⁄_ch™ge_m≠_íd
 = .;

72 
PROVIDE
(
⁄_ch™ge_m≠_íd
 = .);

74 
	g_⁄_key_m≠_begö
 = .;

75 
PROVIDE
(
⁄_key_m≠_begö
 = .);

76 *(.
	g⁄_key_m≠
)

77 
	g_⁄_key_m≠_íd
 = .;

78 
PROVIDE
(
⁄_key_m≠_íd
 = .);

80 
	g_img_lﬂdî_begö
 = .;

81 
PROVIDE
(
img_lﬂdî_begö
 = .);

82 *(.
	gimg_lﬂdî
)

83 
	g_img_lﬂdî_íd
 = .;

84 
PROVIDE
(
img_lﬂdî_íd
 = .);

86 
	g_b©ãry_nŸify_begö
 = .;

87 
PROVIDE
(
b©ãry_nŸify_begö
 = .);

88 *(.
	gb©ãry_nŸify
)

89 
	g_b©ãry_nŸify_íd
 = .;

90 
PROVIDE
(
b©ãry_nŸify_íd
 = .);

	@include_lib/ui/ui/ui_animation.h

1 #i‚de‡
UI_PIC_H


2 
	#UI_PIC_H


	)

4 
	~"ui/ui_c‹e.h
"

9 
	sui_™im©i⁄
 {

10 
ñemít
 
	mñm
;

11 
u16
 
	mödex
;

12 
u16
 
	mlo›
;

13 *
	mtimî
;

14 c⁄° 
ui_™im©i⁄_öfo
 *
	möfo
;

15 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

	@include_lib/ui/ui/ui_battery.h

1 #i‚de‡
UI_BATTERY_H


2 
	#UI_BATTERY_H


	)

5 
	~"ui/c⁄åﬁ.h
"

6 
	~"li°.h
"

13 
	sui_b©ãry
 {

14 
ñemít
 
	mñm
;

15 
	m§c
;

16 
u8
 
	mödex
;

17 
li°_hód
 
	míåy
;

18 c⁄° 
ui_b©ãry_öfo
 *
	möfo
;

19 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

25 
ui_b©ãry_Àvñ_ch™ge
(
≥r£¡
, 
öch¨ge
);

	@include_lib/ui/ui/ui_browser.h

1 #i‚de‡
UI_BROWSER_H


2 
	#UI_BROWSER_H


	)

6 
	~"ui/ui_c‹e.h
"

7 
	~"ui/c⁄åﬁ.h
"

12 
	sui_brow£r
 {

13 
ñemít
 
	mñm
;

14 
ui_fûe_brow£r
 *
	mhdl
;

15 
	m‹dî
;

16 
u8
 
	möôed
;

17 
u8
 
	mhide_by£lf
;

18 
u8
 
	môem_num
;

19 
u8
 
	mhighlight
;

20 
u8
 
	mshow_mode
;

21 
u16
 
	mcur_numbî
;

22 
u16
 
	mfûe_numbî
;

23 
ui_grid
 *
	mgrid
;

24 c⁄° *
	m∑th
;

25 c⁄° *
	m·y≥
;

26 c⁄° 
ui_brow£r_öfo
 *
	möfo
;

27 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

31 
	#ui_fûe_brow£r_cur_ôem
(
bro
Ë
	`ui_grid_cur_ôem
(((
ui_brow£r
 *)bro)->
grid
)

	)

34 
ui_fûe_brow£r_∑ge_num
(
ui_brow£r
 *
bro
);

36 
ui_fûe_brow£r_cur_∑ge
(
ui_brow£r
 *
bro
, *
fûe_num
);

38 
ui_fûe_brow£r_£t_∑ge
(
ui_brow£r
 *
bro
, 
∑ge
);

40 
ui_fûe_brow£r_£t_∑ge_by_id
(
id
, 
∑ge
);

42 
ui_fûe_brow£r_√xt_∑ge
(
ui_brow£r
 *
bro
);

44 
ui_fûe_brow£r_√xt_∑ge_by_id
(
id
);

46 
ui_fûe_brow£r_¥ev_∑ge
(
ui_brow£r
 *
bro
);

48 
ui_fûe_brow£r_¥ev_∑ge_by_id
(
id
);

50 
ui_fûe_brow£r_£t_dú
(
ui_brow£r
 *
bro
, c⁄° *
∑th
, c⁄° *
·y≥
);

52 
ui_fûe_brow£r_£t_dú_by_id
(
id
, c⁄° *
∑th
, c⁄° *
·y≥
);

54 
ui_fûe_brow£r_gë_fûe_©ås
(
ui_brow£r
 *
bro
, 
ôem
,

55 
ui_fûe_©ås
 *
©ås
);

57 
ui_fûe_brow£r_£t_fûe_©ås
(
ui_brow£r
 *
bro
, 
ôem
,

58 
ui_fûe_©ås
 *
©ås
);

60 *
ui_fûe_brow£r_›í_fûe
(
ui_brow£r
 *
bro
, 
ôem
);

63 
ui_fûe_brow£r_dñ_fûe
(
ui_brow£r
 *
bro
, 
ôem
);

65 
ui_fûe_brow£r_highlight_ôem
(
ui_brow£r
 *
bro
, 
ôem
, 
boﬁ
 
yes
);

67 *
ui_fûe_brow£r_gë_chûd_by_id
(
ui_brow£r
 *
bro
, 
ôem
, 
id
);

	@include_lib/ui/ui/ui_button.h

1 #i‚de‡
UI_BUTTON_H


2 
	#UI_BUTTON_H


	)

5 
	~"ui/c⁄åﬁ.h
"

6 
	~"ui/ui_c‹e.h
"

8 
	sbuâ⁄
 {

9 
ñemít
 
	mñm
;

10 
u8
 
	mimage_ödex
;

11 c⁄° 
ui_buâ⁄_öfo
 *
	möfo
;

12 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

	@include_lib/ui/ui/ui_camera.h

1 #i‚de‡
UI_CAMERA_H


2 
	#UI_CAMERA_H


	)

4 
	~"ui/c⁄åﬁ.h
"

5 
	~"ui/ui_c‹e.h
"

12 
	sui_ˇmîa
 {

13 
ñemít
 
	mñm
;

14 
	mfd
;

15 c⁄° 
ui_ˇmîa_öfo
 *
	möfo
;

16 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

21 
	#ui_ˇmîa_f‹_id
(
id
) \

22 (
ui_ˇmîa
*)
	`ui_c‹e_gë_ñemít_by_id
(
id
)

	)

26 
ªgi°î_ui_ˇmîa_h™dÀr
(c⁄° 
ñemít_evít_h™dÀr
 *
h™dÀr
);

28 
ui_ˇmîa_£t_ª˘
(
id
, 
ª˘
 *
r
);

	@include_lib/ui/ui/ui_core.h

1 #i‚de‡
UI_ELEMENT_CORE_H


2 
	#UI_ELEMENT_CORE_H


	)

4 
	~"ty≥def.h
"

5 
	~"ª˘.h
"

6 
	~"sy°em/evít.h
"

7 
	~"fs/fs.h
"

10 
	#UI_CTRL_BUTTON
 0

	)

12 
	gñemít
;

15 #ifde‡
off£tof


16 #unde‡
off£tof


18 #ifde‡
c⁄èöî_of


19 #unde‡
c⁄èöî_of


22 
	#off£tof
(
ty≥
, 
memb
) \

23 (()(&((
ty≥
 *)0)->
memb
))

	)

25 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
memb
) \

26 ((
ty≥
 *)((*)
±r
 - 
	`off£tof
—y≥, 
memb
)))

	)

28 
	eui_dúe˘i⁄
 {

29 
	mUI_DIR_UP
,

30 
	mUI_DIR_DOWN
,

31 
	mUI_DIR_LEFT
,

32 
	mUI_DIR_RIGHT
,

35 
	eui_Æign
 {

36 
	mUI_ALIGN_LEFT
 = 0,

37 
	mUI_ALIGN_CENTER
,

38 
	mUI_ALIGN_RIGHT
,

43 
	mPOSITION_ABSOLUTE
 = 0,

44 
	mPOSITION_RELATIVE
 = 1,

48 
	mELM_EVENT_TOUCH_DOWN
,

49 
	mELM_EVENT_TOUCH_MOVE
,

50 
	mELM_EVENT_TOUCH_HOLD
,

51 
	mELM_EVENT_TOUCH_UP
,

56 
	mELM_EVENT_KEY_CLICK
,

57 
	mELM_EVENT_KEY_LONG
,

58 
	mELM_EVENT_KEY_HOLD
,

62 
	mELM_STA_INITED
,

65 
	mELM_STA_HIDE
,

66 
	mELM_STA_SHOW
,

67 
	mELM_STA_PAUSE
,

71 
	mELM_FLAG_NORMAL
,

72 
	mELM_FLAG_HEAD
,

76 
	mDC_DATA_FORMAT_OSD8
,

77 
	mDC_DATA_FORMAT_YUV420
,

78 
	mDC_DATA_FORMAT_OSD16
,

79 
	mDC_DATA_FORMAT_OSD8A
,

83 
	sñemít_touch_evít
 {

84 
	mevít
;

85 
	mxoff£t
;

86 
	myoff£t
;

87 
u8
 
	mhﬁd_up
;

88 
u8
 
	m⁄focus
;

89 
u8
 
	mmove_dú
;

90 
posôi⁄
 
	mpos
;

91 
posôi⁄
 
	mmov
;

92 *
	m¥iv©e_d©a
;

95 
	sñemít_key_evít
 {

96 
u8
 
	mevít
;

97 
u8
 
	mvÆue
;

98 *
	m¥iv©e_d©a
;

101 
	#ELM_KEY_EVENT
(
e
Ë(0x0000 | (e->
evít
Ë| (e->
vÆue
 << 8))

	)

102 
	#ELM_TOUCH_EVENT
(
e
Ë(0x1000 | (e->
evít
))

	)

103 
	#ELM_CHANGE_EVENT
(
e
Ë(0x2000 | (e->
evít
))

	)

105 
	eñemít_ch™ge_evít
 {

106 
	mON_CHANGE_INIT
,

107 
	mON_CHANGE_TRY_OPEN_DC
,

108 
	mON_CHANGE_FIRST_SHOW
,

109 
	mON_CHANGE_SHOW_PROBE
,

110 
	mON_CHANGE_SHOW
,

111 
	mON_CHANGE_SHOW_POST
,

112 
	mON_CHANGE_HIDE
,

113 
	mON_CHANGE_HIGHLIGHT
,

114 
	mON_CHANGE_RELEASE_PROBE
,

115 
	mON_CHANGE_RELEASE
,

116 
	mON_CHANGE_ANIMATION_END
,

117 
	mON_CHANGE_SHOW_COMPLETED
,

121 
	sñemít_evít_h™dÀr
 {

122 
	mid
;

123 (*
	m⁄touch
)(*, 
	mñemít_touch_evít
 *);

124 (*
	m⁄key
)(*, 
	mñemít_key_evít
 *);

125 (*
	m⁄ch™ge
)(*, 
	mñemít_ch™ge_evít
, *);

128 
	sja˘i⁄
 {

129 
u32
 
	mshow
;

130 
u32
 
	mhide
;

134 
	mELM_ACTION_HIDE
 = 0,

135 
	mELM_ACTION_SHOW
,

136 
	mELM_ACTION_TOGGLE
,

137 
	mELM_ACTION_HIGHLIGHT
,

140 
	sevít_a˘i⁄
 {

141 
u16
 
	mevít
;

142 
u16
 
	ma˘i⁄
;

143 
	mid
;

144 
u8
 
	m¨gc
;

145 
	m¨gv
[];

148 
	sñemít_evít_a˘i⁄
 {

149 
u16
 
	mnum
;

150 
evít_a˘i⁄
 
	ma˘i⁄
[0];

154 
	sdøw_c⁄ãxt
 {

155 
u8
 
	mªf
;

156 
u8
 
	mÆpha
;

157 
u8
 
	mÆign
;

158 
u8
 
	md©a_f‹m©
;

159 
u8
 
	m∑ge
;

160 
u8
 
	mbuf_num
;

161 *
	mh™dl
;

162 
ñemít
 *
	mñm
;

163 
ª˘
 
	mª˘
;

164 
ª˘
 
	mdøw
;

165 *
	mdc
;

168 
	scss_b‹dî
 {

169 
u8
 
	mÀ·
;

170 
u8
 
	mt›
;

171 
u8
 
	mright
;

172 
u8
 
	mbŸtom
;

173 
	mcﬁ‹
: 24;

176 
	sñemít_css
 {

177 
u8
 
	mÆign
;

178 
u8
 
	mövisibÀ
;

179 
u8
 
	mz_‹dî
;

180 
	mÀ·
;

181 
	mt›
;

182 
	mwidth
;

183 
	mheight
;

184 
u32
 
	mbackground_cﬁ‹
: 24;

185 
u32
 
	mÆpha
: 8;

186 
	mbackground_image
: 24;

187 
	mimage_quadø¡
: 8;

188 
css_b‹dî
 
	mb‹dî
;

191 
	sñemít_›s
 {

192 (*
	mshow
)(
	mñemít
 *);

193 (*
	mªdøw
)(
	mñemít
 *, 
	mª˘
 *);

196 
	sñemít
 {

197 
u8
 
	mhighlight
;

198 
u8
 
	m°©e
;

199 
u16
 
	mªf
;

200 
u32
 
	mÆive
;

201 
	mid
;

202 
ñemít
 *
	m∑ª¡
;

203 
li°_hód
 
	msiblög
;

204 
li°_hód
 
	mchûd
;

205 
ñemít
 *
	mfocus
;

206 
ñemít_css
 
	mcss
;

207 
døw_c⁄ãxt
 *
	mdc
;

208 c⁄° 
ñemít_›s
 *
	m›s
;

209 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

210 c⁄° 
ñemít_evít_a˘i⁄
 *
	ma˘i⁄
;

213 
	sui_°yÀ
 {

214 c⁄° *
	mfûe
;

215 
u32
 
	mvîsi⁄
;

219 
	mUI_FTYPE_VIDEO
 = 0,

220 
	mUI_FTYPE_IMAGE
,

221 
	mUI_FTYPE_AUDIO
,

222 
	mUI_FTYPE_DIR
,

223 
	mUI_FTYPE_UNKNOW
 = 0xff,

226 
	sui_fûe_©ås
 {

227 *
	mf‹m©
;

228 
	m‚ame
[128];

229 
vfs_©å
 
	m©å
;

230 
u8
 
	m·y≥
;

231 
u16
 
	mfûe_num
;

232 
u32
 
	mfûm_Àn
;

235 
	sui_ãxt_©ås
 {

236 c⁄° *
	mtxt
;

237 c⁄° *
	mcode
;

238 
	mcﬁ‹
;

239 
	m°æí
;

240 
	mdi•Àn
;

241 
	mícode
;

242 
	mídün
;

243 
u32
 
	mÊags
;

246 
	sui_fûe_brow£r
 {

247 
	mfûe_numbî
;

248 *
	m¥iv©e_d©a
;

251 
	#ELEMENT_ALIVE
 0x53547a7b

	)

253 
	#ñemít_b‹n
(
ñm
) \

254 
ñm
->
Æive
 = 
ELEMENT_ALIVE


	)

256 
	#ñemít_Æive
(
ñm
) \

257 (
ñm
->
Æive
 =
ELEMENT_ALIVE
)

	)

260 
	#li°_f‹_óch_chûd_ñemít
(
p
, 
ñm
) \

261 
	`li°_f‹_óch_íåy
(
p
, &(
ñm
)->
chûd
, 
siblög
)

	)

263 
	#li°_f‹_óch_chûd_ñemít_ªvî£
(
p
, 
n
, 
ñm
) \

264 
	`li°_f‹_óch_íåy_ªvî£_ß„
(
p
, 
n
, &(
ñm
)->
chûd
, 
siblög
)

	)

266 
	#li°_f‹_óch_chûd_ñemít_ß„
(
p
, 
n
, 
ñm
) \

267 
	`li°_f‹_óch_íåy_ß„
(
p
, 
n
, &(
ñm
)->
chûd
, 
siblög
)

	)

269 
	sui_∂©f‹m_≠i
 {

270 *(*
	mmÆloc
)();

271 (*
	m‰ì
)(*);

273 (*
	mlﬂd_°yÀ
)(
	mui_°yÀ
 *);

275 *(*
	mlﬂd_wödow
)(
	mid
);

276 (*
	mu∆ﬂd_wödow
)(*);

278 (*
	m›í_døw_c⁄ãxt
)(
	mdøw_c⁄ãxt
 *);

279 (*
	mgë_døw_c⁄ãxt
)(
	mdøw_c⁄ãxt
 *);

280 (*
	mput_døw_c⁄ãxt
)(
	mdøw_c⁄ãxt
 *);

281 (*
	m£t_døw_c⁄ãxt
)(
	mdøw_c⁄ãxt
 *);

282 (*
	m˛o£_døw_c⁄ãxt
)(
	mdøw_c⁄ãxt
 *);

284 (*
	mfûl_ª˘
)(
	mdøw_c⁄ãxt
 *, 
u32
 
	mcﬁ‹
);

285 (*
	mdøw_ª˘
)(
	mdøw_c⁄ãxt
 *, 
css_b‹dî
 *
	mb‹dî
);

286 (*
	mdøw_image
)(
	mdøw_c⁄ãxt
 *, 
u32
 
	m§c
, 
u8
 
	mquadø¡
);

289 (*
	mshow_ãxt
)(
	mdøw_c⁄ãxt
 *, 
	mui_ãxt_©ås
 *);

291 (*
	m›í_devi˚
)(
	mdøw_c⁄ãxt
 *, c⁄° *
	mdevi˚
);

292 (*
	m˛o£_devi˚
)();

294 *(*
	m£t_timî
)(*, (*
	mˇŒback
)(*), 
u32
 
	mm£c
);

295 (*
	mdñ_timî
)(*);

297 
	mui_fûe_brow£r
 *(*
	mfûe_brow£r_›í
)(
ª˘
 *
	mr
,

298 c⁄° *
	m∑th
, c⁄° *
	m·y≥
, 
	mshow_mode
);

300 (*
	mgë_fûe_©ås
)(
	mui_fûe_brow£r
 *, 
ui_fûe_©ås
 *
	m©ås
);

302 (*
	m£t_fûe_©ås
)(
	mui_fûe_brow£r
 *, 
ui_fûe_©ås
 *
	m©ås
);

304 (*
	m˛ór_fûe_¥evõw
)(
	mui_fûe_brow£r
 *, 
ª˘
 *
	mr
);

306 (*
	mshow_fûe_¥evõw
)(
	mui_fûe_brow£r
 *, 
ª˘
 *
	mr
, 
ui_fûe_©ås
 *
	m©ås
);

308 (*
	mÊush_fûe_¥evõw
)(
	mui_fûe_brow£r
 *);

310 *(*
	m›í_fûe
)(
	mui_fûe_brow£r
 *, 
ui_fûe_©ås
 *
	m©ås
);

311 (*
	mdñëe_fûe
)(
	mui_fûe_brow£r
 *, 
ui_fûe_©ås
 *
	m©ås
);

313 (*
	mmove_fûe_¥evõw
)(
ui_fûe_brow£r
 *
	m_bro
, 
ª˘
 *
	md°
, ª˘ *
	m§c
);

315 (*
	mfûe_brow£r_˛o£
)(
	mui_fûe_brow£r
 *);

319 c⁄° 
ui_∂©f‹m_≠i
 *
∂©f‹m_≠i
;

321 c⁄° 
ñemít_evít_h™dÀr
 
dumy_h™dÀr
;

323 
	sj™im©i⁄
 {

324 
u8
 
	m≥r£¡
[5];

325 
u8
 
	mdúe˘i⁄
;

326 
u8
 
	m∂ay_°©e
;

327 
u8
 
	môî©i⁄_cou¡
;

328 
u16
 
	mdñay
;

329 
u16
 
	mduøti⁄
;

330 
ñemít_css
 
	mcss
[0];

334 
ñemít_evít_h™dÀr
 *
ñm_evít_h™dÀr_begö
;

335 
ñemít_evít_h™dÀr
 *
ñm_evít_h™dÀr_íd
;

338 
	#___REGISTER_UI_EVENT_HANDLER
(
°yÀ
, 
_id
) \

339 c⁄° 
ñemít_evít_h™dÀr
 
ñemít_evít_h™dÀr_
##
_id
 \

340 
	`£c
(.
ñm_evít_h™dÀr_
##
°yÀ
) = { \

341 .
id
 = 
_id
,

	)

343 
	#__REGISTER_UI_EVENT_HANDLER
(
°yÀ
, 
_id
) \

344 
	`___REGISTER_UI_EVENT_HANDLER
(
°yÀ
, 
_id
)

	)

346 
	#REGISTER_UI_EVENT_HANDLER
(
id
) \

347 
	`__REGISTER_UI_EVENT_HANDLER
(
STYLE_NAME
, 
id
)

	)

351 
	sui_°yÀ_öfo
 {

352 c⁄° *
	g«me
;

353 
ñemít_evít_h™dÀr
 *
	gbegö
;

354 
ñemít_evít_h™dÀr
 *
	gíd
;

357 
ui_°yÀ_öfo
 
ui_°yÀ_begö
[];

358 
ui_°yÀ_öfo
 
ui_°yÀ_íd
[];

360 
	#__REGISTER_UI_STYLE
(
°yÀ_«me
) \

361 
ñemít_evít_h™dÀr
 
ñm_evít_h™dÀr_begö_
##
°yÀ_«me
[]; \

362 
ñemít_evít_h™dÀr
 
ñm_evít_h™dÀr_íd_
##
°yÀ_«me
[]; \

363 c⁄° 
ui_°yÀ_öfo
 
ui_°yÀ_
##
°yÀ_«me
 
	`£c
(.
ui_°yÀ
) = { \

364 .
«me
 = #style_name, \

365 .
begö
 = 
ñm_evít_h™dÀr_begö_
##
°yÀ_«me
, \

366 .
íd
 = 
ñm_evít_h™dÀr_íd_
##
°yÀ_«me
, \

367 };

	)

369 
	#REGISTER_UI_STYLE
(
°yÀ_«me
) \

370 
	`__REGISTER_UI_STYLE
(
°yÀ_«me
)

	)

373 
ölöe
 
ñemít_evít_h™dÀr
 *
ñemít_evít_h™dÀr_f‹_id
(
u32
 
id
)

375 
ñemít_evít_h™dÀr
 *
	gp
;

377 
	gp
 = 
ñm_evít_h™dÀr_begö
;Ö < 
	gñm_evít_h™dÀr_íd
;Ö++) {

378 i‡(
	gp
->
	gid
 =
id
) {

379  
p
;

383  
	gNULL
;

389 
	#ui_c‹e_gë_ñemít_css
(
ñm
) \

390 &((
ñemít
 *)(
ñm
))->
css


	)

392 
	#ui_c‹e_ñemít_övißbÀ
(
ñm
, 
i
) \

393 ((
ñemít
 *)(
ñm
))->
css
.
övisibÀ
 = 
i


	)

396 
ui_c‹e_öô
(c⁄° 
ui_∂©f‹m_≠i
 *
≠i
, 
ª˘
 *rect);

398 
ui_c‹e_£t_°yÀ
(c⁄° *
°yÀ
);

400 
ui_c‹e_£t_rŸ©e
(
_rŸ©e
);

402 
ui_c‹e_gë_rŸ©e
();

404 *
ui_c‹e_mÆloc
(
size
);

406 
ui_c‹e_‰ì
(*);

408 
ui_c‹e_ñemít_öô
(
ñemít
 *, 
u32
 
id
,

409 c⁄° 
ñemít_css
 *,

410 c⁄° 
ñemít_evít_h™dÀr
 *,

411 c⁄° 
ñemít_evít_a˘i⁄
 *);

413 
ui_c‹e_gë_ñemít_abs_ª˘
(
ñemít
 *
ñm
, 
ª˘
 *rect);

415 
ui_c‹e_≠≥nd_chûd
(*
_chûd
);

417 
ñemít
 *
ui_c‹e_gë_fú°_chûd
();

419 
ui_c‹e_ªmove_ñemít
(*
_chûd
);

422 
ui_c‹e_›í_døw_c⁄ãxt
(
døw_c⁄ãxt
 *
dc
, 
ñemít
 *
ñm
);

424 
ui_c‹e_˛o£_døw_c⁄ãxt
(
døw_c⁄ãxt
 *
dc
);

426 
ui_c‹e_show
(*
_ñm
, 
öô
);

428 
ui_c‹e_hide
(*
_ñm
);

430 
ñemít
 *
gë_ñemít_by_id
(ñemíà*
ñm
, 
u32
 
id
);

432 
ñemít
 *
ui_c‹e_gë_ñemít_by_id
(
u32
 
id
);

435 
ñemít
 *
ui_c‹e_gë_up_ñemít
(ñemíà*
ñm
);

436 
ñemít
 *
ui_c‹e_gë_down_ñemít
(ñemíà*
ñm
);

437 
ñemít
 *
ui_c‹e_gë_À·_ñemít
(ñemíà*
ñm
);

438 
ñemít
 *
ui_c‹e_gë_right_ñemít
(ñemíà*
ñm
);

440 
ui_c‹e_ñemít_⁄touch
(
ñemít
 *, 
ñemít_touch_evít
 *
e
);

442 
ui_c‹e_⁄touch
(
ñemít_touch_evít
 *
e
);

444 
ui_c‹e_ñemít_⁄key
(
ñemít
 *
ñm
, 
ñemít_key_evít
 *
e
);

446 
ui_c‹e_⁄key
(
ñemít_key_evít
 *
e
);

448 
ui_c‹e_ñemít_≠≥nd_chûd
(
ñemít
 *
∑ª¡
, ñemíà*
chûd
);

450 
ñemít_css
 *
ui_c‹e_£t_ñemít_css
(*
_ñm
, c⁄° ñemít_cs†*
css
);

453 
ui_c‹e_ªÀa£_chûd_¥obe
(
ñemít
 *
ñm
);

455 
ui_c‹e_ªÀa£_chûd
(
ñemít
 *
ñm
);

458 
ui_c‹e_ªdøw
(*
_ñm
);

460 
ui_c‹e_highlight_ñemít
(
ñemít
 *
ñm
, 
yes
);

462 
ui_c‹e_ñemít_⁄_focus
(
ñemít
 *
ñm
, 
yes
);

465 
ui_c‹e_⁄touch_lock
(
ñemít
 *
ñm
);

467 
ui_c‹e_⁄touch_u∆ock
(
ñemít
 *
ñm
);

	@include_lib/ui/ui/ui_file_attrs.h

1 #i‚de‡
UI_FILE_ATTRS_H


2 
	#UI_FILE_ATTRS_H


	)

6 
	~"ui/ui_c‹e.h
"

7 
	~"ui/c⁄åﬁ.h
"

11 
	#FATTRS_CHILD_NUM
 (
FATTRS_CHILD_END
 - 
FATTRS_CHILD_BEGIN
)

	)

15 
	sui_Áârs
 {

16 
ñemít
 
	mñm
;

17 
	mfsize_°r
[16];

18 
ui_fûe_©ås
 
	m©ås
;

19 c⁄° 
ui_Áârs_öfo
 *
	möfo
;

20 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

26 
ui_fûe_©ås_show
(
ñemít
 *
ñm
, 
ui_fûe_©ås
 *
©ås
);

29 
ui_fûe_©ås_gë
(
ñemít
 *
ñm
, 
ui_fûe_©ås
 *
©ås
);

31 
ui_fûe_©ås_£t
(
ñemít
 *
ñm
, 
ui_fûe_©ås
 *
©ås
);

	@include_lib/ui/ui/ui_grid.h

1 #i‚de‡
UI_GRID_H


2 
	#UI_GRID_H


	)

5 
	~"ui/ui_c‹e.h
"

6 
	~"ui/c⁄åﬁ.h
"

9 
	sui_grid_ôem_öfo
 {

10 
u8
 
	mrow
;

11 
u8
 
	mcﬁ
;

12 
u8
 
	m∑ge_mode
;

13 
u8
 
	mhighlight_ödex
;

14 
u16
 
	möãrvÆ
;

15 
œyout_öfo
 *
	möfo
;

18 
	sui_grid
 {

19 
ñemít
 
	mñm
;

20 
	mhi_num
;

21 
	mhi_ödex
;

22 
	mtouch_ödex
;

23 
	m⁄focus
;

24 
u8
 
	m∑ge_mode
;

25 
u8
 
	mcﬁ_num
;

26 
u8
 
	mrow_num
;

27 
u8
 
	mshow_row
;

28 
u8
 
	mshow_cﬁ
;

29 
u8
 
	mavaû_ôem_num
;

30 
u8
 
	mpix_s¸ﬁl
;

31 
	mrŸ©e
;

32 
	mx_öãrvÆ
;

33 
	my_öãrvÆ
;

34 
	mmax_show_À·
;

35 
	mmax_show_t›
;

36 
	mmö_show_À·
;

37 
	mmö_show_t›
;

38 
	mmax_À·
;

39 
	mmax_t›
;

40 
	mmö_À·
;

41 
	mmö_t›
;

42 
	ms¸ﬁl_°ï
;

43 
œyout
 *
	môem
;

44 
œyout_öfo
 *
	môem_öfo
;

45 
ñemít
 
	mñm2
;

46 
posôi⁄
 
	mpos
;

47 
døw_c⁄ãxt
 
	mdc
;

48 c⁄° 
ui_grid_öfo
 *
	möfo
;

49 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

52 c⁄° 
ñemít_evít_h™dÀr
 
grid_ñm_h™dÀr
;

54 
ölöe
 
	$ui_grid_cur_ôem
(
ui_grid
 *
grid
)

56 i‡(
grid
->
touch_ödex
 >= 0) {

57  
grid
->
touch_ödex
;

59  
grid
->
hi_ödex
;

60 
	}
}

62 
	#ui_grid_£t_ôem
(
grid
, 
ödex
Ë(grid)->
hi_ödex
 = 
	)
index

65 
ui_grid_⁄_focus
(
ui_grid
 *
grid
);

67 
ui_grid_lo£_focus
(
ui_grid
 *
grid
);

69 
ui_grid_°©e_ª£t
(
ui_grid
 *
grid
, 
highlight_ôem
);

71 
ui_grid_highlight_ôem
(
ui_grid
 *
grid
, 
ôem
, 
boﬁ
 
yes
);

73 
ui_grid_highlight_ôem_by_id
(
id
, 
ôem
, 
boﬁ
 
yes
);

76 
ui_grid
 *
__ui_grid_√w
(
ñemít_css
 *
css
, 
id
,

77 
ui_grid_ôem_öfo
 *
öfo
, 
ñemít
 *
∑ª¡
);

	@include_lib/ui/ui/ui_pic.h

1 #i‚de‡
UI_PIC_H


2 
	#UI_PIC_H


	)

4 
	~"ui/ui_c‹e.h
"

9 
	sui_pic
 {

10 
ñemít
 
	mñm
;

11 
	mödex
;

12 c⁄° 
ui_pic_öfo
 *
	möfo
;

13 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

21 *
√w_ui_pic
(c⁄° *
_öfo
, 
ñemít
 *
∑ª¡
);

23 
ui_pic_show_image_by_id
(
id
, 
ödex
);

25 
ui_pic_£t_image_ödex
(
ui_pic
 *
pic
, 
ödex
);

	@include_lib/ui/ui/ui_player.h

1 #i‚de‡
UI_PLAYER_H


2 
	#UI_PLAYER_H


	)

6 
	~"ui/c⁄åﬁ.h
"

7 
	~"ui/ui_c‹e.h
"

14 
	sui_∂ayî
 {

15 
ñemít
 
	mñm
;

16 
	mfd
;

17 c⁄° 
ui_∂ayî_öfo
 *
	möfo
;

18 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

23 
	#ui_∂ayî_f‹_id
(
id
) \

24 (
ui_∂ayî
*)
	`ui_c‹e_gë_ñemít_by_id
(
id
)

	)

28 
ªgi°î_ui_∂ayî_h™dÀr
(c⁄° 
ñemít_evít_h™dÀr
 *
h™dÀr
);

	@include_lib/ui/ui/ui_slider.h

1 #i‚de‡
UI_SLIDER_H


2 
	#UI_SLIDER_H


	)

6 
	~"ui/ui_c‹e.h
"

7 
	~"ui/c⁄åﬁ.h
"

11 
	#SLIDER_CHILD_NUM
 (
SLIDER_CHILD_END
 - 
SLIDER_CHILD_BEGIN
)

	)

14 
	s¶idî_ãxt_öfo
 {

15 
u8
 
	mmove
;

16 
	mmö_vÆue
;

17 
	mmax_vÆue
;

18 
	mãxt_cﬁ‹
;

22 
	sui_¶idî
 {

23 
ñemít
 
	mñm
;

24 
ñemít
 
	mchûd_ñm
[
SLIDER_CHILD_NUM
];

25 
u8
 
	m°ï
;

26 
	m≥r£¡
;

27 
	mÀ·
;

28 
	mwidth
;

29 
	mmö_vÆue
;

30 
	mmax_vÆue
;

31 
	mãxt_cﬁ‹
;

32 c⁄° 
ui_¶idî_öfo
 *
	möfo
;

33 c⁄° 
¶idî_ãxt_öfo
 *
	mãxt_öfo
;

34 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

42 
ui_¶idî_£t_≥r£¡_by_id
(
id
, 
≥r£¡
);

	@include_lib/ui/ui/ui_text.h

1 #i‚de‡
UI_TEXT_H


2 
	#UI_TEXT_H


	)

4 
	~"ui/ui_c‹e.h
"

5 
	~"ui/c⁄åﬁ.h
"

6 
	~"f⁄t/f⁄t_Æl.h
"

9 
	sui_ãxt
 {

10 
ñemít
 
	mñm
;

11 c⁄° *
	m°r
;

12 c⁄° *
	mf‹m©
;

13 
	m°æí
;

14 
	mcﬁ‹
;

15 
	mícode
;

16 
	mídün
;

17 
u32
 
	mÊags
;

18 
ui_ãxt_©ås
 
	m©ås
;

19 c⁄° 
ui_ãxt_öfo
 *
	möfo
;

20 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

25 *
√w_ui_ãxt
(c⁄° *
_öfo
, 
ñemít
 *
∑ª¡
);

27 
ui_ãxt_show_ödex_by_id
(
id
, 
ödex
);

30 
ui_ãxt_£t_ödex
(
ui_ãxt
 *
ãxt
, 
ödex
);

31 
ui_ãxt_£t_°r
(
ui_ãxt
 *
ãxt
, c⁄° *
f‹m©
, c⁄° *
°r
, 
°æí
, 
u32
 
Êags
);

32 
ui_ãxt_£t_°r_by_id
(
id
, c⁄° *
f‹m©
, c⁄° *
°r
);

33 
ui_ãxt_£t_ãxt_by_id
(
id
, c⁄° *
°r
, 
°æí
, 
u32
 
Êags
);

34 
ui_ãxt_£t_ãxtw_by_id
(
id
, c⁄° *
°r
, 
°æí
, 
ídün
, 
u32
 
Êags
);

35 
ui_ãxt_£t_ãxtu_by_id
(
id
, c⁄° *
°r
, 
°æí
, 
u32
 
Êags
);

36 
ui_ãxt_£t_ãxt_©ås
(
ui_ãxt
 *
ãxt
, c⁄° *
°r
, 
°æí
, 
u8
 
ícode
, u8 
ídün
, 
u32
 
Êags
);

39 
ãxt_ªÀa£
(
ui_ãxt
 *
ãxt
);

	@include_lib/ui/ui/ui_time.h

1 #i‚de‡
UI_TIME_H


2 
	#UI_TIME_H


	)

5 
	~"ui/c⁄åﬁ.h
"

6 
	~"ui/ui_c‹e.h
"

7 
	~"ui/p.h
"

9 
	sutime
 {

10 
u16
 
	myór
;

11 
u8
 
	mm⁄th
;

12 
u8
 
	mday
;

13 
u8
 
	mhour
;

14 
u8
 
	mmö
;

15 
u8
 
	m£c
;

18 
	sui_time
 {

19 
ñemít_ãxt
 
	mãxt
;

20 
u16
 
	myór
;

21 
u8
 
	mm⁄th
;

22 
u8
 
	mday
;

23 
u8
 
	mhour
;

24 
u8
 
	mmö
;

25 
u8
 
	m£c
;

26 
u16
 
	mbuf
[32];

27 *
	mtimî
;

28 c⁄° 
ui_time_öfo
 *
	möfo
;

29 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

32 *
√w_ui_time
(c⁄° *
_öfo
, 
ñemít
 *
∑ª¡
);

34 
ui_time_upd©e_by_id
(
id
, 
utime
 *
time
);

	@include_lib/ui/ui/ui_watch.h

1 #i‚de‡
UI_WATCH_H


2 
	#UI_WATCH_H


	)

5 
	~"ui/c⁄åﬁ.h
"

6 
	~"ui/ui_c‹e.h
"

9 
	#WATCH_CHILD_NUM
 (
CTRL_WATCH_CHILD_END
 - 
CTRL_WATCH_CHILD_BEGIN
)

	)

12 
	sw©ch_pic_öfo
 {

13 
ui_˘æ_öfo_hód
 
	mhód
;

14 
u16
 
	m˚¡_x
;

15 
u16
 
	m˚¡_y
;

16 
ui_image_li°
 *
	mimg
;

20 
	sui_w©ch
 {

21 
ñemít
 
	mñm
;

22 
ñemít
 
	mchûd_ñm
[
WATCH_CHILD_NUM
];

23 
u8
 
	mhour
;

24 
u8
 
	mmö
;

25 
u8
 
	m£c
;

26 
u8
 
	mupd©a
;

27 *
	mtimî
;

28 c⁄° 
œyout_öfo
 *
	möfo
;

29 c⁄° 
w©ch_pic_öfo
 *
	mpic_öfo
[
WATCH_CHILD_NUM
];

30 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

	@include_lib/ui/ui/window.h

1 #i‚de‡
UI_WINDOW_H


2 
	#UI_WINDOW_H


	)

5 
	~"ui/œyî.h
"

6 
	~"ui/ui_c‹e.h
"

7 
	~"ui/c⁄åﬁ.h
"

8 
	~"li°.h
"

14 
	swödow
 {

15 
ñemít
 
	mñm
;

16 
u8
 
	mbusy
;

17 
u8
 
	mhide
;

18 
li°_hód
 
	míåy
;

19 
œyî
 *
	mœyî
;

20 c⁄° 
wödow_öfo
 *
	möfo
;

21 c⁄° 
ñemít_evít_h™dÀr
 *
	mh™dÀr
;

22 *
	m¥iv©e_d©a
;

26 c⁄° 
wödow_öfo
 *
wödow_èbÀ
;

30 
	#REGISTER_WINDOW_EVENT_HANDLER
(
id
) \

31 
	`REGISTER_UI_EVENT_HANDLER
(
id
)

	)

34 
wödow_show
();

36 
wödow_hide
(
id
);

38 
wödow_toggÀ
(
id
);

40 
wödow_⁄touch
(
ñemít_touch_evít
 *
e
);

42 
wödow_⁄key
(
ñemít_key_evít
 *
e
);

	@include_lib/upgrade/ecc_rs_api.h

8 #i‚de‡
_UPGRADE_ECC_RS_API_H


9 
	#_UPGRADE_ECC_RS_API_H


	)

11 #ifde‡
__˝lu•lus


17 
	secc_rs
 {

18 *
d©a_±r
;

19 
d©a_Àn
;

20 *
check_±r
;

21 *
out_±r
;

22 } 
	tECC_RS_STRU
;

25 
	secc_rs_≠i
 {

26 (*
√ed_buf
)(
max_îr
);

27 (*
öôülize_ecc
)(*
±r
, 
max_îr
);

28 (*
ícode_d©a
)(*
±r
, 
ecc_rs
 *ecc_rs);

29 (*
decode_d©a
)(*
±r
, 
ecc_rs
 *ecc_rs);

30 } 
	tECC_RS_API
;

32 
ecc_rs_≠i
 *
gë_ecc_rs_≠i
();

34 #ifde‡
__˝lu•lus


	@include_lib/upgrade/upgrade_detect.h

8 #i‚de‡
_UPGRADE_DETECT_H


9 
	#_UPGRADE_DETECT_H


	)

11 
	~"fs/fs.h
"

13 
	#UPGRADE_FROM_FILE
 0x0

	)

14 
	#UPGRADE_FROM_BUFF
 0x1

	)

15 
	#UPGRADE_FROM_FLASH_FILE
 0x2

	)

17 
	eupgøde_mesßge
 {

18 
	mUPGRADE_ERR_NONE
 = 0x0,

19 
	mUPGRADE_START
,

20 
	mUPGRADE_ERR_DEV
,

21 
	mUPGRADE_ERR_FILE
,

22 
	mUPGRADE_ERR_ADDR
,

23 
	mUPGRADE_ERR_KEY
,

24 
	mUPGRADE_ERR_MEM
,

25 
	mUPGRADE_ERR_FAILED
,

26 
	mUPGRADE_CALC_ECC
,

27 
	mUPGRADE_SUCCESS
,

30 
	supgøde_ui
 {

31 
	m°ï_m£cs
;

32 (*
	mshow_¥ogªss
)(
	m≥r˚¡
);

33 (*
	mshow_mesßge
)(
	mmsg
);

34 c⁄° *
	m∑th
;

37 
	supgøde_ªq
 {

38 
u8
 
	mty≥
;

39 
u8
 
	mf‹˚
;

40 *
	m∑th
;

41 
u8
 *
	mbuf
;

42 
FILE
 *
	mfûe
;

43 
	mbuf_size
;

44 (*
	mcom∂ëe
)(
u8
 
	msuc˚ss
);

45 
upgøde_ui
 
	mui
;

46 
boﬁ
 (*
c⁄fúm
)();

49 
upgøde_fûe_dëe˘
(
upgøde_ªq
 *
ªq
);

	@
1
.
0
667
26134
app/ap_config.c
app/debug.c
app/flash_write_protect.c
app/fontinit.c
app/net/ctp_cmd.c
app/net/include/net_config.h
app/net/include/net_video_rec.h
app/net/include/video_bitrate_ctrl.h
app/net/include/video_fps_ctrl.h
app/net/include/video_rec.h
app/net/network_mssdp.c
app/net/stream/video_rt_rtp.c
app/net/stream/video_rt_tcp.c
app/net/stream/video_rt_tcp2.c
app/net/stream/video_rt_udp.c
app/net/top-p2p/kcp_api.c
app/net/top-p2p/kcp_api.h
app/net/top-p2p/p2p_dev.c
app/net/top-p2p/test.c
app/net/top-p2p/tls_api.h
app/net/top-p2p/tls_cli_api.c
app/net/top-p2p/tls_raw_api.c
app/net/top-p2p/tls_ser_api.c
app/net/video_playback.c
app/net/video_preview.c
app/net/wifi_app_task.c
app/sd_speed_test.c
app/wifi_story_machine/app_database.c
app/wifi_story_machine/app_main.c
app/wifi_story_machine/app_music.c
app/wifi_story_machine/device_mount.c
app/wifi_story_machine/include/action.h
app/wifi_story_machine/include/ani_style.h
app/wifi_story_machine/include/app_config.h
app/wifi_story_machine/include/app_database.h
app/wifi_story_machine/include/app_music.h
app/wifi_story_machine/include/board.h
app/wifi_story_machine/include/cpu_config.h
app/wifi_story_machine/include/key_voice.h
app/wifi_story_machine/include/led_eyes.h
app/wifi_story_machine/include/main.h
app/wifi_story_machine/include/net_config.h
app/wifi_story_machine/include/res.h
app/wifi_story_machine/include/res_ver.h
app/wifi_story_machine/include/storage_device.h
app/wifi_story_machine/include/style.h
app/wifi_story_machine/include/upgrade_style.h
app/wifi_story_machine/include/video_music.h
app/wifi_story_machine/key_voice.c
app/wifi_story_machine/led_ui/led_ui_gr202.c
app/wifi_story_machine/mqtt_cmd.c
app/wifi_story_machine/turing_cmd.c
app/wifi_story_machine/turing_mqtt_cmd.c
app/wifi_story_machine/upgrade.c
app/wifi_story_machine/version.c
app/wifi_story_machine/video_music.c
app/wifi_story_machine/wifi_app_task.c
app/wire_app_task.c
cpu/AC521x/adc.c
cpu/AC521x/adkey.c
cpu/AC521x/board/board_5213B_wifi_story.c
cpu/AC521x/board/board_GR202.c
cpu/AC521x/board/board_GR202_2M.c
cpu/AC521x/debug.c
cpu/AC521x/iokey.c
cpu/AC521x/ldo.c
cpu/AC521x/power_inf.c
cpu/AC521x/ram.c
cpu/AC521x/ram.ld
cpu/AC521x/setup.c
cpu/AC521x/uart_key.c
include_lib/common/common.h
include_lib/configs/config-ccm-psk-tls1_2.h
include_lib/configs/config-default.h
include_lib/configs/config-mini-tls1_1.h
include_lib/configs/config-picocoin.h
include_lib/configs/config-suite-b.h
include_lib/net/HSM/hsm.h
include_lib/net/device/device_data.ld
include_lib/net/device/eth/DP83848.h
include_lib/net/device/eth/RTL8201.h
include_lib/net/device/eth/eth_phy.h
include_lib/net/device/eth/ethmac.h
include_lib/net/device/eth/mdio_bus.h
include_lib/net/device/wifi_dev.h
include_lib/net/ftpclient/ftpclient.h
include_lib/net/ftpserver/stupid-ftpd.h
include_lib/net/hostapdandwpa_supplicant/wpa_supplicant_event.h
include_lib/net/http/http_cli.h
include_lib/net/http/http_server.h
include_lib/net/jieli_net/dev_net_mqtt.h
include_lib/net/jieli_net/dev_net_oauth.h
include_lib/net/jieli_net/jieli_net.h
include_lib/net/jieli_net/jieli_ota.h
include_lib/net/jieli_net/jieli_result.h
include_lib/net/jieli_net/wechat_server.h
include_lib/net/json_c/arraylist.h
include_lib/net/json_c/bits.h
include_lib/net/json_c/config_j.h
include_lib/net/json_c/debug.h
include_lib/net/json_c/json.h
include_lib/net/json_c/json_c_config.h
include_lib/net/json_c/json_c_version.h
include_lib/net/json_c/json_config.h
include_lib/net/json_c/json_debug.h
include_lib/net/json_c/json_inttypes.h
include_lib/net/json_c/json_object.h
include_lib/net/json_c/json_object_iterator.h
include_lib/net/json_c/json_object_private.h
include_lib/net/json_c/json_tokener.h
include_lib/net/json_c/json_util.h
include_lib/net/json_c/linkhash.h
include_lib/net/json_c/math_compat.h
include_lib/net/json_c/printbuf.h
include_lib/net/json_c/random_seed.h
include_lib/net/kcp/ikcp.h
include_lib/net/libcoap/address.h
include_lib/net/libcoap/async.h
include_lib/net/libcoap/bits.h
include_lib/net/libcoap/block.h
include_lib/net/libcoap/coap.h
include_lib/net/libcoap/coap_config.h
include_lib/net/libcoap/coap_debug.h
include_lib/net/libcoap/coap_list.h
include_lib/net/libcoap/coap_net.h
include_lib/net/libcoap/coap_time.h
include_lib/net/libcoap/encode.h
include_lib/net/libcoap/hashkey.h
include_lib/net/libcoap/option.h
include_lib/net/libcoap/pdu.h
include_lib/net/libcoap/prng.h
include_lib/net/libcoap/resource.h
include_lib/net/libcoap/soap_mem.h
include_lib/net/libcoap/str.h
include_lib/net/libcoap/subscribe.h
include_lib/net/libcoap/t_list.h
include_lib/net/libcoap/uri.h
include_lib/net/libcoap/uthash.h
include_lib/net/libcoap/utlist.h
include_lib/net/log/elog.h
include_lib/net/log/elog_cfg.h
include_lib/net/lwip/app/cdp/cdp.h
include_lib/net/lwip/app/ctp/ctp.h
include_lib/net/lwip/app/ddns/DDNS.h
include_lib/net/lwip/app/dhcp_srv/dhcp_srv.h
include_lib/net/lwip/app/dtp/dtp.h
include_lib/net/lwip/app/mssdp/mssdp.h
include_lib/net/lwip/app/ntp/ntp.h
include_lib/net/lwip/app/sock_api/sock_api.h
include_lib/net/lwip/app/udtp/udtp.h
include_lib/net/lwip/port/arch/cc.h
include_lib/net/lwip/port/arch/cpu.h
include_lib/net/lwip/port/arch/perf.h
include_lib/net/lwip/port/arch/sys_arch.h
include_lib/net/lwip/port/lwip.h
include_lib/net/lwip/port/lwipopts.h
include_lib/net/lwip/src/include/lwip/_errno.h
include_lib/net/lwip/src/include/lwip/api.h
include_lib/net/lwip/src/include/lwip/arch.h
include_lib/net/lwip/src/include/lwip/autoip.h
include_lib/net/lwip/src/include/lwip/debug.h
include_lib/net/lwip/src/include/lwip/def.h
include_lib/net/lwip/src/include/lwip/dhcp.h
include_lib/net/lwip/src/include/lwip/dhcp6.h
include_lib/net/lwip/src/include/lwip/dns.h
include_lib/net/lwip/src/include/lwip/err.h
include_lib/net/lwip/src/include/lwip/etharp.h
include_lib/net/lwip/src/include/lwip/ethip6.h
include_lib/net/lwip/src/include/lwip/icmp.h
include_lib/net/lwip/src/include/lwip/icmp6.h
include_lib/net/lwip/src/include/lwip/igmp.h
include_lib/net/lwip/src/include/lwip/inet.h
include_lib/net/lwip/src/include/lwip/inet_chksum.h
include_lib/net/lwip/src/include/lwip/init.h
include_lib/net/lwip/src/include/lwip/ip.h
include_lib/net/lwip/src/include/lwip/ip4.h
include_lib/net/lwip/src/include/lwip/ip4_addr.h
include_lib/net/lwip/src/include/lwip/ip4_frag.h
include_lib/net/lwip/src/include/lwip/ip6.h
include_lib/net/lwip/src/include/lwip/ip6_addr.h
include_lib/net/lwip/src/include/lwip/ip6_frag.h
include_lib/net/lwip/src/include/lwip/ip_addr.h
include_lib/net/lwip/src/include/lwip/mem.h
include_lib/net/lwip/src/include/lwip/memp.h
include_lib/net/lwip/src/include/lwip/mld6.h
include_lib/net/lwip/src/include/lwip/nd6.h
include_lib/net/lwip/src/include/lwip/netbuf.h
include_lib/net/lwip/src/include/lwip/netdb.h
include_lib/net/lwip/src/include/lwip/netif.h
include_lib/net/lwip/src/include/lwip/netifapi.h
include_lib/net/lwip/src/include/lwip/opt.h
include_lib/net/lwip/src/include/lwip/pbuf.h
include_lib/net/lwip/src/include/lwip/priv/api_msg.h
include_lib/net/lwip/src/include/lwip/priv/memp_priv.h
include_lib/net/lwip/src/include/lwip/priv/memp_std.h
include_lib/net/lwip/src/include/lwip/priv/nd6_priv.h
include_lib/net/lwip/src/include/lwip/priv/tcp_priv.h
include_lib/net/lwip/src/include/lwip/priv/tcpip_priv.h
include_lib/net/lwip/src/include/lwip/prot/autoip.h
include_lib/net/lwip/src/include/lwip/prot/dhcp.h
include_lib/net/lwip/src/include/lwip/prot/dns.h
include_lib/net/lwip/src/include/lwip/prot/etharp.h
include_lib/net/lwip/src/include/lwip/prot/ethernet.h
include_lib/net/lwip/src/include/lwip/prot/icmp.h
include_lib/net/lwip/src/include/lwip/prot/icmp6.h
include_lib/net/lwip/src/include/lwip/prot/igmp.h
include_lib/net/lwip/src/include/lwip/prot/ip.h
include_lib/net/lwip/src/include/lwip/prot/ip4.h
include_lib/net/lwip/src/include/lwip/prot/ip6.h
include_lib/net/lwip/src/include/lwip/prot/mld6.h
include_lib/net/lwip/src/include/lwip/prot/nd6.h
include_lib/net/lwip/src/include/lwip/prot/tcp.h
include_lib/net/lwip/src/include/lwip/prot/udp.h
include_lib/net/lwip/src/include/lwip/raw.h
include_lib/net/lwip/src/include/lwip/sio.h
include_lib/net/lwip/src/include/lwip/snmp.h
include_lib/net/lwip/src/include/lwip/sockets.h
include_lib/net/lwip/src/include/lwip/stats.h
include_lib/net/lwip/src/include/lwip/sys.h
include_lib/net/lwip/src/include/lwip/tcp.h
include_lib/net/lwip/src/include/lwip/tcpip.h
include_lib/net/lwip/src/include/lwip/timeouts.h
include_lib/net/lwip/src/include/lwip/udp.h
include_lib/net/lwip/src/include/netif/etharp.h
include_lib/net/lwip/src/include/netif/ethernet.h
include_lib/net/lwip/src/include/netif/lowpan6.h
include_lib/net/lwip/src/include/netif/lowpan6_opts.h
include_lib/net/lwip/src/include/netif/ppp/ccp.h
include_lib/net/lwip/src/include/netif/ppp/chap-md5.h
include_lib/net/lwip/src/include/netif/ppp/chap-new.h
include_lib/net/lwip/src/include/netif/ppp/chap_ms.h
include_lib/net/lwip/src/include/netif/ppp/eap.h
include_lib/net/lwip/src/include/netif/ppp/ecp.h
include_lib/net/lwip/src/include/netif/ppp/eui64.h
include_lib/net/lwip/src/include/netif/ppp/fsm.h
include_lib/net/lwip/src/include/netif/ppp/ipcp.h
include_lib/net/lwip/src/include/netif/ppp/ipv6cp.h
include_lib/net/lwip/src/include/netif/ppp/lcp.h
include_lib/net/lwip/src/include/netif/ppp/magic.h
include_lib/net/lwip/src/include/netif/ppp/mppe.h
include_lib/net/lwip/src/include/netif/ppp/polarssl/arc4.h
include_lib/net/lwip/src/include/netif/ppp/polarssl/des.h
include_lib/net/lwip/src/include/netif/ppp/polarssl/md4.h
include_lib/net/lwip/src/include/netif/ppp/polarssl/md5.h
include_lib/net/lwip/src/include/netif/ppp/polarssl/sha1.h
include_lib/net/lwip/src/include/netif/ppp/ppp.h
include_lib/net/lwip/src/include/netif/ppp/ppp_impl.h
include_lib/net/lwip/src/include/netif/ppp/ppp_opts.h
include_lib/net/lwip/src/include/netif/ppp/pppapi.h
include_lib/net/lwip/src/include/netif/ppp/pppcrypt.h
include_lib/net/lwip/src/include/netif/ppp/pppdebug.h
include_lib/net/lwip/src/include/netif/ppp/pppoe.h
include_lib/net/lwip/src/include/netif/ppp/pppol2tp.h
include_lib/net/lwip/src/include/netif/ppp/pppos.h
include_lib/net/lwip/src/include/netif/ppp/upap.h
include_lib/net/lwip/src/include/netif/ppp/vj.h
include_lib/net/lwip/src/include/netif/slipif.h
include_lib/net/lwip/src/include/posix/errno.h
include_lib/net/lwip/src/include/posix/netdb.h
include_lib/net/lwip/src/include/posix/sys/socket.h
include_lib/net/mbedtls/aes.h
include_lib/net/mbedtls/aesni.h
include_lib/net/mbedtls/arc4.h
include_lib/net/mbedtls/asn1.h
include_lib/net/mbedtls/asn1write.h
include_lib/net/mbedtls/base64.h
include_lib/net/mbedtls/bignum.h
include_lib/net/mbedtls/blowfish.h
include_lib/net/mbedtls/bn_mul.h
include_lib/net/mbedtls/camellia.h
include_lib/net/mbedtls/ccm.h
include_lib/net/mbedtls/certs.h
include_lib/net/mbedtls/check_config.h
include_lib/net/mbedtls/cipher.h
include_lib/net/mbedtls/cipher_internal.h
include_lib/net/mbedtls/compat-1.3.h
include_lib/net/mbedtls/configs/config-ccm-psk-tls1_2.h
include_lib/net/mbedtls/configs/config-default.h
include_lib/net/mbedtls/configs/config-mini-tls1_1.h
include_lib/net/mbedtls/configs/config-picocoin.h
include_lib/net/mbedtls/configs/config-suite-b.h
include_lib/net/mbedtls/ctr_drbg.h
include_lib/net/mbedtls/debug.h
include_lib/net/mbedtls/des.h
include_lib/net/mbedtls/dhm.h
include_lib/net/mbedtls/ecdh.h
include_lib/net/mbedtls/ecdsa.h
include_lib/net/mbedtls/ecjpake.h
include_lib/net/mbedtls/ecp.h
include_lib/net/mbedtls/entropy.h
include_lib/net/mbedtls/entropy_poll.h
include_lib/net/mbedtls/error.h
include_lib/net/mbedtls/gcm.h
include_lib/net/mbedtls/havege.h
include_lib/net/mbedtls/hmac_drbg.h
include_lib/net/mbedtls/mbedtls_config.h
include_lib/net/mbedtls/md.h
include_lib/net/mbedtls/md2.h
include_lib/net/mbedtls/md4.h
include_lib/net/mbedtls/md5.h
include_lib/net/mbedtls/md_internal.h
include_lib/net/mbedtls/memory_buffer_alloc.h
include_lib/net/mbedtls/net.h
include_lib/net/mbedtls/oid.h
include_lib/net/mbedtls/padlock.h
include_lib/net/mbedtls/pem.h
include_lib/net/mbedtls/pk.h
include_lib/net/mbedtls/pk_internal.h
include_lib/net/mbedtls/pkcs11.h
include_lib/net/mbedtls/pkcs12.h
include_lib/net/mbedtls/pkcs5.h
include_lib/net/mbedtls/platform.h
include_lib/net/mbedtls/ripemd160.h
include_lib/net/mbedtls/rsa.h
include_lib/net/mbedtls/sha1.h
include_lib/net/mbedtls/sha256.h
include_lib/net/mbedtls/sha512.h
include_lib/net/mbedtls/ssl.h
include_lib/net/mbedtls/ssl_cache.h
include_lib/net/mbedtls/ssl_ciphersuites.h
include_lib/net/mbedtls/ssl_cookie.h
include_lib/net/mbedtls/ssl_internal.h
include_lib/net/mbedtls/ssl_ticket.h
include_lib/net/mbedtls/threading.h
include_lib/net/mbedtls/timing.h
include_lib/net/mbedtls/version.h
include_lib/net/mbedtls/x509.h
include_lib/net/mbedtls/x509_crl.h
include_lib/net/mbedtls/x509_crt.h
include_lib/net/mbedtls/x509_csr.h
include_lib/net/mbedtls/xtea.h
include_lib/net/mqtt/MQTTClient.h
include_lib/net/mqtt/MQTTConnect.h
include_lib/net/mqtt/MQTTFormat.h
include_lib/net/mqtt/MQTTLinux.h
include_lib/net/mqtt/MQTTPacket.h
include_lib/net/mqtt/MQTTPublish.h
include_lib/net/mqtt/MQTTSubscribe.h
include_lib/net/mqtt/MQTTUnsubscribe.h
include_lib/net/mqtt/StackTrace.h
include_lib/net/mqtt/transport.h
include_lib/net/rtp/rtp_common.h
include_lib/net/rtp/rtp_h264.h
include_lib/net/server/ai_server.h
include_lib/net/server/ctp_server.h
include_lib/net/server/net2video.h
include_lib/net/server/net_server.h
include_lib/net/server/net_server.ld
include_lib/net/server/network_mssdp.h
include_lib/net/server/packet.h
include_lib/net/server/rt_stream_pkg.h
include_lib/net/server/simple_mov_unpkg.h
include_lib/net/server/video_rt_tcp.h
include_lib/net/server/video_rt_udp.h
include_lib/net/server/wifi_connect.h
include_lib/net/streaming_media_server/abnormal_off.h
include_lib/net/streaming_media_server/fenice/264_stream_iface.h
include_lib/net/streaming_media_server/fenice/JPEG_utils.h
include_lib/net/streaming_media_server/fenice/SD_file.h
include_lib/net/streaming_media_server/fenice/bufferpool.h
include_lib/net/streaming_media_server/fenice/command_environment.h
include_lib/net/streaming_media_server/fenice/debug.h
include_lib/net/streaming_media_server/fenice/eventloop.h
include_lib/net/streaming_media_server/fenice/fnc_log.h
include_lib/net/streaming_media_server/fenice/fs_priv.h
include_lib/net/streaming_media_server/fenice/gsm.h
include_lib/net/streaming_media_server/fenice/h264.h
include_lib/net/streaming_media_server/fenice/intnet.h
include_lib/net/streaming_media_server/fenice/jpeg.h
include_lib/net/streaming_media_server/fenice/md5.h
include_lib/net/streaming_media_server/fenice/md5global.h
include_lib/net/streaming_media_server/fenice/mediainfo.h
include_lib/net/streaming_media_server/fenice/mp3.h
include_lib/net/streaming_media_server/fenice/mpeg.h
include_lib/net/streaming_media_server/fenice/mpeg4es.h
include_lib/net/streaming_media_server/fenice/mpeg_system.h
include_lib/net/streaming_media_server/fenice/mpeg_ts.h
include_lib/net/streaming_media_server/fenice/multicast.h
include_lib/net/streaming_media_server/fenice/os_priv.h
include_lib/net/streaming_media_server/fenice/pcm.h
include_lib/net/streaming_media_server/fenice/prefs.h
include_lib/net/streaming_media_server/fenice/rtcp.h
include_lib/net/streaming_media_server/fenice/rtp.h
include_lib/net/streaming_media_server/fenice/rtp_shm.h
include_lib/net/streaming_media_server/fenice/rtpptdefs.h
include_lib/net/streaming_media_server/fenice/rtsp.h
include_lib/net/streaming_media_server/fenice/schedule.h
include_lib/net/streaming_media_server/fenice/sdp.h
include_lib/net/streaming_media_server/fenice/socket.h
include_lib/net/streaming_media_server/fenice/types.h
include_lib/net/streaming_media_server/fenice/utils.h
include_lib/net/streaming_media_server/fenice/xmllexer.h
include_lib/net/streaming_media_server/fenice/xmlparser.h
include_lib/net/streaming_media_server/fenice_config.h
include_lib/net/streaming_media_server/header.h
include_lib/net/streaming_media_server/stream_pkg.h
include_lib/net/tinydtls/aes/rijndael.h
include_lib/net/tinydtls/alert.h
include_lib/net/tinydtls/ccm.h
include_lib/net/tinydtls/crypto.h
include_lib/net/tinydtls/dtls.h
include_lib/net/tinydtls/dtls_config.h
include_lib/net/tinydtls/dtls_debug.h
include_lib/net/tinydtls/dtls_time.h
include_lib/net/tinydtls/ecc/ecc.h
include_lib/net/tinydtls/ecc/test_helper.h
include_lib/net/tinydtls/global.h
include_lib/net/tinydtls/hmac.h
include_lib/net/tinydtls/netq.h
include_lib/net/tinydtls/numeric.h
include_lib/net/tinydtls/peer.h
include_lib/net/tinydtls/platform-specific/config-cc2538dk.h
include_lib/net/tinydtls/platform-specific/config-econotag.h
include_lib/net/tinydtls/platform-specific/config-minimal-net.h
include_lib/net/tinydtls/platform-specific/config-sky.h
include_lib/net/tinydtls/platform-specific/config-wismote.h
include_lib/net/tinydtls/platform-specific/platform.h
include_lib/net/tinydtls/prng.h
include_lib/net/tinydtls/session.h
include_lib/net/tinydtls/sha2/sha2.h
include_lib/net/tinydtls/state.h
include_lib/net/tinydtls/t_list.h
include_lib/net/tinydtls/tinydtls.h
include_lib/net/tinydtls/uthash.h
include_lib/net/tinydtls/utlist.h
include_lib/net/turing/turing.h
include_lib/net/web_socket/websocket_api.h
include_lib/net/web_socket/websocket_base64.h
include_lib/net/web_socket/websocket_define.h
include_lib/net/web_socket/websocket_intlib.h
include_lib/net/web_socket/websocket_sha_1.h
include_lib/net/web_socket/websocket_ssl.h
include_lib/net/wechat/dev_net_mqtt.h
include_lib/net/wechat/dev_net_oauth.h
include_lib/net/wechat/ota_update.h
include_lib/net/wechat/wechat_core.h
include_lib/net/wechat/wechat_server.h
include_lib/net/wifi_module/wifi_ext.h
include_lib/net/wifi_module/wifi_module_event.h
include_lib/net/zliblite/crc32.h
include_lib/net/zliblite/deflate.h
include_lib/net/zliblite/inffast.h
include_lib/net/zliblite/inffixed.h
include_lib/net/zliblite/inflate.h
include_lib/net/zliblite/inftrees.h
include_lib/net/zliblite/trees.h
include_lib/net/zliblite/zconf.h
include_lib/net/zliblite/zlib.h
include_lib/net/zliblite/zutil.h
include_lib/server/audio_server.h
include_lib/server/jl_camera_protocol.h
include_lib/server/led_ui_server.h
include_lib/server/server.ld
include_lib/server/server_core.h
include_lib/server/ui_server.h
include_lib/server/upgrade_server.h
include_lib/server/usb_server.h
include_lib/server/uvm.h
include_lib/server/video_dec_server.h
include_lib/server/video_engine_server.h
include_lib/server/video_server.h
include_lib/server/vpkg_server.h
include_lib/server/vunpkg_server.h
include_lib/system/app_core.h
include_lib/system/cpu/AC521x/asm/AC521x.h
include_lib/system/cpu/AC521x/asm/adc.h
include_lib/system/cpu/AC521x/asm/adkey.h
include_lib/system/cpu/AC521x/asm/audio.h
include_lib/system/cpu/AC521x/asm/avc_enc.h
include_lib/system/cpu/AC521x/asm/avo_cfg.h
include_lib/system/cpu/AC521x/asm/bus_device.h
include_lib/system/cpu/AC521x/asm/cache.h
include_lib/system/cpu/AC521x/asm/clock.h
include_lib/system/cpu/AC521x/asm/cpu.h
include_lib/system/cpu/AC521x/asm/cpu_api.h
include_lib/system/cpu/AC521x/asm/crc16.h
include_lib/system/cpu/AC521x/asm/dac.h
include_lib/system/cpu/AC521x/asm/debug.h
include_lib/system/cpu/AC521x/asm/device_drive.h
include_lib/system/cpu/AC521x/asm/devices.h
include_lib/system/cpu/AC521x/asm/dma.h
include_lib/system/cpu/AC521x/asm/drv_manage.h
include_lib/system/cpu/AC521x/asm/dsi.h
include_lib/system/cpu/AC521x/asm/gpio.h
include_lib/system/cpu/AC521x/asm/hwi.h
include_lib/system/cpu/AC521x/asm/iic.h
include_lib/system/cpu/AC521x/asm/image_enc.h
include_lib/system/cpu/AC521x/asm/imb.h
include_lib/system/cpu/AC521x/asm/imb_driver.h
include_lib/system/cpu/AC521x/asm/imc.h
include_lib/system/cpu/AC521x/asm/imc_driver.h
include_lib/system/cpu/AC521x/asm/imd.h
include_lib/system/cpu/AC521x/asm/imr.h
include_lib/system/cpu/AC521x/asm/includes.h
include_lib/system/cpu/AC521x/asm/irq.h
include_lib/system/cpu/AC521x/asm/isp_alg.h
include_lib/system/cpu/AC521x/asm/isp_customize.h
include_lib/system/cpu/AC521x/asm/isp_dev.h
include_lib/system/cpu/AC521x/asm/jive.h
include_lib/system/cpu/AC521x/asm/jlmd.h
include_lib/system/cpu/AC521x/asm/jpeg_abr.h
include_lib/system/cpu/AC521x/asm/jpeg_codec.h
include_lib/system/cpu/AC521x/asm/jpeg_decoder.h
include_lib/system/cpu/AC521x/asm/jpeg_encoder.h
include_lib/system/cpu/AC521x/asm/jpeg_haffman.h
include_lib/system/cpu/AC521x/asm/jpeg_header.h
include_lib/system/cpu/AC521x/asm/jpeg_qt_huffman.h
include_lib/system/cpu/AC521x/asm/ladc.h
include_lib/system/cpu/AC521x/asm/lcd_config.h
include_lib/system/cpu/AC521x/asm/ldo.h
include_lib/system/cpu/AC521x/asm/lock.h
include_lib/system/cpu/AC521x/asm/pap.h
include_lib/system/cpu/AC521x/asm/port_waked_up.h
include_lib/system/cpu/AC521x/asm/power_inf.h
include_lib/system/cpu/AC521x/asm/pwm.h
include_lib/system/cpu/AC521x/asm/rtc.h
include_lib/system/cpu/AC521x/asm/screen_tool.h
include_lib/system/cpu/AC521x/asm/sd_ddr_file.h
include_lib/system/cpu/AC521x/asm/sdmmc.h
include_lib/system/cpu/AC521x/asm/spi.h
include_lib/system/cpu/AC521x/asm/spiflash.h
include_lib/system/cpu/AC521x/asm/startup.h
include_lib/system/cpu/AC521x/asm/sync_buf.h
include_lib/system/cpu/AC521x/asm/sysinfo.h
include_lib/system/cpu/AC521x/asm/timer.h
include_lib/system/cpu/AC521x/asm/uart.h
include_lib/system/cpu/AC521x/asm/usb_inc.h
include_lib/system/cpu/AC521x/asm/uvc_device.h
include_lib/system/cpu/AC521x/asm/video_engine.h
include_lib/system/cpu/AC521x/asm/video_fb.h
include_lib/system/cpu/AC521x/device.ld
include_lib/system/database.h
include_lib/system/device/adkey.h
include_lib/system/device/audio_dev.h
include_lib/system/device/av10_spi.h
include_lib/system/device/camera.h
include_lib/system/device/card.h
include_lib/system/device/device.h
include_lib/system/device/device.ld
include_lib/system/device/device_data.ld
include_lib/system/device/iic.h
include_lib/system/device/includes.h
include_lib/system/device/ioctl_cmds.h
include_lib/system/device/iokey.h
include_lib/system/device/isp.h
include_lib/system/device/jl_camera.h
include_lib/system/device/key_driver.h
include_lib/system/device/lcd_driver.h
include_lib/system/device/mmc.h
include_lib/system/device/sd.h
include_lib/system/device/sdio.h
include_lib/system/device/sdio_err.h
include_lib/system/device/sdio_func.h
include_lib/system/device/sdio_host.h
include_lib/system/device/sdio_host_init.h
include_lib/system/device/sdmmc.h
include_lib/system/device/spiflash.h
include_lib/system/device/timer.h
include_lib/system/device/uart.h
include_lib/system/device/usb.h
include_lib/system/device/usb_cam_dev.h
include_lib/system/device/video.h
include_lib/system/device/video/fb.h
include_lib/system/device/video/video_ioctl.h
include_lib/system/device/videobuf.h
include_lib/system/device/vm.h
include_lib/system/device/vm_api.h
include_lib/system/event.h
include_lib/system/fs/fs.h
include_lib/system/generic/ascii.h
include_lib/system/generic/atomic.h
include_lib/system/generic/circular_buf.h
include_lib/system/generic/cpu.h
include_lib/system/generic/errno-base.h
include_lib/system/generic/gpio.h
include_lib/system/generic/includes.h
include_lib/system/generic/index.h
include_lib/system/generic/io.h
include_lib/system/generic/ioctl.h
include_lib/system/generic/irq.h
include_lib/system/generic/jiffies.h
include_lib/system/generic/lbuf.h
include_lib/system/generic/list.h
include_lib/system/generic/log.h
include_lib/system/generic/printf.h
include_lib/system/generic/rect.h
include_lib/system/generic/typedef.h
include_lib/system/generic/version.h
include_lib/system/includes.h
include_lib/system/init.h
include_lib/system/malloc.h
include_lib/system/mem_leak_test.h
include_lib/system/os/FreeRTOS/FreeRTOS.h
include_lib/system/os/FreeRTOS/FreeRTOSConfig.h
include_lib/system/os/FreeRTOS/StackMacros.h
include_lib/system/os/FreeRTOS/croutine.h
include_lib/system/os/FreeRTOS/deprecated_definitions.h
include_lib/system/os/FreeRTOS/event_groups.h
include_lib/system/os/FreeRTOS/list.h
include_lib/system/os/FreeRTOS/mpu_prototypes.h
include_lib/system/os/FreeRTOS/mpu_wrappers.h
include_lib/system/os/FreeRTOS/pi32v2/portmacro.h
include_lib/system/os/FreeRTOS/portable.h
include_lib/system/os/FreeRTOS/projdefs.h
include_lib/system/os/FreeRTOS/queue.h
include_lib/system/os/FreeRTOS/semphr.h
include_lib/system/os/FreeRTOS/task.h
include_lib/system/os/FreeRTOS/timers.h
include_lib/system/os/msg_pool.h
include_lib/system/os/os_api.h
include_lib/system/os/os_cfg.h
include_lib/system/os/os_compat.h
include_lib/system/os/os_cpu.h
include_lib/system/os/os_error.h
include_lib/system/os/os_type.h
include_lib/system/power_manage.h
include_lib/system/spinlock.h
include_lib/system/sys_config.h
include_lib/system/sys_time.h
include_lib/system/syscfg.h
include_lib/system/system.ld
include_lib/system/system_data.ld
include_lib/system/tags.h
include_lib/system/task.h
include_lib/system/timeout.h
include_lib/system/timer.h
include_lib/system/wait.h
include_lib/ui/font/font_all.h
include_lib/ui/font/font_ascii.h
include_lib/ui/font/font_big5.h
include_lib/ui/font/font_gbk.h
include_lib/ui/font/font_ksc.h
include_lib/ui/font/font_other_language.h
include_lib/ui/font/font_sdfs.h
include_lib/ui/font/font_sjis.h
include_lib/ui/font/font_textout.h
include_lib/ui/font/language_list.h
include_lib/ui/includes.h
include_lib/ui/res/font_ascii.h
include_lib/ui/res/quicklz.h
include_lib/ui/res/resfile.h
include_lib/ui/ui/control.h
include_lib/ui/ui/img.h
include_lib/ui/ui/layer.h
include_lib/ui/ui/layout.h
include_lib/ui/ui/p.h
include_lib/ui/ui/play_control.h
include_lib/ui/ui/slider.h
include_lib/ui/ui/ui.h
include_lib/ui/ui/ui.ld
include_lib/ui/ui/ui_animation.h
include_lib/ui/ui/ui_battery.h
include_lib/ui/ui/ui_browser.h
include_lib/ui/ui/ui_button.h
include_lib/ui/ui/ui_camera.h
include_lib/ui/ui/ui_core.h
include_lib/ui/ui/ui_file_attrs.h
include_lib/ui/ui/ui_grid.h
include_lib/ui/ui/ui_pic.h
include_lib/ui/ui/ui_player.h
include_lib/ui/ui/ui_slider.h
include_lib/ui/ui/ui_text.h
include_lib/ui/ui/ui_time.h
include_lib/ui/ui/ui_watch.h
include_lib/ui/ui/window.h
include_lib/upgrade/ecc_rs_api.h
include_lib/upgrade/upgrade_detect.h
